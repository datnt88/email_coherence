<s> From the draft:  </s>
<s> Issue XPath-30: Eliminate the reusable result argument.  </s>
<s> Resolution: No change.  </s>
<s> No. We have use cases for it, and there is already an implementation  </s>
<s> showing there  is nothing wrong with it.  </s>
<s> At least, I would like to have the wording changed on the description of the result argument.  </s>
<s> It currently reads: The result specifies a specific XPathResult which may be reused and returned by this method.  </s>
<s> If this is specified as null or the implementation cannot reuse the specified result, a new XPathResult will be constructed and returned.  </s>
<s> The problematic part is "cannot reuse" since that implies that implementation must try to reuse the result set even if the implementor knows that reusing the argument is going to be more expensive than creating a fresh result object.  </s>
<s> The description should be worded so an implementation is completely free to disregard the result argument.  </s>
<s> I was hoping that another person who also commented on this method was going  </s>
<s> to benchmark any difference in performance between reusing a result set and  </s>
<s> passing null consistently.  </s>
<s> My instinct is that any performance gain is negligible.  </s>
<s> going  </s>
<s> and  </s>
<s> The gain -- or loss -- is going to be highly implementation dependent, based on how much overhead that particular code (and the platform it's running on) imposes on creating a new instance of the object.  </s>
<s> There may be a good reason for letting applications pass this parameter in as an optimization hint -- but also a good reason for letting the implementation decide whether accepting that hint makes sense.  </s>
<s> So I agree that the wording should be "cannot or choses not to", or something along those lines, and that users should always never assume that the object passed in will be the same as the one which is returned.  </s>
<s> Joe Kesselman / IBM Research  </s>
<s> It was not the intent that the language imply that the implementor must try to reuse it, or that the implementation should do any more than it is programmed to do, which is typically thought to be deterministic in terms of what it can "can" and "cannot" do.  </s>
<s> If better wording can be found, this would be a minor change that does not affect the intent.  </s>
<s> On one hand, any implementation could be distorted enough to make it work if the implementor were forced to, and on the other hand, if any implementor rejects the impact of reuse, is just too lazy to reuse, or only chooses to reuse those opjects located at addresses with an even number of bits set, then you have an implementation that cannot reuse the object in question, even if you argue that the implementor could have trivially made the implementation able to reuse it.  </s>
<s> I am still fishing for better wording.  </s>
<s> I once had a technical writer who shot me down every time I implied that programs have free will to choose to do something, and we already have confusion here between the choice of the implementation and the choice of the implementor.  </s>
<s> Ray Whitmer rayw@netscape.com  </s>
<s> Possible alternative wording: "If a non-null result-set object is passed in, the implementation may update its contents and return that object rather than generating and returning a new instance."  </s>
<s> "May" is our traditional flag that it's entirely up to the implementation (as opposed to "should" or "must"), and this phrasing avoids any question of whether this decision is good or bad, consistant or inconsistant, or who/what makes the decision.  </s>
<s> If we feel it'd be helpful to explain why someone might think this behavior was good or bad, that could go in a second sentence... but this is starting to get into our traditional descriptive-versus-discursive grey area; it's not clear that whether design philosophy belongs in the spec or in the FAQ.  </s>
<s> Joe Kesselman / IBM Research  </s>
<s> There are two other concerns regarding reuse that come to mind.  </s>
<s> The first concern is would be the potential surprise resource hit by keeping a result set around for potential reuse.  </s>
<s> Quite a few of the result sets would have trivial costs to maintain for reuse (number values and the like) and an application might try to do some caching of XPathResult for future reuse.  </s>
<s> However, a partially traversed iterator would keep the associated document from going out of scope and could have an very high cost to maintain in the cache.  </s>
<s> This might suggest some sort of close()/detach() method that would release any resources locked by the result set and would cause most method calls to raise some type of invalid state exception.  </s>
<s> The second concern is that allowing reuse makes it unsafe to provide access  </s>
<s> to a result set that is part of the state of an object, since there is  </s>
<s> nothing to prevent code that gets access to a result set from reusing it for a totally random query.  </s>
<s> Something like: class Foo { private XPathResult snapshotOfBarElements; public XPathResult getBarElements() { return snapshotOfBarElements; public double getTotalCost() { // some iteration over bars XPathResult bars = myFoo.getBarElements();  </s>
<s> // this could really screw up the myFoo object XPathResult count = xpathEval.evaluate("count(*)",docelem,null,NUMBER_TYPE,bars);  </s>
<s> // likely to fail double cost = myFoo.getTotalCost();  </s>
<s> This could be addressed by providing a mechanism that where the application  </s>
<s> can mark a XPathResult as not being reusable.  </s>
<s> This might take the form of a  </s>
<s> read/write boolean property (allowReuse for example) where trying to set the value to true from false would be ignored.  </s>
<s> So you could do public XPathResult getBarElements() { snapshotOfBarElements.setAllowReuse(false);  </s>
<s> return snapshotOfBarElements; And would not have the possibility for the caller to corrupt the state of the object.  </s>
<s> On Thursday, 03/28/2002 at 01:11 MST, "Arnold, Curt"  </s>
<s> access  </s>
<s> No different from any other mutable object, right?  </s>
<s> If this is a concern for the user, s/he passes in null and obtains a new instance.  </s>
<s> If they _know_ they can safely reuse, they do so.  </s>
<s> Give them the tool, let them figure out when to use it and when not to.  </s>
<s> application  </s>
<s> Frankly, that strikes me as overkill -- if you don't _know_ that it's reusable in your context you should assume it isn't, again just like any other mutable object -- but if folks really thought a safety net was necessary ... Joe Kesselman / IBM Research  </s>
<s> The potential for reuse does make any XPathResult effectively mutable and so would suggest that any public method that would return an XPathResult return a defensive copy of its state and not the XPathResult that it holds (per item #18 or so in Effective Java, I need to order another copy).  </s>
<s> The same way that you would return a clone of an array instead of the array itself to prevent a careless or hostile caller from changing an object's state without the object's participation.  </s>
<s> Unfortunately, there is not an easy way to create a defensive copy of an XPathResult short of evaluating the query again, which could be expensive or wrapping the result in a read-only wrapper, which is an pretty advanced technique.  </s>
<s> Relying on the caller to honor its contract not to reuse the XPathResult that you returned could be prone to failure.  </s>
<s> For example, if there were code like: XPathResult result; while(something) { if(cond1) { // result is safe to reuse result = xpathEval.evaluate(...); else { // result is not safe to reuse result = myFoo.getBarElements();  </s>
<s> // much later code, could dork myFoo result = xpathEval.evaluate(...,result); Providing a mechanism to clone a result set would probably be a better solution than the canAllowReuse that I mentioned in the earlier message.  </s>
<s> If an implementation knew that its XPathResult was immutable, it could just return "this", otherwise it could do some lightweight copy of the XPathResult.  </s>
