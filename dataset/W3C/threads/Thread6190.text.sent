Hi, I have few comments on this WD which I think is meeting a real need. 
* I think that you should add a definition in your Terminology section stating that unless otherwise qualified, the word "processor" means a XML processor compliant to the xml:id specification (otherwise, people can read that spec as a modification of the XML rec.). 
* You make a reference to XML 1.0 but do not mention XML 1.1. 
It might be a good idea to mention if it applies to XML 1.1 as well (I don't why it couldn't) * (#id-strictness) I really don't like the idea of non validating parsers having to report errors when a XML document is well formed but the xml:id is mis-used. 
I'd prefer that you say that non validating parsers may report errors and add a comment suggesting that they add properties to switch this error reporting on and off. 
* The fact that xml:id relies on the XML infoset restricts its scope to XML documents that are conform to namespaces in XML. 
Is that really needed? 
xml:space and xml:lang on one hand and DTD IDs on the other hand work for any XML document, why couldn't it be the case for xml:id? 
Thanks for that spec, Eric Did you know it? 
Python has now a Relax NG (partial) implementation. 
Upcoming XML schema languages tutorial: - Amsterdam -half day- (18/04/2004) http://masl.to/?P220516D7 Eric van der Vlist http://xmlfr.org 
http://dyomedea.com 
(ISO) RELAX NG ISBN:0-596-00421-4 http://oreilly.com/catalog/relax 
(W3C) XML Schema ISBN:0-596-00252-1 http://oreilly.com/catalog/xmlschema 
Hi Eric, Good point. 
For the conformance section 5 we used the term "application" to avoid any risk of confusion there, but apparently we need to watch uses of "processor" too. 
Hum, right, this should work as well with 1.1 The problem is that we want as much as possible the xml:id processor to report case where using a validating or a non-validating processor would give different result. 
This is an extra layer (at least logically) on top of the processor and if that layer can detect misuse shouldn't it report them. 
Section 4.3 states: "A processor that does neither DTD nor XML Schema validation must report xml:id attributes..." i.e. recognized xml:is must be reported by the processor. 
But "If those conditions are not satisfied then the processor should report the error to the application." 
it's a should so I think the spec already provide some flexibility about not reporting xml:id problems. 
Is there a specific part you looked at which you think contradicts with section 4.3 ? 
Well, defining the xml:id processing behaviour is far easier to do based on the XML infoset which is really the best specification to use to describe the transformation of an xml:id (post-)processor. 
I don't see anything preventing processors not based on the XML infoset from implementing xml:id but based on their own mechanism to reflect IDness of an attribute, and in such a context documents for which the XML infoset is not defined could still be processed. 
I actually expect my own implementation to work that way. 
Daniel Daniel Veillard | Red Hat Network https://rhn.redhat.com/ 
veillard@redhat.com 
| libxml GNOME XML XSLT toolkit http://xmlsoft.org/ 
Hi Daniel, No, I was referring to this section. 
I think that the distinction between well formness and validity is really important in XML and I really like the fact that with libxml (an other XML parsers) I can read any well formed document and switch validation on only when I want. 
To me, non respect of the xml:id spec cannot be considered as similar to a well formness error (you can still understand the basic tree structure of your document and build an infoset if the xml:id are wrong, and, furthermore, the notion of well formness is normatively defined in the XML recs) but more like a validity error. 
That this might be clarified in the spec and I do hope that the parsers will enable to switch this error reporting on and off. 
That's probably more theoretical than a real world case, but as I read it, making reference to the XML Infoset as the consequence that xml:id can't be applied to that perfectly well formed XML document: Or even that one: because strictly speaking, they don't have XML infosets! 
Eric If you have a XML document, you have its schema. 
Upcoming XML schema languages tutorial: - Amsterdam -half day- (18/04/2004) http://masl.to/?P220516D7 Eric van der Vlist http://xmlfr.org 
http://dyomedea.com 
(ISO) RELAX NG ISBN:0-596-00421-4 http://oreilly.com/catalog/relax 
(W3C) XML Schema ISBN:0-596-00252-1 http://oreilly.com/catalog/xmlschema 
I don't see any conflict between the spec as written and the behaviour you suggest. 
Sure those are "like" validity errors, they don't destroy the Infoset passed, in the worse case you get an error message from the xml:id layer and no addition to the Infoset. 
I think "should" carry the flexibility potential you ask for. 
Maybe that can be changed as 'should at the user option report the error to the application.' though I prefer the idea that by default such error be reported. 
I think I understood your point. 
You're saying "xml:id can't be applied" to such document and I'm answering ""xml:id is not defined" for it. 
That doesn't mean it can't be applied. 
Trying to define xml:id without an Infoset sounds a far more difficult than useful exercise since the semantic of xml:id for such document can be derived from the semantic in the case of document with an Infoset. 
Similary XInclude is not formerly defined when such a document is included. 
I don't think that prevent implementations from working with them. 
Daniel Daniel Veillard | Red Hat Network https://rhn.redhat.com/ 
veillard@redhat.com 
| libxml GNOME XML XSLT toolkit http://xmlsoft.org/ 
