EntityReference is supposed to (appear to) contain a read-only copy of the data stored in the Entity. 
I'm looking for a more elegant method of achieving that. 
The alternatives I've looked at are: 1) Store the Entity's children as read-only, and preserve that when they get cloned into the EntityReference. 
Works, but makes editing them a bit awkward in tools which permit manipulation of both the DTD and the document. 
2) Have EntityReference's replicate-entity-contents code do an additional walk over the cloned subtree to set this flag. 
Works, but requires that the subtrees be walked twice -- once to clone, and again to set them readonly. 
3) Add a "boolean makeReadOnly" parameter to cloneNode() which sets this flag during the same tree-walk that copies everything else. 
Works, but would have to be made part of the official DOM API since otherwise applications that subclass the DOM wouldn't know that they had to patch this version of cloneNode() to support their added fields. 
Of those three, I'm most attracted by the third; it's easy, fast, and might be useful in other situations where readonly nodes were desired. 
But I suspect it's too late to lobby for this to be included in DOM Level 1...? Joe Kesselman / IBM Research Unless stated otherwise, all opinions are solely those of the author. 
Joe Kesselman scripsit: 
I don't think you can, really. 
The children of an EntityReference 
can't be the same objects as the children of an Entity, because of the Node.getParent() method, which must return a different result in each case. 
If you can figure a way around this problem, your other problems are fairly straightforward. 
John Cowanhttp://www.ccil.org/~cowancowan@ccil.org 
You tollerday donsk? 
N. 
You tolkatiff scowegian? 
Nn. 
You spigotty anglease? 
Nnn. 
You phonio saxo? 
Nnnn. 
Clear all so! 'Tis a Jute.... (Finnegans Wake 16.5) 
I suspect that the solution may be to note that, as far as I can tell, nothing in the specification says that the parent of these ``virtual children'' has to be the EntityReference node. 
It could, in fact, be their ``real'' parent, the Entity. 
This makes traversal harder, of course, but only because TreeNodeIterator is no longer in the spec. 
Nothing prevents an implementor from defining it 
locally, however. 
As far as I can tell the only other alternative is to (perhaps lazily) copy the children. 
I note in passing that Node does not appear to have a ``readonly'' attribute, so that the only way to determine whether a Node is readonly is 
to attempt to modify it and see whether that throws an exception. 
This seems like an oversight. 
In my opinion, having Node.getParentNode in the spec is a serious mistake, since it rules out implementations that share structure. 
But nobody asked me. 
Maybe it can be made optional in Level 2. 
Stephen R. Savitzky Chief Software Scientist, Ricoh Silicon Valley, Inc., steve@rsv.ricoh.com 
California Research Center home: steve@starport.com 
URL: http://www.starport.com/people/steve/ 
Note that for XML design tools, which may edit the DTD, cloning the kids isn't enough. 
To support those, EntityReference also has to be aware when Entity has changed and refresh itself. 
Only if the design tool (editor?) actually expands the EntityReference, which I suspect it's not likely to do while you're editing. 
If I wanted to 
see the expansions (perhaps in some kind of preview window), I'd implement it using some kind of tree traverser that went directly to the Entity rather 
than blindly descending into the children of the EntityReference. 
It all comes back to the fact that there's no TreeIterator anymore, so people are trying to make parentNode do all the work of keeping track of traversal state as well as the underlying structure. 
It can't do both without massive inefficiency. 
Stephen R. Savitzky Chief Software Scientist, Ricoh Silicon Valley, Inc., steve@rsv.ricoh.com 
California Research Center home: steve@starport.com 
URL: http://www.starport.com/people/steve/ 
The table of valid node children in clause 1.1.1 says inter alia: # EntityReference -- Element, ProcessingInstruction, Comment, Text, # CDATASection, EntityReference # Entity -- no other nodes [permitted as children] whereas the discussion of Entity nodes in clause 1.3 says: # The structure of the child list is exactly the same as the # structure of the child list for an EntityReference with the same # nodeName value. 
This is a flat contradiction. 
Editors, can you comment? 
John Cowanhttp://www.ccil.org/~cowancowan@ccil.org 
You tollerday donsk? 
N. 
You tolkatiff scowegian? 
Nn. 
You spigotty anglease? 
Nnn. 
You phonio saxo? 
Nnnn. 
Clear all so! 'Tis a Jute.... (Finnegans Wake 16.5) 
I agree. 
Hence my suggestion of clone-while-making-read-only, to avoid an extra tree-walk. 
Note that for XML design tools, which may edit the DTD, cloning the kids isn't enough. 
To support those, EntityReference also has to be aware when Entity has changed and refresh itself. 
Which brings up all the usual nasty questions about exactly when Entity (and hence the application) actually discovers this change, plus another set of challenges to deal with if/when we add multitasking support. 
Joe Kesselman / IBM Research Unless stated otherwise, all opinions are solely those of the author. 
as far as I can tell, nothing in the specification says that the parent of these ``virtual children'' has to be the EntityReference node. 
I tried very hard to interpret the spec that way, but I think I did find words that kept me from being able to do so. 
I should recheck that. 
For interoperability's sake, the DOM spec should probably either say that they're real children or explicitly say they aren't required to be so. 
That's my current solution. 
As I said in the other note, if you want to allow editing the DocumentType you also have to track that and refresh the EntityReference at appropriate times. 
(Definition of "appropriate" is open to debate, admittedly.) 
I get the impression that readonly was something of a last-minute addition... Note that there's not only no getter method, there's no setter either. 
I've addressed that by having EntityReference set the readonly flag when it builds its kids, just to avoid adding yet another non-DOM public method. 
This is supposedly why Attributes no longer have parents. 
Of course, as discussed in the past, INUSE_ATTRIBUTE_ERR makes taking advantage of that difficult. 
It _is_ convenient to be able to ask a node for its parent. 
As one example, it allows the user to walk the tree without maintaining a parent stack (either manually or via recursion). 
And most nodes really don't need shared parentage; one can argue that anything which is being shared should probably have been an Entity to begin with. 
If I Were King, rather than removing Node.getParentNode, I'd redefine EntityReference so it is _only_ a reference and ask applications to understand that they need to look at the Entity if they want to know what it contains. 
As far as optional features go: Please don't. 
Much as I'd like to see some things in Level 1 redone (the deep version of NodeList in particular), I think it's as important -- or more important -- to have Level 2 be a direct superset of Level 1's funcationality. 
The right answer if there's a problem in Level 1 is to fix Level 1's spec... but as I understand the process, at this point only harmless changes or complete showstoppers are being accepted, and this falls somewhere in the middle. 
Joe Kesselman / IBM Research Unless stated otherwise, all opinions are solely those of the author. 
This will be fixed in the final spec. 
The description is correct; the table is wrong. 
Lauren 
Good catch. 
I think the 1.1.1 table's the one with the typo. 
Joe Kesselman / IBM Research Unless stated otherwise, all opinions are solely those of the author. 
to 
rather 
This presumes that you're the author of the editor. 
If I'm trying to allow for things an editor might do and expect to work, I think the bias goes the other way. 
But we probably won't know until the DocumentType spec is nailed down in Level 2; Level 1's design of that part of the DOM is known to be incomplete and is intended more as a statement of direction than anything else. 
You're right, if one has an iterator/visitor class built into the DOM it could synthesize context-dependent parentage. 
But we ain't got it in Level 1, and unless Level 1 changes and/or Level 2 is allowed to be incompatable with Level 1 (neither of which I really expect to happen, though I'd greatly prefer the former to the latter), we have to implement what we've got -- and then hope that people realize that the Level 2 mechanisms may be considerably more efficient than the Level 1 equivalents. 
BTW, I found the wording that I think prevents the imaginary-child solution. 
EntityReference, third paragraph, explicitly refers to "the _children_ of the EntityReference" -- ergo the value is in fact children, which implies that their parent must in fact be the EntityReference. 
Much as one might wish otherwise, that word sets a whole suite of behaviors. 
In fact, that paragraph goes on to mention lazy evaluation, presumably as a mechanism for not burning the additional space for these kids until/unless they're actually touched. 
If we _can_ simply point to the Entity's subtree and tolerate the fact that its parent links won't bring us back to the EntityReference, I'll take it -- but in that case we need an explicit statement in EntityRef's description that this departure from the tree model is permitted. 
Without some such permission, this has to be put in the same category as getElementsByTagName -- inefficient by design, in exchange for simplifying the API to the point where a novice programmer won't have to learn any new concepts. 
That's not my preferred tradeoff point, but it seems to be where Level 1 was targeted. 
Joe Kesselman / IBM Research Unless stated otherwise, all opinions are solely those of the author. 
