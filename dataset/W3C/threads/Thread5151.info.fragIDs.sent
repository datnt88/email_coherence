Hi! 
I am currently considering to write a SVGPrint driver for our Mozilla/Eclipse/OpenOffice... after reading quickly throught the documentation I did not find a description how font download (e.g. fonts embedded within the print job) can be implemented (this is a critical issue for CJKV (e.g. Asian) languages where it isn't likely that the printer has all fonts the document uses) - was that issue defined somewhere yet or is that a ToDo item for the future ? 
Bye, Roland (o.\ \/ /.o) Roland.Mainz@informatik.med.uni-giessen.de 
\__\/\/__/ MPEG specialist, C&amp;&amp;JAVA&amp;&amp;Sun&amp;&amp;Unix programmer (;O/ \/ \O;) 
Hi Roland, 
SVG itself has SVG fonts as a native type of font. 
If you were embedding glyphs for a CJKV document, you can do it via the use of SVG fonts. 
If you mean downloading OpenType or similar fonts, this is a vendor specific issue. 
I expect that individual vendors would mandate how that is done - most probably via some form of job bundling using JDF or similar. 
Hope that helps. 
Alex 
I wasn't aware that there is a spec for font outlines described via SVG. 
Sounds nice - but it seems to have to write another converter (TTF/OTF/PS Type1/BDF/PCF) -- SVG-Font... ;-( Two questions: - Is there already such a converter available somewhere ? 
- IS there any utility which supports SVG fonts (to test the output of my converter code) ? 
It seems that the "SVG fonts" option is the way which should be used for 
SVGPrint, otherwise the neccesary support code within devices such as printers would become much larger just to support another bunch of font 
formats (and the SVGPrint spec would need to specify a standard for downloading such "alien" (e.g. non-XML syntax based) font formats). 
Bye, Roland (o.\ \/ /.o) Roland.Mainz@informatik.med.uni-giessen.de 
\__\/\/__/ MPEG specialist, C&amp;&amp;JAVA&amp;&amp;Sun&amp;&amp;Unix programmer (;O/ \/ \O;) 
Hi Roland, 
I believe there is a converter for TrueType somewhere, I can't remember where though. 
The Adobe &amp; Corel SVG plugins &amp; Batik's Squiggle viewer will support display of SVG fonts. 
Yes, also SVG fonts allow for exactly reproducable results on all implementations and have good support for Unicode as well. 
Alex 
Please drop me an email if you find a Freetype2-based one... :) 
Mhhh, is any one of these canidates supported on Linux/x86 and/or Solaris/SPARC ? 
... but it seems there is currently no support for hinting (OKOK, it's debateable whether hinting makes sense at 600DPI :) and some neat stuff from OpenType isn't available either. 
Bye, Roland (o.\ \/ /.o) Roland.Mainz@informatik.med.uni-giessen.de 
\__\/\/__/ MPEG specialist, C&amp;&amp;JAVA&amp;&amp;Sun&amp;&amp;Unix programmer (;O/ \/ \O;) 
I played around trying to get Freetype2 to export SVG fonts. 
The SVG bit is fairly easy. 
For some reason I was having trouble with Freetype (probably using the wrong APIs). 
The truetype- SVG convertor Alex mentioned is part of the Apache Batik project http://xml.apache.org/batik 
There is another convertor here: 
Support for SVG font (outlines) is required for conformance to any profile of SVG (Tiny, Basic or Full). 
So, lots of viewers support it (eg. the BitFlash and ZOOMON mobile viewers). 
Batik is Java, so it runs on Solaris and Linux, and has source code. 
The Adobe viewer also runs on linux and solaris. 
We are considering adding hinting in SVG 1.2, but we can't promise it yet. 
There is also the alternative to embed the OpenType (or whatever format) 
font within the SVG using base64 encoding and the CSS Web Font facility. 
Illustrator does this, with an Adobe specific font format called CEF. 
Dean 
Take a look at - that's a very very simple FreeType2--- PS Type3 outline font converter - does that help somehow ? 
Thanks! :) 
Nice... seems I have lots of tools for testing my code... :) 
What about doing the reverse, e.g. adding features from the OpenType/AAT (Apple Advanced Typograph) repository to the SVG1.2-Fonts feature list ? 
Questions is whether this is wise since this will add extra complexity to the code in the destination device. 
It may be better to say explicitly "NO" to non-"SVG font"-based fonts to avoid that implementors all do their "proprietary" font formats, making it hard to exchange SVGPrint documents without running into font format mismatch problems between generator and viewer (one alternative would be to create a SVGPrint version of Adobe's PPD (again, more complexity, more fun for the people who have to implement this and more pain for the enduser example who doens't understand why his laptop SVG viewer refuses to load a SVGPrint document while the mobile phone can display it /example Bye, Roland (o.\ \/ /.o) Roland.Mainz@informatik.med.uni-giessen.de 
\__\/\/__/ MPEG specialist, C&amp;&amp;JAVA&amp;&amp;Sun&amp;&amp;Unix programmer (;O/ \/ \O;) 
