My understanding on notations is that the ExternalId used refers to some processor capable of interpreting the data (e.g. a program that can read and display GIF bitmaps if the external binary resource is in fact a GIF bitmap). 
Do I read this correctly? 
As defined by SGML, notations first and foremost associate a local notation name with the specification (documentation) for that notation. 
In particular, the public identifier for a notation identifies the specification. 
System IDs for notations are often (but not necessarily) used to point to processors for the notation (they could also point to the documentation). 
But note that system IDs, being system-specific, are not reliable. 
Therefore, the declaration of a notation with a system ID should never be taken as a permanent or persistent association of the notation with a particular processor. 
Or said another way, systems may map notations to processors, but any such mapping is processor-specific and not required by SGML (or, presumably, by XML). 
If my understanding of NOTATION is correct (from section 4.6 in the working draft at NOTATION in effect says "I don't know how to deal with this external resource, but here is the identifier of some processor that does." 
Data types would be saying "This is a number (date, time, etc.) I make no recommendations regarding processing." 
Notations can actually do both jobs (just as mime types do). 
The notation says "here's something in a notation that is different from (or more than) SGML (or XML)", here's a pointer to the documentation for the data type, and, by the way, here's a program you might try using to process it, if you feel like it. 
In our use of notations to do formal definition in the HyTime standard, we've tried to distinguish between the use of notations to define semantics applied to data and lexical types to define the syntax for data. 
While a notation may imply or require a certain syntax (e.g., the notation "SGML" defines both the semantics of SGML processing and the lexical constraints on SGML documents), lexical types only specify the lexical rules and do not define semantics directly. 
Cheers, Eliot 
My understanding on notations is that the ExternalId used refers to some processor capable of interpreting the data (e.g. a program that can read and display GIF bitmaps if the external binary resource is in fact a GIF bitmap). 
Do I read this correctly? 
If so, that is somewhat different from identifying the resource as a GIF bitmap in a universal way. 
It would certainly be different from identifying "1234.56" as being a number in the following example: or this as being a date: 
If my understanding of NOTATION is correct (from section 4.6 in the working draft at NOTATION in effect says "I don't know how to deal with this external resource, but here is the identifier of some processor that does." 
Data types would be saying "This is a number (date, time, etc.) I make no recommendations regarding processing." 
--Andrew Layman AndrewL@microsoft.com 
From:Martin Bryan [SMTP:mtbryan@sgml.u-net.com] 
Sent:Wednesday, June 11, 1997 8:06 AM Subject:Re: Update on namespaces 
Where this is leading, therefore is that I think XML should allow 
NOTATIONS attributes 
on elements (with architectural form XML-NOTATIONS or XML-TYPE), 
Seconded 
and NOTATION declarations 
It already allows these 
and that NOTATION declarations should have something that allows 
them 
to chain (e.g. "USES"). 
Why not data attributes with an XML-USES attribute? 
Furthermore, it should allow (with the appropriate changes to ISO 
8879) What changes other than the new TC would be required? 
a SEEALSO parameter on the DOCTYPE declaration, to declare notations that 
together convert the 
element set declarations into a DTD (document type definition). 
E.g: 
What does this mean? 
Martin Bryan, The SGML Centre, Churchdown, Glos. 
GL3 2PU, UK 
In this whole web/SGML excercise, I regard the web as an SGML system (with entity resolution equivalent to URL resoltion). 
So as long as the universe of discourse is the web, URLs as system IDs are reliable. 
XML is intended to be interoperable with systems that exceed the confines of the web, and public identifiers can facilitate that interoperability. 
(They can provide redundancy within the web as well.) 
But if the web is your only target, URLs are all you need. 
Dan Connolly 
That was the original intent as I understand it, but I've never seen !NOTATION... actually used that way, and it would make very little sense to do so, at least for general SGML. 
The idea that there is *one* application capable of doing all possible processing on a data entity, and moreover that the location of that application should be hardwired into the DTD, is in direct contradiction to the principles of data reuse and system independence. 
The situation might be different for XML; since we're assuming a Web-based environment it *might* make sense to specify the URI of a Java applet -- all that's missing is an API with which the applet can interact with the application -- but that would leave Perl, Python, Tcl, et cetera-based XML processors out of the picture. 
IMO Internet Media Types (MIME types) would make much more sense as notations' SYSTEM identifiers in XML. 
The XML draft does lend itself to that interpretation. 
In full SGML though -- where NOTATIONs can be associated with external CDATA entities (which XML lacks) and elements -- they are often used to indicate data types in the sense you describe. 
--Joe English jenglish@crl.com 
Actually, that is precisely how the MID specification indicates a "known" processor which the preparer of the document is indicating will work. 
It was convenient. 
Hmm. It is an odd place to put it, I grant you. 
Would you preferred it to have been in the instance? 
If you wanted to move the information/data naming the processor or processor type, and you don't have MIME, how would you do it? 
It indicates the type of a processor/handler. 
End of story. 
How does that get registered? 
IOW, VRML/JAVA have CLASSPATH: will XML have some equivalent for that? 
They do both, but they don't indicate data types, but name a document that defines the data types. 
Correct? 
So in that sense, they are in situ, only names. 
One is the name of a document; the other is presumably the name of a processor that the DTD emitter *says* handles whatever that document defines. 
How useful is that pair of names in that form? 
len 
