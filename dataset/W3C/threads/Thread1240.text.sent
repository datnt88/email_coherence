Charset aliases: NONE Suitability for use in MIME text: NO Published specification(s): The IETF registration imposes one additional constraint: if there is no initial BOM then the byte-orientation must be big-endian. 
That is, in any stream that does not begin with the (hex) byte sequence 00 00 FE FF all of the bytes are interpreted as big-endian. 
Note: This is parallel to the IETF registration of UTF-16. 
As defined by the Unicode Standard Version 3.1, without a BOM the byte orientation of UTF-32 and UTF-16 could be either little-endian or big-endian. 
The choice of byte orientation would be determined by a higher-level protocol. 
The IETF registration is such a protocol, and constrains the byte orientation to be big-endian for determinant interpretation. 
ISO 10646 equivalency table: Also in http://www.unicode.org/unicode/reports/tr19/ 
Additional information: Mark Davis 2509 Alpine Road, Menlo Park, CA 94025 mark@unicode.org 
Intended usage: LIMITED USE Small correction: This must read: ... in any stream that does not begin with the (hex) byte sequence FF FE 00 00 all of the bytes are interpreted as big-endian. 
Explanation: Mark had the BE BOM in his sentence. 
It must be "everything that does not begin with the LE BOM is big-endian". 
One might add a note that UTF-32 with a little-endian BOM could appear to have a UTF-16 LE BOM because that is a subset. 
The UTF-32 registration might specify that FF FE 00 00 is UTF-32 (little-endian), and that FF FE xx xx with not both xx bytes 00 is UTF-16 (little-endian). 
markus Has anyone looked to see how this ties in with: Extensible Markup Language (XML) 1.0 (Second Edition) Autodetection of Character Encodings (Non-Normative) Misha Visit our Internet site at http://www.reuters.com 
Any views expressed in this message are those of the individual sender, except where the sender specifically states them to be the views of Reuters Ltd. 
No problem. 
XML defines slightly more protocol: Since the first character is either a BOM or a ' ', one can detect UTF-32 in either endianness even without a BOM. 
markus I took a quick look. 
The section already talks about 4-byte codes. 
Replace UCS-4 by UTF-32 in that section and it would seem to cover it. 
A./ I think that the w3c specs should rather refer the 10646 specs, and thus keep the reference to UCS-4. 
We deliberately introduced the term UTF-32 since this regularizes the notation for everyone. 
Little is to be gained by using a mixed notation in that section using UTF-8, UTF-16 and UCS-4 together. 
If you would like to fix the 10646 spec, you could propose that the term UTF-32 is formally added there as well. 
As it stands, 10646 has an unfortunate asymmetry in notation that is cumbersome to use for the non-specialist. 
A./ I think that the w3c specs should rather refer the 10646 specs, and thus keep the reference to UCS-4. 
You really should not do this. 
UCS-4 is the canonical representation of 10646. 
UTF-32 would be misleading, as the UCS-4 is not a transformation format, but the "real thing". 
Kind regards Keld Which one? 
Little endian? 
Big endian? 
Or some cris-cross version? 
Regards, Martin. 
The default endianness of UCS-4 is wee defined. 
Keld I meant: The default endianness of UCS-4 is well defined. 
Keld Keld, that's funny! 
I thought by answering "wee defined" you meant little endian. 
tex Tex Texin Director, Product Management Progress Software Corp. 14 Oak Park, Bedford, MA 01730 Sign up now for PROGRESS Worldwide Exchange 2001-Jun-03..07, Washington DC. 
