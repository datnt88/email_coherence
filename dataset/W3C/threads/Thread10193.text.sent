Given that we now have turned the XML literals into a single special case datatype rdfs:XMLLiteral, there are now two ways to express the same thing in N-Triples and RDF/XML. 
I'd prefer if there was only one, to remove ambiguity of what is being described. 
As an example, the XML Literal with the value a blah /a is currently written in RDF/XML and N-Triples as: _:a ex:prop xml" a blah /a " . 
but now this just a datatype with a datatype URI of rdfs:XMLLiteral then maybe this is allowed: If this is not allowed, and I suspect not, then rdf:datatype should be forbidden from having the value &amp;rdfs;XMLLiteral. 
Similarly, the datatype URI rdfs:XMLLiteral is forbidden, i.e: _:a ex:prop " a blah /a "^^rdfs:XMLLiteral . 
For N-Triples, the xml" a blah /a " N-Triples form could be removed since _:a ex:prop " a blah /a "^^rdfs:XMLLiteral . 
now allows the same thing to be expressed. 
This would make XML literals have no special form in N-Triples, which would match what is happening in the abstract syntax, the formal model and also make it easier (I suspect) for N3 systems to support it. 
Summary of two proposals: 1) Forbid rdf:datatype="&amp;rdfs;XMLLiteral" in RDF/XML Pros: not a natural way to encode XML in RDF/XML parseType="Literal" isn't going away two ways to encode the same thing Cons: an additional a special case in the RDF/XML syntax 2) Remove the xml" a foo /a " form in N-Triples Pros: rdfs:XMLLiteral is a datatype and should use the datatype form two ways to encode the same thing Cons: this is a special case datatype, better to make this clear Dave [caught in spam trap -rrs] Date: Mon, 28 Oct 2002 15:46:43 -0500 (EST) Message-Id: 200210282244.58618.jjc@hpl.hp.com From: Jeremy Carroll jjc@hpl.hp.com Subject: Re: rdfs:XMLLiteral related syntax changes agree I don't really see this as necessary. 
If you wanted to say something peculiar this would be a way to be clear. 
e.g. and entail one another (with knowledge of the datatype). 
Yet whether or not they are identical is implementation dependent. 
We know that: is also entailed by and entails the other two, but is syntactically different from the second. 
(The extra whitespace is not significant). 
Admittedly there aren't any reasons I can think of to want to be peculiar, but it's less work to not define this special case - ummm, maybe not ... For systems that read n-triple they really need to have an implemnetation of rdfs:XMLLiteral mapping, then they can process the above XML correctly. 
For systems that don't read n-triple, then just writing the SAX rules to canonicalize the parseType="Literal" is probably the path of easiest implementation. 
We make it easier for them by simply banning the datatype. 
I am fairly neutral, weak preference agaisnt banning rdf:datatype="&amp;rdfs;XMLLiteral" Jeremy Jeremy Sender:ext w3c-rdfcore-wg-request@w3.org w3c-rdfcore-wg-request@w3.org e.g. and entail one another (with knowledge of the datatype). 
Likewise, the following two are synonymous ex:prop rdf:datatype="&amp;rdfs;XMLLiteral" rdf:parseType="Literal" a blah /a /foo:prop The parse type and datatype are not the same, though if not otherwise specified, an XML literal "defaults" to rdfs:XMLLiteral, so in the second case above the rdf:datatype attribute is redundant and unnecessary. 
Yet, per Jonathan's inquiry, we could/should support the arbitrary typing of XML literals by complex types. 
E.g. ex:prop rdf:datatype="&amp;xhtml;title" rdf:parseType="Literal" title blah /title /foo:prop or, alternately, and synonymously Patrick Patrick Stickler said: Er, no. 
The latter is illegal syntax. 
The only place the rdf:datatype attribute is allowed is on a (non-empty) literal property element: I think I addressed this in earlier messages: as far as I understand it, we're not giving XML literals (parseType="Literal") an additional datatype URI, the datatype URI is fixed to the URI of rdfs:XMLLiteral Dave This is my understanding, too; however the suggestion is worth considering, next time around - Brian's postponement is correct. 
Jeremy 
