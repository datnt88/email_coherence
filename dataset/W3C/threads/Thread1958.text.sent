Two (hopefully) simple questions: 1. 
In a HEAD response, what should Content-Length be set to? 
The length of the (non-existent) object body, or 0? 2. Is there a view on how locally-time-stamped data should have their Last-Modified GMT computed? 
It's impractical to recreate the true original GMT time-stamp (as the timezone and daylight savings regime of the place of last modification is usually unknown). 
Using the current GMT offset will result in the timestamp of some data jumping forwards or backwards an hour, twice a year, which could affect caching. 
Mike Cowlishaw IBM UK Laboratories The length of the object-body that would have been returned had the request been a GET. 
There are many views as to how this should be done, but none of them are within the realm of the HTTP protocol. 
All that matters is that the date used within the protocol is GMT (UT). 
How the date is obtained (and, in fact, what it means to be "modified") is entirely up to the application sending the object. 
......Roy Fielding ICS Grad Student, University of California, Irvine USA From "Roy T. Fielding" fielding@avron.ICS.UCI.EDU 
This is not very clear in the description of the Content-Length field that it describes the length of the object referenced by the URI, which may or may not be present in the message. 
Maybe HEAD should return the description of the object as the object body of the message so such ambiguities and overloading dont occur. 
Doesnt the lack of a clear meaning of modification make this almost ' useless, except maybe for a matched pair of client and server that have a common meaning. 
It needs to reflect that either the content as returned is different then previous to the date. 
I could also reflect metainformation change, such as expiration updated. 
But, I think that is a little too nebulous. 
Either way, some agreed meaning needs to be assigned to modified. 
Keith Keith Ball Unix/SMTP mail: kball@novell.com 
Building 1 MHS mail: KBALL@NOVELL 2180 Fortune Drive San Jose Fortune (sjf.novell.com) 
(408) 577 8428 Novell, Inc. -- sent via the LAN WorkPlace Mailer From "Roy T. Fielding" fielding@avron.ICS.UCI.EDU 
Not to be a party pooper, but what about URIs that point to things like CGIs which generate content on the fly? 
Would it be appropriate in this situation to not return a content-length header? 
Zero would be as wrong as any other number in this case. 
In truth, it's possible that it doesn't even matter if the conversion to UTC is done or not, as long as the server is consistent. 
Simply appending a GMT to the local time can work, since the clients are asking for changes from a previously returned time. 
As long as the time is consistent (and different), IMS will work. 
This breaks things like clients that automatically expire, but is this a valid use of IMS anyway? 
Chuck Shotton cshotton@oac.hsc.uth.tmc.edu "I am NOT here." 
From "Roy T. Fielding" fielding@avron.ICS.UCI.EDU 
As dynamic objects don't have a default Content-Length the right thing to do would be not to send the header field at all. 
This is one of the the reasons why the field can not be mandatory. 
Ohh - this would screw up a lot of cache managers which use the LM (which is the previously returned value) if the expired header is not present. 
They don't like to get a future last modified date! 
I would not recommend this at all! 
-- cheers -- Henrik Neither of the words `modified', `different', and `change' do define what is actually meant by this field. 
And this is how it should be! 
It does _not_ make it useless but merely take away the binding to the date and time typically given by the file system. 
As somebody (sorry, but I don't remember who) pointed out, a document can be generated automatically on every request, however, this doesn't necessarily indicate that the LM field should change value. 
-- cheers -- Henrik Frystyk frystyk@W3.org + 41 22 767 8265 World-Wide Web Project, CERN, CH-1211 Geneva 23, Switzerland I will clarify the description of HEAD. 
The latter suggestion, though appealing from a design point of view, is outside the scope of HTTP/1.0. 
Well, there is an implied meaning as given by the name (i.e. when the object was last modified). 
What is not defined is how much (or how little) modification needs to occur, and why. 
All that matters is that the origin server thinks that the object was last modified at the given time -- the client is trusting that the server knows what it is talking about. 
Perhaps we could define it in terms of how it is used, i.e. "If you have a copy of this object which is older than the given LM date, that copy should now be considered stale." 
Maybe. 
......Roy Fielding ICS Grad Student, University of California, Irvine USA 
