-- SVG WG is asking for feedback - event propagation -- Hi, SVG provides a way to reference an entire SVG document using the 
image element. 
The referenced document has its own DOM tree, animations, scripting, and so DOM event propagation. 
The SVG WG had an 
issue regarding how the event propagation is supposed to work in such an environment (2 documents, one referencing another) and we would like to have feedback from the DOM WG. Scenario [A]: 1. A.svg references a SVG document using the image tag. 
2. B.svg is the referenced SVG document (with a rect and a circle for example): Q1: Does both the bar() and foo() methods are invoked? 
Q2: If both are invoked, which one is first? 
Scenario [B]: B.svg Q3: If I click on the circle, which anchor is activated? 
Q4: Which part of the SVG image is sensitive to events? 
We had three different options: 1. 
The image element is a black box. 
A mouse click on the image will only generate an event in the referenced document. 
Scenario[A]: bar() is invoked. 
Scenario[B]: myDocument2.svg is now the current document. 
The side effect is that the author of the referencing document can not override the behavior of the referenced document and does not control what happens. 
We though that's going to be confusing for our users. 
2. Both the referenced and the referencing document will receive a mouse event. 
The event propagation happens first in the referenced document (full capture and bubbling phase) and once it's completed, the referencing document will dispatch a mouse event. 
Scenario[A]: bar() is invoked then foo() are invoked Scenario[B]: myDocument.svg is now the current document. 
3. Try to unify the event propagation mecanism across documents. 
Do a full capture from the referencing root element to the target element of the referenced document. 
Then, do the full bubbling phase from the target of the referenced document to the root element of the referencing document. 
Scenario[A]: bar() is invoked then foo() are invoked Scenario[B]: myDocument.svg is now the current document. 
The implementation of 3. is a bit tricky and it means that we have to mutate twice the event during propagation (to go from referencing document to the referenced document during the capture phase and the opposite for the bubbling phase). 
Futhermore, plugins might not be able to do that. 
The SVG WG has choosen option 2 so far and we will provide an errata to the SVG specification. 
Before that, we are willing to hear feedback/comments/issues from the DOM WG. How event propagation is working in a multiple namespaces environment for example or how event propagation is working with plugins might help us a lot to choose the best option. 
Thanks in advance, Thierry. 
The DOM hasn't specified event propigation between document trees. 
It looks like it would be easy to implement bubbling, at least, by simply installing an event handler on the root of the referenced tree that "bridges" (re-posts) the event to the referencing tree's image/ node. 
Capture may be more difficult to emulate, mostly because (as far as I can remember) the event target doesn't tell us whether a capture occurred and decided to block further processing, so the "bridge" handler doesn't know what to do about captures lower in the referenced tree. 
If this is an issue, the question becomes one of whether it should be handled by having SVG extend the events APIs or by doing that at the DOM level. 
But for bubbling, having SVG create a bridge handler when it builds the image/ reference seems to work perfectly well and produce the expected results (inner document sees the event before outer, and can cancel further processing, just as if it has been inserted at this point in the document tree) Joe Kesselman / IBM Research 
It seems that such a bridge would have to be created by the outer layer and declare a handler on the inner layer. 
What seems to be missing to me is the way for the outer layer to discover the document node of the embedded layer so it could register such a thing. 
I do not think that seperate trees should be automatically connected. 
Such a mechanism should be carefully considered. 
In some cases it would violate security to permit them to even be manually bridged, because since the trees were loaded from seperate URIs, it could be from seperate domains and bridging them could lead to one domain being able to appropriate the trust of another. 
Ray Whitmer rayw@netscape.com 
In some cases it would violate security to permit them to even be 
manually bridged If the DOM Event APIs are exposed, I don't see any way to prevent a relationship from being established manually -- at least not within the scope of the DOM as currently designed. 
This sounds like an issue for a security-aware subclass of the DOM, and I don't think that flavor is even on the Open Issues List yet. 
It may come closest to the read-only DOM proposal, or perhaps the transactional proposal... but I think one can make a good case for it being best left as something for higher-level code to define and deal with, since different contexts may have significantly different concerns. 
Joe Kesselman / IBM Research 
