Per the telecon last week, I am rewriting the checkpoints that relate to frames (A.9.1 and A.9.2) so that they are more generic. 
We decided that frames are "containers with dynamic content." 
As I am rewriting this, I realized that a. that sounds way too "techno-babble-ish" grin and b. that we might be able to synthesize a more generic "truth" from all of this. 
It seems that several of the checkpoints in A.9 (Ensure that pages using newer technologies will transform gracefully into an accessible form if the technology is not supported or is turned off.) boil down to the following checkpoints: 1. Provide a fallback page, mechanism, or other form of presentation for dynamic content (HTML examples: NOFRAMES at the end of each frameset, NOSCRIPT for every script, server-side scripts instead of client-side). 
[Priority 1] (combines A.9.1, A.9.3, A.9.6) 2. Ensure that descriptions of dynamic content are updated with changes in content. 
[Priority 1] (replaces A.9.2) 3. A.9.4, and A.9.5 as is. 
I also propose that we make the phrase "applets and programmatic objects" more general by using "dynamic objects." 
However, audio and video are dynamic objects...I suggest leaving related guidelines and checkpoints (A.3 and A.4) as is, but pointing to them from a note at the end of this guideline...unless someone has a better idea...? thoughts? 
--wendy I can't see why frames are dynamic content. 
They are just a simultaneoue presentation of documents. 
The only dynamics here that you can follow links and retrieve new documents which is true for the normal case as well. 
I would stick to the term frames for clarity. 
Regards, Nir Dagan Assistant Professor of Economics Universidad Pompeu Fabra Ramon Trias Fargas 25 08005 Barcelona Spain "There is nothing quite so practical as a good theory." -- A. Einstein I disagree with requiring NOFRAMES and NOSCRIPT all the time. 
For NOFRAMES, see (note that I still would like A.9.1 to be lowered to P2, I can't find it in the current issue list) For NOSCRIPT, I don't see what it would be required in the case the information in the script is not necessary for the comprehension of the page, for example a script that change the color of some button when onMouseOver is fired. 
A.9.3 is better worded currently (only required for important information). 
More on SCRIPT and DHTML in fact: I think we can spare a checkpoint in A.9 or at least of technique on explaining in more details what is acceptable (I wouldn't say good) event management. 
See the message for a start (generated HTML thru script and onLoad vs. purely decorative script done with onMouseOver). 
Another example that comes to mind is the case where the HTML event mechanism is abused with one event handler for a whole table and a script that looks at the x,y mouse coordinate of the click, vs. a set of discrete events on each cell. 
I agree this is included in other checkpoints as it is general accessibility, but we could have a more specific checkpoint on event and scripting, like A.9.7 When using HTML events and scripting, ensure this is done in a way that will not preclude device independent navigation. 
I agree with your comment about NOSCRIPT, but at this time I can't see how we can get around *not* having NOFRAMES as P1. 
At some point this should be handled by the user agent, but until then it is a big enough problem that I can't see making it a P2. 
I moved it to the closed issues since I thought others agreed that at this time it needs to be a P1. 
If this was a misinterpretation we should put it on the agenda for tomorrow's call. 
A discussion on event management is definately needed, but I believe it goes in the Techniques document. 
I believe a checkpoint in either A.11 or A.12 is the most logical place for it (see below). 
In looking at A.11 and A.12, I propose rewriting them as follows (i.e., including your proposed A.9.7 in A.12.4). 
A.11 Elements that contain their own user interface should have accessibility built in. 
The accessibility of objects with their own interface is independent of the accessibility of the user agent. 
Accessibility must therefore be built into the objects or an alternative must be provided. 
See the WAI User Agent guidelines for details. 
Checkpoint: 1.Where possible, make programmatic elements, such as scripts and applets, directly accessible (e.g., keyboard operable, self-voicing) or compatible with assistive technologies (See also A.9). [Priority 1] if information or functionality is important, and not presented elsewhere, otherwise [Priority 2]. 
A.12 Use features that enable activation of page elements via input devices other than a pointing device (e.g., via keyboard, voice, etc.). 
Someone who is using the page without sight, with voice input, or with a keyboard (or input device other than a mouse such as a braille display) will have a difficult time navigating a page if operation requires a pointing device (such as a mouse). 
If a page is usable via a keyboard, it is likely that it will also be operable via speech input, or a command line interface. 
Access to image maps is impossible for these users if alternatives are not provided. 
Checkpoints: 1.For image maps, provide alternative text for links. 
(See also A.1) [Priority 1] 2.Create a logical tab order through links, form controls, and objects (e.g., in HTML, via the "tabindex" attribute or through logical page design). 
[Priority 3] 3.Provide keyboard shortcuts to links, including those in client-side image maps, form controls, and groups of form controls (e.g., in HTML, via the "accesskey" attribute). 
[Priority 3] 4. For scripts, watch for logical rather than device-dependent events. 
[Priority 1?] This is more specific that your proposed A.9.7, which may or may not be a good thing. 
also, it seems to fit best here, but I'm open for suggestions. 
I felt that it fit better here because it is not as much an issue of graceful degredation as it is non-pointing device operable. 
also, I didn't feel that it fit in A.11 because, while it is something that needs to be done for direct access, A.11 targets objects with their own interface. 
I suppose we could argue if a script creates its own interface, but since the browser is involved it doesn't seem as separate as what is implied in A.11. thoughts? 
--wendy It is handled by lynx, emacs/w3, and maybe others, and on the other hand, I don't how many agent support the NOFRAME tags (e.g. 
I don't a see a way in my Netscape to say : use NOFRAME) People accessing frame without an index (built by the UA) and without NOFRAME can still access information, it's just not convenient because you have to move to the next line and up rather randomly. 
Lastly, can you please point at the agreement or argument that this should stay a P1 since I posted my message above ? 
I looked for it before reopening this issue and I couldn't find it in the archive. 
While Netscape does not allow you to "turn off" frames, it will let you open a selected frame in a new window. 
The problem with frames and screen readers is similar to that of tables and screen readers, i.e. it will read across the frames as one garbled sentence. 
This is not a problem in lynx and emacs (since they open frames in single windows) nor is it a problem for Netscape. 
However, it is a problem for MSIE (4). 
As far as I can tell, there is no way to open a frame in its own window in IE, although there is no way to view NOFRAMES either. 
The problem is only for frames that are placed side by side, frames appearing horizontally do not have this problem. 
However, browsers that do not support frames will present a blank page if no NOFRAMES is present. 
this is an accessibility issue rather than a usability issue, thus why this has been a P1. Due to the above arguments, frames remained P1. 
However, since the argument for demoting it to P2 is a backwards compatibility issue, this part of the discussion is still open (see --wendy 

While Netscape does not allow you to "turn off" frames, it will let you open a selected frame in a new window. 
The problem with frames and screen readers is similar to that of tables and screen readers, i.e. it will read across the frames as one garbled sentence. 
Are you certain this is still a problem with current screen readers? 
Each frame is drawn in it's own particular window. 
The screen reader "knows" that there are two windows. 
If the screen reader is reading across frame boundaries, it's because it's ignoring the window boundary. 
A similar example is with the Windows Explorer. 
There is a tree on the left representing the hierarchy of the file system, with the particular files shown in the right side window. 
Screen readers do not read across those windows. 
So while older screen readers might have ignored the frame boundary, I believe that most of them have updated to respect the window boundary and use programmatic means, such as Active Accessibility to get the information. 

However, it is a problem for MSIE (4). 
As far as I can tell, there is no way to open a frame in its own window in IE, although there is no way to view NOFRAMES either. 
The Internet Explorer 4 Power Toys set allows you to open frames in their own window. 
You tab to the frame, then press Shift+F10 to get the context menu for the frame. 
The "Open frame in new window" option will be listed. 
Charles Oppermann Program Manager, Accessibility and Disabilities Group, Microsoft Corporation "A computer on every desk and in every home, usable by everyone!" this it While Netscape does not allow you to "turn off" frames, it will let you open a selected frame in a new window. 
The problem with frames and screen readers is similar to that of tables and screen readers, i.e. it will read across the frames as one garbled sentence. 
This is not a problem in lynx and emacs (since they open frames in single windows) nor is it a problem for Netscape. 
However, it is a problem for MSIE (4). 
As far as I can tell, there is no way to open a frame in its own window in IE, although there is no way to view NOFRAMES either. 
The problem is only for frames that are placed side by side, frames appearing horizontally do not have this problem. 
However, browsers that do not support frames will present a blank page if no NOFRAMES is present. 
this is an accessibility issue rather than a usability issue, thus why this has been a P1. Due to the above arguments, frames remained P1. 
However, since the argument for demoting it to P2 is a backwards compatibility issue, this part of the discussion is still open (see --wendy w3c-wai-gl@w3.org (Charles Opperman) 01/27 7:41 PM (Wendy Chisolm) While Netscape does not allow you to "turn off" frames, it will let you open a selected frame in a new window. 
The problem with frames and screen readers is similar to that of tables and screen readers, i.e. it will read across the frames as one garbled sentence. 
Are you certain this is still a problem with current screen readers? 
Each frame is drawn in it's own particular window. 
The screen reader "knows" that there are two windows. 
If the screen reader is reading across frame boundaries, it's because it's ignoring the window boundary. 
A similar example is with the Windows Explorer. 
There is a tree on the left representing the hierarchy of the file system, with the particular files shown in the right side window. 
Screen readers do not read across those windows. 
So while older screen readers might have ignored the frame boundary, I believe that most of them have updated to respect the window boundary and use programmatic means, such as Active Accessibility to get the information. 

I want to make a semantic distinction here about "screen readers" versus other enabling technologies. 
The visibility of HTML Frames is an option left to the author. 
At many framed sites I visit there are no frame borders; content from multiple frames appear merged as a single body of content. 
Unless one of the frame's contents exceeds its visible are and gains scroll-bars on the side, I can't tell that the site is framed, and neither can a screen reader. 
There is no "window boundary" to make the distinction. 
A program which is not "looking" at the screen, but is programmatically intercepting or interpreting non-visual information about the document or its presentation is no longer "just" a screen reader, its something else. 
For example: although I haven't had the opportunity to use it, I understand that PWWebSpeak is an enabling Web Browser, not a generalized screen reader. 
Because it understands HTML and the underlying structure, its no longer limited to "reading across the screen;" it can understand tables and frames as distinct containers and present them to the user appropriately. 
A program which intercepts Windows system calls to interpret how the underlying program builds an image on the screen would also not be a screen reader. 
disclaimer The views expressed are those of the author and do not necessarily reflect the position of the Federal Reserve Bank of New York or the Federal Reserve System. 
/disclaimer 

The visibility of HTML Frames is an option left to the author. 
At many framed sites I visit there are no frame borders; content from multiple frames appear merged as a single body of content. 
Unless one of the frame's contents exceeds its visible are and gains scroll-bars on the side, I can't tell that the site is framed, and neither can a screen reader. 
There is no "window boundary" to make the distinction. 
Despite the term "screen reader", a accessibility aid that reads the screen is also aware of window boundaries, regardless if they are drawn with a visible boundary or not. 
Technically, screen readers use a off-screen model that correlates each drawing operation to a particular "window". 
In this case, I use the term window as a programming construct. 
A window is a element of the Windows operating system. 
Windows may or may not have visual boundaries. 
Nonetheless, the screen reader is aware that it is crossing a frame boundary, because each frame is kept in a separate window element. 
w3c-wai-gl@w3.org (Charles Opperman) 01/27 7:41 PM (Wendy Chisolm) While Netscape does not allow you to "turn off" frames, it will let you open a selected frame in a new window. 
The problem with frames and screen readers is similar to that of tables and screen readers, i.e. it will read across the frames as one garbled sentence. 
Are you certain this is still a problem with current screen readers? 
Each frame is drawn in it's own particular window. 
The screen reader "knows" that there are two windows. 
If the screen reader is reading across frame boundaries, it's because it's ignoring the window boundary. 
A similar example is with the Windows Explorer. 
There is a tree on the left representing the hierarchy of the file system, with the particular files shown in the right side window. 
Screen readers do not read across those windows. 
So while older screen readers might have ignored the frame boundary, I believe that most of them have updated to respect the window boundary and use programmatic means, such as Active Accessibility to get the information. 

I want to make a semantic distinction here about "screen readers" versus other enabling technologies. 
The visibility of HTML Frames is an option left to the author. 
At many framed sites I visit there are no frame borders; content from multiple frames appear merged as a single body of content. 
Unless one of the frame's contents exceeds its visible are and gains scroll-bars on the side, I can't tell that the site is framed, and neither can a screen reader. 
There is no "window boundary" to make the distinction. 
A program which is not "looking" at the screen, but is programmatically intercepting or interpreting non-visual information about the document or its presentation is no longer "just" a screen reader, its something else. 
For example: although I haven't had the opportunity to use it, I understand that PWWebSpeak is an enabling Web Browser, not a generalized screen reader. 
Because it understands HTML and the underlying structure, its no longer limited to "reading across the screen;" it can understand tables and frames as distinct containers and present them to the user appropriately. 
A program which intercepts Windows system calls to interpret how the underlying program builds an image on the screen would also not be a screen reader. 
disclaimer The views expressed are those of the author and do not necessarily reflect the position of the Federal Reserve Bank of New York or the Federal Reserve System. 
/disclaimer 
