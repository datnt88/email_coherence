Here are my comments on this scenario: This is the very simplest scenario possible. 
The SOAP Sender sends a message which is not acknowledged (either positively or negatively). 
As a result, this scenario contains nothing involving internationalization directly. 
The scenario as written contains one poor example of i18n: a "price" that consists of a floating point numeric value and no currency: This pattern's usefulness would seem to be in servicing subscribers to information that changes periodically, as in the stock quote example. 
If I subscribe to a stock quote, I might get regularly scheduled updates or updates when certain thresholds that I set are met. 
I can visualize setting the settings using a Web site and then having, say, my cell phone sent SOAP documents containing the updates from time to time. 
A "stock ticker" application might use this mechanism as well. 
The point of using this pattern is that the SOAP Sender doesn't want to receive or process responses. 
If the recipient dies, goes on vacation, is off, has a problem and so forth, the server doesn't need to do anything. 
It just blindly keeps sending messages to the full list of subscribers. 
There could be internationalization ramifications to the use of such a service. 
If text is sent, then the language of the text must be negotiated out of band. 
Similarly, other contextual information must be used to provide formatting or specialized data handling affected by cultural conventions. 
The main point here is that the sending application (and its designer) is solely responsible for the implementation decisions here. 
Comments? 
Addison Addison P. Phillips Director, Globalization Architecture webMethods, Inc. Internationalization is an architecture. 
It is not a feature. 
Chair, W3C I18N WG Web Services Task Force 
Here are my comments on this scenario: This scenario is very similar to the S001 scenario I just sent to the list. 
In fact, all of my comments about that scenario apply to this one as well and I included some commentary about subscriptions in that other one. 
In this scenario, the same (identical) SOAP message is sent to multiple receivers. 
The scenario suggests that multicasting is a possible option for the transport layer as the only change. 
There is an additional internationalization observation about this scenario though. 
In S001, each SOAP document is individually prepared for delivery. 
In S002 the document is prepared once and sent multiple times. 
This means that user preferences such as language, calendar, sort order, and so forth must either not apply to the content or must result in separate sets of messages that are sent to a subset of the total recipient list. 
This requires additional care when caching and preparing the data and may require that the subscriber set be preprocessed into "groups" to ensure consistency. 
Extra effort should be expended in this case in trying to use the "Language Neutral" service pattern (see our Usage Scenarios document) for the underlying service so that this additional effort doesn't apply. 
Comments? 
Addison Addison P. Phillips Director, Globalization Architecture webMethods, Inc. Internationalization is an architecture. 
It is not a feature. 
Chair, W3C I18N WG Web Services Task Force 
Yes, for this case any possible localization issue is in the sole hand of "the sending application (and its designer)". 
As a suggestion of 'best practice' shall we also mention the following? 
An internationalized "fire-and-forget" sending application may collect and store the receiver's preferred language, currency, etc. during the registration process. 
While sending messages, the sending application can use that information to localize the transmitted messages. 
"Addison Phillips aphillips@webmeth cc: ods.com Subject: WS-Arch Usage Scenario S001: Fire and Forget, Single Receiver Sent by: public-i18n-ws-req uest@w3.org 
06/13/2003 11:23 AM Here are my comments on this scenario: This is the very simplest scenario possible. 
The SOAP Sender sends a message which is not acknowledged (either positively or negatively). 
As a result, this scenario contains nothing involving internationalization directly. 
The scenario as written contains one poor example of i18n: a "price" that consists of a floating point numeric value and no currency: This pattern's usefulness would seem to be in servicing subscribers to information that changes periodically, as in the stock quote example. 
If I subscribe to a stock quote, I might get regularly scheduled updates or updates when certain thresholds that I set are met. 
I can visualize setting the settings using a Web site and then having, say, my cell phone sent SOAP documents containing the updates from time to time. 
A "stock ticker" application might use this mechanism as well. 
The point of using this pattern is that the SOAP Sender doesn't want to receive or process responses. 
If the recipient dies, goes on vacation, is off, has a problem and so forth, the server doesn't need to do anything. 
It just blindly keeps sending messages to the full list of subscribers. 
There could be internationalization ramifications to the use of such a service. 
If text is sent, then the language of the text must be negotiated out of band. 
Similarly, other contextual information must be used to provide formatting or specialized data handling affected by cultural conventions. 
The main point here is that the sending application (and its designer) is solely responsible for the implementation decisions here. 
Comments? 
Addison Addison P. Phillips Director, Globalization Architecture webMethods, Inc. Internationalization is an architecture. 
It is not a feature. 
Chair, W3C I18N WG Web Services Task Force 
