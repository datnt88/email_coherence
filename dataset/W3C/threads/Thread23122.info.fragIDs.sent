Comments on DOM Level 3 Core Specification based on 09 June, 2003 version of the spec 
1. Section 1.2.4: (DOMObject): "The DOMUserData type is used to store an application object." - DOMUserData in the above sentence needs to be changed to DOMObject 
2. Section 1.3.1: 
"The DOM Level 3 Load and Save module provides a serialization mechanism and uses the 'normalize-characters' and 'check-character-normalization' to assure that text is fully-normalized. 
- 'normalize-characters' and '?heck-character-normalization' are used in the spec in the above sentence before defining them. 
Therefore it is not clear what is meant by them. 
Probably, it is required to rephrase this statement to say that these are configuration features and add a link to DOMConfiguration section. 
3. Interface DOMStringList: "The DOMStringList interface provides the abstraction of an ordered collection of parallel pairs of name and namespace values..." Isn't this a collection of DOMStrings ? 
If yes, the spec needs to be corrected. 
If not, it is not clear whether name or namespace should be returned by the method item(in index). 
This interface could be moved to Validation spec as it is used only in Validation spec. 
4. Interface NameList: This interface too can be moved to Validation spec as it is used only in Validation spec. 
5. Interface DOMImplementationSource: The two apis getDOMImplementation and getDOMImplementations could cause confusion. 
I would prefer if a more distinct name is used. 
e.g getDOMImplementationList (Similarly, I would prefer if getFeatures is changed to getFeatureList) 
6. Interface Document: - xmlStandalone: To be consistent with the other attributes, probably it should be added that "This attribute is false when unspecified". 
"ELEMENT_NODE: specified attribute nodes of the source element are adopted and the generated Attr nodes." - This sentence (in adoptNode) looks incomplete. 
Probably it should be rephrased. 
7. Interface Text : "If the Text node is a direct child of the Document node, ..." - Document can have only Element, ProcessingInstruction, Comment, DocumentType. 
So a text node can not be a direct child of the Document node. 
"isWhitespaceInElementContent: Returns whether this text contains whitespace in element content" - It is not clear whether the text should be returned when it contains "any" whitespace or when it has "all" whitespace as its element content. 
8. Interface DOMConfiguration: "However when the feature 'LS' is defined in [DOM Level 3 Load and Save] is supported by DOM Implementation, the parameter 'resource-resolver'can also be used in DOMConfiguration. 
- The parameter 'resource-resolver' is removed from DOM Level 3 Load and Save spec and therefore this sentence needs to be removed. 
Thanks, Anjana 
-----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1 
But it may be used by the application coder even if he doesn't use the Validation module. 
I believe the only good usecase for having Text nodes beeing a direct child of Document is, that you can reproduce the original document structure. 
These Text nodes shall contain of course ONLY whitespaces (#9, #10, #12). 
Greets, Christian Parpart. 
23:09:26 up 71 days, 14:15, 0 users, load average: 0.00, 0.06, 0.07 -----BEGIN PGP SIGNATURE----- Version: GnuPG v1.2.2 (GNU/Linux) iD8DBQE/LlvtPpa2GmDVhK0RAjdQAJ9KjKHE9MRfwR4gA+L6fbsmnAy/vgCdHi5+ D+xZxDMViOuCpUKkP/zvxMQ= =UsuR -----END PGP SIGNATURE----- 
fixed. 
fixed. 
Issue tracked using 
The purpose of having NameList in the Core draft is to allow its reuse in an other DOM module, different from the DOM Validation one. 
It is the same case for DOMTimeStamp, or some exception codes. 
removed "and the generated Attr nodes". 
Since the specified are adopted, 
no Attr node is generated. 
Attr nodes may be generated if you have 
default attributes, but this is reflected in the following sentence: Default attributes are discarded, though if the document being adopted into defines default attributes for this element name, those are assigned. 
correct. 
The sentence has been removed. 
This inconsistency was also reported by Colin Paul Adams at: I did not add this on the Core issues list since it is an error in the LS draft. 
[Other issues were added to the Core issues list] Philippe 
Correct, except that the DOM specification, since DOM Level 1, explicitly prevents you from having Text nodes as direct children of a Document node: The node types, and which node types they may have as children, are as follows: * Document -- Element (maximum of one), ProcessingInstruction, Comment, DocumentType Philippe 
We renamed getDOMImplementations to getDOMImplementationList. 
There is no method getFeatures. 
Philippe 
This method maps directly to the Infoset property "element-content-whitespace". 
In fact, in order to avoid the debate of "whitespace" vs "white space" for the name of this method, we renamed it isElementContentWhitespace, and added a link to the Infoset. 
Philippe 
