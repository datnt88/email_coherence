Is there a parser-independent way to obtain a DocumentTraversal interface? 
The doc here: shows the following: 
NodeIterator iter = (DocumentTraversal)document).createNodeIterator( 
root, NodeFilter.SHOW_ELEMENT, null); Does this imply that the class implementing the (DOM Level 2) Document is guaranteed to also support DocumentTraversal? 
How else would one get at it otherwise? 
Check hasFeature to find out if the document support the Traversal APIs. 
If 
it does, you should be able to cast the Document into a DocumentTraversal. 
(Details of casting are language-dependent, but should be the same for all implementations that share a single language binding.) 
Joe Kesselman / IBM Research 
Thanks. 
But are you saying that this is by convention? 
I can't find anything in the standard that guarantees that such a cast will always work, i.e., the class that implements Document will also implement DocumentTraversal. 
If DOMImplementation.hasFeature says that 'Traversal' is implemented, the cast is guaranteed to work. 
That's the nature of hasFeature. 
Martijn Pieters 
Software Engineer mailto:mj@digicool.com 
Digital Creations http://www.digicool.com/ 
Creators of Zope http://www.zope.org/ 
Thanks. 
But are you saying that this is by convention? 
I can't find anything in the standard that guarantees that such a cast will always work, i.e., the class that implements Document will also implement DocumentTraversal. 
If 
For completeness, I'll note that this is specified in section 1.2, "Formal Interface Definition", in the description of the DocumentTraversal interface. 
-Fred Fred L. Drake, Jr. fdrake at acm.org PythonLabs at Digital Creations 
