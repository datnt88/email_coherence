At the APPCORE meeting in Minneapolis, it was said that APPCORE should not contain any building block which is not used in two existing IETF standard. 
This might be a good rule, but on one particular point, I think the rule should not be taken too litterally. 
That particular point is methods of making it easier to extend a standard in the future. 
IETF standards have traditionally been very bad in this area, and this has caused unneccesary ugly methods of making extensions so as not to break existing software. 
I think it would be very important if APPCORE contained good methods for specifying standards so that they can easily be extended. 
This should include some kind of support for marking future extensions as critical or non-critical. 
(An agent which receives a criticial extension, which it cannot handle, must reject the protocol unit, while an agent which receives a non-criticial extension, which it cannot handle, can ignore it or forward it transparently without understanding it.) Jacob Palme jpalme@dsv.su.se (Stockholm University and KTH) for more info see URL: http://www.dsv.su.se/~jpalme 
I don't think extensibility is excluded by this rule -- both HTTP and SMTP have extension mechanisms defined. 
#g Graham Klyne (GK@ACM.ORG) 
Yes, but none of them has a facility for marking extensions as critical or non-critical, and this is something I would very much like to have in APPLCORE. 
Jacob Palme jpalme@dsv.su.se (Stockholm University and KTH) for more info see URL: http://www.dsv.su.se/~jpalme 
Well, yes, but... 
In the case of HTTP I believe that there does exist such a mechanism (but I could be wrong there). 
In the case of SMTP, because the necessary information is declared up front (by EHLO response) before a transaction is initiated, the client can base a request upon this information so I don't see a critical/nom-critical designation is needed. 
The fact that it is not needed in all cases suggests to me that critical/non-critical marking should not be part of a *core* protocol. 
#g Graham Klyne (GK@ACM.ORG) 
From: Graham Klyne [mailto:GK@Dial.pipex.com] 
And the fact that HTTP did not have that from the beginning (and doesn't have it as a core part of even 1.1) was a source of endless problems. 
Don't be use the rule to restrict you to repeating the mistakes of the past or you defeat any point this effort may have. 
HTTP has many extensibility mechanisms, each with its own theory and practice for default handling, mandatory behavior, and interaction with firewalls, access control policy, intermediate proxies, etc. 
In HTTP, you can use a new method (PROPPATCH) use a new URL scheme (afs:) use a new protocol name (SIP/1.0) use a new protocol version (HTTP/1.3) 
create a new header use a new value for an old header, including - create a new extension field for an old value - create a new content-type for the message body extend the data sent in the body. 
Most of these extension methods are used by one or more applications that are built out of HTTP. 
(HTCPCP attempts to use most of these.) The theory and practice of these extension mechanisms differ. 
Some examples: Servers are supposed to complain if they see new methods, or at least handle them with authorization for "unknown methods", but some servers treat unrecognized methods as GET; a few proxies will forward unrecognized methods as if they were GET. 
Most proxies will complain if they are handed unknown URL schemes; the practice with origin servers isn't widely tested. 
Similar extensibility mechanisms are also used by applications that use or extend mail; I would include not only SMTP, but Workflow interoperability. 
Larry 
Shouldn't this discussion be happening on the ietf-applcore list? 
--Paul Hoffman, Director --Internet Mail Consortium 
Should APPLCORE be restricted to only contain things which *all* protocols need? 
Jacob Palme jpalme@dsv.su.se (Stockholm University and KTH) for more info see URL: http://www.dsv.su.se/~jpalme 
IMO, the feedback from the BOF showed that we are not going to be designing a "core" protocol anytime soon. 
Instead, we are going to be documenting useful protocol features. 
Since that's what we're doing, there's no reason why we cannot document any feature that is thought to be useful. 
Also, it's far easier for a group to agree on pros and cons of certain protocol features, than it is for a group to decide what should or should not go "in" a core protocol. 
The latter seems like an invitation to political disaster. 
Keith 
No. In both the email leading up to the BOF, and in the BOF itself, the scope limitation was on problems, not solutions. 
The MDN spec has criticality flags. 
So does X.509, which is referenced by the PKIX specs. 
So I guess we do have precedent for them. 
Harald Harald Tveit Alvestrand, Maxware, Norway Harald.Alvestrand@maxware.no 
Also X.400, which offers a pretty good precedent for how bad such flags can be, even when they are designed into the core protocol elements in a consistent way. 
I have many horror stories... Conformance to the MDN specification in this general regard is also proving to be a problem operationally, so much so that it has been seriously suggested that it be removed from the standards track. 
(Note that I neither think this is going to happen nor want it to; I'm simply reporting what has happened.) I don't have much experience with X.509, but my guess is that we're going to see all sorts of interoperability problems surrounding the criticality flags in it, especially as the increasingly obscure options are exercised. 
Criticality flags are a nice idea that for some reason just don't connect with typical human behavior in the right ways. 
As such, they are a facility you're well advised not to use in a protocol unless you have an overwhelming need. 
Ned 
I will ignore APPLCORE-related messages posted to discuss@apps.ietf.org. 
If you want to make a comment about APPLCORE, please send it to ietf-applcore[-request]@imc.org. 
- Chris 
