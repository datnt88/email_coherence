I've been corresponding with Terry Allen, who's doing an XMLish version of DocBook. 
DocBook has a lot of content models like the following: ((%xxx.char.mix;)*) where %xxx.char.mix; 
resolves to (#PCDATA|a|b|c...). 
The current XML Lang spec doesn't allow for this; production 45 is very specific about how many pairs of parens can appear, rather than going for the generalized model group solution of productions 40-44. 
Of course, the outermost parens aren't really necessary; you can achieve the desired effect with (%xxx.char.mix;)* 
instead of ((%xxx.char.mix;)*). 
But where content models are heavily parameterized and you can't easily see what kind of model you've got, this makes the DTD writer split hairs. 
It should always be safe to throw another couple of paren pairs around a model, and currently in XML you can't do this. 
Can we consider loosening this restriction? 
Eve 
Just a quick note of support for Eve's request. 
I don't see any advantage in putting a limit on parens in the first place--if you can match up two pair, you can match up a hundred pair. 
bob 
I would also like to second Eve's call for a relaxation of 45 to allow: ((#PCDATA | a | b | c)* ) Mulberry also has many models that look like this, in fact our "house style" recommends this over the alternative (#PCDATA | a | b | c)*. 
But my objections are purely aesthetic, I like the symmetry and closure of knowing that element content will always be enclosed in parenthesis or (in the larger case of SGML) will be a keyword. 
Were I to write a program that parsed element declarations, I would find it simpler to depend on that fact. 
Let's here from the other side of the coin. 
Simplicity and beauty are not as powerful as technical arguments. 
Why NOT go with Eve on this one? 
-dal 
I like the way it is handled now. 
However, I would be interested in the way you would describe Production 45 in EBNF then. 
You are not very specific about the alternative way you suggest. 
I can see your point, from the perspective of a DTD designer. 
However, we should try to keep things as simple as possible. 
(Maybe) XML will require a slightly different approach to DTD design anyway. 
Best regards, Norbert H. Mikula = SGML, DSSSL, Intra- &amp; Internet, AI, Java = mailto:nmikula@edu.uni-klu.ac.at = http://www.edu.uni-klu.ac.at/~nmikula 
