Here is a proposal for the features and properties associated with the http binding and soap http binding, based on discussion with Arthur. 
abstract level: The goal of defining them at the abstract level as well would be to provide a hint to the implementation. 
Their use is not required. 
Mapping XML Schema complexType into an HTTP GET won't be done. 
Of course, you can serialize the Infoset in the URI but who would like to use those uris? 
Based on the abstract feature, one can determine if a result is cachable for example, even if an HTTP POST is used underneath. 
feature name http://www.example.org/CRUD 
property name: http://www.example.org/method 
value space: create | retrieve | update | delete HTTP binding: feature property name: http://www.example.org/2003/03/http/web-method/method 
value space: PUT | GET | POST | DELETE SOAP HTTP binding: feature property name: http://www.w3.org/2002/12/soap/features/web-method/Method value space: PUT | GET | POST | DELETE Do we need to invent a new feature for the HTTP binding? 
Well, not really, but it would be good if people don't associate systematically the SOAP Web Method Feature with SOAP itself. 
It's more a feature that needs to be attached to HTTP imho but the URI used does not reflect that. 
Philippe Sounds good. 
What about adding the following feature, to cover setting HTTP header fields, which we've postponed[1] until features were available? 
HTTP binding: feature property name: http://www.example.org/2003/03/http/header-field/name 
type: xsd:string property name: http://www.example.org/2003/03/http/header-field/value 
type: xsd:string We could also generalize this features for any protocol, not just HTTP, i.e. define it at the abstract level. 
Jean-Jacques. 
[1] http://lists.w3.org/Archives/Public/www-ws-desc/2002Sep/0050.html 
How useful would it be? 
The accept, accept-ranges, content-type, authorization, cache-control, connection and content-length are already fixed by other means. 
accept-language has nothing to do in the WSDL. 
Do you have an example of an header that needs to be fixed and should not be represented in a more abstract way? 
How do you set two headers with the approach? 
imho, we should focus on the needs themselves, not the way they are represented in the protocol. 
Authorization is a good example of such case. 
Philippe The WG wanted a way to set the value of certain HTTP header fields (Jacek in particular, I think). 
An earlier, non feature based proposal was postponed until work on features resumed. 
So, yes, some have found this feature (sic) useful. 
JJ. 
