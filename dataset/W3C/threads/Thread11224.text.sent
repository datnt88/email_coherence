The ERB, in its meeting yesterday, discussed the issue of parameter entities in XML. 
We are *strongly* leaning towards voting to remove parameter entities entirely *from V1.0* as long as GI name groups are reinstated in ELEMENT and ATTLIST declarations: We plan to vote on this at next Wednesday's meeting; your input is welcome. 
The reasons to prefer GI name groups: o Many of the uses of parameter entities that new DTD writers and simple DTDs are likely to want can be replaced by GI name groups: synchronizing the content models or attribute lists of elements o GI name groups add extremely little complexity to XML processors o Now that we have multiple ATTLISTs, GI name groups have quite a bit more power than they used to (e.g., you can add a set of attributes to "all the list elements," and then add a unique attribute to only one of the elements) o GI name groups give us the syntax (if not the semantics) to do a kind of element subclassing, where all the elements in a "class" have the same characteristics One consequence: o Existing DTDs and any new complex DTDs that need parameter entities would have to be transformed to resolve parameter entities before XML delivery (note that several existing tools, such as NormDTD, do this) Eve But until we get experience with how people are going to use DTDs and partial DTDs with real XML delivery, I'm willing to give up the possibility of complex DTDs that are 100% XML-compliant, especially since (as I outlined in my recent posting) you need to adhere to a much a smaller set of constraints if you're willing to send only partial DTDs with your instances. 
I class "until we get experience with" along with "most XML documents will be small/large" and "there will be many processors". 
These are appeals to the future to justify judgements that could be made on the basis of past experience. 
But the only reason I dispute this point with Eve (with whom I am jointly responsible for a DTD now highly parameterized due to her efforts) is that I doubt that we understand what it might mean to deal with partial DTDs. 
ISO 8879 doesn't envision the case where the infernal subset is parsed but not the external subset; yet that seems to be contemplated in XML. 
How d'you'all figure this is gonna work? 
Does the SGML ERB have a shared view of this? if so, would you share it with the WG? 
Also, if XML can't handle complexity, doesn't scale, how can we recommend it as a solution to clients? 
I have recently contemplated requirements for several commercial applications more complex than Docbook or TEI; these are utterly impracticable without parameter entities. 
So far, in this forum, we have been told variously (in response to various statements of requirements) that we should use PDF or Postscript or HTML. 
Now we're being told that instead of XML we should use SGML. 
I thought that was the point to begin with. 
Executive summary: parameter entities are a dividing line, watershed, shibboleth. 
Dump them and you go one way, retain them and you go another. 
Whatever gets deployed we will cope with; that's our business; if you want to make XML cheap you need to make it capable of standing on its own without an SGML shop behind the curtain. 
Regards, Terry Allen Electronic Publishing Consultant tallen[at]sonic.net 
Davenport and DocBook: http://www.ora.com/davenport/index.html T.A. at Passage Systems: terry.allen[at]passage.com 
And when I suggest that, I think the only way that it's workable is if you can use external parameter entities, since otherwise those subsets are going to be too large to be workable. 
I think the assumption that seems to be underlying this movement is that no-one who doesn't already have an SGML shop will want to use full-featured XML. 
I think that this assumption may well be false. 
We can't prove what the future will hold, but eliminating parameter entities will shape it powerfully, in the direction of making XML vastly more limited. 
Let's relax compatibility with SGML and make PEs into straight text macros rather than eliminating them. 
I think that this would be a win for users as well, since the harders thing about learning PEs is that the string substitution model is _not_ correct. 
Yea, verily, Yea! -- David David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ Please explain this. 
String substitution is precisely what they appear to be. 
So, I am missing something and wish tutoring. 
len Many strings are not legal values in parameter entities, because, they are not, e.g. complete content model groups. 
(this makes modular DTDs harder to write, because of the need to wrap things the right way). 
You can't build an element name by concatenation of PEs and regular characters (this probably is a good thing, but the given the benefits of simple implementation, is not worth it). 
There are other restrictions -- but I can never remember exactly what they are -- same problem I _used_ to have with whitespace rules. 
If every string-substitution effect were legal for a PE, then implementation would be so easy it's not an issue. 
Only WG8 could enable this kind of processing. 
for valid documents, however. 
-- David David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ I understand this. 
They have to respect SGML boundaries for legal combinations (to express myself loosely but with fewer characters). 
Because 1. 
Other than entities, no other form of string substitution is legal within SGML (discounting pre-processors) 2. Too many constructs that occur *naturally* in extant artifacts are verbose in a regular element model 3. Some sets of existing complex schemata will be unavailable and unusable without PEs I concede the usefulness of PEs in XML. 
Len Bullard 
