If I understand them correctly, it seems that Paul Grosso, Len Bullard, and Robin Cover have all raised the same concern, by pointing to situations in which it's necessary to have a DTD, whether for authoring, for contractual purposes, or for other applications. 
Let's distinguish four cases: a DTDs Required for Parsing. 
Declarations are always required, and in practice all applications must process them on each run, since it's impossible to parse the document correctly without knowing which elements are EMPTY, which are CDATA, etc. (It's also possible to cache the essential information in some other form, but that's just a standard store-for-compute tradeoff.) This, roughly, is the situation with 8879:1986. 
b DTDs Required for Validation Declarations are always required, but the language is so constructed that the document can at least be parsed correctly* without reading the DTD.r declarations need not always be read. 
I.e. it's possible to do some kinds of useful work even without reading all the declarations. 
This, roughly, is what SGML would be like if the ETAGC proposal is adopted (at least for Minimal SGML documents without references to external entities). 
* (within some limits -- element boundaries and content will be correctly identified; some non-significant white space may be preserved unnecessarily) c DTDs Optional Declarations are always allowed, but not always required; the system makes certain default assumptions if no declarations are provided. 
This is the approach taken by PSGML. 
(Or C, if a programming-language analogy is useful. 
In programming, I don't find this helpful at all, but Tim and others have suggested plausibly that it may be useful in XML.) d DTDs Forbidden Declarations are never allowed; the system makes certain assumptions about things, and your usage had better agree. 
I don't know of any serious markup languages that do this; the only analogy I can think of is Basic, in the form that requires names of string variables to end in $ and so on. 
Cover, Grosso, and Bullard seem to be arguing against (d), but I'm not sure whom they are arguing against. 
My own reading of the goals document is that (b) or (c) should apply -- or at least, that (a) is not what's wanted here. 
I don't think anyone is actually in favor of (d), and if the current phrasing of the goals statement gives readers that impression, then it needs to change. 
Can someone who finds the current phrasing confusing suggest a less confusing alternative? 
It does, on the other hand, seem to me that we haven't got a clear consensus on the choice between (b) and (c). 
Myself, I lean toward (c), because it makes startup for light-weight applications or experimentation a bit easier. 
Applications which need declarations will always be able to use them -- and XML processors (like good C compilers) can provide an option to warn, or treat as errors, any use of undeclared element types. 
Note that choosing (c) is not the same as saying validating editors are impossible, as Paul Grosso seems to suggest -- any more than C compilers can't do syntax checking, just because variables can be declared implicitly. 
A validating editor just doesn't belong to the class of applications for which declarations are inessential. 
When presented with an XML document which has no DTD, it might (a) warn about missing declarations, (b) silently assume !ELEMENT foo - - ANY , or (c) something else entirely. 
-C. 
M. Sperberg-McQueen ACH / ACL / ALLC Text Encoding Initiative University of Illinois at Chicago tei@uic.edu 
On Fri, 13 Sep 1996 19:17:10 -0400 Paul Grosso said: I'm having a hard time figuring out for myself the links from my posting to Michael's response I'll try to answer your questions more directly this time. 
Sorry for any confusion. 
I don't understand how Michael's four choices relate to my thoughts. 
Forget choice (d) [we seem to agree there]. 
Either DTDs are always required or they're optional--forget about what for, since if they're optional, there will be times I don't have them, and that's the situation I'm addressing. 
OK. 
There may have been confusion on my part. 
I took several messages on this topic to reflect a fear that XML was heading toward choice (d), and made it explicit primarily in order to say "No, that's not what anyone seems to have in mind." 
I think such software is imaginable. 
For some circumstances, it might be useful. 
But I think an XML editor ought to be allowed to insist that declarations be provided. 
(This would be a restriction on the All Apps Work on All Docs rule, but declarations can always be generated if the user really really wants to use your editor.) I took Tim to mean having markup declarations in the language, not necessarily in all documents. 
(That is, I think he, like me, was trying to reassure you that choice (d) is not being proposed.) 
I agree that if declarations are optional then some developers will produce editors that try to edit XML without declarations, using an implicit 'Waterloo DTD' (where all elements are declared ANY) -- ie enforcing nesting and not much else. 
Is this a good thing? 
(I don't know--maybe, in some circumstances.) I was asking if this was a design goal. 
I don't know how to interpret either Michael's or Tim's response. 
I need some more help here from those more familiar with the ERB discussions. 
As far as I know, it is neither a design goal of XML to encourage such software, nor to forbid it. 
Certainly it hasn't been discussed as such in the ERB. 
I hope this helps. 
-Michael Sperberg-McQueen Well, I've let things pile up and have read hundreds of e-mails now... 
I was going to post a summary of my views on issues that concerned me, but this one grabbed my attention: Since there is not ETAGC delimiter, this isn't SGML. 
This is certainly acceptable. 
There are some rules that could be applied to this... Essentially, you could still deliver an SGML document with having to change the reference concrete syntax or convert to some "SGML-like" language. 
Ick. 
This is like saying: "You can't define you classes to your complier, it just *knows*!" What I don't understand is why (a) is not wanted? 
What is the big deal about DTDs? 
A document type is a contract between application--including a browser--and the document. 
All bets are off if you don't conform to the DTD. 
It might be ok, and then again, it might not. 
Having worked a great deal in financial and legal printing, the issue of validation is quite important. 
Without a DTD, you can't even assume the document was authored correctly, let alone, be legally compliant. 
For legal-related publishing systems, DTD are *necessary*. 
I would like to think that XML is going to be able to be used for legal documents. 
Since a browser need not be a validating parser, the DTD can serve as a rule for whether or not a particular element is empty and what attributes are implied, etc. 
I just don't see the need to say that we don't want definitions--or even further, to say that we don't need validation. 
It is very interesting to see HTML authors realize the benefits of validation. 
Once they know that their document is conformant, they can proceed to verify that it looks correctly. 
If a valid document is not interpreted correctly by tool X, tool X is broken or misconfigured. 
Obviously, I'm in favor of (a). 
I'd be happy with (a) if at all possible, and some default mode if declarations are not possible. 
The problem is that this allows applications to never check for validation. 
Then we are back to square one in that someone can just toss in some element, however they please, and expect it to work. 
We all have to have rules to play by. 
The question is who is in control of those rules. 
The point of SGML was to put that control back into the hands of the user and producer of the information, not in the hands of the software vendor. 
XML should have that goal as well. 
DTDs are a necessary component. 
BTW, why call XML XML? 
Why not "conventions for SGML on the Web" etc. Do we really want to create "Yet Another Markup Language" (YAML) and go against ISO standards? 
I realize that there are problems *some* parts of SGML. 
We should really try to define a set of conventions that work within ISO standard SGML and work with SGML Open and the ISO working group to allow SGML to adjust to fulfill needs that fall outside of ISO 8879. 
Lets get onto the more important issues: * Use of HyTime for hyper linking. 
* Formal System Identifiers and Entity Management * Use of DSSSL for active applications (e.g. DSSSL transformations can specify active transformation of documents in the clients browser. 
Imagine CGIs becoming self-transforming documents). 
* Transportation of SGML, entities, catalogs, DSSSL in a sane fashion. 
And if you really want something to think about: * DSSSL defines a standard post-parsed form for a document--a grove. 
Since this is standard, it should be possible to define a linearization of a grove into a content type such that an application has to make no decisions upon reading the data. 
It just re-formulates the grove into a tree-like construct (or whatever). 
No DTD here! 
No Parsing Here! ...hmmmm, sounds like BSGML! 
A wise man once said: A hard problem is always a hard problem. 
Generic and extendible markup for use in distributed systems is a hard problem. 
R. Alexander Milowski http://www.copsol.com/ 
alex@copsol.com 
Copernican Solutions Incorporated (612) 379 - 3608 [Alex Milowski:] It's called XML because we had to call it something. 
It's not full SGML. 
That's essentially what we are doing. 
Charles Goldfarb's posting earlier today summed up the XML agenda very well, I thought. 
One thing at a time. 
Right now we are talking about an application of SGML called XML that is designed for the transmission of extensible, structured data over the Web in a way that is easy enough to implement that we can get past the objections leveled at full SGML by the Web browser vendors. 
Next comes hypermedia semantics and linking. 
Catalogs and fragment wrapping (an essential technology not on your list) are coming along nicely in SGML Open and don't need our attention at the moment. 
DSSSL is already a standard and dsssl-o is shaping up solidly as the reference implementation approaches beta status. 
We will need to visit DSSSL before this is all over, but that should probably come at the end of this effort. 
Right. 
Which is why we have to keep the discussion focused on one task at a time. 
This group has been given until October 6 to air all the (non-hypermedia) issues related to XML; I think the discussion so far has demonstrated that we will be doing very well to accomplish that. 
Jon Bosak ERB/WG Chair From Jon Bosak: I completely understand focusing the discussion on on thing at a time. 
The problem with this is that some decisions will have larger ramifications when we go to discuss the use of HyTime or DSSSL. 
I would rather not be in the position of saying: "Well, since we don't require a DTD, we can't use HyTime" or whatever. 
We have only talked (e-mailed?) about parsing documents without DTDs. 
What are the ramifications of using a document without having parsed against a DTD? 
What happens with HyTime? 
DSSSL? 
etc. 
We want useable information to come in the form of XML. 
Is structured information useful without knowing the structure? 
BTW, if we have a date to end the current discussion, that means we have some kind of schedule. 
Where might I find that? 
R. Alexander Milowski http://www.copsol.com/ 
alex@copsol.com 
Copernican Solutions Incorporated (612) 379 - 3608 MIME-SGML provides a good basis for discussion, I think. 
Sounds like LISP to me ;-) [Gavin Nicol:] Maybe so, *but* *not* *now*. 
If people feel the overwhelming desire to get into the entity and linking issues early (not enough email to read?), please take the discussion offline and be prepared to present coherent proposals when the time comes. 
We have a specific milestone to reach here. 
Jon Bosak ERB/WG Chair and resident traffic cop [Alex Milowski:] These questions are certainly within the scope of the present discussion. 
Our kickoff letter set a date of October 6 for the point at which the "voting booth" shuts down and ERB work on editing a draft begins. 
Our target date for completing the XML draft (not including specifications relating to linking, entity management, hypermedia semantics, etc.) is the first WG meeting on the evening of November 17 in Boston. 
Beyond that, we have tentatively targeted the Sixth World Wide Web Conference in April, 1997 as the occasion for releasing a draft that addresses the linking, entity management, and hypermedia issues, though that date seems very ambitious for covering all three of those subjects. 
We hope to have the entire set of specifications needed to implement SGML on the Web completed by the SGML 97 conference. 
Jon Understood. 
