I understand that some events do not bubble, but is it correct to say that ALL events support capture? 
This seems to be implied by the DOM Level 2 Events CR based on the fact that you can ask an Event whether it bubbles but you cannot ask an Event whether it can be captured. 
If Event.bubbles is false, only the Capture, At-Target, and Default phases of event distribution are performed. 
If true, bubbling distribution is performed as well, between At-Target and Default. 
Event _listeners_ are explicitly registered either as capturing (invoked only during the Capture phase) or non-capturing (At-Target and Bubbling phases). 
A single listener may be registered both ways, if desired. 
At this time there is no independent ability to suppress the Capture or At-Target phases. 
Default can be suppressed by invoking Event.preventDefault, but I believe that has to be done from a handler since it gets reset each time the event is dispatched. 
If you've got a use case for making this more flexible, please submit it for consideration in future revisions of DOM Events. 
Joe Kesselman / IBM Research I'd actually like to have bubbling and capturing specified as orthogonal dispatch mechanism such that an event can: + capture and bubble + capture and not bubble + not capture and bubble + not capture and not bubble And also for event listeners to register for these orthogonally. 
The last would be ideal for optimising controlled environments. 
As I understand, currently capture implies not bubbles and bubbles implies not capture. 
If that is the case, I'm mildy disappointed at that design decision. 
-John Actually, I am not sure if I should take that back. 
I had first thought that my the event listeners I've written are only interested in the At-Target phase. 
I've come to realise that this isn't quite the case. 
My event listeners are registered on nodes so that when a new node is inserted onto that node, the event listener would add new eventlisteners to the new child. 
This allows me to recursively define rules that apply to a whole document as the document is built. 
I perform the following check to ensure that my event listener only acts on a direct child: if (event.currentTarget.parentNode 
!= event.target) 
My argument before was that some use cases will benefit greatly in performance by having a class of event registration that only responds to the At-Target phase and I had believed my application fell under that category. 
Now I know I may be slightly mistaken. 
My application is incapable of making use of such a facility given the current set of Mutation Events. 
It may still benefit from this facility if there existed some Mutation Event perhaps called "DOMChildInserted", which has the parent as the target and the child as the relatedNode. 
It sounds simple enough to add additional Mutation Events, but I am also concerned that a larger set of Mutation Events will incur a larger intrinsic overhead in DOM operations. 
My views on this issue are for the moment inconclusive. 
Thanks -John 
