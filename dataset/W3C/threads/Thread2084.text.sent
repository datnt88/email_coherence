Name of the tag : LP and its /LP counterpart Mnemonics : Lower Priority What does it do : This new tag is an attempt at giving the author of an html document the possibilty to give a relative priority to different parts of his document. 
Why it is needed: It often happens that someone wants to view or wants to view a document of a shorter size, but has a very slow connection. 
What usually happens is that the person accessing the document reads the first screenful of text, and bases his decision to wait for the rest of the document, or to break the transfer all together on that first screenfull. 
So the writer of a long html-document, or a document with a lot of images has to make the first screenfull attractive enough in order to have his entire document read. 
This is in sharp contrast with the idea of structured documents. 
My proposed solution to this problem is the following: Order the different parts of the document according to their relative importance, with the use of the proposed LP tag. 
This tag lowers the priority of the enclosed block, and can be nested, to lower the priority of some parts of the document even more. 
For example: Here is a document describing a better mousetrap, and I, as the author, think that the reader should at least have read all my headers and the abstract. 
The text between the headers is considered less important. 
And as formal proofs are so impopular, the proof that my mousetrap really works has an even lower priority. 
This is a proposal for a better mousetrap This is an idea that blahblahblahblah It works like this.... And this is the formal proof that it really works: Lo and behold, it works. 
Now the viewer, or the person viewing the document could have several options: - Fast network connection: Ignore the priorities. 
- Medium network connection/curious person First load all the document parts with the highest priority, and automatically continue loading the rest of the document in order of priority. 
- Slow network/modem connection: Only show the parts with the highest priority, and only show parts with a lower priority if they are clicked on (like with delayed image loading) All comments and suggestions welcome. 
Paul Siegmann(psiegma@cs.vu.nl) Paul... I suspect that this message would be best dealt with on the HTML mailing list - anyone have the address handy ? 
As regards your tag, I would have my doubts about the partition of documents based on the speed of network connections --- I reckon that the encoding of a document should be as independent as possible of its storage and its transmission. 
Maybe if you had some other rationale for the partitioning of documents.... Besides, I think authoring is such a problem in W3 already, that allowing 3 sub-documents within one document is only going to mean messier documents and much increased workloads for document authors and maintainers. 
What about a special summary tag ? 
Doesn't the latest version of HTML have provision for this sort of thing ? 
Liam Liam Relihan, Voice: +353-61-202713 University Of Limerick, E-mail: relihanl@ul.ie 
Ireland. 
http://itdsrv1.ul.ie/PERSONNEL/lrelihan.html Since many browsers display parts of a document in the order they arrive over the net, implementing faster display of one part of the document might require messing with HTTP transport based in the HTML markup, to send subsections in a new order (ick). 
In addition this might require both the client and server to pre-parse the document for this tag before display and transport respectively. 
The overhead involved in departing from a simple linear processing order could produce an actual performance loss. 
Albert Lunde Albert-Lunde@nwu.edu Discussion of this sort of thing belongs on www-html@www10.w3.org , rather than the IETF HTML WG list html-wg@oclc.org . 
The idea looks like Ted Nelson's "Stretch Text" which goes back to 1975! 
See verbosity level based on reader interest. 
There is an interesting question if resources can be delivered at different verbosity levels. 
Is this an issue of naming best handled in the URI, or is is a matter for the protocol? 
Note the similarity to the question of delivering partial documents. 
Suppose I have retrieved something at verbosity 50% and I want to increase this to 70%. 
Can I retrieve the difference and merge it, and what impact would this have on the names, the retrieval protocol, and the representation of the resource? 
I think this is an interesting idea but I don't have time to pursue it at the moment. 
Regards, Owen Rees rtor@ansa.co.uk Information about ANSA is at URL:http://www.ansa.co.uk/ . 
3 comments: 1) Intelligent servers should be able to break up long documents as necessary (though lack of HTML structure makes it more difficult). 
This is more a question of how to send the data, rather than how to mark it up. 
DynaWeb does this with large SGML documents. 
2) Given DIV and the CLASS attribute, it seems quite possible to do much the same thing by hiding an element and all of it's children based on some condition. 
3) Your proposal still requires the data to be sent to the client, or the server to parse the data and send only the higher priority items. 
You do not specify a way of stating a preference to the server, and besides, if you parse the document, you should also be able to break it into pieces, bringing us back to comment 1. 
Why it is needed: It often happens that someone wants to view or wants to view a document of a shorter size, but has a very slow connection. 
What usually happens is that the person accessing the document reads the first screenful of text, and bases his decision to wait for the rest of the document, or to break the transfer all together on that first screenfull. 
So the writer of a long html-document, or a document with a lot of images has to make the first screenfull attractive enough in order to have his entire document read. 
This is in sharp contrast with the idea of structured documents. 
My proposed solution to this problem is the following: Order the different parts of the document according to their relative importance, with the use of the proposed LP tag. 
This tag lowers the priority of the enclosed block, and can be nested, to lower the priority of some parts of the document even more. 
I think you have identified an important problem, but I'm not so happy with your proposed solution. 
Other people have already pointed out some of the flaws. 
I'd like to propose a different approach. 
This also may not be such a good idea, so if other people don't like it, I'm not going to push it too hard. 
Suppose, as you did, that the author of the HTML file expects some users will want to view parts of the document before the whole file is transmitted. 
Instead of marking certain parts with priorities that control the order in which they are transmitted, however, the author marks the parts with the order in which they should be displayed. 
The HTTP server (and the client's HTTP layer) can therefore remain entirely unmodified. 
The client's HTML parser, however, needs to be able to display sub-parts out of order, inserting blank space (or some other placeholder) where necessary to indicate missing pieces, and inserting these pieces as they arrive. 
As the retrieval progresses, the user may see parts of the document "expand" on the screen, the same way that Netscape fills in images. 
Or perhaps the browser could change some visual attribute of the placeholder (such as its color or texture), allowing the user to click on the placeholder to see the newly-arrived sub-part. 
The document could start with a (hidden) "table of contents" that shows the relative sizes of the parts. 
This would make it somewhat easier to pre-allocate screen space, although I imagine that in practice the allocation would be inexact. 
Of course, the right "solution" might be to encourage authors to provide their large documents in two forms: monolithic (single HTML file) for people with fast connections and/or for people who want to quickly search the documents for particular character strings, and "outlined", for people who want to retrieve just the parts they are looking for. 
-Jeff Isn't this, in effect, what an anchor tag does? 
While most browsers perform content replacement, this is not necessarily the only way. 
Requiring the authors to think of how to break up a document (especially very large ones) is not a winning philosophy: it entails too much work. 
Servers can, and should be able to do this, but HTML get's in the way. 
HTML is designed for smallish documents. 
I think servers like DynaWeb will become increasingly important. 
I know of one case where it took a week to publish something in HTML (after converting from SGML), but the same thing was accomplished in DynaWeb in minutes, with an up one time cost of perhaps an hour or so. 
DynaWeb generates links on the fly, so link maintenance (a real headache for large databases) is an insignificant part of the publishing process. 
While I'm not keen on expounding the benefits of EBT's products on a public list, I think DynaWeb represents a significant shift in emphasis, and technology that is useful for large databases. 
When I wrote DynaWeb, I (and others at EBT who shared in the design), had precisely this problem in mind. 
I think we solved it fairly well, and I'd be very surprised if other servers do not appear that offer the same functionality. 
It is the way things will go. 
Instead of having a single 'file' with priorities, display orders, etc., none of which solve the basic problem that the decision basis content hasn't been transfered, it seems to me that some form of  include capability would allow a single logical document to be split for storage, maintenance, transmission, etc. 
Perhaps an inline attribute on an A or a new tag. 
Prefered retrieval order could accomadate publisher hints. 
Browsers would retrieve and render the base file and then start filling in the includes much like images are handled today when the size isn't known. 
By organizing the document and includes an overview of content could be quickly available with more to follow. 
Browsers could let users delay retrieval of includes just as images can be delayed today. 
The structure provided would also facilitate outline viewing ... much like many folks skim a printed document by reading the chapter or section lead paragraphs. 
Or perhaps the structure is achieved via div or whatever and thinking about the structure facilitates  include organization. 
HTML and WWW norms tend to excessive fragmentation of information and too many hlinks to investigate just to guess which to follow. 
There are many times when a complex subject (like the HTML specs) needs to be studied in a more linear sequence than can be achieved yet with current markup the author is discouraged from providing a well organized linear document. 
Dave Morris An "include" capability could provide other benefits. 
For instance, only the parts of a document that the user is allowed to see can be returned, and reconstituted as a single logical view. 
This would allow sites that currently support both an internal and an external home page to have just one home page. 
I thought I stumbled across a server once that was supporting an include capability, but I no longer remember what it was. 
Anyone else have a pointer? 
Mez You're thinking of the !--#include file="foobar.html" 
-- server side include facility provided by NCSA httpd 1.3+ and other servers. 
Take a look at the NCSA on-line documentation. 
Cheers, Ay. Andrew Wilson URL: http://www.cm.cf.ac.uk/User/Andrew.Wilson/ 
Elsevier Science, Oxford Office: +44 0865 843155 Mobile: +44 0589 616144 HTML and WWW norms tend to excessive fragmentation of information and too many hlinks to investigate just to guess which to follow. 
There are many times when a complex subject (like the HTML specs) needs to be studied in a more linear sequence than can be achieved yet with current markup the author is discouraged from providing a well organized linear document. 
Agreed. 
This is a somewhat different problem than the one which started this thread, but I would really like to see a browser that supported a "flatten" command (maybe "flatten 1 level", "flatten N levels", and "flatten entirely" commands). 
I don't know if this would require any additional HTML support. 
I'm more interested in HTTP, and I think this would not require anything new from HTTP (although it might be nice to have an efficient way of asking for the entire set of documents in one request). 
-Jeff This is known as "folding" on some editing/hypertext systems. 
If we are only interested in folding as a means to allow readers to skim through text and selectively reveal interesting bits, then this just requires a new tag in HTML and browsers that will fold/unfold text in response to this tag. 
Aside: Should a recursive fold be allowed ? 
However, if we are interested in folding as a means to reduce network traffic, then things get somewhat more complex as has already been suggested by others. 
Liam Liam Relihan, Voice: +353-61-202713 University Of Limerick, E-mail: relihanl@ul.ie 
Ireland. 
http://itdsrv1.ul.ie/PERSONNEL/lrelihan.html Folding is good. 
It's the only way a Unix dweeb like me can handle the MacOS directory listing. 
Folding where the act of expansion can involve a fetch of more HTML text (or other objects) to inline would be phantastic. 
Yes, definitely. 
Though this seems like it should be a www-html discussion.... Brian brian@hotwired.com 
brian@hyperreal.com 
http://www.hotwired.com/Staff/brian/ 
I think folding provides a nice intersection between two objectives ... that of helping the user cope with information AND by helping the user implicitly request less information up front reduce/manage network traffic. 
Serving the user and network with the same feature! 
Dave Morris Another way of doing it, obtaning good sides of both approaches is to use the "lines" query approach found in servers such as GN. 
In this way you can have a small file with the table of contents and then refer to the specific parts of a big .htlm 
document by line references. 
This caters for the guy with the small bandwidth. 
As it is still one monolitic document, document-wide searches can still be done conveniently. 
Keld The problem with flattening is that you can drag in all kinds of things you don't want, and what happens if it said "flatten 1000"! 
DynaWeb has a parameter on the URL called MAXBYTES. 
Once the data size exceeds this, it tries to generate a TOC. 
By setting MAXBYTES to some large number, you can retrieve entire documents. 
No browser changes needed. 
