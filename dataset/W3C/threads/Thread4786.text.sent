I think requirement 3.8 brings up major questions about just what we consider a "query". 
Does a "query" include a selection of the RDF source, or can the same query be executed against different sources? 
(The latter seems much more sensible to me...) It makes a lot of sense to make clear that a query should be encodable as text, and that requirement implicitly means that a query can be encoded *within* a URI, but that's a long way from saying that a query *is* a URI. 
The requirement as written conjures notions of new schemes and URLs and protocol dependence and all the rest. 
At the very very least, I'd suggest changing "...a query as a URI." to "...a query within a URI." 
I'm still not very happy with this requirement, because the whole URI issue just seems a side point. 
I don't think we need to standardize the format for a query URI in order to declare victory, and if we don't do that then I'm not sure we'll have grounds for deciding whether we've met the requirement. 
I'd go back to the very simple "It must be possible to express a query as unicode text." 
(Better ideas than 'unicode'?) 
This actually subsumes the requirement that queries be able to be embedded in URIs, and yet I think we've already agreed on it, so it seems like a no-brainer. 
be persuaded by an example. 
At the moment, I see it as a protocol matter concerned more with selecting the service access point. 
A "query" is one of Pat's 'familiar abuse of terminology'. 
The term is used for both a recipe (a sequence of symbols in the query language) for executing requests and the request (execution instance). 
A template can be partially instantiated (the source set, still can be repeated used). 
This multiple use is widespread and so our documents will be read with both meansings in mind - it isn't something a glossary can help with much. 
C.f. "program" - the file continaing the binary or the one-time execution. 
Its this overloading that causes the "bookmarkable query" to be a bit confusing. 
It isn't a term invented in this WG; it is a general web arch thing. 
What I think this requirement really says is that the protocol must be able to be used over HTTP GET as "bookmarkable". 
Query is nromally a safe operation and web caching also works. 
The requirement says very little about the query language as x-www-form-urlencoded can be applied, if there is a concrete syntax, it can be put in a URL. 
The charter says "HTTP and/or SOAP-based protocol" so this makes the HTTP part a requirement. 
Although I was used to put the selection of the RDF source(s) in the protocol (e.g. as command line arguments) I became more convinced that putting them in the query expression is also interesting. 
For a simple example that asks for the lat/long coordinates of Chicago or Cambridge, see i.e. @prefix owl: http://www.w3.org/2002/07/owl# . 
@prefix rdfs: http://www.w3.org/2000/01/rdf-schema# . 
@prefix da: http://eulersharp.sourceforge.net/euler# . 
@prefix d: http://eulersharp.sourceforge.net/2004/04test/danP# . 
(d: owl: rdfs:).da:from 
da:select {{?C d:cityName "Cambridge"; d:latitude ?LA; d:longitude ?LO} = {("Cambridge" ?LA ?LO) a d:Result}}, {{?C d:cityName "Chicago"; d:latitude ?LA; d:longitude ?LO} = {("Chicago" ?LA ?LO) a d:Result}}. 
where that d: is actually one of the RDF sources and the answer I actually got is ("Cambridge" 42.3 -71.1) a d:Result. 
("Chicago" 41.9 -87.6) a d:Result. 
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
Jos, To my reading of your example suggests the requriment for bookmarkability (the concept, not necessary the URL mechanism). 
That gives the ability to record making a query request of a particular knowledge base. 
The example of asking the same query of a whole bunch of sources shows the case where the query is reused in making requests to different sources,e.g. other places recording the same information, using the same namespace Both are useful. 
We have: Query == Query+target == Query request instance i.e. a the query (no target) becomes a partially instantiated request (query+target) then becomes used for the request. 
There are cases for all three (the last is useful for recording the action performed). 
Andy Although I was used to put the selection of the RDF source(s) in the protocol (e.g. as command line arguments) I became more convinced that putting them in the query expression is also interesting. 
For a simple example that asks for the lat/long coordinates of Chicago or Cambridge, see i.e. @prefix owl: http://www.w3.org/2002/07/owl# . 
@prefix rdfs: http://www.w3.org/2000/01/rdf-schema# . 
@prefix da: http://eulersharp.sourceforge.net/euler# . 
@prefix d: http://eulersharp.sourceforge.net/2004/04test/danP# . 
(d: owl: rdfs:).da:from 
da:select {{?C d:cityName "Cambridge"; d:latitude ?LA; d:longitude ?LO} = {("Cambridge" ?LA ?LO) a d:Result}}, {{?C d:cityName "Chicago"; d:latitude ?LA; d:longitude ?LO} = {("Chicago" ?LA ?LO) a d:Result}}. 
where that d: is actually one of the RDF sources and the answer I actually got is ("Cambridge" 42.3 -71.1) a d:Result. 
("Chicago" 41.9 -87.6) a d:Result. 
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
That's right Andy, both make sense. 
For the other one we could for instance ask for the cities within 20 miles of Cambridge i.e. and apply that kind of query for instance to the source to get back and of course, in that way the query can be applied to other sources. 
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
"Seaborne, Andy" andy.seaborne@hp.com 
Sent by: public-rdf-dawg-request@w3.org 14/05/2004 14:33 Group'" public-rdf-dawg@w3.org 
Subject: RE: Bookmarkable queries Jos, To my reading of your example suggests the requriment for bookmarkability (the concept, not necessary the URL mechanism). 
That gives the ability to record making a query request of a particular knowledge base. 
The example of asking the same query of a whole bunch of sources shows the case where the query is reused in making requests to different sources,e.g. other places recording the same information, using the same namespace Both are useful. 
We have: Query == Query+target == Query request instance i.e. a the query (no target) becomes a partially instantiated request (query+target) then becomes used for the request. 
There are cases for all three (the last is useful for recording the action performed). 
Andy Although I was used to put the selection of the RDF source(s) in the protocol (e.g. as command line arguments) I became more convinced that putting them in the query expression is also interesting. 
For a simple example that asks for the lat/long coordinates of Chicago or Cambridge, see i.e. @prefix owl: http://www.w3.org/2002/07/owl# . 
@prefix rdfs: http://www.w3.org/2000/01/rdf-schema# . 
@prefix da: http://eulersharp.sourceforge.net/euler# . 
@prefix d: http://eulersharp.sourceforge.net/2004/04test/danP# . 
(d: owl: rdfs:).da:from 
da:select {{?C d:cityName "Cambridge"; d:latitude ?LA; d:longitude ?LO} = {("Cambridge" ?LA ?LO) a d:Result}}, {{?C d:cityName "Chicago"; d:latitude ?LA; d:longitude ?LO} = {("Chicago" ?LA ?LO) a d:Result}}. 
where that d: is actually one of the RDF sources and the answer I actually got is ("Cambridge" 42.3 -71.1) a d:Result. 
("Chicago" 41.9 -87.6) a d:Result. 
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
One possible way a query could be bookmarked as a URI is as a URI to a query that is stored in a repository. 
The ebXML Registry allows queries to be stored within the server as a parameterized query. 
A client can invoke the query simply by identifying it with a URI and providing parameters to the query. 
This is similar in concept to stored queries in a relational database. 
If the client does not provide some parameters then the ebXML Registry drops the predicates for which parameters are not provided. 
The above use case seems to be a combination of: 3.2 Variable Bindings Result, and 3.8 Bookmarkable Queries Is my interpretation correct? 
Regards, Farrukh Having query requests as URLs as two effects: * web caching using the existing deployed cache servers * recording a query so it can be reused or passed on to another system to use. 
Bookmarking is the second effect. 
Whether caching will be significant, when applied to general queries, I don't know. 
The same query can be written syntactically in many different ways so just string comparison isn't much help although if it is the same application running ob different machines it is going to generate the syntactic forms. 
A very smart server could maintain a cache of part of the dataset, if we had an recommended format but the world of semantic web caches is some way off. 
If the query is on the server and just needs some parameters, then isn't this a case of a normal GET with a query string to provide the paramters? 
That is, existing mechanisms apply. 
Caching is likely as the parameterized query has its own URL and the parameters are the HTTP query string. 
It would benefit from one thing though - a MIME type or other way of specifying the form for the results. 
Andy From: Farrukh Najmi Date: 14 May 2004 16:13 
