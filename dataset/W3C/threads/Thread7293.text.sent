I was just having a discussion of the draft spec with some people here, and a few interesting questions came up: How do lock tokens work when there are multiple lock owners? 
The client that actually requested the lock gets the token back in response, but how do the other owners get access to the token? 
If we use SiteMaps for containment, there is a lot less shareability than we are used to in manipulating, say, file system directories. 
Do we really want the proliferation of mime types that is likely to result if we start registering mime types for attributes? 
--Judy Name:Judith A. Slein E-Mail:slein@wrc.xerox.com 
MailStop:128-29E There are two different ways a system can deal with the multi-user token problem, both are supported by the spec. 
Each owner can independently request a lock and receive their lock token. 
If the access rights check then the multiple simultenaous locks will be granted against the multiple locks. 
Otherwise a single principal can request a lock for multiple principals. 
The multiple principals will then discover the lock token value by retrieving the lock attribute for a particular document. 
The single principal can also transmit the lock token out of band. 
As for SiteMaps, we are NOT using them for containment. 
We are using them to present information. 
As attributes are fully negotiable one can request any mime type one wants to get the info including a text file. 
As for proliferation of MIME types. 
Pick your poison. 
We can proliferate mime types or we can create one mime type text/attribute and put all of our attributes into it. 
Yaron It's better to pick a mime type for transmission of attributes and put all of the attributes in it. 
For some thoughts on what that format should be, here are some references (do a search on "Uniform Resource Characteristic*" in your favorite Internet search tool). 
Ron Daniel's history http://www.acl.lanl.gov/URC/ 
Note that there were plans to (re)charter a URC working gorup in IETF, but they never got off the ground. 
See pointers Specification of Uniform Resource Characteristics Uniform Resource Agents (URAs) RFC 2016 ftp://ds.internic.net/rfc/rfc2016.txt 
Well gee whiz Larry, you could always read through all of those resources and summarize for the group. 
=) Yaron (with a sweet innocent smile) From:Larry Masinter [SMTP:masinter@parc.xerox.com] 
Sent:Sunday, November 03, 1996 9:51 PM Subject:Re: A Few Random Questions about the Spec # Well gee whiz Larry, you could always read through all of those # resources and summarize for the group. 
=) I already did: Danger! 
Here Be Dragons! 
We have an easy way to deal with dragons. 
Our standard allows developers to ignore them. 
With the exception of attributes which are used to implement a number of features, the entire standard is severable. 
So a developer can pick and choose what features they care to support. 
If any of our solutions do not meet their tastes they can feel free to not use them. 
"As long as I can say NO." Yaron Danger! 
Here Be Dragons! 
I don't get it, Yaron. 
If all of the attributes are optional and you can make more or ignore them all and do your own, then what's standard about them? 
If you want an 'optional standard attribute set' then use one that someone else spent more time on than we're likely to. 
You seem to be saying that we can ignore other people's requirements for metadata because they're free to ignore what we do, which doesn't make sense. 
Larry I suspect the next version of the draft will clear a lot of these problems up. 
However, in the more general sense, your arguments to date have been "Don't to this, it won't work." 
So we are going to do it anyway and if you are right we can always ignore the non-functioning parts. 
Yaron We do need to be cautious about saying NO to some dragons. 
Letting dangerous dragons to remain unanswered guarantees missing towns people. 
-src -src Steve Carter, Novell srcarter@novell.com 
srcarter@xmission.com 
801-228-5175 Yaron Goland yarong@microsoft.com 
11/04/96 01:17AM We have an easy way to deal with dragons. 
Our standard allows developers to ignore them. 
With the exception of attributes which are used to implement a number of features, the entire standard is severable. 
So a developer can pick and choose what features they care to support. 
If any of our solutions do not meet their tastes they can feel free to not use them. 
"As long as I can say NO." Yaron Danger! 
Here Be Dragons! 
