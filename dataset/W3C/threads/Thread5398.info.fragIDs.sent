This is really got me worried. 
I am wondering if someone can help me see if my system is effected by this Eolas patent: We have a GUI Frontend system called wcNAV ("Wildcat! 
Navigator") for our WINSERVER (Wildcat! 
Interactive Net Server) client/server hosting system . 
WINSERVER allows for - PPP dialing - Direct RS232 Dialing - FTP connectivity - EMAIL - Telnet - Web etc, etc. 
It centralizes a user database, file database and mail database so regardless of how you connect, the object security model presents the same access capabilities to the users. 
WcNAV is a Windows based applications which system admins to give to their end-users. 
Optionally, they can prepare a customized "Splash Screen" and they can lock the Connect Dial Address book to specific entries. 
WcNAV allows for connection methods: - RS232 Dialups - Telnet Socket The Dialup and Telnet communications are virtualized so it really doesn't matter how they connect. 
Once a connection is made, the Toolbar has: TELNET ICON WEB ICON MAIL ICON FILE ICON CHAT (Instant Messaging) ICON WHO IS ONLINE ICON PROPERTIES ICON (3rd party Icons installed by developers) This toolbar is controlled by a SYSTEM component which checks the host upon connection for updated versions of each component. 
In addition, each component will communicate with the system component to perform a installation and version check. 
Each component is a separate Window Process and they all communicate with the system component using OLE, Windows Messaging Events, etc. WCNAV can stand on its own and does not need the WEB component. 
However, if used, the two are tightly integrated using a FILE ASSOCIATION activation system. 
For example, the same TOOL BAR can be presented as a HTML page: etc. 
With the WCN extension, our web server is smart enough to know how the user logged in. 
If he logged in via the WEB browser, the then HTML version of these clients are presented. 
If he logged in via wcNAV and is viewing a HTML page to navigate a web site, then the WCN will trigger the corresponding client side module. 
This is done via Windows File Association. 
File association: .wcn=wildcat-navigator_auto_file 
File type definition: wildcat-navigator_auto_file=e:\wcnav\wildcat %1 So our unique client?xxxxx.WCN 
url can be used for both HTML and WCNAV GUI operations. 
With our 3rd party Software development kit, developers can write additional WcNAV client modules. 
They are prepared for distribution using our special tools on the server side. 
When wcNAV connects, the system components checks for the TOOLBAR layout and any new installation of new components. 
If this or any part of it covered by the patent? 
The only thing I see that is could be covered by the patent is our HTML version of the CHAT.WCH client which uses JAVA applet send to the user's machine in HTML mode. 
All our other HTML clients do not use embedded technology but instead our version of "CLR" called Wildcat! 
BASIC which our version of CLR to define the central client/server operation of the system. 
Anyone interested in visually seeing it in action to get a better feel, can download the wcNAV from: install it on your machine. 
I believe it already has a connection entry for our Support site, but if not, use online.winserver.com as a TELNET (WINSOCK) connection type. 
and then one of the following accounts to login: userid: GUEST password GUEST userid: GUEST1 password GUEST1 userid: GUEST2 password GUEST2 What I want you to see is the "home page" that is popped up when you connect. 
If it doesn't automatically start your browser, then click on the BROWSER icon on the toolbar. 
Notice how you can activate any of the wcNAV GUI components either directly via the wcNAV toolbar or via the home page HTML menu corresponding to the same actions with the WCN extensions. 
If you like, you can directly connect via the BROWSER to see the HTML versions of these clients. 
The CHAT module is the only one using JAVA. 
Comments? 
Thanks Sincerely, Hector Santos, CTO Santronics Software, Inc. 305-431-2846 Cell 305-248-3204 Office 
I'm curious, if Microsoft links the .NET 
VM into the next version of IE and runs it as an IE thread do they stop infringing the patent? 
If so I imagine they may actually be quite happy about this ruling, behind closed doors, and perhaps they aren't trying very hard to find prior art to overturn the patent. 
If browser plugins are outlawed it does substantially more harm to Microsoft's competitors than it does to Microsoft as long as Microsoft builds the dominant browser. 
It's probably worth remembering that Microsoft have let it be known that IE6.0 SP1 will be the last 'standalone' version of IE for 'legacy' (i.e. pre-Longhorn) Windows platforms. 
It's almost certain that 'browsing' in Longhorn will be effectively 'built-in' to the OS and will be written in managed code. 
With a release date of 2005+ for Longhorn, the company has plenty of time to address non-infringement in their new code base, given that any appeal fails. 
That leaves the current base of IE and WebBrowser to consider, and it's quite hard to know what could or would need to be done without a more clear understanding of the scope of the Eolas claim. 
Support for Netscape-compatible plug-ins has already been removed from the 
latest builds of IE. Deprecating support for the object tag is a further 
possibility, but all that would mean is that the corporates who depend on it wouldn't update to the neutered builds ... and it's possible that not even Microsoft would be prepared to risk the row that would ensue over thousands of broken corporate applications were that 'fix' to be incorporated and pushed out alongside some new critical MSHTML security patch. 
But as others have noted, until we see a technical FAQ (and preferably a 
transcript of the recent meeting) from the W3C to base any comments upon, most of what can be contributed here is just going to be speculative and probably not very helpful. 
Jerry Mead 
the 
further 
Of course, we do not yet know what remedy Microsoft is making, but if they were to remove support for some features to avoid paying future royalties (presumably the current ruling encompasses past royalties), and patent compliance was their sole motive, then surely, if they had a mechanism to fix existing browsers (i.e. a patch,) they would have to use it? 
Or is that the point? 
That Microsoft see that by fixing all future copies of IE, they have done their part, and are free to move on to "bigger" and "better" things? 
(They have already said that MSIE is now a legacy component. 
What do they care if people are running the next to last version of a legacy component, or the last version?) Too many questions, Archer End. 
