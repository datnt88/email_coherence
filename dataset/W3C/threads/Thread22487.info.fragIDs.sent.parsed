(S1 (FRAG (PP (IN In) (NP (DT the) (NN specification))) (: :) (`` ``) (S (NP (NNS Parameters)) (VP (VB tagname) (NP (NP (DT The) (NN name)) (PP (IN of) (NP (DT the) (NN tag)))) (S (VP (TO to) (VP (VB match) (PRT (RP on))))))) (. .)))
(S1 (SBAR (IN If) (S (NP (DT the) (NN string) ('' '') (NN *) ('' '')) (VP (AUX is) (VP (VBN given) (, ,) (NP (DT this)))))))
(S1 (NP (NN method) (NN will)))
(S1 (S (S (VP (VB return) (NP (DT all) (NNS elements)) (PP (IN in) (NP (DT the) (NN document))))) ('' '') (VP (AUX Does) (NP (PRP it)) (ADVP (RB really)) (VP (VB mean) (SBAR (IN that) (S ('' '') (NP (NNP *)) ('' '') (VP (VBZ returns) (NP (DT all) (NNS elements)) (PP (IN in) (NP (DT the) (NN Document))) (, ,) (NP (RB even) (DT the)))))))))
(S1 (NP (NP (NNS elements)) (PP (IN in) (NP (DT the)))))
(S1 (S (S (NP (NP (NN parent) (NN chain)) (PP (IN of) (NP (DT the) (NN element) (NN instance))))) (, ,) (CC or) (SQ (AUX does) (NP (PRP it)) (VP (VB mean) (NP (DT all) (NNS elements))))))
(S1 (S (VP (VBG descending) (NP (DT the)))))
(S1 (FRAG (NP (NN element) (NN instance)) (. ?)))
(S1 (S (NP (DT That)) (VP (AUX is) (NP (NP (RB just) (DT an) (NN error)) (PP (IN in) (NP (DT the) (NNP doc))))) (. .)))
(S1 (S (NP (PRP It)) (VP (MD will) (VP (AUX be) (VP (VBN fixed) (PP (IN in) (NP (DT the) (JJ next) (NN release)))))) (. .)))
(S1 (S (ADVP (RB Also)) (: :) (S (NP (PRP I)) (ADJP (JJ presume)) (SBAR (IN that) (S (NP (DT the) (NN method)) (VP (AUX is) (ADJP (JJ recursive))))) (, ,) (INTJ (UH please)) (VP (VB tell) (NP (PRP me)) (SBAR (IN if) (S (NP (PRP i)) (VP (AUX am) (ADJP (JJ wrong))))))) (. .)))
(S1 (S (NP (DT That)) (VP (AUX is) (NP (DT an) (NN implementation) (NN issue))) (. .)))
(S1 (NP (NNP Don)))
(S1 (S (NP (PRP I)) (VP (AUX am) (VP (VBG developing) (NP (NP (DT a) (JJ DOM) (NN api)) (PP (IN in) (NP (NNP C++))) (PP (IN for) (NP (NP (PRP$ our) (NN product)) (NP (DT the) (NN SGML/XML) (NN editor)))))))))
(S1 (NP (NP (NNP Documentor)) (CC and) (NP (PRP I) (AUX am))))
(S1 (S (NP (DT a) (NN bit)) (VP (VBN confused) (PP (IN about) (NP (NP (DT the) (NN Element)) (VP (VBG ::) (NP (JJ getElementsByTagName) (NN method)))))) (. .)))
(S1 (FRAG (PP (IN In) (NP (DT the) (NN specification))) (: :) (`` ``) (S (NP (NNS Parameters)) (VP (VB tagname) (NP (NP (DT The) (NN name)) (PP (IN of) (NP (DT the) (NN tag)))) (S (VP (TO to) (VP (VB match) (PRT (RP on))))))) (. .)))
(S1 (SBAR (IN If) (S (NP (DT the) (NN string) ('' '') (NN *) ('' '')) (VP (AUX is) (VP (VBN given) (, ,) (NP (DT this)))))))
(S1 (NP (NN method) (NN will)))
(S1 (S (S (VP (VB return) (NP (DT all) (NNS elements)) (PP (IN in) (NP (DT the) (NN document))))) ('' '') (VP (AUX Does) (NP (PRP it)) (ADVP (RB really)) (VP (VB mean) (SBAR (IN that) (S ('' '') (NP (NNP *)) ('' '') (VP (VBZ returns) (NP (DT all) (NNS elements)) (PP (IN in) (NP (DT the) (NN Document))) (, ,) (ADVP (RB even)))))))))
(S1 (NP (NP (DT the) (NNS elements)) (PP (IN in) (NP (DT the)))))
(S1 (S (S (NP (NP (NN parent) (NN chain)) (PP (IN of) (NP (DT the) (NN element) (NN instance))))) (, ,) (CC or) (SQ (AUX does) (NP (PRP it)) (VP (VB mean) (NP (DT all) (NNS elements))))))
(S1 (S (VP (VBG descending) (NP (DT the)))))
(S1 (FRAG (NP (NN element) (NN instance)) (. ?)))
(S1 (NP (NP (NP (DT All) (NNS sub-elements)) (PP (IN of) (NP (NP (NP (DT the) (NN Element)) (PP (IN in) (NP (DT this) (NN case)))) (, ,) (RB not) (NP (DT the) (NN document))))) (PRN (-LRB- -LRB-) (S (NP (DT that)) (VP (AUX 's) (SBAR (WHNP (WP what)) (S (NP (NNP Document.getElementsByTagName)) (VP (AUX is) (PP (IN for))))))) (-RRB- -RRB-)) (. .)))
(S1 (S (ADVP (RB Also)) (: :) (S (NP (PRP I)) (ADJP (JJ presume)) (SBAR (IN that) (S (NP (DT the) (NN method)) (VP (AUX is) (ADJP (JJ recursive))))) (, ,) (INTJ (UH please)) (VP (VB tell) (NP (PRP me)) (SBAR (IN if) (S (NP (PRP i)) (VP (AUX am) (ADJP (JJ wrong))))))) (. .)))
(S1 (FRAG (SBAR (IN If) (S (PP (IN by) (NP (NN recursive))) (NP (PRP you)) (VP (VBP mean) (SBAR (AUX does) (S (NP (PRP it)) (VP (AUX do) (NP (DT the) (JJ entire) (NN sub-tree)))))))) (, ,) (ADVP (RB then) (RB yes)) (. .)))
(S1 (NP (NNP Lauren)))
(S1 (S (S (NP (PRP I)) (VP (AUX am) (VP (VBG developing) (NP (NP (DT a) (JJ DOM) (NN api)) (PP (IN in) (NP (NNP C++)))) (PP (IN for) (NP (NP (PRP$ our) (NN product)) (NP (DT the) (NNP SGML/XML) (NN editor) (NN Documentor))))))) (CC and) (S (NP (PRP I)) (VP (AUX am) (ADJP (NP (DT a) (NN bit)) (VBN confused) (PP (IN about) (NP (NP (DT the) (NN Element)) (VP (VBG ::) (NP (JJ getElementsByTagName) (NN method)))))))) (. .)))
(S1 (FRAG (PP (IN In) (NP (DT the) (NN specification))) (: :) (`` ``) (S (NP (NNS Parameters)) (VP (VB tagname) (NP (NP (DT The) (NN name)) (PP (IN of) (NP (DT the) (NN tag)))) (S (VP (TO to) (VP (VB match) (PRT (RP on))))))) (. .)))
(S1 (S (SBAR (IN If) (S (NP (DT the) (NN string) ('' '') (NN *) ('' '')) (VP (AUX is) (VP (VBN given))))) (, ,) (NP (DT this) (NN method)) (VP (MD will) (VP (VB return) (NP (NP (DT all) (NNS elements)) (PP (IN in) (NP (DT the) (NN document)))) ('' '') (SBAR (SINV (AUX Does) (NP (PRP it)) (VP (ADVP (RB really)) (VB mean) (SBAR (IN that) (S (S ('' '') (NP (NNP *)) ('' '') (VP (VBZ returns) (NP (DT all) (NNS elements)) (PP (IN in) (NP (DT the) (NN Document))) (, ,) (NP (NP (RB even) (DT the) (NNS elements)) (PP (IN in) (NP (NP (DT the) (NN parent) (NN chain)) (PP (IN of) (NP (DT the) (NN element) (NN instance)))))))) (, ,) (CC or) (SQ (AUX does) (NP (PRP it)) (VP (VB mean) (NP (NP (DT all) (NNS elements)) (VP (VBG descending) (NP (DT the) (NN element) (NN instance))))))))))))) (. ?)))
(S1 (S (ADVP (RB Also)) (: :) (S (NP (PRP I)) (ADJP (JJ presume)) (SBAR (IN that) (S (NP (DT the) (NN method)) (VP (AUX is) (ADJP (JJ recursive))))) (, ,) (INTJ (UH please)) (VP (VB tell) (NP (PRP me)) (SBAR (IN if) (S (NP (PRP i)) (VP (AUX am) (ADJP (JJ wrong))))))) (. .)))
(S1 (NP (NP (NNP Peter) (NNP Pierrou) (NNP Excosoft)) (NP (NNP AB) (NNP Electrum)) (NP (CD 420) (NNP S-164) (CD 40) (NNP Kista))))
