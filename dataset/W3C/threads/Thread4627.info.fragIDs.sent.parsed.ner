(TOP (NP (location (NNP Hi))) )
(TOP (SBARQ (WHADVP (WRB Where)) (SQ (MD can) (NP (PRP I)) (VP (VB find) (NP (NP (DT the) (NN definition)) (PP (IN of) (NP (DT the) (NN eq) (NN operator)))))) (. ?)) )
(TOP (NP (NNP TIA) (, ,) (NNP Tobi)) )
(TOP (NP (NP (location (NNP Hi) (NNP Tobi))) (, ,)) )
(TOP (S (NP (DT The) (NN eq) (NN operator)) (VP (AUX is) (VP (VBN defined) (PP (IN in) (NP (NNP Section) (CD 3.5.1)))))) )
(TOP (NP (NP (NP (NN Value) (NNS Comparisons)) (PP (IN in) (NP (NP (DT the) (JJ XPath) (CD 2.0) (NNS WD)) (PP (IN at) (: :) (NP (NP (DT The) (NN way)) (SBAR (WHPP (IN in) (WHNP (WDT which))) (S (NP (NP (CD eq) (NNS works)) (PP (IN for) (NP (DT a) (JJ particular) (NN data) (NN type)))) (VP (AUX is) (VP (VBN defined) (PP (IN in) (NP (DT the) (NNP F&amp)))))))))))) (: ;) (NP (CD O) (NNS WD)) (X (IN at)) (: :)) )
(TOP (S (NP (NP (JJS Most) (NNS data) (NNS types)) (SBAR (WHNP (WDT that)) (S (NP (PRP you)) (VP (MD can) (VP (VB compare) (PP (IN for) (NP (NN equality)))))))) (VP (AUX have) (NP (NP (DT a) (NN op)) (: :) (NP (NP (NP (JJ X-equal) (-LRB- -LRB-) (-RRB- -RRB-) (NN operator)) (VP (VBN defined) (PP (IN in) (NP (DT the) (NNP F&amp))))) (: ;) (NP (NP (NNP O) (NNP WD)) (, ,) (SBAR (WHADVP (WRB where)) (S (NP (SYM X)) (VP (AUX is) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (DT the) (NN data) (NN type))))))))))) (. .)) )
(TOP (S (S (PP (IN For) (NP (NN example))) (, ,) (SBAR (IN if) (S (NP (PRP you)) (VP (VBP want) (S (VP (TO to) (VP (VB find) (PRT (RP out)) (SBAR (WHADVP (WRB how)) (S (NP (CD two) (NNS dateTimes)) (VP (AUX are) (VP (VBN compared))))))))))) (, ,) (VP (VB look) (PRT (RP up)) (NP (NP (NNS op)) (PRN (: :) (ADJP (ADJP (JJ dateTime-equal)) (-LRB- -LRB-)) (-RRB- -RRB-))) (PP (IN at)))) (: :) (S (NP (DT The) (NN exception)) (VP (AUX is) (NP (DT that) (NN xs)))) (: :) (S (NP (NN string) (NNS values)) (VP (AUX are) (VP (VBN compared) (S (VP (VBG using) (NP (NNS fn))))))) (: :) (S (VP (VB compare))) (-LRB- -LRB-) (-RRB- -RRB-)) )
(TOP (S (SBAR (IN as) (S (VP (VBN defined) (PP (IN at) (: :) (NP (NP (DT A) (JJ complete) (NN list)) (PP (IN of) (NP (NP (DT the) (JJ possible) (NNS comparisons)) (CC and) (NP (NP (DT the) (JJ relevant) (NNS operators/functions)) (PP (IN from) (NP (DT the) (NNP F&amp))))))))))) (: ;) (NP (JJ O) (NNS WD)) (VP (AUX are) (VP (VBN given) (PP (IN in) (NP (NP (location (NNP Appendix)) (NNP B.2) (NN Operator) (NN Mapping)) (PP (IN in) (NP (NNP XPath) (CD 2.0))) (PP (IN at) (: :) (NP (NP (NNP Cheers)) (, ,) (NP (NNP Jeni) (NNP Jeni) (NNP Tennison))))))))) )
(TOP (NP (location (NP (NNP Hi) (NNP Jeni)) (NP (JJ -LSB-) (NN ..)) (. .) (NP (NP (NNS thanks)) (PP (IN for) (NP (NP (PDT all) (DT the) (NNS pointers) (CC and) (NNS explanations)) (: ...) (JJ -RSB-)))))) )
(TOP (S (ADVP (RB Somehow)) (NP (PRP I)) (VP (VBP hit) (NP (NP (DT the) (JJ same) (NNS walls)) (PP (IN as) (ADVP (RB before))))) (: :) (SBARQ (WHADVP (WRB Why)) (SQ (VP (AUX does) (NP (NP (NN op)) (: :) (NP (NP (JJ node-equal) (NN test)) (PP (PP (IN for) (NP (NN identity))) (, ,) (RB not) (PP (IN for) (NP (NN equality)))))))) (. ?))) )
(TOP (SBARQ (SBAR (IN If) (S (NP (EX there)) (VP (AUX is) (ADJP (JJ eq) (CC and) (JJ op)) (: :) (NP (JJ node-equal))))) (, ,) (WHADVP (WRB why)) (SQ (AUX is) (NP (EX there)) (ADJP (RB no) (JJ fn) (: :) (JJ node-equal))) (. ?)) )
(TOP (FRAG (-LRB- -LRB-) (NP (QP (CC or) (JJR fn))) (: :) (NP (NN shallow-equal)) (-RRB- -RRB-)) )
(TOP (S (S (NP (DT Those) (NNS questions)) (VP (AUX have) (VP (AUX been) (VP (VBN replied) (PP (TO to)) (ADVP (RB already)))))) (, ,) (S (NP (PRP I)) (VP (AUX 'm) (ADVP (RB just) (RB still)) (RB not) (ADJP (JJ satisfied)))) (. .)) )
(TOP (S (S (CC But) (NP (PRP I)) (VP (VBP guess) (SBAR (S (NP (NP (DT no) (NN spec)) (PRN (-LRB- -LRB-) (ADVP (RB not) (RB even)) (NP (CD ten) (JJ related) (NNS ones)) (: :) (-RRB- -RRB-))) (VP (MD can) (VP (VB satisfy) (NP (NN everyone)) (ADVP (RB ..))))))) (. .)) (ADVP (RB perhaps)) (NP (NNP EXSLT)) (VP (MD will) (VP (VB design) (NP (DT a) (JJ sandard) (NN lib)))) (. ?)) )
(TOP (NP (NNP Tobi)) )
(TOP (NP (NP (location (NNP Hi) (NNP Tobi))) (, ,)) )
(TOP (S (VP (VB Note) (SBAR (IN that) (S (NP (NP (NNS eq) (CC and) (NNS op)) (PRN (: :) (ADJP (JJ node-equal)) (-LRB- -LRB-) (-RRB- -RRB-))) (VP (AUX are) (RB not) (ADVP (IN at) (DT all)) (ADJP (JJ related)))))) (. .)) )
(TOP (S (S (NP (NNP eq)) (VP (AUX is) (VP (VBN used) (PP (IN for) (S (VP (VBG comparing) (NP (JJ atomic) (NNS values)))))))) (: ;) (S (SBAR (IN if) (S (NP (PRP you)) (VP (VBP try) (S (VP (TO to) (VP (VB compare) (NP (NP (CD two) (NNS nodes)) (VP (VBG using) (NP (NNS eq)))))))))) (ADVP (RB then)) (NP (PRP you)) (VP (MD will) (VP (VB compare) (NP (PRP$ their) (JJ atomised) (NNS values))))) (. .)) )
(TOP (S (NP (NP (CD op)) (PRN (: :) (ADJP (ADJP (JJ node-equal)) (-LRB- -LRB-)) (-RRB- -RRB-))) (VP (AUX is) (VP (VBN used) (PP (IN by) (NP (NP (DT the) (`` ``) (S (VP (AUX is))) ('' '') (CC and) (`` ``) (NN isnot) ('' '') (NNS operators)) (, ,) (RB not) (NP (DT the) (NN eq) (NN operator)))))) (. .)) )
(TOP (SQ (MD Could) (NP (PRP you)) (VP (VB give) (NP (NP (DT an) (NN example)) (PP (IN of) (NP (NP (DT a) (NN transformation)) (SBAR (WHADVP (WRB where)) (S (NP (PRP you)) (VP (VBP think) (SBAR (S (NP (PDT such) (DT a) (NN function)) (VP (MD would) (VP (AUX be) (ADJP (JJ useful))))))))))))) (. ?)) )
(TOP (S (NP (PRP I)) (VP (AUX have) (NP (NP (JJ great) (NN difficulty)) (S (VP (VBG understanding) (SBAR (WHNP (WP what)) (S (NP (NP (PRP$ your) (NN idea)) (PP (IN of) (NP (NP (NNS fn)) (PRN (: :) (ADJP (JJ shallow-equal)) (-LRB- -LRB-) (-RRB- -RRB-))))) (VP (VP (AUX is)) (CC and) (VP (, ,) (ADVP (RBR more) (RB importantly)) (, ,) (SBAR (WHADVP (WRB why)) (S (NP (PRP you)) (VP (VBP think) (SBAR (S (NP (PRP it)) (VP (MD would) (VP (AUX be) (ADJP (JJ useful))))))))))))))))) (. .)) )
(TOP (NP (NP (NNP Cheers)) (, ,) (NP (NNP Jeni) (NNP Jeni) (NNP Tennison))) )
(TOP (NP (location (NNP Hi) (NNP Jeni))) )
(TOP (S (`` ``) (S (NP (NP (DT A) (NN comparison)) (PP (IN with) (NP (DT the)))) (VP (AUX is) (SBAR (S (NP (NN operator)) (VP (AUX is) (ADJP (JJ true)) (SBAR (IN if) (S (NP (DT the) (CD two) (NNS operands)) (VP (AUX are) (NP (NP (NNS nodes)) (SBAR (WHNP (WDT that)) (S (VP (AUX have) (NP (DT the) (JJ same) (NN identity)))))))))))))) (: ;) (S ('' '') (ADVP (RB So)) (`` ``) (VP (AUX is) (SBAR (S (NP ('' '') (CC and) (`` ``) (NN isnot) ('' '') (NNS operators)) (VP (MD should) (VP (VB use) (S (NP (NN something)) (VP (VBN named) (NP (NP (NNS op)) (PRN (: :) (ADJP (ADJP (JJ node-identical)) (-LRB- -LRB-)) (-RRB- -RRB-))))))))))) (. .)) )
(TOP (S (PP (IN In) (NP (DT a) (NN testing) (NN framework))) (, ,) (NP (PRP I)) (VP (AUX 'm) (VP (VBG comparing) (NP (NP (NNS pairs)) (PP (IN of) (NP (NNS forrests)))) (PP (IN by) (S (VP (VBG comparing) (NP (NP (DT each) (NN pair)) (PP (IN of) (NP (NNS trees))))))))) (. .)) )
(TOP (S (NP (PRP I)) (VP (AUX 'm) (VP (VBG doing) (NP (DT this)) (PP (IN with) (NP (NP (NN fn)) (PRN (: :) (JJ deep-equal) (-LRB- -LRB-) (-RRB- -RRB-)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ works) (ADVP (RB well))))))))) (. .)) )
(TOP (S (ADVP (RB Now)) (, ,) (PP (RB instead) (IN of) (S (VP (VBG getting) (ADJP (JJ true) (CC or) (JJ false)) (ADVP (RB back))))) (, ,) (NP (PRP I)) (VP (MD 'd) (VP (VB like) (S (VP (TO to) (VP (VB get) (NP (NP (DT the) (JJ first) (JJ different) (NN item)) (PRN (-LRB- -LRB-) (NP (CD eg) (NN node)) (-RRB- -RRB-))) (ADVP (RB back)) (PP (RB instead) (IN of) (ADJP (JJ false)))))))) (. .)) )
(TOP (S (S (NP (PRP I)) (VP (AUX need) (NP (NP (DT a) (NN fn)) (PRN (: :) (ADJP (ADJP (JJ deep-equal)) (-LRB- -LRB-)) (-RRB- -RRB-)) (SBAR (WHNP (WDT which)) (S (VP (VBZ returns) (NP (DT the) (JJ first) (JJ different) (NN node)))))))) (: :) (S (NP (PRP It)) (VP (MD would) (VP (VP (VB recurse) (PRT (RP down)) (NP (DT the) (NN tree)) (PRN (-LRB- -LRB-) (PP (ADVP (RB just)) (IN as) (NP (NP (NN fn)) (: :) (ADJP (ADJP (JJ deep-equal)) (-LRB- -LRB-)))) (-RRB- -RRB-) (VP (AUX does)) (-RRB- -RRB-))) (, ,) (VP (VB stop) (ADVP (RB as) (RB soon) (SBAR (IN as) (S (NP (PRP it)) (VP (VBZ finds) (NP (DT a) (JJ different) (NN node)) (PP (IN in) (NP (DT the) (JJ second) (NN tree)))))))) (, ,) (CC and) (VP (VB return) (NP (PRP it)))))) (. .)) )
(TOP (S (SBAR (WHADVP (WRB When)) (S (NP (AUXG being)) (VP (VP (VBD fed) (SBAR (S (NP (PRP it)) (VP (MD would) (VP (VB return)))))) (CC or) (VP (NP (DT the) (NN pair)) (PP (IN as) (NP (NN sequence))) (: :) (SBAR (IN While) (S (VP (VBG recursing)))))))) (, ,) (NP (DT the) (NN function)) (VP (MD would) (VP (VB compare) (NP (DT each) (JJ node) (NN pair)) (PP (IN by) (S (VP (VBG calling) (S (ADJP (JJ s.th)))))))) (. .)) )
(TOP (S (S (PP (IN like) (NP (JJ shallow-equal) (PRN (-LRB- -LRB-) (NP (money ($ $) (CD current_node_in_tree_1))) (, ,) (NP (money ($ $)) (CD current_node_in_tree_2)) (-RRB- -RRB-)) (UH Yes))) (NP (PRP I)) (VP (MD could) (ADVP (RB quite) (RB easily)) (VP (VB write) (NP (NP (DT the) (VBG recursing) (NN function)) (CC and) (NP (DT the) (VBG comparing) (NN shallow-equal)))))) (-LRB- -LRB-) (-RRB- -RRB-) (S (NP (NP (NP (NP (PRP myself)) (PRN (-LRB- -LRB-) (FW eg) (: :))) (IN if) (JJ node-kind) (-LRB- -LRB-) (NP ($ $) (CD node)) (-RRB- -RRB-) (SYM =)) (: ') (NP (NN text) (POS '))) (ADVP (RB then)) (VP (VBP compare) (NP (NP (DT the) (NN string)) (PRN (, ,) (ADVP (RB otherwise)) (ADJP (FW etc) (FW etc)) (-RRB- -RRB-))))) (, ,) (CC and) (S (NP (PRP I)) (ADVP (RB probably)) (VP (MD will))) (, ,) (CC but) (S (NP (PRP I)) (VP (VBP think) (SBAR (S (NP (PRP it)) (VP (MD would) (VP (AUX be) (NP (NP (DT a) (JJ useful) (NN addition)) (PP (TO to) (NP (NP (DT a) (JJ standard) (NN lib)) (PRN (-LRB- -LRB-) (SQ (AUX be) (NP (PRP it)) (VP (VBN designed) (CC and) (VBN specified) (PP (IN by) (NP (NNP EXSLT) (CC or) (NNP W3C))))) (-RRB- -RRB-))))))))))) (. .)) )
(TOP (NP (NNP Tobi)) )
