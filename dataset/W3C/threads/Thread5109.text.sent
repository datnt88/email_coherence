Using your Perl KB browser, the "domainOf" property seems to list all the properties of a Class. 
However, the GetData function does NOT return the list of properties. 
Why not??? 
For example mkrGetData Person has ? 
returns nothing. 
I see some other strange results. 
For example mkrGetData Resource isc ? 
returns nothing, while mkrGetData Node isc ? 
returns Class and mkrGetData Activity isa ? 
returns Resource Dick McCullough knowledge := man do identify od existent done knowledge haspart proposition list Glad to hear you got the MKR system working with GetData! 
To query the available properties of a node, ask for "arcs". 
To find the fooOf arcs, as for "arcs" with the flag "inverse=yes". 
DomainOf is an inverse property, so to ask for the domain of Person is to ask for the inverse. 
To see an example of this, edit ex8.pl (or ex8.java) and change CountryUnitedStates to Person. 
I saw this a couple of months ago; we renamed Node to Resource to be more RDF friendly. 
I thought I'd fixed it. 
It seems there are still some issues to resolve, I'll try to take care of those this week sometime. 
Thanks for the clarification. 
I'm now using "domain", "inverse=yes" instead of "domainOf". 
I've made some more improvements in mkrGetData -- it's getting closer to what I expect the ultimate interface to look like. 
A quick question about "instanceOf". 
In RDF. 
"instanceOf" (isa) subsumes "individualOF" (isu) and "subClassOf" (iss). 
Is that also true in TAP? 
I noticed you don't have "individualOf". 
Dick McCullough knowledge := man do identify od existent done knowledge haspart proposition list Glad to hear you got the MKR system working with GetData! 
To query the available properties of a node, ask for "arcs". 
To find the fooOf arcs, as for "arcs" with the flag "inverse=yes". 
DomainOf is an inverse property, so to ask for the domain of Person is to ask for the inverse. 
To see an example of this, edit ex8.pl (or ex8.java) and change CountryUnitedStates to Person. 
I saw this a couple of months ago; we renamed Node to Resource to be more RDF friendly. 
I thought I'd fixed it. 
It seems there are still some issues to resolve, I'll try to take care of those this week sometime. 
If I understand your terminology correctly, we use rdf:type as "individualOf" and rdfs:subClassOf as "subClassOf". 
We have a function called IsAncestor which will scan for either (that is, if you ask if Person is an ancestor of ActorTom_Hanks, where ActorTom_Hanks is "type Actor" and Actor is "subClassOf Person", then it will return true). 
However we don't have an operator for it. 
I think Cyc calls these "instanceOf", "subClassOf", and "allInstanceOf", if I remember an old discussion with Guha. 
TAP also has two additional flags, includeSuperClasses and includeSubClasses, which specify that in searching for the answer, look at sub classes of property values, or at super classes. 
Consider this description: type SportsTeam term wizards You might imagine this working in RDF, but in TAP it doesn't because the Washington Wizards is a BasketballTeam, which is a subClassOf SportsTeam. 
So to make this work, you would need to ask: type SportsTeam includeSubClasses=yes term wizards This is all off the top of my head, but it should work. 
Very interesting !!! 
I had the impression that rdf:type mapped to instanceOf, instead of individualOf. 
BTW, in my MKR language, isa, isu, iss refer to adjacent levels in a specific concept hierarchy/lattice. 
I use a regular expression style of notation for multi-level operators: is 0 levels (identity/alias) isa 1 level isa**n n levels isa* 0 or more levels isa+ 1 or more levels Thus instanceOf is isa individualOf is isu subClassOf is iss* allinstanceOf is isa+ Dick McCullough knowledge := man do identify od existent done knowledge haspart proposition list If I understand your terminology correctly, we use rdf:type as "individualOf" and rdfs:subClassOf as "subClassOf". 
We have a function called IsAncestor which will scan for either (that is, if you ask if Person is an ancestor of ActorTom_Hanks, where ActorTom_Hanks is "type Actor" and Actor is "subClassOf Person", then it will return true). 
However we don't have an operator for it. 
I think Cyc calls these "instanceOf", "subClassOf", and "allInstanceOf", if I remember an old discussion with Guha. 
TAP also has two additional flags, includeSuperClasses and includeSubClasses, which specify that in searching for the answer, look at sub classes of property values, or at super classes. 
Consider this description: type SportsTeam term wizards You might imagine this working in RDF, but in TAP it doesn't because the Washington Wizards is a BasketballTeam, which is a subClassOf SportsTeam. 
So to make this work, you would need to ask: type SportsTeam includeSubClasses=yes term wizards This is all off the top of my head, but it should work. 
