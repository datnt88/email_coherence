Hi 
I've been working on a website for a small UK charity which I have been trying to make accessible, without losing the 'look and feel' of the interface design. 
The original had independently scrolling columns laid out side by side using 
FRAMES. 
I've been able to recreate the scrolling columns using CSS, and make them keyboard accessible using tabindex. 
They seem to work OK with Lynx and display correctly without CSS, but I still have a few problems. 
The columns use percentages for positioning and width so that they fit the 
screen, but this design is screwed up royally by Netscape 4. Also, to avoid 
an unneccessary horizontal scroll bar, I've used the overflow-Y property which only works in IE5+. 
I'm aware that I've painted myself into an accessibility corner here, but 
I'm wondering whether it is possible to have the page load a simple default 
CSS, then somehow detect the browser and load the alternative CSS optimised 
for IE if applicable (and would that be an acceptably accessible solution)?. 
I don't have access to any server side technology. 
Can anyone advise ? 
best wishes John Ablett 
Hi John 
Do you have access to any server-side scripting (CGI)? 
The usual way would be to do something in JavaScript, but I think that it's probably not wise to make the assumption that the client a) has it and b) it actually works as it's meant to; server-side scripting eliminates any dependency on the client's browser - I write in Perl and my external style sheet is actually a Perl programme that can be fed parameters, like what browser you are dealing with, etc. 
Hope this helps; if you want nitty gritty details of this, please feel free to contact me either on or off list. 
Cheers M Matthew Smith | Business: http://www.kbc.net.au 
IT Consultant | PGP Key: http://gpg.mss.cx 
Kadina, South Australia | * Tivis Project * Community Connect * 
You can do to this some extent without using client side or server side scripting. 
What you need to do is to exploit the css parsing bugs in 
different browsers so they see different syles - and there are lots of bugs 
to play with ;-) hth - sorry can't really advise anymore since it's a sizeable subject and there are quite a few different methods. 
These places might help: Julian 
using 
avoid 
default 
optimised 
solution)?. 
On Fri, 15 Nov 2002 16:28:40 -0000 
Commendable. 
If, as you say, you have access to no server-side techniques, there is no effective method to achieve what you seem to want. 
That said, I suggest you have a look at for the method we used to achieve the same. 
This, however, demands access to one, or other, server-side technology. 
Personally I dislike the hacks mentioned. 
Then again, perhaps they 
fit your requirements. 
Tina Holmboe [Windrose@DALnet] [tina@elfi.org] 
[tina@htmlhelp.com] 
$_ =  '-- '; s/../pack("c",hex($&amp;))/eg; eval; 7072696e7420224a75737420616e6f74686572205065726c206861636b65722c22 
John, 
You can exploit the fact that NS4 does not recognise the @import rule to add extra styles to the cascade, and put the troublesome rules in the imported style sheet. 
The references given earlier should help. 
Personally, I now 
tend towards the 'no CSS for browsers earlier than v5' school of thinking, and make sure the non-CSS version is linearised correctly, which you have already done by the sound of it. 
(See the com. 
arts url below if you want to see how it's done. 
Based on the List Apart model. 
However, based on other comments here, I may well get rid of the "nag screen" aspects, or at least put them at the end of the page.) Lois Wakeman 
"Matthew Smith" matt@kbc.net.au wrote in message news:3DD619F3.2000304@kbc.net.au... 
but 
default 
optimised 
solution)?. 
Javascript is actually likely to be more reliable than any serverside method (in that it may well hold its hands up and say "I dunno" where js is disabled, but at least it wouldn't be positively identifying the wrong browser), neither are going to be good enough to identify a browser though, client-side javascript could at least distinguish between IceStorm 5 and IE 5 for example. 
approach. 
Jim. 
Personally I dislike the [css] hacks mentioned. 
Then again, perhaps 
they 
Is you dislike based on aesthetic or practical grounds? 
Julian 
The information in this email is confidential. 
The contents may not be disclosed or used by anyone other than the addressee. 
If you are not the addressee, please tell us by using the reply facility in your email software as soon as possible. 
Sheffield City Council cannot accept any responsibility for the accuracy or completeness of this message as it has been transmitted over a public network. 
If you suspect that the message may have been intercepted or amended please tell us as soon as possible. 
Personally I dislike the [css] hacks mentioned. 
Then again, perhaps 
Both. 
From a personal, aestethic, point of view I find them unelegant. 
It should really be unnecessary to, as one of them suggests, include a text-string as part of a value for the voice-family property which IE reacts to and stops parsing. 
It smacks of GOTO. 
From a more practical point of view, I see the hacks both as a problem 
in maintenance and in future-proofing. 
Maintenance of code, even CSS, has high priority. 
If a number of "hacks" that may, or may not, work in various browsers of versions versions are included in the CSS, I have no difficulty seeing complex maintenance coming my way. 
Finally, consider the following hack taken from Tankek's pages: div#menubar { position : absolute ; voice-family : "\"}\"" ; voice-family : inherit ; position : fixed ; which by no means can be considered elegant. 
It does, however, take advantage of a parsing bug in Internet Explorer. 
Contemplate, now, what will happen for a new version of IE/Windows which HAS support for 
fixed positioning - something the ones of today has not - but still contains that little quirk regarding the string "\"}\"" ? 
A minor problem with this particular example, yes. 
I am sure we could come up with examples where the end results became less accessible due to this. 
You might also want to notice that in the document which describes this technique[1] it is also suggested to add another rule block to help browsers which support the property we are trying to hide, but who doesn't hand the string - among them, it is claimed, Opera. 
The added rule block, of course, demands support for even more things to help unshield the properties that was attempted shielded with a parsing bug unrelated to the property shielded ... ;) In short, I dislike methods that take advantage of incorrect parsing or similar in browsers. 
One really never know what'll happen in terms 
of the future. 
That is also why I dislike browsers who, despite having different capabilities, claim to be something else. 
[1] - Tina Holmboe tina@greytower.net 
I agree, most of them are inelegant and yes, it really should be unnecessary to use them but we find ourselves in a switch-over period (it may turn out to be a long switch-over period and this may be exacerbated with future css standard). 
We are encouraged to use css for positioning and yet browser vendors seem incapable/unwilling of writing to w3c specs. 
It wouldn't be so bad if the non-compliant browsers had an insignificant market share but one of the worst happens to be the dominant browser. 
Your practical argument seems to revolve around maintenance issues and I agree that it's a headache. 
But, and this is the salient point, it is *my* headache and what I do doesn't really affect accessibility as long as I keep things up to date. 
If I want to write a huge site based entirely on static html and update each page individually then I can and it isn't an 
accessibility issue. 
Of course I would be insane to do so and it would be much better to use includes and server-side scripting but the point is that 
it isn't an accessibility issue. 
If you have any practical examples of where css hacks have inhibited accessibility then I really would like to see them because I use them a lot and would hate to think that something I was doing was inadvertently affecting the accessibility of my pages. 
Why do I like them so much? 
Because they don't rely on server side scripting (which isn't available to all) and they don't use client side scripting (and what happens if the user has a javascript disabled browser). 
Besides which any form of browser sniffing (even reading HTTP User Agent variables) is prone to failure. 
Ah, we agree. 
I like common ground ;-) J. 
The information in this email is confidential. 
The contents may not be disclosed or used by anyone other than the addressee. 
If you are not the addressee, please tell us by using the reply facility in your email software as soon as possible. 
Sheffield City Council cannot accept any responsibility for the accuracy or completeness of this message as it has been transmitted over a public network. 
If you suspect that the message may have been intercepted or amended please tell us as soon as possible. 
I would like to point out that, for instance, the WebTV viewer version 2.6 supports quite abit of CSS - far better than Netscape 4 - but not the @import directive. 
Using @import to hide CSS will make it harder on users of WebTV. 
- Tina Holmboe tina@greytower.net 
Most people do these wrong, with the result that the pages become totally uncachable. 
* be disclosed or used by anyone other than the addressee. 
If you are not I don't believe this; why should I believe it when it really is confidential? 
There are many other ways of hiding css from NS4x other than using @import. 
I'm working on a 'little' project to see if it's possible to set up a bunch of css that will effectively sniff out as many browsers as possible. 
As soon as I have something worth showing I will put it up live and invite people to view the page and post back to me what they see as a refining process using those browsers/platforms that I don't have installed( Mac and WebTV being 
some of them). 
My aim is to develop a template for a css structure that will be usable by developers to modify according to their needs. 
Of course, I might find that it isn't actually possible but I won't find out unless I try 
regards Julian 
The information in this email is confidential. 
The contents may not be disclosed or used by anyone other than the addressee. 
If you are not the addressee, please tell us by using the reply facility in your email software as soon as possible. 
Sheffield City Council cannot accept any responsibility for the accuracy or completeness of this message as it has been transmitted over a public network. 
If you suspect that the message may have been intercepted or amended please tell us as soon as possible. 
Do you have an example URL for the javascript technique ? 
John 
Look at almost any site that has a blank home page (with scripting off) and you will find browser sniffing scripting. 
Hi Julian/All ---SNIP--- 
---SNIP--- Commendable - hope it works! 
I'm happy to provide feedback using NS4.79, Mozilla 1.2a, Opera 6 and Konqueror 3.0.0 
(running, for what it's worth, under Linux 2.4.18/KDE 3). 
Cheers M Matthew Smith | Business: http://www.kbc.net.au 
IT Consultant | PGP Key: http://gpg.mss.cx 
Kadina, South Australia | * Tivis Project * Community Connect * 
"David Woolley" david@djwhome.demon.co.uk wrote in message news:200211192102.gAJL29d08396@djwhome.demon.co.uk... 
Indeed, everything out there is very poor, and those people who have even heard of things like IceStorm, wouldn't be doing any sort of browser sniffing on the client or server, so no-one has created the huge script that could actually distinguish between all the different script capable 
browsers. 
I have 3 browsers, IceStorm, IE5.5, and Pocket Internet Explorer 3 - which all send the same HTTP USER AGENT to the server, so the server cannot distinguish between them, but you could on the client (when script is enabled) . 
Either server or client is unreliable though, and you cannot create an accessible page using the technique (unless all pages are accessible to all anyway which would kind of defeat the object of serving different documents). 
Jim. 
On Wed, 20 Nov 2002 10:30:48 -0000 
This topic has been around before, and I'm curious as to the overall opinion of the WAI-IG list as to this. 
To me it seems reasonable that three different browsers should identify themselves with three different User-Agent headers. 
Ignoring, for a moment, the misuse that this header has been put to, the idea to use if for 
"bug detection" as outlined in the HTTP specification seems a good one. 
Comments ? 
Tina Holmboe [Windrose@EFnet] [tina@elfi.org] 
[tina@htmlhelp.com] 
$_ =  '-- '; s/../pack("c",hex($&amp;))/eg; eval; 7072696e7420224a75737420616e6f74686572205065726c206861636b65722c22 
But is exactly the misuse that means there is a market demand for minority browsers to allow their users to configure the User Agent string - it's almost an FAQ for Lynx as to what User Agent string one should use, as default, to make servers believe they are dealing with a big 2 browser. 
As I've pointed out before, IE pretends to be Netscape and has done for more than half a decade. 
I was wondering if there were any accessibility issues caused by dropdown menus that use the first OPTION tag to label the control rather than having a separate text label. 
e.g. etc... Josh Hughes 
