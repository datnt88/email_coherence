I've been getting lots of bug reports due to corrupted or out dated caches. 
I would like to propose an extension to the If-modified-since header to improve the situation. 
I'd like to start sending If-modified-since: DATE; size=SIZE The addition of size=SIZE informs the server of the current size of the document cached by the client. 
The size acts as a checksum, if the size of the file to be served is different than the size given in the If-modified-since header than a 304 should not be returned. 
The advantage of size over other checksums is that it is highly efficient. 
Clients and servers can obtain the information at little or no cost. 
The disadvantage of size is that it is not completely accurate as a checksum. 
An MD5 hash or some other content based checksum would be far more accurate but would require lots of additional overhead. 
In the future, if a stronger checksum is deemed necessary it can be added as another part of the If-modified-since header. 
Perhaps: If-modified-since: DATE; size=SIZE; md5=SIGNATURE I have tested this change against the Netscape, NCSA, CERN and Apache servers and all of them ignore the addition of size=SIZE, so we can add this addition without fear of backwards compatibility concerns. 
Comments? 
:lou Lou Montulli http://www.mcom.com/people/montulli/ 
Netscape Communications Corp. 
In article v02120d04ac580956f14c@[198.64.246.22] cshotton@biap.com (Chuck 
This is where you are completely wrong. 
In every case of cache corruption that I have seen it has always been caused by server errors. 
Dates are simply not a strong enough versioning system to prevent lossage. 
As if file size is any better? 
You avoided answering the question, which was why should the server be responsible for essentially maintaining the client/proxy cache? 
This isn't forcing the server to do anything. 
Adding a size simply helps the server to make the correct decision about sending a 304 or not. 
Currently servers are making wrong decisions because it cant tell if the file has changed becaused dates are not strong enough by themselves to do an adequate job of versioning. 
Let's try this one last time. 
Lou, do you agree or disagree that for any two CPUs, they may have different size representation for the same data stream due to EOL differences and or differences between the transmitted content-length and the number of bytes stored on the disk? 
If this is the case (and it IS in many implementations), then using size will NEVER work. 
The client will cache the file with one size, the server will compare it to another "size" and the cached file will always appear to be modified or different. 
The only way to solve this problem is to normalize the "size" to be the content-length instead of the number of bytes stored on disk on either end of the connection. 
This means that the server will have to read and translate the file to recompute the content-length size whenever it is requested. 
Since this is a CPU and disk I/O intensive process, it places a burden on the server that we should try to avoid. 
You seem to be ignoring this flaw in the IMS "size" discussion and it is a fatal flaw. 
This should be done by the client software, through whatever means the client has at its disposal. 
I don't care what the mechanism is. 
I just don't want to see thousands of caching clients beating on servers because they are too lame to keep track of their own cache. 
If a cached file is suspicious because of a date, a file size, or a bad checksum, the client should discard it. 
Period. 
Forcing the server to jump through hoops on every IMS request is contrary to the entire goal of "server serve, clients do the work." 
You seem to be forgetting that "jumping through hoops", as you put it, is going to save the server time in the long run. 
Remember, bandwidth is not free. 
And neither is CPU time or disk I/O. 
These are much more limited on a server handling lots of parallel requests than the net bandwidth on many systems. 
Chuck Shotton StarNine Technologies, Inc. chuck@starnine.com 
http://www.starnine.com/ 
cshotton@biap.com http://www.biap.com/ 
"Shut up and eat your vegetables!" 
In article v02120d09ac5838de1e3c@[198.64.246.22] cshotton@biap.com (Chuck 
It is not at all a fatal flaw. 
The size returned by the client needs to be specified to be the same as the "content-length" returned by the server during the request. 
If line-feed conversion is being done consistantly the size can be compared accurately. 
This should be done by the client software, through whatever means the client has at its disposal. 
I don't care what the mechanism is. 
I just don't want to see thousands of caching clients beating on servers because they are too lame to keep track of their own cache. 
If a cached file is suspicious because of a date, a file size, or a bad checksum, the client should discard it. 
Period. 
Forcing the server to jump through hoops on every IMS request is contrary to the entire goal of "server serve, clients do the work." 
You seem to be forgetting that "jumping through hoops", as you put it, is going to save the server time in the long run. 
Remember, bandwidth is not free. 
The number of parallel requests are reduced by disconnecting user agents quickly. 
This can be occomplished best via 304. 
If 304 cannot be relied upon to be accurate then it can't be used and data retransmission will have occur during every request. 
That is far more costly than computing a checksum. 
And as I said before, if you are not as concerned about reliability, ignore the size... :lou Lou Montulli http://www.mcom.com/people/montulli/ 
Netscape Communications Corp. 
This makes the "content-length" an arbitrary value that must be stored 
out of band in the cache, and returned to the server as part of a 
"version check" request. 
Changing the date comparision from equal to greater than or equal makes the date comparison into another such item, module conversion between date formats (though most file systems have a place reserved for that). 
You could implement this by saving the last-modified header and sending it back as the value of the if-modified-since header. 
If we're going to change the spec for this, and are requiring that clients keep out of band data to comply, why not provide versioning of the kind the server (which has to do the work) wants to support? 
Observation: the version string has no meaning as far as the client is concerned. 
Proposal: 
A new header from servers: Version: Version-string A new header from clients: If-Not-Version: Version-string 
Version-string is a string of characters other than ";" and whitespace. 
Since version-string only has meaning to the server, it can be whatever you want. 
The file size; a VMS file version number; an MD5 digest; a CRC, etc. 
mike 
In article 19950816.75DE920.13DA5@contessa.phone.net 
mwm@contessa.phone.net 
the IMS last modified date is already a value that must be stored out of band in the cache. 
The client local time can not be 
relied upon so it can not be used to compute a last modified date. 
Only in cases where you can guarentee reliable dates (i.e not PC's and not Macs) can you use the local date as a value, I suspect some UNIX proxies do this. 
This would work pretty well but has the disadvantage of not being reproducable on the client end. 
A standardized checksum method 
would remove the need for out of band data to be stored, or if the out of band data was lost, it could be regenerated. 
:lou Lou Montulli http://www.mcom.com/people/montulli/ 
Netscape Communications Corp. 
In article 19950817.77E12D0.23E6@contessa.phone.net 
mwm@contessa.phone.net 
The if-different header would occomplish this, but still think it's wasteful. 
We should try and use the existing IMS header if possible. 
If it turns out not to be possible then we should add to the future specification that all http headers can be followed by one or more arguments delimited by semi-colons. 
This will keep this lossage from happening in the future. 
Other than that I'm happy with this proposal. 
Let's keep the names short and get this into some form of a spec so that we can get on with life. 
(not that it hasn't been fun arguing) :lou Lou Montulli http://www.mcom.com/people/montulli/ 
Netscape Communications Corp. 
I think I pointed that out; it's important to note, though. 
The IMS LM date has the same problem - the client can't reproduce it. 
I like the more generic "If-different" header. 
We can even tweak it to save 15 of the 20 bytes you complained about: If-Different: 1#( field-name value ; ) The server then verifies that for each field-name/value pair, it is going to send a header with that name whose value (after trimming leading and trailing whitespace) is the same as the client sent on the if-different field. 
If one of them is different it sends the document. 
Otherwise, it sends a 3xx reply "Not different". 
You can therefore get the behavior you want from if-modified-since: last-modified ; size=length with if-different: last-modified ; content-length length and leave if-modified-since with the current definition for those who have a use for that. 
Optional bandwidth reducer: allow the server to not send any headers that are named on the if-different header that haven't changed. 
mike 
