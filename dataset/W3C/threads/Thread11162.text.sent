These "metadocuments" sound to me exactly like "the real, full document with all its trimmings." 
I know SGMLllers are used to thinking about the marked-up text as distinct from the style sheet, etc., but for the purposes of publishing that text, the whole ball of stuff can be considered to be not document+meta, but just document (including some meta, nothing wrong with that). 
Considering documents this way might clarify discussion (and then again, maybe not), and it would certainly clarify explanation: "An XML document can be a complex structure, including a style sheet or even choice of style sheets, and some metainformation about who and how it was produced, just like a Word document carries its formatting and some meta along with its text, although you don't see everything when you look at it in Word." Regards, Terry Allen Fujitsu Software Corp. tallen@fsc.fujitsu.com 
"In going on with these experiments, how many pretty systems do we build, which we soon find outselves obliged to destroy?" - Benjamin Franklin A Davenport Group Sponsor: http://www.ora.com/davenport/index.html If we are going to go down this path, let's not call this "ball of stuff" a document. 
An object (WebObject) might be a better moniker since we should include behavior as well as appearance in the ball. 
My personal preference would be to include references to behavior (code) and appearance (style sheets). 
Without that separation reuse is difficult and object management is seriously impaired. 
[Alex sent this to me instead of the list; per his request I'm forwarding it to the list. 
This should confuse everyone about who's saying what!] In my opinion, no. 
The meta-document is information about a *set* of data--including XML documents. 
To extent, it is instructions on what makes up units of information and what to do with those units of information. 
I think it is very important to distinguish between XML as a document and meta-documents (sets of documents) described in XML. 
Further, we must concede that XML is only *one* form that a document can be encoded in. 
In some applications (existing applications), the SGML documents are *not* useful to an end user unless they are augmented by other SGML documents, SGML processors, and instructions for those users. 
Rather than having a "server-does-it-all" model, I would like to be able to deliver the "packing-list" of information as well as instructions to the client and let the client take care of merging and transforming the information. 
Except that I'm not talking about formatting only. 
I'm talking about transformations, workflows, user interaction, down-loadable semantics, and on, and on. 
In one view, the meta-document is just a regular XML document that "starts" an client-application specific processing model. 
In another view, the meta-document is formal part of the XML infrastructure for delivering client-application independent semantics. 
I prefer the latter. 
R. Alexander Milowski http://www.copsol.com/ 
alex@copsol.com 
Copernican Solutions Incorporated (612) 379 - 3608 In message libSDtMail.9702101400.10360.bsmith@providence/providence Bill I think this is an excellent term and it certainly describes how I use XML documents. 
I don't know enough about objects to know whether we are taking too simple view, as we have state and inheritance to consider. 
I hate to do this again, but unfortunately 'WebObject' is an already trademarked term from NeXT Inc.: Murray Murray Altheim, Program Manager Spyglass, Inc., Cambridge, Massachusetts "Give a monkey the tools and he'll eventually build a typewriter." 
I think this is an excellent term and it certainly describes how I use XML documents. 
I don't know enough about objects to know whether we are taking too simple view, as we have state and inheritance to consider. 
I think this is a very useful distinction, which will also help when it comes to considering style sheets. 
If the term WebObject is acceptable for some or all XML documents then it is a very useful way of reaching out to the wider community. 
'Objects' and 'CORBA' are the current buzzwords although a lot of people naively think that 'CORBA' will solve their problems. 
It won't - they have to build IDLs (Interface Definition Language) on top of it. 
Again I may be simplistic, but for my problems I see DTDs as providing a large part of an IDL, so that by using XML you are making life much easier for object interoperability. 
P. Peter Murray-Rust, (domestic net connection) Virtual School of Molecular Sciences, Nottingham University, UK While I agree with this, I say we cannot even consider the use of the terms unless we are able to relate these "current buzzwords" to the programming community to whom they are not just buzzwords. 
If an IDL is required, that is what you design. 
Tell me how a DTD can provide an IDL. 
That's the point I'm fuzzy on here. 
But fairy dust or no, it has advantages. 
Once you make objects out of it, interoperability quits being an impossible goal. 
If we are too proud to understand that, we are also too dumb. 
Separation of data and behavior are fine in theory, but in implementation that is not the way things are done. 
Unless we give them the architecture in code, we haven't given them what they need. 
Jeez... I think this is a no-brainer. 
Java/XML - a Source Reference. 
Proves we can do what we say we can do. 
Gives a university student a base of code. 
Free. 
Best cross-platform. 
Easiest implementation. 
AWT library. 
Lots of kids learning it. 
What's the downside? 
Yeah, Sun owns Java. 
So what? 
Everyone is building the VM support in their operating systems. 
Looks like a pretty big first fielding. 
Also, the network engines are there. 
Quick to the Web. 
len [Peter Murray-Rust, responding to Bill Smith:] The problem I'm having with a distinction between behavior and appearance is that it just won't stay nailed down. 
Most behavior can be (and is) described with regard to an appearance, and most appearances are the result of some behavior. 
Peter has a system that uses Java code to perform (among other things) the formatting functions that in some other system might be expressed in a stylesheet. 
Is that behavior or appearance? 
Allow me to generalize that. 
For any DSSSL stylesheet that specifies that a certain appearance should be associated with a given node in the XML tree, I can imagine a Java program that causes exactly the same appearance to be associated with the same node. 
Suppose that it is impossible to tell the difference between the way the document is rendered by a DSSSL engine under the control of a stylesheet and the way that the same document is rendered by a collection of Java programs. 
Does the DSSSL stylesheet constitute a specification of appearance and the collection of Java programs constitute a specification of behavior? 
Jon Just as some would like to see SGML Link declaration information be separate from "the document". 
And others insist vociferously that it *must* be part of "the document". 
And others would like "the document" to be just the SGML document element/instance. 
What should and should not be part of "the document" is a religious war. 
:-( Dave Peterson SGMLWorks! 
davep@acm.org 
Strange. 
I can publish a print book, which binds together in what everyone recognizes as a book font, size, kerning, paper type, thumbtabs, page numbers, line numbers, verse numbers, and footnote markers that cause the eyes of literate viewers to flicker involuntarily to the bottom of the page (behavior). 
Yet when I bind all this together (with the text) in a document, somehow this becomes a metadocument. 
If I reprinted the book in another font, font size, etc., I'd have another book, perhaps "The Large Type Document for Presbyopters," which I would call attention to as different from "The Document," although for some purposes it is "the same". 
This group must eventually determine how to associate all the information that comprises the "metadocument". 
It must also determine how to associate the parts of a "document". 
Why should these be separate tasks? 
And where is the description of the overall architecture? 
Regards, Terry Allen Fujitsu Software Corp. tallen@fsc.fujitsu.com 
"In going on with these experiments, how many pretty systems do we build, which we soon find outselves obliged to destroy?" - Benjamin Franklin A Davenport Group Sponsor: http://www.ora.com/davenport/index.html From w3c-sgml-wg-request@w3.org Mon Feb 10 20:12 PST 1997 Resent-Date: Mon, 10 Feb 1997 23:05:03 -0500 Resent-Message-Id: 199702110405.XAA27354@www19.w3.org X-Sender: sgmlwrks@pop.tiac.net 
Mime-Version: 1.0 Date: Mon, 10 Feb 1997 22:51:44 -0500 From: davep@acm.org 
(Dave Peterson) Subject: Re: There Are No Metadocuments X-List-URL: http://www.w3.org/pub/WWW/Archives/Public/w3c-sgml-wg/ X-See-Also: http://www.w3.org/pub/WWW/MarkUp/SGML/Activity Resent-From: w3c-sgml-wg@w3.org 
X-Mailing-List: w3c-sgml-wg@w3.org 
archive/latest/2958 X-Loop: w3c-sgml-wg@w3.org 
Resent-Sender: w3c-sgml-wg-request@w3.org Just as some would like to see SGML Link declaration information be separate from "the document". 
And others insist vociferously that it *must* be part of "the document". 
And others would like "the document" to be just the SGML document element/instance. 
What should and should not be part of "the document" is a religious war. 
:-( Dave Peterson SGMLWorks! 
davep@acm.org 
That is so. 
But just as a DSSSL processing spec can be a Java applet or Active-X object instead, religion is where we find it. 
It's all values. 
Split it up anyway you like, it's still just a tag soup of values without the DTD. 
len The "pre-SGML", if you will, concept of a document was simply something that is printed. 
SGML looks at a document as a collection of potentially reusable information, which may be reused in many ways besides republishing it on paper again in a slightly different format. 
"The document" is something that can be published, searched, spoken (a very non-paper form of publishing), indexed, etc., etc. If, as you suggest, that this something together with its publishing specifications is a document but that with different publishing specifications is a different document, then with its indexing specifications it's yet another document, when published by speech synthesizer it's yet another, etc., etc., etc.,... Put all these things together and you've got a metadocument, in many people's mind. 
If the union of all of your related-by-having-the-same-content documents is a metadocument in some people's mind, there are others that would like in this brave new world to use "document" to mean the intersection: the core structured data set. 
...And those who draw the line somewhere in between. 
Isn't English fun? 
Dave Peterson SGMLWorks! 
davep@acm.org 
On the one hand, Yes. 
That is, rendering (creating an appearance for a medium, e.g. 256 colour raster display) is behaviour. 
It can be specified by appeal to less (LaTeX) or more (DSSSL) or most (Java) procedural means, but processing is always involved or implied. 
On the other hand No. That is, it is attractive to suppose that rendering behaviour will treat link descriptions in the same way as the rest of the markup in a document, encouraging us to use the same mechanism, namely style specifications, to determine rendering behaviour for link descriptions as we do for the rest of the document. 
The SGML Way is to use DSSSL for this when you can. 
It remains to be seen whether this group thinks that XSL (= an XML-targeted DSSSL subset) will do the job, or whether augmentations will be necessary. 
I for one would NOT be happy if such augmentations took us outside the domain of rendering into e.g. user interactions. 
In other words, all rendering is processing, but not all processing is rendering, and specifying ALL processing needs a general-purpose programming language. 
SMF, TNMJ. 
ht If the running of this code is controlled by user interaction at the client its appearance: if it is action that is forced on the application by information from the server it is behaviour! 
(Author defined formatting is currently being referred to as behaviour: user defined formatting is currently being referred to as appearance. 
Both types are required - its the point of control that defines whether it is a behaviour or not.) The DSSSL style sheet as sent by the author is a behaviour. 
The version as modified by the user, or the overrides issued by the user, is what constitutes a change of appearance. 
The terms appearance and behaviour are misleading, like addresses/locators/explainers.... 
They say what the result is, not what you need to get there. 
What we need is something like local control parameters and remote control parameters to distinguish where control actually lies. 
Martin Bryan, The SGML Centre, Churchdown, Glos. 
GL3 2PU, UK It's just a matter of interpretation. 
Code is data is code. 
Java bytecodes are nothing more than a processing specification until they are interpreted, and there are a number of ways *that* can be done as well... 
As soon as you start defining objects that have some behavioural semantics associated with them, you also open up the possibility of people interpreting the semantics. 
Please don't use the term "meta-document". 
It invites confusion with the term "metadata" (currently much bandied around). 
Some documents contain information. 
Others contain information about information (metadata). 
I would expect every XML piece of content worth its salt to have an associated metadata document (or metadocument) describing what it is and where it came from, in the same way as a catalogue card describes a book, or a tei header describes a tei document. 
I think this usage is now sufficiently established that applying it differently here (to include a lot of things which wd normally be the *subject* of a metadata description) is just going to make people's brains hurt. 
While I'm commenting on terminology: I like "link end", but I still prefer "target". 
I don't like "explainer". 
It sounds like an annoying elderly female relative. 
What's wrong with "caption"? 
(a caption can be explanatory or titular). 
Or if you want to be really confusing... how about "tag" (as in what people spraty opn on tunnel walls with aerosol paint...) Lou For the kinds of purposes that SGML (and XML) propose to support -- i.e. re-use they _are_ the same. 
That is why some of us are so vociferous about separating processing from data content (and insistent as Len says, that we have only a bag of (structured) values, behavior and rendering free). 
Anytime we break that distinction, we make some form a reuse more difficult or impossible (depending on how central to the document markup the formatting decisions become). 
Now, if these reuse issues are not appropriate in a WWW context, then we should not be doing XML at all, but working on adding more kinds of behavior tag to HTML so that it can finish its metamorhphosis into "Postscript for the Web". 
This is all baby SGML, folks. 
It's the _point of the whole thing_. 
So let's finish it, but stop dragging over the same issues. 
I don't mind Postscript for the web, but if that's our goal then we don't need generic tagging to get there. 
Who cares. 
If we want the rendering/processing independent part of the document to retain those properties it must be separated from the rendering/processing instructions. 
So we need a mechanism to "glue" them together. 
[document]--------------- | User viewing | Engine | [link-action spec]------- | or | [text layout spec]------- | Web Walker | ^ | or | | Something else | +------------------------User choice and publisher choice may affect/replace these bindings and the contents of the specs. 
(therefore there is a separate binding entity that controls the existence of those arrows) [ secure systems will need to limit user choice, but the architecturally, all processing agents are equivalent ] David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ true... True, but essentially false: Once the interpretation of the data is a turing-complete problem, the possibility of _useful_ interpretation goes way, way down. 
Those unfortunates who stored data in hypercard scripts discovered that the hard way -- of course they're fine for the ages --- If you happen to have a hypercard interpreter in your pocket, along with a clone of the MacOS. 
-- David This is why I mistrust jumping to code _too soon_. 
To push the interaction envelope you need code, but you also lose reusability, because your environment sneaks into your data... 
We definitely will need to attach code to documents though. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ No disagreement here... I was just noting that data and behaviour are largely separated only in the way you interpret things. 
Yep. 
I tend to look at it as defining interfaces vs defining implementations. 
You reuse interfaces and throw away implementations in most systems I've seen. 
The problem we face is that it's hard to decide upon an interface until you are aware of the implementation constraints... and that interfaces often need to evolve over time. 
Very well put. 
Now, I'm all for not drawing lines. 
I would prefer flexibility in infrastructure. 
Is it possible that we have: 1. 
An SO-catalog spec as minimal conformance. 
2. Something describing the union/intersection model described above for metadocuments. 
...or, is this contrary to our goal? 
At some point in time, we are going to have to reject the premise that XML should be simple and built by a CS graduate in a week (or whatever silly premise it was). 
Was this a design premise when SQL was created? 
Complex problems never cease to be complex problems and simple solutions rarely solve them. 
Here is, again, my opinion: 1. 
The "Minimal-constructs-to-declare-success" is some kind of SO-catalog model. 
It has its drawbacks which was well pointed out. 
2. The uniform and scalable infrastructure is a metadocument architecture or whatever you want to call it--a bootstrapping document that starts the whole process off. 
This is more complex and, to some extent, will require rejecting the premise that XML must be kept as simple to implement quickly. 
From an implementor's standpoint, writing code to handle catalogs is pretty trival. 
It is just some amount of work to shake out the features and bugs. 
From a development user's standpoint, using catalogs in a simple environment is quick easy, quick, and convient. 
Using catalogs in a complex environment is a *big* problem. 
They can be large or complex and difficult to handle (sound familiar?). 
Thus, they don't scale well for the non-simple user. 
Can we accept this? 
I am certain that SO-catalogs can be worked elegantly into a metadocument architecture such that we could be compatible with them if we choose to implement a metadocument architecture in the future. 
Is it possible we could have one specification that incorporates both? 
In addition, it would seem that the metadocument archictecture has somewhat been approached by Sun in Java. 
JAR files are "archive" files that allow delivery of class files, data (documents, images, etc.) all within one stream from the server. 
I haven't experimented with this very much but it would seem that they had a similar issue: my program is made up of distinct components that I must locate and load from the server. 
They decided that having one archive to retrieve would improve efficiency. 
In light of this, is a metadocument archive something that will be the new paradigm for delivery of content/applications arcoss the web? 
If so, do we need to consider this as a necessary component of XML? 
Remember, I want more than deliver of *documents* that can be printed/previewed. 
I want active documents that use components that are information and semantics. 
(Add one XML document and one DSSSL stylesheet into a blender, blend on highest setting until a soupy mixture results. 
Pour into computer.) 
I am always guilty of wanting the ideal (or at least, my ideal). 
R. Alexander Milowski http://www.copsol.com/ 
alex@copsol.com 
Copernican Solutions Incorporated (612) 379 - 3608 Sorry, but I can't help objecting to the "if you will" above. 
Descriptive markup was around before SGML, before GML. 
Like Scribe for one example. 
Scholars had document ontologies ages before that (heck, that's the left-hand-side of a style manual). 
And if we just consider "the concept of a document", it was *way* broader than print for a very long time, particularly in the centuries *before* printing. 
This is especially clear when you consider heavily referenced and annotated documents such as Talmud, Bible, and so on, which were used in many ways beyond republishing in a slightly different format. 
And in consequence, few people referred to passages in them using print-specific means. 
For centures they have referred using structural pointers: book/chapter/verse, stanza/line, and so forth. 
"the text" is an abstraction beyond particular printings or manuscripts (hard as it is to get at the abstraction in many cases). 
Steve Yeah verily! 
This is the "minimally constraining" view -- it allows folks to manage data however they choose -- lump the content and the metadata together, or store them separately and link them. 
Axioms of Web Architecture: 2 Tim Berners-Lee Date: Januray 6, 1997 Documents, Metadata, and Links The thing which you get when you follow a link, when you de-reference a URI, has a lot of names. 
Formally we call it a resource. 
Sometimes it is referred to as a document because many of the things currently on the Web are human readable documents. 
Sometimes it is referred to as an object when the object is something which is more machine readable in nature or has hidden state. 
I will use the words document and resource interchangeably in what follows and sometimes may slip into using "object". 
See also: http://www.w3.org/pub/WWW/Architecture/Terms#document 
Dan 
