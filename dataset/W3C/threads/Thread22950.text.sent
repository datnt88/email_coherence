Why does DOM have "Levels" instead of "normal" version numbers? 
Get Your Private, Free E-mail from MSN Hotmail at http://www.hotmail.com. 
Share information about yourself, create your own public profile at It has both; the Level refers to a piece of functionality (what's in level 2 builds on what's in Level 1, etc) whereas versions refer to a new release or version of the same piece of functionality. 
So at some stage in the future, there could very well be a DOM Level 1 version 2.0, for example, which would be a new version of the functionality in DOM Level 1. Lauren Levels are not the same as versions in this context. 
Level 1 defines a basic level of functionality. 
A particular DOM implementor may to choose to only implement level 1. 
He may release his software as version 1 of his implementation. 
Later, he fixes bugs and releases version 2. Then he finds a way to optimize the speed, so he does so and releases version 3. Then he finds a way to economize on memory and fix more bugs, and releases version 4. Four versions of software were released, but all are strictly Level 1 DOM. 
Level 2 defines a higher level of functionality. 
Again, a particular implementor may have multiple versions of his level 2 DOM implementation. 
If you, as an applications programmer, write a program that only uses DOM level 1 functionality, you can use either implementation. 
Either one will do what you need to do. 
You can pick the latest version of either implementation and choose based on the reliability and efficiency of the implementations. 
If, however, you need to use some functions that are defined in level 2 but not level 1, then you can only use the second implementor's software. 
Alan Meyer AM Systems, Inc. Randallstown, MD USA ameyer@ix.netcom.com 
The DOM specification uses both concepts. 
A "level" really corresponds to a functional release cycle. 
DOM Level 2 adds a large amount of functionality to Level 1 (some of it optional) -- but should not break backward compatability. 
Level 3 will again add more function both by adding new Features and by extending existing ones -- but is expected to retain full compatability with the earlier Levels. 
A "version" is a major redesign cycle. 
If we find it necessary at some point to substantially rework a DOM feature in such a way that backward compatability can _NOT_ be retained, we will change the version number on the appropriate levels and features to indicate this. 
This may be because we discover we've done something completely foolish that allows no other recovery path, or it may be because 10 years from now, after using the DOM for all that time, the industry consensus is that it would benefit from substantial alteration. 
But short of that kind of "earthquake", the Version will not change. 
Everything in the DOM is currently at Version 1 and expected to remain so. 
Joe Kesselman / IBM Research 
