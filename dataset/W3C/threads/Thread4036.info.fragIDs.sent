Hello, 
would you please explain the reason for having recoverable errors? 
(Yes, they are already in XSLT 1.0, but nevertheless ...) 
If it is implementation-dependent whether such a recoverable error will be reported or not, don't you think that this leads to non-portable stylesheets? 
The XSLT developer might not be aware of the recovering action 
when developing the stylesheet. 
So, theoretically, an XSLT engine built into a web browser could report the error (and nothing else), while the developer's engine seems to work fine. 
Both are standard compliant. 
This kind of choice for the behaviour of an XSLT implementation is a bad idea in my mind. 
It would be better to require that all implementations must produce the same defined result on a given input. 
Best regards, Oliver Becker 
ob|do Dipl.Inf. 
Oliver Becker | --+-- E-Mail: obecker@informatik.hu-berlin.de 
| op|qo WWW: http://www.informatik.hu-berlin.de/~obecker 
| 
This is not something we have reviewed recently, and perhaps we should, though it would be difficult now to change the rules. 
I can't claim to give a historical answer to the question, but my understanding is that the primary reason was a feeling that client-side XSLT should try hard to avoid run-time errors and use fallback behaviour instead, while other environments needed a more conventional approach to error detection and reporting. 
I think that other motivations have crept in for certain error conditions: some errors are recoverable because it was felt that detecting the error might be unreasonably expensive. 
You can be fairly sure that when a W3C specification allows implementations to differ, it was because the working group had difficulty getting implementors to agree with each other, not because they thought that allowing differences was intrinsically a good idea. 
Michael Kay 
Mike, 
Yes, and the fallback behaviour for HTML implemented in all browsers on the market led to lots and lots invalid HTML pages, and every browser displays something different ... (Ok, this analogy isn't really true, since the XSLT spec defines clearly what kind of fallback has to happen.) 
However, I am not really convinced that the spec needs this freedom. 
The number of occurrences of recoverable errors should be reduced to a minimum (ideally to zero), either by making them non-recoverable or by stating that the fallback behaviour must be used (which means that the term "error" in such a case would disappear). 
A compromise could be a little bit more control over the behaviour of the implementation. 
Currently AFAIK there is no requirement that an implementation either has to report all recoverable errors or has to recover from them. 
It can freely choose as the case arises. 
I can imagine that finding an agreement can be a pain. 
However, I would appreciate if the WG could review this topic and find a stricter rule than the current one. 
Oliver Becker 
ob|do Dipl.Inf. 
Oliver Becker | --+-- E-Mail: obecker@informatik.hu-berlin.de 
| op|qo WWW: http://www.informatik.hu-berlin.de/~obecker 
| 
Mike Kay responded. 
This is not something we have reviewed recently, and perhaps we should, though it would be difficult now to change the rules. 
Oliver said: 
The non-portability issue seems to me to be a good reason to take up this issue. 
It reflects my concern over the number of implementation dependencies (in xslt+xpath). 
The fact that its late in the day I hope won't stop the WG addressing this issue? 
I still think of a rec as a 'standard way of working'. 
If this WG is less concerned about portability, then could that be clearly stated. 
regards DaveP NOTICE: The information contained in this email and any attachments is confidential and may be legally privileged. 
If you are not the intended recipient you are hereby notified that you must not use, disclose, distribute, copy, print or rely on this email's content. 
If you are not the intended recipient, please notify the sender immediately and then delete the email and any attachments from your system. 
RNIB has made strenuous efforts to ensure that emails and any attachments generated by its staff are free from viruses. 
However, it cannot accept any responsibility for any viruses which are transmitted. 
We therefore recommend you scan all attachments. 
Please note that the statements and views expressed in this email and any attachments are those of the author and do not necessarily represent those of RNIB. 
RNIB Registered Charity Number: 226227 Website: http://www.rnib.org.uk 
