RDF IG, (copying SWAD-Europe list) 
I've just written a few comments in a weblog, archive here too, see if they make sense to folks. 
I was trying to explain a bit about why RDF might make sense for someone considering the use of XML for a vocabulary. 
I think maye I just restated what Danny said there at greater length... 
One way to think about this: the Resource Description Framework (RDF) is a family of XML applications who agree to make a certain tradeoff for the sake of cross-compatibility. 
In exchange for accepting a number of constraints on the way they use XML to write down claims about the world, they gain the ability to have their data freely mixed with that of other RDF applications. 
Since many descriptive problems are inter-related, this is an attractive offer, even if the XML syntax is a little daunting. 
MusicBrainz can focus on describing music, RSS 1.0 on describing news channels, FOAF on describing people, Dublin Core on describing documents, RdfGeo on places and maps, RdfCal on describing events and meetings, Wordnet on classifying things using nouns, ChefMoz on restaurants, and so on. 
Yet because they all bought into the RDF framework, any RDF document can draw on any of these 'vocabularies'. 
So an RSS feed could contain markup describing the people and places and music associated with a concert; a calendar entry could contain information about it's location and expected attendees, a restaurant review could use FOAF to describe the reviewer, or a FOAF file 
could use Dublin Core to describe the documents written by its author, as well as homepages and other information about those authors. 
So, for any particular application, you could do it in standalone XML. 
RDF 
is designed for areas where there is a likely pay-off from overlaps and 
data merging, ie. the messy world we live in where things aren't so easily 
parceled up into discrete jobs. 
But it is a tradeoff. 
Adopting RDF means that you just can't make up your 
XML tagging structure at random, but you have to live by the 'encoding' rules expected of all RDF applications. 
This is so that software written this year can have some hope of doing useful things with vocabularies invented next year: an unpredictable 'tag soup' of arbitrary mixed XML is hard to process. 
RDF imposes constraints so that all RDF-flavoured XML is in broadly the same style (for example, ordering of tags is usually insignificant to what those tags tell the world). 
Those constraints take time to learn and understand and explain, and so adopting RDF isn't without its costs. 
And so the more of us who use RDF, the happier the cost/benefit tradeoff gets, since using RDF brings us into a larger and larger family of inter-mixable data. 
Does this make any sense? 
[[snipped: a pretty good description of why I use RDF and not just non-RDF XML]] 
yes, to me it makes good sense. 
chaals 
It makes sense as far as it goes. 
Unfortunately, this makes RDF sound like a complex and expensive way to define 
a simple namespace. 
How is an RDF application different from an XML-Namespace? 
[Why use RDF applications?] 
I don't know that it is. 
It is different from what I believe people think they are doing when they create XML namespaces - but I suspect that many people are like me and actually don't write a schema first up because they want to play around with it first... an ideal situation for declaring it as an RDF vocabulary instead of using an XML schema. 
chaals 
Post: 21 Mitchell street, FOOTSCRAY Vic 3011, Australia or W3C, 2004 Route des Lucioles, 06902 Sophia Antipolis Cedex, France 
my 2'penn'oth I think that this comes near the nub of the question around interoperability using RDF and its relationship to XML Schema. 
Many organisations are spending a lot of time taking the opposite approach to Charles by carefully crafting XML Schemas for their own use (e.g. see the UK e-Gif Schema repository reusing components of other schemas and then wanting to use them for interchange. 
Combination of elements from different schemas is then controlled via namespace - and as they are keen on syntactic validation only in pretty restricted circumstances (avoiding "the unpredictable tag soup"). 
From this PoV, the free mixing of vocabulary advocated by Charles and Dan looks pretty anarchic and uncontrollable. 
There is a challenge to RDF here to convince them: - its more than just the namespace (Trent's question) - it can help enable the interoperability required of the XML Schemas when they get into difficulties through conflicting XML representations of the same thing. 
But they will still want the structural framework of XML Schema (or similar). 
SWAD WP5/6 is looking at this. 
Brian 
danbri - it did make sense, and I particularly liked the last couple of paragraphs: future proofing and the contrast between tag soup and a happy family of compatible data. 
There was an interesting development around the world of blog/RSS not long ago, where some of the RSS 2.0 brigade started inserting full-content XHTML into their feeds. 
The people playing with this were generally very smart professionals with considerable web/XML experience. 
It's interesting in one sense because it means you can XPath on the whole lot together (cargo cult RDF?). 
But interesting too in a non-tech sense, because there seemed to be a tacit assumption that namespace qualification also brought magic interpretation. 
Ok, so this newsreader world isn't far from the browser world, and they were talking about XHTML, and I'm sure some folks would be aware of what was happening, etc etc, but I don't recall seeing a single remark on how the agent was expected to support the stuff that had been inserted. 
It was simply expected to work, i.e. display appropriately in a newsreader, and (ka-zaaam!) most of the time it did. 
It was only a week or two later that comments started appearing along the lines of "I got a conflict with the display of my description content" (I believe these problems were quickly ironed out, but I somehow doubt whether there's a formal spec to say how). 
Adoption of XHTML content in feeds by the developers was rapid (Sam Ruby's blog was something of a hub once more, some refs at [1]). 
Ok, this was all occurring in a scruffy side of the industry, but I still think it's quite telling - for blogging apps this is still the mainstream, and a lot of the people involved use XML in their day jobs. 
My (entirely subjective) reading now is that there were probably two assumptions made : that separating the material using namespaces was considered enough to make things work; that the data would never be used outside of the immediate (browser-like newsreader) context. 
Both of which could represent obstacles to explaining the joys of RDF. 
Good luck with WP5/6! 
Cheers, Danny. 
[1] http://www.intertwingly.net/blog/1299.html 
