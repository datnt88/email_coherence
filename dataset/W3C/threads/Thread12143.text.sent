Hello all, The ATAG techniques document is currently 88 printed pages long (40 of which are the AERT), compared to 24 for WCAG's content techniques and that's before we put an introduction and table of contents on ours. 
And this is before we make another big push to write more techniques. 
It's pretty daunting. 
What to do? 
As a first pass, I think... 1. 
We should place the AERT in a separate linked document. 
It is a 40 page subsection and it deals with the nitty gritty of repair while the other techniques for checkpoint 4.1 are phrased more generally. 
2. We should attempt to leave markup language specific techniques to WCAG and instead focus on techniques common to authoring tools within several wider domains. 
I suggest considering the following four domains: - Markup Editing Tools (includes text and WYSIWYG editors for HTML, XML, etc.) - Content Management Tools (includes higher level editors that focus on content organization, such as courseware, e-business packages, etc.) - Multimedia Creation Tools (includes tools for creating SMIL, images (incluing SVG), video, sounds, etc.) - Programming Tools (includes tools for producing Web applications in Java, Javascript, etc.) Note: Some tools are positionned across multiple domains. 
Thoughts? 
Cheers, Jan Jan Richards Software Designer jan.richards@utoronto.ca 
Adaptive Technology Resource Centre University of Toronto Hi all, My last proposal seems to have been met with resounding silence. 
So I decided to flesh it out a little by working through some of the techniques document and trying to re-edit the techniques and assign them to one or more categories of tools. 
Note: Images (with alt text) are used to flag each of the techniques. 
Note 2: I have tentatively added two new categories, Language Creation Tools and Interface Creation Tools. 
Cheers, Jan Jan Richards Software Designer jan.richards@utoronto.ca 
Adaptive Technology Resource Centre University of Toronto "Include equivalent alternatives for all supported image formats that allow text content, including PNG, SVG, WebCGM, JPEG, and GIF. 
(required)" This somehow sounds like an instruction to a Web designer rather than to a tool developer? 
The icons should prove useful, particularly if they link to the underlying document? 
I wonder if there is a way to differentiate them other than color? 
Most of the resounding silence might be due to the fact that they're good and the best notes will come from those less familiar with the field. 
Love. 
ACCESSIBILITY IS RIGHT - NOT PRIVILEGE 
