The title of RFC 2110 is "MIME E-mail Encapsulation of Aggregate Documents, such as HTML (MHTML)". 
The title thus says that this standard is for e-mail only. 
In several places inside RFC 2110 the proposed standard says that it is for sending HTML in e-mail. 
However, the recent discussion about inheritance of Content-Base has made us aware that multipart/related may be sent via HTTP too. 
That is, it is feasible that an HTTP server sends a multipart/related containing both HTML text and embedded objects as separate body parts within a multipart/related. 
Question 1: Is it the intention that HTTP can be used in this way? 
Question 2: Should MHTML be amended to say that it covers all sending of HTML in MIME, not only through SMTP but also through HTTP and possibly other protocols, for example FTP? 
Question 3: A main principle of MHTML is that if a HTML document is sent as part of a multipart/related, lookup of links in the HTML document should first go to other body parts within the multipart/related, and ordinary HTTP lookup should only be done if there is no match in another body part. 
Is this principle true also when multipart/related is sent via HTTP? 
Question 4: If the answer to question 2 is "yes", does this mean that the IETF MHTML group should liaise with some other IETF group on this issue? 
I am sending a copy of this message to the mailing list for the IETF working group on HTTP. 
Since I am not a member of that group, please post responses also to the mhtml mailing list. 
Jacob Palme jpalme@dsv.su.se (Stockholm University and KTH) for more info see URL: http://www.dsv.su.se/~jpalme Speaking as Chair of MHTML: rom Jacob's message Sat, 4 Oct 1997 10:55:10 +0200: }The title of RFC 2110 is "MIME E-mail Encapsulation of Aggregate Documents, }such as HTML (MHTML)". 
The title thus says that this standard is for e-mail }only. 
In several places inside RFC 2110 the proposed standard says that it }is for sending HTML in e-mail. 
}However, the recent discussion about inheritance of Content-Base has made }us aware that multipart/related may be sent via HTTP too. 
That is, it is }feasible that an HTTP server sends a multipart/related containing both HTML }text and embedded objects as separate body parts within a }multipart/related. 
}Question 1: Is it the intention that HTTP can be used in this way? 
I say yes, though in the beginning we could not see far enough ahead to address the more general issues. 
But, what is the difference, after receipt, when the MIME Multipart/Related is shipped in an SMTP, FTP, SMXP, DISKETTE, CDROM, or HTTP "pipe". 
Who should care how it will be shipped. 
Who should care how it was shipped? 
The main difference is whether the "pipe" offers responsive interaction with the server, such that "missing" URI objects can/cannot easily be resolved by just asking for the "missing" URI item across the available "pipe". 
Mail and HTTP just appear to be the extreme ends of the spectrum. 
The others seems to fall in between. 
But, certainly we do not intend that the IETF Applications Directorate should be a party to making it hard for Internet Application users to work together by exchanging Application Information Objects in MIME wrappings. 
}Question 2: Should MHTML be amended to say that it covers all sending of }HTML in MIME, not only through SMTP but also through HTTP and possibly }other protocols, for example FTP? 
YES! Full Stop! }Question 3: A main principle of MHTML is that if a HTML document is sent }as part of a multipart/related, lookup of links in the HTML document }should first go to other body parts within the multipart/related, }and ordinary HTTP lookup should only be done if there is no match }in another body part. 
Is this principle true also when multipart/related }is sent via HTTP? 
I think, but of course leave it to be decided, that it should be true in all Multipart/Related compound objects that do contain additional related parts. 
}Question 4: If the answer to question 2 is "yes", does this mean that }the IETF MHTML group should liaise with some other IETF group on this }issue? 
I am sending a copy of this message to the mailing list for the }IETF working group on HTTP. 
Since I am not a member of that group, }please post responses also to the mhtml mailing list. 
YES! 
And we have been doing just that with some cross WG participation. 
Larry Masinter is Chair of HTTP WG and he has been a long time participant in our MHTML WG. Some MHTML WG people have also been participants in the HTTP WG, although I have personally withdrawn from participation in the HTTP sessions or list discussions. 
What has made all this such a clear issue just now is that we finally got to the crux issues between MHTML and HTTP Specifications where we need to jointly be truly inventive to find a way out of the current circumstances. 
In short, we have a very real conflict between two critically important installed application bases, both of which promise not to be replaced by the other, so they must be given a way to interwork. 
So, this is our joint task, between MHTML and HTTP WGs, with some help from our APP ADs, who have both be participating in our work. 
Cheers...\Stef PS: I notice that the CALSH (Calendar) folk are facing similar difficulties, so we should alert them to our problems, in case they have not yet noticed. 
I think some CALSCH WG folk are reading our MHTML and HTTP lists. 
Larry: Can you tell us whether the HTTP working group has any objections to changing MHTML to say that it applies to transfer of MIME also through HTTP. 
Of ocurse assuming that the current problem with recursive inheritance of Content-Base is resolved. 
Jacob Palme jpalme@dsv.su.se (Stockholm University and KTH) for more info see URL: http://www.dsv.su.se/~jpalme Jacob, 1) HTTP vs. "web browsing" It would be useful to consider separating "HTTP" out from the application of "web browsing", in the same way that "SMTP" is separate from the application of "mail". 
Currently, the world commonly uses "HTTP" and "HTML" and "URL" and various other common components to deploy the "web browsing" application. 
HTTP is also used for many other applications, and the "web browsing" application can be supported using many other protocols, as indicated by the URL scheme employed. 
HTTP places no restrictions on what media types it transports. 
MHTML defines a new media type, "multipart/related". 
The definition of "multipart/related" must be independent of the protocols which are used to transport it. 
I would urge that the definition of "multipart/related" be separated from the application of "mailing someone a web page" (MHTML). 
The definition of "multipart/related" should make clear that it is a general extension to MIME multipart, and applies to *all* applications that use MIME (including web browsing). 
I would object to having the MHTML say that it 'applies to HTTP' since such a statement would contribute to the existing confusion between the transport protocol (HTTP), the media types it is used to transport, and the applications that are being supported by such a combination. 
Regards, Larry I agree with Larry's analysis and conclusions (though so agreeing may surprise almost everyone;-)... Our agreeing may actually be shocking! 
Larry and I have not discussed what I am going to say here, but I hope he will find that it agrees with his statements included below. 
We did not discuss his message before he mailed it either;-)... 
I think that we have been slowly converging on our positions over time, to the point of understanding that HTTP and SMTP/RFC822 and other different application transports must be kept separate from MIME Content-Typing. 
Perhaps part of what we are recognizing is that there are two classes of "TRANSPORT" protocols. 
One just above the IP level that deals with data streams and user datagrams that deal with interoperability, and another class just below MIME that deals with transport of Application Information Objects to provide what I like to call "interworkability". 
The whole idea of MIME Content-typing is to achieve transport independence from this application transport level, and our new Multipart/Related specs (et al) must fully support this idea. 
That "web browsing" and "mail" are very different user paradigms for exchanging end user application information should be now be a well established fact, and the need to be able to use both to exchange the same information objects in different situations should also be well established. 
Neither of our two primary application transports (HTTP and SMTP/RFC822) will ever replace the other and we should expect that many new variations will be invented between these two extremes to add lots more variety to the ways that we transport MIME wrapped entities. 
So, MIME looks to me to be a higher level second "neck" for the Internet "hourglass" model, with IP at one neck and MIME at the other. 
Looking at things this way seems to be very helpful to me. 
The main thing is to step "out of the box" and see that the Internet Protocol Suite need not be limited to having only one "neck". 
Cheers...\Stef rom your message Sun, 5 Oct 1997 11:03:52 PDT: }Jacob, }1) HTTP vs. "web browsing" }It would be useful to consider separating "HTTP" out from the }application of "web browsing", in the same way that "SMTP" is }separate from the application of "mail". 
Currently, the world }commonly uses "HTTP" and "HTML" and "URL" and various other }common components to deploy the "web browsing" application. 
}HTTP is also used for many other applications, and the "web }browsing" application can be supported using many other protocols, }as indicated by the URL scheme employed. 
}HTTP places no restrictions on what media types it transports. 
}MHTML defines a new media type, "multipart/related". 
The }definition of "multipart/related" must be independent of }the protocols which are used to transport it. 
}I would urge that the definition of "multipart/related" be separated }from the application of "mailing someone a web page" (MHTML). 
}The definition of "multipart/related" should make clear that it }is a general extension to MIME multipart, and applies to *all* }applications that use MIME (including web browsing). 
}I would object to having the MHTML say that it 'applies to HTTP' }since such a statement would contribute to the existing confusion }between the transport protocol (HTTP), the media types it is used }to transport, and the applications that are being supported by }such a combination. 
}Regards, }Larry }http://www.parc.xerox.com/masinter 
My initial reactions to your questions Jacob are: Yes. 
We have implemented it (Internet Explorer 4.0 for Win32 supports it). 
I belive the Netscape folks said that Navigator/Communicator would support this too. 
Yes. 
It should be generic for anything that supports MIME. 
One however must question whether FTP really supports MIME, but for example it is clearly supported for POP3 &amp; IMAP. 
Yes. 
It certainly would be a good idea for other folks to be aware of this work. 
I'm not sure what other MIME related groups should be told about it. 
I also think that we have enough of the "right people" who are pay attention in this group to apply these results broadly, especially given that folks like myself, Larry and Roy are (/ have become) involved. 
I think posting messages to various groups is appropriate, but I don't see any need for formal/informal liason. 
Alex Excellent! 
Why just TWO classes? 
Within this expanded idea of a "transport" protocol (which I accept) I would suggest that "transport" protocols can be identified at several levels within an extended protocol stack. 
As new "applications" are constructed and become widely deployed, I would hope to see layered architectures within those applications which separate issues of control, data transport, information representation, user interface, etc. Hence these new applications would define protocols which themselves can be used as a basis for future developments. 
I think what you describe is just a step in a continuing evolutionary process of building new applications upon the infrastructure of previous applications. 
GK. Graham Klyne GK@ACM.ORG 
I can see your point about the possibility of proliferating transports between TCP and MIME, but we need to be careful to rememeber that in the hourglass model of the Internet, there has to be only one protocol at each neck. 
I propose IP and MIME as two such "necks". 
I can speculate that there may be additional such necks above MIME, but I do not see any more necks between IP and MIME. 
I have no concern about proliferating transports like SMTP, FTP, HTTP, SMXP, et al, between the IP and MIME necks. 
These have the effect of supporting usefully different styles and modes of interworking among application users, without causing the application information objects that they work with to become dependent on such verious transports. 
But, it is critical to recognize the parallels between necks which provide tagging and bagging tools to provide "good-enough" typing, and "datagram" chunking, which at the MIME level allows us to deal with structured content (which parallels Object Modeling in APIs) and the IP neck, where datagram chunking allows us to deal with both streaming content and with user datagrams, among other things. 
We also need to remind ourselves to not confuse PROTOCOL with APIs. 
Best...\Stef PS: As MHTML Chair, I wonder if we are getting a bit far off topic, though I am vitally interested in these issues. 
Is this a topic that should be sponsored by some higher level group like the IETF APP Directorate? 
I think we are really working on an abstract model for application support protocol, which as a meta level issue does not have a natural home in any of the APP WGs. 
rom your message Thu, 09 Oct 1997 09:23:10 +0100: [snip]...[snip]...[snip]...[snip]... } Perhaps part of what we are recognizing is that there are two classes } of "TRANSPORT" protocols. 
One just above the IP level that deals with } data streams and user datagrams that deal with interoperability, and } another class just below MIME that deals with transport of Application } Information Objects to provide what I like to call "interworkability". 
}Why just TWO classes? 
Within this expanded idea of a "transport" protocol }(which I accept) I would suggest that "transport" protocols can be }identified at several levels within an extended protocol stack. 
}As new "applications" are constructed and become widely deployed, I would }hope to see layered architectures within those applications which separate }issues of control, data transport, information representation, user }interface, etc. Hence these new applications would define protocols which }themselves can be used as a basis for future developments. 
}I think what you describe is just a step in a continuing evolutionary }process of building new applications upon the infrastructure of previous }applications. 
}GK. 
}Graham Klyne }GK@ACM.ORG 
