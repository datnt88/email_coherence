At the HTTP-NG BOF at IETF-43 it was agreed to proceed chartering a WG to work on a muxing protocol. 
This protocol addresses a subset of the problems outlined for APPLCORE. 
As I've said before, I think the right approach for APPLCORE (and HTTP-NG as well) is to produce very modular specifications. 
In particular, the two communities should get together on the problems addressed by the mux protocol. 
I've been working on a charter for a mux WG, with discussion on the ietf-http-ng@w3.org 
mailing list (to join, see HTTP-NG home page at charter draft, at I'm concerned about the idea of the IETF designing a protocol which completely punts on security issues. 
If this is a protocol with a port number, then it needs to explain how security is activated for that port. 
If it's just a layer, then it needs to explain how it's integrated into lower-level security services or explain the consequences of security attacks if a higher-level security service is used. 
Security tends to pervade all layers of all stacks in a truly secure system, so I'm dubious it can be punted as this charter proposes. 
I'm also uncomfortable with the idea of replicating all the flow-control machinery of TCP in a layer above it. 
The consequences of doing so should be documented and justified. 
- Chris I agree. 
I wasn't trying to suggest a complete punt. 
I was trying to say that the "heavy lifting" is done in other layers. 
The mux layer would naturally do what's necessary to enable effectively secured stacks to be built using both a mux layer and some security layer(s) (and that would naturally include the mux layer "not blowing it" on its own). 
Yeah, we heard some of this before IETF-43. 
You'll see documentation like you've suggested appearing in early drafts of the HTTP-NG charter. 
As we progressed on drafting the charter, we got to thinking it would be included in the MUX spec (as design rationale) rather than broken out into a separate document. 
To my surprise, this was not even raised at the HTTP-NG BOF, held under Transport aegis, at IETF-43; I took this to mean the community was getting comfortable with the arguments we were making on this point. 
Note also that we haven't proposed replicating all of TCP's flow control machinery. 
TCP's flow-control machinery includes both sender-side restraint (AKA slow-start) and reciever-given restraint (the windowing explicit on the wire). 
The mux needs the latter (at least for applications where you expect some real independence of the message streams), but not the former. 
The sender-side restraint is there to avoid flooding the network, and TCP will do that for us even with a mux above it. 
Note that the charter isn't explicit on this point. 
I anticipate the WG to debate this, and decide that the reciever-given restraint in the mux layer should be an optional module, because some applications will need it and some won't. 
I dont think that the authors of the charter truly intend to "punt all security". 
It seems to me that a reasonable MUX effort can get underway and provide good security. 
Obviously, the group needs to keep security considerations in mind and will have some serious work ahead of them beyond just the security issue. 
I'd like to see the group get started and discuss the issues going forward instead of objecting to the charter now. 
From: Chris Newman [mailto:chris@INNOSOFT.COM] Sent: Tuesday, February 09, 1999 12:28 PM Subject: Re: Drafting mux WG charter new mux WG The excludes integrated security functions and is otherwise silent on the issue of security. 
Too many WGs have left security as an afterthought and had their output delayed months or years as a result. 
The charter has to at least say "the group will address security considerations of a MUX layer and how security services in other layers interact with the MUX layer". 
One function of a charter is to serve as an informal contract between the IETF and the WG. 
It needs to state up front things which the WG must do to fulfill its mission. 
Even if I don't formally object to the charter on these grounds, I'd expect the security ADs to do so if they're being vigilant. 
It might be faster to fix the charter now than try to push it through unchanged. 
- Chris Ok, Im in agreement then, I thought you were objecting more to the effort than the language of the charter. 
From: Chris Newman [mailto:chris@innosoft.com] Sent: Tuesday, February 09, 1999 3:52 PM Subject: RE: Drafting mux WG charter to debate this, and decide that the reciever-given restraint in the mux layer should be an optional module, because some applications will need it and some won't. 
If I was to be present at the debate (which I have no reason to think I would be), I'd make the argument that any kind of data transfer without receiver- given restraint is tantamount to a request for assisted suicide. 
An implication of muxing across TCP (I think) is that the receiver-given TCP window will be set by the mux layer, and depend solely on how fast the mux layer can put the data into queues at the layer "above"; blocking all mux channels because of one slow client will be unacceptable in many cases. 
However, losing data is also unacceptable in many cases, as is duplicating the loss recovery mechanisms in TCP; this means that one must never get into a state where the multiplex layer has to choose between throwing away data and refusing to pass data across *any* connection. 
Thus, the only case I can imagine where receiver-given restraint is not needed is where the higher layer protocol "guarantees" that there will never be a significant number of bytes passed between operations (for instance POP client-to-server without command streaming). 
However, this leaves a wide-open door to denial-of-service attacks (just send "LOGIN enormouslylongstringthatwillcertainlycauseabufferoverflow") and strange results from changed enviroments (streaming mode, for instance, where it makes perfect sense to send 500 LIST requests without waiting for the responses). 
My off-the-top-of-my-head thinking only.... Harald Harald Tveit Alvestrand, Maxware, Norway Harald.Alvestrand@maxware.no Followup discussion being held on ietf-http-ng@w3.org. 
See http://www.w3.org/Protocols/HTTP-NG/ for pointers to archive and instructions on how to join. 
