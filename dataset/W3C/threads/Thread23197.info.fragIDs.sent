On behalf of the DOM Working Group [1], I am pleased to announce the publication of the DOM Level 2 HTML Last Call Working Draft: 
The Last Call review period ends on 7 January 2001. 
Please send review comments before the review period ends to www-dom@w3.org 
Abstract: This specification defines the Document Object Model Level 2 HTML, a platform- and language-neutral interface that allows programs and scripts to dynamically access and update the content and structure of HTML 4.0 and XHTML 1.0 documents. 
The Document Object Model Level 2 HTML builds on the Document Object Model Level 2 Core [DOM Level 2 Core]. 
The DOM Level 2 HTML is made of a set of specific interfaces to manipulate the structure and contents of an HTML document. 
Comments from any Working Group or member of the Community are welcome on www-dom@w3.org 
All comments sent to the mailing list will be recorded at [2] and presented to the Director before moving to the next stage. 
If you sent comments in the past and never received a response (or disagreed with the response), please forgive us and resend your comments in the mailing list. 
If, at the end of the Last Call period, you are still in disagreement, please say so. 
No significant changes were made to the document since the previous publication. 
Thank you, Philippe 
[1] http://lists.w3.org/Archives/Member/w3c-dom-ig/2001Dec/0014.html 
[2] http://www.w3.org/2001/12/DOM-Level-2-issues 
This link is W3C Member only and shouldn't have been be part of the announcement. 
Sorry about that. 
The relevant information pointed by this link was the approval of the DOM WG to move the draft to Last Call. 
Philippe 
The Last Call review period ends on ... 7 January 2002. 
The status section of the document indicates the wrong date. 
It should be fixed on Monday. 
Philippe 
* Philippe Le Hegaret 
I've only been through the first 1/3 of the draft so far. 
found two things though. 
1: section 1.6.3, first sentence says "... is _a_ HTML 4.0 document ..." (my underlining). 
it should read "... an HTML 4.0 document ..." which is what is used elsewhere in the draft. 
2: the definition of HTMLInputElement says that the attribute "size" is of type "DOMstring", which startled me. it didn't take me long to find that this is done due to the fact that both HTML 4.01 DTDs (strict &amp; transitional) define the "size" attribute as "CDATA" (the XHTML DTDs inherit this definition). the definition contradicts the recommendation which itself says: ''The width is given in pixels except when type attribute has the value "text" or "password". 
In that case, its value refers to the (integer) number of characters.'' so in both cases the field contains a number. 
browser practice differs on this though. 
Mozilla 0.9.6 defines the attribute as a string (element.size.toSource() 
return 'new String()) while Microsofts reference defines the attribute as an integer. 
in my opinion the HTML 4.01 DTD shouldn't allow the attribute to be set to "foo" when the recommendation clearly notes it should contain a number, so both the DTDs, the recommendation and in turn the DOM draft should be updated to reflect this. 
(I'm currently not subscribed to the www-html mailing list, feel free to pass this on to anyone there who might be interested) Morten! 
"...a liquid which was almost, but not quite, entirely unlike tea." 
My opinions are not necessarily those of my provider, not necessarily mine, and probably not necessary. 
am 07.12.2001 18:34 Uhr schrieb Philippe Le Hegaret unter plh@w3.org: 
In HTMLTableElement there are tFoot, tHead and caption. 
Why are they *not* readonly? 
You can set these elements with the create* methods. 
Assigning an element from a different table to one of the three properties would either mean changing the document's structure (one element cannot be child of two table nodes, can it?) or copying the contents of one (e.g.) HTMLTableCaption element into a new one (but the spec doesn't say so). 
Should they be readonly (IMHO yes) or is there a certain intent why they are not? 
bye, Thomas 
am 16.12.2001 
21:31 Uhr schrieb Thomas Much unter thomas@snailshell.de: 
I asked this a few days ago. 
OK, you can create new TFOOT, THEAD and CAPTION 
elements with document.createElement and assign them to one of the properties above. 
But then DOM2-HTML should specify what happens if one 
tries to assign a wrong element type ("raises DOMException on setting, if a wrong element is assigned"). 
I still think these three properties should be readonly (which would go with the current documentation of the properties: "_Returns_ the table's CAPTION..."). 
Any comments? 
bye, Thomas 
The issue has been recorded at [1]. 
You will receive a reply and have a chance to disagree with it. 
The next teleconference for the Working Group is scheduled for the second week of January and we didn't take the time to address them this week. 
As long as the issue is recorded at [1], we will address it as defined in [2] and [3]. 
Regards, Philippe [1] http://www.w3.org/2001/12/DOM-Level-2-issues [2] http://www.w3.org/Consortium/Process-20010719/groups.html#formal-address [3] http://www.w3.org/Consortium/Process-20010719/groups.html#WGArchiveMinorityViews 
am 21.12.2001 
15:00 Uhr schrieb Philippe Le Hegaret unter plh@w3.org: 
Ah, thanks, I didn't know that URL. BTW: I didn't want to urge you, I just saw a second solution to the problem - although I still like the first one better :-) 
bye, Thomas 
fixed. 
Good catch. 
HTMLInputElement::size is now an unsigned long, instead of a DOMString. 
Thank you for the report, Philippe, for the DOM WG. 
You can always remove the elements in the table by using the removeNode methods. 
It doesn't seem necessary to make them readonly without a rational and these attributes are already readwrite in implementations. 
The decision was not to accept the requested changes. 
Please, let us know if you are (or are not) satisfy with this decision, Philippe, for the DOM WG. 
am 11.02.2002 
20:27 Uhr schrieb Philippe Le Hegaret unter plh@w3.org: 
That's OK for this question, but IMHO there are still two questions unresolved: [again setting tFoot, tHead and caption] 
(Message-ID: B847DCA1.9AEF%thomas@snailshell.de ) Mozilla 0.9.8 throws a conversion error in this case. 
HTMLSelectElement.add raises a DOMException(NOT_FOUND_ERR) if the "before" argument is not a descendant of the SELECT element. 
OK. 
But what happens if I try to add an element (passed in the "element" argument), that is not an OPTION element? 
Currently, add is directly delegated to Node.appendChild or Node.insertBefore - that is, I can add HEAD, IMG, FORM elements to the options array... 
That makes no sense. 
If the standard specifies a special operation for adding OPTIONs, it should deal with errors specially and raise an exception if an element other than OPTION is passed. 
(Message-ID: B847DF6C.9AEF%thomas@snailshell.de ) MSIE 5.1.3 (Mac) throws a "type mismatch" error in this case. 
bye, Thomas 
Apologies for missing your two questions in the mailing list. 
I added them under #21 and #22: Thank you for the reminder, Philippe 
HTMLSelectElement.add raises a DOMException(NOT_FOUND_ERR) if the "before" argument is not a descendant of the SELECT element. 
OK. 
But what happens if I try to add an element (passed in the "element" argument), that is not an OPTION element? 
Currently, add is directly delegated to Node.appendChild or Node.insertBefore - that is, I can add HEAD, IMG, FORM elements to the options array... 
That makes no sense. 
If the standard specifies a special operation for adding OPTIONs, it should deal with errors specially and raise an exception if an element other than OPTION is passed. 
Philippe Le Hegaret - http://www.w3.org/People/LeHegaret/ World Wide Web Consortium (W3C), DOM Activity Lead 
