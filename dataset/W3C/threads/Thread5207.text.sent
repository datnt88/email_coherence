Hi. What's the point of these datatype properties: process:name (in Process.owl) profile:serviceName (in Profile.owl) 
They are both defined to range over xsd:string. 
It seems to me that the instance names could be used instead. 
At least process:name seems entirely superfluous. 
Perhaps serviceName is reasonable if a service is to have a "public name" shown for purposes of discovery, that is different from the name of the Profile instance. 
Regards, Daniel Elenius Usable Ubiquitous Research Group (U2) Department of Computer and Information Science Linkï¿½ping University, Sweden Hi Daniel - It's a fair question. 
I don't know of anyone who claims that these properties are crucial for any reason, and I'm not aware (offhand) that they've been used in any significant ways. 
I should note that these properties were not conceived for the purpose of providing a unique identifier, but more for something human-readable. 
When you say "instance names", do you mean the rdf:ID? 
If so, I don't think of that as a suitable replacement for a "name" property, in general. 
I imagine the rdf:ID will be automatically generated in many situations, and often may not be human-oriented (readable). 
Also, it may be desirable to ensure that rdf:ID is unique. 
So I wouldn't want that to be the only way to give a name to something. 
Also, I don't see why a process shouldn't have its own distinct name (that is, different from a related Profile). 
I think probably the best argument for eliminating these properties is that rdfs:label can be used for this purpose. 
Regards, David Some of us want to think of a service as being an activity with a verb describing its action... verb parameters ... Maybe the service name is one way to see that mapped straightforwardly... rather than just having a service id? Austin 
