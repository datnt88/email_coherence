(S1 (S (ADVP (RB Hi)) (, ,) (NP (PRP I)) (VP (AUX 've) (VP (VBN got) (NP (NP (DT a) (NN question)) (PP (IN on) (NP (NP (DT the) (NN behaviour)) (PP (IN of) (NP (NNP NodeIterators)))))))) (. .)))
(S1 (SBAR (WHNP (WP What)) (S (VP (AUX is) (VP (VBN supposed) (S (VP (TO to))))))))
(S1 (S (VP (VB happen) (SBAR (IN if) (S (NP (NP (DT the) (JJ current) (NN node)) (PP (IN of) (NP (DT an) (NN iterator)))) (VP (AUX is) (VP (VBN removed) (PP (IN from) (NP (PRP$ its) (NN parent)))))))) (. ?)))
(S1 (S (S (NP (NP (DT The) (NN method) (NN toNext)) (-LRB- -LRB-) (-RRB- -RRB-) (PP (IN of) (NP (NNP NodeIterator)))) (VP (AUX is) (VP (VBN defined) (SBAR (IN as) (S (VP (VBZ follows))))))) (: :) (S (NP (DT This) (NN method)) (VP (VBZ alters) (NP (NP (DT the) (JJ internal) (NN state)) (PP (IN of) (NP (DT the) (NN iterator) (JJ such))) (SBAR (WHNP (WDT that)) (S (NP (DT the) (NN node)) (NP (PRP it)))))))))
(S1 (S (NP (NNS references)) (VP (AUX is) (NP (NP (DT the) (JJ next)) (PP (IN in) (NP (NP (DT the) (NN sequence)) (SBAR (S (NP (DT the) (NN iterator)) (VP (AUX is) (VP (VBG presenting) (NP (NN relative))))))))))))
(S1 (FRAG (PP (TO to) (NP (DT the) (JJ current) (NN position))) (. .)))
(S1 (S (CC But) (ADVP (RB now)) (NP (DT the) (NN node)) (VP (AUX is) (ADVP (RB no) (RB longer)) (NP (NP (NN part)) (PP (IN of) (NP (NP (DT the) (NN sequence)) (VP (VBN represented) (PP (IN by) (NP (DT the) (NN iterator)))))))) (. .)))
(S1 (S (NP (DT This) (NN case)) (ADVP (RB actually)) (VP (VBZ occurs) (SBAR (IN if) (S (NP (PRP you)) (VP (VBP want) (S (VP (TO to) (VP (ADVP (RB conditionally)) (VB remove) (NP (NP (DT the) (NNS children)) (PP (IN of))))))))))))
(S1 (S (NP (DT some)) (VP (VBD node)) (. .)))
(S1 (S (NP (PRP It)) (VP (VBZ gets) (ADJP (ADVP (RB even) (RBR more)) (JJ confusing)) (SBAR (IN if) (S (NP (PRP you)) (VP (VBP reinsert) (NP (DT the) (NN node)) (PP (IN at) (NP (NP (DT a) (JJ different) (NN position)) (PP (IN as))))))))))
(S1 (NP (NP (NP (DT a) (NN child)) (PP (IN of) (NP (DT the) (JJ same) (NN parent)))) (: :) (SQ (AUX Does) (NP (DT the) (NNP Iterator) (NN move)) (PP (IN along) (PP (IN with) (NP (PRP$ its) (NN node)))) (. ?))))
(S1 (FRAG (CC Or) (WP what) (SBAR (IN if) (S (NP (PRP you)) (VP (NN insert) (NP (PRP it)) (PP (IN as) (NP (NP (DT a) (NN child)) (PP (IN of) (NP (DT an) (ADJP (RB entirely) (JJ different)) (NN parent)))))))) (. ?)))
(S1 (S (NP (NNP Enlightment)) (VP (VBD appreciated) (, ,) (S (NP (NNP Axel) (NNP +) (NNP Axel) (NNP Rasmus)) (`` ``) (NP (NP (DT A) (NN man)) (SBAR (WHNP (WDT that)) (S (NP (JJ cannot) (NN walk)) (VP (AUX has) (S (VP (TO to) (VP (VB fly) ('' '') (NP (NNP Wienberg) (NNPS +)))))))))))))
(S1 (S (NP (DT This)) (VP (AUX is) (NP (DT a) (JJ good) (NN point))) (. .)))
(S1 (S (NP (DT The) (JJ only) (JJ consistant) (NN way)) (NP (PRP I)) (VP (MD can) (VP (VB think) (SBAR (IN of) (S (VP (AUX is) (S (S (VP (TO to) (VP (AUX have) (NP (NP (DT all)) (PP (IN of) (NP (NP (DT the) (NN child) (NN modifier) (NNS methods)) (PRN (-LRB- -LRB-) (INTJ (NN insert) (, ,) (VB remove) (, ,) (VB replace)) (-RRB- -RRB-) (ADVP (RB automaticaly)) (VP (VB change) (NP (NP (DT the) (NN cursor)) (PP (IN on) (NP (DT the) (NNP NodeIterator)))) (PP (TO to) (NP (DT the) (JJ new) (NNP Node)))))))) (-LRB- -LRB-) (PP (IN for) (NP (NN insert))) (PRN (CC and) (VB replace) (-RRB- -RRB-))))) (, ,) (CC or) (S (NP (DT the) (NNP Node)) (ADVP (JJ next) (PP (TO to) (NP (NP (NP (DT the) (CD one)) (VP (VBN removed) (PRN (-LRB- -LRB-) (SBAR (IN for) (S (VP (VB remove)))) (-RRB- -RRB-)))) (: -) (NP (NP (DT no) (NN matter)) (PP (IN if) (NP (DT the) (NNP NodeIterator))))))) (VP (AUX was) (VP (VBG pointing) (PP (IN at) (NP (DT the) (VBN modified) (NNP Node))))))))) (CC or) (RB not)))) (. .)))
(S1 (S (SBAR (IN If) (S (NP (DT the) (NNP Node)) (VP (VBD removed) (SBAR (S (VP (AUX was) (ADVP (RB already)) (NP (DT the) (JJ last) (NN node)) (PP (IN in) (NP (DT the) (NN list))))))))) (, ,) (NP (PRP it)) (ADVP (RB simply)) (VP (VBZ points) (PP (IN at) (NP (DT the) (JJ last) (NN node))) (PP (IN in) (NP (NP (DT the) (NN list)) (PRN (-LRB- -LRB-) (VP (VBN ie) (NP (DT the) (JJ previous) (NNP Node))) (-RRB- -RRB-))))) (. .)))
(S1 (S (NP (NP (CD One) (NN problem)) (PP (IN with) (NP (DT this)))) (VP (AUX is) (SBAR (IN that) (S (NP (EX there)) (VP (AUX 's) (NP (NP (DT no) (JJ easy) (NN way)) (SBAR (S (VP (TO to) (VP (VB tell) (SBAR (IN if) (S (NP (DT the) (NN node) (VB remove)) (VP (AUX was) (NP (DT the) (JJ last) (NN one)) (PP (IN with) (NP (DT the) (JJ current) (NN spec))))))))))))))) (. .)))
(S1 (S (ADVP (RB Perhaps)) (NP (NN removeChild)) (VP (MD could) (VP (VB return) (NP (NP (DT the) (NNP Node)) (VP (ADVP (RB currently)) (VBN pointed) (PP (TO to)))) (, ,) (PP (RB instead) (PP (IN of) (NP (DT the) (JJ old) (NN node)))))) (. .)))
(S1 (S (NP (PRP I)) (VP (MD can) (RB n't) (VP (VB see) (NP (DT any) (JJ practical) (NN reason) (SBAR (IN that) (S (NP (NP (DT the) (NN value)) (VP (VBN returned))) (VP (VBZ needs) (S (VP (TO to) (VP (AUX be) (S (NP (DT the) (NNP Node)) (VP (VBN passed)))))))))))) (. .)))
(S1 (S (PP (IN For) (NP (NN example))) (, ,) (S (PP (IN with) (NP (NP (DT this)) (PP (IN as) (NP (DT the) (VBN defined) (NN behaviour))))) (, ,) (NP (DT the) (JJ following) (NN code)) (VP (MD would) (VP (VB remove) (NP (DT all) (NNS comments)) (PP (IN from) (NP (NP (DT the) (JJ current) (NN node)) (PRN (-LRB- -LRB-) (PP (IN in) (NP (NNP Java))) (-RRB- -RRB-))))))) (: :) (S (NP (NNP NodeIterator) (NNS ni)) (VP (SYM =) (NP (NNS node.getChildNodes)))) (-LRB- -LRB-) (-RRB- -RRB-) (: ;)))
(S1 (S (NP (JJ Node) (NN current)) (VP (SYM =) (NP (NN ni.toFirst)) (PRN (-LRB- -LRB-) (FRAG (-RRB- -RRB-) (: ;) (IN while) (-LRB- -LRB-) (X (JJ current) (. !) (SYM =)) (NP (NN null))) (-RRB- -RRB-)) (SBAR (IN if) (PRN (-LRB- -LRB-) (FW current.getType) (-LRB- -LRB-) (-RRB- -RRB-))))))
(S1 (NP (NP (NNP ==) (NNP Node.COMMENT) (-RRB- -RRB-) (JJ current) (SYM =) (CD node.removeChild)) (PRN (-LRB- -LRB-) (JJ current) (-RRB- -RRB-)) (: ;)))
(S1 (S (NP (JJ else) (NN current)) (VP (SYM =) (NP (NN nl.toNext)) (-LRB- -LRB-) (-RRB- -RRB-)) (: ;)))
(S1 (INTJ (JJ Easy) (. .)))
(S1 (S (S (NP (NP (DT The) (NN spec)) (PP (IN for) (NP (NN insertChild) (CC and) (NN replaceChild)))) (VP (MD would) (VP (AUX need) (NP (NN something)) (SBAR (IN like) (S (NP (DT the) (NN following)) (VP (VBD added) (: :) (`` ``) (S (NP (DT All) (NNPS NodeIterators)) (VP (VBD retrieved) (S (VP (VBG using) (NP (NNS getChildNodes)) (-LRB- -LRB-) (-RRB- -RRB-) (SBAR (IN for) (S (NP (DT this) (NNP Node)) (VP (MD will) (VP (AUX be) (VP (VBG pointing) (S (VP (TO to) (VP (VB newNode) (SBAR (IN if) (FRAG (ADJP (JJ successful.) ('' '') (CC and) (PP (IN on) (NP (NN removeChild)))))))))))))))))))))))) (: :) (`` ``) (S (NP (DT All) (NNPS NodeIterators)) (VP (VBD retrieved) (S (VP (VBG using) (NP (NNS getChildNodes)) (-LRB- -LRB-) (-RRB- -RRB-) (SBAR (IN for) (S (NP (DT this) (NNP Node)) (VP (MD will) (VP (AUX be) (VP (VBG pointing) (PP (TO to) (NP (NP (DT the) (JJ next) (NN child) (NNP Node)) (, ,) (CC or) (NP (DT the) (JJ previous) (NNP Node)))) (SBAR (IN if) (S (NP (NN oldNode)) (VP (AUX was) (NP (DT the) (JJ last) (NNP Node)))))))))))))) (. .) ('' '')))
(S1 (S (ADVP (RB Also)) (, ,) (NP (NP (DT the) (NN return) (NN value)) (PP (IN of) (NP (NN removeChild)))) (VP (MD would) (VP (AUX have) (S (VP (TO to) (VP (AUX be) (VP (VBN changed) (PP (TO to) (NP (: :) (`` ``) (NP (DT The) (JJ next) (NN child) (NN Node)) (, ,) (CC or) (NP (NN null)))) (SBAR (IN if) (S (NP (NN oldNode)) (VP (AUX was) (NP (DT the) (JJ last) (NNP Node))))))))))) (. .) ('' '')))
(S1 (S (PP (IN Of) (NP (NN course))) (, ,) (NP (DT the) (JJ previous) (NN example)) (VP (MD would) (VP (VB work) (PP (IN with) (NP (DT the) (JJ current) (NN spec))) (SBAR (IN if) (S (NP (DT the) (NN following)) (VP (AUX was) (VP (AUX done))))))) (: :) (SBAR (IN if) (PRN (-LRB- -LRB-) (FW current.getType) (-LRB- -LRB-) (-RRB- -RRB-)))))
(S1 (FRAG (NP (NNP ==) (NNP Node.COMMENT) (-RRB- -RRB-) (NN Node) (NN temp)) (X (SYM =)) (ADJP (JJ current)) (: ;) (X (JJ current) (SYM =)) (NP (NN nl.toNext)) (-LRB- -LRB-) (-RRB- -RRB-) (: ;) (S (NP (JJ node.removeChild) (PRN (-LRB- -LRB-) (JJ temp) (-RRB- -RRB-) (: ;)) (NNS //)) (VP (VB Add) (NP (NP (NP (DT the) (NN following)) (SBAR (S (VP (TO to) (VP (VB ensure) (S (NP (DT the) (NN list) (POS 's)) (VP (VBG pointing) (PP (IN at) (NP (DT the) (JJ right) (NN place))) (PP (IN if) (NP (PRN (-LRB- -LRB-) (FRAG (X (JJ current) (. !) (SYM =)) (NP (NN null))) (-RRB- -RRB-)) (NN nl.toNode))) (PRN (-LRB- -LRB-) (JJ current) (-RRB- -RRB-))))))))) (: ;) (RB else) (NP (CD //) (NN etc))) (, ,) (ADVP (FW etc) (FW ..)))) (. .)))
(S1 (FRAG (ADVP (RB Not) (RB quite) (PP (IN as) (ADJP (JJ neat)))) (, ,) (CC but) (S (NP (PRP it)) (VP (MD should) (ADVP (RB still)) (VP (AUX do) (NP (DT the) (JJ same) (NN thing))))) (. .)))
(S1 (S (PP (IN Of) (NP (NN course))) (, ,) (NP (DT this)) (VP (MD may) (RB not) (VP (AUX be) (ADJP (JJ possible)) (PP (IN in) (S (NP (DT some) (NNS situations)) (PRN (-LRB- -LRB-) (S (NP (PRP I)) (VP (MD can) (RB n't) (VP (VB think) (PP (IN of) (NP (DT any))) (PP (IN off) (NP (NN hand)))))) (-RRB- -RRB-)) (VP (VBG ..)) (. .))) (ADVP (RB Anyway)) (, ,) (NP (NP (NN food)) (PP (IN for) (NP (NN thought)))))) (. .)))
(S1 (NP (NNP David)))
(S1 (NP (PRP it)))
(S1 (NP (JJ relative)))
(S1 (NP (FW iterator) (. .)))
(S1 (FRAG (PP (IN of))))
(S1 (NP (NN position) (RB as)))
(S1 (S (VP (VB node) (NP (PRP it)))))
(S1 (NP (FW iterator) (. .)))
(S1 (NP (NN position) (RB as)))
(S1 (S (S (NP (PRP We)) (VP (VBD discussed) (NP (DT this)) (PP (IN in) (NP (DT the) (NNP IG))) (ADVP (RB recently)))) (: ;) (S (NP (PRP I)) (VP (AUX 'm) (RB not) (ADJP (JJ sure)) (SBAR (IN if) (S (NP (PRP we)) (VP (VBD reached) (NP (DT a) (NN consensus))))))) (. .)))
(S1 (S (NP (PRP$ My) (NN position)) (VP (AUX is) (SBAR (IN that) (S (SBAR (IN if) (S (NP (PRP one)) (VP (VBZ removes) (NP (NP (DT a) (NN node) (SBAR (IN that) (S (S (NP (DT an) (NN iterator) (NNS points)) (VP (TO to))) (, ,) (NP (DT the) (`` ``) (JJ current) ('' '') (NN node)) (VP (VBZ becomes) (ADJP (JJ undefined)))))) (CC and) (NP (NP (NP (NP (DT the) (NN getCurrent)) (PRN (-LRB- -LRB-) (S (NP (-RRB- -RRB-) (NN method)) (VP (MD should) (VP (VP (VB throw) (NP (DT an) (NN exception))) (, ,) (CC and) (VP (VB toNext) (-LRB- -LRB-))))) (-RRB- -RRB-))) (CC and) (NP (NN toPrevious))) (-LRB- -LRB-) (-RRB- -RRB-)))))) (VP (MD would) (VP (VB return) (NP (NP (DT the) (NNS values)) (SBAR (WHNP (WDT that)) (S (VP (MD would) (VP (AUX have) (VP (AUX been) (VP (VBN returned) (SBAR (S (VP (AUX had) (ADVP (NP (DT the) (NN node)) (RB not)) (VP (AUX been) (VP (VBN deleted)))))))))))))))))) (. .)))
(S1 (S (S (PP (IN In) (NP (JJ other) (NNS words))) (, ,) (NP (PRP I)) (VP (VBP imagine) (S (NP (DT the) (NN iterator)) (VP (VBG pointing) (PP (TO to) (NP (NP (DT the) (JJ empty) (NN spot)) (SBAR (WHADVP (WRB where)) (S (NP (DT the) (JJ current) (NN node)) (VP (AUX WAS)))))))))) (: ;) (S (SBAR (IN since) (S (NP (EX there)) (VP (AUX is) (NP (DT no) (NN node)) (ADVP (RB there))))) (, ,) (NP (`` ``) (JJ current) ('' '') (AUX is) (ADJP (JJ undefined) (, ,) (CC but) (JJ next) (CC and) (JJ previous))) (VP (AUX are))) (. .)))
(S1 (S (NP (PRP I)) (VP (VBP think) (SBAR (S (NP (DT the) (NNS alternatives)) (VP (VP (AUX are) (VP (VP (VBG confusing) (PP (IN for) (NP (NNS users)))) (CC and) (VP (VBG challenging) (PP (IN for) (NP (NNS implementors)))))) (, ,) (CC and) (VP (AUX do) (RB n't) (VP (VB add) (NP (NN anything)) (PP (IN in) (NP (NP (DT the) (NN way)) (PP (IN of) (NP (JJ conceptual) (NN integrity))))))))))) (. .)))
(S1 (NP (NNP Mike) (NNP Champion)))
(S1 (S (NP (DT That)) (VP (AUX 's) (SBAR (WHNP (WP what)) (S (NP (PRP I)) (VP (AUX 'm) (VP (VBG thinking)))))) (. .)))
(S1 (S (ADVP (RB Again)) (, ,) (NP (PRP I)) (VP (AUX 'm) (RB not) (ADJP (JJ sure) (SBAR (S (SBAR (IN if) (S (NP (EX there)) (VP (AUX 's) (NP (NP (DT a) (NN consensus)) (PP (IN in) (NP (DT the) (NNP Working) (NNP Group))) (PP (IN on) (NP (DT this))))))) (, ,) (RB so) (NP (NP (NNS comments)) (PP (IN from) (NP (NP (JJ potential) (NN DOM) (`` ``) (NNS customers) ('' '')) (PRN (-LRB- -LRB-) (SBAR (IN whether) (S (NP (PRP you)) (VP (VBP agree) (CC or) (VBP disagree) (PP (IN with) (NP (PRP me)))))) (-RRB- -RRB-))))) (VP (MD would) (VP (AUX be) (ADJP (RB very) (JJ helpful) (PP (TO to) (NP (PRP us)))))) (. !))) (NNP Mike) (NNP Champion)))))
(S1 (NP (NNP Hi) (NNP Michael) (, ,)))
(S1 (X (TO to)))
(S1 (S (NP (PRP I)) (VP (VBP think) (SBAR (S (NP (PRP I)) (VP (VBP like) (NP (DT this) (NN idea)) (ADVP (ADVP (RBR better)) (PP (IN than) (NP (NP (DT the) (NNS ones)) (SBAR (S (NP (PRP I)) (VP (VBD suggested) (ADVP (RBR earlier)))))))))))) (. .)))
(S1 (NP (NP (DT A) (NN couple)) (PP (IN of) (S (VP (VBG clarifying) (NP (NNS questions))))) (: :)))
(S1 (SQ (MD Should) (NP (EX there)) (VP (AUX be) (NP (NP (DT any) (NN way)) (SBAR (S (VP (TO to) (VP (VB test) (SBAR (IN whether) (S (NP (DT this)) (VP (AUX has) (VP (VBN happened)))))))))) (, ,) (ADVP (JJ other) (PP (IN than) (S (VP (VP (VBG calling) (NP (NN getCurrent))) (CC and) (VP (VBG catching) (NP (DT an) (NN Exception)))))))) (. ?)))
(S1 (S (NP (PRP I)) (VP (VBP guess) (SBAR (S (NP (DT the) (NN user)) (VP (MD will) (VP (VB know) (SBAR (IN if) (S (NP (DT this)) (VP (VP (AUX has) (VP (VBN happened))) (CC and) (VP (MD should) (ADVP (RB simply)) (VP (VB take) (NP (PRP it)) (PP (IN into) (NP (NN account))))))))))))) (. .)))
(S1 (S (SBAR (IN If) (S (NP (DT the) (VBN removed) (NN node)) (VP (AUX was) (NP (DT the) (JJ last) (NN one)) (PP (IN in) (NP (DT the) (NN list)))))) (, ,) (NP (PRP I)) (VP (VBP assume) (SBAR (S (S (NP (NN null)) (VP (MD would) (VP (AUX be) (VP (VBN returned))))) (CC and) (S (NP (DT the) (NNP NodeIterator)) (VP (MD would) (VP (AUX be) (VP (VBG pointing) (PP (TO to) (NP (NP (DT the) (JJ previous) (NNP Node)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (AUX is) (ADVP (RB now)) (NP (NP (DT the) (JJ last) (NN one)) (PP (IN on) (NP (DT the) (NN list)))))))))))))))) (. .)))
(S1 (NP (NNS Thanks) (, ,) (NNP David)))
(S1 (S (NP (PRP I)) (VP (AUX do) (RB n't) (VP (VB think) (ADVP (RB so) (RB ..) (. .)) (S (NP (NNP Does) (NN anyone)) (VP (VB feel) (ADVP (RB strongly)) (SBAR (IN that) (S (NP (EX there)) (VP (MD should)))))))) (. ?)))
(S1 (S (NP (DT That)) (VP (AUX 's) (SBAR (WHNP (WP what)) (S (NP (PRP I)) (VP (VBP assume) (ADVP (RB as) (RB well)))))) (. .)))
(S1 (NP (NNP Mike) (NNP Champion)))
