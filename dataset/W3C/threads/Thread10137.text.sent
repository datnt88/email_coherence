I was looking over XSD again. 
It seems to me as though the recommendation to use XSD within RDF raises more questions than we have currently been considering. 
IMO, it may knock us off target (and probably should). 
I have begun working on what I think would be a set of answers ... See: or maybe (the supposedly equal) (I have a stylesheet issue - in the tables red text may only come out in purple with a strikethrough, whereas the green text comes out in purple without the strikethrough). 
Jeremy Excellent summary, Jeremy. 
And this definitely touches on my concerns about the basis being used for certain entailment tests involving relations between datatypes -- as to where those relationships are defined and whether those relationships sync with the RDF definition for rdfs:Datatype. 
My impression is that while there is evidently a problem with equality in XML Schema simple datatypes, it is not per se a problem with RDF Datatyping. 
I.e., it should be sufficient to (a) note the problems in XML Schema and (b) submit suggestions to the XML Schema WG, but I don't see how this impacts the current RDF datatyping model. 
If XML Schema says that xsd:float and xsd:decimal have disjunct value spaces, we may wish to disagree and consider that a bug, but that doesn't affect how those datatypes are modeled in RDF. 
It simply means that the assertion xsd:decimal rdfs:subClassOf xsd:decimal . 
(and/or visa versa) is (possibly) in conflict with the XML Schema spec. 
So what. 
That's not RDF's problem and RDF is not creating the problem. 
If the XML Schema spec says "1.0"^^xsd:decimal != "1.0"^^xsd.float 
(and my understanding is that it does say this) then applications should respect that if they are using those datatypes. 
If the XML Schema datatype relations are either broken or ill defined, then fix them. 
The RDF datatyping model is then providing a benefit to the XML community by shining a light on the problem. 
Eh? Patrick [Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, patrick.stickler@nokia.com] 
yes. 
Sorta. 
I'll take your word for it there is a problem with XML Schema datatypes, but I'd rather we focussed our attention and efforts on the RDF issues we have. 
Yes. 
Oh I hope that's a type. 
If Schema doesn't agree to that we are in trouble. 
Did you mean something like xsd:integer rdfs:subClassOf xsd:decimal . 
YES. 
I think this is a good approach. 
I think I find myself agreeing strongly with Patrick here. 
We need to balance two things: o getting finished o making sure we don't ignore signs of serious problems My interpretation of where we are at is: o We have a datatyping model for RDF o There are some subtlties of specific schema datatypes that we have not yet worked out but they do not call the general model into question. 
As Patrick, says whether xsd:float is a subclass of xsd:double is a matter for the xsd guys to define. 
o I'm sympathetic to us having worked this stuff out in some detail for xsd datatypes to check that there are no hidden gotchas, but I think that may take some time and need us to work with xml schema folks. 
o I suggest: - we use non controversial examples of schema datatypes in our test cases - stay away from the stuff that tests understanding of schema datatypes more than rdf - we propose through the coordination group the writing of note jointly by folks from rdfcore and xml schema datatypes which defines the RDF schema for XML Schema datatypes. 
- that we write that note after last call and before proposed rec Comments? 
Brian As I explained earlier, I disagree with shying away from contraversial issues that are relevant to our design, i.e. keeping them out of the test suite. 
If we're shy about these issues, let's get them out of our design; c.f. rdfs:format Dan Connolly, W3C http://www.w3.org/People/Connolly/ [Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, patrick.stickler@nokia.com] 
This has nothing to do with our design, but with ambiguity in the XML Schema datatyping specs. 
I read them as saying that the following assertions are not licensed: xsd:decimal rdfs:subClassOf xsd:float . 
xsd:float rdfs:subClassOf xsd:decimal . 
i.e. "10.0"^^xsd:float != "10.0"^^xsd:decimal and if we're going to have test cases for the above, they should be negative entailment tests, since IMO XML Schema doesn't license the datatype entailment IF thing:A some:Property "10.0"^^xsd:float . 
thing:B some:Property "10.0"^^xsd:decimal . 
THEN thing:A some:Property _:x . 
thing:B some:Property _:x . 
It is NOT the duty of the RDF Core WG to resolve the above ambiguity or fix XML Schema datatypes so that applications can fairly consider that "10.0"^^xsd:float == "10.0"^^xsd:decimal, even if it is relevant to the RDF community. 
This seems more like an issue for the SW Coord. 
Group or the TAG to resolve. 
It is IMO enough if we simply say somewhere "here be dragons". 
Surely you're not proposing we throw out the typed literals and go only with lexical constraints?! Again, this has nothing to do with the RDF design. 
In fact, the present datatyping solution provided by RDF is helping the XML community by shining a light on these problemmatic issues and "encouraging" the XML Schema folks to fix them. 
Patrick This isn't true, because 0.1 does NOT occur in the xsd:float value space. 
(it's 2^-1 . 
5^-1) This is true if floats and decimal value spaces are just sets of numbers, as Jeremy described. 
jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ "My army boots contain everything not in them." - Russell's pair o' Docs. 
[Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, patrick.stickler@nokia.com] 
"w3c-rdfcore-wg" w3c-rdfcore-wg@w3.org 
I think you are missing the critical point here. 
And that is that the XML Schema specs say that *NEITHER* of the above are true. 
Whether one might argue that the latter is true or not is completely beside the point insofar as the RDF Core WG is concerned. 
We do not own XML Schema datatypes. 
We have provided a datatyping solution that allows folks to use XML Schema datatypes in RDF. 
Such usage can and should respect that there is no defined intersection of values between xsd:float and xsd:decimal. 
If folks want to ensure that xsd:float rdfs:subClassOf xsd:decimal . is true in the XML Schema specs, then that should happen in/with the XML Schema WG. 
It's not *our* concern insofar as getting the RDF specs out with a sufficient set of test cases. 
RDF datatyping works perfectly either way. 
Patrick DanC claimed that they did, at the last telecon - remember "WHERE are the WORDS?!" :-) I agree with you that it's not a problem of RDF's making; but if there _is_ disagreement over the answer then we need to feedback to XML Schema. 
jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ 
I'm the dandy information superhighwayman. 
[Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, patrick.stickler@nokia.com] 
"w3c-rdfcore-wg" w3c-rdfcore-wg@w3.org 
Well, I would say that there are no words whatsoever defining any subtype relation between xsd:float and xsd:decimal -- and so the question then is "where are the words" that define such a relation. 
The reality is that neither can be a subtype of the other because both have values in their value spaces which don't occur in the others. 
Whether or not their value spaces intersect, is still an open question. 
I think that anyone with half a clue would presume that they do in fact intersect -- and that if the specs suggest they don't that they should be fixed -- but the ambiguity is there. 
I fully agree, and we should do that, and move on. 
And when moving on, avoid the controversial areas of XML Schema datatypes by using examples where there is clear derivation defined by the XML Schema spec. 
Patrick 
