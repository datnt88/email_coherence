Consider the following JavaScript syntax: 
var x = document.createRange(); 
x.setStart(document.getElementsByTagName("p")[0],0); 
x.setEnd(document.getElementsByTagName("p")[0],1); 
x.insertNode(document.getElementsByTagName("div")[0]); 
Suppose that the document does not contain any div elements. 
What exception should be thrown? 
Do you 
have to check for existence of the node before you insert it? 
Thanks, Dylan Schiemann Do You Yahoo!? Get personalized email addresses from Yahoo! Mail - only $35 a year! 
http://personal.mail.yahoo.com/ 
Typically, that kind of construct would raise a binding-specific array-index-out-of-range exception. 
JavaScript just returns 'undefined' on an out of range array lookup, so the exception that would be raised is that same as that which would be raised by x.insertNode(null); ...which, per the DOM Core spec, is an implementation-specific exception: # Implementations should raise other exceptions under other circumstances. 
# For example, implementations should raise an implementation-dependent # exception if a null argument is passed. 
-- http://www.w3.org/TR/2000/REC-DOM-Level-2-Core-20001113/core.html#ID-17189187 paragraph 2 HTH, Ian Hickson )\ _. - ._.) fL Invited Expert, CSS Working Group /. `- ' ( `--' The views expressed in this message are strictly `- , ) -  ) \ personal and not those of Netscape or Mozilla. 
________ (.' \) (.' -' ______ 
Fairly Simple Question, How do I make sure I don't get a null pointer exception (when the XML document has companyname /companyname using this code. 
Documentation states this should be a null value But 
if (companyname.item(i).getFirstChild().getNodeValue() 
!= null) { 
NodeList companyname = doc.getElementsByTagName("companyname"); 
String CompanyName = 
companyname.item(i).getFirstChild().getNodeValue(); 
out.print(CompanyName + " br "); Doesn't do the trick And all resources on internet with good tutorials using JSP/DOM/XML are 
welcome. 
regards, Tom Dylan Schiemann 
Consider the following JavaScript syntax: 
var x = document.createRange(); 
x.setStart(document.getElementsByTagName("p")[0],0); 
x.setEnd(document.getElementsByTagName("p")[0],1); 
x.insertNode(document.getElementsByTagName("div")[0]); 
Suppose that the document does not contain any div elements. 
What exception should be thrown? 
Do you 
have to check for existence of the node before you insert it? 
Thanks, Dylan Schiemann Do You Yahoo!? Get personalized email addresses from Yahoo! Mail - only $35 a year! 
http://personal.mail.yahoo.com/ 
You are using a error prone technique to access a text node by assuming that the companyName element will always have one text node as its content and no more. 
Unfortunately, there are several error conditions that can make this technique crash. 
Below is an effective way to iterate through all children of a node, and grabbing the content of their text nodes(and text nodes only): Element companyName = ..... NodeList childNodes = companyName.getChildNodes(); 
String name = ""; for (int i=0; i  name.getLength(); 
i++) { if (childNodes.item(i).getNodeType() 
== TEXT_NODE) { name = name + childNodes.item(i).getNodeValue(); 
At this point the 'name' variable will contain the content of all of the text nodes, or will be empty if no text nodes were present. 
Remember: Application developers using the DOM should never assume anything. 
You should *always* do Node type checking, and *never* rely on the position of a node in context for anything(as there is no guarantee that it will be constant). 
Hope this helps, Eric Lawson Isogen International 
are 
Of 
Are you sure companyname.item() 
isn't null? 
Are you sure companyname.item().getFirstChild() 
isn't null? 
You should probably test those before testing companyname.item 
().getFirstChild().getNodeValue(). 
Work it through. 
The use of [0] to access a NodeList in ECMAScript is officially defined as equivalent to the item() method. 
getElementsByTagName() will return an empty nodelist if it doesn't find anything. 
So your first risk is that there are no p elements. 
If that's true, the item(0)/[0] returns null. 
The definition of Range.setStart and Range.setEnd says this parameter MUST NOT be null. 
We don't actually say what exception gets thrown if it is. 
That may or may not be an erratum. 
I take it to mean that a system-specific null pointer error will be thrown eventually. 
Note _eventually_; it may be discovered only when you try to access the mis-configured Range. 
But one could certainly justify HIERARCHY_REQUEST_ERR (null is never a legal child) or INVALID_NODE_TYPE_ERR. 
Assuming the first p is found -- and note that you are only checking that one! -- you search for a div . 
(You aren't searching within that p , but anywhere within the document... which seems odd, but OK.) You may not find it; in that case you're trying to insert null into the range. 
That's a nonsensical operation, and we should throw an exception. 
Again, we don't specify which. 
I would expect a null pointer exception, but one could certainly justify HIERARCHY_REQUEST_ERR (null is never a legal child) or INVALID_NODE_TYPE_ERR. 
This is definitely in the range of "If it hurts when you do that, stop doing that." 
Joe Kesselman / IBM Research 
Joseph, 
yes it would be null . 
it would be peferctly possible that the companyname tag in the xml would be like so no date is in there . 
or that the companyname tag would simply not be there in my xml file i have a bunch of attributes defined to company so simple example but any of these can be empty or not existing. 
since I am getting nullpointer exceptions and i thought I am testing it using if (companyname.item(i).getFirstChild().getNodeValue() 
!= null) apparantly that is not enough. 
Regards, Tom Tom Leuntjens Fairly Simple Question, How do I make sure I don't get a null pointer exception (when the XML document has companyname /companyname using this code. 
Documentation states this should be a null value But if (companyname.item(i).getFirstChild().getNodeValue() 
!= null) { NodeList companyname = doc.getElementsByTagName("companyname"); 
String CompanyName = companyname.item(i).getFirstChild().getNodeValue(); 
out.print(CompanyName 
+ " br "); Doesn't do the trick And all resources on internet with good tutorials using JSP/DOM/XML are welcome. 
regards, Tom -----Original Message----- Dylan Schiemann Consider the following JavaScript syntax: var x = document.createRange(); 
x.setStart(document.getElementsByTagName("p")[0],0); 
x.setEnd(document.getElementsByTagName("p")[0],1); 
x.insertNode(document.getElementsByTagName("div")[0]); 
Suppose that the document does not contain any div elements. 
What exception should be thrown? 
Do you have to check for existence of the node before you insert it? 
Thanks, Dylan Schiemann Do You Yahoo!? Get personalized email addresses from Yahoo! Mail - only $35 a year! 
http://personal.mail.yahoo.com/ 
Nope, and it never is, this is a simple javascript problem because there are no children to the item (say) then companyname.item(i).getFirstChild() 
evaluates to null. 
therefore you have null.getNodeValue() 
!= null That is not allowed, null has no methods. 
You need to test every single object before calling a method/accessing a property. 
if (companyname &amp;&amp; companyname.item 
&amp;&amp; companyname.item(i) 
&amp;&amp; companyname.item(i).getFirstChild() 
&amp;&amp; companyname.item(i).getFirstChild().getNodeValue()) 
Would be what you want to do. 
(yes I know it's long...) Jim. 
You have to check if element document.getElementsByTagName("p") 
exists or it will crash when you try to get document.getElementsByTagName("p")[0] 
since you can not get an array value from a null pointer. 
the same applies to document.getElementsByTagName("div") 
Find the best deals on the web at AltaVista Shopping! 
I have a similar situation. 
I can retrieve the value of element(p) using document.getElementsByTagName("p"). 
I can parse my XML using xerces DOMParser and retrieve the element value. 
If my XML is based on a DTD which contains more than 2 child dtds, still i can successfully parse the XML and retrieve the element value using document.getElementsByTagName("p") 
ONLY some indefinite number of times before my applcation hangs. 
After this point I can still parse the xml but invoking the same method document.getElementsByTagName("p") 
results in NULL POINTER EXCEPTION. 
Could you please elaborate on this aspect as soon as you can. 
I think this is very abnormal behaviour for the DOM(document ) methods to work for an indefinite amount of time. 
System crashes after running normally for an indefinite amount of time, even with case of XML based on dtd containing 3 child dtds. 
Would you please elaborate on this aspect as soon as you get a chance, thanks, Andrew Americo Albuquerque 
You have to check if element document.getElementsByTagName("p") 
exists or it will crash when you try to get document.getElementsByTagName("p")[0] 
since you can not get an array value from a null pointer. 
the same applies to document.getElementsByTagName("div") 
Find the best deals on the web at AltaVista Shopping! 
