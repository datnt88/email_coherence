Despite Michael's request that messages be kept to a single subject within the list I have decided not to bombard you all with one message per point I want to make, but have tried to cover questions raised by one of the set of forms in one posting. 
This set of points relates to dd-1996-0002-f3.html, which deals with Element Structure, and also to the points relating to Processing Instructions in dd-1996-002-f4.html 
7.1 One way to overcome the differences of how systems handle DocTypes might be for XML to only allow DTDs to be referenced using a public identifier (that would be resolved through a catalog), with no local subset, e.g. Such a line must be the first declaration in the document instance, but could be preceded by a comment (or PI) that indicates the public identifier of the SGML declaration to be used when parsing the document and DTD. 
7.4 (a) Empty and unclosed start-tags are obviously not needed by XML, but could there be a case for NET-enabled start-tags to delimit numeric data? 
7.6 (4th bullet) PIs don't make sense on a network. 
Their use should be restricted to the prolog, where they could be useful in setting up the parser (e.g. to identify a relevant SGML declaration). 
The thought of allowing a processing instruction within a document instance that is going to be displayable by many different plug-ins scares the hell out of me. 
7.9.4.3 
A useful restriction might be that the entities referred to can only be data entities defined using SGML (NDATA "SGML"), or valid SGML subdocuments. 
8 (b) I feel that entities that map to Processing Instructions are not conducive to portability either. 
You can only refer to such entities within a document instance, and I have already made a point about the inamissibility of PIs in portable document instances. 
8(c) If PIs are retained then PIC should be changed so that it is not  as this is required for many processing instructions. 
(An alternative may be to allow a character reference to be entered within a PI, but this would make XML incompatible with SGML.) Martin Bryan, The SGML Centre, Churchdown, Glos. 
GL3 2PU, UK 
From bsmith@atlantic-82.Eng.Sun.COM Wed Sep 11 17:23:02 1996 Date: Wed, 11 Sep 1996 15:01:54 -0700 From: bsmith@atlantic-82.Eng.Sun.COM (Bill Smith) Subject: Re: Element Structure for XML (Clause 7) 
Let's remember that 95% of the time, a given document instance is going to be read by the same tool that last wrote it. 
Sure, interchange is important, but allowing for user-friendly tools is too, and if we throw out the only safe, unscary way to support tool-specific amenities, we are really dooming ourselves to lowest common denominator standards of useability. 
On the web, it's more likely that the tool used to view a document is not the tool used to write it. 
But how many times did it go into and out of the authoring tool during its creation, drafting, modifying, editing, proofing, etc. before it got put up on the internet for viewing. 
PIs are not required to produce user-friendly tools. 
Tom Magliery's suggestion seems like a reasonable alternative. 
I think PIs are unnecessary. 
First, comments are comments, and as Tom says, they are ignored by many parsers. 
Why be non-compliant with SGML for (what I perceive as) no good reason? 
Second, there are existing tools that use PIs as they were intended to be used. 
Why break them and ask them to use comments for what they weren't intended? 
Third, comments have at least as annoying "escaping" problems as PIs. 
Do you know how often I try to type "--" in a long comment only to have a parse error (unless I'm using Adept which tries to avoid this)? 
The business about parsing -------- [that's 8 of them] in a comment is certainly more of a pain than scanning text following ? 
for  . 
Fourth, I still just don't get it. 
What's so hard about PIs? 
paul p.s. My message header seems to indicate that Bill sent this only to me. 
I hope I'm correct in assuming this was an oversight and that I'm not breaching e-etiquette by resending this to the entire mailing list. 
One thing that's hard is the rules about how REs adjacent to PIs are handled. 
David Durand and I independently came up with a good way of dealing with such things (he had the idea before me, as Setev later let me know): define RE and RS such that they'll never occur in an XML document. 
That alone will simplify parsers a great deal. 
