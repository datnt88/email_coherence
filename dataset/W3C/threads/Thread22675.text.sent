I'm trying to be patient and learn the reasoning behind some DOM design decisions. 
To that end, let me ask: Why does setNodeValue on an Element do nothing? 
Given that XML is all text, shouldn't every element be able to contain text as its value? 
What other kind of value would it contain, anyway? 
Why do we have to add a text node? 
There is question after question on various DOM-implementation discussion forums from people who are baffled by the fact that setNodeValue does nothing, so I know this is a source of bewilderment for many. 
Regards, Gavin Consider an element to be a container: it can contain multiple nodes of various types. 
Although you could conceive of a model where an element is just text, that would not be as useful as the DOM. 
Separating element and text types is natural for an object model since they have different characteristics. 
It is also natural in the sense that a program responding to an XML message probably should behave differently toward elements and text. 
The confusion people seem to have regarding this model also seems to be easily clarified. 
Just remember that an element contains other nodes. 
The "value" of an element is not really meaningful, it is the "content" of an element that is meaningful. 
James Melton CyLogix 609.750.5190 609.750.5100 james.melton@cylogix.com 
www.cylogix.com 
An element may contain other elements and text may be interspersed between the elements in an element. 
This is found quite commonly in almost any HTML document. 
If the confusion is surrounding text nodes, then I am not sure what they would think should be an alternative. 
Naked strings cannot live very well in a node hierarchy or as children of an element, because you have no way to get to the next sibling, for example. 
This is true of any node that can have children. 
The Attr node actually does allow you to call setNodeValue, but underneath it constructs a Text node to hold the content and wipes out existing children (or something equivalent). 
This may be OK for Attr, because people who don't want to understand a node hierarchy can pretend that there are no children since getNodeValue can always give you something nearly functionally equivalent to what you would set, and there are a number of environments where the only child of an Attr is a single text node, since they are not worried about losing entity references, especially where the result is never written out or where a specification such as HTML has made additional general entity declarations illegal. 
Elements were designed to have structural child elements intermixed with text. 
If people expected setNodeValue to work, they would also expect getNodeValue to work, and it cannot give you anywhere close to the same thing, since the children cannot be present in a literal string value, and making it a parsed string value would make it quite unusable for many simple applications and would bind it to a single parser and serializer. 
There have been attempts to do this sort of thing in certain browser APIs using names like "innerText" which strips out all the child tags (and hence is not symmetrical if you want to setInnerText) and "outerText" which puts them in, and makes assumptions about parsing or serialization and would require the caller to escape characters to make them literal, etc. 
These would be quite complex to define well and would introduce backward depencencies from DOM Node attributes to the parser that the DOM has been free of up until now. 
If you can think of a simpler way of abstracting the operation that didn't involve so much complexity, I it might be warmly recieved. 
Naturally for a particular implementation to make a proprietary function that hard-codes to its parser/serializer and make assumptions the same way its own parser would handle things is easy, but you shouldn't expect it to be portable or part of the standard API specification which was designed to be portable between quite different environments. 
Ray Whitmer rayw@netscape.com 
I think people ask about setting an element's value because it doesn't really conflict with the concept of having subnodes. 
There's no reason that an element can't have a text "value" and then contain subnodes as well. 
In an outline, each heading has a "value" (its text), but can have numerous subheadings with their own values. 
Since XML is, in fact, all text like an outline, this makes sense. 
It seems that the only reason you can't just have the "value" text in between the element tags (before or after all the subnodes) is the perceived necessity to have multiple independent blocks of text interspersed with the subnodes. 
But why should that be allowed anyway? 
If you want a bunch of independent text nodes under an element, then yes, they should have to be added as subnodes. 
An element should have only one value. 
Wouldn't this work? 
- COMMAND_TRANSMISSION This is the command element's value. 
Now let's have some subnodes. 
What's the value of p? 
Is it "this is a", "statement", "This is a bold statement", or "This is a b bold /b statement"? 
The answer, of course depends on the type of application you're building, and should not be an assumption made by the DOM. 
Tom Bradford --- The dbXML Project --- http://www.dbxml.org/ 
Relational XML support? 
I liked it more when it was a CLOB. 
Tom is absolutely rightt. 
Given that XML is abstract markup, there really is no single string that all XML-based languages will agree correctly represents the element's content. 
The desired string representation might just as well be "[bold] statement, This is a" -- or even "783092389", that being the order number for the "This is a statement" purchase ( p/ ) with the billing number ( b/ ) "bold" and no attributes on either (which might have affected how it was resolved). 
The question isn't "independent text units". 
It's the fact that the element's structure, as well as its text content, may have meaning to a given application. 
That's true even in HTML; would you really want the element's node value to include the content of script elements? 
This isn't to say that get-all-contained-text is useless. 
It's a perfectly reasonable operation which will _SOMETIMES_ be valuable, which is why Ranges have a mechanism for retrieving that information, and there have occasionally been proposals that we add a non-Range convenience function to retrieve it. 
But it's up to the application to decide when that is and isn't a useful view of this subtree. 
Joe Kesselman / IBM Research 
