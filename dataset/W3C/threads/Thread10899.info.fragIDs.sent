A few suggestions for things that I think we need. 
I am describing these somewhat like architectural forms, and somewhat like algebraic data types. 
I am using prose, to avoid the prejudicing effect of inventing a new notation, or abusing an old one. 
I have built on some HyTime concepts, because they best reflect the relationship of markup and hypertext. 
However, I'm still unsure as to whether HyTime architectural forms are appropriate. 
However, the set of declarations here seems sufficient for a lot of stuff. 
A separate list like this should also be made for link behaviors, but I strongly urge that we separate the behavior from the markup. 
I think folding it into the DSSSL stylesheet would be best, but a separate linking-behavior stylesheet would also be OK. 
We require four primary kinds of objects (these are things that occur in documents and would get single tags): clink, ilink, location, anchor. 
LINK (abstract superclass of ilink and clink) A link has 1-n linkends. 
Linkends record a relationship to other locations. 
The linkend locations can be specified by the ID of an element in the containing document, or a location indicated by a TEI extended pointer. 
If the location is a "location" object, the designated destination is the object pointed to by that location (1 level of location ladder only, for simplicity). 
A link has an optional "link explainer". 
This is a string, suitable for user-consumption, describing the intent of this particular link. 
A link has (perhaps optional?) link-meta information, specifying further user and application information about the link's data type. 
CLINK: Linkend override: One linkend is the point (if empty) or scope (if content containg) where the clink markup occurs. 
ILINK An ilink has no properties other than those of the "abstract link". 
LOCATION A location may point via an ID of an element within its containing document, a TEI extended pointer, or a HyTime query (we need a list of necessary location methods the TEI does not accomodate, and a way for extending the kinds of location by the author, if desired. 
Some subset of HyTime location address seems right here, but how small (or null) the subset should be is not yet clear to me.) This is a place for discussion, and extensibility. 
ANCHOR An anchor is an element that exists _solely_ to facilitate the addressing of a document portion by clinks or ilinks. 
Other than being addressable, it should have no effect on processing. 
Dependent objects: LINK-META We need to associate some meta-information with the ends of links. 
This allows multi-ended links to identify the function of link ends with something more meaningful than sequential order. 
Link-meta contains (for each link end) A link-type. 
These should be specifiable by default (say for links with fixed numbers of endpoints), on the instance (for links with variable number of endpoints), and maybe by some combination (Steve DeRose and I proposed methods to extend HyTime to accomodate this -- we don't know what's happened in the TC process). 
A linkend explainer. 
This is a user-readable string (like an alt string) that should be displayed to explain the meaning of the data located by this link end. 
It should be displayed, if the interaction style enables such display. 
SUMMARY These are the things I want in XML linking. 
I could live without explicit anchors and locations, but I think many will want them. 
Also, locations are a convenient place to extend link elements without complicating the syntax for simple links. 
Anchors are really formally unnecessary, as they can simply be any elements that do not affect formatting. 
However, users and authors might be served if it is possible to say that an element _should not_ affect presentation. 
-- David (who sprinkled a little OO magic dust after all) I am not a number. 
I am an undefined character. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ 
Even though David and I often disagree on details and use of terminology (and, to a larger degree, the existence of HyTime as a "good thing", which is, ultimately, a religious argument that cannot be resolved to anybody's satisfaction), I do completely agree with David's suggestions here: they are essentially identical to those I plan to complete just as soon as the holidays and Evil Cedar Pollen Allergy release me). 
I don't really care how the design is conveyed in the spec: architectural forms, whatever, as long as it's clear and precise. 
Cheers, E. W. Eliot Kimber (eliot@isogen.com) 
Senior SGML Consulting Engineer, Highland Consulting 2200 North Lamar Street, Suite 230, Dallas, Texas 75202 "Rats in the morning, rats in the afternoon...if they don't go away, I'll be re-educated soon..." --Austin Lounge Lizards, "1984 Blues" 
I'm not sure I understand "these should be specifiable by default"--isn't the link type the same for all the link ends of a given link? 
In HyTime, the anchor roles of a particular link type must be the same for all instances of the type *in the same document.* 
This is partly because in the new HyTime design, addressing of anchors is done by attributes whose names correspond to the anchor roles--therefore the anchor role names must be unique within the type and they must be fixed or you couldn't declare the attributes. 
Note that we do now have way to indicate that it is *not an error* to for a given anchor role to consist of zero objects (i.e., that you can choose to not address anything for a particular anchor role). 
That means that you can make any anchor-addressing attribute optional if it is not an error for that anchor to be null. 
Cheers, 
E. W. Eliot Kimber (eliot@isogen.com) 
Senior SGML Consulting Engineer, Highland Consulting 2200 North Lamar Street, Suite 230, Dallas, Texas 75202 "Rats in the morning, rats in the afternoon...if they don't go away, I'll be re-educated soon..." --Austin Lounge Lizards, "1984 Blues" 
Steve DeRose and I have strongly argued against this mis-feature of HyTime many times. 
It is a pointless restriction that means that one _cannot_ define multi-ended links where the number of linkends is defined by the application. 
I thought that this was slated to go away in the TC. (At least I hoped there was a chance that someone would want to represent pop-up menus as multi-ended links). 
I strongly urge that we not adopt this "feature" of HyTime. 
I expect Eliot to claim that the above is false. 
I do not believe that composite anchors (discontinuous selections) are the same as multiple link endpoints, and so I do not accept the proposal that he is likely to make. 
I also think that _for XML_ this will not work, as I think that discontinuous link endpoints (HyTime (unrevised) multlocs) should not be part of XML. 
They are a bit too esoteric for our audience, I think. 
What is the syntax for this? 
In (uncorrected) HyTime, they are both lists of IDs, in 1-1 correspondence, so you cannot "leave one out". 
I really hope to get to read the TC soon, but I'd rather get a degree and see XML on its way. 
-- David I am not a number. 
I am an undefined character. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ 
The HyTime design team obviously disagrees with Steve and David on this point (and in fact, is about the only point on which we *do* disagree in any fundamental way). 
I think we may be seeing a collision of conflicting requirements that cannot be satisfied by a single solution. 
We think we have provided an adequate, general, and consistent solution to the problem of representing menus through the use of combinations of hylinks and agglinks. 
I disagree that multiple locations should not be a part of XML--I think they are a significant value add, being one of the things that will distinguish XML linking from HTML linking. 
I like them too, but the case is not as strong as it is for ilink (which has been spontaneously proposed many times in WWW contexts). 
Aggregate link endpoints are not nearly as popular, so I think we could leave them out. 
They also present display problems, particularly for the rather retarded user-interface models typical of current browsers. 
It's also possible that we have a terminology conflict here. 
In HyTime, "multiple link endpoints" requires that you have multiple anchor roles, one for each link end. 
Allowing variable numbers of link ends means requiring variable anchor roles *AND* (here's the catch) requires that a unique anchor role be specified for each distinct link end. 
I don't see any terminology problem here. 
I just disagree that anchor roles have to be fixed. 
Our reasoning is that the analysis of the roles within a link type is best done at the time the type is declared. 
It would, we think, be undully onorous to require authors to make up (probably arbitrary) anchor role names when all they want to do is add to the list of things linked. 
It's unduly onerous to require a static type declaration when they do not have a fixed set of linktypes and roles. 
Strong typing is useful, but not everyone wants it. 
If you don't want it, how can you turn it off? 
Thus, we provide the agglink form which lets you relate an unlimited number of things together without first defining a distinct role name for each. 
What if I want to dfine distinct role names for each, but not in advance? 
That is the feature request, and blusterung about link types does not change the answer that you are giving "No, because _we believe_ that it is not what yolu really want." 
We also feel, obviously, that the anchor roles are a *constant* property of a link type--if you want a different set or number of roles, it's a new type, so declare a new type (which, by the way, XML makes pretty easy since you can omit the formal declaration altogether if you want to). 
Or, create a new document in which the same type has a different definition. 
So, HyTime is incapable of representing a hypertext system that does not limit link types to a static list. 
This is not a limitation that we should take over into XML. 
It is not a limitation that has been justified either. 
I am _not_ questioning that strong linktypes can be useful, just that they must be mandatory for what is supposed to be an inclusive standard (HyTime). 
And the equivalent information (rev and rel) in HTML is not strictly controlled in the way that you are asking. 
Nor are the HTTP Link: header values. 
These might be relevant hypertext functions that XML would wish to subsume! 
Not any more. 
Please review my summary of TC changes: the new syntax for hyperlinks is that there is one attribute per anchor role, the so-called "anchor-addressing attributes". 
We have also clarified that it is possible for most location address elements to address empty lists. 
This provides at least two ways for an anchor to fail to address anything: either by simply omitting the anchor-addressing attribute or using a location address that returns an empty node list. 
Here are examples of both: 
This is truly unfortunate. 
The original design was susceptible of improvement, this one is not. 
XML should define a mechanism for assigning anchroles to the endpoints of an agglink, in that case, and maybe the HyTime committee will see fit to include it. 
In fact, I think the solution I proposed will still work, but just won't be HyTime compatible any more, since HyTime is too inflexible to accomodate it. 
Can we make agglink equivalents of both clinks and ilinks? 
-- David I am not a number. 
I am an undefined character. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ 
The HyTime design team obviously disagrees with Steve and David on this point (and in fact, is about the only point on which we *do* disagree in any fundamental way). 
I think we may be seeing a collision of conflicting requirements that cannot be satisfied by a single solution. 
We think we have provided an adequate, general, and consistent solution to the problem of representing menus through the use of combinations of hylinks and agglinks. 
I disagree that multiple locations should not be a part of XML--I think they are a significant value add, being one of the things that will distinguish XML linking from HTML linking. 
It's also possible that we have a terminology conflict here. 
In HyTime, "multiple link endpoints" requires that you have multiple anchor roles, one for each link end. 
Allowing variable numbers of link ends means requiring variable anchor roles *AND* (here's the catch) requires that a unique anchor role be specified for each distinct link end. 
Our reasoning is that the analysis of the roles within a link type is best done at the time the type is declared. 
It would, we think, be undully onorous to require authors to make up (probably arbitrary) anchor role names when all they 
want to do is add to the list of things linked. 
Thus, we provide the agglink form which lets you relate an unlimited number of things together without first defining a distinct role name for each. 
We also feel, obviously, that the anchor roles are a *constant* property of a link type--if you want a different set or number of roles, it's a new type, so declare a new type (which, by the way, XML makes pretty easy since you can omit the formal declaration altogether if you want to). 
Or, create a new document in which the same type has a different definition. 
Not any more. 
Please review my summary of TC changes: the new syntax for hyperlinks is that there is one attribute per anchor role, the so-called "anchor-addressing attributes". 
We have also clarified that it is possible for most location address elements to address empty lists. 
This provides at least two ways for an anchor to fail to address anything: either by simply omitting the anchor-addressing attribute or using a location address that returns an empty node list. 
Here are examples of both: !-- Edit link: relates source to change and, optionaly, to a comment about the edit. 
-- !ATTLIST EditLink anchrole CDATA #FIXED "sourcetxt newtxt comment" sourcetxt IDREF #REQUIRED newtxt IDREF #REQUIRED comment IDREF #IMPLIED emptyanc CDATA #FIXED "error error ignore" HyTime NAME #FIXED "hylink" editlink sourcetxt="dataloc-1" newtxt="dataloc-2" editlink sourcetxt="dataloc-1" newtxt="dataloc-2" comment=null Cheers, E. W. Eliot Kimber (eliot@isogen.com) 
Senior SGML Consulting Engineer, Highland Consulting 2200 North Lamar Street, Suite 230, Dallas, Texas 75202 "Rats in the morning, rats in the afternoon...if they don't go away, I'll be re-educated soon..." --Austin Lounge Lizards, "1984 Blues" 
I think I understand David's feature request. 
We have certainly discussed the issue of variable anchor roles at some length during the TC design, but it was usually in a difference context which I don't think is as well justified as David's. 
I see also that this is a primary point of potential failure in trying to design an XML linking approach that happens to also be HyTime conforming. 
It would certainly be possible for XML to use the agglink form and then define an XML-specific way to associate anchor roles with members of the aggregate, but that would be a hack--it would be better to fix the design at its core (which has been David's point all along, of course). 
This will take some careful thought, but there might be a way to make it work. 
I should point out that I think the new hylink syntax, where each role has its own addressing attribute is much easier to use and explain than the old ilink syntax, where you had to explain (and validate) the positional correspondence between anchor roles and anchor addresses (complicated by the fact that indirect addressing could obscure what was being addressed--you didn't just count IDs in the linkends attribute value). 
The feature David wants would require the ilink-style addressing syntax with a single attribute for all the link ends--a syntax that in my experience of teaching HyTime is a difficult one for people to use. 
Let me also ask this: do we agree that when we *don't care* about anchor roles, that an aggegate link is sufficient? 
Cheers, E. W. Eliot Kimber (eliot@isogen.com) 
Senior SGML Consulting Engineer, Highland Consulting 2200 North Lamar Street, Suite 230, Dallas, Texas 75202 "Rats in the morning, rats in the afternoon...if they don't go away, I'll be re-educated soon..." --Austin Lounge Lizards, "1984 Blues" 
Great! 
I agree that it is a much more fortunate and natural syntax for fixed anchor roles. 
Sure, in fact, I think we could easily make agglink work for both cases: Add back and anchrole attribute to agglink, and require that it contain at least one role. 
Add a rule stating that if the agglink has more anchors than anchor roles, then the last role applies to all the anchors whose locations are expressed last. 
You can think of this as an "anchor model" where the last anchor role has an implicit * on it. 
Of course it would be nice if there were a way to to integrate this with the clink/ilink distinction. 
One way would be to say the any content of an agglink is an anchor like a clink's but if the content model is EMPTY, then it functions link an ilink. 
I don't know if this kind of case-switching is part of the HyTime meta-language, but it's not too complicated. 
-- David I am not a number. 
I am an undefined character. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ 
