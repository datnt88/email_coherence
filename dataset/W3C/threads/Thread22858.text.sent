As presently specified, DOM2 does not indicate how to obtain an instance of DocumentTraversal. 
It appears that this interface should be implemented by whatever class also implements DOMImplementation, and that you should be able to cast that to DocumentTraversal if the implementation reports that it supports DocumentTraversal. 
I think some clarification is needed, even if just to say that the way to get one is implementation dependant. 
Keith of In DOMs which support the Traversal feature, the DocumentTraversal interface will be implemented by Document objects. 
This is shown in the examples: NodeIterator iter=((DocumentTraversal)document).creatNodeIterator(node, 
NodeFilter.SHOW_ELEMENT, myFilter); ... but you're right, it doesn't seem to be stated explicitly. 
Oops! 
I'll fix. 
Joe Kesselman / IBM Research Really?!! That's disgusting -- it forces the use of a cast. 
OK, so it's no worse than anything em else /em in the DOM, which simply strong cannot be used safely /strong without run-time type checking. 
That doesn't make it right. 
I guess I'm just too much of a language purist for this business -- I've always been of the opinion that if you're forced to resort to a cast in order to do something, you've found a serious design flaw in the API. 
A better alternative would be a getDocumentTraversal method on Document or, better, DOMImplementation: it would of course return null if the Traversal feature was unimplemented. 
Stephen R. Savitzky steve@rsv.ricoh.com 
http://rsv.ricoh.com/~steve/ 
Platform for Information Applications: http://RiSource.org/PIA/ 
Chief Software Scientist, Ricoh Silicon Valley, Inc. Calif. 
Research Center home: steve@theStarport.org 
URL: http://theStarport.org/people/steve/ 
Same solution as in factories for the other optional Level 2 modules. 
Hanging it off a factory method/getter elsewhere in the DOM would be no cheaper. 
You only have to cast once per document, of course, if you cache the DocumentTraversal view. 
or, I believe we did look at that alternative. 
I'm not sure I remember exactly why it was rejected. 
Joe Kesselman / IBM Research You might want to re-think this. 
AT present, both Document and DOMImplementation serve as factories for various things. 
You are saying that you would use Document to create TreeWalkers and NodeIterators, but as currently specified you use DOMImplementation to create DocumentType and Document objects, a bit inconsistent. 
No, that's actually pretty consistant. 
Most of the DOM's objects are required to be aware of which Document they belong to. 
As a result, they would need to be either created by the Document, or the Document would have to be passed into their factory. 
We chose the former, which I think is a better idiom. 
But that isn't true of Document itself -- a Document has its own context, and we didn't want to require that you have a Document before you could create a Document. 
Since a Document's context is mostly defined by the DOMImplementation, we put the factory there. 
We could have put it on DocumentType, but DocumentType is optional. 
Our current design assumes that the DocumentType may help direct the instantiation of the Document; therefore we have to be able to create it before the Document is created, and we put the factory on DOMImplementation. 
However, DocumentType does get bound to a specific Document when the Document's factory is called, and some have said they want to be able to instantiate and bind the DocumentType after the Document; we'll look at this in more detail in Level 3. 
I'm not sure if traversal should be an exception or not. 
As noted above, we were guessing that DOMs might want to use their DocumentType to direct subclassing of the document tree, in order to add behaviors specific to that kind of document. 
In Theory, that might also want to affect which implementation of the traversal engines you use -- a TreeWalker or NodeIterator which is aware of the structure of a valid document may be able to optimize some kinds of navigation. 
("This portion of the grammar will never contain a Text node, so don't bother looking for one", or "This kind of document uses a different back-end storage model, which has helper functions for the next-matching-node lookup"). 
If we move the factory up to DOMImplementation, it's a bit harder to take advantage of those opportunities -- I suspect that you'd wind up having to pass the Document or DocumentType into the factory as a parameter, which is roughly equivalent to moving the factory back down to those objects. 
The other issue is that because Node.getOwnerDocument() is specified to return null, not "this", in the case of a DOCUMENT_NODE, you cannot use the following code: node.getOwnerDocument().createTreeWalker(), DOM Level 1 behavior, debated at that time. 
Given that there may be existing code which depends on it, I think it's a bit late for a change. 
A simple conditional will handle this case, but I agree it isn't pretty. 
Joe Kesselman / IBM Research You might want to re-think this. 
AT present, both Document and DOMImplementation serve as factories for various things. 
You are saying that you would use Document to create TreeWalkers and NodeIterators, but as currently specified you use DOMImplementation to create DocumentType and Document objects, a bit inconsistent. 
Except for DocumentType objects. 
Something has to be a factory-for-the-factory, so having a special case to bootsrap a Document doesn't seem odd to me. 
And anyway, DocumentType as factory for Document would be wrong since the contained object can't create its container. 
- Dave Maybe another abstraction is in order. 
How about introducing a 'DocumentSchema' interface that represents a specific class of documents. 
The DocumentSchema interface could be implemented with either an external DTD or by a Schema. 
The DocumentType interface would refer to the DocumentSchema. 
So I'd ask the implementation to create a schema, ask a schema to create a document that complies with that schema, tell the document to create its document type, which references the schema that was used to create the document. 
I think this would eliminate the chicken and egg problem. 
First: The DocumentTraversal methods appears to be an extension of the Node Interface, rather than an additional interface that may be supported by the Document. 
You should be able to create a TreeWalker or NodeIterator that works with any conforming DOM 2 implementation using only the Node, flags and filter. 
Since the TreeWalker or NodeIterator is rooted at a specific node, this would seem to imply that the factory method might be most appropriately placed on Node, so that the root of the walker or iterator thus created is simply the node that it was created from. 
If the implementation needs the owner document to create the node from, then it can obtain that information from the node. 
This puts the onus of getting the owner document on the implementation if necessary, instead of the application using the DOM API, where it shouldn't be necessary. 
Secondly, the expandEntityReferences flag on the factory method should really just be another constant that can be passed into whatToShow: SHOW_ENTITY_REFERENCE_EXPANSION or SHOW_ENTITY_REFERENCE_CHILDREN. 
This change doesn't remove any functionality from the API, and it does eliminate a parameter from one of the methods. 
Keith Node the Interesting thought. 
We designed these to live on the Document with the other factory methods, and to be passed their root node as an argument... but we _could_ have instead designed them so the factory was invoked on the root node itself, and had that association be implicit. 
I agree that the latter is prettier architecturally. 
But consider the recent comment "You mean I have to cast to get access to the DocumentTraversal methods? 
Yuck!" -- If these live on the Document object, you may be able to cast once and hang onto the DocumentTraversal through repeated operations on that document. 
If they live on individual Nodes you'd have to cast each root node, probably every time unless you're repeatedly iterating over a single subtree. 
Unless the factory continues to take the root node as a parameter... in which case I'm not sure the difference between this proposal and status quo is large enough to make much difference. 
I don't have a hugely strong opinion on this either way. 
It could be another bit in that mask, true. 
I'm not sure this is a net gain, though; it's conflating two seperate operations. 
Given that the factory call is a relatively rare operation compared to actually using the traversal objects, I'm not convinced that saving a parameter really gains us anything. 
Especially as bits are a scarce resource; I don't expect us to need more than 31 nodeTypes, and there's the workaround of moving the nodeType test into a filter, but I'd rather not establish a precedent of nibbling from both ends toward the middle. 
And thinking about how I'd implement it, the first thing I'd be inclined to do inside the factory would be to break SHOW_ENTITY_REFERENCE_EXPANSION out into a separate boolean so it could be tested conveniently, and clear that bit in the mask so I didn't have to special-case it when deciding how to handle the rest. 
So saving a parameter might increase computation. 
I think this winds up being a matter of style as much as anything else. 
My instincts say to leave it as is. 
Your milage may vary. 
Joe Kesselman / IBM Research What sort of schema? 
RELAX, RDF, SOX1, SOX2, MS-Schema, W3C-Schema, ... ? 
In any case, support for all of those would be a post-L2 issue, since many of them aren't even stable yet. 
Nope, see my original posting on the chicken/egg problem and you'll see why anything short of having the Document be the factory for its DocumentType is not practical: There's a direct translation to schemas, too -- except that it's likely worse. 
Anyone reading a document isn't going to know the schema to use until it's partly parsed, just like they're not going to know the DocumentType to use until "late" either. 
With DTDs you only need to read through the root element start tag. 
With schemas, depending on how they're associated with the document, you may need to read much more deeply into the document text before you can start to create the DOM Document object. 
For example, if a schema were wholly embedded in the document, you'd have major trouble. 
- Dave Schemas/DTDs are a pending issue, to be addressed in DOM Level 3. And yes, we do expect to reconsider the chicken-and-egg problem at that time. 
The relationship between these content models and the DocType is still to be determined. 
Joe Kesselman / IBM Research As you said, your mileage may vary. 
Mine still does, so perhaps I can make more convincing arguments: From: www-dom-request@w3.org 
[mailto:www-dom-request@w3.org]On 
Behalf Of keshlam@us.ibm.com 
Sent: Monday, March 06, 2000 1:08 PM Subject: Re: DocumentTraversal time proposal One way to avoid this would be to just put the two factory operations on Node, removing the factory altogether. 
Then take the approach that a Node supporting (c.f. "supports()") the traversal API would return a non-null TreeWalker/Iterator from the createTreeWalker/createIterator methods, whereas one that doesn't support it simply returns null. 
This eliminates the need for the cast (and the separate Factory) completely. 
OK, so now you have to check the result everytime you call createTreeWalker ..., perhaps not as nice as a factory which always returns a TreeWalker or Iterator. 
Yup, it breaks existing implementations, but you've already required existing implementations to modify node anyway. 
Those that don't care to support the new methods can add a few lines of code and they are done. 
Finally, I would hope that the largest users of the API would be developers, not implementors. 
That would mean to me that making it easier for developers should take priority. 
Making it easier to access these from Node does make it easier for developers. 
NOTE: I cannot make the same argument for Range, as that really should be available from Document. 
Although if you do decide to put the factory methods in Document, you should take the same approach with the RangeFactory methods in a Document. 
to to out The spec says that "whatToShow" specifies which node types may appear in the logical view of the tree presented by the iterator. 
As far as I'm concerned, that is the operation being referenced, so I don't consider the two operations to be 'conflated'. 
Sure, you've made it easy to implement it as: if ((whatToShow &amp; ( 1   node.getNodeType()) 
!= 0) show(node); if (expandEntityReferences &amp;&amp; node.getNodeType() == Node.ENTITY_REFERENCE) showChildren(node); But that's syntactic sugar unless you make the above implementation part of the specification. 
[i.e., indicate that the flags will always be specified that way]. 
BTW: The easy implementation shown above wouldn't pass muster in our organization. 
It's a cute trick, but it isn't obvious what the code does, and it relies on some details that could change in a subsequent release. 
Furthermore, if you want the same "simplicity" you can handle it just as easily using a static array, which is independant of where you put the actual flag values. 
if ((whatToShow &amp; showMasks[node.getNodeType()]) 
!= 0) show(node); if ((whatToShow &amp;&amp; expandMasks[node.getNodeType()]) 
!= 0) showChildren(node); The second implementation seems preferable, especially when you consider that TreeWalker and NodeIterator may be used to walk/iterate over DocumentTypes in DOM3, in which case you might have more flags like expandEntityReference. 
If you are going to stick with the two separate arguments, could you at least make the second one another mask, and define a constant for entity references. 
That way it is extensible enough so that if DOM3 wants to, it can expand into the field. 
Keith I don't think that everybody would like to see the methods to get a range or a css (or whatever module you choose) object on the Node interface, right ? 
So adding the factory operations of the Traversal on the Node interface is not a good idea. 
Philippe. 
