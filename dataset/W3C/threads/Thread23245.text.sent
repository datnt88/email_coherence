ISSUE: clientX and clientY coordinates in DOM MouseEvents This following issue has been reported by Alex Fritze. 
I think this is a real problem so I reported this issue as an official one to the SVG WG and the DOM WG. 
The DOM Level 2 specification defines two attributes clientX and clientY for MouseEvents. 
According to the DOM Level 2 specification, those coordinates are relative to the DOM Implementation's client area. 
The SVG specification has changed this definition and the clientX and clientY attributes represents viewport coordinates for the coresponding svg element. 
In a multiple namespaces environment (such as mixing xhtml and svg for example), there is a conflict with the two definitions above. 
ex: In that example, according to the DOM spec, clientX and clientY should be relative to DOM Implementation's client area (i.e. the user agent area used to display the whole DOM tree). 
According to the SVG spec, if a mouse event occured on B or C, clientX and clientY should be relative to the viewport ([0, 0] [10000, 10000]) and this is not what the DOM spec says. 
The DOM specification clearly says that whatever the EventTarget is, clientX and clientY must be relative to the user agent drawing area. 
Having the correct behavior for both SVG and DOM is only possible in a plugin environment (two separate DOM tree - two different user agent). 
RECOMMENDATION: [A] Ask the DOM WG to errate the DOM Level 2 Events module and change the DOM Level 3 Events module saying something like: clientX - The horizontal coordinate at which the event occured relative to coordinate system of the EventTarget. 
clientY - The horizontal coordinate at which the event occured relative to coordinate system of the EventTarget. 
Advantage: that will not break any existing SVG content and should work with all existing XML applications that have only one coordinate system: the user agent area's one. 
Note: Some extra work will be necessary if both informations are needed (mouse coordinates in the EventTarget's coordinate system and in the user agent's area coordinate system) and I believe that both are usefull. 
[B] Add an errata to the SVG1.0 spec explaining that clientX and clientY have the same behavior than in the DOM specification (and that will break existing SVG content using clientX and clientY - that's to say, most of the dynamic SVG content using scripting). 
Ask the DOM WG to add two new coordinates 'viewportX' and 'viewportY' to the MouseEvent interface in the DOM Level 3 Events module. 
SVG1.1 will have to rely on that module. 
- viewportX The horizontal coordinate at which the event occured relative to coordinate system of the EventTarget. 
- viewportY The vertical coordinate at which the event occured relative to coordinate system of the EventTarget. 
Any comments? 
Thierry. 
Could you provide a specific reference for that "change". 
I don't recall and couldn't find anything in the SVG 1.0 recommendation (and haven't checked in the 1.1 drafts). 
The SVG 1.0 drafts seem to link directly to the DOM 2 Events specs for the definitions of MouseEvent. 
From my experience with SVG (specifically the Adobe SVG Viewer), I had to jump through hoops to get the coordinates from user agent coordinates back into the coordinate space of the svg element. 
If it is not there already, a better option that A or B is adding a method to SVGElement that can take a user agent coordinate and return an SVGPoint in that coordinate space. 
function onmouseover(e) var pointhere = e.target.ConvertClient(e.clientX,e.clientY); 
That's a possible solution. 
We still have the issue that both SVG and DOM are a Rec where clientX and clientY have a different meaning. 
Thierry. 
Sorry, when you had mentioned "viewport" coordinates, I had interpreted that as the user coordinate system established by the viewBox attribute on the svg element. 
For others that may be as confused as I was, the following SVG document will display the values from clientX and clientY that will NOT be in coordinate space established by the viewBox (that is between [1000,1000] and [2000,2000]). 
The coordinates from the MouseEvent have to be transformed back into the user coordinate space by nasty, error prone script code before you have coordinates that you could do anything with. 
var textNode = document.getElementsByTagName("text").item(0).firstChild; 
function mousemove(evt) { textNode.nodeValue 
= "clientX=" + evt.clientX.toString() 
+ " clientY=" + evt.clientY.toString(); 
rect x="1000" y="1000" height="1000" width="1000" fill="beige" onmousemove="mousemove(evt)"/ text y="1500" x="1100" fill="red" font-size="100" No event yet /text The only situation that I could see the note in Appendix B5 having any observable affect in the still hypothetical (or at least experimental) case of XHTML documents containing svg elements. 
Without a standard method to convert clientX and clientY into user coordinates, the sentence could be useful since it would make it tractable to convert client coordinates since you could find the outermost containing svg element, find its width, height, viewBox and refine all those down to coordinates that you could use to modify coordinates or add new elements. 
However, if you dropped the sentence in B5 and added a convertClientXY() method to SVGElement (or something equivalent), you would not adversely affect deployed SVG documents, would get consistent clientX and clientY values as a user moused over intermixed XHTML and SVG content and SVG authors would have a simple way of converting client coordinates into user coordinates without jumping through hoops. 
For what it's worth, I seem to remember that the question of what coordinates actually meant was one of the work items for the Views module, which was dropped from DOM Level 3 due to lack of W3C members willing to commit resources to developing it or commit to implementing it when published. 
Are we sure that we can nail this down without reopening those issues? 
Joe Kesselman / IBM Research Though this thread was started with a cross-posted to www-dom and suggested changes to the events recommendation, I do not believe this is generic DOM issue. 
