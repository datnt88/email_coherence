A question has come up, is it legal for a server to send a multipart/byteranges with a single range? 
This apparently causes some very ugly code on the client side if it is legal. 
The following is an excerpt from section 19.2 of RFC 2068: 19.2 Internet Media Type multipart/byteranges When an HTTP message includes the content of multiple ranges (for example, a response to a request for multiple non-overlapping ranges), these are transmitted as a multipart MIME message. 
The multipart media type for this purpose is called "multipart/byteranges". 
My reading of this section is that a multipart/byteranges can only be sent if there are byte rangeS but there has still been some question. 
1) Is it correct that multipart/byteranges can only be used if there are multiple, as in more than one, byteranges? 
2) Either way, can we put in a sentence to clarify the matter? 
Thanks, Yaron 
A question has come up, is it legal for a server to send a multipart/byteranges with a single range? 
This apparently causes some very ugly code on the client side if it is legal. 
The following is an excerpt from section 19.2 of RFC 2068: 19.2 Internet Media Type multipart/byteranges When an HTTP message includes the content of multiple ranges (for example, a response to a request for multiple non-overlapping ranges), these are transmitted as a multipart MIME message. 
The multipart media type for this purpose is called "multipart/byteranges". 
My reading of this section is that a multipart/byteranges can only be sent if there are byte rangeS but there has still been some question. 
1) Is it correct that multipart/byteranges can only be used if there are multiple, as in more than one, byteranges? 
2) Either way, can we put in a sentence to clarify the matter? 
I believe that I wrote this section, and it certainly never occurred 
to me that handling a "multipart/byteranges" with only one part would 
cause implementation difficulties. 
After all, if the client is prepared to deal with N parts in a multipart type, what makes N = 1 harder than, say, N = 2 or N = 13? 
Can you perhaps explain a bit more about why this makes the client code so ugly? 
I'm not strongly opposed to changing the HTTP spec to prohibit 1-part "multipart/byteranges" values, but I think doing so would add complexity to the spec, and isn't really consistent with the robustness principle. 
Also, I'm certainly not a MIME expert, and I don't know if MIME has a rule that either explicitly requires or prohibits N = 1 in multipart types. 
Have other client implementors found this hard? 
easy? 
didn't realize until now that it might be a real problem? 
-Jeff 
In this case, I think the client determines if it will EVER ask for more than 1 range in a single request, doesn't it? 
As I recall, multipart is more complex to handle than singlepart (which 
would simply be the content?) so I expect that a client could decide 
to never request  1 range and hence not need to support multipart at all (that would likely be my first choice for the kinds of simple clients I've written.) From what I've read of the motivation for byte ranges, I would expect the majority of usage to be a single range per request. 
Pipelining etc. makes breaking multiple ranges into multiple requests fairly minimal from a performance perspective. 
So assuming my memory is correct and historical byte ranges allow multipart to be avoided for a single range, I would favor restricting the use of multipart to N  1. 
Keep simple requests simple. 
Yaron will have to comment on whether his case matches mine, if not there are two reasons... Dave Morris 
David has absolutely hit the nail on the head. 
We don't handle multipart/byteranges. 
We NEVER ask for more than one range. 
Having to put in a parser for multipart/byteranges into the level of the stack which handles generic HTTP (in our case that would be WinInet) would be extremely difficult. 
That level in the stack doesn't do the sort of heavyweight parsing needed for multipart. 
It is really designed for quick and dirty parsing on the level of "Identify headers and body, return." 
Given that others are in the same situation it would seem reasonable to put in language requiring that multipart/byteranges not be used if a single range is being returned. 
Yaron 
From:David W. Morris [SMTP:dwm@xpasc.com] 
Sent:Monday, August 04, 1997 11:36 AM Dujari; http-wg%cuckoo.hpl.hp.com@hplb.hpl.hp.com Subject:Re: multipart/byteranges 
We don't handle multipart/byteranges. 
We NEVER ask for more than one range. 
Having to put in a parser for multipart/byteranges into the level of the stack which handles generic HTTP (in our case that would be WinInet) would be extremely difficult. 
That level in the stack doesn't do the sort of heavyweight parsing needed for multipart. 
It is really designed for quick and dirty parsing on the level of "Identify headers and body, return." 
Aha, I misunderstood your question. 
Certainly if a client only makes requests for single contiguous ranges, it shouldn't have to be able to parse multipart/byteranges responses. 
I misunderstood your question because I thought you were talking about a case where the server might coaelesce two requested (and overlapping) ranges into a one-part "multipart" response. 
Given that others are in the same situation it would seem reasonable to put in language requiring that multipart/byteranges not be used if a single range is being returned. 
The language is already there, although in a different part of the spec (quoting from RFC2068, not draft -08, which I don't have handy): 4.4 Message Length: When a message-body is included with a message, the length of that body is determined by one of the following (in order of precedence): 4. If the message uses the media type "multipart/byteranges", which is self-delimiting, then that defines the length. 
This media type MUST NOT be used unless the sender knows that the recipient can parse it; the presence in a request of a Range header with multiple byte-range specifiers implies that the client can parse multipart/byteranges responses. 
One could argue that this "MUST" ought to be more obvious (although I found it quickly using a text-search on "multipart/byteranges"). 
But I think this is exactly what you want, right? 
I.e., what matters to you is NOT that a multipart/byteranges have more than one subrange (since one could, in principle, break up a single range into multiple contiguous subranges), but that the server never send any multipart/byteranges responses to a client that isn't prepared to parse them. 
Right? 
-Jeff 
I would just say "YES" but I'm not sure anyone would know what I'm saying yes to. 
=) 
However Jeff, you understand the situation completely. 
All I am asking for is a clearer statement of the painfully obvious. 
Thanks, Yaron 
I will just say yes to second Yaron's affirmation of Jeff's response. 
Dave Morris 
