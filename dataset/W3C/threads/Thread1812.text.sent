Hi, section 6.2.1 says: "The DAV:workspace property of a workspace resource MUST identify itself. 
The DAV:workspace property of any other type of resource MUST be the same as the DAV:workspace of its parent collection." 
It seems to be undefined however what the value is if a resource doesn't *have* a (DAV-compliant) parent collection, for instance the root of my DAV namespace. 
So what should it be? 
a) not present b) empty (no href) Julian (leaning to b) Hi, section 7.1 defines the UPDATE semantics checked-in resources: "The UPDATE method modifies the content and dead properties of a checked-in version-controlled resource (the "update target") to be those of a specified version (the "update source") from the version history of that version-controlled resource." 
So is the behaviour for checked-out resources just undefined (intentionally)? 
I would have expected that DAV:must-be-checked-in is an explicit precondition for this method... Julian From: Julian Reschke [mailto:julian.reschke@greenbytes.de] section 7.1 defines the UPDATE semantics checked-in resources: "The UPDATE method modifies the content and dead properties of a checked-in version-controlled resource (the "update target") to be those of a specified version (the "update source") from the version history of that version-controlled resource." 
So is the behaviour for checked-out resources just undefined (intentionally)? 
I would have expected that DAV:must-be-checked-in is an explicit precondition for this method... 
I agree that adding the DAV:must-be-checked-in precondition is the better answer. 
I'll add this to the Errata, and resolve it by adding that precondition, unless someone objects. 
Cheers, Geoff While we're at this topic: we have a similar issue with auto-update of version controlled collections. 
- checkout a versioned collection with apply-to-version - remove a member from the working collection - checkout in-place the member of the versioned controlled collection - checkin the working collection - the version controlled collection should be updated an remove the binding to the checked-out resource. 
I think the checkin should fail in this case, as the removal of a checked-out member might cannot be permitted. 
Do you agree? 
//Stefan Am Donnerstag, 26.09.02, um 20:33 Uhr (Europe/Berlin) schrieb Clemm, Geoff: I agree with your conclusion, but I believe this follows from the DAV:no-overwrite-by-auto-update precondition for CHECKIN, i.e.: If the DAV:auto-update property for the checked-out resource identifies a version-controlled resource, at least one of the versions identified by the DAV:predecessor-set property of the checked-out resource MUST identify a version that is either the same as or a descendant of the version identified by the DAV:checked-in property of that version-controlled resource. 
If the VCR is checked-out, there is no DAV:checked-in version, which means this precondition would not be satisfied. 
Cheers, Geoff While we're at this topic: we have a similar issue with auto-update of version controlled collections. 
- checkout a versioned collection with apply-to-version - remove a member from the working collection - checkout in-place the member of the versioned controlled collection - checkin the working collection - the version controlled collection should be updated an remove the binding to the checked-out resource. 
I think the checkin should fail in this case, as the removal of a checked-out member might cannot be permitted. 
Do you agree? 
RE: UPDATE semantics for checked-out resourcesThis is true, but it does not apply to the more general case of an UPDATE of a version.controlled 
collection containing a checked-out resource which is not identified by the DAV:version-controlled-binding-set of the update source. 
Cheers, Manfred -----Urspr?ngliche 
Nachricht----- Von: ietf-dav-versioning-request@w3.org [mailto:ietf-dav-versioning-request@w3.org]Im 
Auftrag von Clemm, Geoff T Gesendet: Freitag, 27. 
September 2002 14:00 An: ietf-dav-versioning@w3.org Betreff: RE: UPDATE semantics for checked-out resources I agree with your conclusion, but I believe this follows from the DAV:no-overwrite-by-auto-update precondition for CHECKIN, i.e.: If the DAV:auto-update property for the checked-out resource identifies a version-controlled resource, at least one of the versions identified by the DAV:predecessor-set property of the checked-out resource MUST identify a version that is either the same as or a descendant of the version identified by the DAV:checked-in property of that version-controlled resource. 
If the VCR is checked-out, there is no DAV:checked-in version, which means this precondition would not be satisfied. 
Cheers, Geoff While we're at this topic: we have a similar issue with auto-update of version controlled collections. 
- checkout a versioned collection with apply-to-version - remove a member from the working collection - checkout in-place the member of the versioned controlled collection - checkin the working collection - the version controlled collection should be updated an remove the binding to the checked-out resource. 
I think the checkin should fail in this case, as the removal of a checked-out member might cannot be permitted. 
Do you agree? 
checkout of a member of the collection, not a checkout of the collection). 
This is just one way in which you can delete a checked-out VCR, and currently, deleting a checked-out VCR is allowed by the protocol. 
Stefan: Were you suggesting that it be disallowed just in this case, or disallowed in general (e.g. add it as a precondition to the DELETE method). 
For now, I'll just add this to the Errata document as an open issue, since disallowing deletion of a checked-out VCR would be a change to the protocol semantics. 
So, to get some initial feedback, who thinks we should disallow the deletion of a checked-out VCR? 
Cheers, Geoff -----Original Message----- This is true, but it does not apply to the more general case of an UPDATE of a version.controlled 
collection containing a checked-out resource which is not identified by the DAV:version-controlled-binding-set of the update source. 
Cheers, Manfred -----Urspr?ngliche 
Nachricht----- Von: ietf-dav-versioning-request@w3.org [mailto:ietf-dav-versioning-request@w3.org]Im 
Auftrag von Clemm, Geoff T Gesendet: Freitag, 27. 
September 2002 14:00 An: ietf-dav-versioning@w3.org Betreff: RE: UPDATE semantics for checked-out resources I agree with your conclusion, but I believe this follows from the DAV:no-overwrite-by-auto-update precondition for CHECKIN, i.e.: If the DAV:auto-update property for the checked-out resource identifies a version-controlled resource, at least one of the versions identified by the DAV:predecessor-set property of the checked-out resource MUST identify a version that is either the same as or a descendant of the version identified by the DAV:checked-in property of that version-controlled resource. 
If the VCR is checked-out, there is no DAV:checked-in version, which means this precondition would not be satisfied. 
Cheers, Geoff -----Original Message----- While we're at this topic: we have a similar issue with auto-update of version controlled collections. 
- checkout a versioned collection with apply-to-version - remove a member from the working collection - checkout in-place the member of the versioned controlled collection - checkin the working collection - the version controlled collection should be updated an remove the binding to the checked-out resource. 
I think the checkin should fail in this case, as the removal of a checked-out member might cannot be permitted. 
Do you agree? 
Am Freitag, 27.09.02, 
um 16:13 Uhr (Europe/Berlin) schrieb Clemm, Geoff: I see where this is going... 
I think DELETE on a checked-out VCR must be ok. 
However if I UPDATE a collection and someone else checked out the contained VCR and that VCR is silently deleted, all his/her changes are lost. 
Which can happen anyway, unless she/he locks the VCR. 
Therefore I change my mind and from now on to forver say that explicit and implicit DELETE on checked-out resources are "OK". 
//Stefan OK, unless anyone wants to suggest otherwise, I'll just consider the issue closed, and not bother adding it to the Errata. 
Cheers, Geoff (For some reason, I'm getting my posts back as HTML, which is really strange since I send them out in plain text ...) Am Freitag, 27.09.02, 
um 16:13 Uhr (Europe/Berlin) schrieb Clemm, Geoff: I see where this is going... 
I think DELETE on a checked-out VCR must be ok. 
However if I UPDATE a collection and someone else checked out the contained VCR and that VCR is silently deleted, all his/her changes are lost. 
Which can happen anyway, unless she/he locks the VCR. 
Therefore I change my mind and from now on to forver say that explicit and implicit DELETE on checked-out resources are "OK". 
//Stefan Proposed resolution: 1) Deprecate marshalling through OPTIONS. 
2) Add three new live properties: (Version histories) 5.2 Additional Resource Properties The version-history feature introduces the following REQUIRED property for resources that reside in a part of a server's namespace that supports version histories. 
5.1.1 
DAV:version-history-collection-set (protected) The DAV:version-history-collection-set property identifies collections that may contain version histories. 
An identified collection MAY be the root collection of a tree of collections, all of which may contain version histories. 
Since different servers can control different parts of the URL namespace, different resources on the same host MAY have different DAV:version-history-collection-set values. 
The identified collections MAY be located on different hosts from the resource. 
(Workspaces) 6.2.1 DAV:workspace-collection-set (protected) The DAV:workspace-collection-set property identifies collections that may contain workspaces. 
An identified collection MAY be the root collection of a tree of collections, all of which may contain workspaces. 
Since different servers can control different parts of the URL namespace, different resources on the same host MAY have different DAV:workspace-collection-set values. 
The identified collections MAY be located on different hosts from the resource. 
(Activities) 13.4 Additional Resource Properties The activity feature introduces the following REQUIRED property for resources that reside in a part of the server's namespace supporting activities. 
13.4.1 
DAV:activity-collection-set (protected) The DAV:activity-collection-set property identifies collections that may contain activities. 
An identified collection MAY be the root collection of a tree of collections, all of which may contain activities. 
Since different servers can control different parts of the URL namespace, different resources on the same host MAY have different DAV:activity-collection-set values. 
The identified collections MAY be located on different hosts from the resource. 
I agree with the proposed resolution. 
Unless someone disagrees, I will add this to the Errata sheet, and mark the issue as closed. 
Cheers, Geoff Proposed resolution: 1) Deprecate marshalling through OPTIONS. 
2) Add three new live properties: (Version histories) 5.2 Additional Resource Properties The version-history feature introduces the following REQUIRED property for resources that reside in a part of a server's namespace that supports version histories. 
5.1.1 
DAV:version-history-collection-set (protected) The DAV:version-history-collection-set property identifies collections that may contain version histories. 
An identified collection MAY be the root collection of a tree of collections, all of which may contain version histories. 
Since different servers can control different parts of the URL namespace, different resources on the same host MAY have different DAV:version-history-collection-set values. 
The identified collections MAY be located on different hosts from the resource. 
(Workspaces) 6.2.1 DAV:workspace-collection-set (protected) The DAV:workspace-collection-set property identifies collections that may contain workspaces. 
An identified collection MAY be the root collection of a tree of collections, all of which may contain workspaces. 
Since different servers can control different parts of the URL namespace, different resources on the same host MAY have different DAV:workspace-collection-set values. 
The identified collections MAY be located on different hosts from the resource. 
(Activities) 13.4 Additional Resource Properties The activity feature introduces the following REQUIRED property for resources that reside in a part of the server's namespace supporting activities. 
13.4.1 
DAV:activity-collection-set (protected) The DAV:activity-collection-set property identifies collections that may contain activities. 
An identified collection MAY be the root collection of a tree of collections, all of which may contain activities. 
Since different servers can control different parts of the URL namespace, different resources on the same host MAY have different DAV:activity-collection-set values. 
The identified collections MAY be located on different hosts from the resource. 
