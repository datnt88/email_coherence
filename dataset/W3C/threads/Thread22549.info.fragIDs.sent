interface NodeList Node item(in unsigned long index); readonly attribute unsigned long length; NodeLists are said to be live such that additions/deletions of children will be reflected in the NodeList I retrieved prior to the addition/deletion... 
Without copying the children to a private object instance, or locking children nodes; how do I know that the length is valid when I attempt to iterate over the list? 
I don't see problems for a single client environment, but for connectionless multi-client internet applications; seems a bit sticky. 
Comments? 
Thanks. 
Don Hamson 
Question 1: What does the following code fragment do? 1 NodeList nl = aDocument.getElementsByTagName("p"); 
2 int numberOfParagraphs = nl.getLength(); 3 for (int i = 0; i  numberOfParagraphs; i++) { 4Node n = nl.item(i); 5n.getParentNode().removeChild(n); 6 } Answer: It deletes all of the odd-numbered paragraphs in aDocument, and finally throws a null pointer exception (NOT a DOMException, since item throws no exceptions) on line 5 when i  numberOfParagraphs/2. Of course, in a language like C++ on an OS like Windows, it simply crashes. 
Notes: Caching the length of a NodeList in this way is the only reasonable thing to do in most cases, because computing it is so expensive. 
The _correct_ way of deleting all the paragraphs in a document is, of course, to replace line 3 with: 3' for (int i = numberOfParagraphs - 1; i  = 0; i--) { but I suspect that this might not be obvious to the ``naive'' script- writer. 
Question 2: Is this really what you mean by catering to the needs of naive programmers? 
Stephen R. Savitzky Chief Software Scientist, Ricoh Silicon Valley, Inc., steve@rsv.ricoh.com 
California Research Center home: steve@starport.com 
URL: http://www.starport.com/people/steve/ 
I've drawn up an essay summarizing the recent discussion and sent it to Lauren, which is apparently the proper procedure for submitting contributions to the FAQ -- she runs them past the WG for sanity-checking before adding them to the document. 
Actually, this one's large enough that it may go into the tutorial (there's a tutorial?) instead. 
There's part of a tutorial (more a non-normative guide, actually), that we have to finish before putting it up. 
Arnaud also suggested that this could go into the clarification/errata document. 
I agree, it needs to go somewhere. 
Lauren 
Unfortunately code like this might well perform *very* badly for some implementations. 
Unfortunately, _any_ deletion is going to have severe performance impacts on some implementations of NodeList. 
Only the cleverest implementations are going to even attempt to keep track of precisely which subtrees have changed and minimize recalculation... and the work involved in tracking that is going to impact performance and/or memory requirements elsewhere in the implementation. 
I've drawn up an essay summarizing the recent discussion and sent it to Lauren, which is apparently the proper procedure for submitting contributions to the FAQ -- she runs them past the WG for sanity-checking before adding them to the document. 
Actually, this one's large enough that it may go into the tutorial (there's a tutorial?) instead. 
Joe Kesselman / IBM Research Unless stated otherwise, all opinions are solely those of the author. 
