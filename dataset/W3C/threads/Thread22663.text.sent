Although it seems to be past the October 8, 1999 last call date, here are several questions, little suggestions, and some larger issues (potentially important) with the 23 September 1999 version of the DOM Level 2 Specification. 
I believe some of them are important, and I apologize that they are not arranged in any particular order, or if they have been raised before. 
(I have not looked at the W3C list archives, and have not subscribed to this list. 
Perhaps someone can send me subscription information) * NamedNodeMap.item()'s comments says: Returns the code index /code th item in the map. 
If code index /code is greater than or equal to the number of nodes in the map, this returns code null /code . 
What about if index is less than zero? 
* The DocumentType has PublicID and SystemID, but Entity has PublicId and SystemId. 
The naming convention isn't consistent. 
* Suggestion: Add a public boolean containsNamedItem() to the NamedNodeMap interface. 
* How does one tell if an Entity is a general or parameter entity? 
* There seems to be a conflict between the nodeValue of an Attribute and its text children. 
Under Node, it says that the nodeValue contains the "value of the attribute," but setting Attribute.setValue apparently "creates a code Text /code node with the unparsed contents of the string." 
What happens, then, when an attribute has both a node value and text children? 
* The documentation for Node.importNode talks about the data and length "attributes" of nodes, as well as the publicID, systemID, and notationName "attributes." 
Perhaps "properties" is meant? 
(Note this type of reference is found throughout the DOM spec, but in a few cases it could be confusing when actual attributes are involved.) * The DOM CSS specification repeatedly mentions a DOMException of type INVALID_ACCESS_ERR, but the definition of this can't be found. 
It's not listed in DOMException. 
* Under CSSPrimitiveValue.get/setFloatValue(), CSS_PX is mentioned twice. 
* CSSValue has a set of unit types, and CSSPrimitiveValue has another set of unit types. 
The former is referred to as "valueType" and the latter as "primitiveType". 
This is fine, except the "valueType" of CSS_INHERIT seems in later discussion to get mixed in as a valid value of "primitiveType." 
The true value of "primitiveType" when a value is inherited is uncertain, since CSS_INHERIT is not listed as one of the possibilities. 
Perhaps a separate CSS_INHERIT should be defined for "primitiveType," and it should be listed as an accepted value under CSSPrimitiveValue.primitiveType. 
Also, how can "valueType" ever return CSS_INHERIT from this interface, if this interface is only returned when "valueType" is set to CSS_PRIMITIVE_TYPE? 
(This is where I miss the type-safe enum in C++ that aren't in Java, BTW, but that's a different issue.) * CSSStyleDeclaration.cssText does not have a description of parameter cssText in the documentation. 
* Under MediaList, SYNTAX_ERR is mistakenly listed as a DOMException and not as a CSSException, as it should be. 
* Why does CSSStyleDeclaration.item(), when there is no property at a particular index, return an empty string instead of null as other similar DOM functions do? 
Sincerely, Garret Wilson GlobalMentor, Inc. garret@globalmentor.com Good catch ! 
It's now listed in DOMException. 
Fixed. 
I'm not sure I understand your comment. 
CSSValue.CSS_INHERIT is not mixed with primitiveType and you can't cast the CSSValue instance to CSSPrimitiveValue. 
I checked the latest public version [1] and there is a description for the parameter cssText. 
Fixed. 
Two reasons: - getPropertyValue also returns an empty string. 
- Some existing implementations already return an empty string on item() and getPropertyValue() and it was not possible to change that. 
Thank you for your feedbacks, Philippe. 
[1] Philippe Le Hegaret - http://www.w3.org/People/LeHegaret/ World Wide Web Consortium (W3C), DOM Activity Lead Philippe and others, [cut] set of seems The since separate listed can interface that's with CSSPrimitiveValue. 
Since my ramblings above aren't exactly straightforward, let me take it step-by-step. 
Please let me know where my assumptions go wrong: 1) Inheritance: The interface CSSPrimitiveValue descends from CSSValue. 
1a) This means that every CSSPrimitiveValue has a "valueType" property which holds one of the constants of CSSValue. 
1b) According to the spec, when CSSValue.valueType==CSS_PRIMITIVE_VALUE, "The value is a CSSPrimitiveValue." 1c) I take this to mean that whenever I have the CSSValue interface with its "valueType" set to CSS_PRIMITIVE_VALUE, the interface is also a CSSPrimitiveValue (meaning I can cast the CSSValue to a CSSPrimitiveValue). 
Or conversely, CSSPrimitiveValue.valuteType will always equal CSS_PRIMITIVEVALUE. 
2) CSSPrimitiveValue defines a separate property, "primitiveType," which is distinct from CSSValue.valueType. 
3) CSSPrimitiveValue.setStringValue() accepts a stringType parameter. 
3a) According to the spec, stringType is "A string code as defined above. 
The string code can only be a string unit type (e.g. CSS_URI, CSS_IDENT, CSS_INHERIT and CSS_ATTR." 
3b) Three of those codes (CSS_URI, CSS_IDENT, and CSS_ATTR) are defined under CSSPrimitiveValue as valid types for CSSPrimitiveType.primitiveType. 
The other code (CSS_INHERIT) is defined under CSSValue as a valid type for CSSValue.valueType. 
3c) This seems to me to be mixing CSSValue.CSS_INHERIT with CSSPrimitiveType.primitiveType. 
Perhaps there's something I'm missing here... the So there is. 
I don't have a clue to what I was referring to here... :) Cheers, Garret Wilson GlobalMentor, Inc. garret@globalmentor.com Now that I have read the following XML document into memory. 
What DOM API can I use to parse out the content of the ProcessingInstruction and the DocumentType? 
thanks Document Title Name correct. 
incorrect. 
Every CSSPrimitiveValue has a "valueType" property and the value of this property can only be CSS_PRIMITIVE_VALUE. correct. 
We'll try to clarify this in the next version. 
You found an error in the specification. 
This statement is deprecated and should be removed. 
Philippe. 
above. 
Thanks for clearing that up, Phillipe. 
One other point about CSSPrimitiveValue.setStringValue(): 
The listed types do not include CSS_STRING. 
Perhaps the specification is not meaning to provide an exhaustive list here, but I'm assuming it is (CSSPrimitiveValue.setFloatValue() 
seems exhaustive at first glance). 
It might be clearer if A) "e.g." is changed to "i.e." in both places to indicate that the lists for CSSPrimitiveValue.setFloatValue() and CSSPrimitiveValue.setStringValue() are both exhaustive. 
B) CSS_STRING is added to the list of possible values for CSSPrimitiveValue.setStringValue(). 
Cheers, Garret Wilson GlobalMentor, Inc. garret@globalmentor.com What DOM API can I use to parse out the content of the ProcessingInstruction and the DocumentType? 
The example that you gave does not contain a processing instruction. 
It contains an XML declaration The XML spec explicitly says that this is not a PI, even though it uses PI-like syntax. 
The DOM hasn't yet officially decided whether to treat it as a pseudo-PI, as fields attached to the Document node, or in some other way. 
DOM Level 2 will add fields to DocumentType to hold the PUBLIC and SYSTEM IDs. 
However, it does not yet include any additional storage for the contents of the DTD. 
DOM Level 1's NamedNodeMaps for Entities and Notations will continue to be available in Level 2, but content model issues were deferred. 
If I remember correctly, both issues are expected to be addressed in DOM Level 3. Until then, you'll have to rely on the nonportable workarounds (if any) provided by your specific DOM and/or parser. 
Joe Kesselman / IBM Research 
