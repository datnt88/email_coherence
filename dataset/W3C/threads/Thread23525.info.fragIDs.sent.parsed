(S1 (S (NP (NP (NN Test) (NN documentadoptnode28)) (PRN (-LRB- -LRB-) (RB unintentionally) (. ?) (-RRB- -RRB-))) (VP (VBZ adopts) (NP (DT a) (NN node)) (PP (IN into) (NP (PRP$ its) (JJ current) (NN document)))) (. .)))
(S1 (S (S (S (VP (VBG Allowing) (NP (DT this) (NN case)))) (VP (VBZ seems) (ADJP (JJ undesirable)))) (, ,) (S (ADVP (IN at) (JJS best)) (NP (PRP it)) (VP (VBZ acts)))))
(S1 (NP (RB as) (JJ node.parentNode.removeChild) (PRN (-LRB- -LRB-) (NN node) (-RRB- -RRB-)) (, ,)))
(S1 (S (NP (JJ actual) (NN behavior)) (VP (MD could) (VP (AUX be) (NP (JJ much))))))
(S1 (X (JJR worse) (. .)))
(S1 (SQ (MD Would) (NP (PRP it)) (VP (AUX be) (ADJP (JJ possible)) (S (VP (TO to) (VP (VB state) (SBAR (IN that) (S (NP (NNP WRONG_DOCUMENT_ERR)) (VP (MD should) (VP (AUX be) (VP (VBN thrown) (PP (IN on) (NP (NN attempt))) (S (VP (TO to) (VP (VB adopt) (NP (DT a) (NN node)) (PP (IN into) (NP (DT the) (JJ same) (NN document))))))))))))))) (. ?)))
(S1 (S (NP (PRP I)) (VP (AUX 'm) (RB not) (ADJP (JJ convinced) (SBAR (IN that) (S (NP (DT this)) (VP (AUX is) (NP (DT a) (JJ Good) (NN Idea))))))) (. .)))
(S1 (S (NP (PRP It)) (VP (VP (VBZ turns) (NP (DT a) (JJ mostly-harmless) (NN operation)) (PP (IN into) (NP (DT an) (NN error) (NN condition)))) (, ,) (CC and) (VP (VBZ prevents) (NP (NN adoptNode)) (PP (IN from) (S (VP (AUXG being) (VP (VBN used) (PP (IN as) (NP (DT a) (JJ general) (NN safety) (NN net))) (ADVP (RB prior) (PP (TO to) (NP (NP (NN insertion)) (PP (IN of) (NP (NP (DT a) (NN node)) (VP (VBN obtained) (PP (IN from) (NP (DT an) (JJ untrusted) (NN source))))))))))))))) (. .)))
(S1 (S (S (S (VP (VBG Making) (S (VP (VBG adopting) (NP (DT a) (NN node)) (PP (IN into) (NP (PRP$ its) (JJ own) (NN document))))))) (VP (AUX be) (NP (NP (DT a) (NN no-op)) (SBAR (S (VP (MD would) (VP (VB seem) (S (VP (TO to) (VP (AUX be) (NP (NP (DT a) (JJR cleaner) (NN fix)) (PP (IN for) (NP (NP (NP (NNP Curt) (POS 's)) (NN concern)) (PP (IN about) (NP (DT the) (JJ side-effect) (NNS ..))))))))))))))) (. .)) (IN though) (S (VP (VBG leaving) (NP (PRP it)) (SBAR (IN as) (S (NP (PRP it)) (ADVP (RB now)) (VP (VBZ stands) (SBAR (S (ADVP (RB also)) (VP (VBZ strikes) (NP (PRP me)) (PP (IN as) (ADJP (JJ acceptable))))))))))) (. .)))
(S1 (NP (NP (NP (NNP Joe) (NNP Kesselman)) (, ,) (NP (NNP IBM) (JJ Next-Generation) (NNP Web) (NNP Technologies))) (: :) (NP (NP (NNP XML)) (, ,) (NP (NNP XSL)) (CC and) (NP (JJR more))) (. .)))
(S1 (S (`` ``) (S (NP (DT The) (NN world)) (VP (VBD changed) (ADVP (RB profoundly)))) (CC and) (ADVP (RB unpredictably)) (S (NP (NP (DT the) (NN day)) (NP (NNP Tim) (NNP Berners) (NNP Lee))) (VP (VBD got) (VP (VBN bitten) (PP (IN by) (NP (NP (DT a) (JJ radioactive) (NN spider.)) ('' '') (: --) (NP (NNP Rafe) (NNP Culpin)))) (, ,) (PP (IN in) (NP (NN r.m.filk))))))))
(S1 (S (NP (PRP I)) (VP (AUX 'm) (RB not) (ADJP (JJ sure)) (SBAR (IN if) (S (NP (NP (JJ adoptNode) (-LRB- -LRB-) (-RRB- -RRB-) (NN as-is)) (PP (IN on) (NP (NP (DT a) (NN node) (POS 's)) (NN source) (NN document)))) (VP (AUX is) (ADJP (`` ``) (JJ mostly-harmless) ('' '')))))) (. .)))
(S1 (S (NP (NP (DT The) (NN preconception)) (PP (IN behind) (NP (VB adopt) (NN node)))) (VP (AUX is) (SBAR (IN that) (S (NP (PRP we)) (VP (AUX are) (ADJP (JJ willing) (S (VP (TO to) (VP (VB cannibalize) (NP (DT the) (NN source) (NNS documents)) (SBAR (IN in) (NN order) (S (VP (TO to) (VP (VB build) (NP (PRP$ our) (NN target) (NN document)))))))))))))) (. .)))
(S1 (S (PP (IN In) (NP (NP (DT all) (NNS cases)) (PP (IN expect) (NP (DT the) (JJ same) (NN document) (NN case))))) (, ,) (NP (EX there)) (VP (AUX is) (NP (NP (DT no) (NN mutation)) (PP (TO to) (NP (NP (DT the) (CD one) (NN document)) (SBAR (WHNP (WDT that)) (S (NP (PRP we)) (VP (VBP care) (PP (IN about))))))))) (. .)))
(S1 (S (SBAR (IN If) (S (NP (PRP you)) (VP (AUX were) (VP (VBG using) (NP (NN adoptNode)) (PP (IN as) (NP (NP (DT a) (`` ``) (NN safety) (NN net) ('' '')) (PP (IN on) (NP (DT an) (NN insert) (NN operation))))))))) (, ,) (NP (DT a) (JJ malicious) (NN caller)) (VP (MD may) (VP (VBZ exploits) (NP (NP (NN adoptNode) (POS 's)) (NN behavior) (S (VP (TO to) (VP (VB move) (CC or) (VB remove) (NP (VBG existing) (NNS nodes)) (PP (IN by) (S (VP (VBG attempting) (S (VP (TO to) (VP (NN insert) (NP (PRP them)) (NP (JJ insignificant) (NNS places)))))))))))))) (. .)))
(S1 (S (ADVP (RB Maybe)) (NP (DT the) (JJS best) (NN solution)) (VP (AUX is) (S (VP (TO to) (VP (VB specify) (SBAR (IN that) (S (NP (NP (NN adoptNode)) (PP (IN in) (NP (DT this) (NN scenario)))) (VP (AUX is) (ADJP (JJ equivalent) (S (VP (TO to) (VP (VB cloneNode)))))))))))) (. .)))
(S1 (S (SBAR (IN If) (S (NP (PRP you)) (VP (ADVP (RB just)) (VBD returned) (SBAR (S (NP (DT the) (NN source)) (VP (VBD node))))))) (, ,) (NP (PRP you)) (VP (MD could) (VP (VB get) (NP (NP (DT an) (JJ IN_USE) (NN error)) (PP (IN on) (NP (DT an) (NN attempt) (S (VP (TO to) (VP (NN insert) (SBAR (IN that) (S (NP (PRP you)) (VP (MD could) (ADVP (RB never)) (VP (VB get) (SBAR (IN if) (S (VP (VBN adopted) (PP (IN from) (NP (DT a) (JJ foreign) (NN source)))))))))))))))))) (. .)))
(S1 (S (NP (PRP I)) (VP (AUX 'm) (RB not) (ADJP (RB entirely) (JJ convinced))) (. .)))
(S1 (S (NP (PRP I)) (VP (VBP think) (S (VP (VBG allowing) (SBAR (S (NP (PRP it)) (VP (MD could) (VP (AUX be) (ADJP (JJ useful) (PP (IN for) (S (VP (VBG writing) (NP (JJR simpler) (NN code)) (PP (IN in) (NP (NP (NNS situations)) (SBAR (WHADVP (WRB where)) (S (S (NP (PRP you)) (VP (VBP want) (NP (DT an) (JJ orphan) (NN node)))) (CC and) (S (NP (PRP you)) (VP (AUX do) (RB n't) (VP (VB care) (SBAR (WHADVP (WRB where)) (S (NP (PRP it)) (VP (AUX 's) (VP (VBG coming) (PP (IN from)))))))))))))))))))))))) (. .)))
(S1 (S (NP (NN Experience)) (VP (VBZ shows) (NP (NP (NN destination.importNode)) (PRN (-LRB- -LRB-) (NN source) (-RRB- -RRB-))))))
(S1 (NP (WRB where) (JJ source.ownerDocument)))
(S1 (S (VP (MD can) (VP (AUX be) (NP (NN destination)) (S (VP (TO to) (VP (AUX be) (ADJP (JJ useful)) (SBAR (RB even) (IN though) (S (NP (DT the) (NN spec)) (VP (AUX is) (ADJP (PRN (-LRB- -LRB-) (S (NP (PRP it)) (VP (VBZ seems) (PP (TO to) (NP (PRP me))))) (-RRB- -RRB-)) (ADJP (RB equally) (RB as) (JJ unclear) (PP (IN on) (NP (NP (DT the) (NN question)) (PP (IN of) (SBAR (IN whether) (S (`` ``) (NP (DT another) (NN document)) ('' '') (VP (AUX is) (VP (VBN allowed) (S (VP (TO to) (VP (AUX be) (`` ``) (NP (DT this) (NN document)) ('' ''))))))))))))))))))))) (. .)))
(S1 (S (SBAR (IN If) (S (S (NP (NP (DT the) (NN user) (NN expectation)) (PP (IN for) (NP (NN adoptNode)))) (VP (AUX is) (`` ``) (PP (IN like) (NP (NN importNode))))) (CC but) (S (NP (DT the) (NN source)) (VP (VBZ disappears))))) ('' '') (NP (PRP I)) (VP (VBP think) (SBAR (S (NP (PRP it)) (VP (AUX 's) (ADJP (JJ reasonable)) (S (VP (TO to) (VP (VB allow) (NP (PRP it))))))))) (. .)))
(S1 (S (S (ADVP (RB Certainly)) (NP (PRP it)) (VP (MD should) (VP (RB either) (VP (AUX be) (VP (VBN allowed))) (CC or) (VP (VB throw) (NP (NN WRONG_DOCUMENT)))))) (: ;) (S (NP (NP (DT a) (NN no-op)) (CC or) (NP (DT a) (NN clone))) (VP (AUX are) (ADJP (DT both) (JJ undesirable)) (SBAR (IN as) (S (NP (PRP they)) (VP (VBP leave) (NP (DT the) (NN source) (NN document)) (PP (IN in) (NP (DT an) (JJ unexpected) (NN state)))))))) (. .)))
(S1 (S (NP (PRP One)) (VP (MD should) (RB n't) (VP (AUX have) (NP (DT the) (JJ same) (NN parentNode)) (PP (IN after) (S (VP (AUXG being) (VP (VBN adopted))))))) (. !)))
(S1 (NP (NNP Andrew) (NNP Clover)))
(S1 (S (NP (PRP I)) (VP (VBP guess) (SBAR (IN that) (S (NP (NP (NN importNode)) (PP (TO to) (NP (DT the) (JJ same) (NN document)))) (VP (VBZ ends) (PRT (RP up)) (ADVP (RB functionally)) (ADJP (JJ equivalent) (PP (TO to) (NP (DT a) (JJ cloneNode) (NN operation)))))))) (. .)))
(S1 (S (PP (IN In) (NP (DT either) (NN case))) (, ,) (NP (NP (DT the) (NN user) (POS 's)) (NN expectation)) (VP (AUX is) (VP (VBN fulfilled) (PRT (RP in)) (SBAR (IN that) (S (NP (CC neither) (NP (DT the) (NN source)) (CC or) (NP (DT the) (NN destination) (NN document))) (VP (AUX is) (VP (VBN modified))))))) (. .)))
(S1 (S (NP (NP (PRP$ My) (NN take)) (PP (IN on) (NP (PRP it)))) (VP (AUX was) (SBAR (IN that) (S (SBAR (IN if) (S (NP (PRP you)) (VP (AUX were) (VP (VBG using) (NP (NN adoptNode)))))) (, ,) (S (NP (PRP$ your) (NN interest)) (VP (AUX was) (PP (IN in) (NP (DT the) (NN target) (NN document))))) (CC and) (S (NP (PRP you)) (VP (VP (AUX did) (RB n't) (VP (VB care) (SBAR (WHADVP (WRB how) (RB badly)) (S (NP (PRP you)) (VP (VBD mangled)))))) (CC or) (VP (AUX did) (RB not) (VP (VB mangle) (NP (DT the) (NN source) (NN document))))))))) (. .)))
(S1 (S (SBAR (IN That) (S (NP (NP (DT the) (NN user) (POS 's)) (NN expectation)) (VP (AUX was) (NP (NP (DT the) (NN target) (NN document)) (SBAR (S (VP (AUX was) (VP (VBN unmodified))))))))) (, ,) (S (NP (DT the) (VBN returned) (NN node)) (VP (VP (AUX was) (ADJP (JJ null))) (CC or) (VP (MD could) (VP (AUX be) (VP (VBN inserted) (PP (IN into) (NP (DT the) (NN target) (NN document)))))))) (CC and) (S (NP (NP (DT any) (NN modification)) (PP (TO to) (NP (DT the) (NN source) (NN document)))) (VP (AUX was) (NP (RB just) (DT a) (JJ necessary) (NN evil)))) (. .)))
(S1 (S (NP (DT A) (NN no-op)) (VP (MD would) (RB not) (VP (VB result) (PP (IN in) (NP (DT an) (JJ insertable) (NN node))) (SBAR (IN since) (S (NP (PRP you)) (VP (MD could) (VP (VB get) (NP (DT an) (JJ IN_USE) (NN error)))))))) (. .)))
(S1 (S (NP (NP (NN adoptNode)) (PP (IN as) (ADJP (JJ equivalent) (PP (TO to) (NP (NN cloneNode)))))) (VP (VP (VBD matched) (NP (NP (NP (DT the) (NN expectation)) (PP (IN of) (NP (DT no) (NN target) (NN document) (NN modification)))) (CC and) (NP (DT an) (JJ insertable) (NN node)))) (, ,) (CC but) (VP (ADVP (RB no) (RB longer)) (VBD changed) (NP (DT the) (NN source) (NN document)))) (. .)))
(S1 (S (NP (NP (NN adoptNode)) (ADJP (RB as) (JJ equivalent) (PP (TO to) (NP (CD removeChild))))) (VP (AUX had) (NP (NP (DT the) (JJ unexpected) (VB affect)) (PP (IN of) (S (VP (VBG mutating) (NP (DT the) (NN target) (NN document))))))) (. .)))
(S1 (S (NP (VBG Returning) (NN null)) (VP (MD might) (VP (AUX be) (NP (DT a) (JJ good) (NN solution)))) (. .)))
(S1 (S (NP (NNP adoptNode)) (VP (VBZ allows) (S (NP (NNS implementations)) (VP (TO to) (VP (VB return) (NP (NN null)) (PP (IN at) (NP (PRP$ their) (NN discretion))) (SBAR (RB anytime) (S (NP (PRP they)) (VP (AUX do) (RB not) (VP (VB feel) (PP (IN like) (S (VP (VBG adopting) (SBAR (S (NP (DT a) (JJ node) (, ,) (ADJP (RB so) (JJ good)) (NN client) (NN code)) (VP (MD should) (ADVP (RB always)) (VP (VB call) (S (VP (VB adoptNode) (PP (IN in) (NP (NP (NP (NP (DT a) (VB construct) (IN like)) (: :) (NP (NNP Node) (NN newNode)) (X (SYM =))) (NN newDoc.adoptNode)) (PRN (-LRB- -LRB-) (NP (NN otherNode)) (-RRB- -RRB-))))))))))))))))))))) (: ;)))
(S1 (S (SBAR (IN if) (PRN (-LRB- -LRB-) (NP (JJ newNode) (JJ ==) (NN null)) (-RRB- -RRB-))) (-LRB- -LCB-) (NP (NN newNode)) (VP (SYM =) (NP (NP (NN newDoc.importNode)) (PRN (-LRB- -LRB-) (NN otherNode) (-RRB- -RRB-)))) (: ;)))
(S1 (X (X (S (S (NP (DT The) (NN client) (NN code)) (ADVP (RB really)) (VP (VBD wanted) (NP (DT the) (NN source/destination) (NN mutation)))) (, ,) (S (NP (PRP they)) (VP (MD could) (VP (AUX do))))) (: :) (NP (JJ Node) (NN newNode)) (SYM =)) (NP (NP (NN newDoc.adoptNode)) (PRN (-LRB- -LRB-) (NN otherNode) (-RRB- -RRB-)) (: ;))))
(S1 (S (SBAR (IN if) (PRN (-LRB- -LRB-) (NP (JJ newNode) (JJ ==) (NN null)) (-RRB- -RRB-))) (-LRB- -LCB-) (NP (NN newNode)) (VP (SYM =) (NP (NP (NN newDoc.importNode)) (PRN (-LRB- -LRB-) (NN otherNode) (-RRB- -RRB-)))) (: ;)))
(S1 (SBAR (IN if) (S (PRN (-LRB- -LRB-) (S (NP (NP (NN otherNode.getParentNode)) (PRN (-LRB- -LRB-) (FRAG (-RRB- -RRB-) (. !) (X (SYM =)) (NP (NN null))) (-RRB- -RRB-))) (VP (-LRB- -LCB-) (VB otherNode.getParentNode) (-LRB- -LRB-))) (-RRB- -RRB-)) (VP (VB .removeChild) (PRN (-LRB- -LRB-) (VB otherNode) (-RRB- -RRB-)))) (: ;)))
