Hi, how can undelete of a versioned resource (residing in a versioned collection) which has been deleted somewhen in the past be done using DeltaV ? 
There are two things which have to be solved here: *find the deleted resource(s) under a given path *undelete resource(s) I would like to do it with using an activity and working resources so that the undeletion is tracked in the activity. 
How can the browsing for deleted resources (or collections) be done in an efficient way, i.e. how can the client find out which resources have been deleted let's say recursively under /a/b/c/... ? 
regards Matthias From: Sohn, Matthias [mailto:matthias.sohn@sap.com] 
how can undelete of a versioned resource (residing in a versioned collection) which has been deleted somewhen in the past be done using DeltaV ? 
There are two things which have to be solved here: *find the deleted resource(s) under a given path *undelete resource(s) I would like to do it with using an activity and working resources so that the undeletion is tracked in the activity. 
Note that tracking the undeletion requires that your server support either versioned collections or baselines (or both). 
If your server does not support in-place-checkout, then it has to support versioned collections in order to track the undeletion. 
Also note that tracking the undeletion in an activity requires that your server support versioned collections (baselines aren't enough) and activities. 
Also note that using a working resource (i.e. a client side workspace) is not needed for either tracking the undeletion, or for tracking the undeletion in an activity, but that it does affect the requests you need to issue in order to do the undeletion. 
How can the browsing for deleted resources (or collections) be done in an efficient way, i.e. how can the client find out which resources have been deleted let's say recursively under /a/b/c/... ? 
The easiest way to find deleted resources is if the server supports baselines. 
In this case, you can just browse the collections identified by the DAV:baseline-collection property of the baselines to find the resource you want to undelete. 
Alternatively, if the server supports versioned collections, you could browse through versions of visible collections to find the version history of the deleted resource. 
And finally, you could scan through the DAV:version-history-collection-set, but that would be an extreme last resource, since it is likely to be hard to find the version history you want from the set of all version histories. 
Once you have found the version you want to restore, what you do depends on whether the server supports the checkout-in-place or the working-resource option. 
If it supports checkout-in-place, you just do a VERSION-CONTROL request that identifies the version you want restored. 
If it supports the working-resource option, you need to checkout a collection containing the version history of the resource you want to restore, checkout a destination collection, MOVE the desired resource from the first working collection to the second, delete the first working collection, and CHECKIN the second working collection. 
Cheers, Geoff From: Sohn, Matthias [mailto:matthias.sohn@sap.com] 
I think when the resource version to be revived in order to undelete the resource has been found the undelete operation can be done in the following way : - check out the collection which shall contain the resource to be undeleted, Yes. this yields a working collection which is bound to an activity (since I want to track all changes in activities) Yes. - issue VERSION-CONTROL on the resource version contained in the old collection version before the deletion of the resource took place A collection version does not contain resource versions, it contains a DAV:version-controlled-binding-set property that contains a set of name/version-history pairs. 
Also, you don't issue VERSION-CONTROL requests to members of a working collection, because a working collection does not contain version-controlled resources (and VERSION-CONTROL creates a version-controlled resource). 
The VERSION-CONTROL request is used to restore resources to checked-out collections (i.e. to collections that can be checked-out in place), not to working collections. 
In this request specify the URL under which the VCR for the resource to be undeleted shall reappear. 
- check in the activity containing the working collection which now has a binding pointing to the newly created VCR for the undeleted resource. 
Working collections cannot contain a VCR. - if since the resource has been deleted another resource has been created with the same URL the VERSION-CONTROL request given above will fail. 
In this case the client has to reissue VERSION-CONTROL specifying another request URL which uniquely identifies the URL of the resource to be undeleted. 
Is this approach compliant to the DeltaV spec ? 
No, with working resources, you have to CHECKOUT a collection version that identifies the version history of the desired version in its DAV:version-controlled-binding-set. 
Then you can MOVE that version history from that working collection into the destination working collection, DELETE the source working collection, and then CHECKIN the destination working collection. 
Cheers, Geoff Hi, given two collections with version controlled members: - a with member VCRs m1 and m2 - b with member VCRs m2 and m3 What is the expected result for COPY a Destination-URI: b Overwrite: T (let's assume no auto-versioning for now) Based on RFC2518 only I would expect a collection b with members "m1" and "m2". 
However, RFC3253 clarifies that COPY/Overwrite updates (and doesn't replace), so I'd expect the following members of "b": - m1 (newly created, whether it's versioned or not depends on the automatic versioning behaviour of the server) - m2 (updated when m2 already was checked out, untouched when checked-in) - m3 (unchanged) Julian From: Julian Reschke [mailto:julian.reschke@greenbytes.de] given two collections with version controlled members: - a with member VCRs m1 and m2 - b with member VCRs m2 and m3 What is the expected result for COPY a Destination-URI: b Overwrite: T (let's assume no auto-versioning for now) Based on RFC2518 only I would expect a collection b with members "m1" and "m2". 
That is correct. 
However, RFC3253 clarifies that COPY/Overwrite updates (and doesn't replace), That is only for the case where there is a destination resource corresponding to a source resource. 
In case the destination resource does not correspond to the source resource, the expected (from 2518) thing happens, i.e. the destination resource is removed. 
So for example, since there is no "m3" resource in "a", following the COPY, there is no "m3" resource in "b". 
so I'd expect the following members of "b": - m1 (newly created, whether it's versioned or not depends on the automatic versioning behaviour of the server) Yes. - m2 (updated when m2 already was checked out, untouched when checked-in) b/m2 must be updated to have the content and dead properties of a/m2, or else the COPY (or at least, that part of the COPY if your COPY does best effort) MUST fail, and be reported as failing in the COPY response. 
- m3 (unchanged) No, b/m3 must not be mapped to any resource following the COPY. 
Cheers, Geoff From: Sohn, Matthias [mailto:matthias.sohn@sap.com] 
I think when the resource version to be revived in order to undelete the resource has been found the undelete operation can be done in the following way : - check out the collection which shall contain the resource to be undeleted, this yields a working collection which is bound to an activity (since I want to track all changes in activities) - issue VERSION-CONTROL on the resource version contained in the old collection version before the deletion of the resource took place A collection version does not contain resource versions, it contains a DAV:version-controlled-binding-set property that contains a set of name/version-history pairs. 
Sorry it seems that my sentence was too sloppy. 
- I meant that by using some report provided by my server I can find out to which version of the deleted resource the VCR has pointed to just before the resource has been deleted. 
Yes, you could define such a custom report. 
- Since the resource has been deleted before the undeletion is done there is no VCR for the version history of the deleted resource in my workspace. 
Agreed. 
By issueing VERSION-CONTROL on the version I want to put back to life. 
I thought I can create a new VCR in the checked out collection (which belongs to my workspace) which will then point again to the same version the old VCR pointed to before it has been deleted. 
If your server supports workspaces (with checked-out version-controlled collections), then yes, that is exactly what you would do. 
But if you are using working collections, you need to use a different set of requests, because working collections do not contain version-controlled resources, and therefore cannot have members added to them with the VERSION-CONTROl request. 
Also, you don't issue VERSION-CONTROL requests to members of a working collection, because a working collection does not contain version-controlled resources (and VERSION-CONTROL creates a version-controlled resource). 
The VERSION-CONTROL request is used to restore resources to checked-out collections (i.e. to collections that can be checked-out in place), not to working collections. 
I don't want to issue VERSION-CONTROL to a member of the working collection but to the resource version I want to revive in order to create a new VCR for it. 
This version I found using a report. 
This VERSION-CONTROL request takes two parameters: the request-URL (indicating where the new version-controlled resource should be created), and the version (indicating what should be the DAV:checked-in version of the new VCR). 
So yes, you do indicate the version, but you also have to indicate where the new VCR should be located. 
And it can't be located in a working collection, because working collections do not contain VCRs. 
I only want to checkout the target collection in order to allow the recreation of the resource (which shall become a member of the checked out collection). 
A VCR can be a member of a checked-out version-controlled collection, but it cannot be a member of a working collection. 
So the requests you need to issue to manipulate working collections will be different from the requests you need to issue to manipulate checked-out version-controlled collections. 
... with working resources, you have to CHECKOUT a collection version that identifies the version history of the desired version in its DAV:version-controlled-binding-set. 
Then you can MOVE that version history from that working collection into the destination working collection, DELETE the source working collection, and then CHECKIN the destination working collection. 
Huh, I feel this partial move is ugly. 
First this needs 5 requests to do a simple undeletion: - two CHECKOUTs (of the source and target collection versions) - (partial) MOVE This is a regular MOVE, not a "partial" MOVE. 
- DELETE (or UNCHECKOUT) on the source working collection - and a CHECKIN on the target collection. 
The working group did not believe that this "restore of a deleted resource" is sufficiently common to merit defining a special request for the purpose. 
In addition this would require that MOVE is not an atomic operation (either done completely or not at all). 
There are no "partial" or "non-atomic" MOVEs here. 
The only sense in which the MOVE is partial is that the working collection that is the source of the MOVE is deleted following the MOVE. 
If MOVE is not atomic I expect that the probability of inconsistencies on the server will increase if some client issues a similar partial MOVE for a different purpose. 
Since we use a stateless protocol it's no option for the server to wait for the DELETE and CHECKIN until the transaction doing the MOVE is committed. 
Without waiting for DELETE and CHECKIN the server has no chance to find out that this request sequence is an undelete operation (which should be atomic as well). 
I see no reason for the "undelete" operation to be atomic. 
To the contrary, a user is likely to have several adjustments they want to make to the collection before committing the changes via a "CHECKIN". 
I would prefer if there is some solution which only needs CHECKOUT and CHECKIN of the target collection (this seems to be necessary with versioned collections) and only one atomic command (e.g. UNDELETE or VERSION-CONTROL with additional semantics) which does recreate the deleted VCR and ensures that the same version is revived which has been in the workspace just before the resource has been deleted. 
The version that appeared in the workspace at the time the VCR was deleted is not necessarily an especially interesting version, since someone in a different workspace (that hasn't seen the deletion yet) might have produced a variety of more interesting successors to that version. 
We discussed whether or not to require that a particular version be restored, and the consensus was that this should be left up to the server. 
So your server is welcome to restore the version that was visible before it was deleted, but clients cannot assume that to be the case (nor can the assume that a server will keep track of that version). 
This would mean 3 requests instead of 5, This was not considered a sufficiently common use case to warrant concern over an additional couple of round trips. 
less chance for inconsistencies (since MOVE is atomic) Only normal (atomic) MOVE semantics are used here. 
and clearer semantics for the sake of an additional method (or additional semantics for VERSION-CONTROL ?). It is highly desireable for a particular request to have consistent semantics. 
In the case of VERSION-CONTROL, one of the postconditions is that a version-controlled resource exist at the request URL when the request succeeds. 
We could have made that postcondition context sensitive (i.e. creates a VCR normally, but creates a version history in a working collection), but this use case was not considered sufficiently common to merit introducing a new method or increasing the complexity of VERSION-CONTROL, just to avoid a couple of round trips for an infrequent use case. 
Cheers, Geoff 
