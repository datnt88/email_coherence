Just a note: I had argued for URNs as PIs, on the inarticulate assumptions that only FPIs would be used as PIs and that PIs would always be resolved as URNs. 
Paul has taken a different approach (more articulately). 
I think that it would be better to specify that URNs be used (which I would support) than FPIs (which I do not support), as there is still no resolution mechanism that will scale up to millions of FPIs even proposed, let alone working, as far as I can see. 
ISO can mandate the use of things that don't exist and might never work, but that doesn't mean we can, and if you need a W3C Recommendation and/or an RFC, that won't cut any ice. 
(why do people need to cut ice? it comes in cubes) Currently, I think that an SGML Open catalogue could be expressed as a set of ilinks, and that doing so would reduce the number of syntaxes required for implementation (this is a different issue from FPIs and URNs and PIs). 
Yes, I agree. 
It is very sad that SGML OPEN used a non-SGML syntax because it was easier to implement and get people to agree on and to have a common working inplementation than an SGML file. 
Either way, some means of associating catalogues or ilinksets with documents is required. 
Clearly -- otherwise we haven't solved the problem, but only made it more complicated. 
A way of getting from instance to catalog is needed. 
I will say right now that we spent a lot of effort on this topic for SoftQuad Panorama, and didn't get it right in the 1st release. 
It's still not perfect, but we have backward compatibility issues. 
Let's do it right for XML. Lee The proposal leaves the resolution mechanism up to the application as it should. 
Therefore we do not need to argue FPIs vs. URNs. 
Furthermore, when URN resolution mechanisms become available, FPI resolution mechanisms will also become available (global resolution mechanisms, I mean), because the representation of an FPI as a URN and the set of all FPIs as a URN namespace is straightforward. 
There is no dichtomy, nor any competition between them. 
Either way, some means of associating catalogues or ilinksets with documents is required. 
I don't agree here. 
Catalogs are useful without a transmission mechanism. 
If I send you a file with !DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 3.2//EN" I have a feeling that your software will resolve it correctly. 
On the other hand! 
I think that a mechanism for associating catalogs with instances is useful, and important. 
I raised this in the catalog group, and we agreed that it was outside of our mandate and did not bother to discuss it further. 
Some of us felt that it was something that the ERB should add when they integrate the catalog proposal with the XML spec. 
I planned to recommend a mechanism to the ERB independent from the catalog group, but could not decide between the Socat-way, with a file named "catalog" which is very convenient, but tromps on the user's filename space, (perhaps less if the file was named xml-cat) or with a processing instruction, which is syntactically ugly and a little inconvenient to add to each document. 
Comments welcome. 
What is "right"? 
Your experience with this issue will be useful to us. 
Paul Prescod [Liam Quin:] With all due respect for the URN effort, I'm not convinced that it's very far along toward implementation, either. 
And I'm beginning to suspect that we could, in fact, come up with a believable resolution mechanism for millions of FPIs. 
This is just a sketch, but consider: Given DELEGATE, a catalog-based mechanism works for a reasonably large number of FPIs on something the size of a corporate network. 
The problem comes when something links to an FPI that's not in the space defined by local catalogs. 
Let's suppose that "-//FOOCORP::FOOAUTH//DOCUMENT sometitle ver1.01//EN" fails to find resolution at the local level. 
Postulate the existence of a server (probably mirrored, but let's stay above that level of detail for the nonce) funded by every organization that wishes to use this mechanism. 
Let's call this server xmlid.net. 
That server does not have a listing for every FPI; all it has is one (and only one) entry for every publisher that has joined the cooperative. 
So on that server there is a single lookup table cached in RAM, one line of which consists of FOOCORP::FOOAUTH on one side and foodocs.foo.com on the other. 
Add to the abilities assumed for the XML client under the XML catalog proposal the following: it can query xmlid.net with the string FOOCORP::FOOAUTH and get back foodocs.foo.com; it can then query foodocs.foo.com for its corporate catalog; and it can add that corporate catalog to its own for long enough to resolve the query (or fail, but that's entirely FooCorp's responsibility). 
This isn't enough to build a resolution mechanism, but it's enough to think that building one might be possible. 
Is there anything basically wrong with the idea? 
Jon We could also use LDAP... 
