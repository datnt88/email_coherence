Hi, We have a web server implementing the HTTP 1.1 server MUSTS and most easy SHOULDs running at: The server home page is at: The final prerelease is available for FTP complete with source code, which can be viewed over the web, but is most useful for advanced lisp programmers. 
Although the server implements a number of proxy-relevant headers, it does not provide 1.1 proxy service at the moment. 
A variety of computed pages are generated on the fly using chunked transfer encoding (if you are a 1.1 client). 
The particular machine on which this server is running has an adaptive TCP implementation, so you may observe changes in the packet sizes as you interact with it. 
The server makes efforts to keep connections open, as appropriate, when it returns non-success responses. 
The server does not do content negotiation. 
If anyone spots any bugs or shortcomings, please drop us a bug report at bug-cl-http@ai.mit.edu 
Kindly treat the test machine with respect as it provides file service for our research group as well. 
John Mallery 
Before people start getting jumpy ... The Apache Group is not planning on releasing any server that uses the native HTTP-version "HTTP/1.1" until after the IESG approves the draft for RFC status (i.e., fixes that version in stone). 
Since all of the HTTP/1.1 features can be tested as an HTTP/1.0 server (assumimg you are careful not to send HTTP/1.1 features to HTTP/1.0 clients where it is noted in the spec that you MUST not do so), I strongly suggest, for the sake of interoperability, that no application be shipped with the "HTTP/1.1" 
label until after we all know that there will be no further requirements placed on HTTP/1.1 applications. 
...Roy T. Fielding Department of Information &amp; Computer Science (fielding@ics.uci.edu) 
Are you saying that 1.0 clients do not ignore headers they don't understand? 
Or are you trying to say don't send chunked encoded stuff to 1.0 clients? 
I checked every occurence of MUST in the spec to make sure we were conforming, and I believe we are. 
CL-HTTP responds to 1.0 clients with 1.0 responses. 
1.1 responses are reserved for clients or proxies that also advertise 1.1 functionality. 
Most of my user base is behind firewalls, with one prominent exception, and they like keeping their research on the cutting edge. 
Of course, since we are in lisp, upgrades only take a couple of minutes. 
Servers don't go down. 
Just load patches. 
No big deal. 
No, he's saying don't call yourself HTTP/1.1 until there is a HTTP/1.1 spec to ahere to. 
See, the IESG could come back and say "Whoa, folks. 
We'll approve this spec, but only if you add a section that says every time a request is made, the server MUST send to the Pentagon, via overnight mail, a hot dog with lots of jalapeno mustard." 
Unlikely, but if it happened, you'd have a server that called itself HTTP/1.1, but was not HTTP/1.1 compliant. 
Which would be a bad thing. 
So until the IESG approves the spec, you need to call yourself HTTP/1.0. 
Alexei Kosut akosut@nueva.pvt.k12.ca.us 
The Apache HTTP Server URL: http://www.nueva.pvt.k12.ca.us/~akosut/ http://www.apache.org/ 
The latter. 
Great -- but what I was saying is that you can't be sure you are conforming until the document stops changing, which means when the IESG recommends it for RFC status. 
So, you need to wait for that before you can ship software that responds with "HTTP/1.1 200 OK". 
I don't anticipate any more changes to the protocol, but stranger things have happened. 
I'd like to minimize the number of noncompliant servers advertizing HTTP/1.1, and one way to do that is to encourage people to implement the features within HTTP/1.0 first and only switch the version when it can be tested against a completed RFC. 
...Roy T. Fielding Department of Information &amp; Computer Science (fielding@ics.uci.edu) 
Some of those clients that advertise themselves as HTTP/1.0 will be clients that have started implementing some of the HTTP/1.1 features (but not all of them - so they still have to call themselves HTTP/1.0). 
This brings up a question - How legitimate is it for the same server (identified ipaddress:port) to change personality between HTTP/1.1 and HTTP/1.0? 
If a server answers some requests with "HTTP/1.1 200 .." and others with "HTTP/1.0 200 .." (or any other response code), this may confuse HTTP/1.1-aware clients. 
draft-ietf-http-v11-spec-07 says: 3.1 HTTP Version ... Applications sending Request or Response messages, as defined by this specification, MUST include an HTTP-Version of "HTTP/1.1". 
8.2 Message Transmission Requirements Clients SHOULD remember the version number of at least the most recently used server... 
C'mon Roy, they announced an experimental implemntation and solicited testing against it with experimental HTTP/1.1 clients. 
Your response is quite harsh when you should be lauding their attempts to verify the specification by attempting to implement it. 
Impossible Roy ... many aspects of the new protocol depend on the version for a experimental client to recognize the server as 1.1 and vice versa. 
It is VERY IMPORTANT that such experimental servers not be released / distributed as anything other than internet drafts until the RFC is approved. 
But lets focus on the issue that experiments be identified as such. 
Who knows, perhaps the protocol will change as a result of this experiment. 
Dave Morris 
Well, there's no requirement against it (because that particular confusion is harmless -- if it ever understands HTTP/1.1 then it is safe to send HTTP/1.1-only features to it). 
The intention of the protocol is that the server should always respond with the highest minor version of the protocol it understands within the same major version of the client's request message. 
The restriction is that the server cannot use those optional features of the higher-level protocol which are forbidden to be sent to such an older-version client. 
[BTW, there are no required features of a protocol that cannot be used with all other minor versions within that major version, since that would be an incompatible change and thus require a change in the major version.] 
It sounds confusing, but it works in terms of providing a safe mechanism of indicating and deploying future protocol changes. 
...Roy T. Fielding Department of Information &amp; Computer Science (fielding@ics.uci.edu) 
I said "ship" -- as in letting it go outside your area of control where you can personally ensure that changes to the protocol can be fixed in the server code and thus not result in long-term faulty applications in the hands of users that might not want to upgrade them. 
If John hadn't said he was planning to ship it soon, I would not have bothered. 
In any case, these messages are directed at the entire WG and not just his server (in fact, his server is the least of my worries, since he has better control over his user base than other servers do). 
There is nothing in HTTP/1.1 that an HTTP/1.0 server cannot send to an experimental HTTP/1.1 client -- the only necessity is that the client not have the normal attribute of disregarding HTTP/1.1 features received from an HTTP/1.0 server. 
Nor is there any requirement anywhere that forbids an HTTP/1.0 server from properly interpreting HTTP/1.1 requests. 
Being able to use HTTP/1.1 features within HTTP/1.0 is one of the design requirements that Henrik and I laid down at the beginning. 
It would be nice if people would take advantage of it. 
...Roy T. Fielding Department of Information &amp; Computer Science (fielding@ics.uci.edu) 
[implementor of experimental 1.1 server:] 
[kw:] 
Ok. But I assume that it should never be necessary for an HTTP/1.1 server to "masquerade" as HTTP/1.0 on its Status-Line, even whan the server is talking to a 1.0 client? 
In fact it may be better if an experimental server never does this, if only to discover whether there are any clients out there which refuse responses starting with "HTTP/1.1 " (or treat them as 0.9...). 
I note that the sentence "CL-HTTP responds to 1.0 clients with 1.0 responses" is ambiguous (to me). 
"...responds ... with 1.0 responses" could mean a) returns "HTTP/1.0" 
Status-Line, or b) returns "HTTP/1.1" 
Status-Line, but uses only 1.0 features. 
I think b) would be the better choice. 
Klaus 
Hi folks, could people stop getting all bent out of shape over this? 
Roy did not exactly put his case well, he made it sound like he was asking for a chance for the Apache group to catch up rather than making a point about version control issues. 
I wouldn;t mind less of the "X. and I set out the requirements ages ago" attitude. 
One of the things I have always found very attractive about Tim is that he doesn't try to throw his weight arround. 
The 1.1 draft has not changed materially since the great cullback in May. 
The wording has changed somewhat but the protocol itself has been stable. 
Now the IESG could in theory reject the draft but they would be very ill advised to do so. 
In the first place there is no substantive debate in the working group over 1.1, there are no outstanding controversies that concern it. 
The Internet is not quite the place it was five years ago when returning a draft to a working group for further consideration was of little import. 
Today there is half the goddam stock market and an election riding on the Web. 
The HTTP/1.1 draft is already late and more than one very senior and very influential person has made it very clear that if the IESG does not play ball it will be taken away from them. 
If the IESG reject the draft they will have to have one hell of a good reason for it. 
Now lets consider what the draft is being forwarded as consideration as. 
RFC - how many people remember what those words mean? 
REQUEST for COMMENTS. 
The draft is submitted as a proposed standard. 
There was a time when having an implementation of a standard before it was proposed was considered something of a good thing. 
Now Roy may be correct in his statement of the IETF rules but hes entirely out of line concerning their spirit. 
The idea is to develop good protocols which have well defined specifications which ensure that applications interoperate. 
I don't think that the lawyerly attitude helps. 
If people think thats how they want to work then they better expect to make room for some real lawyers to join the group. 
Phill 
David W. Morris: 
I agree. 
For a start, the persistent connections default case depends on the version number. 
So does the `Message Transmission Requirements' stuff. 
I think that Roy is attacking a non-problem here. 
We have anticipated all along that it might be necessary to change the 1.1 version number into 1.23723 if too much non-compliant stuff happens under the name of 1.1. 
The IESG could change the version number the day before the draft gets RFC status if too much non-compliant stuff happens, irrespective of whether the non-compliant stuff was caused by the draft changing or by the actions of some marketing department. 
I don't see the need to aggressively protect the 1.1 `brand name' before the draft makes RFC status; in fact I think it would be *very dangerous* to do so. 
I think we absolutely need large scale compatibility experiments with 1.1 draft compliant software actually calling itself HTTP/1.1 compliant. 
Only large scale experiments with sending the 1.1 version number will make it clear whether existing 1.0 proxies and gateways correctly downgrade request and response message versions, and whether there are browsers that choke on seeing `HTTP/1.1 200 OK'. 
The HTTP minor version number being insignificant might be a nice and time-honored design goal for 1.1, but it it as yet unknown whether this design goal is actually met *by all 1.0 implementations out there*. 
We cannot afford to discourage testing in this area. 
It is vastly preferable to get nasty surprises *before* the draft is frozen as an RFC. 
Shipping 1.1 draft compatible software which calls itself 1.1 by default would also be a bit too much for my taste, but I would definitely encourage shipping such software with a `send version number 1.0 or 1.1' toggle defaulting to 1.0. 
Finally, the slogan `Save the Internet! 
Implement HTTP/1.1 *now*! 
Don't say you implement HTTP/1.1!' sounds like something out of a Dilbert cartoon. 
This is not the message I would want to send to the development community. 
Koen. 
