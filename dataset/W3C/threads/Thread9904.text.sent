I don't know if this is going to be helpful, but I thought it worth the attempt to pull together the datatyping discussion. 
I've been through todays mail traffic and pulled the issues as I've recognised them. 
In general I've ignored retoric, exposition of beliefs as to how it *should* be done and tried to focus on issues that I can, in some sense make concrete. 
I've also tried to be even handed. 
The result is no doubt imperfect; so help me get it right, next time round. 
Issue B1: In S, if one wants to use both idiom A and idiom B, e.g. mary age "10" . 
age rdfs:range xsd:integer.lex . 
and mary ageD _:a . 
_:a xsd:integer.map 
"10" . 
two properties have to be used, age and ageD , in this example. 
I believe there is a agreement that this is a difference between the two proposals. 
Indeed, it may be said that the main aim of TDL is to avoid requiring different properties for these different idioms. 
Does anyone in the WG consider this feature of S, on its own, to be a "can't live with" issue with S? Issue B2: Multiple Lexical Representations of a data value S, idiom A, permits multiple lexical representations of a data value: _:i xsd:double "10.1" . 
_:i xsd:double.de 
"10,1" . 
I believe there is agreement that S-A allows this. 
Does anyone in the WG consider this, on its own, to be a "can't live with" issue with S? Issue B3: the "duh" issue DanC is concerened that with TDL: mary haircolor "red" . 
and a rule: ?x 
haircolor "red" = ?x 
rdf:type redhead . 
one cannot conclude mary rdf:type rdfhead . 
since one conclude that both "red"'s denote the same thing. 
Jeremy has responded: From: mary haircolor "red" . 
haircolor rdfs:range xsd:string . 
and the same rule one can draw the required inference. 
DanC: Does that solve the problem? 
Do you withdraw that objection? 
Jeremy/Patrick: Do you accept that without the range constraint, DanC is correct? 
Issue B4 - TDL breaks existing code This is similar to B2. I've changed the example slightly from Sergey's. 
Consider the graph: _:f rdf:type film . 
_:f dc:Title "10" . 
mary age "10" . 
Given a query: (?x dc:Title ?y) 
&amp; (?z age ?y) 
existing applications will return: ?x 
= _:f, ?y 
= "10", ?z 
= mary Under TDL, they would return null. 
Sergey: Does this version of the issue illustrate your point? 
Jeremy/Patrick: Do you accept this analysis; would the query return null under TDL? 
Issue B5: Storage Requirements TDL requires significantly more storage to implement. 
Jeremy/Patrick: do you accept this statement? 
Issue B6: S requires 4 URI's be registered for each data type S requires that for each datatype 4 URI's be registered datatype datatype.lex 
datatype.val 
datatype.map 
Sergey: Do you agree this is the case? 
If not, how many URI's are required to implement ALL the idioms of S and coexist in the same model. 
B3 log:implies DanC is concerened that with TDL: mary haircolor "red" . 
and a rule: ?x 
haircolor "red" = ?x 
rdf:type redhead . 
one cannot conclude mary rdf:type rdfhead . 
There is of course a reification in here, with a use/mention issue! 
Let's have three contentious issues in one example. 
I wonder whether the TDL == S-P syntactic transform [1] is useful here: (Again only for explanatory purposes, not an implementation suggestion). 
If we had mary haircolor _:a. 
_:a rdf:value "red". 
and the rule ?x 
haircolor ?y . 
?y rdf:value "red" . 
= ?x 
rdf:type redhead . 
then I can see a reading of the rule so that it fires, without any range constraint. 
As I am saying (msg with same delivery time) about the query (B4) TDL clairifies that one could be talking about the lexical form, or one could be talking about the value, and permitting a decision about which seems like a good choice to expose to the layer aboce RDF. 
So, in answer to Brian's question. 
Is the range constraint required by TDL? No. It depends on the rule semantics chosen. 
The rule implementator is free to choose. 
In Dan's case I think he should consistently use the lexical forms of lexical nodes in the interpreation of the rules. 
I think I am saying that in a form #2 reification in [2], literal nodes should be mentions, i.e. in the model theory map them to the lexical form and ignore the value. 
But then form #2 was dropped. 
[1]Jeremy Carroll: Re: Datatyping Summary [2] Jan Grant. 
Proposals? 
Re: use/mention and reification Ok Jeremy, As I understand what you are suggesting here, is that under TDL, the rule could be rewritten to get the desired effect, i.e. reflecting the "literal is a pair" directly in an extended n-triples represention: mary haircolor (_, "red") . 
and ?x 
haircolor (_, "red") = ?x 
rdf:type redhead . 
one can conclude: ?x 
rdf:type redhead . 
DanC - Do you buy this one. 
Rewrite the rule and you get what you want. 
Brian I accept the reasoning above; it doesn't address my objection; it' just shows that my example wasn't very good. 
Sergey's example makes the point better: --8 -- _:f rdf:type film . 
_:f dc:Title "10" . 
mary age "10" . 
Given a query: (?x dc:Title ?y) 
&amp; (?z age ?y) 
--8 -- As to the claim that query is irrelevant, I disagree; it's clearly analagous to an entailment test: premise: _:f rdf:type film . 
_:f dc:Title "10" . 
mary age "10" . 
conclusion: _:x dc:Title _:y. 
_:z age _:y. 
pass or fail? 
Clearly when viewed in TDL-extended-N3 as above... _:f rdf:type film . 
_:f dc:Title (_:t1, "10") . 
mary age (_:t2, "10") . 
it's not valid to conclude _:x dc:Title _:y. 
_:z age _:y. 
The TDL proponents claim this is a feature: the two occurences of "10" might indeed denote different things. 
I see it as a bug: I think RDF users expect "10" to match "10". 
This seems to put the two positions in pretty stark contrast. 
Dan Connolly, W3C http://www.w3.org/People/Connolly/ 
