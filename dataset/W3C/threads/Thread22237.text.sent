From the top of my head there are the following issues brought up by Netscape representatives (they will send a message to this list after having checked thouroughly): 1. Browser sniffing -- it seems that the sniffing is not elaborate enough, makes Mozille, for example, run code with calls to an ActiveX object. 
2. Tests on default attributes require a validating parser, which is not a requirement (for XML), for HTML default attributes need to be there. 
The issue is then that the TS tests the XML appclication DOM, not the browser DOM And from IBM: 1. readonly issues, as indicated in a previous message 2. Ability to run single tests (in Java) instead of the entire suite. 
I promised to come back with relevant info on how not to run entire suites (this is the way we run it right now) /Dimitris I'll admit that it isn't elaborate, but under what scenario does Mozilla run an ActiveX object? 
It doesn't require that the document be validated, but it does require that the DTD be processed. 
The DOM rec doesn't seem to allow a processor to omit default attributes or return null for doctype when there is a DTD. , for HTML default attributes need to be there. 
The DOM Level 1 test suite currently only contains tests for XML and SVG documents. 
Microsoft IE does not have an browser implementation of the XML DOM so the MSXML2.DOMDocument is used for tests using XML documents. 
Since Mozilla does have a XML DOM in the browser, it is used for tests on XML documents. 
I believe that Netscape was converting going to be providing DOM 1 Core tests that use HTML documents, and when those tests are run using HTML documents they will use the browsers HTML DOM implementation. 
Let me search the archives and come up with a history of the discussion on these tests. 
From the command line, if you do: java -classpath dom1-core.jar 
testclassname such as: java -classpath dom1-core.jar 
org.w3c.domts.level1.core.documentcreatecdatasection it will run just the specified test twice (once for each configuration). 
Individual tests cannot be run (currently) from JUnit GUI's since there are not junit.framework.TestCase derived classes corresponding to each test. 
comments inlined [dd] I've no idea, they would look into this and get back to this list. 
[dd] My interpreetation as well, but we'll have to see what the issue is once the QA people at Netscape formulate it [dd] The issue is probably exactly that; IE has an external program for processing XML, whereas Netscape does not. 
[dd] Thanks, I'll update relevant documentation accordingly Sorry, I've got a volume to deal with, but let me have a quick go at the simple answer. 
When the TS identifies it as IE and tells it to load Active X components. 
The DOM spec only requires that which is required by XML of a non-validating processor. 
A non-validating processor is not required to read the DTD. 
It is only required to read and be aware of default attributes in the very unlikely scenario that they are declared in the internal subset, and then I believe there are some rules that let it ignore them starting at some points such as an external parameter entity reference where something will be missing. 
If there are tests, they should be clearly labeled as for default attributes in internal subsets -- which are seldom used. 
As people will compare the results, there has to be clarity about what was tested. 
I believe each implementation must clearly list what it did and did not pass. 
If one set of results are given as though they are for the same implementation, and two implementations are being used to satisfy the requirements, that seems wrong. 
If IE has two implementations, then there are two sets of results. 
If the test suite is broken into modules so that you can say "not tested" for one of the modules, that seems appropriate, because it, too, clearly shows that individually the implementations do less. 
My 2 cents, anyway. 
Ray Whitmer rayw@netscape.com 
From: Curt Arnold [mailto:carnold@houston.rr.com] IE programmatically implements DOM Documents as ActiveX objects. 
So, I guess some of the test that require this, use (in JavaScript) var myDomDoc = new ActiveXObject("Msxml2.XMLDOM"); 
You may encounter an msxml version_dependent_ProgId like Msxml2.XMLDOM.4.0. 
The above is IE specific. 
Mozilla instead uses the factory style (as DOM Level 2 likes it): var myDomDoc = document.implementation.createDocument("", 
"", null); Anyway, it should be something like the above situation: need of vendor dependent code and lack of browser sniffing. 
I'd be happy to give a hand fixing this if you pass it on. 
Manos To get to the call to new ActiveXObject, the browser must be identified as IE. 
For Netscape or Mozilla to be falsely identified as IE, navigator.appName 
must contain "Microsoft" and not contain "Netscape". 
That does not occur with Mozilla on any of the versions and platforms that I've tested. 
What I wanted was something like, when running Mozilla 0.9.8 on OpenVMS, I get a message that ActiveXObject is not defined. 
The value of navigator.appName is "Mozilla (not Microsoft)". 
However, I've incorporated the logic from detect Navigator 6 and Mozilla. 
However, since I don't have access to whatever Mozilla browser that confounds the existing logic, I can't tell if it fixes the problem. 
I'll be committing some changes to DOMTestSuite.js in just a few moments. 
The report that Mozilla attempted to run the ActiveX object is a red herring due to a misunderstanding in verbal communications with a member of the DOM WG. 
As far as I know, no one at Netscape made such a claim. 
The issue with sniffing is that it is too restrictive. 
The relevant message to this list is from Dimitris on 2/20/2002 at 1:24PM From the top of my head there are the following issues brought up by Netscape representatives (they will send a message to this list after having checked thouroughly): 1. Browser sniffing -- it seems that the sniffing is not elaborate enough, makes Mozille, for example, run code with calls to an ActiveX object. 
2. Tests on default attributes require a validating parser, which is not a requirement (for XML), for HTML default attributes need to be there. 
The issue is then that the TS tests the XML appclication DOM, not the browser DOM The issue with MSXML vs. Native browser implementations is another issue. 
/bc Manos, any help in the DOM TS is appreciated, we are expecting to ship an updated version of the DOM Level 1 TS in about a month since we will have some HTMl tests to work with. 
Your work will be appreciated. 
/Dimitris From: Curt Arnold [mailto:carnold@houston.rr.com] 
My bad, should have been clearer on that, however the minutes from that telephone conference seem to endorse my interpretation of what the netscape representative claimed. 
That is member only information, so I cannot point to it. 
/Dimitris 
