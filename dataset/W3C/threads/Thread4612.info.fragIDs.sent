I'm sorry if this has already been discussed, but I couldn't find a discussion of how client-side transformation of multiple result-documents will be handled (in web browsers, for example). 
Thanks for these comments. 
Browser vendors have been involved in the 
discussions of these XSLT facilities, but the exact way that multiple result trees might be handled in the browser is not something that the WG considers within its scope - it's a product issue. 
I can only speculate about how browsers might choose to map the abstract concepts in the specification to 
concrete concepts in their implementation. 
The original drafts of the specification caused some resistance because they were written in a way that appeared to restrict implementations too much. 
This obstacle seems to have been cleared, and we can now only wait to see what implementors choose to do. 
Mozilla currently uses XSLT(1) transoformations to display web content. 
However, if multiple result-documents are returned, the browser needs a way to choose an initial result For example, I will pose a hypothetical docbook transformation that separates the transformation results into a TOC, a page for each chapter, and an index. 
These pages will need to link together in various ways. 
1) is there a mechanism for a browser to know which result-document is the "default"? 
We have tried to avoid giving preferential status to any one result tree, though in practice there will often be one that is output "first". 
An implementation might attach special status to the result tree that is created implicitly, without using an xsl:result-document instruction, or it might impose some convention on the URIs that are used. 
2) is there a URI by which each result can be accessed individually? 
Yes, the href attribute of the xsl:result-document defines a URI which is intended to provide some kind of handle by means of which an API might access each result tree, or an implementor could define some kind of mapping from these URIs to the names of frames or other browser GUI objects in which the result trees are to be rendered. 
3) is there a method that can link from one result-document to another? 
Yes, we have taken care to specify that the URIs provided in the href attribute can be used to link from one tree to another. 
The idea is that you would probably use relative URIs for links within the collection of result trees, so that they would survive serialization to any particular location on disk. 
It seems that these would be a necessity if XSLT2 is to be used in any interactive client-side situation. 
If this has not been resolved, I would propose a URI scheme to handle this situation: xlst:source-xml!transformation!result-document 
I don't feel qualified to judge whether the scheme you propose would be 
useful; this is something we are leaving entirely to the browser implementors. 
Many thanks for the comments. 
This area probably hasn't been discussed as much as it should be. 
Michael Kay 
source-xml = relative or absolute URI (exclamation marks must be escaped; relative to linking document) transformation = relative or absolute URI (exclamation marks must be escaped; relative to source-xml, may be left empty for default stylesheet specified by ?xml-stylesheet? or other mechanisms) result-document = relative or absolute URI (exclamation marks must be escaped; relative to source-xml) Examples: xslt:http://www.abc.123/docbook.xml!http://www.docbook.org/doc 
book.xslt2!index.html 
retrieves the source http://www.abc.123/docbook.xml 
transforms it using http://www.docbook.org/docbook.xslt2 
displays the result-document http://www.abc.123/index.html 
xslt:http://www.abc.123/docbook.xml!!index.html 
retrieves the source http://www.abc.123/docbook.xml 
transforms it using the default stylesheet displays the result-document http://www.abc.123/index.html 
After further reading, I now understand that the href specified in result-document is relative to an implementation-defined URI. 
And that the nature of this URI is outside the scope of the XSLT spec. 
However, I still feel that a standardized protocol for (absolute URI) linking to result-documents would be a significant aid, even if these links were transformed internally by browser implementations to other 
formats. 
Is there a WG to consider the xslt: URI scheme as a separate spec? 
--BDS 
I don't think this is within the scope of the XSL WG's activity. 
Although the activity seems worthwhile, I don't think I can offer advice on how it would be best to pursue this: you need to talk to other vendors in the same line of business to see whether there is scope for agreeing a common approach. 
Michael Kay 
Hi Michael et al, I'm peer of XSLT in Mozilla and would like to give my own two cents on the ideas around xsl:result-document in a webbrowser environment. 
Thanks for your note, this is very useful input. 
Upfront, I really like the idea of having multiple output documents in a publishing and maybe even a server environment. 
In a webbrowser on the other hand, xsl:result-document raises quite a few issues on the sandbox. 
One issue is already dealt with, making absolut URIs in xsl:result-document having implementation defined constraints. 
Reading the WD-xslt20-20030502, I don't see the chance to have implementation defined constraints for relative URIs, though. 
The thinking here is that there are no security/sandbox issues in creating a 
result tree, only in serializing it to persistent storage. 
We tried to separate the two things. 
Perhaps we have stretched things too far with the 
notion that a URI can be used to refer to a resource (a result tree) that is 
not persistent. 
The thinking is that you can create as many result trees as 
you like, using any URI that you like, and the transformation API then gives you a way to access these (in-memory) result trees using these URIs as a handle. 
Security concerns only kick in if you try to serialize the result tree to persistent disk storage. 
Very good point, I see the difficulty: and off-hand, I don't see an easy solution. 
Perhaps the handles that are used to refer to in-memory result trees in the API should not be URIs at all; but the problem of defining cross-links between multiple result trees remains. 
Perhaps we need a new URI scheme? 
Now take this to a scenario of a site with split responsibilities. 
Most major sites probably are, and it goes down to simple things as user areas like http://www.junk.net/~whoever/. 
Having no restrictions on relative URIs in xsl:result-document enables a webauthor of one part of the site to shadow pages done by other entities. 
One can really go on and find stranger scenarios. 
But I don't wanna be a bore. 
Not more than necessary. 
I'm not sure I understand this scenario in detail, but I get the general thrust. 
I don't think the WG will have any difficulty allowing the implementation to impose further restrictions, and I will put this on the agenda as issue 183. 
Many thanks for the feedback, Michael Kay 
creating a 
with the 
that is 
trees as Unfortunately, in a client-side implementation this assumption is incorrect. 
A browser uses security checks based on the URI to determine whether a page (a result-tree in this case) may link images, frames, and scripts, whether cookies are available to a page, etc. 
I don't think this matters for the spec, because this security checking is really an implementation detail. 
But it would almost certainly require that any absolute-URI-result-tree be rejected for security reasons out of hand (as is allowed by the spec). 
In addition, if relative URI's are used, the transformation has the potential to "shadow" other content, which is another security issue (also by the implementation). 
--BDS 
Hi Micheal et al. 
Hi Michael et al, I'm peer of XSLT in Mozilla and would like to give my own two cents on the ideas around xsl:result-document in a webbrowser environment. 
Upfront, I really like the idea of having multiple output documents in a publishing and maybe even a server environment. 
In a webbrowser on the other hand, xsl:result-document raises quite a few issues on the sandbox. 
One issue is already dealt with, making absolut URIs in xsl:result-document having implementation defined constraints. 
Reading the WD-xslt20-20030502, I don't see the chance to have implementation defined constraints for relative URIs, though. 
I'm fine with separating serialisation from XSLT, but as the xslt2 spec is more concrete on errors, it should give hints on where the serialisation module might bail. 
I couldn't find any hint on failure-to-write in the serialisation spec, btw. 
I could imagine a xpointer scheme serving good for this. 
Something like foo.xml#xslt-result-doc(part2/chapter5.html)id('target'), maybe xslt:result-doc? 
This has the downside that links between result documents look different when you view the result in a browser (or any other implementation that doesn't serialise) as opposed to when you serialize them. 
Having an xpointer scheme gives the chance to both specify the result document while still being able to identify fragments in the result doc. 
Not sure who'd do the work to actually propose such a scheme, but if we had it, something like this might give a good hint to implementations: Implementations that don't support serialisation MAY facilitate the XPointer scheme xslt-result-doc to expose result documents in their API. 
This would make result documents reside "inside" the source document and resolve all security issues in a non-serialized environment. 
Of course, serialising implementations may throw errors for any effective output URI, so the spec should mention both the error and that the implementation should define when it throws the error. 
(Didn't realise in my first answer that this problem is at least as prominent in implementations that do serialize as in those that don't.) 
Now take this to a scenario of a site with split responsibilities. 
Most major sites probably are, and it goes down to simple things as user areas like http://www.junk.net/~whoever/. 
Having no restrictions on relative URIs in xsl:result-document enables a webauthor of one part of the site to shadow pages done by other entities. 
One can really go on and find stranger scenarios. 
But I don't wanna be a bore. 
Not more than necessary. 
My pleasure Axel 
