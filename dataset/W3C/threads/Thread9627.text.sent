Following up on Frank's excellent reification process, and the decision we made last week support the provenance use case, I'm wondering if we can move forward on reification. 
I wonder if at this weeks telecon we can decide that the answer to the question: Does stmt1 rdf:type rdf:Statement . 
stmt1 rdf:subject subject . 
stmt1 rdf:predicate predicate . 
stmt1 rdf:object object . 
stmt2 rdf:type rdf:Statement . 
stmt2 rdf:subject subject . 
stmt2 rdf:predicate predicate . 
stmt2 rdf:object object . 
stmt1 property foo . 
entail: stmt2 property foo . is NO. Regarding Graham's entailment: ex:subj ex:prop ex:obj . 
entails _:r rdf:type rdf:Statement . 
_:r rdf:subject ex:subj . 
_:r rdf:predicate ex:prop . 
_:r rdf:object ex:obj . 
Whilst I see the sense behind it, I'm a bit concerned by the practical implications of all the statements in my graph entailing their reifications. 
So from a standpoint of simplicity and pragmatics, I propose that there are NO other entailments in the model theory to do with reification. 
Brian I hope so too. 
Brian-- What do you see the practical implementations of this entailment being? 
Given the view of as a "stating" (inscription, statement occurrence, aka "triple"), I don't see how we can logically (?) deny that the presense of this triple entails that "there exists a statement with [such and such characteristics]". 
Haven't we just said it? 
Does the problem have to do with what we say instances of rdf:Statement are (statements or triples)? 
I.e., we can't say "there exists a statement..." because it isn't one, it's a triple? 
A more practical issue, it seems to me, is that even if all the statements in your graph entail their reifications, what's the point? 
There's no way (in RDF) to associate any generated reifications with the original triples. 
Conversely, if I have some way of identifying triples by associating URIs with them, I can define triples expressing provenance or anything else about them without any special reification syntax. 
Mind you, given that I can identify individual triples in this way, I still might find it useful to have a "standard" vocabulary, like rdf:predicate , for referring to the various parts of the triples, but that wouldn't necessarily have anything to do with provenance. 
--Frank Frank Manola The MITRE Corporation 202 Burlington Road, MS A345 Bedford, MA 01730-1420 I agree. 
Haven't we just said it? 
Does the problem have to do with what we say instances of rdf:Statement are (statements or triples)? 
I.e., we can't say "there exists a statement..." because it isn't one, it's a triple? 
Nah, its just that if I've got an "inferencing model", our term for an implementation of a graph that implements the closure rule, I'll have all these entailed reifications which are just so much junk getting in the way. 
Yes. 
Much better put; I think that's what was really on my mind. 
Brian Right. 
My original idea was something like that even if you were somehow "logically compelled" to admit these entailments (by which I meant they would be proper if you did them, although I didn't think you actually had to), there wouldn't be any reason to do them. 
Pat's comment on the "logical compulsion" aspect that "the 'world' being described by an RDF graph isn't required to include the graph itself" was further clarification. 
--Frank Frank Manola The MITRE Corporation 202 Burlington Road, MS A345 Bedford, MA 01730-1420 
