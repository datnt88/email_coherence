From: W. Eliot Kimber eliot@isogen.com 
Nothing is "returned"; you don't "get to a document". 
Pointers address data structures in memory, not literal documents. 
Yeah yeah, but that does not answer my question, at least the one I was trying to ask. 
One more try. 
Let us have linking element: a XML-LINK="SIMPLE" SHOW="REPLACE" ACTUATE="USER" 
HREF="http://www.elsehwhere//other.xml?XML-XPTR=ID(chap1.section2)..ID(part1.section3)" 
I traverse that link. 
I understand the server-end constructs (or has) a grove for that document, and 
selects or marks (or whatever) the appropriate nodes as the resource. 
I am in a browser. 
I expect a replacement text. 
In what form does the resource get back to me to 
replace my existing text? 
It cannot be XML as it is, because it will not be well-formed, unless we define some conventions. 
Are you proposing now some binary grove-to-grove transfers instead? 
In all of these discussions, it's critical to keep separate the source, which is what XML lang (like SGML) defines the rules for, and the parsed result of processing that source, which is what XML Link (like HyTime) operates on. 
Once the documents have been put into memory, issues like well-formedness and even validity go away, because those are syntax issues, and syntax is transcended once the document is parsed (and only resurface when you want to create a new source document). 
Yes. But the document is in the memory of the server, and I want my fragment in the memory of the client. 
What have I missed? 
Is this in fact impossible in XML, and the XPTRs only 
allow such fragments to be located and then used on the server? 
(That would be fine, but it is not at all clear.) Rick Jelliffe 
I have been through the same problems as Rick, and I think they stem from too concrete a view of what XML-LINK is. 
I'm taking bandwidth partly to suggest that additional background information to XML-LINK would be extremely valuable in the July1 draft; for example, pointers to Eliot's XML-DEV posting (or excerpts from it). 
Recent postings have mirrored some of my early misconceptions about XML-LINK - that it was concerned with presentation, with documents, etc. 
The TEI heredity is valuable, but may suggest that XML-LINK is primarily linked to text documents - it need not be and I certainly intend to use it in other ways. 
I think that I had hoped there would be a generic 'link-processor' in the same way as a generic 'parser' for XML-LANG - and the spec used to have this phrase (I think it's disappeared?). 
So I envisaged a sort of 'HyTime-lite' which was able to be customised for various applications. 
This may still be possible but it seems like a lot of work. 
I shan't write it :-) So it seems to me that the answer to most of these questions will have to be 'it depends on the application'. 
That isn't a cop-out (as it may have been for some other issues). 
It's like saying 'what do you use references (pointers) for in Java?' The challenge for the ERB is to give readers some idea of what the syntax is for, whilst not predicating particular applications. 
For example, I have consistently argued against too frequent a use of the word 'text' in the spec, because there will be many applications with no text at all. 
I suspect that 'span' arises out of textual applications with the document viewed as an event stream. 
There are many applications where span is a meaningless concept, or when it is extremely likely that a given span would be illegal. 
Think of the target document describing one of the following: - a gearbox - a set of molecules - the British Royal family - the London Underground Here the links mighthave roles like: - meshesWith - isReactionProduct - isMarriedTo (this is now obsolete) - intersectsWith 
To parody this: HREF="http://www.elsehwhere//other.xml? 
XML-XPTR=ID(mol1.atom3)..ID(mol5.atom10)" 
This is obviously application-dependent and probably meaningless. 
Again a parody: I am in a browser [garage]. 
I expect a replacement text [gearwheel]. 
In what form does the resource get back to me to replace my existing text [part of my gearbox]? 
It cannot be XML [spans] as it is, because it will not be well-formed [so I'll choose a different XML construct]. 
What I initially missed as well :-) That the use of spans is only possible in certain applications, and that they have to be supported by application-dependent conventions. 
Spans are probably a poor way of passing electronic gearboxes, lines on the London Underground, call graphs for C++ programs, etc. P. Peter Murray-Rust, domestic net connection Virtual School of Molecular Sciences 
HREF="http://www.elsehwhere//other.xml?XML-XPTR=ID(chap1.section2)..ID(part1 .section3)" 
grove for that document, and 
resource get back to me to Ahhh, there's the problem. 
It is not meaningful to return "replacement text" for a span; at elast to a processor that's expecting XML. 
A span is not an XML document; that's the whole point. 
So why would you use them? 
Well, how about if I want to create a link to a particular location *within* an XML document. 
Let's say it's a phrase. 
In that case I almost certainly don't want some server to hand me back the phrase; if this is happening in response to a search for the phrase, asking for "foo bar" and getting back just the 7 character string "foo bar" isn't real useful; I can get that result with a lot less work (and without a network). 
In such cases, you want to retrieve an appropriate document context (maybe the whole document, maybe a predictable WF subtree like a SEC, maybe some dynamically constructed XML object). 
*That* thing forms the display context; then the receiving processor may operate on the span *in that context*. 
Like, it may scroll it into view and highlight it. 
A span is, for most purposes, only meaningful in relation to its context. 
Therefore any model that attempts to define what a span means *apart* from its context is doomed to bizarreness and/or failure. 
Steven J. DeRose, Ph.D., Chief Scientist Inso Electronic Publishing Solutions (formerly EBT) 
That may be in part because XML deleted the parts of TEI EPN that are used for pointers to other kinds of data. 
:) 
Perhaps, though probably not so much "text" as "sequential" or "ordered". 
There are kinds of ordered data other than text, and for many of them span would also be meaningful. 
But certainly there is data for which spans (or trees) are not meaningful, or not very useful. 
Note that your examples are ones of that form: where serial order is not an inherent part of the data's meaning. 
This is true by definition in some kinds if useful data, such as relational databases; it is false by definition in SGML[1]. 
Nevertheless, both systems are powerful enough to represent each others' data somehow, but it gets real awkward real fast. 
[1] I say this because SGML's model depends heavily on ordering -- just look at content models, tag omission, etc. 
Of course you can create specific content model that happen not to impose orders or types; but that is comparable to adding serial-number fields to RDB records: possible, even meaningful and highly useful in some particular application contexts; yet not natural in the model, and hence likely to really bollix up implementations, particularly in terms of what they thought were optimizations. 
Steven J. DeRose, Ph.D., Chief Scientist Inso Electronic Publishing Solutions (formerly EBT) 
