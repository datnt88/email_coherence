Hi, (Note to screen reader users. 
This message uses the period in different types of representations. 
You might want to be sure that your screen reader will be reading the periods to you.) Here's the approach I mentioned on the last telecom call. 
When I was working on my browser, one observation I had was that accessibility of web pages could be significantly be increased by the browser's augmenting the presentation of the web pages with various types of annontation. 
A benefit to this approach was that adding annotation is pretty simple during the rendering phase. 
Another benefit was that it reduced the amount of work that had to be done by access technology. 
This annotation approach could be used for providing simple table navigation. 
Each cell in a serialized table could be rendered with a "table cell id". 
One possible format is t?.r?.c?. where each '?' is a null string or a number. 
The first number is a table number. 
The second number is a row number. 
The third number is a column number. 
(If a web page has only one table, the t?. part of the cell id could be dropped.) 
An example of a table with a television schedule could be written in a serial format with table cell id's like: t1.r0.c0. 
t1.r1.c1. 
Times t1.r1.c2. 
7pm - 7:30 pm t1.r1.c3. 
7:30 pm - 8pm t1.r1.c4. 
8pm - 8:30 pm t1.r2.c1. 
CNN t1.r2.c2. 
Viewpoint t1.r2.c3. 
financial update t1.r2.c4. 
Sports summary t1.r3.c1. 
Bravo t1.r3.c2. 
Theatre of enlightenment t1.r3.c3. 
Interview with Meryl Streep t1.r3.c4. 
Early movies t1.r.c. 
The t1.r0.c0. 
id represents the beginning of the table while id t1.r.c. is the end of the table. 
(Table cell ids for the header rows and footer rows would be written with 'rh' and 'rf' respectively replacing the 'r'.) (A useful browser feature would be to allow the blind user to control whether serialized tables would include table cell ids.) The blind user can then navigate through the table by using the basic text searching functions of the browser. 
(It has been interesting seeing how some of the discussion on search versus navigation paralells this approach.) If the blind user wanted to go to the cell in row 5 column 4 in table 2, the blind user only searches for text string t2.r5.c4. . 
If the blind user then wanted to go to the eighth column in the same row, the blind user just searches for c8. . 
If the blind user wants to move to the beginning of the first table, he can search for id t1.r0.c0. . 
Now if he wants to go down the third column, he searches for text string c3. . 
This can be made easier after reaching the first cell in the third column by using the repeat search key that browsers have or could have implemented. 
Similarly, the blind person could jump to the beginning of each cell by searching for text string .c . 
(Searching for the .c 
string might be frequent enough, that the browser might want to bind searching for that text string to a key.) One slight draw-back is that there is a possibility that the text strings may not be unique to cell table ids. 
However, the design of the table cell id format is such that the chances of a text string not being a table cell id is quite minimal. 
An additional benefit to the table cell id approach is that since the cell ids are generated by the browser, a blind user can use the same navigation technique without learning a new one each time he switches access technology. 
Scott True table navigation would allow the user to find out where they are in the table, and would apply either the algorithm specified in HTML 4 or use the TABLE attributes and elements to provide additional context, such as headers which apply ot the current cell. 
It would then enable movement to the next cell in a row or column, or along an arbitrarily defined AXIS. 
This is the kind of implementation that would be ideal. 
A User Agent which allowed the user to navigate within a page by element, traversing or ascending/descending the document tree, would provide some of these functions. 
It would be possible to move across a row, cell by cell, or to move up and down rows. 
This provides no context information, and requires the user to remember where they are. 
This strikes me as the minimum acceptable native implementation, assuming that all the information is exposed for a 3rd party product which actually does the job properly. 
Charles McCathieNevile to follow up on what Charles McCathieNevile said: Element navigation could be limited to walking the parse tree, but let us not assume it would. 
In the case of tables there is defined column semantics. 
Column traversal could also be supported as navigating the structure defined by the markup. 
The range of verbs available for navigation among the elments of the document, and the extent of display within the local neighborhood of the logical web around that element are mix-and-match independent channels in the composition of a solution. 
And it makes sense for the browser itself do do some of each. 
We keep bumping into methods that are feasible through what is now called style. 
CSS2 allows the style rule to query the TITLE of a link source and inject the TITLE text in a .before 
pseudo-element. 
Likewise if we were to define a computed pseudo-attribute I-am-a and give it a value of the closesest preceeding TH in the current column and a computed pseudo-attribute I-go-with with the value of the closest enclosing TH in the current row. 
This allows what has sometimes been called a readout rule to be constructed such as "The I-am-a of I-go-with is current element contents ." 
The relationships defined by the document are not just the parse tree. 
Column membership and headers=idref attributes are examples of graph relationships beyond the tree that are clearly identified without any guessing by the markup in the document. 
And we can consider asking the browser to do a little guessing. 
There is plenty of precedent for that in successful browsers. 
[One tactical problem is that HTML4 fails to recognize the distinction between I-am-a and I-go-with relationships.] 
These relationships can be exploited as navigation paths and information retrieval channels for adaptive presentation, as Scott pointed out with his expanded presentation examples. 
This is just a little more of what has been demonstrated to be beneficial. 
Consider the examples of tool tips populated with the TITLE attribute, and the role cues of "link" etc. that clearly are a help in pwWebSpeak. 
Here are the sorts of things that I can imagine asking browsers to do. 
1. Support a effective-headers pseudo-attribute for all table cells. 
This is where the guessing algorithm goes: it populates this pseudo-attribute. 
Effective-headers inverts the SCOPE indication and adds in guessing rules to come up with a list of the elements forming the logical neighborhood of the current [TH or TD] element. 
2. Subclass effective-headers into i-am-a and i-go-with sublists. 
Note that row and column indications are possible values for these. 
For example i-am-a="column 3", i-go-with="row 7". 3. Expose the pseudo-attributes defined above so that they can be accessed from style rules as attribute values are retrieved. 
4. Support this attribute-retrieval function of CSS2. 5. Support the .before and .after 
etc. per ... 6. Support structure navigation of row and column substructures in the context menu for any table cell. 
Priorities: top: next/previous in substructure mid: home in substructure (probably first; possibly key) trace about- or meta relationships (i-am-a relationships) least: pick-from-list for contents of substructure (value of query) pick-from-list for superclass tree adjust readout pattern for class of current context 7. Support enough elment navigation so that the user can navigate the current selection to an arbitrary table cell. 
