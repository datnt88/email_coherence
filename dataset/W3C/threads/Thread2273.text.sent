The Apache mailing list stumbled on this problem when discussing multiple Content-Encodings in a document. 
[David] HTTP/1.0 does not support multiple content-encodings. 
HTTP/1.1 suggests an implementation of multiple content-encodings which is broken; the ordering of the encodings is not defined. 
I'm sure I mentioned this on http-wg, but I can't remeber the outcome. 
Roy? 
That is, the ordering *is* defined if it appears in a single Content-Encoding header, but the spec leaves some margin if you have several ones that you want to collapse. 
draft-ietf-http-v11-spec-01.txt says [section 10.10] If multiple encodings have been applied to a resource, the content codings must be listed in the order in which they were applied. 
But, as Brian pointed out, it also says [section 4.2] The order in which header fields are received is not significant. 
and It must be possible to combine the multiple header fields into one "field-name: field-value" pair, without changing the semantics of the message, by appending each subsequent field-value to the first, each separated by a comma. 
Which is clearly broken, the semantics *is* changed. 
Has this been resolved/discussed ? 
Can Section 4.2 make an exception about ordering for the Content-Encoding headers, or is this too ugly ? 
-- Florent [David] HTTP/1.0 does not support multiple content-encodings. 
HTTP/1.1 suggests an implementation of multiple content-encodings which is broken; the ordering of the encodings is not defined. 
I'm sure I mentioned this on http-wg, but I can't remeber the outcome. 
Roy? [Florent] If we're going to make exceptions, it would be more usual to say that 'Content-Encoding' can only occur once, and that if there are multiple encodings, they must appear ordered and comma separated in a single header. 
In any case, if HTTP/1.1 is going to support multiple content-encodings, this must be resolved, else we'll revert to the 1.0 situation and try again in 1.2. 
I'll make sure this gets on the issues list. 
I think the problem here is language. 
As a general rule the order in which differently tagged headers appear is not significant, the order in which tags of the same name appears is significant. 
A proxy may alter the order of differrently named tags but not the order of tags with the same name. 
This area impinges on the PEP proposal, PEP is in part intended to solve this problem. 
Consider a document which is compressed, signed and encrypted in that order. 
It is essential that the transport prserves the information that this is the order in which the transformations occurred. 
The content encoding model is unfortunately limited. 
I don't think we should try to fix it now. 
I have a feeling that Jim and Larry would be upset if we were to start. 
Phill I wrongly assumed that, because the two statements were right next to each other, readers would understand that the second is an exception to the first. 
However, seeing the mass of confusion even among people who understand the protocol, I suggest the following wording change from draft 01, section 4.2: *** draft-ietf-http-v11-spec-01.txtMon 
Feb 12 16:37:14 1996 --- order.txtFri 
Apr 12 08:03:29 1996 *** 1464,1483 **** ! 
The order in which header fields are received is not significant. 
! 
However, it is "good practice" to send General-Header fields first, ! 
followed by Request-Header or Response-Header fields prior to the ! 
Entity-Header fields. 
Multiple HTTP-header fields with the same field-name may be present in a message if and only if the entire field-value for that header field is defined as a comma-separated list [i.e., #(values)]. 
It must be possible to combine the multiple header fields into one "field-name: field-value" pair, without changing the semantics of the message, by appending each subsequent field-value to the first, ! 
each separated by a comma. 
--- 1464,1485 ---- ! 
The order in which header fields with differing field names are ! 
received is not significant. 
However, it is "good practice" to send ! 
General-Header fields first, followed by Request-Header or ! 
Response-Header fields, and ending with the Entity-Header fields. 
Multiple HTTP-header fields with the same field-name may be present in a message if and only if the entire field-value for that header field is defined as a comma-separated list [i.e., #(values)]. 
It must be possible to combine the multiple header fields into one "field-name: field-value" pair, without changing the semantics of the message, by appending each subsequent field-value to the first, ! 
each separated by a comma. 
Thus, the order in which multiple header ! 
fields with the same field-name are received may be significant to ! the interpretation of the combined field-value. 
...Roy T. Fielding Department of Information &amp; Computer Science (fielding@ics.uci.edu) 
