A nice Friday afternoon (at least where I am) question for the list: although the HTML4.1 specification states that onclick "occurs when the pointing device button is clicked over an element" (see admittedly limited - testing I have found that it's also triggered by keyboard in the usual way in most (if not all) browsers (i.e. if it's 
applied to a link, tabbing to said link and hitting return/enter will trigger the onclick event - provided js is enabled, of course). 
So, my question would be: as there's contention as to what the device-independent handler equivalent to onclick is (as onkeypress just seems to be too generic in that it will be triggered by any key...and also would seem like complementing a device-specific handler with yet another device-specific one...what about things like voice activation in this context ?)...what's the deal ? 
Is onclick simply a misnomer, and it should be handled as if it was something like "onactivation" (as in practice it seems to work in a 
device-independent manner) ? 
(this last point seems to be what Shadi workshop in Madrid) Thoughts and comments highly appreciated, Patrick Patrick H. Lauke Webmaster / University of Salford 
Yes, of course. 
To do otherwise would be to cripple mouse-free browsing. 
The deal is merely that the word "click" triggers a Pavlovian response 
in some zealots, blinding them to the observation in your first paragraph. 
So it gets labelled as device-dependent. 
In an environment where consensus is an issue, that leads inevitably to muddle and confusion. 
Exactly. 
Though calling it a misnomer is perhaps unduly pedantic. 
Click is after all the "expected" event, and the others are just obvious substitutes. 
There are genuine device-dependence issues in scripting events. 
But the naming of onclick() isn't one of them. 
Nick Kew 
as I suspected, Nick...just wanted to get a second opinion (particularly seeing that even organisations such as the RNIB still promote the twitchy onclick=mouse=device-dependent view, and suggest using onkeypress in conjunction with it) Cheers for confirming my suspicion, Patrick 
Even that is questionable, but the real problem with "click" is its use in the text of web pages (the ubiquitous "click here" "button"). 
Authors use it because they think that users are too stupid to understand the concept of a hyperlink. 
However, it seems that only mouse or tracker 
ball users are allowed to be stupid. 
Keyboard users have to be able to generalise the literal instruction to a mouse user, even if mouse users are assumed incapable of such abstractions. 
This is a bit like the designers' rights line on accessibilty: that a site is accessible if it is possible to use it using expensive software whose operation you know inside out. 
Basically that means that things 
only need to be accessible to those people whose level of intelligence makes them employable in spite of their disabilities and by being employed, can afford (or more likely have given) expensive tools. 
(For a language called *Hypertext* Markup Language, modern commercial pages using it are remarkably free of hypertext.) 
I believe browsers that interpret keyboard operations as equivalent to click are exceeding their terms of reference, even if the net effect is desirable. 
Basically, author reliance[2] is based on a de facto 
standard, reverse engineered from browser to browser, or introduced as a work around for bad design practices[1], not on a W3C standard. 
If the intention is that click should mean activate, the W3C standards should have an errata added to that effect. 
[1] From what I gather, a lot of the anomalous behaviour for popular AT tools results from their being designed to work around bad accessibilty in real life sites, rather than working best with sites that used the accessibility features in the standards. 
[2] If the truth be told, authors don't rely on this, because they don't even consider the issue in the first place. 
I can't imagine many people 
even include keyboard operation in their acceptance test plans. 
We've switched topic here. 
But since you're responding to my little friday-night rant, let's pursue it. 
"Click Here" is indeed widely misused. 
But I wouldn't accept that it is *automatically* wrong. 
Indeed, the fact that it has entered common parlance on the web might itself be seen as a justification for it: this is a familiar idiom, and as such serves usability. 
I wonder if there's a valid analogy to use of language here. 
I have a gut-level aversion to the split infinitive. 
Not everyone shares it. 
So some people express themselves in a manner that grates with me, and vice versa. 
Perhaps use or active avoidance of "Click Here" could be seen as broadly similar? 
I think you may be over-rationalising a process. 
It's more a matter of history than stupidity. 
"Click here" has been with us significantly longer than W3C or WAI. 
This seems to me to be turned on its head. 
As you know, I am strongly and consistently critical of that line (in contrast to, for example, RNIB, whose Julie Howell was on Radio 4's "In touch" program earlier this year saying she would only support blind users if they *were* using the most up-to-date and expensive technologies). 
The client issue here is support for Javascript, and the accessibility issue is provision of a valid alternative. 
No more, no less. 
Let me assert that "client support for Javascript events implies client support for onclick()", and challenge anyone to find a counterexample. 
Indeed, no argument there, except that it's scarcely a new observation. 
Once again I have to disagree. 
It would be manifestly wrong for a browser to (claim to) support Javascript yet fail to support the core onclick() event on dogmatic grounds. 
Maybe they should, but browser developers appear to share my view and regard it as self-evident. 
Let's consider the relevant DTD fragment: !ENTITY % events "onclick %Script; #IMPLIED ondblclick %Script; #IMPLIED onmousedown %Script; #IMPLIED onmouseup %Script; #IMPLIED onmouseover %Script; #IMPLIED onmousemove %Script; #IMPLIED onmouseout %Script; #IMPLIED onkeypress %Script; #IMPLIED onkeydown %Script; #IMPLIED onkeyup %Script; #IMPLIED" If we take onclick as a mouse-only event, then there is no valid alternative for other devices (onkeypress being *more* device- dependent, due to the additional information associated with a key). 
So the only rational course for a browser to take is to implement it in whatever manner is appropriate to the browser's UI. 
I'm not sure I quite follow that. 
Counterexample: me. 
Nick Kew 
