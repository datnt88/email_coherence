From: Tim Bray tbray@textuality.com 
Everyone send in strings they have *actually* wanted to use as 
unique 
IDs. ...If you ever changed your SGML declaration to add a symbol to namechar, that would be 
acceptable 
too. 
nh=10 
No conceivable path of adding things to Namechar is a reasonable solution. 
-T. 
But you have just given ":/?=;". 
That satisfies your example. 
On thing that having all the types of internal names having the same rules gives us is the ability to use attribute value lists to actually point to names: If Tim makes up his document where every 'ID' is a URL, and I want to make up a DTD that gives the user a choice of selecting some parts of it: !ATTLIST xxx inTim( 10 |http://www.infoseek.com/Titles?qt=alchemy;col=WW;sv=IS;lk=noframes;nh=1 
0 
I currently can do it, by adding ":/?;" to the NAMECHAR. 
I can also use attribute value lists to nominate element types, attribute identifiers, notations, etc etc. 
All the same mechanism. 
If we abolish IDs in favour of unique CDATA, we lose this kind of ability, without then adding another layer of indirection. 
And we complicate the syntax of anything that tries to use the unique CDATA as an ID. 
And we increase the difficulty of reading the markup. 
On the other hand, CDATA IDs would dump on us the nasty: xxx href="http://www.infoseek.com/Titles?XML-LINK=ID( 
))..ID( Which is nasty because there is a transition between query and ID that is not marked up: the outside () has a meaning as part of XML-link, the inside () are just characters in IDs. 
I think this is poor language design. 
We have just been removing overloading from SGML delimiters in XML. 
Surely it is inconstant to then reintroduce overloading en masse by allowing CDATA ID? Unless we then decide to have: xxx href="http://www.infoseek.com/Titles?XML-LINK=ID( 
'http://www.infoseek.com/Contents?XML-LINK=ID( &amp;apos;http://www.infoseek.com/book?qt=sophistry&amp;apos; 
)')..ID( 'http://www.infoseek.com/Titles?qt=tyromancy')" 
/ or xxx href="http://www.infoseek.com/Titles?XML-LINK=ID( 
[CDATA[http://www.infoseek.com/Contents?XML-LINK=ID( [CDATA[http://www.infoseek.com/book?qt=sophistry&amp;lsqb;] 
)]] )..ID( [CDATA[ to clearly markup the boundaries. 
Would the HTML people be happy about for example? 
I know this is a dumb thing to do, but is a dumb thing people can do, and it will be valid. 
Rick -Jelliffe Rick Jelliffe 
Do that and you can't use "/ " to end a tag. 
Dave Peterson SGMLWorks! 
davep@acm.org 
From: Dave Peterson davep@acm.org 
No, I think, because 1) all attribute value specs in XML have to be quoted 2) the longest delimiter rule in SGML will mean that a / is recognised correctly (I am not suggesting that " " should be a valid name character :-) 
Rick Jelliffe 
[Dave Peterson davep@acm.org 
] 
[Rick Jelliffe ricko@allette.com.au ] 
But NAME tokens are also parsed with the leftmost-longest rule, so " IMG/ " would be scanned as STAGO, NAME "IMG/", TAGC if "/" were a NAMECHAR. 
--Joe English joe@art.com 
Good point. 
So * soletag close delimiter is "\ ", or * people have to do IMG / , or * "\" is NAMECHAR (&amp; is the mandated delimiter for URLs) not "/", or * a name cannot end with NAMECHAR (given the SGML declaration I made up, where, I think, NAMECHAR only has punctuation characters) What a mess! 
I really don't think we should directly allow any characters that are in other XML delimiters inside NAMES (or inside any "unique CDATA IDs"). 
If we cannot use them in data, why should we be able to use them in markup strings? 
Rick Jelliffe 
