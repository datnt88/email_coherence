Since it's been mentioned before on this list I thought I'd ask here, though I suspect it isn't a WAI issue per se. 
Many on this list react to the javascript: protocol with garlic, the Latin Mass and the Lesser Banishing Ritual of the Pentagram. 
My question is, what exactly is the problem with it. 
Before answering, I do clearly see that it is a bad idea to use it somewhere were javascript may not be available; there one should use an onclick and in the onclick cancel the href which should point to a non-javascript alternative method of delivery of the same effect. 
I also acknowledge that it is rarely necessary (the only thing I can think 
of that can't be done another way is using it in the src of an img element, 
something I've only seen done once, and then as an example). 
However in a case where javascript is clearly available (something written 
from JavaScript for example). 
It is a slightly more eloquent and self-documenting syntax. 
So do people still see a problem with it in that 
case, and if so what exactly? 
"Jon Hanna" jon@spinsol.com 
There are huge problems with it in simply a javascript context, from a script authoring perspective it's one of the most common failings "why doesn't this work?" 
questions in javascript can very often be solved simply by stopping using it - http://jibbering.com/faq/#FAQ4_24 - (if you want details of scenarios where it causes problems feel free off-list.) 
think 
element, 
That's not actually feasible in many browsers even those that support the javascript pseudo protocol, using it for image editor is very limited. 
written 
that 
The existence of javascript does not imply existence of the javascript psuedo protocol, there are a number of browsers which don't have it - and it's even possible to configure IE such that it supports javascript but not the protocol (and there's at least one system in the world where this has happened.) There's also the case that javascript support does not necessarily mean support for your function, and you need to have some fallback for when your functionality is not supported. 
Consider: if (window.open &amp;&amp; document &amp;&amp; document.write) 
{ document.write(' 
a href="javascript:window.open(\'javascript:\\\'hello\\\'\');void 0" Hello /a ') If the javascript: protocol isn't supported you get a protocol error, which are particularly incomprehensible in almost every browser I've seen or if it is, and you say try to open it in a window yourself (which is a common occurance for links which authors want to open in new windows.) then you end up with 3 windows open, one completely blank - if it was a function that you referenced on the page (rather than window.open) 
you'd end up with 2 windows open one of which is giving a javascript error. 
You simply do not need to use the protocol, so as it's possible to fail, and it causes scripting problems you should avoid it. 
Jim. 
From a purist point of view, the thing before the : is not a protocol but a scheme; it identifies the format of the following data, which in turn represents a web resource. 
javascript: URLs don't identify a resource, they provide an action. 
As someone waid, either here, or on www-html, recently, links are nouns, but javascript: URLs are verbs. 
javascript is not a w3c product 
jonathan chetwynd on the web" learning difficulty get the most from the web" 
This was out of context and doesn't seem to follow from my posting, even though it was copied to me. 
To a first approximation, W3C has no products except documentation (Amaya, the CERN web server, Jigsaw, being exceptions, but not used in the mass market). 
The W3C does specify document object models, and those specifications include ECMA Script language bindings, which partially covers what is popularly called JavaScript. 
The popular definition also covers browser automation features like window.open, and has an extended definition of document.write, 
both of which are rather prevalent on real pages. 
They don't define the core language and core objects for ECMA Script, but the existence of the DOM implies some acceptance of it. 
However, the HTML specifications only provide scripting hooks. 
They don't require that browsers support scripting or do so with any specific scripting language, or any object model except one compatible with the events defined by HTML. 
