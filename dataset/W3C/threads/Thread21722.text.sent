In section 7.4 I'd like to see a seperate error code for the file picker to indicate when the specified file is not found. 
Lumping it in with other error coniditions will only generate confusion on the part of the user. 
You can't say the field needs to be filled out, especially since they would have to type in a value themselves to get that result. 
The others fit even less well. 
I really do like the user defined error status though. 
That's a really great idea. 
An error code for "mising file" would open the way to a privacy leak. 
I've added a section that says that the file upload control is simply not successful when it doesn't point to a valid file. 
as long as the webpage cannot modify the value of the file upload field (and therefore control which file is uploaded), I think it'd be fine. 
However, making the field unsuccessful is just as good. 
in 7.6, when you say "reset just the relevant control to its initial value," do you mean that the UA uses just the initial value specified in the value= attribute of the HTML, or is it supposed to also look in the file specified by the control's form's data= attribute? 
I meant the initial value, which is defined as the value given in the markup (value=""). 
Interesting point about resetting to the seeded value though, I hadn't thought of that. 
Also, the parts about the onformchange event aren't entirely clear. 
If the onformchange event on the first form control changes the value of a form control, does that cause another set of onformchange events, or are they batched up somehow? 
onchange is only triggered by _user_ initiated changes, so .value 
= "foo" can't change it. 
At least that's my intention. 
So the problem doesn't arise. 
Ah, ok. Section 4.4.1 completely lost me. 
As I understand it, you're saying that the onformchange event could take a stripped down form of javascript (ecmascript) simply because declaritive dependancies are easier to track. 
Why bother? 
The javascript interpreter that pretty much has to be built into any modern browser can already do that for the full js syntax (though perhaps that data is never exposed to the outside, and it'd probably take just as long as running the code in the first place to determine the dependancies, etc) Some people are against scripting. 
This is just explaining to these people that if they want to, they can use this without script. 
Against scripting!? :) The one large thing I'd do differently is the template/repeated block stuff. 
With the system here, you have to completely specify the form twice, first for the template and then for the first repeated block. 
What I'd like to do is be able to just put repeat="repeated" on an element and not put any content in it at all. 
The UA would take care of filling out the DOM with a copy of the template's children. 
On the other hand, maybe that's exactly what you had in mind and I just missed it. 
Hmm, yeah, I had intended to do that but forgot. 
I'll add it to my list of things to try and add. 
It also might be nice to be able to for a repeate block to be a copy of a template that isn't a sibling. 
Maybe, but that would be hard. 
I've yet to actually see a use case for that one. 
Seperate it into two attributes, template="true" and repeat="templateid" or something like that. 
As for a use case, wouldn't nesting repeat blocks keep the inner one from working? 
I'll have to go back and reread that section, since I didn't have any idea what you were trying to accomplish until I'd read the entire section, and could put all the pieces together into a concept. 
You should probably put some more explanation about what it's going to do at the beginning of the section, rather than just starting out with a description of the attribute to use, etc. Anyway, I think it's a great idea, even though it does make Page Info a little harder ;) Well, maybe we'll call it more interesting instead. 
:-) It actually shouldn't make much difference. 
You can still enumerate forms and you can still enumerate form controls. 
In fact it might even be easier, since you get the implied form now. 
Let me know if you want anything added to the DOM to help with that. 
Obviously page info would need to list the template and repeated blocks seperately. 
I'll also have to go strictly off of the HTMLFormElement.elements list, but I think there's already a mozilla bug on that already because page info fails to find some fields for invalid forms that mozilla fudges. 
And putting a form element in the head of a document would just feel weird. 
I hope nobody really wants to do that :) HTMLFormFields.templateElements 
gives me the controls in the template, which is good. 
I'd like to be able to get an array of HTMLCollections to represent the repeated blocks though. 
That could turn out to be a problem since repeated blocks can nest. 
I really have no idea how that would/should look in page info. 
Can you nest forms? 
I'm pretty sure you couldn't in XHTML and I didn't read anything in this proposal, so I guess not. 
I hope not :) db48x An error code for "mising file" would open the way to a privacy leak. 
I've added a section that says that the file upload control is simply not successful when it doesn't point to a valid file. 
You'd be surprised how easy it is to get people to do stuff like copy filenames into file upload fields. 
The less rope we give them the better. 
Good good. 
Some people are against scripting. 
This is just explaining to these people that if they want to, they can use this without script. 
There are good theoretical reasons to be against scripting. 
:-) It also might be nice to be able to for a repeate block to be a copy of a template that isn't a sibling. 
Maybe, but that would be hard. 
I've yet to actually see a use case for that one. 
No need for the expense of multiple attributes, the attribute is already a multitoken field. 
No, I was careful to make that work. 
You should probably put some more explanation about what it's going to do at the beginning of the section, rather than just starting out with a description of the attribute to use, etc. Yeah, I'll do that. 
Obviously? 
Why would anyone care? 
(Then again, I've often wondered that about some of our current Page Info features.) Repeated blocks aren't associated with forms necessarily. 
You can repeat anything you like. 
Can you nest forms? 
I'm pretty sure you couldn't in XHTML and I didn't read anything in this proposal, so I guess not. 
I hope not :) Yes, you can. 
Well, more to the point, the form attribute means that forms can be intertwined. 
Ian Hickson )\._.,--....,'``. 
fL U+1047E /, _.. \ _\ ;`._ ,. 
It also might be nice to be able to for a repeate block to be a copy of a template that isn't a sibling. 
Maybe, but that would be hard. 
I've yet to actually see a use case for that one. 
Oh, I see. 
The inner template gets copied into each repetition of the outter. 
That makes sense. 
What still doesn't make sense is why you bother making it a multitoken field when you could just use two attributes. 
A multitoken field means that everyone that deals with the attribute has to parse it for himself. 
This includes the UA, the webpages themselves, and chrome level stuff like page info. 
Plus you have to specify new parsing rules about leading whitespace and extra trailing tokens and so on. 
Seperating it into two normal attributes simplifies it for everybody and reduces the number of places that will parse it incorrectly. 
Ah. 
In that case, there's no reason for the form tab to single the information out. 
In fact, it begs the question: why is this in a spec about forms? 
In fact, rereading the section makes me wonder just how good the idea is. 
Obviously it's something that'd be great to have, but I think the execution isn't quite right. 
In the typical example of a multirow form (a purchase order, or whatever) each row ends up with a 'delete this row' button, a 'move up' button and a 'move down' button. 
In order to move a particular row down by three rows, you have to click it's 'move down' button, move the mouse down a row, click the 'move down' button, move the mouse down a row and then click the 'move down' button a third time before it's there. 
What is really needed is a way to put the buttons off to the side, so that a particular row can be selected, then a single move down button clicked on three times, with no movement in between. 
Perhaps checkboxes to indicate the selection, or use the normal click-and-drag text selection to indicate which row(s) to move. 
Or, horror of horrors, putting everything inside a select size="" field. 
:) Can you nest forms? 
I'm pretty sure you couldn't in XHTML and I didn't read anything in this proposal, so I guess not. 
I hope not :) Well, as long as you can't nest the actual form nodes ( form input/ input/ form input/ input/ /form /form ), then I don't have a problem with it. 
In either case, if all I'm concerned about is page info I can leave it up to the UA to decide which control goes with which form. 
It does mean that I have to do a little extra work to find all the label s for the controls; the current page info code assumes that label s are always descendants of the form . 
It'll probably just have to grab a list of all label s in the document instead of just those in the form . 
Backtracking up the descendant tree won't work, because it won't catch db48x Global attributes are expensive. 
Don't forget that these attributes can apply to _every_ single element. 
Keeping all the repeat stuff in one attribute makes it easier to manage. 
The DOM interfaces provide DOM attributes to make this unnecessary, at least on the client side. 
Because it is needed by people using forms. 
It is very related to forms as far as authors go, it is only independent as far as implementations go. 
The DOM interfaces already enable authors to implement this pretty easily, but I don't know how you would do this declaratively. 
Any ideas? 
Why? 
I don't see how this is ever a problem (other than it probably being terrible UI). 
Take a look at the interfaces again, specifically: ...which I just added. 
Ian Hickson )\._.,--....,'``. 
fL U+1047E /, _.. \ _\ ;`._ ,. 
Well, you do have a point there. 
Just how expensive is a global attribute? 
It seems like you're trading a trivial amount of memory for a trivial amount of cpu time. 
You still have to acknowledge the cost to tools programmers who have to account for a non-standard attribute type, and authors who have to learn it, etc. 
It seems like it'd just be easier to go with two attributes. 
Also, I seem to have forgotten to mention that the second parameter for the repitition template (called index, but really just a count of the copies of the template) isn't really needed in the source, it could be exposed simply as a dom attribute. 
That, and you never specify that it's supposed to be decremented when you remove a copy of the template. 
That's either a simple omission, or it's just used as a way to make sure the next repitition block gets a unique index. 
The former is easily fixed, but I'm not sure the latter will work. 
For example, if I specify the index on a repitition block in my xhtml source code, I can easily make it larger than the current index on the template, which will result in duplicate index numbers when more repitition blocks are added by the user. 
Either way it's hard to tell because the purpose of the number isn't explicitly stated. 
Sure, just make form something that knows which of it's children are selected, and draws them appropriately. 
Something like this: Obviously the form tag would be a bit different than we use today, and you wouldn't be able to put it in the head , it'd have to go places it's never been allowed but where people have always put it anyway, etc. 
I'm sure there are plenty of details to work out in that situation, but it is 5 am :) Right, it just makes a terrible UI. Yes, that is awesome. 
Really, I don't know why I didn't think to ask for something like that. 
It's probably unnecessary, but I think you should specify that the list is in document order. 
db48x It's expensive in terms of intrusiveness. 
In the middle of a MathML document you don't suddenly want half a dozen attributes from another namespace -- if you can keep as much as possible in one attribute, it is generally, IMHO, neater. 
In any case, the repeat attribute is pretty simple now. 
It's only a keyword -- "template" or "repeated" -- optionally followed by an integer. 
What's the problem? 
Then they just need to account for two attributes, and authors have to learn it, etc. 
I don't see much advantage between: ...vs: It also means you have to define how to handle another attribute when it's where it shouldn't be, etc. 
I dunno. 
Maybe you're right. 
That number is just the initial index to use. 
It's not ever really useful to be honest. 
I don't see why anyone would really use it. 
Maybe I should just get rid of it. 
it could be exposed simply as a dom attribute. 
It is. 
repetitionIndex. 
It's not. 
That's what it's used for. 
The former is easily fixed, but I'm not sure the latter will work. 
The algorithm walks all the repetition blocks until the index is greater than all of them, and uses that for the new block. 
So why wouldn't it work? 
I've added a note to myself that I must explain it better. 
I'm confused as to why the form needs to have anything to do with this. 
There is not a 1:1 mapping of forms to repetition blocks. 
The two are designed to be independent. 
I don't see why you need the form in that example (not to mention form can't be a child of table ): Either way, that doesn't solve the problem -- how do you know which row is selected? 
How do you select a row? 
What if the "row" is actually a button? 
Oh, you wanted to make the form be a select widget or some such. 
That seems like excessive overloading. 
:-) Ian Hickson )\._.,--....,'``. 
fL U+1047E /, _.. \ _\ ;`._ ,. 
I just think it's neater to have one piece of information per attribute I guess. it could be exposed simply as a dom attribute. 
I meant that it could be omitted from the attribute completely and still be available through the dom. 
The former is easily fixed, but I'm not sure the latter will work. 
In that situation, the next repeat block would have an index of 9, right? 
Hmm, probably. 
Call it repititiongroup or something. 
It would catch onclick events as they bubble past, and have a property selected="" with the numerical index of the selected row, and would cause the :selected pseudo-class to apply to that row. 
db48x I've changed the way repetition works. 
What do you think of the new model? 
Hmm, interesting. 
I'll think about this some more. 
Not sure I'll add it to this spec but it is definitely something worth considering. 
Ian Hickson )\._.,--....,'``. 
fL U+1047E /, _.. \ _\ ;`._ ,. Yea, I like that. 
The non-normative stuff at the beginning of the section is great. 
I also like that you changed from underscores to square brackets, but if they're not allowed in IDs in XML... db48x 
