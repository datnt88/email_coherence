******Please note I'm writing these meeting notes without having read any traffic on this list server since last week's conference call ***** Because Charles' computer crashed, last week's conference call participants were each asked to write up a meeting summary. 
Main discussion was over authoring tools guideline 3.1, and the definition of prompting. 
I believe everyone shares the objective to get users to input ALTtext for images, however there was definite disagreement over how this objective should be accomplished. 
I remember Charles' opinions and most clearly --- ~"at some point during the authoring process (from when an image is inserted, to when the page is published to the Web) the author must be presented with the dialog that will allow the user to directly input the alternative textual information." 
To give authoring tools some leeway, and allow them to comply with authoring tools guideline 5, the suggestion for an accessibility option was introduced. 
This option could be off by default, and would allow the author to define how intrusive they want the application to be (i.e. no accessibility related warnings, warnings / alerts about potential accessibility problems, and forced prompts). 
Any tools that followed this suggestion would not be single-A compliance "out-of-the-box", unless the accessibility option was set to force prompts. 
A second voice of opinions indicated that warning or alerting the user of these types of accessibility problems would be sufficient. 
Authoring tools have a history of supporting their users in easily correct problems that they have reported. 
The example given here was accessibility error reporting tool. 
I still strongly believe that small modifications of users behavior are the only way that a majority of users learn new features or methods, and that is best understood by the individual authoring tools development teams. 
Prompting the user will only frustrate them, and cause them to turn off all related features (moving from forced prompts to no warnings - and is not a win). 
I personally feel that forcing the user to go through an accessibility checker (that warns/alerts the user to all accessibility related issues) is more beneficial to the WAIs overall goal of producing accessible HTML. 
Heather Swayne Program Manager Microsoft Accessibility and Disabilities Group Microsoft Office Liaison 
HS:: "Any tools that followed this suggestion would not be single-A compliance "out-of-the-box", unless the accessibility option was set to force prompts." 
WL: I believe that this misunderstanding is at the root of a problem we are experiencing. 
The configurability *INCLUDING THE DEFAULT SETTINGS OF THE VARIOUS ACCESSIBILITY FEATURES* does not affect the conformance level of the tool. 
That is my understanding. 
If the tool makes all the important features an integral part of the regular look/feel, (even though these features may be set to "off" by the user) it can be triple-A conformant - even if it is "shipped" in a default mode that some insensitive sales/marketing department has decided is the "best practice" for their customers. 
Even though many will have the opinion that: people don't want "in-your-face" warnings when they're creating Web materials; surveys show that these features aren't important to most purchasers - the market for accessible (for which read "usable") sites and especially tools that are easily able to create such sites is much larger than expected. 
Love. 
ACCESSIBILITY IS RIGHT - NOT PRIVILEGE 
Following up on Heather's notes, a minor correction. 
I did not argue that there had to be something which provided a mechanism for the user to input information, just that there had to be, somewhere in the process of authoring, something that appeared and had to be deliberately dismissed by the author in some way. 
It does not have to be more than a reminder to input alternative text, with an OK button (although in many cases that is not the best design). 
I do not have a problem with the idea that a tool could simply allow all accessibility warnings to be turned off, nor with one that could disable this particular feature (which is really like a special case of a validator in a validating tool - see asWedit for an example). 
Again, that is hardly an ideal desgin, and I expect better from most developers. 
However it is important to define not only what is the best possible way to implement all of this, for those who are trying to create a great tool, but also what is the minimum requirement for those who are seeking a tool that 'just passes'. 
It does not seem to fit within the checkpoint that there is a way to bypass this (for example by using drag and drop, or directly adding markup) and still conform, except by deliberately turning the feature off. 
In the discussion about whether or not a tool conforms out of the box, I would follow the precedent set by Wendy Chisholm's evaluation of HotMetal, in which she said that in accessibility mode the tool conforms, and I would regard that as a conforming tool (subject to the provisions of guideline 5). 
During the Process: In general, this does have to mean before saving or closing. 
Unless a tool knows the difference between saving an intermediate version, and publishing (some tools do, but most don't) then it has to assume that a document saved is a document published. 
There ought to be a wide range of configuration options for how such a feature appeared - tell me every time I insert an image, tell me before I am going to publish/close/save if there is still something missing, turn the feature off. 
Cheers Charles Do You Yahoo!? Send instant messages &amp; get email alerts with Yahoo! 
Messenger. 
