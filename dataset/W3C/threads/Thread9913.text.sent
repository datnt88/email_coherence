Can the TDL / S authors say something about where they see how the xml:lang attribute will appear in the data type models. 
Use this pseudo N-triples to talk about language-enabled literals: "foo"(en) "foo" - no language Thanks Dave Firstly, was it not decided that xml:lang was to be removed or at least ignored? 
Secondly, this is a matter of value qualification (or statement qualification, depending on your particular bent) At present, it seems the preferred way of handling this is by using a blank node that has the literal value and the qualifiers hanging off it. 
E.g. X ex:title _:1 . 
_:1 rdf:value "foo" . 
_:1 xml:lang "en" . 
[or in RDF/XML: with the datatyping presumption xml:lang rdfs:range xsd:lang . 
or an alternative is reification X ex:title "foo" . 
_:s rdf:type rdf:Statement . 
_:s rdf:subject X . 
_:s rdf:predicate ex:title . 
_:s rdf:object "foo" . 
_:s xml:lang "en" . 
So, this really isn't a datatyping issue at all. 
It's a qualification/scoping issue. 
The literal "foo" does not have a datatype of (xml:lang,"en") but rather that is a property of the value (not the literal). 
Right? 
Cheers, Patrick Patrick Stickler said: Not at present: Summary: "This is a mess - it is in the syntax and not in the model. 
Should have used an RDF vocabulary for language. 
It should be removed from the syntax." 
Currently: for discussion Which is really, waiting for the datatypes/what is a literal? 
discussion to complete. 
That's OK, if you model like that, see below. 
I don't think using xml:lang as a property is widespread. 
Doesn't that require schema support in order to use it? 
xml:lang in M&amp;S doesn't need that That attaches it to the statement, not the unicode string, see below I don't know about prefered way; the abvoe is one way to model it but RDF/XML in M&amp;S gives the other way: M&amp;S says: "The xml:lang attribute may be used as defined by [XML] to associate a language with the property value. 
There is no specific data model representation for xml:lang (i.e., it adds no triples to the data model); the language of a literal is considered by RDF to be a part of the literal. 
An application may ignore language tagging of a string. 
All RDF applications must specify whether or not language tagging in literals is significant; that is, whether or not language is considered when performing string matching or other processing." 
so there are several get out clauses there. 
This form is used in examples and M&amp;S and also, the RDF Schema for RDFS: and we owe the community an answer for what these forms mean. 
I think that since we use XML for the syntax, and M&amp;S mentions xml:lang, we must continue to support it. 
The in-scope xml:lang attributes affect all inner literal element content so that I want to know about these statements: and how you think they should be modelled? 
Do literal-labelled nodes become (unicode string, optional xml:lang) pair as the quoted paragraph above I think indicates - "part of the literal"? 
Dave I stand corrected. 
Though I still don't see this as a datatyping issue. 
A literal value with xml:lang qualification is not a "kind of" xml:lang. 
The xml:lang attribute does not assign a type to the literal. 
What else could it be? 
Only if you want the datatyping to be explicit in the RDF graph rather than left to the application layer. 
I.e., I was presuming a datatyping interpretation of xml:lang to be xsd:lang, not requiring the range constraint to be made explicitly. 
Nothing attaches to the unicode string. 
Literals do not act as subjects. 
You must use some form of idiom to infer properties of literals (or rather of the values they denote). 
It is not the literal that is "English" but rather the value denoted by the literal. 
After all, what does "pan" mean. 
Is it English? 
Spanish? 
The literal itself means nothing. 
It's just a sequence of characters. 
You must have context to determine meaning. 
The xml:lang property provides context for the interpretation of natural language strings. 
This problem is disjunct from the problem of interpretation of lexical forms per datatype. 
Sorry, I meant a preferred way to express value or statement qualification, not for using xml:lang. 
Apologies for being unclear. 
In principle, I agree, though it is a difficult issue. 
We would want support of xml:lang, as with e.g. XML Schema datatypes, to be provided, but by generic mechanisms and not with special interpretation in either the syntax or model. 
I would treat this as two statements where the first is qualified for language but the second is not. 
Whether a given application wishes to consider these statements synonymous in a give context is undefined. 
I hope not. 
Patrick 
