Hallo, is there a common way to map the DOM IDL definitions to C++ abstract classes? 
There is a one from the OMG, but that one is too CORBA oriented. 
If there is none, could you please provide one? 
I would like to be sure that my C++ DOM applications are conformal to the DOM standard. 
Thanks. 
Andre Andre Boehlke - student (Universitaet Goettingen - Germany) There have been several DOM bindings for C++. 
The problem is that there isn't a clear agreement on whether to make them behave like the Java and Javascript bindings, with automatic memory management, or like a more traditional C/C++ design with the requirement that users explicitly keep track of when data goes out of use and discard/free its memory at that time. 
Since the DOM WG left memory management as a topic to be addressed by the language binding, both approaches are entirely legitimate, and each has advantages and disadvantages -- implicit is significantly easier to use, explicit is easier to implement (and may be more efficient). 
There are also debates over which version of UTF-16 text strings should be used as the binding for DOMString, and a few smaller issues. 
So far, those disagreements -- and the fact that it's often a matter of picking an application niche rather than there being a clear better/worse choice -- has kept the DOM WG from officially recognizing any one specific solution and blessing a set of abstract classes to represent it. 
I'd love to see that gap closed, but we need to find some way to get the C++ community to duke it out and come up with a consensus proposal ... or at least a small number of proposals. 
You might want to look at existing C++ implementations of the DOM, to see where the disagreements are. 
Some (probably not all) of them are listed at Joe Kesselman / IBM Research Why does the DOMString type needs to be defined at all? 
I'm in the middle of adding support for non-ascii character sets to my DOMC module and decided the best thing to do was just support the locale dependant encoding (and wchar_t as a compile time option). 
I'm not sure if I'm going to do UTF-16 because there are no support functions in my env. 
anyway. 
Mike On Thursday, 02/14/2002 at 07:07 EST, "Allen, Michael B (RSCH)" The nature of a language binding is that it brings everything down to language-specific interfaces and types, so that code written against that binding will compile and run against all instances of that binding. 
If you don't nail down DOMString to _something_, you don't have a binding. 
The solution we've used in the past is for the binding to state what specific type DOMString is mapped to. 
Another solution would be to say that DOMString will itself be a specific interface in this binding, derived from or wrapped around whatever the implementation wants to use. 
There's nothing inherently wrong with providing a DOM-like API that supports only 8-bit characters in a specific encoding, if you know that's all your customers are going to want... but if you do so, be sure to clearly document that divergence and don't claim to be a fully compliant DOM implementation. 
You'll benefit from folks not having to relearn the API architecture, but you'll lose interoperability with other systems... and interoperability is part of the point of the DOM. 
Joe Kesselman / IBM Research 
