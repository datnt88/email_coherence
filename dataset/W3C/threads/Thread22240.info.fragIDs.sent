If anyone else would like to take it upon themselves to write a little XSLT 
transform that would produce a reasonable HTML representation of a test 
definition in the next day or two, it would be appreciated. 
Not anything remotely as complex as test-to-java.xsl. 
Quick requirements: Output should be valid HTML 
Should be compatible with styles already used for test matrix, etc. 
Assertion elements should be addressable using a URL fragment, for example, 
Should be converted into something like: Metadata links should have hyperlinks: subject 
resource="http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001/level-one-core# ID-35CB04B5"/ Should be converted to: subject resource=" a href="http://..." http:... /a "/ You'd probably want to lift the de-Xpointerizing logic from test-matrix.xsl so that exception clause references point to the attribute or method and not an Xpointer that would not be interpreted by current browsers. 
I may try to write a simple test page harness this weekend and having this 
transform would make it easy to link to the appropriate assertion failure in 
the test definition and give me one less thing to do. 
I'm currently on the road, I can have a go at this but not before Monday evening European time. 
Just saw this, gimme 10 minutes and I'll get back to you with a transform. 
Ok, here's a sample file. 
Check it out and I will be expecting input to take care of details. 
There are some issues with namespace output and validity (null xmlns declarations, I think it has to do with my msxml4) but I was in a hurry; got some deadlines over my head today. 
In case you need serious web based representation of the test files, I could modify some transformations from an on-going project of mine (a 
DOM-DHTML based XML Editor) that produces a grid interface like XML Spy's. 
I will need a couple of days to do this. 
Note that I intent to release that editor under the GPL(or something like that anyway), but I 
think there won't be any problem if I 'donate' some modificated XSLTs to the list. 
The grid interface works in both Moz and IE. Manos 
I tried adding an ?xml-stylesheet? PI to one of the tests and displaying 
it in Mozilla (the primary motivation behind the transform) and didn't see 
anything displayed, but I only had a few minutes to play with it before heading to work. 
Didn't want anything like a grid display, just something that looked like pretty-printed XML when displayed in either Mozilla or IE and had some minimal hyperlinks. 
Just got in, won't have time to do anything useful before tomorrow morning my time, but I ran Manos' stylesheet which displays fine in Mozilla. 
I'll work on it now and post it later on, possible tomorrow as I also have to get ready for the W3C Cannes meetings. 
I'll read mail again before taking the plane tomorrow, could you 
formulate any isses you want me to take up with the DOM WG? 
I can see 
the following: 1. 
We are about to have 400+ HTML tests submitted from NIST 2. We are about to have 150 HTML tests submitted from Netscape (middle of March) 
3. We are working on a web-based harness for the ECMA tests (and it looks as if we'll drop Junit at some point, given Bob's work) 
Any other issues? 
/Dimitris 
I added this template to the style to render everything byt style information, seems to work OK. Ugly, needs work, without colours and links, but it outputs the code as it is is the XML doc, which I understood is what Curt asked for. 
/Dimitris xsl:template match="/domts:test/*[not(name()='domts:metadata')]" xsl:value-of select="name()" / xsl:value-of select="name()" / = xsl:value-of select="." 
/ / 
/Dimitris 
The contention that non-validing implementations are not required to provide default attribute values and doctype nodes. 
This could be broken down into several subsets, those tests that require reading the external subset, those that require processing the internal subset, etc. 
You might review the Mozilla Dom L1 Core test summary that I did last November The getElementsByTagNameNS("*",...) interpretation. 
Whether "no effect when defined to be null" takes precedence over the NO_MODIFICATION_ALLOWED_ERR exception clause for setNodeValue. 
Did you mean JUnit or JSUnit. 
Dropping JUnit would be a bad thing since using a standard testing framework makes it easier for the DOM tests to get integrated into the standard build process of implementations. 
Requiring a custom testing framework hinders use of the tests. 
Having a custom runner for browser-based testing is beneficial, however I'd still like the tests to be runnable both with JSUnit and the custom browser runner. 
I obviously mean JsUnit, that was a typo. 
If possible, we should use the JsUnit framework, especially since Edward has been helping out in incorporating improvements; if the changes we propose are not consinstent with the framework we may have to drop it, though. 
