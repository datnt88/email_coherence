Is there any particular reason NodeIterator has a detach() method and TreeWalker doesn't? 
Elliotte Rusty Harold | elharo@metalab.unc.edu | Writer/Programmer | Java I/O (O'Reilly &amp; Associates, 1999) | Read Cafe au Lait for Java news: http://www.cafeaulait.org/ 
| Read Cafe con Leche for XML news: http://www.ibiblio.org/xml/ 
| 
Because NodeIterator repairs itself as the document changes under it ("list position semantics"), its implementations may involve event listeners or the like which impose a performance burden on the DOM as long as the NodeIterator is active. 
Having a way to deactivate it is therefore important. 
Being able to do so immediately, rather than waiting until the garbage collector (in GC langauges) gets around to cleaning it up, may make a significant difference in application performance. 
TreeWalker's "current node semantics" do not require fixup in response to document mutation, so the same situation doesn't arise. 
Joe Kesselman / IBM Research 
The same fixup goes for Range, which also has detachability. 
Christopher Watson Sr. Software Engingeer Director/Shockwave Development Lightspan, Inc. 
Because NodeIterator repairs itself as the document changes under it ("list position semantics"), its implementations may involve event listeners or the like which impose a performance burden on the DOM as long as the NodeIterator is active. 
Having a way to deactivate it is therefore important. 
Being able to do so immediately, rather than waiting until the garbage collector (in GC langauges) gets around to cleaning it up, may make a significant difference in application performance. 
TreeWalker's "current node semantics" do not require fixup in response to document mutation, so the same situation doesn't arise. 
Joe Kesselman / IBM Research 
