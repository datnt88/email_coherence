Hi All, Last week I visited Allaire for the first time, and met many people I'd known so far only by email. 
During my visit I met the complete Visual Tools Development team: the people who are creating HomeSite and its sister products ColdFusion Studio and (soon to come) JRun Studio. 
Together, we also visited the CPB/WGBH National Center for Accessible Media where we were given a demonstration by a blind person of JAWS for Windows; this was extremely helpful in heightening our awareness of the difficulties met by people having to use such screen reader software, and also what types of things we'll have to tackle to make HomeSite (etc.) comply better to Guideline 7. I've asked the team to give us feedback on Guideline 7 Techniques, in particular checkpoint 7.1, starting with "Following Standards". 
After all, this is what tools developers will have to work with to ensure compliance with guideline 7. The results are in, and my own initial impression that these points would need further clarification was largely confirmed. 
I'm attaching the result as a plain text document; individual items within each topic are numbered here for easier reference. 
("Okay" means it's clear what to do.) Cheers, Marjolein Katsma HomeSite Help - http://hshelp.com/ Bookstore for Webmasters - http://hshelp.com/bookstore/bookstore.html 
Hi Marjolein, hope you had a good time in Boston - it's a long way to go otherwise *grin*. 
A lot of the group is at the CSUN conference (including me) and replies might be slow this week. 
I'll have a look through and try to get some response/ideas back in reasonable time, but if anyone else can beat me to it it would be a good thing (TM, Pat. 
Pend., ...) Thanks for the feedback. 
This is what we need to get the document more useful to the people it is supposed to help. 
Did you look at the referenced documents, which in many cases are the applicable standards and conventions? 
cheers Charles Hi All, Last week I visited Allaire for the first time, and met many people I'd known so far only by email. 
[etc] 
Marjolein, some specific answer to your feedback. 
In some cases I have prpopsed changes to the lists of techniques - the proposed new text is given. 
In other cases I have asked further questions which I hope you or someone else can clarify. 
Cheers Charles 7.1 techniques - the list of techniques Note1: These requirements apply to all parts of a tool - the main interface, documentation and help, and subwindows, plugin tools, etc. System standards + Use system conventions rather than specially written procedures to draw text and objects. 
Otherwise Assistive technologies may not be able to access them. 
(See references above for specific systems) + Make activation of controls through an API (for example by an assistive technology) and keyboard and mouse activation behave in a consistent manner + Provide a user intereface that is familiar (unchanged) + Use system standard APIs wherever possible. 
These provide indirect ways of performing functions that can be intercepted by different input and output devices including other software.) + moved to note1 + Avoid blocking standard assistive technology functions such as sticky keys and mouse keys (link to standards known) Configurability + unchanged + this could be deleted - it is essentially the same as the next one. 
+ unchanged Input device independence What is a docked / undocked form? 
Icons, Graphics, sounds Yes, there may be drastically different ways of achieveing this for different components (and more obviously, for different tools). 
But is the requirement unclear? 
Does High conttrast need to be a default setting? 
It should be possible to make it the user's default setting. 
Thoughts anyone? 
Layout colons are helpful in identifying related labels, but explicit markup is much better. 
And they only apply in some languages. 
Should we mention them? 
User focus + Clearly expose the user focus. 
Where a Document model is available through an API, include the location of the current focus in that model. 
+ Do not cause unexpected events to be triggered by viewing content. 
For example, it must be possible to view and inspect (and edit the properties of) an active element without activating it. 
+ Allow the user to pause, step through or slow the rate of time-dependent responses (for example in putting stop marks into time-based presentations such as an audio stream + unchanged 
