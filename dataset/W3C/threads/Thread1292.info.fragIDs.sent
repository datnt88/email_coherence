I've gotten no defenders of the "Workspace" header (Chris ... ?) and no "rebuttal" to the most recent arguments for making labeling optional, so I'll go ahead and prepare a working draft with those changes. 
Also, Greg's comments indicated that the protocol does not provide sufficient motivation for workspaces, so I'll expand that section with a few of the problems that they are intended to address. 
Since these changes do not involve any changes to the semantics of the protocol, they do not warrant a new internet draft, so I'll just post a deltav-10.1 
working draft on the web site, with deltav-10 remaining the last call internet draft. 
Cheers, Geoff 
Geoff, Since -10 is the working group last call, we need to maintain "change bars" between now and proposed standard last call. 
Since text documents rule, we should keep a changes list at the end of the document to give a heads up to readers. 
Just high-level items, not minor changes would probably be sufficient. 
These will be removed in -11 and started again as we address proposed standard last call feedback leading to -12. 
We should also have a list of unresolved issues to discuss at the Dec working group meeting. 
I think making labels optional is a prime candidate. 
With all the discussions we've had on leveling in the last two years, no-one has ever requested that labels be optional. 
Lisa brought it up and provided some example repository vendors that don't support labels. 
You have expressed support for making it optional. 
But the Jims' have been pretty vocal on the other side. 
And I did submit a rebuttal on the recent arguments. 
So I think this is a subject the working group should address. 
The thing I liked about the workspace header is that it seemed to me the logical resource namespace which represents the host domain, and the functional grouping of resources supporting some web application is orthogonal to versioning. 
By putting the workspace as a URL prefix, versioning is invading this logical namespace with versioning details. 
This doesn't seem ideal. 
Using a header let us parameterize how to interpret the resource URL. 
However, such a header does not make it clear what context other URLs in the request or response are evaluated in. 
I suggest that a workspace header should apply to all URLs in the request and response. 
That is, all operations are done in the context of the specified workspace. 
If this needs to be overridden for a particular resource (say the destination for a copy), then we can use the workspace prefix. 
How does that sound? 
"Geoffrey M. Clemm" .com 
cc: ckaler@microsoft.com 
Sent by: Subject: Workspace header and optional labeling ietf-dav-versioning-requ est@w3.org 
10/11/2000 08:50 AM I've gotten no defenders of the "Workspace" header (Chris ... ?) and no "rebuttal" to the most recent arguments for making labeling optional, so I'll go ahead and prepare a working draft with those changes. 
Also, Greg's comments indicated that the protocol does not provide sufficient motivation for workspaces, so I'll expand that section with a few of the problems that they are intended to address. 
Since these changes do not involve any changes to the semantics of the protocol, they do not warrant a new internet draft, so I'll just post a deltav-10.1 
working draft on the web site, with deltav-10 remaining the last call internet draft. 
Cheers, Geoff 
From: "Jim Amsden/Raleigh/IBM" jamsden@us.ibm.com 
Since -10 is the working group last call, we need to maintain "change bars" between now and proposed standard last call. 
Since text documents rule, we should keep a changes list at the end of the document to give a heads up to readers. 
Just high-level items, not minor changes would probably be sufficient. 
These will be removed in -11 and started again as we address proposed standard last call feedback leading to -12. 
Sounds good ... will do. 
We should also have a list of unresolved issues to discuss at the Dec working group meeting. 
I believe that these issues should be discussed on the mailing list during the last call period, and not deferred to a discussion at the Dec working group meeting. 
Certainly, any issues that cannot be resolved on the mailing list should be discussed at the Dec working group meeting. 
I think making labels optional is a prime candidate. 
With all the discussions we've had on leveling in the last two years, no-one has ever requested that labels be optional. 
We explicitly decided to not discuss leveling over a year ago, since it didn't make sense to discuss what functionality belonged in what level until we had actually settled on what functionality we would supporting. 
Over the last year, the design effort has been primarily focused on firming up the details of advanced versioning support, which are primarily of interest to configuration management system providers. 
Now that the dust has settled, and we have received a very thorough review from a document management provider, I believe we need to take that review very seriously. 
The fact that configuration management providers are happy to provide labeling support is to be expected, and is therefore neither very surprising nor especially interesting. 
If we want document management system providers to implement the versioning protocol (and I certainly do), we need to set the "functionality bar" at a level appropriate for document management. 
Lisa brought it up and provided some example repository vendors that don't support labels. 
You have expressed support for making it optional. 
But the Jims' have been pretty vocal on the other side. 
And I did submit a rebuttal on the recent arguments. 
I have not seen any rebuttal to the recent arguments (only your initial messages in favor of requiring label support by all servers). 
To summarize the recent arguments: The combination of standard client defined properties like DAV:comment and DAV:creator-displayname, custom client defined properties, and standard server defined properties like DAV:version-name and DAV:getmodificationdate, are sufficient to name and locate versions of interest, and this is demonstrated by the document management systems that do so (without the use of labels). 
It is this point that I'd need to see rebutted. 
So I think this is a subject the working group should address. 
I believe that the appropriate forum to discuss these final last call issues is this mailing list, as this provides convenient access to every member of the working group. 
Cheers, Geoff 
From: "Jim Amsden/Raleigh/IBM" jamsden@us.ibm.com 
The thing I liked about the workspace header is that it seemed to me the logical resource namespace which represents the host domain, A workspace is a collection, and therefore does define a namespace for its members, but I'm not sure what you mean by a "logical" resource namespace (as opposed to a physical one?) or by "represents the host domain" (as opposed to "represents the client domain"?). and the functional grouping of resources supporting some web application is orthogonal to versioning. 
I don't see that a workspace has anything in particular to do with "a functional grouping of resources supporting some web application". 
A workspace is just a collection of version selectors and unversioned resources, with a few additional properties tracking checkouts, activities, and baselines for its members. 
By putting the workspace as a URL prefix, versioning is invading this logical namespace with versioning details. 
This doesn't seem ideal. 
Using a header let us parameterize how to interpret the resource URL. 
The namespace has already been "invaded" with versioning details (e.g. versions, working resources, version histories, activities, and baselines). 
Allocating a new URL sub-tree is exactly how web servers are commonly extended, which is why a workspace collection is compatible with common web server extension techniques, while a Workspace header is not. 
However, such a header does not make it clear what context other URLs in the request or response are evaluated in. 
I suggest that a workspace header should apply to all URLs in the request and response. 
That is, all operations are done in the context of the specified workspace. 
Even URL's that explicitly refer to resources on another host? 
If the host field is overridden by the Workspace header, that means that //www.foo.com/index.html will be the same as //www.bar.com/index.html. 
That can't be right. 
What about headers (like Destination) that are required to contain an absolute URI, and therefore must contain an explicit host field. 
Does the Workspace header apply to them? 
If not, how do you COPY or MOVE into a workspace? 
If this needs to be overridden for a particular resource (say the destination for a copy), then we can use the workspace prefix. 
How does that sound? 
How is a client to determine whether a particular URL needs the workspace prefix or not? 
Some URL's will be to resources not in a workspace (versions, working resources, version histories, activities, baselines). 
If a client has to separately decide for each URL whether or not to add a workspace prefix, isn't it just as easy to just always add it? 
What about URL's that are embedded in dead properties of a resource? 
How is a client to decide whether or not to add a workspace header (or add a workspace prefix to override a workspace header) when it wants to access it? 
These issues are all addressed in the current protocol, but it appears to add complexity to a client, not decrease it. 
If instead, a workspace member is just a member of a collection with its own URL, none of these issues arise. 
And the original problem still remains ... since the Workspace header is incompatible with common web server extension techniques, it will in many cases not be implemented and therefore will be the source of interoperability problems. 
Cheers, Geoff 
I believe that these issues should be discussed on the mailing list during the last call period, and not deferred to a discussion at the Dec working group meeting. 
Certainly, any issues that cannot be resolved on the mailing list should be discussed at the Dec working group meeting. 
jra The mailing list is a great place to capture, discuss, and resolve issues. 
But the working group meetings are often attended by a broader community. 
To get a little broader coverage, some issues should be discussed in this community, especially when there are conflicting views presented on the mailing list. 
/jra We explicitly decided to not discuss leveling over a year ago, since it didn't make sense to discuss what functionality belonged in what level until we had actually settled on what functionality we would supporting. 
Over the last year, the design effort has been primarily focused on firming up the details of advanced versioning support, which are primarily of interest to configuration management system providers. 
jra We have never really given up on leveling. 
We just renamed to to core versioning and advanced options because there appeared to be little agreement on what the levels should be. 
This is fine. 
My only point is that its interesting to note that optional labels never came up (that I can remember). 
/jra Now that the dust has settled, and we have received a very thorough review from a document management provider, I believe we need to take that review very seriously. 
The fact that configuration management providers are happy to provide labeling support is to be expected, and is therefore neither very surprising nor especially interesting. 
If we want document management system providers to implement the versioning protocol (and I certainly do), we need to set the "functionality bar" at a level appropriate for document management. 
jra There has been DMS representation in the DeltaV working group and on the design team. 
Of course, not every DMS was represented. 
But we have included many concepts and compromises to accommodate DMS systems. 
Perhaps optional label support is another. 
But I think its a little like saying we want optional user-specified URLs for resources. 
I'm willing to consider making labels optional, but I would like to challenge the assumption that including them in core is setting the bar too high. 
I have designed WebDAV interfaces to two versioning management systems that didn't support labeling as specified by the protocol. 
Both designs supported labels. 
I just hid them in my own server-defined properties. 
/jra The combination of standard client defined properties like DAV:comment and DAV:creator-displayname, custom client defined properties, and standard server defined properties like DAV:version-name and DAV:getmodificationdate, are sufficient to name and locate versions of interest, and this is demonstrated by the document management systems that do so (without the use of labels). 
jra This does not sound like either an adequate, optimal, or interoperable way of distinguishing revisions of the same versioned resource. 
DAV:verion-name might not be meaningful to a user, might not be used on more than one versioned resource, and can't be moved. 
DAV:creator-displayname is not unique to a revision. 
Relying on DAV:comment to distinguish revisions would introduce the possibility of parsing comment strings to identify a revision. 
This doesn't sound convenient or interoperable. 
DAV:getmodificationdate has no logical meaning although is is sometimes useful to identify revisions by when they changed. 
Custom client defined properties would not result in an interoperable solution. 
Lisa, of the versioning repositories you surveyed, which ones are planning on implementating a WebDAV interface? 
Of those, how many would like to have label support if there was some convenient way to provide it? 
Could labels be persisted in a server-defined property? 
Would it be OK for the WebDAV server implementation to do the labeling semantics, and just use the underlying DMS repository for persistence? 
/jra 
From: "Jim Amsden/Raleigh/IBM" jamsden@us.ibm.com 
The combination of standard client defined properties like DAV:comment and DAV:creator-displayname, custom client defined properties, and standard server defined properties like DAV:version-name and DAV:getmodificationdate, are sufficient to name and locate versions of interest, and this is demonstrated by the document management systems that do so (without the use of labels). 
jra This does not sound like either an adequate, optimal, or interoperable way of distinguishing revisions of the same versioned resource. 
Adequate? 
Certainly (for the vendors that do just that today). 
Optimal? 
Well, optimally you'd have activities and baselines as well. 
Interoperable? 
Certainly. 
Display the version properties in your client GUI and let the user select the version they want. 
Relying on DAV:comment to distinguish revisions would introduce the possibility of parsing comment strings to identify a revision. 
This doesn't sound convenient or interoperable. 
What parsing is required? 
DAV:comment is defined to be a string to be displayed to the user. 
Your client can just do so. 
This sounds both convenient and interoperable (can't get much simpler than printing out a string). 
Your client should certainly provide that functionality anyway (i.e. updating properties, and displaying a list of versions with their properties, so the user can pick one from that list). 
The only code you need to add to your client to handle a server without labels is to put an "if (labels_supported)" flag in front of the code that displays GUI operations that use labels. 
(Just like the code that you have wrapped around checkout/checkin to handle a level-1 or level-2 WebDAV server). 
Cheers, Geoff 
