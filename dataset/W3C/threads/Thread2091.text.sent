The case problem (is it 789ABCDEF or 789abcdef?) is important because digests of A1 and A2 themselves get digested in digest . 
Clearly a digest of 789ABCDEF is different from a digest of 789abcdef. 
I agree with Dave on this. 
It makes a difference, and it's easier to just be explicit. 
Hang on a second. 
WHERE is this thought to occur? 
If a Digest is being digested then it is the digest value that is digested. 
Not the digest converted to base 16, 64 or any other form. 
This is essential since otherwise it introduces unnecessary transformations when gating HTTP-NG. 
The Digest is the 128 bits of information. 
The hexadecimal is nothing other than a means of transporting the digest. 
If this is unclear in the spec it should be made so. 
Specifying use of upper or lowercase should be irrelevant. 
Phill. 
HTTP already uses MIME-64 encoding for converting octects to characters; I'd suggest that re-using the same encoding scheme would make sense (since servers are likely to include the code already, and it's also more compact that 4bits- 1octect encoding). 
I agree. 
(and not just because its only a single line change in my code :-) MD5s are recognisable as base64 objects. 
Base16 is still appropriate for the likes of timestamps and such though since they are genuinely numbers rather than blocks of random bits. 
Phill The case problem (is it 789ABCDEF or 789abcdef?) is important because digests of A1 and A2 themselves get digested in digest . 
Clearly a digest of 789ABCDEF is different from a digest of 789abcdef. 
I agree with Dave on this. 
It makes a difference, and it's easier to just be explicit. 
BTW, I'm currently adding support for Digest authentication to the NCSA httpd server. 
Eric W. Sink, Senior Software Engineer -- eric@spyglass.com HTTP already uses MIME-64 encoding for converting octects to characters; I'd suggest that re-using the same encoding scheme would make sense (since servers are likely to include the code already, and it's also more compact that 4bits- 1octect encoding). 
Mike Cowlishaw IBM UK Labs. 
I disagree. 
I think the choice of base64 vs. base16 is purely arbitrary, since the space savings is hardly significant. 
John Franks has already implemented Digest using base16 in his WN server. 
Spyglass has already implemented Digest using base16 in our client, which is shipping. 
My understanding is that Netscape has implemented Digest using base16 for a future release of their server. 
I see no compelling reason to change to base64. 
Eric W. Sink, Senior Software Engineer -- eric@spyglass.com 
This is not the first use of something like MD5 authentication in Internet protocols (i.e. APOP in POP3) ... are there precidents from other RFCs? 
Albert Lunde Albert-Lunde@nwu.edu 
According to Eric W. Sink: I agree with Eric. 
It is simpler and easier to implement base16. 
All else being equal Simple is Better. 
John Franks Answering my own question: RFC1544 The Content-MD5 Header Uses Base 64 RFC1725 Post Office Protocol - Version 3 uses Base 16 RFC1421.txt 
PEM uses Base 64 Albert Lunde Albert-Lunde@nwu.edu FWIW, I've implemented John Franks's scheme in my server using base16. 
I think that biased my thinking. 
Phillip is right that MD5 is 128 bits, and nothing need be said about encodings, except for transport. 
Ah well thats OK then. 
so long as everyone realises I'm right we can put whatever people like in the spec so long as it is clear. 
In my original equations I think I simply assumed that the base-16 encoding was orthogonal to the hash function, the last thing to be done. 
That said we should rewrite the spec using the functions D for digest and H for hex (uppercase). 
And make it explicit that we use H(D( x )) each time H appears presently. 
My implementation will then be slightly non standard in using the uppercase for generation etc but accepting a digest passed using lowercase hex characters :-) 2) If 16 binary bytes should be used for each of H(A1) and H(A2) in digest , or for H(A1) in message-digest , why bother with the ':'s? 
I have never understood that one. 
My original scheme didn't use them. 
Same with the usernames. 
I could never understand the argument on : vs @ since the only reason its there is to stop the fields running together in a possibly ambiguous fashion. 
Phill. 
I said: The case problem (is it 789ABCDEF or 789abcdef?) is important because digests of A1 and A2 themselves get digested in digest . 
Clearly a digest of 789ABCDEF is different from a digest of 789abcdef. 
Eric Sink said: Phillip Hallam-Baker responded: Eric Sink said (in response to another follow-up): FWIW, I've implemented John Franks's scheme in my server using base16. 
I think that biased my thinking. 
Phillip is right that MD5 is 128 bits, and nothing need be said about encodings, except for transport. 
However, existing (shipping) implementations tend to carry weight. 
Gee, I hope they made interoperable design choices! 
That said, 1) The fact that there has been discussion points out that the spec. 
needs to be tightened up to be absolutely clear. 
The words I proposed yesterday(?) would at least impose a particular interpretation that, I think, would result in consistent (interoperable) implementations. 
2) If 16 binary bytes should be used for each of H(A1) and H(A2) in digest , or for H(A1) in message-digest , why bother with the ':'s? 
Dave Kristol 
