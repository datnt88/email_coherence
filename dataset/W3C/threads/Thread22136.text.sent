I've added the simpleTypes to my local Copy as well as preliminary definitions of the followinf (taken from Curt's original schema) !-- annot:function featureOf="EventTarget" return="boolean"/ -- use="required"/ and it seems to work fine. 
I'll continue tuning it and post the result later today. 
I have som eproblems with my source files, though, for example the Document.xml for level 1 doesn't have a root node. 
This goes for some of the HTML interfaces as well. 
/Dimitris -----Ursprungligt meddelande----- Fr?n: Curt Arnold [mailto:carnold@houston.rr.com] Skickat: den 30 maj 2001 08:53 Till: www-dom-ts@w3.org ?mne: 
First pass at generated schema for DOM 1 + HTML I've posted an XSLT transform and a generated XML Schema from the DOM 1 xml sources at http://home.houston.rr.com/curta/domtest/genschema.zip 
It is really fresh and only superficially checked. 
I executed the transform with SAXON 6.2.2. 
It should be pretty easy to generate both XML Schema and DTD's from the DOM specs XML sources and so eliminate the need for XML Schema to DTD conversion. 
However, I started with XML Schema first, as always. 
The transform isn't smart enough yet to handle an read-write property name that has different types in different uses or methods with different calling signatures in different uses. 
I've not tried the transform against the level 2 sources, but I did take a quick look at them. 
There were a couple of issues, first the directory entries in the xml-sources.zip 
file contained "..", for example, one file was named "..\..\..\pubtext\xmlspec-v21-dom.dtd". 
This requires you to unpack to a directory at least 3 levels deep. 
It would also be helpful to know what parameters can accept a null string or node. 
This looks quite good -- I like the idea of generating directly from the spec -- is it the intent that the generated schema will be equivalent to Curt's latest schema, if we had updated it to include all of DOM Level 1? --Mary (taken later the xml with DOM calling xsd:annotation xsd:documentation DOMExceptions raised /xsd:documentation /xsd:annotation xsd:restriction base="xsd:string" xsd:pattern value="[A-Z][_]*"/ /xsd:restriction /xsd:simpleType I think that was already generated as ExceptionCode (which was its name in the xml source), Maybe I didn't synchronize with assertDOMException/ . 
later These were all defined in DOM Level 2, so they weren't generated here. 
They would be there if ran against DOM level 2 sources. 
the Should have mentioned this, most of the .xml 
files are external parsed entities, I generated the schema by running the transform against wg-dom.xml which expands all of them. 
I think we should create a thread to discuss exactly what vocabulary we intend to produce. 
Generating directly from the schema lets us use the native inerface and method names. 
I'd like to see that we do this Could you give some examples, I'm not sure what you are proposing. 
One observation: should we state returntypes on methods as we did in the dtd? 
or would this be inferable from the schema? 
It would be inferable if the wg-dom were available during the transform. 
I didn't put in the annot:function return="DOMString"/ from the manual schema since I thought it might be preferable to directly reference the spec, but it may be preferable to work against the schema since the specs representation may evolve and we might have done some tricks to combine pieces of various specs. 
Using a returntype attribute breaks down for Event.target and ProcessingInstruction.target. 
Another question is if we shouldn't still state interfaceName/methodName, even in cases where this is reduntant. 
This I think is easier to write in the schema. 
Your views? 
For lack of time, I did not add an optional interface attribute when the property or method was inherited. 
I think the current approach is pretty optimal from an authoring and readability perspective, though it adds some complexity to the schema generation and code generation process. 
Either Interface.Property/ or Interface Property/ Interface is awkward since you think primary in terms of property or method names. 
1. separate the dom ts ml generating parts from the language construct parts in the schema Again, a lack of time issue. 
Something like: 2. write a simple app to run the xsl against all dom source files I'm not sure that you need this in the DOM Level 1 sources if you run against wg-dom.xml. 
If you are trying to create a schema for DOM Level 2 Core + Events + Range, you may need to build a base file that includes the appropriate files from each spec. 
3. collect the schema snippets into one file, or create a master schema (perhaps with the constructs and the packaging/suite info) and include the other files. 
There is definitely some packaging issues to deal with. 
Especially, when we start looking an extended DOM interfaces like those in SVG. 
