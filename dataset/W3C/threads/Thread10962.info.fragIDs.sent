On 16 October 1996, the ERB will vote to decide the following question. 
A straw poll indicates the question needs further discussion in the work group. 
B.7 How should XML deal with the need for conditional inclusion of markup declarations, if XML has no marked sections (10.4.1)? 
If XML does not retain marked sections it should not allow for conditional inclusion of markup declarations Martin Bryan, The SGML Centre, Churchdown, Glos. 
GL3 2PU, UK 
On Sat, 12 Oct 96 15:06:59 CDT, Michael Sperberg-McQueen 
XML shouldn't have conditional DTDs. 
They defeat the objective of simplicity. 
Those who need complex DTD management will be using full SGML and can easily generate XML from it. 
Charles F. Goldfarb * Information Management Consulting * +1(408)867-5553 
13075 Paramount Drive * Saratoga CA 95070 * USA International Standards Editor * ISO 8879 SGML * ISO/IEC 10744 HyTime Prentice-Hall Series Editor * CFG Series on Open Information Management 
Also concur. 
I would personally like to see reduced complexity in 
DTD design practice. 
Right now, I am creating style sheets. 
The complexity of the conditional DTDs I am working with is absurd. 
Modularization by parameter entity, conditionals, inclusions, exclusions, just to hit the obvious ones, make the state space of these DTDs bigger than Pluto's Orbit. 
While they are legal, they make any menu or dialog system generated from them almost worthless as a way to guide an author. 
They would be much better in production if broken up into multiple DTDs. 
This is a design habit I think XML can promote. 
The next generation of DTDs would not give one the uncomfortable feeling of walking in the temples of ancient Mexico where one can admire the intricacy, but despair at the blood shed to stack rocks that high. 
Authors are paying a high price for the convenience of DTD version management which is really not that convenient and not done that often. 
The rate of change isn't that high. 
While not a technical concern, promoting simplification for the sake of effective production is a worthy goal. 
len 
As do I (I think). 
Presenting DTDs to new XML users will be easier if we constrain them (the DTDs :-) to single "state spaces" for now. 
As one of the perpetrators of outrageously parameterized DTDs, I have to disagree. 
Most DTDs don't need and shouldn't use parameterization on the level of a DocBook or TEI, but any DTD with a very diverse user base typically needs customization in order to be useful. 
(Many more people cannibalize DocBook than use it out of the box.) 
Since these audiences don't share any particular DTD management system, the ability to customize is needed in 8879 form. 
And maintenance truly is a nightmare if you're maintaining both your changed portions and the original portions, which you need to do whenever the base DTD gets an upgrade (as DTDs with huge audiences tend to do regularly). 
Plus, a DTD customization layer provides a machine-readable (and relatively human-readable) specification of precisely how your markup model differs from the base one. 
DTD analysis tools are popular and available enough to help people wend their way through forests of parameter entities, to the point where DTD readability is much less of a concern (though I still feel that readability should be an important *secondary* goal of a raw DTD). 
Finally, in any one "reading" of a parameterized DTD, the markup model is stable; in my experience, authors pay no extra price for DTDs that are parameterized. 
In fact, the ability to rip out the elements that are irrelevant to one's own situation has meant that DocBook (for one) has become quite a bit *more* usable. 
The management of SGML documents and associated tools (including DTDs) is still in its infancy. 
I believe in using the 8879 techniques at my disposal until a portable, functional way of doing the same thing arises. 
Eventually, the XML user base should be let in on these methods as well (whatever they are at the time). 
Eve 
We have to agree to disagree and then agree. 
As someone sitting here at the moment with a requirement to write a stylesheet for Docbook, as beautiful a piece of SGML as it is, it is awfully hard to tell the user of for example, Author/Editor why some of these combinations are legal. 
But, yes, it can be subset and that is the typical solution. 
Two years ago we brought up the use of subsets and provable subsets on CTS for this reason. 
What I would trade is the nightmare of the DTD maintainer for the production speed and quality of the author. 
DTDs with huge audiences can usually break up the audience into smaller domains. 
I agree, but readability isn't my problem, after the first hour. 
It is using a relatively cheap seat and employee to produce a quality result by constraining and directing their effort via the DTD. 
Parameterization is not at issue although it can contribute to the problem if one parameterizes prior to understanding the root-to-leaf branches, or simpler, the *engine* productions where actual content is inserted such that absurd productions don't occur such as footnotes in titles or some such. 
What tends to happen in the large DTDs whose domains are unconstrained is simply too many potential choices. 
Then the cost of the employee goes up as the requirement for deep content knowledge increases. 
This is tough to justify in conversion work, and often, in technical writing where the actual content is generated upstream, but there is no configuration management, or database. 
As long as we agree that to focus the production effort, subsets or cannibalization might be required, I think we agree. 
We probably should move this to CTS. Len Bullard 
On Tue, 15 Oct 1996 09:52:51 -0400 Eve L. Maler said: 
I dissent strongly. 
XML should be as simple as possible, but not simpler. 
If multi-flavored DTDs are not allowed in XML, it ceases to be even potentially a read-edit-write language suitable for work with documents, and becomes exclusively a write-only language for publication. 
Not much reason to support the desperate Perl hacker in XML if XML is just for publication: the DPH will in general be working on the working copies of documents, not documents that have already been through an irreversible publication process. 
If publication were all that were needed, we could have been happy just all encouraging SoftQuad to release Panorama for other platforms. 
We need -- Dave Hollander has been particularly eloquent on this score -- a language suitable both for publication and for maintenance. 
Eliminating conditional inclusion in DTDs defeats the objective of XML as a strong, powerful language for work with texts, and abandons without necessity the goal of having XML possess expressive power approximately equal to that of Full SGML. 
When we are talking about a formalism not powerful enough to represent the DTD for HTML 2.0, I think we are talking about too weak a formalism. 
Production DTDs require parse-time customization. 
XML requires the power to handle production DTDs. 
Ergo, XML requires parse-time customization -- i.e. condition inclusion in DTDs. 
-C. M. Sperberg-McQueen 
I'd gladly dump the conditionals there in favor of more versions for what very very little good the HTML DTD does for the HTML user. 
Then why TEIlite? 
len 
On Tue, 15 Oct 1996 18:34:24 -0400 cbullard@HiWAAY.net 
said: 
Primarily for pedagogical reasons. 
(1) TEI Lite is smaller than the full TEI DTD and most people seem to find it reasonably manageable. 
(2) Any single-file DTD is easier to install and run on many existing SGML systems, since the user doesn't need to figure out how to tell the system where to find external entities. 
(This is getting better with the wider adoption of SGML Open entity catalogs, I think, but it's still a pain for some, and when we designed Lite it was worse.) 
So Lite is easier to get up and running with. 
I don't expect many serious projects to stick with it forever: the stuff in the full TEI DTD is there because people need it. 
(3) Any project that designs and uses a specific view of the TEI DTD is likely to want to generate a one-file version of the DTD, for speed and because some SGML systems (you know who you are!) are non-conforming in refusing to handle references to undeclared elements. 
TEI Lite, being available both in TEI.extensions.ent and TEI.extensions.dtd 
form and in single-file derived-DTD form, provides an illustration of how this can work. 
TEI Lite, in other words, is not a substitute for the full TEI DTD. 
The full TEI DTD allows the user to modify it in a rather large number of ways that cannot readily be supported without conditional inclusion in some form or other. 
Handling it outside of the language, with something like the C preprocessor or a specially designed DTD filter, is less reliable than handling conditional inclusion in ways that every conforming SGML system can and does support. 
-C. 
M. Sperberg-McQueen 
