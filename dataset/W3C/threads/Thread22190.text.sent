Edward, I would appreciate your feedback on http://bclary.com/jsunit-modified.html The goal was to allow any browser which supports HTML 4.01 and ECMAScript 262-3rd Edition to be able to use jsUnit. 
The use of IE/NS6 only features such as innerHTML have been removed and the requirement to support document.getElementById has also been removed. 
To do this, I replaced the parts of the user interface which required updating with FRAMEs and used document.write 
to update the contents instead of HTMLElement.innerHTML. 
As a part of this modification, the script which updates the user interface has been moved into UiUpdater.js. 
This was done to extend the range of browsers which could use jsUnit. 
This is important for jsUnit's use in the DOM TS. 
I also modified the runTest method to allow the calling of an asynchronous preTest() function in test cases before any tests are performed in a test document. 
The reason for this modification was to allow test pages to load external documents asynchronously before running any tests. 
Other modifications include addition of DOCTYPEs, and changes in markup for validation purposes. 
The modified jsUnit runs all of the standard tests provided with the original jsUnit 1.2.6 on Internet Explorer 5.5 and Netscape 6/Mozilla 0.9.9+ on Windows 2000. 
Unfortunately it appears Opera still has problems changing the contents of frames so it times out attempting to load the test documents. 
I have reports that IE 5.13 on Macintosh does not run the tests. 
I believe this may be due to the method of test function discovery. 
I have not tested with other browsers yet but will be soliciting feedback from the members of the DOM TS community. 
Some items I am considering but not have done yet are: Exposure of timeout parameters through the user interface Ability to continue to attempt to load a test case even after a time out. 
Both of these changes would be useful for when the tests are hosted on the network and the user has a slow connection. 
I have already done this in the runTest method for the preTest(). 
I am also considering modifying the means by which test functions in a test document are exposed. 
While using the convention that the names of all test functions begin with "test" is convenient, it appears that this may limit the ability of other browsers such as IE 5.13 on Macintosh from using jsUnit. 
It seems that an easy approach would be to expose the test functions in an array which could be queried by jsUnit. 
This would eliminate this dependency and perhaps allow more browsers to use jsUnit. 
I hope that you find these modifications appropriate and would consider working with me to introduce these and perhaps some additional modifications into the official release of jsUnit. 
Bob Bob Clary, bclary@netscape.com 
Technology Evangelist, Netscape Communications Thank you very much for your email. 
I will certainly be integrating your changes into JsUnit. 
If you like, I will work with you on the additional, as yet not done, improvements that you list. 
Concerning your point about perhaps using an array to list the test function names instead of attempting to inspect the document: in fact that is how it used to work until I found ways in all the browsers currently supported to "reflect" against the Test Page. 
It should be quite easy to add that mechanism back in, ideally alongside the current one. 
For example, if the function "getTestFunctionNames()" existed, we would use that, and otherwise use the existing way. 
- Edward Robert, Edward I believe Robert's work is a significant step toward solving some of JsUnit's problems, allowing it to continue being a preferred testing framework for ECMA. 
To increase supported platforms, I'd like to volounteer to help on the PPC platform. 
The products I could provide feedback on are: Mac OS 9; Netscape, IE, Opera, Mozilla Mac OS X; Netscape, IE, Mozilla, Opera, OmniWeb Debian 3.0 for PPC (Linux flavour); Mozilla, Konqueror I hope to be able to provide help so that JsUnit can be run on a larger number of platforms/implementations. Perhaps others in the group can do the same for the platform they're working on? 
Kind regards, /Dimitris Certainly. 
I don't have a Mac available to me, or Debian for PPC, so any help with those platforms would be great. 
If you or anyone is interested in being added to the SourceForge developers group for JsUnit, just let me know. 
- Edward Earlier versions of JSUnit did use an array to determine the test functions. 
The imitation "reflection" that was implemented since other xUnit implementations (specifically JUnit) did not require explicit test identification and the explicit test definition was dropped. 
It might be useful to come up with a hybrid approach, allow the user to provide an explicit test declaration to support more browsers, or use implicit test discovery for existing tests or for ease of use. 
On a different note, I'd also like to point out that enhancing JsUnit is very important to the DOM TS, but we would need to separate the projects, at least speaking for the DOM TS group, in order to be able to release our updated level 1 TS, which we were aiming at doing fairly soon. 
Any improvements to JsUnit are of course improvements to the DOM TS, but I feel that we should try to concentrate on DOM TS specific issues in order to make possible releases quickly. 
Interdependencies between the two are obvious, so we may want to spend some time on dealing with this. 
/Dimitris I would like that very much. 
Thank you. 
That sounds like a good approach. 
If the changes I have already made seem reasonable to you so far, I will start work on adding some of the other changes I mentioned. 
I think 'batching' these ideas up along with obtaining more feedback from people with alternative browsers will be very helpful in producing a next release for jsUnit which supports the maximum range of browsers. 
Bob True. 
I did want to approach these two aspects as independently as possible. 
I did not want to ask Edward to make changes in jsUnit solely for the DOM TS and wanted to make sure that everyone was aware of the approach I was taking with jsUnit and how that might affect it's use in the DOM TS. 
I am not clear as to some of the modifications that were made to jsUnit for the DOM TS and wanted to discuss/study the rationale behind the changes. 
Help and guidance would be appreciated here. 
One of the features of jsUnit which does not appear to be utilized in the DOM TS at the moment is the "Test Suite". 
I believe that this would be very helpful in producing different sets of tests which would address the differing needs of browsers. 
For example, it would be useful to have a suite of tests which would require a validating parser. 
Another set could use minimalistic methods of loading XML documents which did not depend on browser specific methods. 
Others could use browser specific methods of loading documents such as Document.load or XMLHttpRequest or whatever would be appropriate. 
I would very much appreciate guidance on these issues. 
Bob I assume that you are talking about the patches that are applied as part of the DOM TS build process. 
Without the patch, test cases needed to reference jsUnitCore.js 
(part of JSUnit) which required you to coordinate location of JSUnit and the test suite. 
With the patch, the testRunner checks if there is an explicit reference for jsUnitCore and if not injects the equivalent code into the test page. 
This eliminates the need for JSUnit and the tests to always have a fixed relative location. 
It is not so bad in the ECMAScript world, but the permutations with that type of approach get huge with other bindings. 
For example, if you wanted to take that approach with the Java parsers, you would need distinct suites for: Validating/non-validating Entity expanding/entity preserving Namespace aware/namespace unaware Element whitespace preserving/Element whitespace ignoring XML/SVG/HTML The current approach in the Java binding is that members of a test suite identify themselves as inappropriate for the current document builder by throwing an exception in the test constructor. 
So, for example, if the configuration under test was non-validating, a test marked as validating would try to run under the same configuration but with validating enabled, and if that was not possible, then it would throw an exception in the test constructor which would cause it to be skipped. 
Unfortunately, JSUnit didn't provide a mechanism to have a test to report itself as non-applicable. 
With the new pre-test hook, maybe we can do the same thing that we do in the Java test constructor. 
The current JSUnit test "sniffs" a configuration based on the running browser and selected media type since there was no available mechanism to allow the user to configure the parser under test. 
In the stuff that I was doing with the browser host, you could control the parser configuration under test in the test runner. 
Possibly, the same type of configuration could be incorporated with the pre-test phase. 
