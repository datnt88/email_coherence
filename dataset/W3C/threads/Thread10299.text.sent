One of the things that has come out of our discussions with I18N has, I think, been that we better understand the relationship between sequences of characters and markup. 
Whilst I18N did not specifically point out this flaw in the current syntax spec, I think it should be attributed to their input. 
Consider the test case: If my reading of the syntax document [1] is correct, it states that this is equivalent to (with a little license in the syntax): _:a eg:prop " em br / /em "^^rdf:XMLLiteral . 
I believe that should read _:a eg:prop " em br / /em ^^ rdf:XMLLiteral . 
or some variation on that theme, to preserve the distinction between markup and content. 
We need to decide exactly what characters get escaped. 
DaveB: is my reading of syntax correct? 
Martin/I18N - would you endorse this comment? 
Brian [1] On 18 Jul 2003 13:11:51 +0100 I'm not sure what is the problem, it's clear to me and I don't know where such a relationship needs further explaining. 
We defer on XML matters to where it belongs - XML specifications (XML, Namespaces in XML, Exclusive XML Canoncialization) and to some degree, Charmod (although not normatively since that's still a WD). 
No. That string is entirely defined by Exclusive XML Canonicalization text (with comments) which is linked directly from [1] and since that normatively uses Canonical XML, which says: "Special characters in attribute values and character content are replaced by character references" -- http://www.w3.org/TR/2001/REC-xml-c14n-20010315#Terminology and in detail: [[Text Nodes- the string value, except all ampersands are replaced by &amp;amp;, all open angle brackets ( ) are replaced by , all closing angle brackets ( ) are replaced by , and all #xD characters are replaced by &amp;#xD;.]] 
2.3 Processing Model, http://www.w3.org/TR/2001/REC-xml-c14n-20010315#ProcessingModel 
That should be: _:a eg:prop " em br / /em ^^ rdf:XMLLiteral . 
Dave Whew! Ok. 
I should have known better. 
I didn't read far enough down the section. 
The text states that the following triple is added to the graph: e.parent.subject.string-value 
e.URI o.string-value where o.string-value links to: string-value The value is the concatenation of the following in this order """ (1 double quote), the value of the ??literal-value?? accessor, """ (1 double quote), "^^ ", the value of the ??literal-datatype?? accessor and " ". 
This is then overridden by The string used as the lexical form of the XML Literal is the Exclusive XML Canonicalization [XML-XC14N]) with comments and with empty InclusiveNamespaces PrefixList of the literal text l, i.e. the entire element content of this property element. 
The term lexical form of the XML literal does not bind strongly to o.string-value. 
Thats why I got confused. 
Brian Hello Brian, I agree with your comment below, as amended by Dave Beckett. 
The current version of the test case is definitely wrong. 
It may be a good idea to make sure that the primer clearly explains the difference between text with markup and text that may look like markup. 
Given the mess that some of the usage communities have made out of this (e.g. RSS), I think this is extremely important. 
Regards, Martin. 
I'm with Dave - the current text might be difficult (i.e. requiring reading at least two other specs to understand one sentence) but it is unambiguous. 
Jeremy Dave: it's not what the validator gives ... Jeremy if non-monotonic. 
I don't like saying one thing, and then contradicting it. 
But I suppose I can live with it. 
Brian 
