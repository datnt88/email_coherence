WebDAV people: RFC2518 leaves it carefully open whether 'getlastmodified' changes when properties of the resource change. 
It seems useful either way -- users might want to get the last time the content was changed, or they might want to see the last time the file was touched at all. 
Is there some precedent? 
Really, one might best be served by a new timestamp property, so the suite of timestamp-like properties would be - creationdate - time the content was last modified (etag changes, but etag doesn't provide a timestamp) - time the file was last touched Which one of the last two is most commonly handled by getlastmodified? 
Implementors speak up? 
DeltaV people: What does it mean to get the time file content was last "modified", if the file is versioned? 
I don't see that the behaviour of getlastmodified is specified for a Version-Controlled Resource, can this be a recommendation in the spec to promote consistency? 
For one thing, should 'getlastmodified' on the VCR change when it is checked out, or when it is checked in, or both? 
lisa We update getlastmodified whenever properties or contents change. 
Either of these is reflected in the ETag. 
I'm not sure we need another property to handle changes to the properties separately. 
I seem to recall that moddav does not change the last modified timestamp when properties are updated. 
There has been discussion on this topic previously, with a weak consensus that the properties should not contribute to last modified changes. 
I think this is the right answer. 
One example of why we keep the "last modified" date separate is that our build system uses this to compare with timestamps of files on disk to decide if the file is out of date. 
If the WebDAV client set the last modification time each time a property was changed then the build system would think the file on disk was "out of date" compared to the file held in version control. 
I think that this is a common scenario, also found on caching proxies, that relies upon property updates not being considered a change to the resource. 
Clearly there is some ambiguity here. 
On the one hand, properties appear to be 'part of' a resource. 
They appear when a resource is created, and disappear when a resource is deleted. 
Operations on a property are via the URL of the resource. 
However, live properties exhibit behaviour that sets them apart from the resource. 
They can change even when a resource is versioned or locked, and (at least in a couple of implementations) changes to the resource's properties do not change the last modified timestamp of the resource. 
When a version-controlled resource is checked-out its contents and dead properties are updated to be the same as the version identified in the DAV:checked-in property. 
Therefore the DAV:getlastmodified timestamp clearly should be updated to reflect the changes. 
Note that the timestamp value is the server's notion of the time the version-controlled resource was modified and not the same as the checked-in version's DAV:getlastmodified. 
When a version-controlled resource is checked-in, its content and dead properties become those of a new version in the version history. 
Some live properties of the version-controlled resource are updated to reflect its checked-in status. 
In this case I argue that the DAV:getlastmodified timestamp does not change. 
Furthermore, if you use UPDATE to update the content and dead properties of a version-controlled resource to reflect the state of a version in version history, the DAV:getlastmodified timestamp will be the time that the UPDATE method was applied and not that of the version. 
It it were otherwise updating the version-controlled resource to an earlier version would make the last modified time go 'backwards' which would potentially screw up caching proxies and clients that rely on If-Unmodified-Since: headers etc. 
What is your definition of touched? 
Dead property updates? 
Given the number of live / computed properties I assume you agree that their values do not contribute to the touched timestamp? 
Regards, Tim Ellison Java Technology Centre, MP146 IBM UK Laboratory, Hursley Park, Winchester, UK. SO21 2JN At Adobe our various servers take different positions on this. 
We have found that clients which have transitioned from doing FTP to doing DAV and HTTP 1.0 clients tend to use getlastmodified where they really should be using etags, so servers that cater to those clients ("general purpose servers" :^) are careful not to tamper with getlastmodified unless the content changes. 
But our high-end workflow servers expect savvy clients and users who really care about property (read workflow) changes, so they update whether or not content changes. 
dan Daniel Brotsky, Adobe Systems tel 408-536-4150, pager 877-704-4062 In our document management system we have two concepts, 'Object' and 'Document'. 
An 'Object' comprises of a 'Document' and all its properties. 
The function GetLastModified for a document retrieves when the actual document was modified where as for an object when the object was modified which includes the properties and document. 
We found that this distinction was critical in distinguishing the physical actions like library maintenance, caching etc. vs. the business operations like using workflow. 
-S If this system has been exposed via WebDAV, I'd be quite interested to hear how you did it. 
What does the resource URL point to? 
Did you find WebDAV lacking? 
How did you work around it or extend it? 
lisa Adobe's InScope server does a similar thing distinguishing "Assets" from "Versions" (which are the content and dead property snapshots of the asset); assets as a resource have content and properties (the latest version) but also properties that the version doesn't have. 
Many of these "non-content" properties are about the workflow. 
Our approach (prior to delta-V) has been to establish a conventional relationship between the asset URLs and the version URLs; in fact assets are (non-DAV-compliant) collections of their versions. 
With delta-V stabilizing we are hoping, going forward, to use delta-V mechanisms to connect assets and their versions. 
dan Daniel Brotsky, Adobe Systems tel 408-536-4150, pager 877-704-4062 No, Not yet! 
But in future we want to expose the Document objects first, eventually the Holder objects. 
Sridhar [mailto:w3c-dist-auth-request@w3.org]On 
Behalf Of Lisa Dusseault w3c-dist-auth@w3.org 
getlastmodified If this system has been exposed via WebDAV, I'd be quite interested to hear how you did it. 
What does the resource URL point to? 
Did you find WebDAV lacking? 
How did you work around it or extend it? 
lisa Well, if a client were to PUT the same bytes twice, the content returned by GET did not change, but I would expect the Last-Modified timestamp to change. 
I guess that is a HTTP/1.1 discussion, and RFC2616#sec14.29 seems quite flexible on the issue. 
at the risk of drifting too far off topic ... The semantics of Last-Modified ... is phrased in terms of whether or not the content (as returned by GET) has been "modified" You'll have to send me the reference to this, because as I read the spec. the definition of modified is left entirely at the server's discretion (other than the fact that the date cannot be in the future) RFC2616#sec14.29 "The Last-Modified entity-header field indicates the date and time at which the origin server believes the variant was last modified. 
[...] The exact meaning of this header field depends on the implementation of the origin server and the nature of the original resource." 
However, we agree on the conclusions. 
Regards, Tim The semantics of Last-Modified is not phrased in terms of what operation is being applied to a resource (i.e. it doesn't say "a PUT always causes Last-Modified to be updated"), but rather is phrased in terms of whether or not the content (as returned by GET) has been "modified". 
So although a server is allowed to update the Last-Modified date (to the current date) whenever it wants, an interoperable client cannot count on it changing unless the content has changed (which would not be the case for an idempotent PUT). 
Cheers, Geoff -----Original Message----- .... 
The DAV:getlastmodified changes if the content that would be retrieved by GET changes. 
Well, if a client were to PUT the same bytes twice, the content returned by GET did not change, but I would expect the Last-Modified timestamp to change. 
I guess that is a HTTP/1.1 discussion, and RFC2616#sec14.29 seems quite flexible on the issue. 
This sounds so similar to the "structured documents" that were discussed on this list ages ago. 
As I recall, one of the scenarios for having a resource that was a cross between a collection and a document was to gather a web page together with its images in one place. 
In some ways, it's treated like a single document -- the browsing client should just see the resultant web page when they try to view the resource. 
Yaron's brief proposal: Judith's elaboration: Jim's issues and clarifications: The draft "draft-hopmann-collection-props-00.txt" had a property related to this, "isstructureddocument". 
I replied to some questions about the intent of this property: I'm not at all sure that the model that would work for web pages (which have multiple independent pieces) would work for your assets, but it's possible that some of the same mechanisms could apply. 
I think there is some common ground: - A casually browsing client usually needs to see a "structured document" or "asset" as a single resource, with a dominant view. 
They may not need to understand anything about the interior structure. 
- When dealing with casually browsing clients or old clients, the server can pretend that the resource is a simple resource with a content-type of html, ms-word, pdf or whatever the content-type of the "default" document inside the container is. 
- An advanced client may need to break open the container to examine or deal with the pieces, but probably not all the time. 
E.g. the container would be broken open when editing or changing structure (e.g. deleting pieces, deleting old versions). 
- While the contents of the container may be versioned, the container itself may not be (unclear). 
lisa Lisa, You put the words that I think this discussion boils down to: container Putting the question back, what does getlastmodifed refer to? the container or the contents? 
Sridhar Let me see if I can summarize points of consensus I saw in this thread. 
Problem Statement The initial problem statement appears to be: In RFC 2518, the definition of the getlastmodified property is intentionally ambiguous on the issue of whether property changes cause the getlastmodified property to be updated. 
As well, the underlying definition of the Last-Modified header in HTTP is also ambiguous. 
The implied (but never explicitly stated) problem is that client implementors might want getlastmodified to have more precise semantics. 
In particular, it might be useful to know (a) *if* any (dead) property was changed (b) *when* any (dead) property was changed. 
(c) *when* the body (and only the body) was changed A client can observe the value of getetag to determine *if* the body has changed. 
However, no scenarios were provided to motivate this capability. 
Solution Space I detected no rough consensus on any solution. 
Assuming such a rough consensus is not developed, the likely outcome will be: - The specification of getlastmodified will remain the same. 
Solutions that were discussed, but which did not receive widespread support: - Introduce an "propetag" property that contained an etag for all (dead) property content. 
- Introduce a "proplastmodified" property that contained the last modified date for (dead) property modifications. 
- Introduce a "lasttouched" property that contained the timestamp of the last time the resource (either body or properties) was updated - Jim I believe that one or more of the possible solutions to this could receive a consensus after a face-to-face discussion. 
I suggest bringing this one up again at the next IETF. 
I for one would be happy with either "proplastmodified" or "lasttouched", along with disambiguating "getlastmodified". 
--Eric Since the mailing list is the final arbiter of consensus, why not resolve the issue on the list? 
Many issues in other IETF standards get resolved this way... 
One thing that could help move this issue forward is for someone to post a message to the list, in specification langiuage, giving a concrete proposal. 
I haven't seen one yet... - Jim 
