I was wondering a bit about ':contains' [1]. 
What should be the background-color in the following cases: test{ background:red } test::before{ content:"PASS" } test:contains('PASS'){ background:lime } test{ background:red } test::before{ content:"PA" } test::after{ content:"SS" } test:contains('PASS'){ background:lime } test{ background:red } test::before{ content:"PA" } test:contains('PASS'){ background:lime } These cases could be extended with instances of ':hover', ':active', ':focus' to make it more complex of course. 
Just to be sure, the following won't match, right? 
test:contains('&amp;amp;'){ background:red } I think these issues need to be addressed in the selectors test suite as well. 
[1] Anne van Kesteren Content generated with the ::before and ::after pseudo-elements does not actually modify the content of the element; only the way it is presented, and thus does not affect whether or not another selector matches. 
The background colour should be red. 
&amp;amp; is an HTML/XML entity, not a CSS entity, so it would not be converted to an ampersand while parsing the CSS. 
Therefore the selector would not match your test element. 
I expect that it would, however, match this: Lachlan Hunt lachlan.hunt@lachy.id.au 
I see. 
How about: test{ background:red; content:"PASS" } test:contains('PASS'){ background:lime } Personally, I don't see a difference here and I think that they all should have a green background (which stands for PASS, obviously). 
Especially since ':first-letter' _does_ apply to '::before'. 
That would lead to incosinstency between selectors, something you should avoid, imo. 
That would be logical if the first has a 'red' background, which it should have according to the XML parsing rules. 
I see authors, and maybe implementors make mistakes with this though (Opera did) and therefore it might be good to add it to the official test suite. 
Anne van Kesteren That's right, there is no difference. 
The generated content doesn't actually affect the contents of the element in the document, only the way it is presented. 
Thus, they all should be red. 
What about this: test:contains('foo') { content: 'bar' } According to your logic, first the selector would match, the contents would be changed, then it would no longer match, so it would be changed back, then it would match again... Lachlan Hunt lachlan.hunt@lachy.id.au 
This contradicts the entire model of CSS processing -- selectors are matched against the content, declarations from the matching rules are cascaded to determine the specified values, and then values are computed. 
Furthermore, I don't see a use case for your proposal. 
Generated content is unlikely to contain text like this since generated content should not be used for things that are essential to viewing the document (such as adding text). 
It should only be used for things that are stylistic (e.g., changing the list-numbering style). 
Pseudo-elements are very different from pseudo-classes. 
Pseudo-classes are just selectors: they affect whether an element matches the selector. 
Pseudo-elements are styling specific parts of an element, but the selector matching process for pseudo-elements essentially occurs without the pseudo-element. 
Also, cross-posting between www-style and public-css-testsuite is almost never the right thing to do, especially since the membership of the two lists is quite similar. 
This discussion belongs on www-style. 
-David L. David Baron URL: http://dbaron.org/ 
