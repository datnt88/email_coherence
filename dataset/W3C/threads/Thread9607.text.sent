Brian McBride said: ... I also asked DaveB to look into the DC viewpoint ... could you share the resulst with the list please. 
I asked the lead author of Expressing Qualified Dublin Core in RDF / XML which is a Dublin Core Metadata Initiative (DCMI) standards-track document to comment on the datatypes issues that were being brought up. 
We've exchanged emails but not got really to a terse summary. 
I'm the lead editor of Expressing Simple Dublin Core in RDF/XML So the following is my opinion with my DC hat on, NOT an official view of the DCMI. 
In the notes below, the set of 15 elements is the DCMI is the Dublin Core Metadata Element Set (DCMES). 
1. DCMI uses XML Namespaces for grouping concepts DCMI Namespace Policy 2. DCMI will define only 1 term for a concept, in some namespace. 
So like for PRISM (also a DCMES in RDF/XML app) - DCMES will not define multiple versions of terms. 
3. URIs for DCMI terms are constructed by appending the term name to the namespace URI for the term. 
See namespace policy document above. 
3. DCMES already uses and recommends the following RDF/XML for writing simple DCMES property and value. 
and for RDF/XML expects the triple thing dc:title "title of thing" . 
to be emitted Plus is allowed. 
Both may be used at the same time. 
4. DCMI provides RDF Schemas at the namespace URIs of its terms So providing extra datatyping info for each term is possible. 
5. DCMI expects xml:lang attribute to be allowed on XML and the DCMI community wants to be able to get at that language value somehow. 
I strongly support this. 
I have been asked by some people in DCMI community how RDF models this and could not give an answer. 
6. 
The DCMI has the idea of "encoding schemes" for expanding on the value of the simple string valued property like above. 
This is the closest thing to data types here. 
In the Qualified DC in RDF/XML document above, it is recommended to model like this (If I understand it correctly). 
The rdfs:isDefinedBy might point to any relevant URI2 that defines the encoding - such as a term in a controlled vocabulary; this would not be to an RDF(s) document. 
Optionally an rdf:type might also be used to point to a node of type rdfs:Class in an rdf schema if such existed. 
The rdf:value isn't required to point to a literal; it might point to another blank node with another rdf:value, rdfs:label There is probably more, but I'll stop here. 
Dave Thanks Dave. 
Do DC use any xsd datatypes? 
Date presumably. 
Any others. 
Would be good to follow DanC's suggestion for use cases. 
Brian Brian McBride said: The DC desn't use W3C XML Schema datatypes yet in the DC in RDF/XML formats. 
There has been some investigation of using W3C XML Schema for validating DC in XML, but no official work on using the datatypes there, as far as I know. 
The nearest is the XML and W3C XML Schema based Guidelines for implementing Dublin Core in XML which is still under a lot of discussion, not official at all and again, doesn't use the datatypes. 
Dave Dave, this keeps coming up and I would like to tackle it, but Im not sure how, or even if, this XML feature is supposed to map into RDF triples. 
If the answer is obvious to you, could you briefly explain it, using Ntriples? 
Many thanks. 
Hmm, thats an interesting idea. 
What would rdf:value mean if it wasnt pointing to a literal? 
For example what relationship between _:x and _:y would this state: _:x rdf:value _:y . 
_:y rdf:value "10" . 
Pat IHMC(850)434 8903 home 40 South Alcaniz St.(850)202 4416 office phayes@ai.uwf.edu 
Pat Hayes said: Dave said: Some answers I see are: 1 N-Triples (current version) thing dc:title "title of thing" . 
Loses the language; but there might be an application-specific method on the model that returned the language string. 
However, this is old RDF M&amp;S territory and if it isn't in the model, how can it be interoperable? 2 Ntriples+ (with lang-strings): thing dc:title "title of thing"(en) . 
See Jeremy and Bill deHora's analysis: but it does seem awfully tricky and a bit ugly adding another pair where there used to be a Unicode string. 
Maybe the proper expansion (to 3 triples with a bnode) is what we will have to recommend, and deprecate the method above in favour of which generates the 3 Ntriples by using an abbreviated syntax form: thing dc:title _:a . 
_:a xml:lang "en" . 
_:a rdf:value "title of thing" . 
Howver that will be a *very* hard sell to the DC community. 
i.e without language and with: will be hard to explain The DC idea being referred to here was historically labelled "dumbing down". 
This was for DC applications just looking for literals about a resource (node) for some purpose, they follow the rdf:value arcs until they get a string, and use that. 
It is a flattening algorithm for all the properties of a resource. 
See 3.2 of http://dublincore.org/documents/2001/11/30/dcq-rdf-xml/ 
Dave Pat Hayes asked: To bring back an example from olden times, you need one more statement: document dc:subject _:x and the interpretation is that document dc:subject "10" is the most acceptable loss of information if one must simplify (perhaps radically) the model for some reason and one has no application-specific knowledge of what to keep and what to delete. 
So, to answer your question, _:x rdf:value "10" is the abbreviation of your model above that best preserves its intent. 
It would still be the best if _:x had started with 10k other properties. 
Search for 'dumb-down rule' on Google for metadata specs where this convention has been used. 
Assumed constraints are that there should only be one rdf:value from a node. 
Assumption is that the chain of rdf:values ends in a string. 
If the document has multiple dc:subject properties, they SHOULD all have different strings at the end of the rdf:value chains. 
Ron As pointed out to Pat's message, this doesn't work because the literal itself is not English. 
It may have an English interpretation in a particular context but the literal itself, theoretically, could have meaning in multiple languages. 
C.f. http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2002Feb/0171.html 
I have the sinking suspicion that both the DC "poor man's" approach and the dumbing down principle, may need to be rethought and/or refined in terms of typed data literals rather than the present basis of strings that are presumed to have globally consistent meaning (but, based on all that has come out of these datatyping discussions, actually don't). 
But that's quite another discussion entirely, and one for the DC lists. 
Cheers, Patrick Im beginning to wonder quite what the point of the lang tag is supposed to be. 
Up to now Ive been thinking of it as a kind of datatype, but is that really appropriate? 
The basic reason for having datatyping is to allow a single literal to have many meanings. 
But that really isnt an issue with lang, right? 
I mean, nobody is going to think that a German title is an English title, and even in Canada when they write 'sauce soy sauce' on the bottles, its clear which part is English and which part is French. 
So I guess the point of lang is really to *record* the fact of the matter about which languae the literal is written in; its really a fact about the literal (string) rather than anything like a datatyping mapping applied to the literal. 
(I mean, what would the value space be for, say, lang:en ? 
It would be the identity on English strings and nothing on others, persumably. 
But if we are dealing with titles, almost anything *could* be an English string, eg "10", or an Italian string ("8&amp;1/2"), or whatever. 
) All of which leads me to think that the proper way to handle lang would be as a property of a literal, if only we had properties of literals.... Pat IHMC(850)434 8903 home 40 South Alcaniz St.(850)202 4416 office phayes@ai.uwf.edu 
We do. 
xxx ex:keyword _:1 . 
_:1 rdf:value "pan" . 
_:1 xml:lang _:2 . 
_:2 rdf:value "en" . 
_:2 rdf:dtype xsd:lang . 
We just don't allow the literals to be subjects (and of course now that literals are tidy, we couldn't do that anyway ;-) Patrick There are situations in which it may be important for a *machine* to know the language of a literal; e.g. when doing text-to-speech transcoding, or Google-like content searches. 
I think the distinction between recording a fact and mapping the meaning can become a bit blurred. 
But I suppose you're right in the sense that the language doesn't have any effect on the interpretation of literals as far as pure RDF semantics are concerned. 
Yes, that would be nice. 
But isn't a datatype also used as a kind of property of a literal? 
Maybe a language tag could be a datatype class whose literal and value spaces are just character strings, with identity mapping, for the purposes of RDF semantics? 
#g Graham Klyne MIMEsweeper Group Strategic Research http://www.mimesweeper.com 
