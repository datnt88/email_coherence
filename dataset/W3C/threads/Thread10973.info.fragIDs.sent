B.11 Should XML forbid, allow, or require empty end-tags (7.5)? 
I would very much like to see them allowed in SGML itself, as this can greatly simplify document migration. 
If end tags are not required, it will be very difficult to handle empty elements in XML if there is no DTD; you don't want to do a lot of look-ahead if you're doing progressive display as data arrives. 
Lee 
On Sat, 12 Oct 96 18:51:57 EDT Liam Quin said: 
B.11 Should XML forbid, allow, or require empty end-tags (7.5)? 
For the record: in the sense of this question, empty end-tags are end-tags of the form ' / ', not end-tags for EMPTY elements. 
The possibility of end-tags for EMPTY elements is *also* up for discussion, but it's question B.10, not B.11. -CMSMcQ 
oops, thanks for pointing that out. 
I have no objection to / in XML as long as there is no OMITTAG, although it does slightly reduce robustness in the face of transmission error or user error. 
Lee 
This is an important point. 
The form /TAG permits graceful error recovery by an intelligent application. 
Also, Jon Bosak's comments on ease of processing are compelling. 
Unless the XML spec will have normative statements regarding error recovery, anything better than a coredump is graceful enough, IMHO. 
I'd like to repeat my earlier comments: - A popular language *will* have untutored/unsophisticated users. 
- It will take just one implementation modeled on Mosaic 2.4 to make tag salad an ugly reality, *especially* if "graceful recovery" becomes an *expected* feature. 
The more general question is how much can the DPH expect to accomplish with regular expressions alone? 
1. 
In general, stacks (or at a pinch, counters) will always be necessary: SGML/XML markup is essentially a Dyck language, which is homomorphic to the "hardest" CF language. 
Besides, one of the goals of XML is easy implementations of parsers. 
To the extent this becomes a reality, the DPH will have that much less work to do anyway -- somebody will have written a parser package:-) 2. Maximizing the reach of regular expressions involves a tradeoff between ease of use for the author (relatively freeform input) and ease of parsing. 
For example, parsing nroff files is basically trivial, but the format isn't very user-friendly. 
There's nothing to stop the DPH's talents being applied to an intermediate (or canonical) form with such properties instead of the "source". 
Regards, Arjun 
Let application developers decide how to handle error recovery. 
Some will opt for graceful recovery, whether as a result of "untutored/unsophisticated users" or some other "failure" like transmission errors. 
Others will opt for a coredump - like some 30% of Unix utilities. 
I don't think we should specify the expected behavior. 
We should take into consideration whether robust applications can be developed around XML and part of that is graceful error recovery. 
My point on /TAG is that it enables an application to recover from what is likely to frequently occur in the input stream. 
