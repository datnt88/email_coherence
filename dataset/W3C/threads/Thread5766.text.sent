Thanks ... but one thing we haven't nailed down yet is the extent to which the scope of this group covers definition of languages to define internal process definitions (as in WSCI and BPEL4WS) as well as external choreographies. 
I have been focusing on the latter but we need to be clear what we are doing about the former. 
For example we could have the following as requirements for internal process definitions ... "An internal process definition MUST be capable of defining the sequence and rules by which software is executed within a 'Control Domain' " ... Control domain has been defined/described/discussed earlier. 
"An internal process definition MUST be capable of identifying the relationships and dependencies it has on an external choreography definition." 
... I am sure there are more, like internal process definitions being Turing complete ... Any thoughts chairs? 
David Bind able Choreography)) David, I'm not sure why I haven't received your message directly, but I like your linkage of state machine to process functionality. 
This provides a clean separation of the external choreography from the internal process. 
We can then focus on how messages are exchanged between participants according to the state transitions of their public state machines. 
Fred -----Original Message----- From: Assaf Arkin [mailto:arkin@intalio.com] 
Sent: Thursday, April 10, 2003 7:17 PM Subject: Re: Events and States (was: timeouts &amp; states (was: Abstract Bind able Choreography)) +1 arkin Very good questions. 
But what do you want (or perhaps more importantly, need) it to do? 
As you say, a state machine is really a mechanism. 
What is the functional requirement? 
I would put the functional requirements for which state machines are a possible answer as follows: "An implementation of a process that is following a choreography MUST be able to verify that the choreography is being followed correctly as specified in the choreography definition." 
I would then have two further more closely defined but related requirements of the products of this group ... "A choreography definition should be usable at Design Time to validate that a process should be capable of carrying out a choreography correctly as specified." 
"A choreography definition shoule be usable at Run Time to validate that a process is executing a choreography correctly as specified". 
... and finally one more ... "If a process detects that a choreography is not being followed correctly, then the process SHOULD be able to use the choreography definition to identify exactly what went wrong." 
This last one means that you stand a better chance of being able to fix the problem when it occurs. 
Thoughts? 
David -----Original Message----- From: Jon Dart [mailto:jdart@tibco.com] Sent: Thursday, April 10, 2003 2:56 PM Subject: Re: Events and States (was: timeouts &amp; states (was: Abstract Bindable Choreography)) This raises questions about the scope of a choreography. 
When does it end? 
When a disconnect occurs? 
When a particular business transaction is completed? 
When a relationship is terminated? 
Maybe any of the above? 
Do the state machines provide the mechanism for nesting of component choreographies? 
Very good questions. 
But what do you want (or perhaps more importantly, need) it to do? 
As you say, a state machine is really a mechanism. 
What is the functional requirement? 
At minimum, I would guess it is the ability to transition to a distinct state when a timeout occurs. 
This state could be the termination of the choreography (implying no more processing will occur). 
Or it could be an error state (implying there might be some warning given, or some recovery effort made, e.g. a retry - this assumes you are doing this at the application level and not in some lower-level reliable messaging protocol). 
Certainly I can think of real-world examples where you'd need this functionality. 
This is something of a simplification of earlier proposals. 
If we need something more complex, I'd like to see some rationale behind it. 
--Jon "Those who can, do; those who can't, make screenshots" Assaf Arkin arkin@intalio.com 
Intalio Inc. www.intalio.com 
The Business Process Management Company (650) 577 4700 This message is intended only for the use of the Addressee and may contain information that is PRIVILEGED and CONFIDENTIAL. 
If you are not the intended recipient, dissemination of this communication is prohibited. 
If you have received this communication in error, please erase all copies of the message and its attachments and notify us immediately. 
This one is easy, you derive part of the choreography from the implementation. 
I think the challange is to define a choreography first and then build an implementation that "sticks". 
This is why it becomes important to discuss implementation. 
Not because you want to pick one particular way to build it. 
Far from that. 
Because you want to investigate how to ensure that the implementation - and any implementation - could claim conformance to the choreography. 
If the choreography is a bit too abstract or too loose you won't be able to determine if the implementation "sticks". 
You can run the implementation, see if it works. 
Trial by error is not my favorite approach. 
On the other hand, if the choreography is too concrete or too tightly coupled you end up marrying the choreography to the implementation, you can't have variance in the implementation and that's a big no-no in my opinion. 
Somewhere inbetween there's a silver line. 
A choreography that is precise enough for you to check conformance of the implementation at design-time, in fact derive some template for the implementation from the choreography, yet is abstract enough to allow a variety of implementation and also implementation approaches. 
arkin Maybe the answer is staring us in the face: When we talk about external definitions we seem to be implying a shared state machine. 
There is a common understanding between all parties about who is playing what role, what states each role can get into, the (shared) state of the process itself etc. [is this what is commonly called a global model?] 
On the other hand an internal defintion seems to define a state machine that is not shared (tho may or may not be visible i.e. could be black box or white box). 
So what states you need, what tranistions you make, how you name other parties is totally private. 
Obviously the two have to be glued together at some point. 
As a group we have to decide whether we are working on shared state machines vs priavte ones, or both. 
In all case we will have to look at the "glue" requirements. 
Martin. 
-----Original Message----- From: Assaf Arkin [mailto:arkin@intalio.com] 
Sent: Thursday, April 10, 2003 7:17 PM Subject: Re: Events and States (was: timeouts &amp; states (was: Abstract Very good questions. 
But what do you want (or perhaps more importantly, need) it to do? 
As you say, a state machine is really a mechanism. 
What is the functional requirement? 
I would put the functional requirements for which state machines are a possible answer as follows: "An implementation of a process that is following a choreography MUST be able to verify that the choreography is being followed correctly as specified in the choreography definition." 
I would then have two further more closely defined but related requirements of the products of this group ... "A choreography definition should be usable at Design Time to validate that a process should be capable of carrying out a choreography correctly as specified." 
"A choreography definition shoule be usable at Run Time to validate that a process is executing a choreography correctly as specified". 
... and finally one more ... "If a process detects that a choreography is not being followed correctly, then the process SHOULD be able to use the definition to identify exactly what went wrong." 
This last one means that you stand a better chance of being able to (was: Abstract Bindable Choreography)) This raises questions about the scope of a choreography. 
When does it end? 
When a disconnect occurs? 
When a particular business transaction is completed? 
When a relationship is terminated? 
Maybe any of the above? 
Do the state machines provide the mechanism for nesting of component Very good questions. 
But what do you want (or perhaps more importantly, need) it to do? 
As you say, a state machine is really a mechanism. 
What is the functional requirement? 
At minimum, I would guess it is the ability to transition to a distinct state when a timeout occurs. 
This state could be the termination of the choreography (implying no more processing will occur). 
Or it could be an error state (implying there might be some warning given, or some recovery effort made, e.g. a retry - this assumes you are doing this at the application level and not in some lower-level reliable messaging protocol). 
Certainly I can think of real-world examples where you'd need this functionality. 
This is something of a simplification of earlier proposals. 
If we need something more complex, I'd like to see some rationale behind it. 
--Jon "Those who can, do; those who can't, make screenshots" Assaf Arkin arkin@intalio.com 
Intalio Inc. www.intalio.com 
The Business Process Management Company (650) 577 4700 This message is intended only for the use of the Addressee and may contain information that is PRIVILEGED and CONFIDENTIAL. 
If you are not the intended recipient, dissemination of this communication is prohibited. 
If you have received this communication in error, please erase all copies of the message and its attachments and notify us immediately. 
I agree. 
We have different opinion on how much capabilities we want in the language in terms of what it can describe. 
Some want a language that is only capable of expressing shared states that are general enough but satisfactory for most B2B use cases. 
Others want more capabilities that *in addition* to the above and not as replacement, also support more complex scenarios, e.g. the ones you would see in A2A or optionally exposing part of the white/black box. 
We can go either way, but if we fail to consider the importance of the "glue" requirement, I have the feeling we will end up with a superb specification that has no practical use. 
arkin "Those who can, do; those who can't, make screenshots" 
