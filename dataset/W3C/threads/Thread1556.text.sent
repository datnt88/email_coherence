Sorry, I realized this after I sent the message. 
I want to do: CHECKOUT /the/baseline/selector/some/file.c 
Label: which-baseline Thus, getting a working resource for "file.c" from baseline "which-baseline". 
This is premised on the fact that a baseline-selector operates just like a regular VCR, but that it sets up the children to come from a particular baseline. 
Does this sound right? 
If not, then is there a way to do this? 
Would I have to create a new baseline selector, UDPATE it, then CHECKOUT/apply-to-version? (I hope not because that doesn't scaleas well) thx, -g Ah, good! 
Something not about options (:-). 
From: Greg Stein gstein@lyra.org 
Consider that I have a collection under baseline control. 
I want to check out a specific version resource (to get a working resource) from a specific baseline of that collection. 
Or in other words, you want to checkout a particular baseline to get a "working baseline"? 
I believe the order of operations would be: PROPFIND /my/coll DAV:baseline-selector CHECKOUT /the/baseline/selector Label: which-baseline DAV:apply-to-version I'm presuming that the latter will create the working resource for me. 
The "Label" header makes the CHECKOUT method apply to the specified baseline (rather than to the baseline selector), so the DAV:apply-to-version argument is redundant. 
Cheers, Geoff Greg Stein, http://www.lyra.org/ 
From: Greg Stein gstein@lyra.org 
Sorry, I realized this after I sent the message. 
I want to do: CHECKOUT /the/baseline/selector/some/file.c 
Label: which-baseline A baseline selector is not a collection ... it is just a resource that you can checkout and checkin to create new baselines. 
Many baseline implementations will be things like "an internal label" or "a list of version URL's", which do not directly provide collection semantics. 
Thus, getting a working resource for "file.c" from baseline "which-baseline". 
This is premised on the fact that a baseline-selector operates just like a regular VCR, but that it sets up the children to come from a particular baseline. 
Does this sound right? 
A baseline-selector acts just like a regular vcr (i.e. you can check it in and check it out), but it is not a collection so it has no children. 
If not, then is there a way to do this? 
Would I have to create a new baseline selector, UDPATE it, then CHECKOUT/apply-to-version? Almost. 
You can create a new collection (reasonably enough, since you do want a collection :-), and then put it under baseline control, i.e.: MKCOL /collection/for-baseline/foo BASELINE-CONTROL /collection/for-baseline/foo DAV:baseline /baseline/xyz34 CHECKOUT /collection/for-baseline/foo/some/file.c 
Note that you can continue to use /my/collection for all your subsequent checkouts against baseline foo ... so you only have to do the BASELINE-CONTROL once for any checkout against that baseline. 
(I hope not because that doesn't scale as well) For many implementations (such as the very common label-based baseline implementation), that is the only way it will scale well, because it tells the server when to "cache" a traversable form of the baseline, and when to empty that "cache" (i.e. when /my/collection is deleted). 
In subversion, the BASELINE-CONTROL is a trivial operation, because your baselines are already in traversable form. 
So the cost to you is that protocol asks you to "publish" important baselines in the form of baseline-controlled collections, i.e. give them human meaningful URL's. 
I agree that the intermediate BASELINE-CONTROL step is not optimized towards your implementation (which does not need it), but it is needed for interoperability with most other baseline implementations. 
Cheers, Geoff Grr. 
The below doesn't work either. 
The Label: would apply to file.c, not /the/baseline/selector. 
Okay... separate question: can I "slash through" a baseline? 
Off the cuff, I'd say "no, the baseline is an arbitrary set of version resources, rather than a structured/hierarchical set of version resources." 
The problem is how to get to a specific version resource given a label for a baseline and a (relative) path within that baseline. 
And in as few operations as possible, of course :-) Cheers, -g Greg Stein, http://www.lyra.org/ 
From: Greg Stein gstein@lyra.org 
Grr. 
The below doesn't work either. 
The Label: would apply to file.c, not /the/baseline/selector. 
Okay... separate question: can I "slash through" a baseline? 
Off the cuff, I'd say "no, the baseline is an arbitrary set of version resources, rather than a structured/hierarchical set of version resources." 
Correct. 
The problem is how to get to a specific version resource given a label for a baseline and a (relative) path within that baseline. 
And in as few operations as possible, of course :-) You would have to: - locate that baseline, - use BASELINE-CONTROL to instantiate that baseline in some collection, and - issue the checkout against the appropriate member of that collection Assume that /repo/proj1 identifies your subversion repository, you want the baseline labeled "foo", and the name in that baseline was "/some/file.c" 
(and specifying just enough XML to get the point across): PROPFIND /repo/proj1 = PROPFIND /bs/x235 Label: foo = BASELINE-CONTROL /baseline-collection/proj1/foo CHECKOUT /baseline-collection/proj1/foo/some/file.c 
The choice of the name for this baseline controlled collection is up to the client. 
This client probably called it "foo" because the baseline is currently labeled foo, so that seems a reasonable thing to put in the URL for that collection. 
Cheers, Geoff That is exactly the issue that I'm pondering on :-) Okay... thanks for the feedback. 
I'll figure out a way to deal with this, then. 
I don't think that we can be truly interoperable because of the question "where can I create that (temporary) baseline-controlled collection (BCC)?" 
I can detect an SVN server and know where an automatically constructed BCC exists, but if the server is *not* an SVN server, then I will need to know a location to create that BCC. [ effectively, I will automatically create a BCC each time a baseline is created (via a check-in/merge). 
a property on the public VCR will tell me the collection containing the BCCs. 
] [ attaching labels to the baselines is related to this issue ] Cheers, -g Greg Stein, http://www.lyra.org/ 
