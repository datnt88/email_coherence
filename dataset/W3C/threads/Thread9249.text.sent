Glad we're publishing, but...I'd appreciate a show of hands... 6.32 parseLiteral " rdf:parseType=\"Literal\"" 6.33 parseResource " rdf:parseType=\"Resource\"" What would be the chances of: 1: changing them to this: 6.32 parseLiteral " rdf:parseType=\"rdf:Literal\"" 6.33 parseResource " rdf:parseType=\"rdf:Resource\"" 2: doing a soft deprecation on the existing attribute values. 
3: reserving the prefix 'rdf:' for future RDF rec use in recognition of parseType's known use as an extension mechanism plus there are words in the existing M&amp;S that seem to mandate this type of upgrade. 
My apologies for not raising this at the telcon, but I've been misreading the attributes as having the prefix in there, until about 5 minutes before the telcon ended, and I didn't want to cut into the MT discussion. 
Bill Bill de h?ra InterX bdehora@interx.com 
www.interx.com 
Hi Bill, You seem to be proposing a change to the language. 
Do you have compelling reasons for making this change? 
Brian Brian McBride: Brian, I would say that this was proposed syntax change: it sounds less dramatic ;) But in the light of the some M&amp;S assertions which are not so clear in concert: Other values of parseType are reserved for future specification by RDF. 
The parseType attribute should have one of the values 'Literal' or 'Resource'. 
With RDF 1.0 other values must be treated as identical to 'Literal'. the acknowledgement in the M&amp;S: The RDF Model and Syntax Working Group acknowledges that the parseType='Literal' mechanism is a minimum-level solution to the requirement to express an RDF statement with a value that has XML markup. 
Additional complexities of XML such as canonicalization of whitespace are not yet well defined. 
Future work of the W3C is expected to resolve such issues in a uniform manner for all applications based on XML. 
Future versions of RDF will inherit this work and may extend it as we gain insight from further application experience. the known uses of parseType: http://lists.w3.org/Archives/Public/www-rdf-comments/2001AprJun/0127.ht ml . 
then the seemingly compelling reasons are: 1: now that we have good feedback now on how people are using xml-rdf we should recognise that it is being used as an extensibility mechanism and take the high ground on the matter. 
2: in using prefixes to disambiguate, everyone can play nice over statement value interpretations. 
I think DAML and Tim Berners-Lee have been smart here. 
3: with a mandated prefix the RDF recommendations can make their games foremost and provide a sane minimal base of interpretations. 
4: prefixes give futureproofing. 
For example with an 'rdf:' prefix, infoset would have been a snap to add this time around (parseType="rdf:Infoset"). It makes architectural sense to allow a way for future wgs to feed back known useful value interpretations into the standard. 
5: soft deprecation on the existing two mandated values makes the processor and xml-rdf serialised data upgrades painless enough. 
In software, it's a snap to callback to parseType handlers and drop them in dynamically, especially if they're prefixed (more futureproofing). 
In fact we possibly don't to have to deprecate anything, just advise. 
[Personally, parseType sort of reminds me of SOAPAction in that it's vague and asking to be embraced and extended. 
But that's just the musing of a paranoid Irishman. 
And it's a backdoor hack to implicitly make statements about literals, which we don't allow explicitly.] Bill de h?ra 
Since namespaces don't leak into rdf:parseType attributes, do you want "foo:Literal" to be the same as "rdf:Literal" if "foo" is declared as "the same" namespace as "rdf"? 
jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ Bolstered by my success with vi, I proceeded to learn C with 'learn c'. [snip] A brief historical factoid: back in '98-ish, the use of qnames _inside_ XML attributes was considered rather daring, risky, and was largely unprecdedented. 
Since then, a few other (@@which??) XML-based specs have done this. 
At the time we punted this for future work, to avoid being out of step with the XML mainstream. 
One could make the case now that this practice has been established, and that any extensibility mechanisms that RDF Core defines should use it. 
Dan Brian McBride: Didn't mean to sound dramatic. 
I suppose I'm looking at the charter and dragging my feet again. 
Personally, I'm sympathetic to this change. 
However, I'm not sure there is a problem here we need to fix. 
What difference would it make if we did nothing? 
What is unclear exactly? 
Are we comfortable that an existing processor encountering rdf:parseType="rdf:Resource" will treat it as rdf:parseType="Literal"? Brian Jan Grant: [...goes away and rereads namespaces and schema...] Short answer: yes. 
Might that imply additions to RDF Schema? 
Possibly. 
A mandated string seems short sighted, having the namespace binding allows one to make RDF assertions about an attribute value...that fits in with describing RDF in RDF, or even, allowing more complex parseTypes to been created (not sure that's a good thing actually). 
And really, if we're MUSting namespacing RDF attributes...may as well be hung for a sheep as a lamb. 
This isn't a controversial technique anymore, but one issue come to mind. 
Lack of tool support for qualified attributes; problems might arise with RDF-XML fragments and transforms. 
My thinking on this is that most XML plumbing will be upgraded to cater for XML Schema (which requires attribute namespace qualification) since most XML plumbing will want to play the (XML Schema dependent) web services game sooner rather than later. 
And we can have words indicating that the prefix 'rdf:' is a convention, in the same sense that 'xsd:' is a convention. 
Bill de h?ra From: Brian McBride: Completely reasonable. 
I hope none: but if the parseType attribute ever gets crowded it's an obstacle in insuring that literals are interpreted consistently. 
Namespace partitioning in this case seems wholly consistent with web architecture. 
I accept defeat on clarity in the M&amp;S on this matter. 
It's perfectly clear: essentially the recommendation over rdf:parseType is a hedge in the M&amp;S. 
RDF wgs have the option on _any_ future value name plus interpretation for the name, while not saying outright to coders and modellers, don't process or create any new ones. 
The recommendation admits that the area is not fully understood going to print, and actually encourages and expects future wgs to clarify: thus the option (and a reasonable one at that). 
Meanwhile the W3C now has art using namespaced attribute values, and, there is solid feedback on how this part of RDF-XML is being used. 
That's why I think this change is non-controversial wrt the charter; what would need to be resolved is the binding/constant issue Jan raised and whether there are any ugly fragment/transform issues that make namespace binding too painful. 
RDF doesn't need a veto on all the values, just some of them: the M&amp;S seems over constrained at this point. 
DAML and Tim Berners Lee have had the foresight to use a prefixed value that will play with namespaces; possibly we can't expect others to do likewise. 
What is _not_ perfectly clear is whether M&amp;S users should crack ahead and extend parseType in the hope that if the M&amp;S catches up, it won't run them over. 
Whatever about qualifying parseType attributes, the wg should export a clear stance on the matter of parseType extensibility. 
Bill de h?ra 
I observe that there's nothing to disallow namespaces leaking into attributes, if that's what you want to do. 
So when I said yes, I meant yes to either of these, preferring the first by way of convention: rdf:Description xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/metadata/dublin_core#" 
rdf:about="http://mycorp.com/papers/NobelPaper1" batman kapow:Description xmlns:kapow="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/metadata/dublin_core#" 
kapow:about="http://mycorp.com/papers/NobelPaper1" batman Bill de h?ra 
I observe that there's nothing to disallow namespaces leaking into attributes, if that's what you want to do. 
So when I said yes, I meant yes to either of these, preferring the first by way of convention: rdf:Description xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/metadata/dublin_core#" 
rdf:about="http://mycorp.com/papers/NobelPaper1" batman kapow:Description xmlns:kapow="http://www.w3.org/1999/02/22-rdf-syntax-ns#" xmlns:dc="http://purl.org/metadata/dublin_core#" 
kapow:about="http://mycorp.com/papers/NobelPaper1" batman Bill de h?ra Bill: We could reserve all unprefixed parseTypes for RDF use, and say that extensions should use namespaced prefix attributes; thus blessing DAML and TBL without a significant change to M&amp;S. 
Jeremy I think this issue is *already present* in industry practice. 
There is the well established parseType "daml:collection". 
This licenses the construction of graphs using daml:List daml:first daml:nil and daml:rest (modulo misrememberings). 
In all example usages the namespace prefix "daml" is bound. 
In some of these it is bound to a namespace relating to one version of daml, in some it is bound to a different version of daml. 
My understanding is that the intended URL refs daml:List, daml:first, daml:nil, daml:rest can only be determined by looking at the binding of the namespace prefix "daml". 
See, for one binding and for another. 
I fear we need to bite the bullet and allow namespaces to leak into rdf:parseType attributes. 
This is, in my view, very ugly. 
However, the XML schema people have already done this and we cannot turn the clock back. 
I also fear that if we wish to bless "daml:collection" the blessing is for "foo:collection" whatever URI foo is bound to (a daml related one or otherwise). 
Jeremy From: "Jeremy Carroll" jjc@hplb.hpl.hp.com Date: Fri, 7 Sep 2001 12:12:18 +0100 Message-ID: JAEBJCLMIFLKLOJGMELDKEBOCCAA.jjc@hplb.hpl.hp.com Subject: RE: quick question/request about syntax wdraft Bill: had We could reserve all unprefixed parseTypes for RDF use, and say that extensions should use namespaced prefix attributes; thus blessing DAML and TBL without a significant change to M&amp;S. 
I'd thought about this option (which is the same option we have now, but hardened). 
We'll probably have to mandate/describe practice on prefix usage (make it a namespace!) as you say. 
Then we have to inform the RDF community that if it's using unprefixed unrecommended parseTypes it will have to upgrade. 
That option does minimise changes to the M&amp;S at the possible expense of people using it (but being realistic, not that many people perhaps). 
If there's change pain, I'd rather the wg bore it. 
If we mandate using an RDF namespace for RDF use, it's less likely we'll step on anyone's toes. 
I guess ultimately if we're telling others to use namespaces for extensibility here, we may as well eat our food :) I observe that the asecendent M&amp;S/XML grammar can continue to claim the current Literal and Resource attribute values and duplicate them under a namespace. 
Bill de h?ra 
