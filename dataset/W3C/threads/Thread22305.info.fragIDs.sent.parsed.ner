(TOP (S (NP (NN Hi) (NNS DOM-ers)) (NP (PRP I)) (VP (AUX have) (NP (DT a) (NN problem)) (PP (IN with) (S (VP (VBG modifying) (NP (NP (DT the) (NN text) (NN component)) (PP (IN of) (NP (DT a) (NN node)))))))) (. .)) )
(TOP (S (SBAR (WHNP (WP What)) (S (NP (PRP I)) (VP (AUX am) (VP (VBG hoping) (S (VP (TO to) (VP (VB achieve)))))))) (VP (MD could) (VP (AUX have) (NP (NP (DT the) (VB affect)) (PP (IN of) (S (VP (VBG removing) (NP (NN emphasis)) (PP (IN from) (NP (NN text))))))))) (, ,)) )
(TOP (S (S (PP (IN for) (NP (NN example))) (, ,) (ADVP (RB ie)) (, ,) (NP (DT this) (JJ xml) (NN document)) (: :) (VP (VBZ gets) (VP (VBN transformed) (PP (TO to))))) (: :) (S (NP (NP (DT The) (NN approach)) (SBAR (WHNP (WDT which)) (S (NP (PRP I)) (VP (AUX am) (VP (VBG using)))))) (VP (AUX is) (: :) (NP (NP (CD 1.)) (VP (VB Get) (S (NP (DT the) (NN text)) (VP (VBN associated) (PP (IN with) (NP (DT the) (NN emph) (NN node))))))))) (. .)) )
(TOP (S (ADVP (RB 2.)) (VP (VB append) (NP (PRP it)) (PP (TO to) (NP (NP (DT the) (NN text) (NN component)) (PP (IN of) (NP (NP (DT the) (JJ myDoc) (NN node)) (PP (FW 3.) (FW delete) (NP (NP (DT the) (NN emph) (NN node)) (VP (VBG Using) (NP (NP (organization (NP (NNP Sun) (POS 's)) (NNP Java)) (NN xml-ea2) (NNP DOM) (NNP API)) (PRN (-LRB- -LRB-) (NP (NP (NN http)) (: :) (NP (NN //developer.javasoft.com/developer/earlyAccess/xml/index.html))) (-RRB- -RRB-)) (, ,))))))))))) )
(TOP (S (VP (VB check) (PRT (RP out)) (NP (NP (DT the) (JJ following) (NN code)) (PP (IN for) (NP (DT this) (NN purpose))))) (. .)) )
(TOP (S (PP (IN In) (NP (NP (DT the) (NN example)) (ADVP (IN above)))) (, ,) (NP (NP (DT the) (NN method) (NN copyIntoParent)) (PRN (-LRB- -LRB-) (NP (NNP Node)) (-RRB- -RRB-))) (VP (MD would) (VP (AUX be) (VP (VBN called) (PP (IN with) (NP (NP (NN emph)) (PP (IN as) (NP (DT the) (NN parameter)))))))) (. .)) )
(TOP (S (NP (DT The) (NN trouble)) (VP (AUX is) (PP (IN with) (NP (NP (DT the) (JJ setNodeValue) (PRN (-LRB- -LRB-) (NP (NNP String)) (-RRB- -RRB-)) (NN method)) (PP (IN in) (NP (NP (DT the) (NNP Node) (NNP interface)) (PP (IN of) (NP (organization (NP (NNP Sun) (POS 's)) (NNP API))))))))) (. .)) )
(TOP (S (S (NP (PRP I)) (VP (VBP call) (NP (PRP it)) (PP (IN in) (NP (DT the) (JJ setTextInNode) (PRN (-LRB- -LRB-) (NP (NNP Node) (NNP n)) (, ,) (NP (NNP String) (CD newText)) (-RRB- -RRB-)) (NN method))))) (, ,) (CC but) (S (NP (NP (DT the) (NN print) (NNS outs)) (SBAR (S (NP (PRP I)) (VP (AUX have) (PP (IN in) (NP (DT the) (JJ copyIntoParent) (PRN (-LRB- -LRB-) (NP (NNP Node)) (-RRB- -RRB-)) (NN method))))))) (VP (VBP show) (SBAR (IN that) (S (NP (PRP it)) (VP (AUX has) (RB no) (VP (VB affect))))))) (. .)) )
(TOP (S (RB So) (PRN (: :) (: -) (SQ (AUX are) (RB there) (NP (DT any) (JJ other) (NNS DOM-ers)) (VP (VBG using) (NP (NNPS Suns) (NNP DOM) (NNP API))) (. ?)) (: -)) (VP (AUX is) (NP (NP (NN setNodeValue)) (PRN (-LRB- -LRB-) (NP (NNP String)) (-RRB- -RRB-)) (SBAR (S (NP (DT the) (JJ right) (NN method)) (VP (TO to) (VP (VB call))))))) (. .)) )
(TOP (FRAG (IN if) (RB not) (, ,) (WHNP (WP what)) (. ?)) )
(TOP (S (NP (DT Any) (JJ help/) (NNS suggestions)) (VP (MD will) (VP (AUX be) (NP (NP (NP (JJ cool) (NNS thanks)) (NP (NNP N) (JJ public) (NN void) (NN copyIntoParent))) (PRN (-LRB- -LRB-) (NP (NNP Node) (NNP n)) (-RRB- -RRB-)) (SBAR (S (-LRB- -LCB-) (NP (NNS //)) (VP (VBP get) (SBAR (S (NP (NP (NP (JJ current) (NN node) (POS 's)) (NN text) (NN content) (NN copy)) (SBAR (S (NP (PRP it)) (VP (VBD //) (PP (IN into) (NP (NN parent) (NN node))) (, ,) (PP (IN in) (NP (NP (NN place)) (PP (IN of) (NP (JJ current) (JJ node) (NNS //))))))))) (VP (AUX Has) (NP (NP (DT the) (VB affect)) (PP (IN of) (S (VP (VBG removing) (NP (NNS elements)) (PP (IN from) (NP (NP (JJ //) (NN text)) (ADJP (JJ content))))))))))))))))) (. .)) )
(TOP (S (NNP //) (NN Print) (RP out) (DT the) (JJ current) (NN text) (NN value) (IN of) (DT this) (NN node) (NNP System.out.println) (-LRB- -LRB-) (`` ``) (NN child) ('' '') (NNP +) (JJ n.getNodeName) (-LRB- -LRB-) (-RRB- -RRB-) (NNP +) ('' '') ('' '') (NNP +) (NN getTextFromNode) (-LRB- -LRB-) (NNP n) (-RRB- -RRB-) (-RRB- -RRB-) (: ;) (CD //) (VB update) (DT the) (NN text) (NN value) (IN of) (DT this) (NN node) (IN with) (DT the) ('' '') (NNP *) (NNP *) (PRP$ my) (JJ new) (NN text) (CD **) ('' '') (NN setTextInNode) (-LRB- -LRB-) (NNP n) (, ,) ('' '') (NNP *) (NNP *) (PRP$ my) (JJ new) (NN text) (CD **) ('' '') (-RRB- -RRB-) (: ;) (CD //) (NN Print) (RP out) (DT the) (VBN updated) (NN text) (NN value) (IN of) (DT this) (NN node) (NNP System.out.println) (-LRB- -LRB-) (`` ``) (NN child) ('' '') (NNP +) (JJ n.getNodeName) (-LRB- -LRB-) (-RRB- -RRB-) (NNP +) ('' '') ('' '') (NNP +) (NN getTextFromNode) (-LRB- -LRB-) (NNP n) (-RRB- -RRB-) (-RRB- -RRB-) (: ;) (JJ public) (VB void) (NN setTextInNode) (-LRB- -LRB-) (NNP Node) (NNP n) (, ,) (NNP String) (NN newText) (-RRB- -RRB-) (-LRB- -LCB-) (CD //) (NNP Read) (DT the) (NN text) (IN that) (DT this) (NN node) (AUX has) (CD //) (CC and) (VB append) (TO to) (PRP it) (DT the) (JJ new) (NN text) (IN that) (AUX is) (TO to) (AUX be) (VBD added) (NNP String) (NN currentText) (SYM =) (NN getTextFromNode) (-LRB- -LRB-) (NNP n) (-RRB- -RRB-) (: ;) (NN currentText) (CD +=) (NN newText) (: ;) (NN n.setNodeValue) (-LRB- -LRB-) (NN currentText) (-RRB- -RRB-) (: ;) (JJ public) (NNP String) (NN getTextFromNode) (-LRB- -LRB-) (NNP Node) (NNP n) (-RRB- -RRB-) (-LRB- -LCB-) (CD //) (VB get) (JJ current) (NN node) (POS 's) (NN text) (NN content) (NNP Node) (NN child) (: ;) (NNP String) (NN textData) (SYM =) ('' '') ('' '') (: ;) (NNP NodeList) (NNS children) (: ;) (NN int) (JJ numberOfChildren) (: ;) (CD //) (IN If) (DT the) (NN node) (AUX has) (DT any) (NN child) (NNS nodes) (, ,) (CD //) (VBG bung) (DT all) (IN of) (PRP them) (IN into) (DT a) (NN nodelist) (VBN called) (NNS children) (NNS children) (SYM =) (NNS n.getChildNodes) (-LRB- -LRB-) (-RRB- -RRB-) (: ;) (JJ numberOfChildren) (SYM =) (JJ children.getLength) (-LRB- -LRB-) (-RRB- -RRB-) (: ;)) )
(TOP (S (NP (NNP //) (organization (NNP Read))) (NP (DT each) (NN child)) (SBAR (RB now) (IN for) (FRAG (-LRB- -LRB-) (NP (NP (NN int)) (SBAR (S (S (NP (PRP i)) (VP (SYM =) (NP (CD 0)))) (: ;) (S (NP (PRP i)) (VP (VBP numberOfChildren)))))) (: ;) (NP (NN i++)) (-RRB- -RRB-))) (-LRB- -LCB-) (NP (NN child)) (VP (SYM =) (NP (NP (NN children.item)) (PRN (-LRB- -LRB-) (NP (NN i)) (-RRB- -RRB-)))) (: ;)) )
(TOP (S (VP (VB //) (S (SBAR (IN If) (S (NP (DT this) (NN child)) (VP (AUX has) (NP (DT some) (NN text))))) (, ,) (VP (VB let) (NP (PRP 's)) (VP (VB get) (NP (PRP it)))) (. !)) (SBAR (IN if) (S (NP (PRN (-LRB- -LRB-) (JJ child.getNodeType) (-LRB- -LRB-) (-RRB- -RRB-) (VP (VBG ==) (NP (CD 3))) (-RRB- -RRB-)) (JJ textData) (NNS +=)) (VP (VB child.getNodeValue) (-LRB- -LRB-) (-RRB- -RRB-))))) (: ;)) )
(TOP (NP (NN return) (NNS textData) (: ;)) )
(TOP (S (NP (DT The) (NNP DOM) (NN Level) (CD 1)) (VP (VBZ defines) (NP (NP (DT the) (NN nodeValue)) (PP (IN of) (NP (DT an) (NN Element) (S (VP (TO to) (VP (AUX be) (ADJP (JJ null)) (PRN (-LRB- -LRB-) (S (VP (VB see) (NP (DT the) (NN table)) (PP (IN in) (NP (NP (DT the) (NN discussion)) (PP (IN of) (NP (DT the) (NNP Node) (NNP interface))))))) (-RRB- -RRB-)))))))) (, ,) (SBAR (IN so) (S (NP (PRP$ your) (NN approach)) (VP (MD would) (RB n't) (VP (VB work) (PP (IN in) (NP (DT the) (NNP DOM) (NN standard)))))))) (. .)) )
(TOP (S (S (NP (PRP It)) (VP (AUX is) (, ,) (ADVP (RB however)) (, ,) (NP (NP (DT a) (NN source)) (PP (IN of) (NP (NP (NN irritation) (CC and) (NN confusion)) (PP (IN for) (NP (JJ many) (NNS people)))))))) (, ,) (CC and) (S (NP (DT some) (NNP DOM) (NNS implementers)) (VP (AUX have) (VP (VBN defined) (NP (NP (DT a) (NN method)) (ADJP (JJ similar) (S (VP (TO to) (VP (VB setNodeValue) (S (VP (TO to) (VP (AUX do) (SBAR (WHNP (WP what)) (S (NP (PRP you)) (VP (VBP want) (S (VP (TO to) (VP (AUX do) (PP (IN with) (NP (DT an) (NN Element)))))))))))))))))))) (. .)) )
(TOP (S (S (NP (PRP It)) (VP (AUX 's) (ADJP (JJ hard)) (S (VP (TO to) (VP (VB come) (PRT (RP up)) (PP (IN with) (NP (NP (DT a) (JJ clean) (, ,) (JJ elegant) (NN solution)) (ADVP (RB here)))) (PP (IN without) (S (VP (VP (VBG adding) (NP (NN serialization))) (CC and) (VP (VBG parsing) (NP (NNS interfaces)) (PP (TO to) (NP (DT the) (NNP DOM)))))))))))) (, ,) (CC and) (S (NP (DT that)) (VP (AUX is) (VP (VBN considered) (PP (IN by) (NP (JJ many))) (S (VP (TO to) (VP (AUX be) (NP (NP (DT a) (NN can)) (PP (IN of) (NP (NNS worms)))))))))) (. .)) )
(TOP (S (S (S (NP (DT The) (`` ``) (ADJP (RB DOM-ically) (JJ correct)) ('' '') (NN way)) (VP (NN strip) (PRT (RP out)) (NP (DT the) (NN emph) (NN markup)))) (, ,) (NP (PRP I)) (VP (VBP believe)) (, ,)) (VP (AUX is) (S (VP (TO to) (VP (VB get) (NP (DT the) (NN text) (SBAR (S (VP (VP (VBZ nodes) (PP (IN of) (NP (`` ``) (FW myDoc) ('' '') (CC and) (`` ``) (NN emph) ('' '')))) (CC and) (VP (VB concatenate) (NP (PRP them)) (ADVP (RB together)))))) (, ,) (S (VP (VP (VB remove) (NP (DT the) (`` ``) (NN emph) ('' '') (NN element))) (, ,) (RB then) (VP (VB set) (S (NP (DT the) (JJ new) (NN Text) (NN node)) (VP (TO to) (VP (AUX be) (NP (NP (DT the) (JJ only) (NN child)) (PP (IN of) (NP (`` ``) (FW myDoc) ('' ''))))))))))))))) (. .)) )
(TOP (NP (person (NNP Mike) (NNP Champion))) )
(TOP (S (NP (JJS Simplest)) (VP (AUX is) (PP (TO to) (NP (CD 1.))) (VP (VB Get) (NP (NP (DT the) (organization (NN TEXT)) (NN node) (NN child)) (PP (IN of) (NP (DT the) (`` ``) (NN emph) ('' '') (NN node)))))) (. .)) )
(TOP (S (NP (NNPS 2.)) (VP (VBP Get) (NP (NP (DT the) (NN parent)) (PP (IN of) (NP (DT that) (`` ``) (NN emph) ('' '') (NN node))))) (. .)) )
(TOP (S (S (NP (NNP 2.) (NNP Use)) (VP (VBD parent.replaceChild))) (-LRB- -LRB-) (-RRB- -RRB-)) )
(TOP (S (VP (TO to) (VP (VB replace) (NP (DT the) (`` ``) (NN emph) ('' '') (NN node)) (PP (IN with) (NP (DT the) (NN text))))) (. .)) )
(TOP (S (ADVP (RB Right)) (, ,) (S (NP (organization (NNP DOM))) (VP (AUX does) (RB not) (VP (VB specify) (NP (NP (DT any) (NN behavior)) (ADJP (JJ other) (PP (IN than) (S (RB not) (VP (VBG throwing) (NP (DT any) (NN exception)) (PP (IN in) (NP (DT this) (NN case) (CD ..))))))) (. .)) (ADVP (RB perhaps)) (SBAR (S (NP (PRP it)) (VP (AUX 's) (ADJP (JJ annoying)))))))) (, ,) (CC but) (S (NP (DT that)) (VP (AUX 's) (SBAR (WHADVP (WRB how)) (S (NP (PRP it)) (VP (AUX 's) (ADJP (JJ specified))))))) (. .)) )
(TOP (S (-LRB- -LRB-) (S (NP (NP (DT The) (JJ only) (NN exception)) (SBAR (WHNP (WDT that)) (S (VP (MD can) (VP (AUX be) (VP (VBN thrown))))))) (VP (AUX is) (PP (IN for) (NP (DT a) (JJ read-only) (NN node))))) (: ;) (S (SBAR (IN since) (S (NP (DT that) (NN element)) (VP (AUX is) (RB n't) (ADJP (JJ read-only))))) (, ,) (NP (PRP it)) (VP (MD must) (RB n't) (VP (AUX be) (VP (VBN thrown) (PRN (FW there.) (-RRB- -RRB-)))))) (: -) (NP (person (NNP Dave)))) )
(TOP (NP (NP (NNP Hi) (person (NNP Mike)) (CC and) (person (NNP David) (NNS Thanks))) (PP (IN for) (NP (PRP$ your) (NNS replies))) (. .)) )
(TOP (S (NP (DT The) (NNP sun) (organization (NNP DOM) (NNP API))) (VP (AUX does) (RB n't) (VP (VB allow) (S (NP (PRP me)) (VP (TO to) (VP (AUX do) (NP (DT this)) (ADVP (RB directly))))))) (. .)) )
(TOP (S (CC But) (NP (PRP I)) (VP (VBD managed) (S (VP (TO to) (VP (VB come) (PRT (RP up)) (PP (IN with) (NP (NP (DT a) (JJ simple) (NN solution)) (SBAR (WHNP (WDT which)) (S (VP (AUX does) (SBAR (WHNP (WP what)) (S (VP (AUX is)))))))))))))) )
(TOP (INTJ (JJ required) (. .)) )
(TOP (S (S (NP (DT The) (NN approach)) (VP (AUX is) (PRN (-LRB- -LRB-) (S (VP (VB see) (NP (NP (NN setTextInNode)) (PRN (-LRB- -LRB-) (NP (NNP Node) (NNP n)) (, ,) (NP (NNP String) (NN newText)) (-RRB- -RRB-))))) (-RRB- -RRB-)))) (: :) (: -) (S (VP (VP (VB make) (NP (NP (DT a) (NN clone)) (PP (IN of) (NP (NP (DT the) (NN text) (NN node)) (SBAR (WHNP (WDT which)) (S (VP (AUX is) (VP (TO to) (VP (AUX be) (VP (VBN modified))))))))))) (: -) (VP (VB modify) (NP (NP (DT the) (NN text) (NN value)) (PP (IN of) (NP (DT the) (NN node))))) (: -) (VP (VB replace) (NP (DT this) (VBN cloned) (NN node)) (PP (IN with) (NP (DT the) (JJ old) (NN one)))))) (. .)) )
(TOP (S (NP (NP (DT The) (NN code)) (PP (IN for) (NP (DT this)))) (VP (AUX is) (PP (IN below))) (. .)) )
(TOP (S (NP (NNS Thanks)) (ADVP (RB again)) (VP (person (NNP Nigel)) (VP (VBP =======================) (NP (NP (QP (CD 8) (CD ====================)) (JJ public) (NN void) (NN copyIntoParent)) (PRN (-LRB- -LRB-) (NP (NNP Node) (NNP n)) (-RRB- -RRB-))) (-LRB- -LCB-) (RB //) (VP (VB get) (S (NP (NP (JJ current) (NN node) (POS 's)) (NN text)) (VP (VB content) (VP (VB copy) (NP (PRP it)) (ADVP (RB //)) (PP (IN into) (NP (NN parent) (NN node))) (, ,) (SBAR (IN in) (S (NP (NP (NN place)) (PP (IN of) (NP (JJ current) (NN node) (NNS //)))) (VP (AUX Has) (NP (NP (DT the) (VB affect)) (PP (IN of) (S (VP (VBG removing) (NP (NNS elements)) (PP (IN from) (NP (NP (JJ //) (NN text)) (ADJP (JJ content))))))))))))))))) (. .)) )
(TOP (S (NP (NNP System.out.println) (PRN (-LRB- -LRB-) (NP (NP (`` ``) (NN child) ('' '') (NN +)) (ADJP (ADJP (JJ n.getNodeName)) (-LRB- -LRB-))) (-RRB- -RRB-)) (NNP +)) ('' '') ('' '') (VP (VBZ +) (NP (NP (NP (NP (NP (NN getTextFromNode)) (PRN (-LRB- -LRB-) (NNP n) (-RRB- -RRB-) (-RRB- -RRB-)) (: ;) (NP (NN setTextInNode)) (PRN (-LRB- -LRB-) (NP (NNP n)) (, ,) ('' '') (S (NP (NNP *)) (VP (VBG *) (NP (PRP$ my) (JJ new) (NN text) (NNS **)))) ('' '') (-RRB- -RRB-)) (: ;) (NP (NP (NNP System.out.println) (PRN (-LRB- -LRB-) (NP (NP (`` ``) (NN child) ('' '') (NN +)) (ADJP (ADJP (JJ n.getNodeName)) (-LRB- -LRB-))) (-RRB- -RRB-)) (NN +) ('' '')) ('' '') (VP (VBD +) (NP (NP (NN getTextFromNode)) (PRN (-LRB- -LRB-) (NNP n) (-RRB- -RRB-) (-RRB- -RRB-))))) (: ;) (NP (JJ public) (NN void) (NN setTextInNode)) (-LRB- -LRB-) (NP (NP (NNP Node) (NNP n)) (, ,) (NP (NNP String) (NN newText))) (-RRB- -RRB-) (-LRB- -LCB-) (NP (NNP Node) (NN child)) (X (SYM =))) (NP (NN n.getFirstChild))) (-LRB- -LRB-) (-RRB- -RRB-)) (, ,) (NP (NP (NN clone)) (: ;) (NP (NP (JJ final) (NN boolean)) (X (JJ deep) (SYM =) (ADJP (JJ false))) (: ;) (S (VP (VBG //) (NP (NNP Read)) (SBAR (S (NP (NP (DT the) (NN text)) (PP (IN that) (NP (DT this) (NN node)))) (VP (AUX has) (VP (VBG //) (CC and) (VB append) (PP (TO to) (NP (PRP it))) (NP (NP (DT the) (JJ new) (NN text)) (SBAR (WHNP (WDT that)) (S (VP (AUX is) (S (VP (TO to) (VP (AUX be) (VP (VBN added) (S (NP (NNP String) (NN currentText)) (VP (SYM =) (NP (NP (NN getTextFromNode)) (PRN (-LRB- -LRB-) (NP (NNP n)) (-RRB- -RRB-)))))))))))))))))))) (: ;) (NP (QP (CD currentText) (CD +=)) (NN newText)) (: ;) (NP (NN clone)) (X (SYM =)) (NP (NN child.cloneNode)) (PRN (-LRB- -LRB-) (JJ deep) (-RRB- -RRB-)) (: ;))))) )
(TOP (NP (NP (NNP clone.setNodeValue)) (PRN (-LRB- -LRB-) (NN currentText) (-RRB- -RRB-)) (: ;)) )
(TOP (NP (NP (NP (NNP n.replaceChild)) (PRN (-LRB- -LRB-) (NP (NN clone) (, ,) (NN child)) (-RRB- -RRB-)) (: ;) (NP (JJ public) (NN String) (NN getTextFromNode)) (PRN (-LRB- -LRB-) (NP (NNP Node) (NNP n)) (-RRB- -RRB-))) (PRN (-LRB- -LCB-) (S (NP (NNS //)) (VP (VBP get) (NP (NP (NP (NP (JJ current) (NN node) (POS 's)) (NN text) (NN content) (NNP Node) (NN child)) (: ;) (NP (NP (NP (NN String) (NN textData)) (NP (NP (NP (SYM =) ('' '') ('' '') (: ;) (NP (NNP NodeList) (NNS children)) (: ;) (NP (JJ int) (NNS numberOfChildren)) (: ;) (NP (NNS //))) (SBAR (IN If) (S (NP (DT the) (NN node)) (VP (AUX has) (NP (DT any) (NN child) (NNS nodes)) (, ,) (S (NP (NNS //)) (VP (VBG bung) (NP (NP (DT all)) (PP (IN of) (NP (PRP them)))) (PP (IN into) (NP (NP (DT a) (NN nodelist)) (VP (VBD called) (NP (NNS children) (NNS children))) (X (SYM =)))))))))) (NNS n.getChildNodes))) (-LRB- -LRB-) (-RRB- -RRB-)) (: ;) (NP (NN numberOfChildren)) (X (SYM =))) (NP (NN children.getLength))) (-LRB- -LRB-))) (-RRB- -RRB-)) (: ;)) )
(TOP (S (NP (NNP //) (organization (NNP Read))) (NP (DT each) (NN child)) (SBAR (RB now) (IN for) (FRAG (-LRB- -LRB-) (NP (NP (NN int)) (SBAR (S (S (NP (PRP i)) (VP (SYM =) (NP (CD 0)))) (: ;) (S (NP (PRP i)) (VP (VBP numberOfChildren)))))) (: ;) (NP (NN i++)) (-RRB- -RRB-))) (-LRB- -LCB-) (NP (NN child)) (VP (SYM =) (NP (NP (NN children.item)) (PRN (-LRB- -LRB-) (NP (NN i)) (-RRB- -RRB-)))) (: ;)) )
(TOP (S (VP (VB //) (S (SBAR (IN If) (S (NP (DT this) (NN child)) (VP (AUX has) (NP (DT some) (NN text))))) (, ,) (VP (VB let) (NP (PRP 's)) (VP (VB get) (NP (PRP it)))) (. !)) (SBAR (IN if) (S (NP (PRN (-LRB- -LRB-) (JJ child.getNodeType) (-LRB- -LRB-) (-RRB- -RRB-) (VP (VBG ==) (NP (CD 3))) (-RRB- -RRB-)) (JJ textData) (NNS +=)) (VP (VB child.getNodeValue) (-LRB- -LRB-) (-RRB- -RRB-))))) (: ;)) )
(TOP (NP (NP (CD //) (RB else) (JJ //) (NNP System.out.println)) (PRN (-LRB- -LRB-) (NP (`` ``) (NP (DT No) (NN text)) (PP (IN with) (NP (NP (CD one) (NN child)) (PP (IN of)))) ('' '') (ADJP (ADJP (RB +) (JJ child.getNodeName)) (-LRB- -LRB-))) (-RRB- -RRB-))) )
(TOP (NP (NP (NNPS +) ('' '') (NN Type)) (PRN (: :) (FRAG ('' '') (NP (CD +) (NN child.getNodeType))) (-LRB- -LRB-) (-RRB- -RRB-) (-RRB- -RRB-)) (: ;)) )
(TOP (NP (NN return) (NNS textData) (: ;)) )
(TOP (S (NP (PRP I)) (VP (VBP think) (SBAR (S (NP (DT a) (ADJP (RBR more) (JJ correct)) (NN statement)) (VP (AUX is) (SBAR (IN that) (S (`` ``) (NP (NNP DOM)) ('' '') (VP (AUX does) (RB n't) (VP (VB let) (S (NP (PRP you)) (VP (AUX do) (SBAR (WHNP (WP what)) (S (NP (PRP you)) (VP (VBP want) (PP (IN without) (S (VP (VBG writing) (NP (DT some) (JJ additional) (NN code)))))))))))))))))) (. .)) )
(TOP (S (S (NP (PRP You)) (VP (AUX were) (RB neither) (VP (VBG running) (PP (IN into) (NP (NNS bugs)))))) (, ,) (CC nor) (SQ (AUX were) (NP (PRP you)) (VP (VBG using) (NP (JJ extended) (NNS facilities)) (PP (IN in) (NP (NP (NP (organization (NNP Sun)) (POS 's)) (NN implementation)) (PRN (-LRB- -LRB-) (NP (CD e.g.) (NN namespace) (NN support)) (-RRB- -RRB-)))))) (. .)) )
(TOP (S (ADVP (RB So)) (NP (PRP it)) (VP (AUX 's) (NP (NN nothing) (JJ specific)) (S (VP (TO to) (VP (VB work) (SBAR (S (NP (organization (NNP Sun))) (VP (AUX has) (VP (AUX done))))))))) (. .)) )
(TOP (S (NP (EX There)) (VP (AUX are) (NP (NP (ADJP (ADJP (JJR more)) (CC and) (ADJP (RBR less) (JJ efficient))) (NNS ways)) (SBAR (S (VP (TO to) (VP (AUX do) (SBAR (WHNP (WP what)) (S (NP (PRP you)) (VP (AUX 're) (VP (VBG doing))))) (, ,) (PP (IN within) (NP (NP (DT the) (NN context)) (PP (IN of) (NP (DT the) (NNP DOM) (NNPS APIs))))))))))) (. .)) )
(TOP (X (S (NP (PRP We)) (VP (AUX 're) (ADJP (JJ glad) (SBAR (IN that) (S (NP (PRP you)) (VP (AUX have) (NP (NP (DT a) (NN solution)) (SBAR (WHNP (WDT that)) (S (VP (VBZ works) (PP (IN for) (NP (PRP you)))))))))))) (. !)) (: -) (NP (person (NNP Dave)))) )
