%  Idempotent % I second the request for a clear definition in the context of this spec. 
% Another good reason for this: idempotent is not in any dictionary % (including my Webster's unabridged) that I could find. 
Being a mathematician, my idea of idempotence is a function f such as f(f(x)) = f(x) . 
Now, I admit it is not something I'll put on the http specs, but what about "something which does not change if requested twice in rapid succession"? 
ciao, .mau. ] %  Idempotent ] % I second the request for a clear definition in the context of this spec. 
] % Another good reason for this: idempotent is not in any dictionary ] % (including my Webster's unabridged) that I could find. 
] Being a mathematician, my idea of idempotence is a function f such as ] f(f(x)) = f(x) . 
] Now, I admit it is not something I'll put on the http specs, but what about ] "something which does not change if requested twice in rapid succession"? 
How about: "the results do not change in a way that matters (to the client or server) if repeated twice in a row (i.e., with no other intervening methods)" The reason that GET incrementing a counter can still be idempotent is that it doesn't matter to the client or server. 
(If it did, e.g., payment was based on hits, then this arguement wouldn't apply.) 
I don't have a position (yet) on whether GET should be required to be idempotent. 
However, if it isn't, then any non-idempotent GET *must* be marked non-cacheable. 
Paul If I understand correctly, there are two different issues with "idempotence": (a) what it really is (b) when it should be applied. 
I am not sure that the statement of Koen, % 2) in the mathematical meaning, *all* side effects, not just `bad' % side effects, must be absent the second time. 
applies to a mathematical model of idempotence - but I fail to see any math model with side effects, too :-) anyway, this is not an issue with respect to the draft. 
As for (a), could we say that there is an optional property (named idempotence, hysteresis or whatever you want) such that any two consecutive request to the server should return an identical result *as far as client is concerned*? 
I could be wrong, but my idea is that we don't care if the server updates a counter or performs whatever it wants, as long as the client cannot notice it. 
.mau. 
You might want to spin that out in more detail; (I know I am stating the obvious, but I have lost track in some of the discussion now, so I like to do a few steps back rather than add something: ) I.e: That an idem-potent request; defined by 'method, url, http-version, ...' returns the same result ( regardless of anything you did not define a moment ago between the two tick-quotes; specifically including indepenence of the time/date, host(s) involved, user-name (from basic-auth or whatever) etc...) every *time/date* it is issued by the *same* client. 
Because what worries me is that we really ought to specify *what* defines a request. 
The *whole* header + hosts involved; or just the GET xyz http/get line with a few accepts... i.e. where to draw the line. 
If you just look at the request; as you should not look at the server itself then you have temporal qualities, i.e. time of RQ and Answer client-host, server-host, port METHOD /ur HTTP/version Misc I.e. the N-Dimensional approach much talked about :-) The temporal qualities are the first issue; they are gouverned by expire or whatever other specific temporal cache information. 
The server-host+port is not the issue; they are gouverned by DNS and are at the discretion of the owner of the server The client-hist *is* an issue. 
And should have an explicit cache directive, ie. 
Reply-Not-Client-Specific * or Not-Client-Specific *.jrc.it or whatever. 
Then you need one for the METHOD, i.e. which ones are OK to cache and which ones are not, And so on... for each of the other aspects. 
Is this notion correct, is this what we are talking about or have a few aspects already be ruled out ? 
Dw. 
Why not use "cacheable" instead of "idempotent"? 
Harald A No, that doesn't work - "cacheable" refers to the object, "idempotent" refers to the method. 
I would rather say that an idempotent method does not change the topology of the Web. 
The reason for using "topology" and not "state" is that in some cases, idempotent requests can change the state of the web - especially if log files are considered as a part of the state of the Web, or for example if a document can be accessed 5 times. 
Henrik Frystyk Nielsen, frystyk@w3.org 
World-Wide Web Consortium, MIT/LCS NE43-356 545 Technology Square, Cambridge MA 02139, USA Most server side effects also do not change the topology of the web, for instance, changes to an SQL database attached to the server, that eventually cause pizzas to be dispatched. 
But these server side effects are largely what is at issue. 
