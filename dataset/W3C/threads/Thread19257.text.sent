Hi all, When an element is drawn, its corresponding boxes are processed. 
Now the code in RedrawFrameBottom loops through all planes and renders the boxes in their depth order. 
There is code in there that also makes sure that the "dirty rectangle" or clipping area intersects the box before it (box) is drawn. 
My question is, how does the rendering system ensure that, if there's 2 boxes (small box inside a bigger box), and the bigger box intersects the clipping area but the smaller box doesn't, that the smaller box will still be rendered? 
Since only the bigger box intersects the clipping area, it is redrawn but then if it clears the area that it covers, the smaller box inside of it will be drawn over. 
Since the smaller box doesn't intersect the clipping area, it is never redrawn. 
Even if you put the bigger box in a deeper plane (higher number), the rendering doesn't appear to take into consideration that the "background" of the smaller box (essentially the bigger box!) has changed, and therefore the smaller box, even if it doesn't intersect the clipping area, must be drawn. 
Are there some rules in defining the boxes that prevent the above from happening? 
Should the "smaller" box really have the same dimensions as the "bigger" box? 
Maybe I made a mistake in defining my boxes? 
Any help would be appreciated! 
Thanks, -An Hi all, The local changes I put in RedrawFrameTop/RedrawFrameBottom that appear to solve this problem are implemented as... (1) If a box is drawn, its bounding rectangle is added to a list of dirty rectangles. 
The current clip region is also OR'ed with the region covered by this bounding rectangle to make a new clip region for the DC. (2) When a box is checked for intersection, it is now also checked with the list of dirty rectangles from (1) above. 
If it intersects any of the dirty rectangles, it will be redrawn EVEN if it did not intersect the frame's clip rectangle. 
This allows smaller inner boxes to be redrawn if their container is redrawn, even if the smaller inner box does not intersect the frame's clip rectangle. 
At first I thought a quicker way to solve this was to not just check for intersection between the box and the frame's clip rectangle, but also compare the enclosing box of the box with the frame's clip rectangle. 
However, I couldn't think of a way to effectively differentiate between a "real" enclosing box (say Submit_Input encloses Value_Box) and the default enclosing box (Body encloses Submit_Input). 
So in this latter case, if you intersected Body with the frame's clip rectangle, it would always intersect...or so I think...making us redraw the Submit_Input box even if we don't have to. 
So anyway, what I wanted to know was if I was just wasting my time implementing the code to do (1) and (2). 
Maybe I've got some wrong assumptions about how boxes can be defined in the P file? :-) For a fuller description of what I thought the problem was, see my previous e-mail. 
Anyone interested in looking at the modifications, let me know. 
:-) Thanks, -An how does the rendering system ensure that, if there's 2 boxes (small box inside a bigger box), and the bigger box intersects the clipping area but the smaller box doesn't, that the smaller box will still be rendered? 
Since only the bigger box intersects the clipping area, it is redrawn but then if it clears the area that it covers, the smaller box inside of it will be drawn over. 
Since the smaller box doesn't intersect the clipping area, it is never redrawn. 
In-reply-to: Your message of Wed, 27 Oct 1999 11:13:48 -0400." 
A box which intersects the clipping area is rendered. 
In fact only the part of box within the clipping area is displayed. 
If the smaller box is out of the clipping area, it's not rendered. 
Normally the clear is also limited by the clipping area. 
So the smaller box should not be cleared. 
I'm not sure that the work is well done, but we planned to take into account that some boxes have a background to compute the right clipping area. 
Did you detected a case where that happens. 
That should work when the bigger box has presentation rules: Background: color + FillPattern: backgroundcolor + Showbox Irene. 
Thanks for the response Irene. 
Please see my comments below. 
Also, please see my other response sent earlier today. 
Thank you. 
-An The case I am thinking of is a smaller box inside a big box: (see below in fix width font) | |small| | | big | | | clip | The big box will intersect and redraw. 
The smaller box will not intersect and not be updated. 
But the bigger box may overwrite the smaller box? 
Yes, only the clipping area is cleared. 
But when the bigger box redraws, the smaller box will be overdrawn. 
I modified some P boxes that is my test case. 
Basically, the button draws a filled P box (button shape) that is the bigger box and the value (button text) is drawn inside of it. 
I don't know if any of the unmodified Amaya elements have this problem...but maybe it's not easy to produce a test case. 
In this case, is the bigger box is considered a filled box? 
Then the processing is done first, before any of the other boxes get rendered, right? 
But then the smaller enclosed box will still not intersect with clip rectangle so they will not update. 
