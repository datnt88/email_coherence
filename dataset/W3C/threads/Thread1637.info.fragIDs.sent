Reference draft #13 - How could the MKACTIVITY method be used to indicate a server-defined "activity" at a server-defined activity collection? 
It appears that the CHECKOUT method (section 11.10) has the ability to have the server automatically create an "activity", why doesn't the MKACTIVITY method have this (or if it does, how)? 
- I noticed in section 11.5 "Marshalling", there is mention of an XML-element "mkactivity" as part of the MKACTIVITY method. 
What is this intended to be used for and what are the possible values for it? 
- To minimize client/server communication, could it be possible for the MKACTIVITY method to NOT specify the collection, just the activity name? 
Since the client would have to solicit the server for the valid collection locaiton before building the request (i.e. eliminating the DAV:activity-collection-set OPTIONS request). 
Many thanks, Steve Speicher sspeiche@us.ibm.com 
From: Steve K Speicher [mailto:sspeiche@us.ibm.com] 
Reference draft #13 - How could the MKACTIVITY method be used to indicate a server-defined "activity" at a server-defined activity collection? 
It appears that the CHECKOUT method (section 11.10) has the ability to have the server automatically create an "activity", why doesn't the MKACTIVITY method have this (or if it does, how)? 
The purpose of the "new activity" option for CHECKOUT is to allow a lightweight client to easily interoperate with a server that requires activities. 
A client with full activity support (i.e. one that utilizes MKACTIVITY) can use a DAV:activity-set-collection 
OPTIONS request to determine where it can allocate activities. 
In an earlier draft of the spec, I had the MKACTIVITY request always allocate an activity at a server defined location, and the request-URL was just a "hint" to the server for what the client wanted that activity named. 
Other members of the design team felt it is better/simpler to fail the MKACTIVITY request if the request-URL is not a valid name for a new activity. 
- I noticed in section 11.5 "Marshalling", there is mention of an XML-element "mkactivity" as part of the MKACTIVITY method. 
What is this intended to be used for and what are the possible values for it? 
This ensures that any extensions that add arguments to the MKACTIVITY method do so in a "consistent" fashion. 
- To minimize client/server communication, could it be possible for the MKACTIVITY method to NOT specify the collection, just the activity name? 
Since the client would have to solicit the server for the valid collection locaiton before building the request (i.e. eliminating the DAV:activity-collection-set OPTIONS request). 
A request has to go to a particular resource, which is then responsible for handling the request. 
What would be the request-URL of the MKACTIVITY method in this case? 
Cheers, Geoff 
How is a client with full activity support intended to know what a valid activity name is without much trial-and-error? 
I was hoping for something like: MKACTIVITY * HTTP/1.1 
This way the client can programmatically maintain the activity information and the end-user could perform simple routines like: "new activity" and "done with activity" without concern about coming up with a valid activity identifier. 
Since the client is already aware of the DAV/activity-enabled part of a URL, couldn't it be used without the additional activity location since the activity location is not handled by a separate handler, right? 
So if the URL http://repo.webdav.org/test-23 and "/" is DAV/activity-enabled, then could the request be something like this? 
MKACTIVITY /test-23 HTTP/1.1 Host: repo.webdav.org 
Content-Length: long Is the additional XML really needed if the server would "assume" that the client meant for the server to specify the correct collection? 
Thanks, Steve P.S. Your responses to my newbie questions are greatly appreciated. 
From: Steve K Speicher [mailto:sspeiche@us.ibm.com] 
How is a client with full activity support intended to know what a valid activity name is without much trial-and-error? 
I was hoping for something like: MKACTIVITY * HTTP/1.1 
It shouldn't require much trial and error. 
You can just use some GUID generator in the client to ensure that the activity name is unique. 
In general, there are multiple modules/servers that handle different subtrees at a web site, and often the DAV module will not handle "/", but rather some subtree such as "/dav". 
Assuming that a request to "*" gets handled by the module that handles "/", the MKACTIVITY request will not be understood. 
In addition, if there are multiple DAV modules handling different parts of the namespace, each with its own activity store, it is important that the activity gets created in the right activity collection (not something that can be inferred from "MKACTIVITY *". 
This way the client can programmatically maintain the activity information and the end-user could perform simple routines like: "new activity" and "done with activity" without concern about coming up with a valid activity identifier. 
A client can simulate this behavior by using a GUID for the name of a new activity (putting the activity in a randomly selected member of the DAV:activity-collection-set). 
Since the client is already aware of the DAV/activity-enabled part of a URL, couldn't it be used without the additional activity location since the activity location is not handled by a separate handler, right? 
So if the URL http://repo.webdav.org/test-23 and "/" is DAV/activity-enabled, then could the request be something like this? 
MKACTIVITY /test-23 HTTP/1.1 Host: repo.webdav.org 
Content-Length: long Is the additional XML really needed if the server would "assume" that the client meant for the server to specify the correct collection? 
Yes, something like that would be just fine. 
As far as I know, the only argument against this was that this functionality was not required since a client could just allocate a GUID for this purpose, so the protocol is simpler without this option. 
Cheers, Geoff 
One final comment *hopefully* ;-) 
I guess my example was too simple (and wrong perhaps). 
In order for a client to find out what activity-collection to use it must first issue an OPTIONS request with a given URL, say http://repo.dav/dav/ and gets the property DAV:activity-collections-set. 
Why couldn't I form a request, like: MKACTIVITY /dav/* HTTP/1.1 
And get the response (implicity do an OPTIONS request to get DAV:activity-collections-set): HTTP/1.1 201 Created Location: http://repo.dav/dav/act/123 
Or am I completely wrong in thinking it would be a valid operation of a activity-enabled server to assign an activity identifier using MKACTIVITY? 
Most bug-tracking servers have an option/configuration to automatically assign a number but I'm trying to determine if this is outside the scope of this protocol. 
Thanks again, Steve 
This would by no means be wrong (and in one draft of the protocol was the *only* way that MKACTIVITY worked). 
But other members of the design team felt that it was simpler/better to have this be under client control, i.e. a client can allocate a GUID for the activity name if it so desired, but the server's job is just to instantiate the activity with the name specified by the client. 
Personally, I can live with either way, but to minimize protocol complexity, I'd probably prefer us to support one way or the other way, but not both (i.e. not add a flag to MKACTIVITY for this). 
Cheers, Geoff One final comment *hopefully* ;-) 
I guess my example was too simple (and wrong perhaps). 
In order for a client to find out what activity-collection to use it must first issue an OPTIONS request with a given URL, say http://repo.dav/dav/ and gets the property DAV:activity-collections-set. 
Why couldn't I form a request, like: MKACTIVITY /dav/* HTTP/1.1 
And get the response (implicity do an OPTIONS request to get DAV:activity-collections-set): HTTP/1.1 201 Created Location: http://repo.dav/dav/act/123 
Or am I completely wrong in thinking it would be a valid operation of a activity-enabled server to assign an activity identifier using MKACTIVITY? 
Most bug-tracking servers have an option/configuration to automatically assign a number but I'm trying to determine if this is outside the scope of this protocol. 
Thanks again, Steve 
