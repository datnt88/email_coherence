(TOP (S (S (NP (PRP I)) (VP (AUX 'm) (RB not) (ADJP (JJ sure) (SBAR (WHADVP (WRB why)) (S (NP (NN someone)) (VP (MD would) (VP (AUX need) (S (VP (TO to) (VP (VB cast) (ADJP (JJ hexBinary) (CC and) (JJ base64Binary)) (S (VP (TO to) (VP (VB boolean)))))))))))))) (, ,) (CC but) (S (PP (IN of) (NP (NN course))) (NP (EX there)) (VP (MD may) (VP (AUX be) (NP (NP (DT a) (NN use) (NN case)) (SBAR (S (NP (PRP I)) (VP (AUX have) (RB n't) (VP (VBD thought) (PP (IN of)))))))))) (. .)) )
(TOP (S (ADVP (RB However)) (, ,) (NP (DT the) (VBG casting) (NN rule)) (VP (AUX is) (ADJP (NP (DT a) (RB little)) (JJ unclear))) (. .)) )
(TOP (S (S (NP (PRP It)) (VP (VBZ says) (: :) (`` ``) (S (SBAR (IN If) (S (NP (organization (NNP ST))) (VP (AUX is) (NP (NP (NN xs)) (: :) (NP (NN base64Binary) (CC or) (NN xs)) (: :) (NP (NN hexBinary) (CC and) (NN SV)))))) (VP (AUX is) (VP ('' '') (NP (CD 1))))) ('' ''))) (, ,) (RB then) (S (NP (NNP TV)) (VP (AUX is)))) )
(TOP (S (ADJP (JJ true)) (: ;) (SBAR (IN if) (S (NP (organization (NNP ST))) (VP (AUX is) (NP (NP (NN xs)) (: :) (NP (NN base64Binary) (CC or) (NN xs)) (: :) (NP (NN hexBinary) (CC and) (NN SV)))))) (VP (AUX is) (NP ('' '') (NP (CD 0)) ('' '') (PRN (, ,) (RB then) (NP (NNP TV)))))) )
(TOP (S (SQ (AUX is) (NP (FW false.) ('' '') (CD 1.)) (VP (VBG Putting) (NP (DT the) (NNS values)))) ('' '') (NP (NP (CD 1)) ('' '') (CC and) ('' '') (NP (CD 0)) ('' '') (PP (IN in) (NP (NNS quotes)))) (VP (VBZ implies) (SBAR (IN that) (S (NP (DT these)) (VP (AUX are)))))) )
(TOP (NP (NP (JJ valid) (JJ lexical) (NNS forms)) (PP (IN for) (NP (DT these) (NNS types))) (. .)) )
(TOP (S (NP (PRP They)) (VP (AUX are) (RB n't) (, ,) (SBAR (IN since) (S (NP (DT these) (NNS values)) (VP (MD must) (VP (VB come) (PP (IN in) (NP (NNS octets)))))))) (. .)) )
(TOP (SQ (AUX Was) (NP (DT the) (NN intention)) (SBAR (IN that) (S (NP (JJ hexBinary) (`` ``) (NNS 01) ('' '')) (VP (AUX be) (VP (VBN cast) (S (VP (TO to) (VP (VB boolean) (ADJP (JJ true))))))))) (. ?)) )
(TOP (FRAG (WHNP (WP What)) (PP (IN about) (NP (JJ hexBinary) (`` ``) (CD 0001) ('' ''))) (. ?)) )
(TOP (FRAG (RB 2.) (WP What) (SBAR (IN if) (S (NP (DT the) (NN value)) (VP (AUX is) (RB not) (ADJP (JJ equivalent) (PP (TO to) (NP (NP (CD 0)) (CC or) (NP (CD 1)))))))) (. ?)) )
(TOP (S (NP (PRP It)) (VP (AUX does) (RB n't) (VP (VB say) (SBAR (IN whether) (S (NP (PRP it)) (VP (MD should) (VP (AUX be) (VP (VB cast) (PP (TO to) (ADJP (JJ true)))) (, ,) (VP (VB raise) (NP (NP (DT an) (NN error)) (, ,) (CC or) (NP (WP what)))))))))) (. .)) )
(TOP (NP (NNS Thanks) (, ,) (NNP Priscilla)) )
(TOP (S (NP (PRP You)) (VP (AUX 're) (VP (AUXG being) (ADJP (JJ polite)))) (. .)) )
(TOP (S (NP (PRP It)) (VP (AUX 's) (ADJP (RB totally) (JJ unclear))) (. .)) )
(TOP (S (NP (PRP We)) (VP (AUX have) (NP (DT an) (NN agenda) (NN item)) (PP (IN on) (NP (NP (PRP$ our) (NN meeting)) (NP (date (JJ next) (NN week))))) (S (VP (TO to) (VP (VB fix) (NP (DT this)))))) (. .)) )
(TOP (NP (NP (NNS Thanks)) (PP (IN for) (NP (PDT all) (DT the) (NNS comments))) (. !)) )
(TOP (NP (person (NNP Michael) (NNP Kay))) )
(TOP (S (S (NP (PRP We)) (VP (VP (VBP agree)) (CC and) (VP (AUX have) (VP (VBN decided) (S (VP (TO to) (VP (VB remove) (NP (DT this) (NN functionality)) (PP (IN from) (NP (DT the) (NNP F&amp)))))))))) (: ;) (S (VP (VBG O) (NP (NN document)))) (. .)) )
(TOP (NP (NP (NP (NNP /paulc) (person (NNP Paul) (NNP Cotton))) (, ,) (NP (organization (NNP Microsoft) (NNP Canada)))) (NP (CD 17) (NAC (location (NNP Eleanor) (NNP Drive)) (, ,) (location (person (NNP Nepean))) (, ,)) (location (NNP Ontario)) (NNP K2E) (NN 6A3))) )
(TOP (FRAG (PP (IN of)) (. .)) )
(TOP (NP (NNP TV)) )
(TOP (X (AUX are)) )
