With the changes mentioned in the previous message, the classic Xerces-J (can't remember the exact version) that I've been using as a benchmark only fails one test (elementreplaceattributewithself) in default mode. 
elementreplaceattributewithself is a test that I introduced when discovering that elementinuseattributeerr was unintentionally testing this behavior. 
From http://www.w3.org/TR/REC-DOM-Level-1/level-one-core.html#method-setAttributeNode setAttributeNode ... 
INUSE_ATTRIBUTE_ERR: Raised if newAttr is already an attribute of another Element object. 
The DOM user must explicitly clone Attr nodes to re-use them in other elements. 
elementreplaceattributewithself tests the behavior when setAttributeNode is called with an attribute that is already on use on the SAME object. 
Since newAttr does not meet the criteria to throw an INUSE_ATTRIBUTE_ERR, this test expects that setAttributeNode will not throw an exception and to basically do nothing. 
I believe the test reflects the wording of the spec. 
However, if Xerces-J existing behavior is deemed acceptible, then the phase "another Element" should be replaced with "any Element". 
Re INUSE_ATTRIBUTE_ERR: Good catch. 
I believe I raised that question back in the DOM 1 days and was told our intent was that this exception could and should be raised if the Attr node was already in use _anywhere_, including on the Element where you intended to set it. 
But I agree that the wording you've quoted doesn't mandate that and needs to be clarified one way or the other. 
(This whole set of behaviors is left over from a time when we thought Attr nodes might be shared by multiple elements. 
That idea was abandoned a _very_ long time ago. 
Might it be time to consider biting the bullet and making setAttributeNode[ns] imply removing the Attr from its previous context first, as inserting a child node does?) Joe Kesselman / IBM Research 
Note that changing the wording would mean making an uncompatible change with current DOM Level 1 implementations. 
Xerces-J may have the wrong behavior, this doesn't mean all DOM Level 1 implementations are also doing the same. 
Philippe 
The same issue should affect NamedNodeMap.setNamedNode which has consistent wording on the criteria for throwing INUSE_ATTRIBUTE_ERR. 
At least in Xerces-J, the implementation of Element.setAttributeNode is a delegation to the implementation of NamedNodeMap.setNamedNode, so any changes should be consistent. 
Removing the node from its original location and not throwing an INUSE_ATTRIBUTE_ERR would potentially break applications that depended on this behavior. 
If I remember the genesis of this test correctly, there was a processor that was failing the miswritten elementinuseattribute test which would indicate that there was a processor that was not throwing an exception. 
However, I would need to survey the implementations again to confirm that. 
The cost of implementing the no exception on same behavior is trivial since it would only add an identity check after it is determined that the attribute is in use. 
I think it is remote that any application would be adversely affected by changing the implementations to no exception on same behavior, and if they did, they were at risk for depending on behavior that was not in the spec. 
Dimitris raised the issue at the DOM teleconference an hour. 
The current wording in the specification is clear regarding throwing an exception or not. 
INUSE_ATTRIBUTE_ERR: Raised if newAttr is already an attribute of another Element object. 
The DOM user must explicitly clone Attr nodes to re-use them in other elements. 
You can replace an Attribute node with itself with setAttributeNode, therefore the failure of the Xerces implementation on the test is appropriate. 
On the other hand, it is not clear if this operation is considered as a "no-op" one or should behave like a normal setAttributeNode operation, i.e. fire the appropriate events, etc. 
With no objection, it was decided to not consider it as a normal operation, therefore replacing an Attribute node with itself is a no-op operation and "does nothing". 
The same decision should be applied to setNamedItemNS. 
Errata will follow soon. 
Philippe 
