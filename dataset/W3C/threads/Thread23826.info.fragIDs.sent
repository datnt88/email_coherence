An awful lot of second-guessing seems to be accompanying the current discussion of onscreen type, type embedding, etc. -- second-guessing of developing technology, second-guessing of how people might want or need to use type five years from now, or even one year from now. 
All this is happening while many of the people developing the new technology, designing fonts or simply dreaming up bright new ideas have little overall picture of how type is being used today. 
There is a tendency, of which we are all guilty, to look at type from the perspective of our own corner of the industry (or related industries), and not to fully consider what people in other areas might require of font technology. 
Ever since type became a digital entity, distinctions between different kinds of type, and between different kinds of people who use type, have been largely ignored. 
The thinking seems to have been: 'Because all type -- whether employed by graphic designers, computer programmers, secretaries, or any of the other countless groups of people who 'need' fonts -- is packed in the same software container, all type must be the same.' This is an error of thinking that has affected type design, software development, distribution systems and pricing structures. 
I propose (and I'll let everyone else decide who is best placed to implement such a proposal) that time should be taken to build a series of models of current font usage, detailing how fonts are purchased and used by different market groups, how fonts are likely to be used by such groups in the future, 
and which smaller market groups are likely to grow in response to various 
current technological initiatives. 
Of principal concern should be issues of ownership, licensing, and data protection. 
Obviously these issues are going to imply different things to different groups -- one thing to companies commissioning custom typefaces, for example, and another to developers of Web browsers.The 
point _is_ the difference, and we lack a model of these differences suitable to informing the present debate. 
I suspect, if such modelling were available, font technology developers would see the need to control, within the font data, the ways in which a font can be used. 
It is not that I am opposed in principle to outline fonts being used, in some fashion, on the Web and in electronic documents; rather, font designers, manufacturers and distributors should be able to determine which of their fonts can be used in such a fashion and which cannot. 
Simply rewriting licensing agreements and hoping for the best is not good enough, it is not even adequate. 
It is unacceptable, as a type designer, to be handed a new technology, told that it is going to be a world standard, and then told that your work is unprotectable as a result. 
It is equally unacceptable for a company commissioning a custom typeface to be unable to use that typeface on their website without giving up the very exclusivity in which they invested so much money. 
John Hudson, Type Director Tiro TypeWorks Vancouver, BC tiro@portal.ca 
Me: 
OK, sounds interesting. 
You volunteering to put forward a discussion document? 
I thought we were having a discussion. 
Have I misunderstood the procedure? 
Am I supposed to have a document before I can have a discussion? 
I rather thought we could have a discussion and that might result in a document. 
There are likely to be several "fashions"; particular foundries might give their assent in the license for some and not others. 
Machine-readable licenses would be a help here. 
Now _that_ is a very interesting idea, and certainly worthy of both a discussion and a document. 
This would be one way to approach the kind of control I have been proposing. 
If machine-readable licenses were embedded in the font format, foundries could specify how a font could be legally used, and the user's own system would ensure that they did not infringe the license. 
This would also allow foundries to ship different kinds of fonts to matchg different kinds of licencing agreements. 
Y&amp;Y, for instance, does not permit embedding in their standard licence, but offer an electronic broadcast licence to those who pay for it (at ten-times the original price, to partially offest the cost of piracy). 
Personally, I've got nothing against embedding fonts per se. 
I just want the option to say no with regard to some or all of our own typefaces, and want other designers and foundries to have the same option. 
Bill McCoy and Bill Hill may be right: endusers may object to the fact that they cannot embed our fonts, and they may demand it of us or take their money elsewhere. 
But that is an issue between us and our endusers, and I will not have Microsoft, Adobe or anyone else telling me otherwise. 
John Hudson, Type Director Tiro TypeWorks Vancouver, BC tiro@portal.ca 
Chris Lilley: 
And by other groups. 
It is the community who do not currently use fonts 
now but 
wish to in the future that is the growth area. 
Maybe something of what John (Tiro) meant was not picked up, or perhaps I'm 
just 
bringing my viewpoint to it, there is a fundamental difference between people who use type to view documents (currently everyone who can read) and those 
that 
use type to author documents. 
From my perspective I'd like to see that differentiation maintained, fonts for viewing and fonts for authoring should be two different things, and the former should not be able to be converted into the latter. 
Yes, that is indeed part of what I meant, though I didn't put it nearly so eloquently (or concisely). 
John Hudson, Type Director Tiro TypeWorks Vancouver, BC tiro@portal.ca 
Chris Lilley: 
And by other groups. 
It is the community who do not currently use fonts now but wish to in the future that is the growth area. 
Maybe something of what John (Tiro) meant was not picked up, or perhaps I'm just bringing my viewpoint to it, there is a fundamental difference between people who use type to view documents (currently everyone who can read) and those that use type to author documents. 
From my perspective I'd like to see that differentiation maintained, fonts for viewing and fonts for authoring should be two different things, and the former should not be able to be converted into the latter. 
ie ink on paper cannot be changed into a digital font without a substantial time investment. 
TruDoc goes some way towards this but IMO isn't *the* answer. 
-- Clive 
If you don't want your fonts embedded, our embedding DLL respects that. 
What's your problem? 
From: tiro@portal.ca[SMTP:tiro@portal.ca] Subject: Re: Proposal: Font Use Modelling Me: 
OK, sounds interesting. 
You volunteering to put forward a discussion document? 
I thought we were having a discussion. 
Have I misunderstood the procedure? 
Am I supposed to have a document before I can have a discussion? 
I rather thought we could have a discussion and that might result in a document. 
There are likely to be several "fashions"; particular foundries might give their assent in the license for some and not others. 
Machine-readable licenses would be a help here. 
Now _that_ is a very interesting idea, and certainly worthy of both a discussion and a document. 
This would be one way to approach the kind of control I have been proposing. 
If machine-readable licenses were embedded in the font format, foundries could specify how a font could be legally used, and the user's own system would ensure that they did not infringe the license. 
This would also allow foundries to ship different kinds of fonts to matchg different kinds of licencing agreements. 
Y&amp;Y, for instance, does not permit embedding in their standard licence, but offer an electronic broadcast licence to those who pay for it (at ten-times the original price, to partially offest the cost of piracy). 
Personally, I've got nothing against embedding fonts per se. 
I just want the option to say no with regard to some or all of our own typefaces, and want other designers and foundries to have the same option. 
Bill McCoy and Bill Hill may be right: endusers may object to the fact that they cannot embed our fonts, and they may demand it of us or take their money elsewhere. 
But that is an issue between us and our endusers, and I will not have Microsoft, Adobe or anyone else telling me otherwise. 
John Hudson, Type Director Tiro TypeWorks Vancouver, BC tiro@portal.ca 
What's  your problem? 
Well why didn't you say so before, or better yet explain precisely how this works and how independent type foundries will go about implementing it -- 
then we'll let you know what our 'problem' is, if any remain. 
By 'your' 
embedding DLL, I presume you are referring to OpenType. 
If so, I'm very glad to hear it, as David Lemon long since succeeded in convincing me of the basic virtues of the OT format and I hoped it might also provide better protection than other embedding schemes. 
Taking into account that a great many type designers are not necessarily programmers, perhaps you could explain to us, in simple terms, how this is going to work. 
If it provides the kind of security we're looking for, OT can expect our full support and encouragement. 
John Hudson, Type Director Tiro TypeWorks Vancouver, BC tiro@portal.ca 
- One problem might be that is very easy to change the OS/2 table bits. 
- Another problem might be that font foundries may have felt that it was a good idea to allow embededding into Word documents and the like, which are exchanged on a one to one basis. 
But time has moved on and now the prospects are that documents are exchanged at a one to a million basis. 
Similar situation with Type 1 and Acrobat, where foundries agreed to embedding in a quite different market (apart from the fact that the best fonts of these foundries had already been absorbed into the Adobe library. 
Not much point to say "no, thank you", was there?) - Another problem might be that there may be other DLL's, and we know that having the licence bit sets does not guaranty anything. 
It may be a good idea for Adobe and Microsoft make public what safety they actually propose for OpenType. 
And more important what safety there is for the existing stock of TT and more important T1. No licence bits in Type 1 are there? 
Jelle 
Bill Hill: 
Does your DLL work with Acrobat? 
How easy is it to override? 
How easy is it to get a usable font from a document? 
Does it work with all currently available font formats? 
Is the embedded data a complete and usable font, unrestricted in any way? 
Does the tooth fairy leave fonts under your pillow? 
Those are just a few of the problems, do you have all the answers? 
You may cite legal protection to these problems at the end of the day, I don't want legal solutions, I want technological prevention. 
-- Clive 
