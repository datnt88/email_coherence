Actually, the limitations of the XPath model should not necessarily be a limitation of c14n, especially in such a simple case. 
For starters, the current goal is to have a consistent way of writing XML 1.0, so for this version we could simply render the root node as ?xml 
version="1.0"? 
#xA rather than producing nothing as the result of the root node. 
This seems like a good idea since we really don't know what's coming in future versions of XML, so deciding how to canonicalize it now may not be appropriate. 
For example, it could happen that neither infoset nor xpath have a data model that adequately captures the next version of XML. 
However, even if you want to preserve the XML version, the fact that c14n applies an xml processor to the input to produce a node-set does not change the fact that c14n *has* the input and can therefore recover the version, although an application function hook may be required to help with character encoding issues for non-UTF. 
Also, the absense of a version should be construed as 1.0. 
This seeming need for a character encoding function hook actually leads one to a solution that might be more appropriate for something like DSig. 
We need c14n to do things like canonicalize SignedInfo. 
If the SignedInfo is coming from an XML document with version  1.0, we would like to know that, but the canonicalizer will only receive the SignedInfo text. 
Somehow, the version info either needs to be prepended to the SignedInfo, or the surrounding document's version must simply be known by "implementation-specific" means and provided to the canonicalizer as an additional parameter (we already provide the input and an optional XPath expression as parameters, so one more won't hurt). 
So, if c14n received a version string of "anything", it could render the following text for the root node of the node-set (if it is in the output node-set): Finally, as you can see, there are lots of options for solving this problem, and using XPath as a basis is not really causing a problem. 
In fact the only problem I do have is that the c14n issues list has not been provided to me, so the current version has not accounted for things like this because I didn't know about them. 
With respect to the issue above, what do people think is the best choice: A) ignore version B) use a version of 1.0 C) recover version from input document (kind of hard) D) parameterize version, with default of 1.0 Obviously I like the last one best, and thanks David for bringing this up again. 
John Boyer Software Development Manager PureEdge Solutions Inc. (formerly UWI.Com) Creating Binding E-Commerce jboyer@PureEdge.com 
3rd; John Boyer The new draft specify that there is no XML declaration like the last c14n draft of the Core WG (01/19). 
Naturally, since the new draft uses the XPath model, which has no place for the XML version. 
Should a canonical XML document considered as an XML document and have an XML declaration? 
Maybe, M Cowan could explain the position of the XML Core WG when they decided this? 
We basically felt it was a good idea with little cost. 
No explicit rationale for including the XML version number in Canonical XML was ever given, except in the public announcement: By encoding the XML version number in Canonical XML, we ensure that no confusion can result between documents that differ only in XML version number, and therefore potentially in significance. 
We wanted to make sure that two documents in different versions of XML could not be canonicalized to the same byte-for-byte representation, as their original forms might have had different interpretations. 
John Cowan cowan@ccil.org "You need a change: try Canada" "You need a change: try China" --fortune cookies opened by a couple that I know problem, to John, you're right in that some of these things were discussed before but not all the context has a been public since it were part of the deliberations of the Syntax WG. (Consequently, my impulse is just to go with any assumption/decisions made in the original draft unless we have a good reason to over turn it.) 
However, in rooting through the archives, this specific issue was discussed exactly a year ago and actually brought to XML Signature list. 
[1] You can find an official poll of this WG at [2] (and a resulting thread). 
Since we can't predict the future, if there's a new XML, people could always right a new C14n. 
Consequently, I'd still agree with Tim Bray's comment one year ago. 
[2] [1] http://lists.w3.org/Archives/Public/w3c-ietf-xmldsig/1999AprJun/0067.html [2] http://lists.w3.org/Archives/Public/w3c-ietf-xmldsig/1999AprJun/0055.html 
Note: if we leave the XML Decl out, and specify that this C14n spec applies *only* to XML 1.0 documents, we can postpone the decision about whether XML1 and XML2 docs can ever be canonically equivalent to the time we write the XML2 c14n spec. 
Sounds good to me. 
-Tim Joseph Reagle Jr. W3C Policy Analyst mailto:reagle@w3.org 
IETF/W3C XML-Signature Co-Chair http://www.w3.org/People/Reagle/ 
I think this is exactly right. 
I don't think it's appropriate to plan a processing model for non-1.0 XML; we don't have any idea what parsers for it will look like, or what styles of APIs they might expose. 
Define Canonical XML for XML 1.0 only, and generate a fixed XML declaration. 
When XML is updated, time enough to update Canonical XML too. 
Check. 
John Cowan cowan@ccil.org "You need a change: try Canada" "You need a change: try China" --fortune cookies opened by a couple that I know 
