(TOP (S (NP (NN NodeIterator) (NNS ni)) (VP (SYM =) (NP (NNS some_node.getChildNodes)) (-LRB- -LRB-) (-RRB- -RRB-)) (: ;)) )
(TOP (S (NP (JJ Node) (NN node)) (VP (SYM =) (NP (NN ni.toNext)) (-LRB- -LRB-) (-RRB- -RRB-)) (: ;)) )
(TOP (SQ (PP (IN In) (NP (DT this) (NN code))) (, ,) (AUX is) (NP (DT a) (JJ variable) (`` `) (NN node) ('' ')) (NP (DT the) (JJ first) (NN child)) (. ?)) )
(TOP (FRAG (CC Or) (NP (JJ second) (NN child)) (. ?)) )
(TOP (S (NP (NNP TAMURA) (NNP Kent)) (VP (SYM @) (NP (NP (organization (location (NNP Tokyo)) (NNP Research) (NNP Laboratory))) (, ,) (NP (organization (NNP IBM) (location (NNP Japan))))))) )
(TOP (S (NP (PRP I)) (VP (VBP think) (SBAR (S (NP (PRP it)) (VP (AUX is) (NP (DT the) (JJ first) (NN child)))))) (. .)) )
(TOP (S (NP (DT This)) (VP (VBZ raises) (NP (NP (DT the) (NN question)) (PP (IN of) (SBAR (WHNP (WDT what) (NN getCurrent)) (S (-LRB- -LRB-) (-RRB- -RRB-) (VP (MD should) (VP (VB return)))))) (, ,) (PP (IN of) (NP (NN course) (CD ..))))) (. .)) )
(TOP (NP (NP (NNP Hi) (NNP Tamura)) (, ,)) )
(TOP (S (NP (PRP I)) (VP (MD would) (VP (VB say) (SBAR (IN that) (S (NP (DT this)) (VP (AUX is) (ADJP (JJ unknown))))))) (. .)) )
(TOP (S (SBAR (IN Since) (S (NP (DT the) (NNP NodeIterator)) (VP (AUX is) (ADJP (`` ``) (JJ live) ('' ''))))) (, ,) (NP (PRP it)) (VP (VBZ makes) (NP (NN sense)) (SBAR (IN for) (S (NP (DT the) (JJ same) (NN iterator)) (VP (TO to) (VP (AUX be) (VP (VBN used) (NP (NP (DT every) (NN time)) (SBAR (S (NP (NNS getChildNodes)) (VP (AUX is) (VP (VBN called)))))))))))) (. .)) )
(TOP (S (NP (PRP It)) (VP (AUX is) (ADJP (RB definately) (RB not) (JJ specified)) (SBAR (WHNP (WP what)) (S (VP (MD should) (VP (VB happen)))))) (. .)) )
(TOP (FRAG (ADVP (RB Thus)) (, ,) (NP (DT the))) )
(TOP (S (NP (NNP NodeIterator)) (VP (MD could) (VP (AUX be) (PP (ADVP (RB anywhere)) (IN along) (NP (NP (DT the) (NN list)) (PP (IN of) (NP (NNP Nodes))))))) (. .)) )
(TOP (S (NP (DT The) (JJ only) (NN way)) (VP (TO to) (VP (AUX be) (ADJP (JJ sure) (SBAR (IN that) (S (NP (PRP you)) (VP (AUX are) (SBAR (WHADVP (WRB where)) (S (NP (PRP you)) (VP (VBP think) (SBAR (S (NP (PRP you)) (VP (AUX are) (VP (AUX is) (S (VP (TO to) (VP (VB call) (NP (NP (CD one)) (PP (IN of) (NP (DT the) (JJ other) (`` ``) (S (VP (TO to) (VP ('' '') (NP (NNS methods))))) (: -) ('' ') (NP (NN toFirst) (POS ')) (, ,) ('' ') (NP (NN toLast) (POS ')) (, ,) ('' ') (NP (NN toNth) (POS '))))))))) (, ,) (CC or) (VP (POS ') (NP (NN toNode) (POS '))))))))))))))) (. .)) )
(TOP (S (SBAR (IN If) (S (NP (DT the) (NN list)) (VP (AUX is) (ADVP (RB already)) (ADVP (RB there))))) (, ,) (NP (PRP it)) (VP (MD should) (RB n't) (VP (AUX be) (NP (DT an) (JJ expensive) (NN call)))) (. .)) )
(TOP (S (SBAR (IN If) (S (NP (PRP it)) (VP (AUX is) (RB n't)))) (, ,) (NP (PRP you)) (VP (AUX are) (ADVP (RB now)) (PP (IN in) (NP (DT the) (JJ correct) (NN place)))) (. .)) )
(TOP (S (NP (PRP It)) (VP (AUX 's) (NP (NP (DT the) (JJ only) (NN way)) (SBAR (S (VP (TO to) (VP (VB guarantee))))))) (. .)) )
(TOP (NP (person (NNP David))) )
(TOP (S (NP (PRP I)) (VP (VB plead) (PP (IN for) (NP (NP (DT an) (ADJP (RB explicitly) (`` ``) (JJ undefined) ('' '')) (NN position)) (SBAR (WHADVP (WRB where)) (S (NP (JJ getCurrent) (-LRB- -LRB-) (-RRB- -RRB-) (NNS returns)) (VP (VBP null))))))) (. .)) )
(TOP (S (NP (DT The) (NN iterator)) (VP (MD could) (VP (VB move) (PP (TO to) (NP (DT this) (JJ undefined) (NN position))) (SBAR (WHADVP (WRB whenever)) (S (NP (PRP it)) (VP (VBZ discovers) (SBAR (IN that) (S (NP (PRP$ its) (JJ current) (NN node)) (VP (AUX has) (VP (AUX been) (VP (VBN removed) (PP (IN from) (NP (DT the) (NN sequence))))))))))))) (. .)) )
(TOP (S (S (NP (NP (DT The) (JJ only) (NNS ways)) (SBAR (S (VP (TO to) (VP (VB leave) (NP (DT this) (NN position))))))) (VP (AUX are) (NP (NP (DT the) (NNS ones)) (VP (VBN suggested) (PP (IN by) (NP (person (NNP David)))) (PP (IN below)))))) (, ,) (NP (NNS toNext) (CC and) (NNS toPrevious)) (ADVP (RB just)) (VP (VBP leave) (NP (DT the) (NN iterator)) (PP (IN in) (NP (DT the) (JJ undefined) (NN position)))) (. .)) )
(TOP (S (NP (DT This) (NN solution)) (VP (MD should) (VP (VP (AUX be) (ADJP (RB fairly) (JJ easy) (SBAR (S (VP (TO to) (VP (VB implement))))))) (CC and) (VP (AUX has) (NP (DT a) (VBN defined) (NN behaviour)) (PP (IN under) (NP (DT all) (NNS circumstances)))))) (. .)) )
(TOP (S (NP (PRP I)) (ADVP (RB just)) (VP (VBD wondered) (SBAR (IN if) (S (NP (NN toNth)) (VP (VBZ gives) (NP (DT a) (JJ relative) (CC or) (DT an) (JJ absolute) (NN position)))))) (. ?)) )
(TOP (S (S (NP (DT The) (NN definition)) (VP (VBZ says) (`` ``) (ADJP (JJ relative) (PP (TO to) (NP (DT the) (JJ current) (NN position)))) ('' ''))) (, ,) (CC but) (S (NP (DT the) (NN exception)) (VP (AUX is) (VP (VBN thrown) (`` ``) (SBAR (IN if) (S (NP (NP (DT the) (NN value)) (VP (VBN specified))) (VP (AUX is) (ADJP (ADJP (ADJP (JJR greater)) (PP (IN than) (NP (NP (DT the) (NN number)) (SBAR (WHNP (WDT that)) (S (VP (MD would) (VP (AUX be) (VP (VBN returned) (PP (IN from) (NP (NN getLength))))))))))) (-LRB- -LRB-) (-RRB- -RRB-) ('' '')) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VBZ seems) (S (VP (TO to) (VP (VB imply) (NP (NP (DT an) (JJ absolute) (NN position)) (PRN (-LRB- -LRB-) (SBAR (WHNP (WDT which)) (S (VP (AUX is) (ADVP (RB also)) (NP (NP (PRP$ my) (NN interpretation)) (PP (IN of) (NP (DT the) (NN name) (`` ``) (NN toNth) ('' ''))))))) (-RRB- -RRB-))))))))))))))) (. .)) )
(TOP (NP (NP (DT Any) (NNS suggestions)) (PP (IN on) (NP (DT this))) (. ?)) )
(TOP (S (ADVP (RB Here)) (NP (PRP I)) (VP (VBP disagree)) (. .)) )
(TOP (S (NP (DT The) (JJ iterator) (NN pattern)) (VP (AUX was) (VP (ADVP (RB specifically)) (VBN designed) (SBAR (IN so) (S (NP (EX there)) (VP (MD can) (VP (AUX be) (NP (NP (JJ many) (NNS iterators)) (PP (IN on) (NP (NP (DT the) (JJ same) (NN sequence)) (PP (IN at) (NP (DT the) (JJ same) (NN time))))) (PRN (-LRB- -LRB-) (VP (VBN e.g.) (SBAR (IN if) (S (NP (PRP you)) (VP (AUX need) (NP (NP (DT all) (NNS combinations)) (PP (IN of) (NP (NNS subnodes)))))))) (-RRB- -RRB-))))))))) (. .)) )
(TOP (S (S (PP (IN In) (NP (DT a) (JJ multithreaded) (NN setting))) (, ,) (NP (DT this)) (VP (AUX is) (ADJP (ADVP (RB even) (RBR more)) (JJ true)))) (: :) (S (NP (JJ Independent) (NNS programs)) (VP (VP (MD could) (VP (VB operate) (PP (IN on) (NP (DT the) (JJ same) (NN node))))) (, ,) (CC and) (VP (MD should) (DT each) (VP (VB get) (NP (PRP$ their) (JJ own) (NN iterator)))))) (. .)) )
(TOP (S (SBAR (IN Since) (S (NP (EX there)) (VP (AUX is) (NP (NP (DT no) (`` ``) (JJ close) ('' '') (NN method)) (PP (IN for) (NP (NNS iterators))))))) (, ,) (NP (DT the) (NN implementation)) (VP (MD can) (ADVP (RB never)) (VP (AUX be) (ADJP (JJ sure) (SBAR (IN that) (S (NP (NP (CD one) (NN part)) (PP (IN of) (NP (DT the) (NN program)))) (VP (AUX is) (VP (AUX done) (PP (IN with) (NP (DT the) (NN iterator)))))))) (, ,) (SBAR (IN so) (S (NP (PRP it)) (VP (MD can) (RB n't) (VP (VB reuse) (NP (DT the) (NN iterator)) (PP (IN for) (NP (DT another) (NN part))))))))) (. .)) )
(TOP (FRAG (NP (NNPS Greetings)) (, ,) (NP (NNP Axel) (NNP +) (person (NNP Axel) (NNP Rasmus))) ('' '') (: ...) ('' '') (NP (NNP Wienberg) (CD +))) )
(TOP (S (INTJ (UH Ok)) (, ,) (NP (PRP I)) (VP (AUX have) (VP (VP (VBN understood)) (CC and) (VP (VBP agree) (NP (PRP it))))) (. .)) )
(TOP (S (NP (NNS Programmers)) (VP (MD must) (RB not) (VP (VB call) (NP (NP (NN toNext)) (PRN (-LRB- -LRB-) (FRAG (-RRB- -RRB-) (ADJP (ADJP (JJ /toPrevious)) (-LRB- -LRB-))) (-RRB- -RRB-) (ADJP (ADJP (JJ /getCurrent)) (-LRB- -LRB-)) (-RRB- -RRB-))) (PP (IN before) (S (VP (VBG calling) (NP (NP (NN toFirst)) (PRN (-LRB- -LRB-) (NP (-RRB- -RRB-) (NN /toLast) (PRN (-LRB- -LRB-) (FRAG (-RRB- -RRB-) (ADJP (ADJP (JJ /toNth)) (-LRB- -LRB-))) (-RRB- -RRB-)) (NN /toNode)) (-LRB- -LRB-) (-RRB- -RRB-)))))))) (. .)) )
(TOP (S (NP (NNP TAMURA) (NNP Kent)) (VP (SYM @) (NP (NP (organization (location (NNP Tokyo)) (NNP Research) (NNP Laboratory))) (, ,) (NP (organization (NNP IBM) (location (NNP Japan))))))) )
