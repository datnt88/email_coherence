The cast expression of 3.12.3 and the constructor function of 3.12.5 
seem to be essentially duplicating the same functionality. 
It isn't immediately obvious to me why such duplication should be necessary or appropriate, particularly since the cast expression seems sometimes/always simply to add the words "cast as" before what would otherwise be a constructor function. 
Is there a compelling reason for the continuing existence of this seeming duplication? 
Or am I missing something obvious? 
Andrew Watt Hi Andrew, We have to have the full "cast as" form because otherwise it wouldn't be possible for someone to create a value of a type in no namespace whose name clashed with one of the built in functions or node tests, such as "data" or "node". 
The short forms, on the other hand, are a lot more convenient for the common cases. 
Cheers, Jeni Jeni Tennison The "cast as" syntax is now almost entirely redundant - the one case where it is still needed is where the name of the type clashes with the name of a function. 
I think we're still trying to solve that problem, though I'm not sure it's very high on anyone's agenda just now. 
Michael Kay Another reason for the cast syntax is if you want to be allowed to cast to an optional type (basically accept the ()). 
The constructor functions do not return (). 
Best regards Michael where of not 
