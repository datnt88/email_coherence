From: Paul Prescod papresco@calum.csclub.uwaterloo.ca 
If we make PIs hygenic, we needn't encourage people to avoid anything. 
They can stick PIs in for every specific target, without stuffing up their document's portability, as they see fit. 
But the "sticking in PIs for every specific target" is exactly what they are using SGML to get away from. 
That's why PIs should be discouraged. 
Is it? 
I thought we use SGML to make sure that valuable information is rigorously marked-up with useful, generic labels. 
After this primary goal is met, what a user wants to do with comments or PIs is up to them. 
Whether they use an external high-level formatting language like DSSSL, or internal style sheet hinting, or inline PIs is something that depends on their expertise, their technology and the tradeoffs as they see it. 
I think it is better to neutralise PIs by making them hygenic; you fear doing so may encourage them. 
Especially as the world crosses over from HTML, it may prevent tag abuse. 
For example, that guy who started using the 1 pixel IMG elements for alignment is abusing element tags; but it is a legitimate need he has: in the absense of any high-level solution, if he had a minimal set of formatting PIs he could have kept element-structure integrity. 
In any case, I think PIs should be used for more than just simple formatting. 
For example, centerpoint PIs embedded in text to allow smarter page-up/down scrolling. 
Or timeout and caching policy for external entities. 
Or to trigger external entity prefetching when in the locality of some link. 
These kind of things would allow much smoother operation to the user, rather than just the extremes of pull and push. 
Rick Jelliffe Maybe depite appearances :-) I *do* check the back-issues of this mailing list on a regular basis. 
About PIs I've found only arguments against, except for Rick Jelliffe's PIFLE, which is very interesting. 
I've found three types of reactions: 1. "I don't use PIs myself and I recommend everybody not to use them" (most people) 2. "PIs have no place in XML" (e.g., Charles Goldfarb: "In fact, XML should forbid PIs anywhere in the document instance regardless of RE handling. 
The style sheet should handle all processing." http://lists.w3.org/Archives/Public/w3c-sgml-wg/msg01643.html ) 3. Rick Jelliffe's PIFLE: "... 
So a PI looks more like an element start-tag" I think Rick has identified the problem correctly, and has given half the solution. 
Just one step further and PIs *are* elements. 
If you have why not change it to Is there any difference in what a parser hands to the application? 
In one case the application gets this: (type:PI, target:my-info, foo:bar, q:8) in the other it gets this (type:starttag, gi:my-info foo:bar, q:8) In my programs, the latter is actually easier to deal with, since it means there is one less case in every switch statement, and one less subclass of the Node superclass. 
So how is it possible that PIs are still in the draft? 
I think that all the people that said "I don't use them..." thought that there actually were other people that did. 
And nobody asked for a show of hands. 
Bert Bert Bos ( W 3 C ) http://www.w3.org/ bert@w3.org 
2004 Rt des Lucioles / BP 93 Better a devil you know than a devil you don't... Yes. 
In the first case it hands "(type: PI, target:my-info, foo:bar, q:8). 
In the second it hands (***VALIDITY ERROR*** THIS DOCUMENT DOES NOT CONFORM TO ITS DTD***) and pops up an error message and perhaps halts the transfer of medical information that was underway. 
Big difference. 
We all use them: every single XML user does. 
XML could not exist as it does today if it were not for PIs in SGML. 
We would have had to declare "implicit elements" and tromp on the user's namespace and on SGML compatibility for the XML declaration. 
User PI's similarly belong *in* XML because ten years from now some sub-group of some organization will want to make an application profile *of* XML. 
Charles Goldfarb lives totally in the SGML universe. 
He would never expect anyone to want to make an application profile of XML when they could just go back to the "source" (the SGML spec.). 
I tend to prefer to allow people to derive from XML if they want, or back from SGML if they choose that instead. 
Paul Prescod I simply can't agree on this. 
Such information does not belong in the source document. 
You can easily have ancillary document which describe how to use a document or additional semantics. 
In many of the systems we are developing in our company, we are creating systems that use *many* document to describe how to accomplish some task or present some piece of information. 
This allows us to create documents that are reusable. 
I can see how this use of processing instructions would be useful but, in my opinion, it breaks encapsulation. 
In the object-oriented programming world, this usually means you are design one class for something that should be many. 
Applying this rule to the above, you could be trying to describe more than one set of information in one document. 
Now, CONCUR was suppose to be able to allow you to do this. 
Unfortunately, CONCUR can make life quite difficult--for everyone: parsers, authors, etc. 
I like the design pattern of "many documents make up the whole" much better than compressing information into one. 
It seems to work quite well for us. 
...again, this is my opinion based on my experience. 
I'd be all for formalizing the structure of a processing instruction if we have to have them. 
I'm just not for using them ever. 
Hence, I don't want to be forced to use them unless it is something like the RMD or VERSION declarations. 
We should *not* force people to encode document semantics via processing instructions in XML. 
R. Alexander Milowski http://www.copsol.com/ 
alex@copsol.com 
Copernican Solutions Incorporated (612) 379 - 3608 Only if the document explicitly refers to a DTD, and then only if the element indeed doesn't match that DTD. 
Why would that be different for a PI? 
There would be rules in the DTD that specify what can be in the PI, just as there are for the element. 
What's the use of a PI if it can contain anything you like? 
That's what comments are for (and literals, and #pcdata...) (Note: by "DTD" I mean the whole set of constraints on the format, including, but much more than what can be specified in SGML-DTD syntax.) We don't need an extension mechanism in XML. 
XML is one big extension mechanism already. 
You can create new tags to your heart's content. 
Thinking aloud here: That's an interesting point. 
I expect there will indeed be many applications that have additional constraints on the format of their XML documents, and it is likely that those constraints cannot be expressed in a DTD, using the current syntax. 
But as long as XML doesn't have the notion of a "profile", communicating a profile will have to be done out-of-band. 
A PI doesn't mean anything to anybody, unless (1) the XML spec says what it means, or (2) people exchanging XML agree on what it means (i.e., out-of-band). 
Note that the ?xml...? at the top *doesn't* establish the XML profile for SGML tools (assuming they can read XML). 
SGML tools simply don't know what a PI means. 
SGML may be modified by TC4 so that an occurrence of ?SGML some-fpi? 
at the top does indicate a profile, but currently it doesn't. 
If you want to support profiles of XML, you'll have to add it to the spec *now* and you have to state that ?something... some-url? 
is defined by XML to mean the profile with global identifier `some-url'. 
The `some-url' can point to the user-manual of the profile, or just to nothing at all. 
I don't think it will be possible to invent a formal syntax for profiles. 
On the other hand, given that profiles will not be machine readable anyway, why not stick with the out-of-band solution: it's one less thing to worry about for XML implementers. 
Bert Bert Bos ( W 3 C ) http://www.w3.org/ bert@w3.org 
2004 Rt des Lucioles / BP 93 That's exactly the point. 
People can introduce PIs that work *across all DTDs*. 
You'll notice that every XML DTD does not require a ?XML element. 
A PI is an instruction to a *computer program*. 
An element is a *description of content*. 
A comment is *text to be read by other human beings about the encoding*. 
These should not be confused by computers or people and so should have distinct syntaxes. 
I know that there are some who think that it is acceptable to pretend that instructions to computers are actually "comments" to other people. 
Personally I think it is a gross hack. 
All languages should have "escape mechanisms" like PIs so that these kinds of hacks are not necessary. 
Not if you have a DTD that you must conform to. 
So??? XML as a profile of SGML is mostly described out-of-band too. 
You seem to come to the conclusion that the current mechanism is fine after your thinking out loud. 
Do you then agree that this is a reasonable use of processing instructions? 
Paul Prescod These are rarely practical due to difficulties in synchronization. 
From another point of view, encapsulation was broken as soon as the first piece of markup was inserted into the document. 
As soon as you put the first piece of markup in a document, you impose a viewpoint on it thus limiting the reusability of that chunk of text. 
The analogy with OO programming holds true as this is one of the reasons that objects haven't proven to be as reusable as was originally hoped. 
In principle, I agree with you, but I take it a step farther: I don't think there should be any markup in the text. 
Structures should only be associated with text in the same way that we propose presentation is associated. 
It just isn't practical at the moment, because of the difficulty in keeping everything synchronized. 
bob I have also come to that conclusion, Robert. 
Markup is convenient but invasive. 
It would be better if multiple document structures could be projected onto the source without disturbing it. 
That will require better tools, however. 
We are making progress towards that goal, however. 
Paul Prescod 
