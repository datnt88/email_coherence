Plus a brief noodle about class-contextualised constraints. 
Problem: You can't use RDFS to describe "a Seq containing only objects of rdf:type random:X" The action point text says "Write up a fix/workaround for folks using the currently defined semantics for domain and range constraints." 
Alas, I can't do that; what I _said_ at the meeting was that the other "missing" bits of RDFS would give us this for free; I'll elabourate this below. 
It was my understanding from the F2F that RDFS work will probably leave what Danbri calls "class-contextualised constraints"* as a target for the web-ont WG. 
Is that accurate? 
Anyway, as I pointed out at the F2F, while rdf:_1 and kindred all have a common class, they're lacking a common superproperty**. 
However, if we specify a common superproperty such that rdf:_1 rdfs:subPropertyOf rdfx:member . 
etc. then class-contextualised constraints (and the fixed interpretations of range etc.) will give us this functionality for free, since we can then say: random:seq2 rdfs:subClassOf rdf:Seq . 
when rdfx:member rdfs:domain random:Seq2 . 
then rdfx:member rdfs:range random:X . 
In other words, I'm proposing that instead of a specific fix for this, we 1. 
Introduce a rdfx:member superproperty of all the "rdf:_n"s 2. Wait for general class-contextualised constraints, which in turn might mean waiting for a more general implication mechanism. 
This, together with the result of step 1 will permit stronger typing on collections in a finite number of assertions. 
The alternative is to subproperty each and every "rdf:_n" which might take a while :-) jan * which seem to me to be a slightly higher-level construct - ie, what's being referred to as "rules" rather than basic schema - they're essentially a mechanism for expressing a logical implication, namely that if (the thing on the blunt end of this arc is of type Y) then (the thing on the sharp end is of type X) Consequently, I'd expect that extending RDF to permit expression of implication and the Class-contextualised constraints ought to be closely related (and one can use the mechanism that the other does). 
Thus the web-ont people ought to either invent or borrow general implication to express this. ** The other thing that needs straightening out is this: The simple diagram above may also be read "http://www.w3.org/Home/Lassila has creator Ora Lassila", or in general " subject HAS predicate object ". so rdfs:subPropertyOf (as well as being overInterCapped) is actually a misspelling - should be rdfs:superproperty. 
jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ 
Not as randy or clumsom as a blaster. 
Hmmm. 
I transcribed the action based on the notes at: and I note that the scribe at the time was using the nick 'jan' :) Please can you propose some alternative wording for the action and I'll update the minutes. 
Brian Whoops, wrong thing, sorry. 
I'll try again. 
(Had a different AP in mind, or at least one that I recalled differently - namely, to demonstrate how to do strong typing and subclassing of collections; the conversation encompassed multiple things at the same time.) 
To answer the original AP... 
This action point is referring to a workaround for people using disjunctive range and/or domain. 
I've mentioned this before, but here goes for posterity: I've seen some people say that they were using a disjunctive range/domain interpretation in their applications. 
Opponents of this pointed out that it doesn't give you much (ie, you can't do any type inference) unless you accept a closed-world notion of your schema. 
The users responded that that's exactly what they _were_ doing, and that they were prepared to do so because of the wins that it gave them in their application domain. 
Given the same assumptions, there is a construction available that uses "standard" conjunctive semantics for domain (resp, range). 
To say "the domain of foo:bar can be foo:Baz or foo:Shmoo": foo:Baz rdfs:subClassOf _:c1 . 
foo:Shmoo rdfs:subClassOf _:c1 . 
foo:bar rdfs:domain _:c1 . 
(you can give a URI to _:c1 if it makes you feel better, it's not vital.) I've heard two objections to this: 1. 
It doesn't let you infer anything. 
This is the same complaint as was originally levelled at the disjunctive interpretation, and the response is the same: "I'm prepared to make some assumptions in this application domain"*. 
2. Some stylistic objections from OO programmers who're unused to building a class hierarchy from the bottom up. 
This is a trick that'll appeal more to mathmos than Java hackers; otherwise it's a non-issue I think. 
Hopefully that completes the requirements of the AP 2001-08-02#10. 
jan * I don't use this; it's a workaround for people who do. 
jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ Usenet: The separation of content AND presentation - simultaneously. 
The message that started this thread actually referred to the AP at (which I don't think made the minutes...?) jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ Lambda calculus? 
I hardly know 'er! Hmmm. 
Yes, I've got a problem reconciling the notes from the on screen document. 
and the logs The on screen document makes no mention of the action to describe how to add to RDFS and says that we expect higher layer languages to handle this problem, in which case I'm not sure we would have asked Jan to figure out how to add it (I presume to RDFS). 
This also links up with Aaron's suggestion that we should show how this can be done with DAML+OIL. 
Can anyone help clarify? 
As its in the log, I've added to the minutes, an action on Jan to provide an explanation of how sub-classing containers could be added to RDF Schema. 
We can consider at the telecon whether this is in fact the right action. 
Brian What happened (as I recall it*): The conversation had previously mentioned punting class-contextualised constraints to web-ont. 
We moved onto strong typing for container subclasses. 
Danbri said there hadn't been much call for this; at least, nobody seemed to be making huge noises about missing it (although everyone seemed to think it would be nice). 
At which point I piped up to say that you got it for free with the c-cont.constr.s if you included one small addition (a superproperty to the "rdf:_n"s). 
Brian asked me to summarise to the list the details of this, which is what I sent in that message that spawned this thread (citing the wrong action point by mistake). 
We then closed the issue since we're not looking at adding this to RDFS and I was expecting a pointer to my message as a "where this will come from in future work" addendum to the issue. 
jan * those who know me know how reliable this isn't :-) jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ ioctl(2): probably the coolest Unix system call in the world 
