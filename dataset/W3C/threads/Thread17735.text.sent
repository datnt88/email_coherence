The discussion on PAGL was about logical events (those which specified a function) as opposed to device-dependent events. 
The division below was the list as it stands. 
It occurred to me that we could easily enough add onActivate - corresponding in a mouse interface to onClick, and to pressing return to activate the item with focus in a keyboard interface. 
I'm not sure about the rest, but I suspect that onMouseDown, onMouseUp, onKeyDown, onKeyUp and onMouseMove are related to selecting a part of the document. 
In determining how to do that we are likely to sort out the relationship between the current device-dependent attributes and new 'logical' event triggers that can be triggered from various interfaces (eg voice) Which seems to me to leave onMouseOut and onDblClick out in the cold. 
One of the consequences of this is that we should recommend against using those events which we are likely to lose (except for providing 'eye-candy' - stuff that has no functional importance) and make suggestions about how the rest might be used in the page authoring guidelines. 
(have i said this before on this group? 
if so, sorry) Charles McCathieNevile From: http://lists.w3.org/Archives/Public/w3c-wai-gl/1998OctDec/0029.html 
Chris is right, so for the sake of completeness I looked up all the event attributes again. 
Those which I think are device-dependent, and we should recommend not be used are: onMousedown, onMouseup, onMouseover, onMousemove, onMouseout, onKeydown, onKeyup, onKeypress, onClick, onDblclick Those which seem to be logical events are: onFocus, onBlur, onSelect, onChange, onSubmit, onReset, onLoad, onUnload. 
It should also be possible to define something like 'onActivate' - which would be equivalent to onClick for a link, but I guess this belongs to other groups. 
Charles McCathieNevile I came up with an illustration: in IE and Navigator, a single click corresponds to onActivate (my hypothetical - a wish-list item) and a double click has no normal behaviour. 
in Amaya, where browser and editor are together, a single click moves the insertion point (and the focus?) and a double click activates. 
In which case a double click should fire an onActivate event, and a single click an onFocus event. 
Charles McCN This illustrates that what is stable across different UIs is the relative ordering of the event triggers, not exactly what they are triggered by. 
Something that is kicked off by waving the mouse by something is the lightest touch. 
Something that is kicked off by a single click is the next heaviest touch -- more like you mean it, can be used for more serious consequences. 
Something that is kicked off by a double-click is the heaviest touch of all in this progression. 
It is used for things that you really think about before doing. 
double-click -to- click -is-like- confirm-before-do -to- just-do-it Al to follow up on what Charles McCathieNevile said: I think that we should have guidelines that say develop accessible user interfaces. 
Mouse based input is not inherently bad. 
It is only "bad" when the author (programmer) does not also have keyboard equivalents that are visible to the user. 
Therefore the guidelines I think should talk aboutcreating an accessible user interface, not a mouseless one. 
Jon Jon Gunderson, Ph.D., ATP Coordinator of Assistive Communication and Information Technology Division of Rehabilitation - Education Services University of Illinois at Urbana/Champaign 1207 S. Oak Street Champaign, IL 61820 Voice: 217-244-5870 E-mail: jongund@uiuc.edu 
WWW:http://www.staff.uiuc.edu/~jongund 
Sorry for the cross-post, but there is an important issue being overlooked here that pertains to both UA and PAGL: onMouseOver can enhance accessibility and there is no effective alternative at this time, yet people are suggesting it not be used. 
For low-vision users, it is very helpful to get extra visual feedback -- as can be provided by highlighting a link when the mouse cursor passes over it. 
Using the events in this way can improve accessibility for people with low vision and does not limit accessibility for people who don't use a mouse. 
The problem arises when onMouseOver is used for more complicated processes -- for instance, using mouseover on images to pop up descriptive text somewhere else on the screen, resulting in descriptive text that disappears whenever the user tries to move their focus to it. 
Someone suggested that if the PAGL says not to use onMouseOver we could figure that intelligent web developers will ignore the guideline in valid curcomstances. 
Perhaps it would be better to assume that many readers of the guidelines will be naive on these issues, and that the guidelines should specify how the events can be used in a positive way and when they can be detrimental? 
For the UA group, maybe this is an opportunity to think about how to make 'onMouseOver' more generic. 
Thinking back to our recent discussions of 'Point of Regard', would a set of 'onRegard' or 'onUserCursor' events be a plausible superset of 'onMouse' that could be applied to a broader range of interactive devices? 
-- Paul Adelson * The views expressed are those of the * author and do not necessarily reflect the * position of Citibank or its affiliates. 
It's more complex than that if we use a fully audio User Interface, because unless there are defined audio events correpsonding to each Keyboard event then it won't work. 
My concern, which mirrors that of Kathy and the Microsoft Developer is that some events, such as onKeyUp will not be able to be easily defined as logical events, nor easily defined for an audio input system. 
(Same goes for a signing-based input system. 
There is in fact such an interface, 'reading' a glove.) Charles McCathieNevile Agreed Occasionally (rare) I use keyboard mouse with my headwand, a good visual cue would help my sideways view. 
Also some mouse drivers know to keep going on a given direction after an initial move indicates a target: it seems like a good idea, if the OS could do it. 
Regards, Bryan - "Its been said the pebbles can't stop the avalanche, guess the pebbles didn't have access to the Web!" I don't actually want to stop rollover highlights, but I would like to make it clear that the current model may be inadequate for full accessibility. 
A better way to provide rollover highlights would be to work on the Style of the object being focussed, through the DOM (level X), which would make it work across technologies. 
In the interim, I am looking for something like a suggestion that the rollover should be based on an event trigger which we are sure can be implemented across platforms. 
(onFocus? 
onActivate? the list of such events, in my humble opinion, is yet to be properly figured out, but is important). 
CHarles McCathieNevile I like your point about mouseover events. 
Rather than saying a specific event is inaccessible or accessible, I think we need to focus on accessible design guidelines. 
Jon alternative at the figure Jon Gunderson, Ph.D., ATP Coordinator of Assistive Communication and Information Technology Division of Rehabilitation - Education Services University of Illinois at Urbana/Champaign 1207 S. Oak Street Champaign, IL 61820 Voice: 217-244-5870 E-mail: jongund@uiuc.edu 
WWW:http://www.staff.uiuc.edu/~jongund 
There does not seem to be a good model for developers to use for adding keyboard access to their interfaces using scripting languages. 
It maybe that elements with keyboard events need to become active elements, and in many cases they already are. 
For examples filtering the characters that go into an edit box control. 
We just need to extend the list of active elements to any element with a keyboard even. 
I think that if elements with keyboard events can receive the focus from the UA (again through keyboard commands), then it might solve some of these problems. 
There would also need to be author indication of what keys are available for that element or sometype of UA indication. 
JOn Jon Gunderson, Ph.D., ATP Coordinator of Assistive Communication and Information Technology Division of Rehabilitation - Education Services University of Illinois at Urbana/Champaign 1207 S. Oak Street Champaign, IL 61820 Voice: 217-244-5870 E-mail: jongund@uiuc.edu 
WWW:http://www.staff.uiuc.edu/~jongund 
