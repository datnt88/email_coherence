Oh. I agree that we don't want to preclude validation. 
Just that validation and namespaces are separate issues. 
As part of my review of namespace blather I came upon this anti-gem. 
Since validation is not possible in the presence of arbitrary included markup unless that markup is part of a DTD, the GI-hacking namespace proposals are all intimately related to the question of validation. 
Wishing will not make the problem go away, so we need to address it if we adopt any such proposal. 
I'm having trouble finding the technical arguments in this posting, but I wanted to say that, while it's always true that all issues are inter-related to varying degrees, I find it helpful to separate namespaces and validation for the most part. 
For me, the basic namespace issue comes down merely to figuring out some way of (1) "uniquifying" names in an instance so I can tell that the a element in one part of my document (the HTML namespace) is different from the a element in another part (the AAP equation markup namespace), and at the same time (2) grouping names so that, for example, I know which style sheet to use to find information about this name. 
None of this requires validation. 
So, while I agree that we need to address how validation could work with multiple namespaces--just like we need to address how validation works with any issue we may raise with respect to XML--I see the basics of the namespace issue as potentially independent of validation. 
paul Oh. 
I agree that we don't want to preclude validation. 
Just that validation and namespaces are separate issues. 
As part of my review of namespace blather I came upon this anti-gem. 
Since validation is not possible in the presence of arbitrary included markup unless that markup is part of a DTD, the GI-hacking namespace proposals are all intimately related to the question of validation. 
Wishing will not make the problem go away, so we need to address it if we adopt any such proposal. 
I agree that I'm getting testy, since I've posted 3 previous postings with the argument clearly spelled out, I may have said to little. 
Apologies for any rudeness, but the point still stands. 
I will repeat the argument again. 
If you allow "importation" of elements from another "namespace", you need a way to validate that this is legal according to the DTD. 
But the reason you want to do this is because the element is _not_ legal in the DTD. 
Therefore the validation of multi-namespace documents needs to be defined. 
So we have a technical argument that you can't have namespace proposals of the form advocated without defining some new kind of validation behavior, or without creating a blanket exception from DTD conformance requirements for validating parsers. 
If you want to do something other than such partial DTD importation, like just attach unique IDs to elements of some sort, then you don't need namespaces, just a convention about how to use attributes. 
Clear now? 
Attach an attribute. 
You can use Notation or ENTITY valued attributes to associate an FPI with it, if you want. 
(2) grouping names so that, Each stylesheet looks at the attribute corresponding to its architecture. 
I thought this was well-understood procedure by now. 
If you use Attribute values to control processing, you can decouple or tightly couple DTD and semantics at your pleasure. 
As long as you stay away from allowing things in one DTD that are not declared in that DTD. 
I don't see a strong emphasis on this foundational point, and you're the first person to respond to my posts on the issue, so I may be getting a bit testy. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ Whereas the validation of DTD instances against architectures is not only well defined already, there is free working code to do it with (nsgmls -A option). 
Given the potential downside of going with option #3 and getting it wrong -- however "vociferous" the demand (*not* need, as David points out) for it might be -- the maximum action to take for 1.0 should be to allow ":" in names, if need be, and "reserve it for future use" as for as the XML application profile goes. 
P.S. I, for one, am very grateful to David Durand (testy or not) for raising this issue. 
He has it exactly right. 
"Out of the tag soup into the namespace broth" sums the matter up for me. 
[David and Paul about validation of documents with namespace-qualified identifiers] I THINK there are the pieces of a full proposal on this issue on the table: 1) I've made a proposal for scoping arbitrary regions within a namespace. 
This allow the 'import' of a DTD or DTD fragment interpreting all identifiers as being in the namespace, e.g. !NS [ html: [ %htmldtd; ]] 2) I've made explicit something implicit in the Layman/Bray qualification proposal, which is, to abbreviate, that qualification inherits. 
So if I have after the above subsequent to the above, it's valid(atable) and the 'head' and 'body' are as per the html dtd, by qualification inheritance. 
I could of course just use qualified names explicitly in my own DTD, if I wanted to: with no id conflict between the two 'p1' IDs. 
The protected one could be ref'd from outside as 'localids:p1'. 
I have foolishly assumed that silence gives consent, and that the ERB were in due course going to ratify this story, but maybe I'm wrong, and in any case maybe it doesn't satisfy your requirements. 
If so, please advise. 
I certainly do NOT endorse any proposal which says that simply by qualifying a tag, the enclosing element's type's content model implicitly gets changed to allow that. 
If you want to use e.g. Dublin Core names and associate your use thereof with Dublin Core, e.g. (modified Layman syntax) /order then the content model for your 'order' element type better explicitly include 'dc:core'. 
ht I agree that this should be allowed. 
But given that, isn't your proposal (1) unnecessary. 
We can get valid XML documents that include namespaces without it. 
I agree something like it is nice, but I don't think we're ready to standardize it yet. 
On the other hand I think the basic concept that gis have a namespace part that inherits is relatively straightforward and uncontroversial. 
I'm not sure I agree with this. 
I can easily imagine wanting to combine element whose types come from different namespaces but have them share one ID namespace. 
I'm not at all sure it makes sense to bind the ID namespace to the element type namespace. 
Agreed. 
James It appears to me, that the discussion is actually somewhat abstract. 
The practical problem to be solved with namespaces is IMHO the following: 1. 
There is a need to reuse fragments of DTDs 2. There is a need to reuse fragments of instances - at least be able to simply cut &amp; paste such kind of fragments. 
As long as we have WF documents, item #1 is obviously not a problem. 
Item #2 is no problem as long as entire subtrees are shared. 
The namespace can be determined by the GI of one of the ancestors (which delimits the namespace). 
This can be done using most of the programming resp. 
style languages. 
The problem comes with valid documents! 
Item #1 requires to intermix the contentmodels without ambiguity (and without ANY :-). 
With the current spec, we get a sum over all content models (if we do not want to qualify the GIs of all tags). 
But what namespaces shoud switch content models and not mess them up esp. 
if we want to use a structured authoring tool. 
Reusing instance fragments should be possible with out renaming all elements, so a GI mangling approach isn?t helpful. 
After all that, we should look for a way to define context dependant content models. 
But I don?t see how this can be specified without changing DTD-Syntax. 
So its nothing for July 1st. 
Prefixing element names is a common practice in my daily work to distinguish varioius namespaces and to allow to share architectures. 
We have a minimal set of prefixes. 
So I do not see an urgent need for a namspace separation character (but i don?t oppose either). 
Regards/Mit freundlichen Gruessen P.O. Box 30 02 40 D-70442 Stuttgart Germany The problem is how to ensure uniqueness of ids when you are cutting and pasting things from different documents produced with different DTDs. 
We need something that is as easy to generate in this case as HTML anchor names (which are deliberately not unique) if we are to attract a wide range of authors to XML. Scoping ids in the same way that you scope element names within a qualified name in Henry's proposal might make it easier to avoid conflicts (though by no means certain!) Whilst you might then want to enforce uniqueness in the result as a system constraint it should not be enforced by dictate. 
AsBernhard Weichel pointed out: Martin Bryan, 29 Oldbury Orchard, Churchdown, Glos. 
GL3 2PU, UK For details about The SGML Centre contact http://www.sgml.u-net.com/ 
For details about the Open Information Interchange initiative contact Surely this is a similar problem to that addressed by Formal Public Identifiers: how to get globally unique names. 
The FPI solution is of course to prefix the name with organisation names and so on. 
If XML adopted a separator delimiter by convention (e.g. '::', where ':' is allowed as a NMCHAR) and gave some convention for use, like company::dtd::name (e.g. ms::cdf::amount ) you can cut and paste between XML documents with different namespaces today. 
Which, in turn, suggests that namespaces are, in part, really about identifier minimisation rather than type. 
XML is just starting. 
If terseness is not our goal, and people want to be able to make their documents cut-and-pastable, then why not add these conventions now, so that new DTDs have them? 
And if a vendor does not follow this convention, and just uses simple names, then that makes their documents less easy to cut-and-paste, which they might like. 
If cutting and pasting is important, then export your data in a unique-ized form. 
All what elements? 
In all of which documents? 
XML is just starting! 
SGML documents will have to be converted to fit the sole tag and so on. 
SGML DTDs will have to be converted for XML anyway. 
Now is exactly the time when we can make GIs (and other identifiers) more powerful. 
If we don't define some nice convention that works now, then we'll have to retrofit some new big fat namespace system with new declarations etc etc, all to achieve the unique naming we could have had from the start. 
XML 2.0 can have the algorithm for minimising names, XML 1.0 just needs to set the data convention for making sure that names are unique in XML 1.0 documents, and therefore compatible with XML 2.0 fullname minimisation. 
Rick Jelliffe Back on casting. 
etc, I point out that in C casting does 2 things: type coersion (e.g. make an int a pointer) which is regarded as poor, and type narrowing (casting to a typedef) which is regarded as good. 
There is no hint of type coersion in my use of 'cast'. 
I suggest that the ISO 8879:2001 SGML declaration should allow: CONCURNO-- e.g. para -- CONCURNAMESPACE -- e.g. martin::para -- CONCURYES-- e.g. (rick)p -- CONCURARCHITECTURE -- e.g. (martin::para)p -- where the last is a kind of architectural form. 
I am sure there is something nice hidden somewhere in CONCUR. 
In theory I agree, but only if we understand what we are doing. 
The attribute approach works now, and can be replaced by a better mechanism whenever we are _sure_ we have one. 
But if we add a _bad_ mechanism, we are stuck with it. 
That's the terrible downside of experimenting with a standard. 
I'm a techie who has tried his hand at teaching SGML and I've picked up some things. 
You can't teach marked sections because they use a parameter entity and people don't get at all what entities are about. 
So the conditional markup proposal Tim put out interested me greatly. 
You can teach anaything, but of course syntactically contorted things like marked sections require more contortion than elegant things like conditional markup. 
But we made a decision for compatibility. 
And we _have the expressive power_ as things already stand. 
You can't teach people to class elements with HyTime syntax. 
Just can't. 
But oddly, they can easily understand the class/namespace syntax. 
I'm not convinced of this, but I agree that the notion of "namespaces" might have promise on a number of fronts. 
It just needs more work than it can get right now, and there are functional, existing alternatives to defining new syntax. 
So I have every reason to like the ':' proposal but I find myself agreeing with the statement above. 
Is there really real interest to do something with this even before we have fundamental things done like styles? 
Also a good point. 
Sure would, but we burned that bridge long ago... But it's still easy to experiment with DTD defining tools and notations, and standardize on something more capable once we have some practical experience. 
I was a lot less unhappy about losing the DTD syntax battle once I realized how easy it would be to create a tool to implement _my_ list of ideas as to how DTD syntax could be reformed. 
-- David David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ I've felt for a very long time that SGML needed a "class" mechanism (to me, oddly called here namespaces, but no matter) and that 1. HyTime did not do that properly and 2. that it should not be associated with HyTime but rather be a syntatically smooth part of the element definition syntax. 
I'm a techie who has tried his hand at teaching SGML and I've picked up some things. 
You can't teach marked sections because they use a parameter entity and people don't get at all what entities are about. 
So the conditional markup proposal Tim put out interested me greatly. 
You can't teach people to class elements with HyTime syntax. 
Just can't. 
But oddly, they can easily understand the class/namespace syntax. 
So I have every reason to like the ':' proposal but I find myself agreeing with the statement above. 
Is there really real interest to do something with this even before we have fundamental things done like styles? 
However, although we have an XML tool coming out which does not read the DTD we do not object to having to read the DTD in a future version to pick up attribute definitions which, among other things, might give us namespace associations. 
But we feel strongly that it should also be a choice - if you don't read the DTD you may lose information but that is the application's and the user of that application's choice. 
We think that the market will rapidly set the level of interoperability needed and, very likely, we will quickly arrive at the point where most applications will process the DTD in some form or fashion. 
(Writing DTDs in XML _would_ help.) Michael Leventhal Michael Leventhal Internet : http://www.grif.fr 
G R I F , S. A. Email : Michael.Leventhal@grif.fr VP, Technology Telephone : 510-444-2962 Oakland, California 94606 France : (011) 33 1 30121430 (fr US) I'd agree whole-heartedly with that last sentence. 
Continuing where CONCUR started would be a good way to explore namespaces in both XML and SGML. 
R. Alexander Milowski http://www.copsol.com/ 
alex@copsol.com 
Copernican Solutions Incorporated (612) 379 - 3608 
