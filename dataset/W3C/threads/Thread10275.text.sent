Somehow, I accidentally dropped rdf core off the distribution list for this. 
Brian -----Forwarded Message----- From: Brian McBride bwm@hplb.hpl.hp.com Subject: Re: Summary of strings, markup, and language tagging in RDF (resend) Date: 03 Jul 2003 11:50:35 +0100 [I've dropped Misha and timbl from the dist list - feel free to forward this/reintroduce them if you feel it is appropriate] Martin, Thank you. 
I found this message very helpful. 
I realise you have made these points before, and whilst repeating yourself is burden on you, I found that collecting these points together helped clarify things in my mind at least, considerably. 
So, if I can try to summarize (at least my understanding) of the details you gave (I've included some detailed comments amongst your text below, but they are not greatly relevant, I think). 
- users familar with XML will be surprised that the lang tag does not affect an xml literal - users will be confused that plain literals are treated differently from XML literals - the common case is that the user wishes an enclosing lang tag to apply to an xml literal, so why burden the user with duplicating the information - not all XML languages have neutral elements such as span that can be added to hold extra type information - conversion from other XML languages to RDF/XML will require more complex code Now, here is an attempt to reconstruct a rationale for why RDFCore chose the option it did. 
I'm not writing this in any sense in a defensive posture. 
My view is that RDFCore simplified the handling of XML Literals post last call and sought feedback from i18n whether it had simplified too far. 
I just want to get the arguments laid out so we can all take an informed decision about that question. 
- RDFCore had last call feedback, particularly from members of WEBONT that the treatment of XML literals in the last call WD's was unsatisfactory, particularly in the formal treatment, leading to a desire for simplification and greater uniformity. 
This is what led to the post last call proposal. 
- RDFCore considered retaining the wrapper element, but decided not to because it is more complicated for *implementors* (I note i18n's arguments are more user centred) - It has been argued that there are cases where importation of the lang tag is not desired, so why burden users with having to turn it off Likely I need some help here to correct, clarify and complete. 
RDFCore, please chip in and I'll summarize again if necessary, afterwards. 
I note that i18n arguments centre around a user writing RDF/XML by hand. 
I wonder whether some of the differences of view arise because RDFCore expects RDF/XML to be largely written by machine. 
Martin has rightly pointed out that there are several possible solutions to the issue b), but I would like to be clear whether reintroducing the wrapper element would be satisfactory. 
Martin, in your opinion, would re-introducing the wrapper element and having it carry any in scope lang tag address issue b) to i18n's satisfaction? 
A few minor comments interspersed below. 
Brian How do you suggest we will ever be able to explain to users that one of the literals is the same in both cases, because xml:lang doesn't count for the XML Literal, but is different for the other case, because in that case, xml:lang counts? 
That just for the thing that the spec calls an XML Literal, the language inheritance rules of XML 1.0 are put out of force? 
The explanation might be that parseType="Literal" indicates a standalone fragment of XML embedded or quoted within the current document. 
This isn't strictly true in that a default namespace is carried in, but that could be described as an exception. 
XML isn't very good at embedding in itself - I think one of the reasons we have this problem. 
- Adding an additional element is a change of the markup, it effectively creates something different (see my answers to Pat for details) True, but that's a feature not an argument. 
- It can get overly voluminous even if (almost) everything is in one language. 
Hmm, not convinced by that. 
- It makes adding language information very tedious even in the simplest cases. 
"very"? 
Thats value laden. 
The objective fact is that it requires the addition of one extra element where one needs to specify a language. 
It is definitely not so that adding language information is the first thing that people creating data are thinking about. 
If it gets too complicated, they will just ignore it (might work out somehow) or they may do it in a haphazard fashion (very bad). 
Martin: is that the sum of your objection? 
Can you provide better examples that clearly indicate the force of your argument? 
I hope I have done so above. 
Thank you. 
Excellent job. 
One of the cons that some people have mentioned is that having language inherit may make it more difficult to integrate data from different sources. 
I personally don't see that argument. 
I assume that data integration would be done on the RDF graph, not in the XML syntax, so that issue just doesn't arise. 
Brian (note I am not copying i18n et al.) I am not convinced by the "*implementors*" part here. 
At the time I got the impression that the rest of the group just found what I was advocating (retaining the wrapper element) too complicated. 
I don't think we discussed "too complicated" for whom. 
After, as I was contemplating the arguments made by the rest of the group it seemed that really this "too complicated" is too complicated for someone beginning RDF, it's a dirty hack whose inelegance is such that it will put people off understanding this construct. 
Since, as Pat so rightly points out, we take the G view, we are unwilling to have a hack that messes that up badly. 
Jeremy Updating the arguments as I've understood them ... Martin wished to add a concern that RDFCore has exceeded its charter in changing XML literals as defined in M&amp;S. 
I have had another attempt at stating a rationale for the current design based in what Patrick, Pat, Jeremy et al have written recently, and some thoughts of my own. 
I'm just trying to capture RDFCore thinking in one place, so as usual, please correct, amend, clarify etc. 1. 
For RDF, its abstract syntax, i.e. the graph, is it primary representation. 
RDF/XML is a concrete syntax for representing graphs, i.e. from an RDF perspective, the goal is to figure out how best to represent graphs in RDF/XML, not how to represent RDF/XML in graphs. 
The typical use case for XML Literals is where an XML literal will be written into the middle of an XML document by an application. 
This is simplest if the xml literal is a standalone fragment that can be simply written into the XML document. 
2. RDFCore agrees with last call feedback that it received, that building an XML specific mechanism into its core model is architecturaly inappropriate - it mixes things that should be independent. 
Accepting this implies that parseType="Literal" values must use one of the existing mechanisms - i.e. either plain literals or typed literals, or a new more general mechanism must be invented, e.g. a new triple structure. 
An XML specific mechanism is undesirable. 
3. For the common use case, where applications embed a literal in an XML document, it is preferable to distinguish,in the graph, between plain and XML literals, so that e.g. different escaping conventions can be applied. 
4. Taking the datatype approach creates the opportunity to subclass the datatype XMLLiteral, so that the value of a property may be restricted to a specific form of XML Literal, possibly specified using XML Schema. 5. The equality rules are different for plain and XML literals. 
eg:prop eg:a='a' eg:b='b'/ " and " eg:prop eg:b='b' eg:a='a'/ " are different plain literals, but equal XML literals. 
6. 
The notion that the literal in the RDF/XML fragment below contains the English string "chat" as a substring seems bizarre. 
2, 3, 4, 5 and 6 argue for using the datatyping mechanism to represent xml literals. 
7. The XSD datatyping model does not support the notion that the value of a literal is affected by a language tag. 
RDFCore's attempts to introduce this notion caused considerable complexity and difficulty in the model theory and met with strong negative feedback. 
Thus, if language is to affect the value of an xml literal it must be part of the members of the lexical space of the datatype. 
This can be accomplished by the parser generating a wrapper element to hold the lang tag. 
8. The generation of a wrapper element is undesirable for the following reasons: - it is unhelpful in a primary use case where one wants to simply embed the literal in another XML document - the application has to get rid of the wrapper element, and find another enclosing element on which to hang the lang tag. 
- implementation complexity in general, caused by introducing and removing the wrapper element - the value of a property cannot be an arbritary XML fragment - it must always have an outer wrapper - the user may be surprised that the XML fragment is not identical to the one represented in the RDF/XML, e.g. XPATH expressions won't work as expected. 
Thus we are left with the current RDFCore proposal. 
The practical experience of WG members suggests that thinking of parseType="Literal" values as isolated fragments of XML that do not inherit language from their context, i.e. the current RDFCore design, is appropriate in practice. 
It has also been suggested that it is easier to integrate data from different sources when xml lang is not inherited from context. 
I am finding that one hard to follow, unless the integration is being done cut and paste by hand, since it is easy to always put an xml:lang="" next to every rdf:parseType="Literal" to ensure language isolation. 
Perhaps someone can provide an example to show the advantage. 
Martin: - leaving aside whether you agree with the value judgements it makes, would you accept that the above represents close to a coherent rationale for the current RDFCore proposal? 
- do you find it at all persuasive? 
Brian Two minor corrections only. 
That was actually first call feedback on the abstract syntax. 
This would be a future extension ... could I suggest adding the word 'future' into this point, on its next iteration. 
we started with xml"some-xml"@fr and then had "some-xml"@fr^^rdf:XMLLiteral and then (now) "some-xml"^^rdf:XMLLiteral maybe we could have ?xml 
some-attributes? 
some-xml"@fr Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
Brian McBride om cc: Sent by: Subject: Re: [Fwd: Re: Summary of strings, markup, and language tagging in RDF w3c-rdfcore-wg-req (resend)] uest@w3.org 
2003-07-06 08:50 PM Updating the arguments as I've understood them ... Martin wished to add a concern that RDFCore has exceeded its charter in changing XML literals as defined in M&amp;S. 
I have had another attempt at stating a rationale for the current design based in what Patrick, Pat, Jeremy et al have written recently, and some thoughts of my own. 
I'm just trying to capture RDFCore thinking in one place, so as usual, please correct, amend, clarify etc. 1. 
For RDF, its abstract syntax, i.e. the graph, is it primary representation. 
RDF/XML is a concrete syntax for representing graphs, i.e. from an RDF perspective, the goal is to figure out how best to represent graphs in RDF/XML, not how to represent RDF/XML in graphs. 
The typical use case for XML Literals is where an XML literal will be written into the middle of an XML document by an application. 
This is simplest if the xml literal is a standalone fragment that can be simply written into the XML document. 
2. RDFCore agrees with last call feedback that it received, that building an XML specific mechanism into its core model is architecturaly inappropriate - it mixes things that should be independent. 
Accepting this implies that parseType="Literal" values must use one of the existing mechanisms - i.e. either plain literals or typed literals, or a new more general mechanism must be invented, e.g. a new triple structure. 
An XML specific mechanism is undesirable. 
3. For the common use case, where applications embed a literal in an XML document, it is preferable to distinguish,in the graph, between plain and XML literals, so that e.g. different escaping conventions can be applied. 
4. Taking the datatype approach creates the opportunity to subclass the datatype XMLLiteral, so that the value of a property may be restricted to a specific form of XML Literal, possibly specified using XML Schema. 5. The equality rules are different for plain and XML literals. 
eg:prop eg:a='a' eg:b='b'/ " and " eg:prop eg:b='b' eg:a='a'/ " are different plain literals, but equal XML literals. 
6. 
The notion that the literal in the RDF/XML fragment below contains the English string "chat" as a substring seems bizarre. 
2, 3, 4, 5 and 6 argue for using the datatyping mechanism to represent xml literals. 
7. The XSD datatyping model does not support the notion that the value of a literal is affected by a language tag. 
RDFCore's attempts to introduce this notion caused considerable complexity and difficulty in the model theory and met with strong negative feedback. 
Thus, if language is to affect the value of an xml literal it must be part of the members of the lexical space of the datatype. 
This can be accomplished by the parser generating a wrapper element to hold the lang tag. 
8. The generation of a wrapper element is undesirable for the following reasons: - it is unhelpful in a primary use case where one wants to simply embed the literal in another XML document - the application has to get rid of the wrapper element, and find another enclosing element on which to hang the lang tag. 
- implementation complexity in general, caused by introducing and removing the wrapper element - the value of a property cannot be an arbritary XML fragment - it must always have an outer wrapper - the user may be surprised that the XML fragment is not identical to the one represented in the RDF/XML, e.g. XPATH expressions won't work as expected. 
Thus we are left with the current RDFCore proposal. 
The practical experience of WG members suggests that thinking of parseType="Literal" values as isolated fragments of XML that do not inherit language from their context, i.e. the current RDFCore design, is appropriate in practice. 
It has also been suggested that it is easier to integrate data from different sources when xml lang is not inherited from context. 
I am finding that one hard to follow, unless the integration is being done cut and paste by hand, since it is easy to always put an xml:lang="" next to every rdf:parseType="Literal" to ensure language isolation. 
Perhaps someone can provide an example to show the advantage. 
Martin: - leaving aside whether you agree with the value judgements it makes, would you accept that the above represents close to a coherent rationale for the current RDFCore proposal? 
- do you find it at all persuasive? 
Brian 
