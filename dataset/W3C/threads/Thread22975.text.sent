Regarding the Core L1 recommendation: The third paragraph of the Interface Element section reads: "Elements may have attributes associated with them; since the Element interface inherits from Node, the generic Node interface method getAttributes may be used to retrieve the set of all attributes for an element." 
I don't believe there is a getAttributes method in the Node interface. 
As long as I'm being anal, here are two typos: The second paragraph of Interface Document reads: "...The Node objects created have a ownerDocument attribute..." I believe that should read "...an ownerDocuement..."? 
From Interface Node, Method replaceChild, Exception HIERARCHY_REQUEST_ERR reads: "...of the newChild node, or it the node to put in is one of this node's ancestors." 
I believe this should read "...or if the node..."? 
I'm desperately trying to dig up relavent reasons to post before I bombard you with my OT implementation questions :~P Mike There is an attribute attributes on the Node interface, readonly attribute NamedNodeMap attributes; In some language bindings (e.g. Java) this will be translated into getAttributes. 
Why it is defined on Node and not Element is another question. 
I suppose the text you mention should read "Elements may have attributes associated with them; since the Element interface inherits from Node, the readonly attribute attributes on the Node interface method may be used to retrieve the set of all attributes for an element." 
Must... resist.... temptation.... Kind regards, --Sander. 
Why? 
Oh my, is "a" correct here? 
I thought "an" was used with vowels .. aeiOu so ... "an"??? 
I must admit my native language is Java and c, not english :-P Mike Good catch; that should be rephrased slightly. 
There is an "attributes" IDL attribute. 
Most language bindings will probably implement that as a pair of accessor methods (getAttributes and setAttributes), but the spec should cite the IDL instead. 
Joe Kesselman / IBM Research Very deliberate. 
We wanted the DOM to be fully operable without requiring that folks downcast from Node. 
Casts are surprisingly expensive in some environments, and can be a distraction even when they aren't. 
In theory, if you have Node, NodeList, and NamedNodeMap you can retrieve or modify anything in your main document tree. 
I've seen some minimalist subsets of the DOM built on that basis. 
Of course they weren't DOM-compliant, but they _were_ DOM-compatable; anything that worked on them would work on a "real" DOM, though of course the reverse isn't true. 
(Is it worth adding this to the FAQ, is it documented in our design principles somewhere, or is it unnecessary trivia?) Joe Kesselman / IBM Research Ahh, I did not now this. 
Of course to really be able to modify anything you also need Document (to create new nodes). 
But it is good to know this, thanks. 
Too bad for the convenience attribute Node.childNodes, otherwise it could have been done with one interface less... 
I would add it somewhere, perhaps also saying why readonly attributes publicId and systemId are excluded from this three-interface completeness (plus DocumentType.internalSubset, plus Entity.notationName). 
This is probably because they are 'extended interfaces', but how about Attr.specified? 
Kind regards, --Sander. 
