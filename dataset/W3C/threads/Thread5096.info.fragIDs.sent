sbp consider glean.py 
testing and pyrple porting on my weekend todo list. 
I've been rather productive these past few days DanC [...] I look forward to your feedback next week, sbp - http://www.ilrt.bris.ac.uk/discovery/chatlogs/rdfig/2004-06-04 
I didn't manage to test glean.py 
yet (still planning to do so), but I did manage to port it to pyrple, and make a few changes to the script along the way: - A GRDDL client implementation using Pyrple (Date: 5th of June, 2004; License: W3C Software License) Requires xsltproc and pyrple [1]. 
Note how much nicer optparse is compared to getopt! 
There are some other more subtle differences too. 
I also set up a webservice that uses the script above: - GRDDL Demonstration (using Pyrple and garner.py) 
Source: http://inamidst.com/inside/grddl/demo 
Append "&amp;format=ntriples" to the results for N-Triples output. 
I ought to run a graph isomorphism test/rdfdiff program on my ./demo 
output and the W3C's grddl-demo output. 
Cheers, [1] http://infomesh.net/pyrple/ Quick installation: 
$ wget http://infomesh.net/pyrple/pyrple-2004-06-06.tar.gz $ tar -zxvf pyrple-2004-06-06.tar.gz $ su -c mv pyrple-2004-06-06 /usr/lib/python2.3/site-packages/pyrple 
Sean B. Palmer, inamidst.com 
Dan, Sean, Please correct me if I'm wrong, I haven't had time to pore over the source: Both glean.py and garner.py 
discover and apply a series of XSLTs to the source XHTML, reading the resultant RDF/XML into a triplestore/model. 
The merged model is then serialised out as RDF/XML. 
Can't the same result be achieved without the Redland/Pyrple dependency? 
Isn't a purely syntactical merge possible - just top &amp; tail ('deroot') the individual RDF/XML results, then glue them back into a common root. 
I would guess XSLT could do this whilst retaining all the required namespace declarations. 
Feasible? 
Cheers, Danny. 
Raw 
Hello Danny, Le mer 09/06/2004 ? 
12:44, Danny Ayers a ?crit 
: 
This is indeed feasible, and that's actually exactly what the demonstrator linked from the spec does: run the following XSLT on the to-be-GRDDLed resource: Dom Dominique Haza?l-Massieux - http://www.w3.org/People/Dom/ W3C/ERCIM 
Almost... 
Yes, that's how the first version of glean.py 
worked. 
But more recent versions support "following your nose" thru profile/namespace documents, GRDDLing those, and looking for statements of the form profile dataview:profileTransformation ?XFORM. 
so there's some non-trivial RDF-level processing going on. 
I thought about doing that with XSLT, but then thought better of it. 
Dan Connolly, W3C http://www.w3.org/People/Connolly/ 
