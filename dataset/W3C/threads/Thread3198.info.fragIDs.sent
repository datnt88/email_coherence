*** Resending note of 10/02/97 15:50 
I believe that the proposal to remove NWNN and the proposal to define 990 as ftps are mutually exclusive. 
This follows some 
discussion I had at the FTP-EXT W/G in San Jose who had the following comments about the FTP-SSL proposal. 
- The data connection and the control connection in the FTP protocol are completely separate. 
Negotiating one level of security for the control connection should not imply any behavioural changes to the data connection. 
- Saying that the data connection must be TLS if the control conection is is only valid if .. i) the data connection is capable of setting its' own policies should it so wish. 
ii) The overhead for sending unprotected or pre-protected data is minimal. 
(and is possible). 
The much preferred route is to allow the control connection to negotiate the protection level of the data connection. 
(see the PROT command in the CAT draft-ietf-cat-ftpsec-09.txt) 
Thus, by removing the NWNN option in TLS, and without specifying how the control connection can negotiate the behaviour of the data connection (in fact specifying nothing about the data connection) you are removing the ability of the ftp client/server to negotiate unprotected data connections (for file lists/pre-encrypted data) this is not flexible enough for all the uses of FTP and we should not move forward with this as a specific way of solving a specific problem and thus tying down a general protocol like FTP. 
I agree the NWNN is a good candidate for removal, in which case can I please propose the following in the specific case of FTP. - do NOT propose 990 for ftps (or 989 for ftps-data) - instead, ask the IANA (or whoever) for the telnet string for TLS/SSL as discussed on page 5 of draft-ietf-cat-ftpsec-09.txt - point people who want to do FTP/TLS at the cat ftpsec draft instead of encouraging them to take liberties with ftp. 
(That way the draft gets more encouragment to become an RFC) and use the AUTH and PROT commands to negotiate TLS at the application level. 
- write a document desribing the policy decisions that clients and servers should be aware of, the parts of draft-ietf-cat-ftpsec-09 that need to be used for TLS, the expected behaviour of clients and servers when negotiating data channel protection etc... 
This is the direction that the draft-murray-ftp-auth-00.txt document is going now that the CAT one has re-emerged and I am sure that Tim and Eric (any myself) would welcome interested co-authors from those amongst you who are desparate to get an inter-operable secure FTP defined. 
I don't see how this can be accused of holding anything up, as the draft (cat-ftpsec) is already written and awaiting eager developers. 
Thanks, Paul 
I'd think not. 
TLS_NULL_WITH_NULL_NULL is an unprotected connection. 
Rather than using TLS with that cipher suite, just don't use TLS. 
No loss of functionality whatsoever. 
This proposal is _far_ more complicated than the FTP approach described in draft-murray-auth-ftp-ssl-00.txt ... and it doesn't even talk about how to make this work with TLS. 
Other than the PROT command (which could be added to the ftp-ssl draft), the primary technical advantage that I notice in cat-ftpsec is that it explicitly addresses Kerberos. 
Wouldn't it be a lot better to follow draft-ietf-tls-kerb-cipher-suites-00.txt to Kerberize SSL, and then follow the ftp-ssl draft's simpler approach for the rest? 
Similarly, draft-murray-auth-ftp-ssl-00.txt is already written etc. 
Speaking as a potential implementor, the approach in the ftp-ssl draft gets my vote on time to market and on how readily it can be implemented correctly and interoperably. 
- Dave 
ftpsec-09 current has four organizations (that I know of, there are probably mode) implementing using kerberos or gssapi. 
Three of these implementations are independent. 
With a few exceptions which recent version of the draft address, they interoperate. 
I will admit that I 
have not read the murray draft, but it seems poor to ignore an existing, implemented propsal. 
Marc 
However, that proposal doesn't address TLS, and the TLS-enabled proposal is far simpler. 
I see your point re Kerberized FTP; I expect you see mine re SSL-ized FTP, which can also address Kerberization through the proposed Kerberos flavors of TLS. 
It does make sense to me to have a single FTPS protocol, but I do feel that it's strikingly easier to do that by layering over SSL/TLS than by requiring the complexities of the cat-ftpsec approach. 
- Dave 
I agree that ftp security protocol is better. 
Are you going to tell the existing shipping vendors to stop? 
The TLS approach isn't all 
that much simpler than the cat-ftpsec approach. 
The devil, as usual, is in the details, and both protocols have plenty of those. 
If it was that hard, it wouldn't have been done three times already. 
Marc 
*** Resending note of 10/02/97 19:35 
The loss is the ability of the Client/Server to exchange insensitive data/pre-protected data without having a data security negotiation conversation on the control connection (which the 'define an ftps port' approach precludes.) 
Agreed - but this is why it must be a 2 prong attack. 
a) - state that the CAT W/G is the way to neogotaite FTP/TLS b) - discuss exactly what the expected behaviours of the Client/Server need to be for TLS. 
(when negotiating security). 
e.g. PROT C means no TLS at all (if NWNN is removed this is the only way of having a 'clear' connection); PROT P means negotiate TLS with whatever Ciphersuites are configured; PROT S and PROT E are replied to with a 536. 
(This is just a suggestion - please don't flame the specifics here/yet !!!) 
Maybe - but then you lose the availability of an implementable proposal that can be done now. 
This document needs (pretty much) completely re-writing since the re-appearance of the CAT doc; I was just in the process of updating it and circulating it to the co-authors when all this blew up. 
What I am really looking for is a statement that this is worth pushing on with and we won't get shot in the foot by people implementing ftps quickly with interoperability problems that will get out of hand. 
Please note - the draft-murray-auth-ftp-ssl-00.txt does allow for a separate port approach (allowing the data connection security to be done at the TLS layer rather than on the control connection). 
With the removal of NULL_WITH_NULL_NULL, I believe that will need to be revised, as it will not be acceptable to the FTP community. 
(The only way I can think of getting round it is to say that a connection received on the TLS port does an implicit AUTH TLS, PBSZ 0, PROT P in the server, thus allowing for a decent default and a future negotation ability). 
We also need to talk to the CAT group to discuss the PBSZ command to see if we can specify a 'streaming' secure connection (like TLS) with a value (say 0), or the ftp/tls draft will just say that PBSZ, while required, is ignored (yuck). 
Thanks, Paul. 
*** Resending note of 10/02/97 22:17 
No - they can do what they like, but if they want an open standard that will interoperate with other vendors then they need to re-think what they are doing. 
Cheers, Paul 
