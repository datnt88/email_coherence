Danbri and I have been discussing issue: Its quite hard to get a crisp quote of the problem from the email thread but I think the issue is that schema does not layer the same way as, say UML, in that classes can be members of themselves and one can take a subproperty of subPropertyOf or rdf:type. 
I think we need to clearly articulate the advantages of the design choice that has been made. 
I suggest the following reason for the design choice and why we should not change. 
I welcome comments and other suggestions: 1) RDFS is designed to be a lower layer for the semantic web stack that is extended by restriction. 
All structure at this layer is imposed on all higher layers. 
A layered structure is not necessary and the principle of minimal restriction suggests it should be omitted. 
2) A further consideration is the cost of change at this point. 
To switch to a layered approach would require a massive rethink and would affect not only the RDFCore specs but also OWL. 
Only a show stopping problem with the current design could justify the cost of such a change. 
We note that it is possible to build more strictly layered languages on top of RDF(S), Owl DL/Lite being examples. 
Brian I'm not convinced of a *need* to do this. 
(But if we can, then fine...) I think the main issue here is that the non-layering is a fundamental feature of the RDF we were tasked to clarify. 
I think we don't really have any discretion to consider other design approaches. 
This might be underscored by mentioning the large number of implementations that currently depend on this model (esp schema uses where rdfs:Class is treated as both resource and class, and is a member itself, etc.). 
A good point to make, I think. 
#g Graham Klyne PGP: 0FAA 69FF C083 000B A2E9 A131 01B9 1C7A DBCA CB5E I disagree. 
first, we did not make it, it was imposed by our charter. 
Second, the only objection to it from this comment can be succinctly phrased as "I don't like that way of doing it" which does't really need to be dignified with a careful answer, particularly in view of the fact that when asked for clarification, the commentor's response was somewhere between unhelpful and downright rude. 
That might be well worth articulating in more detail. 
I think we could do a fairly exact job on this which a lot of people would find helpful. 
Since Jeremy has already done the donkey work for this in defining how to tell if an OWL-RDf graph is in OWL-DL ( which is precisely the 'layered' subset of OWL in this sense), we should be able to easily adapt his algorithm to define a 'layered style' of writing RDF and put it in an appendix somewhere. 
I am willing to tackle writing a draft of this. 
It would be relevant to vass-01, pan-01 and Qu-03. 
Pat IHMC(850)434 8903 or (650)494 3973 home 40 South Alcaniz St.(850)202 4416 office FL 32501???????????(850)291 0667 cell phayes@ai.uwf.edu http://www.coginst.uwf.edu/~phayes s.pam@ai.uwf.edu for spam While I am not convinced of the value of this exercise I am happy to contribute an articulation of the intersection of OWL Lite and RDFS, with a few sensible relaxations (like allowing cycles of bnodes). 
Jeremy The question of layering has been made many times by many people. 
The RDF schema approach is unusual and it is not uncommon for folks, e.g. those familiar with UML, to ask "why did you do it differently". 
I was kinda hoping there was a relatively simple answer to that question. 
And if there is, I see no reason for not offering it in response to this comment. 
I personally find the example in the webont docs quite convincing. 
It seems to be that in general I want to be able to treat Cabernet Sauvignon as both an instance of the class of species of grape and a class of grape instances. 
Maybe a response might include something of that nature. 
The world just ain't layered. 
I'm not looking for doing new work at this point. 
Is this work *necessary* to resolve these comments. 
I would like to see simple responses to the comments. 
I'm not at all keen on new appendices. 
There is not just the work of writing them, they need to be reviewed etc. Please lets focus on getting the current tasks completed. 
We are supposed to be done by end of June after all. 
Pat, will you be able to propose resolutions for outstanding semantics issues for this weeks telecon? 
Brian The design derives from the principle... "Anyone Can Make Simple Assertions About Anything" One straightforward approach is to refer the commentor to that section and see if it satisfies him. 
Another approach is to elaborate that section to derive the "non-traditional" aspects of RDF/RDFS design (properties of properties, classes of classes) from that principle. 
TimBL has done it a number of times orally; I wish I had a tape recorder. 
Hmm... he chimed in on a relevant thread... Re: FAQ: stratified class hierarchies vs. RDFS From: Tim Berners-Lee (timbl@w3.org) 
Date: Thu, Jun 27 ... but no, that's hardly what I'd send to the commentor. 
Let's see... the argument goes like this, as I recall... 1. 
A tree is more constrained than a graph, i.e. web. 
A central architectural principle of the web is that it is, in the general case, an unconstrained web; trees, lattices, tables, etc. can be embedded in the web, but the web as a whole is unconstrained. 
This is a fundamental architectural feature of the Web; lots of systems that had all the other features of the Web and more, but lacked this one, failed. 
2. RDF builds on the existing web of URIs, promoting the idea of typed links from something rarely exploited to a central feature, properties, and promoting the informal relationship between linked resources to formal logical... well, formulas; in exchange for the reduced expressiveness of formal systems, we get the benefit of computationally assisted reasoning. 
[hmm... perhaps we can leave points 1 and 2 implicit; but I'm not deleting them from this message...] 3. Consider single inheritance. 
If doc1 says doc1#baseball rdf:type doc1#Sport , and some other party wants to use the same concept of baseball but relate it to a different class, ala doc1#baseball rdf:type doc2#Business , to prevent them from doing so is to artificially constrain RDF, counter to point 1. 4. Consider stratified class hierarchies. 
If docA says docA#DatabaseTable rdf:type docA#ModellingTechnique . 
and docB says docA#ModellingTechnique rdf:type docB#ConceptsInPhilosophyBook1 . 
And docC says docB#ConceptsInPhilosophyBook1 rdf:type docA#DatabaseTable . 
Then any stratified design imposes an arbitrary limitation on the use of these three documents. 
Something like that. 
Hmm... perhaps something in between is more straightforward... Yes, that seems responsive to the comment. 
Another possible alternative is for the chair to rule this discussion out of scope on charter grounds; to reply to the commentor that the WG isn't chartered to explore alternative designs. 
That's cheaper in the short-run, but the cost of actually trying to satisfy the commentor should be weighed against the risk that the comment will come back during proposed recommendation review, from a member, when it will be in order to say "well, we're not interested in what we chartered you to do any more." 
Meanwhile... I like the approach of writing up the constrained form of RDFS that matches some of the FOL/UML/OOP intuitions... I'd like that to be a separate NOTE, though. 
Dan Connolly, W3C http://www.w3.org/People/Connolly/ 
