As promised, here is a description of our proposal to amend RFC2109 to allow certification of unverifiable transactions. 
I have two questions in particular regarding this proposal: 1) Should "certified" cookies be a third! 
type of cookie header [this is what we have written in the proposal] or can we incorporate the certificate as an option in the SetCookie2 header? 
2) Can we include this in the next version of RFC2109 or must it be a separate RFC? ) ) ) ) )---------------------------------------- Daniel Jaye djaye@engagetech.com 
Engage Technologies, Inc. (508)684-3641 v 100 Brickstone Square, Andover MA 01810 (508)684-3636 f Here is the proposal: HTTP STATE MANAGEMENT PROPOSAL FOR CERTIFIED COOKIES March 30, 1997 1. ABSTRACT This document specifies an addition to the state management protocol specified in RFC 2109. 
The intent is to provide a mechanism that allows user agents to determine the privacy policies of a server and to accept or reject cookies based on that policy. 
Allowing the user to decide whether to accept cookies based on how the server uses them provides far better control over privacy than just distinguishing between servers the users directly accesses (verified transactions) and those to which the user agent was redirected (unverified transaction.) 
It furthermore avoids unnecessarily precluding valid distributed applications. 
To provide such information about server privacy behavior, we assume the existence of an independent certifying authority (or authorities), such as eTrust. 
The authority establishes levels of "trust" and can audit domains to determine their adherence to a given level. 
It then issues certificates to domains based on the trust level. 
Passing those certificates along with cookies allows the user-agent to support cookie-acceptance rules based on trust level. 
This document describes a new header, Set-Cookie-Certifiers for sending certificates along with cookies. 
Set-Cookie2 would still be used to send the cookies. 
The new header would send certificates intended to verify the trust level of the domain issuing the cookies. 
This proposal does not alter any existing headers. 
2. SCOPE OF THIS DOCUMENT This document addresses only the requirement that it be possible to support state management policies at the user-agent that are based on level of privacy adhered to by the server domain. 
It has therefore not addressed some more general questions raised about the state management protocol, such as the domain-matching rules, or the definition of session itself. 
Those definitions are assumed in this document. 
3. TERMINOLOGY The terms user agent, client, server, origin server, FQHN, FQDN, request host, request-URI and proxy are used as in RFC 2109 on State Management. 
The terms domain-match, verified transaction and unverified transaction are defined in RFC2109, and those definitions are also used here. 
The term certificate is used to mean an x.509 certificate as referred to in the SSL protocol document, and defined in the x.509 proposed specification[] 4. STATE MANAGEMENT PROTOCOL 4.1 SYNTAX The syntax for the Set-Cookie-Certifier response header is: Set-Cookie-Certifier = "Set-Cookie-Certifier: " certificates certificates = x.509-Certificate (",") X.509-Certificate is taken from the SSL Protocol[]. 
The full specification of x.509 can be found in []. 
This specification should follow the definitions in those documents. 
The following is a summary version of the x.509 definition. 
It includes all the fields we use here. 
x.509-Certificate = SEQUENCE { certificateInfo CertificateInfo, signatureAlgorithm AlgorithmIdentifier, signature BIT STRING CertificateInfo = SEQUENCE { version [0] Version DEFAULT v1988, serialNumber CertificateSerialNumber, signature AlgorithmIdentifier, issuer Name, validity Validity, subject Name, subjectPublicKeyInfo SubjectPublicKeyInfo The token "signature" is the hashed value of CertificateInfo, encrypted with the Certificate Authority's private key, by the algorithm specified in signatureAlgorithm. 
Validity is a date range. 
Issuer is the name of the certificate authority. 
We will use different issuer names to convey different levels of certification. 
The subject name should contain the domain name to which the certification applies. 
Other fields are not used in this specification and their definitions can be found in the x.509 specification [] or the SSL Protocol specification []. 
Informally, the syntax consists of the token "Set-Cookie-Certifier:" followed by a comma-separated list of certificates. 
Note that list of certificates applies to all cookies in the Set-Cookie2 header of the response . 
There is no need for separate certificates per cookie, since all cookies in the response come from the same server, and certificates belong to the server not the cookie. 
More than one certificate may be needed, however, since the server may own certificates from multiple certificate authorities, and any given user-agent may be able to accept certificates from only some authorities. 
[NOTE: there is a comment in RFC2109 that states that a gateway may fold multiple Set-Cookie2 headers into a single header. 
It is assumed that such folding applies only to headers from the same origin server. 
If that is not the case, we will in fact have to include the certificate in the cookie itself.] 
4.2 SERVER ROLE Any server wishing to provide certified cookies must request a certificate from the certifying authority. 
Unlike the certification assumed in general for x.509 certificates, the certifying authority here must have the ability to evaluate the server domain and determine the trust level for which a certificate will be issued. 
That evaluation takes place outside the protocol described here. 
The actual certificate request can use the PKCS(10) protocol for certificate-requests [see..]. 
That protocol will provide the certifying authority with the CertificateInfo to be signed in the issued certificate. 
The certifying authority then provides the certificate to be included in the set-certified-cookie header. 
The origin server initiates a session, if it so desires. 
To ensure that user-agents have the most complete information with which to determine whether to allow cookies to be set during this session, it initiates the session by including the header Set-Cookie-Certifier in addiiton to the Set-Cookie2 header. 
It includes in this header the set of certificates the server has been issued by various trust authorities. 
(In actuality, this protocol may in fact be useful for authentication in the a broader context than just privacy requirements.) 
The origin server receives cookies from a user-agent in a cookie request header. 
This proposal does not modify the cookie request header definition. 
The server may choose to use or ignore cookies supplied in such request headers. 
Upon receipt of such a cookie, it can return the same or a different cookie in the response, or no cookie at all. 
4.3 USER AGENT ROLE The user agent receives cookies from an origin server in the Set-Cookie2 header and cookie certificates in the Set-Cookie-Certifier header. 
The agent can choose to ignore the Set-Cookie-Certifier header. 
If it chooses to use the certificate information, then it must validate the certificates and can then decide whether to accept the cookies based on the privacy level of the certificates. 
User agents determine the policy for accepting or rejecting cookies. 
One suggested policy would be to accept cookies only from sites that are certified by an authority such as eTrust, regardless of whether the transaction is verified. 
User agents may also provide policy options that distinguish between verified and unverified transactions, for example by allowing all cookies in verified transactions and only certified cookies in unverified transactions. 
The user agent must be able to accept certificates from the authority named as the issuer. 
It need accept only one certificate in the header to validate the cookies. 
Thus, a server may send all its certificates, not knowing which a given user agent might accept. 
Rejection of some is irrelevant, though it does consume processing time. 
If the cookie acceptance policy is based on certificates and the user agent cannot interpret any certificate, then it must reject the cookies in the response. 
To ensure that the certificate is valid, the user agent decrypts the certificate's signature using the certifying authority's public key. 
That key can be obtained from the certifying authority by requesting it's own certificate, which includes its public key. 
Given that we expect few such certifying authorities, the user agent may choose to store keys from standard authorities to avoid extra round trips.. 
The issuer of the certificate indicates the certification authority, as well as the level of certification. 
Thus, if eTrust has 3 levels of certification, they will issue certificates as three different authorities. 
The user agent may have options that allow cookies to be stored only if they come from domains with an adequate level of privacy certification. 
To do so, the user agent maintains a list of the certificate authorities that guarantee appropriate privacy levels. 
The subject field in the certificate names the domain for which the certificate is valid. 
The path of the cookie must domain-match the domain of a certificate if the cookie must be certified. 
It is the user agent's responsibility to ensure that domains are properly matched. 
If the user agent is set to accept all cookies then all certificate processing can be skipped. 
This proposal does not alter the domain matching rules described in RFC 2109. 
Those rules preclude sharing of cookies across some combinations of subdomains. 
The user agent must reject cookies if those domain-matching rules are violated. 
4.4.CERTIFYING 
AUTHORITY ROLE The certifying authority referred to in this document must be a neutral third party that can be trusted to accurately characterize the privacy behavior of web sites. 
ETrust is one such organization that might play this role. 
The issuing of certificates occurs outside the scope of this protocol, but the protocol depends on user trust in that authority. 
The certifying authority must understand the scope in which a certificate applies and the related domain-matching rules, to ensure that for all situations in which the certificate would be deemed to be applicable, the server(s) are in fact operating at the specified trust level. 
On receiving a certificate request, the authority must audit the site requesting the certificate and issue the appropriate level certificate. 
To issue the certificate, the authority hashed the CertificateInfo provided by the requester, encrypts that hash value with its private key and includes the resulting value as the signature in the certificate it issues. 
The authority must also be prepared to respond to requests for its certificate, which contains its public key. 
Certificate revocation is handled primarily via revocation lists, as with any x.509 certifier authority. 
5. SUMMARY This document presents an extension to the state management protocol defined in RFC2109. 
It describes only extensions to that protocol. 
Any parts of the state management not explicitly described here are assumed to remain as defined in RFC 2109. 
The protocol described here allows a user agent to verify that the origin server is using cookies in a manner consistent with the privacy expectations of the user, by providing a certificate issued by a trusted authority. 
- 1 - I'm leaning toward calling for the formation of a "state management" subgroup or even a separate working group, given how much attention this is getting, and how separable from the other issues around HTTP. 
In the meanwhile, I will consult with IESG members and area directorate and get advice about how best to proceed as far as revising 2109. 
Larry I certainly hope we can discuss this in Memphis, whether as part of the agenda for the working group or in a bar bof. 
My concern is that this proposal seems to address a question not basic to the concerns about the restrictions on domain. 
In short, it seems to heighten the ability of a server sending a cookie to verify its identity, without doing a whole lot to explicate the relationship between the cookie issuer and content provider. 
I can see ways in which this mechanism could be used, but I'm not sure that my examples are part of your intended design. 
Your base design seems to assume that Certifying Authorities will emerge which will certify not just an organization's identity but its adherence to an established set of guidelines on the use of the data which it receives. 
This seems to combine the x509 certificate with something which would require a much bigger process. 
Not ISO 9000, maybe, but a significant amount of work, as it involves verifying internal processes--not just proofs of identity. 
The emergence os trustworthy CA's willing to take that on seems problematic. 
There may be a way around that, by drawing on the existing relationships and setting things up so that the assurance of certification was inherent in the content-provider/cookie issuer relationship. 
If, for example, we imagine that cookie issuers make the content-provider the cookie-issuer's certifying authority for a particular cookie, then allowing cookies when the certifying authority domain matches the content-provider makes a certain amount of sense. 
Doing so, however, would require a whole new set of CA's, the acceptance of which in the cookie context should probably not be extended to other contexts. 
It also requires a method of allowing the UA to display this new relationship. 
To rephrase this, I don't think users have a problem believing that "tripleclick" is who it says it is when they receive a cookie from "tripleclick.net". 
I think what they need to see is how tripleclick relates to the current and other content providers. 
Using the inter-relationships among x509 certifying authorities may be one way of getting the relationships specified, but it is a at least moderately complex way that still needs to be made visible to the end user. 
regards, Ted Hardie NASA NIC NB: NASA isn't confused about this, I am. Quoting Ted Hardie: I believe the idea is not only to authenticate the server, but also to certify a particular level of trust, and category of business practice in a way that, browser folks willing, will allows the user to set preferences that use guidelines from CA's to determine if cookies should be accepted or not. 
Authenticating the server is really just one small part that guarantees that the credentials (the level of trust and catagory of data handling practice) are not stolen, or misused. 
As I understand it, the real problem with allowing cookies from EVERYWHERE is that it allows the collection of data about individuals without their knowledge or consent, and once collected, the user has no idea what it's going to be used for, or by whom it will be used. 
The proposal provides a mechanism of informing users of business and data relationships other than just the ones dictated by a particular domain, and a mechanism that allows them to weigh the benefits and hazards of accepting cookies from entities. 
Indeed they are. 
eTRUST is such a company (www.etrust.org), and there will undoubtedly be others. 
eTRUST will be using a combination of auditing by professional auditors like KPMG, and signed legal affidavits to track and qualify companies policies for handling data collected through their site, both through cookies and other means. 
This is an interesting approach, but it doesn't really scale very well. 
If you have everyone acting as a CA, there is no trust in the CA process. 
Ideally you want to have a few CA's that can be established as credible agents, otherwise there's no meaning in "bob's CA and gas station" guaranteeing you that "evildoer.com" is issuing cookies that will only be used to track clickthrough's. 
You're absolutely right. 
But if tripleclick has signed a legal document and gone through an auditing process by a third party attesting that the only thing they are doing with their cookies is making sure that each visitor only sees the same add 3 times, and the third party CA says ok, you're in a "class 1" catagory, which means that you don't collect any personally identifiable information, you only deal with aggregate information, and therefore people's privacy is pretty well protected if they accept tripleclick's cookies, then there should be no reason not to allow cookies from tripleclick if the user chooses to accept "class 1" certified cookies. 
Conversely, tripleclick may actually collect names and phone numbers and sell that information as targeted mailing lists based upon user's preferences on the adds they sent, or they may work with "Company B" to compare logs with Copmany B and link the preferences that tripleclick collected with user names that Company B collects. 
In that case, the third party CA may issue them a "class 3" certificate that says that tripleclick actively trades personally identifiable information with other groups. 
Under certain circumstances, the user may want to accept class 3 certificates for the added value of getting more information about things they are interested in. 
In most cases, however, they are likely to not want to accept these cookies. 
The point is that the user should have the choice of accepting the cookies and the information policies that they want. 
Informed consent prior to divulging information is much better than arbitrarily limiting the use of cookies by domains. 
The use of cookies and the whole issue of trust and privacy change from company to company, situation to situation, and the user should be able to make informed decisions about what they want to do in any particular set of situations. 
Jonathan Jonathan Stark (415) 858 1930 x217 eTRUST Technical Director stark@eTRUST.org 
Here is one of the problems which seems to show up too much. 
Issuers of indirect (I like this term better than unverifiable) transactions are not collecting data about individuals. 
We do not have any method other than direct registration on our site or another site sharing the information, to understand "who" a viewer is. 
We set cookies in user-agents. 
We do not know the individual! 
Part of the fear of privacy violation is that we can track someone down, get their phone number, etc. and this is not true. 
So, we collect data about the behavior of people who use and potentially share a web browser, but we do NOT know who that person is. 
In no cases have we ever found a web site who is willing to share information about registered users. 
One of the big issues is what do the sites who issue verifiable transaction cookies do with their information. 
If they were to provide us with their registered users' data and the IDs of the issued cookies, we could completely skirt the issue of unverifiable transactions (with some work). 
So, there are ways around this. 
How...tripleclick does not have access to names and phonenumbers unless someone gives it to them. 
This kind of information cannot be extrapolated from IP address. 
I honestly believe that once again the big issue is for people to understand exactly what are the potential breaches of privacy and how they can occur. 
Let's face it, the Ad networks are interested in tracking user behavior, no secret there....however, there are limits to what we can and would do with this information. 
It is our policy to completely disclose how we use cookie data (and this will show up on our web site in the near future). 
I also believe that other Ad networks disclose this information. 
I personally would accept the certification process if this is the only alternative. 
One issue with this is how fast can sites be certified, what are the criteria, and how much will it cost? 
I would prefer an easier solution which I assume has been discussed (please excuse my late entrance into this mailing list and my potential ignorance of history) which is to make the default for user-agents to accept all cookies with the ability to turn off unverifiable transactions if desired. 
Can anyone from the companies providing browsers give a company position on what they intend to do with respect to RFC 2109 and the default of turning off unverifiable transactions. 
Steve Reiss FlyCast Communicationsemail sreiss@flycast.com 
123 Townsend St.Phone 415-975-5373 San Francisco, CA 94107 Oh boy. 
It looks to me like the 'but unverifiable transactions are GOOD' crowd just went the guerilla PR route. 
Those of you who get ClariNet should check out the article titled: "****Online Professionals Support Web Cookies 04/23/97" URL:news:Naf6_35U@clari.net , clari.tw.top. 
If you were to take what the 'Association of Online Professionals (AOP)' says at face value you would think that the WG had just proposed turning off ALL cookies by default (naughty, naughty WG). 
Fair use excerpt: Among the negative impacts, according to McClure are a "potential loss of services from online services such as MSN, which rely on cookies for passwords, preferences and other common tasks; loss of all electronic commerce that relies on cookies, including those based on the "shopping cart" models; and loss of one of the major methods of advertising effectiveness analysis for Web sites that rely on such revenues and sponsorships for their economic base." Am I crazy or of the items they list is the ONLY one *actually* affected the "loss of one of the major methods of advertising effectiveness analysis for Web sites"? 
The Big Lie lives.... Benjamin Franz Benjamin Franz: I found the same article in biz.clarinet, which is a more common newsgroup I believe. 
There is also an article about this at not have the quote below. 
Yes, only that one is affected somewhat. 
And even `advertising effectiveness analysis' does not rely on cookies that much. 
Koen. 
