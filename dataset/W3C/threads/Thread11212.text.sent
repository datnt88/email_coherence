|    Why not just "xlink"? 
|  As Jon points out, it needs to begin with "XML-" Uh, why was that, again? 
If we have a reserved attribute named "XML-LINK", used to select among somewhere between 2 and 5 different types of elements that make up the linking machinery, then we *own* this attribute. 
Why do we need to prefix the *values* with "XML-"? 
It seems like are safe and unambiguous. 
I suspect there was a good reason for this that I managed to miss, and I can't dig it out of the correspondence. 
-Tim |    Why not just "xlink"? 
|  As Jon points out, it needs to begin with "XML-" This might be because of a misguided fear that if we prescribe a set of values for the XML-LINK architectural control attribute then we'll be invading users' namespace for enumerated attribute values, a la: !ATTLIST mylink xml-link (link|xlink)#FIXED "LINK" otheratt (foo|bar|link)#IMPLIED -- oops, duplicate token in attribute declared value -- This fear is misguided because nobody needs do it that way, declared value NAME works just fine: !ATTLIST mylink xml-link NAME #FIXED "LINK" otheratt (foo|bar|link) #IMPLIED It could also be that the value of the XML-LINK attribute specifies an XML-LINK architectural form, and if we allow 10744-style architectural minimization (wherein GIs may be automatically interpreted as architectural form names) this would invade users' element type namespace. 
--Joe English jenglish@crl.com 
[Tim Bray:] |    Why not just "xlink"? 
|  As Jon points out, it needs to begin with "XML-" You're right. 
I was still thinking (without thinking) that there would be GIs with the same names as the attribute values. 
Since we're not allowing those, the syntax you suggest should work fine. 
I like it. 
Jon 
