Hi Joseph and Merlin, though there is still some confusion: Christian asking about what exactly Merlin is proposing [1], and my confusion about multiple transforms operating on the *original* document, not their preceding transforms output [2]. 
So before we have a call or resort to a poll I'd recommend we gather our thoughts and first reflect these changed in the document. 
Then we can further discuss as needed. 
To answer 2, in case it's not clear from my last message (which hopefully addresses 1), the XPath expression is evaluated in the context of the input document and then the result is applied to the input node set. 
Yes, and I would further assert that the set operation transforms *are* operating over the output result of the preceding transform in a natural way, esp. 
given that we want to avoid running lots of XPath expressions. 
An Xpath evaluation context takes one node. 
If we want to run the Xpath over each node of the input, then use Xpath filter 1.0. 
Otherwise, we run one Xpath over the document from which the input node-set is drawn, then we perform a set operation between the Xpath result and the input node-set. 
Also, I think the fact that Xpath has a union operator has tricked us into believing that we don't need union as a third set operation. 
I think it's easy to implement and useful, e.g. Christian's examples can be solved if we add union as a third operation. 
I also think we should do it for the sake of completeness. 
I think, as an aside, that a sequence of XPath, XPath filter and Enveloped signature transforms can thus be reordered without altering the resulting node set. 
This is a neat property, but I don't think it a necessity, esp. 
not compared to having a union operation, which would eliminate the property. 
Thanks, John Boyer Ah, I was confused about the distinctions between the "input document" and "input nodeset." 
I've realized we should promintly highlight and define the difference between the input nodeset, and the root element of the whole tree that still exists in context. 
Also, I have a *little* bit of concern in that we're implicitly thinking in terms of DOM implementation and the relationship to the whole of the tree being preserved when we are handed a nodeset. 
(If this design is unavoidable/desired, perhaps we could make it more explicit?) What happens if I had a stream-like implementation of a profile of XPtr or XPath, or some weird conversion between an Infoset? 
XPath defines a node-set as, "node-set (an unordered collection of nodes without duplicates)" so there's nothing there that guarentees the preservation of relationships with other nodes, right? 
I don't disagree with the distinction, I'm just not confident we aren't relying upon some implicit statement somewhere that the result of one of our XPath transforms (or profiled XPtr) MUST preserve its relationships to nodes not in the node-set. 
Perhaps we need to define an "input nodeset" "document nodeset" and "evaluated nodeset" and state the relationships between the "evaluated nodeset" and "document nodeset" MUST be preserved. 
Hi Joseph, A profile of XPath or XPtr that does not preserve knowledge of the full document is fundamentally broken according to those specs. 
At any point in the evaluation of an XPath expression, I can start traversing the ancestor axis all the way up to the root of the document. 
This is even a property of the XPath filter 1.0, which may start at a given node in a nodeset, but then can traverse anywhere in the document to make a determination of whether or not the node is to be included in the output. 
We can put in an editors note to make sure everyone understands this, but defining a lot of new terms might make it seem that something is broken in what we are doing where clearly there is no error in our approach. 
John Boyer, Ph.D. Senior Product Architect PureEdge Solutions Inc. Filter? 
Ah, I was confused about the distinctions between the "input document" and "input nodeset." 
I've realized we should promintly highlight and define the difference between the input nodeset, and the root element of the whole tree that still exists in context. 
Also, I have a *little* bit of concern in that we're implicitly thinking in terms of DOM implementation and the relationship to the whole of the tree being preserved when we are handed a nodeset. 
(If this design is unavoidable/desired, perhaps we could make it more explicit?) What happens if I had a stream-like implementation of a profile of XPtr or XPath, or some weird conversion between an Infoset? 
XPath defines a node-set as, "node-set (an unordered collection of nodes without duplicates)" so there's nothing there that guarentees the preservation of relationships with other nodes, right? 
I don't disagree with the distinction, I'm just not confident we aren't relying upon some implicit statement somewhere that the result of one of our XPath transforms (or profiled XPtr) MUST preserve its relationships to nodes not in the node-set. 
Perhaps we need to define an "input nodeset" "document nodeset" and "evaluated nodeset" and state the relationships between the "evaluated nodeset" and "document nodeset" MUST be preserved. 
*are* natural expressions. 
Xpath drawn, 
