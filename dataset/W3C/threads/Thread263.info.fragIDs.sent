Hello, 
I'm using tidy as a HTML parser for my program. 
There are some cases that tidy will make mistakes on comment contains a lot of '-'(although this is not good according to HTML4.0 ). 
You could find the case in http://cn.yahoo.com/ 
I've made a fix for this problem. 
Best Regards Yudong Yang in lexer.c and function GetToken(Lexer *lexer, uint mode) 
case LEX_COMMENT: /* seen !-- so look for -- */ /* look for 1st - */ if (c != '-') if (comments  2 &amp;&amp; c == ' ') ReportWarning(lexer, null, null, BAD_COMMENT); comments = -1; continue; /* now look for 2nd - */ c = ReadChar(lexer- in); if (c == EndOfStream) ReportWarning(lexer, null, null, BAD_COMMENT); UngetChar(c, lexer- in); continue; AddCharToLexer(lexer, c); if (c != '-') comments = 0; continue; for(;;) // skip all ------ like strings c = ReadChar(lexer- in); if(c != '-') UngetChar(c, lexer- in); break; AddCharToLexer(lexer, c); // just add the - lexer- state = LEX_ENDCOMMENT; continue; case LEX_ENDCOMMENT: /* seen !-- .... -- */ int spc=0; for (;;) // first skip the possiable HTML 4.0 enabled white spaces map = MAP(c); if((map &amp; white) == 0) break; comments = 0; c = ReadChar(lexer- in); AddCharToLexer(lexer, c); spc ++; if (c == ' ') lexer- lexsize -= 3+spc; lexer- txtend = lexer- lexsize; lexer- lexbuf[lexer- lexsize] = '\0'; lexer- state = LEX_CONTENT; lexer- waswhite = no; return lexer- token = CommentToken(lexer); else { // not end of comment SGML comment syntax is truly daft!!! 
A comment declaration consists of ` !' followed by zero or more comments followed by ` '. 
Each comment starts with `--' and includes all text up to and including the next occurrence of `--'. 
In a comment declaration, white space is allowed after each comment, but not before the first comment. 
The entire comment declaration is ignored. 
/* set error position just before offending chararcter */ lexer- lines = lexer- in- curline; lexer- columns = lexer- in- curcol - 1; ReportWarning(lexer, null, null, BAD_COMMENT); /* treat the chars as part of the comment*/ lexer- state = LEX_COMMENT; /* comment */ UngetChar(c, lexer- in); lexer- lexsize--; lexer- lexbuf[lexer- lexsize] = '\0'; continue; 
Tidy wasn't recovering effectively after detecting malformed comments. 
SGML/XML says: good !---- bad !----- bad !------ bad !------- good !-------- weird isn't it! 
I will adjust the parser to trim trailing hyphens to the nearest legal number. 
Regards, -- Dave Raggett dsr@w3.org 
http://www.w3.org/People/Raggett World Wide Web Consortium (on assignment from HP Labs) 
I believe this would be insufficient for XML. 
XML's comment syntax is a subset of SGML/HTML's. 
Production 15 in XML 1.0 says: Comment ::= ' !--' ((Char - '-') | ('-' (Char - '-')))* '-- ' and the text says: For compatibility, the string "--" (double-hyphen) must not occur within comments. 
This means that the characters between the opening !-- and the closing -- cannot contain two consecutive hyphens. 
Also they cannot end in a hyphen (as per the BNF even though the text fails to mention it). 
So for XML (as opposed to SGML/HTML): !---- good (empty comment) !----- bad (trailing hyphen) !------ bad (consecutive hyphens, trailing hyphen) !------- bad (consecutive hyphens, trailing hyphen) !-------- bad (consecutive hyphens, trailing hyphen) !--- -- good !-- - - -- good 
For XML, Tidy could fix consecutive hyphens by examining the characters between the !-- and the -- and replacing the first, third, etc. hyphen 
with a space and also replacing any trailing hyphen with a space. 
This 
should preserve much of the visual effect intended by people who use consecutive hyphens as dividers. 
If you wanted to avoid a special case for XML, perhaps Tidy could make all comments conform to XML's stricter syntax. 
(The extra latitude allowed by SGML/HTML is small enough and obscure enough that I wonder if anyone would miss it.) Randy 
Sorry, poorly worded. 
Make that: 
For XML, Tidy could fix comments by examining the characters between the !-- and the -- . 
In runs of two or more consecutive hyphens, replace every 
other hyphen with a space. 
If the last character is a hyphen, replace it with a space. 
Randy 
We may be drifting far afield here, and I don't usually follow these esoteric points in emerging standards terribly closely, but I just want 
to know if I understand what this means. 
Does this mean the old trick of hiding Javascript in HTML comments is not going to work in XML-ized pages? 
Can you even have Javascript in XML-ized pages? 
I suddenly feel 
like I'm missing something crucial. 
I haven't seen this issue discussed before... / Todd_Lewis@unc.edu 
http://www.unc.edu/~utoddl / /(919) 962-5273 "Year 00 compliant for -98 years!" / 
How about replacing them with the character entities ndash or mdash instead? 
Good question! 
It sure looks like Javascript's -- operator is illegal in XML comments. 
I'm not sure what Tidy should do. 
Some options that come to mind (applicable only when the output is XML, of course): - Corrupt the script by changing hyphen+hyphen to hyphen+space. 
- Output illegal XML by leaving hyphen+hyphen as is. 
- Parse comments for script elements and move them out of the comment. 
Randy 
every 
Aha! Although character entities aren't recognized in comments, they should be recognized in script elements. 
So I think there is an additional option: - Parse comments for script elements and change hyphen+hyphen to &amp;#45;&amp;#45; (or maybe -&amp;#45;). 
(&amp;ndash; and &amp;mdash; wouldn't translate to quite the right character.) Randy 
