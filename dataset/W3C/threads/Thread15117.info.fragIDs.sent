Hello, Yesterday, I had a hard time explaining an issue about mapping technology-specific "rules" to success criteria. 
Here is an attempt to make it clearer. 
User agent support is one aspect of the problem. 
However, I am primarily concerned that the minimum level success criteria for checkpoint 1.3 make all HTML structural elements equally important. 
In other words, it seems that some HTML structural elements are more important to accessibility than others, but the minimum level success criteria put them all at the same importance. 
The minimum level success criteria for checkpoint 1.3 are: 1. any information that is conveyed through presentation formatting is also provided in either text or structure. 
2. the following can be derived programmatically (i.e. through AT compatible markup or data model) from the content without interpreting presentation. 
a. any hierarchical elements and relationships, such as headings, paragraphs and lists b. any non-hierarchical relationships between elements such as cross-references and linkages, associations between labels and controls, associations between cells and their headers, etc. c. any emphasis My interpretation of this puts all HTML structural elements at the same priority. 
Here are all of the structural elements (per [1] which was derived from the HTML 4.01 spec) A ABBR ACRONYM AREA BLOCKQUOTE BODY BUTTON CAPTION CITE CODE COL COLGROUP DD DFN DIR* (deprecated) DIV DL DT EM FIELDSET FORM H1-H6 HEAD HTML INPUT ISINDEX* (deprecated) KBD LABEL LEGEND LI MAP MENU* (deprecated) OL OPTGROUP OPTION P Q SAMP SELECT SPAN STRONG TABLE TBODY TD TEXTAREA TFOOT TH THEAD TR UL VAR These seem to fall into 2 categories: 1. those elements that genuinely provide structure, are commonly used, and make a much larger accessibility impact when they are used. 
e.g. H1-H6, UL, OL LI, TH, LABEL, etc. 2. those elements that are not commonly used or supported and do not provide a large accessibility benefit. 
e.g. CITE, VAR, KBD, etc. 
They don't provide a sizable benefit because if you don't know that something is a citation by the markup hopefully you can glean that from the context. 
Unlike headings which can be used as navigation markers as well as create the structure that the document is built on. 
Does this make more sense now? 
Can you see how a sub-priority scheme is almost forming from this? 
Or do you think they are all equally important? 
This might be an incorrect premise on my part (that some are less important to accessibility than others). 
I look forward to answering Jason's question from yesterday's call, "Is this an isolated instance or is it part of a more general problem?" 
I still need to find the notes from our talk last November, Jason. 
Best, --wendy p.s. Yesterday I mentioned an overlap between 1.3 and 3.1. 
This is a separate issue. 
[1] http://www.w3.org/TR/2000/NOTE-WCAG10-HTML-TECHS-20000920/#html-index wendy a chisholm world wide web consortium web accessibility initiative seattle, wa usa 
Uncharacteristically (for me, anyway) my response is to analyse the example. 
To generate proper contracted braille output, in English as well as (most?) other languages, it is necessary to distinguish between "literary" text, i.e., words and sentences, on the one side, and "computer notation", on the other. 
Computer notation involves a one-to-one representation of ASCII characters and is used to represent the kind of text for which CODE, SAMP and VAR elements in HTML were designed. 
Standard contracted braille can't be used in this context because it designed under the assumption that, for instance, most punctuation characters cannot occur within words; it provides no definition for various characters from the ASCII set; it doesn't fully take into account the possibility of mixtures of uppercase and lowercase letters occurring in a single word, etc. 
For this reason it is important to distinguish between ordinary text (with ordinary punctuation and capitalization patterns) and the kind of text that frequently arises in computer-related contexts. 
Thus CODE elements in HTML matter significantly for access purposes. 
The distinction between CODE, SAMP and VAR is not important, however, as long as any text likely to contain "irregular" sequences of letters, digits and/or symbols are distinguished from ordiary words and sentences. 
I don't think SITE is particularly important. 
Checkpoint 1.3 is reasonably clear as to the types of distinctions which matter, so perhaps one solution might be to fine-tune the list, while being careful not to constrain it to current technologies. 
I also have a broader suggestion which will be posted in a separate message. 
Here is an extract of a message which I sent to Wendy on this point before the issue was raised on the list. 
Here is a proposal to solve the problem you raised by e-mail yesterday (and on the teleconference today) regarding checkpoints 1.3, 3.1 and techniques. 
This may or may not apply in other scenarios, and expands on my suggestions during the teleconference. 
In the scenario that you stated, the question was as to the priority of using certain structural elements in HTML that may not be well supported by user agents. 
Under checkpoint 5.2, the content developer is required to specify a user agent baseline. 
If the baseline asserts that full support for HTML 4.01 (or XHTML 1.0), for example, is assumed, then your problem doesn't arise because the content is being designed with a level of technological support in mind that includes all of the structural elements defined in the HTML 4.01 or XHTML 1.0 specifications. 
The problem occurs when the "user agent baseline" does not assume support for the relevant structural elements. 
Currently, all that checkpoint 5.2 requires is that the content continue to be usable when features above the baseline are turned off or not supported. 
Checkpoints 1.3 and 3.1 would continue to demand that the proper structural elements be used, even if they are "above" the user-agent baseline; and this would not conflict with checkpoint 5.2 because HTML user agents are supposed to ignore any elements that they do not support, so the content would still be perfectly usable in the absence of support for the elements under discussion. 
One solution, which I don't like for reasons to be explained, is to add a qualification to checkpoints 1.3 and 3.1, or to the guidelines as a whole, which says, roughly: The content is not required to make use of features that are not supported in the user agent baseline. 
The problem here is that there are features of clear accessibility benefit which do not introduce problems under checkpoint 5.2, but may not be supported in the developer's user agent baseline. 
If the developer wasn't required to implement them, users of more recent (and upcoming) technologies wouldn't gain the benefit of the additional features, and lots of legacy content would be created that would be less accessible merely because the developer decided not to design for the latest (and upcoming) technologies but only for older user agents. 
The above proposal also has the consequence that when the user agent baseline is changed, the list of required features changes with it, so the entire content would need to be updated to bring it into conformance (well, that can't be helped, I suppose). 
To solve some of these problems , we could differentiate by level: Level 1: no requirement to make use of features not included in the user agent baseline Level 2: Required to use features above the user agent baseline that are defined in applicable technology specifications and are otherwise required by the guidelines, including checkpoint 1.3, provided that the content is still usable when they are turned off or not supported (i.e., checkpoint 5.2 remains satisfied). 
Level 1 would still encourage less accessible, legacy content, unfortunately. 
Of course, when the user agent baseline is changed, the content would then have to be re-evaluated to determine that features that weren't required under the older user agent baseline, but which are part of the new baseline, have been implemented where applicable, according to the success criteria in other parts of the guidelines. 
Level 2 would probably have to be defined more precisely but I think the above outline gives the basis of a proposed solution. 
The introduction of "user agent baselines" into the guidelines, and into our thinking, has consequences that need to be fully developed. 
