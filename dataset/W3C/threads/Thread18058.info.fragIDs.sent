[Again, I implicitly refer only to access for blind users in the text below, but we may generalize the issues later on to include other disabilities.] 
Thank you very much, Ian, your comments indeed do clarify some things to me, but at the same time begin to confuse me to the extent that I may start asking silly questions about what the main target audience is for these UA guidelines: whether it is those involved in developing accessibility layers (e.g. screen reader developers), or those involved in general applications that may need to adhere to some extra rules to match what screen reader technology can do, or both groups. 
To cite a few sections from the guidelines: 
User Agent Accessibility Guidelines 1.0 "User agents must satisfy natively all the applicable checkpoints for a chosen conformance level." 
where applicable is further defined as 
If a user agent offers a functionality, it must ensure that all users have access to that functionality or an equivalent alternative. 
and native support as 
A user agent supports a feature natively if it does not require another piece of software (e.g., plug-in or external program) for support. 
and you add 
To avoid the dependencies you describe below (e.g., works with one screen reader but not with another), we decided that conformance would not include tools used in combination. 
Consequently, according to these guidelines and your notes, web browsers like Microsoft Internet Explorer and Netscape are w.r.t. the current conformance requirements not accessible user agents for blind people, because these user agents are of no use to them without a combination with, for instance, a screen reader (an external program). 
The same similarly applies to my image sonification user agent. 
If so, that indeed avoids the complicating dependencies that I discussed, by excluding the vast majority of applications that are in practice accessible to blind people, but only in combination with a screen reader or equivalent third-party assistive technology. 
Yet the abstract of the guidelines begins with 
An accessible user agent allows users with disabilities to retrieve and view Web content or to enable access when used in conjunction with other software or hardware, called assistive technologies. 
where assistive technologies include screen readers. 
These guidelines discuss the accessibility of the user agent as well as how the user agent communicates with assistive technologies such as screen readers, screen magnifiers, braille displays, and voice input software. 
So now external programs like screen readers seem allowed, 
and thus MSIE, Netscape, and my sonification browser would appear accessible (give or take a few minor changes that may still be needed to really meet all of those new checkpoints). 
I'm lost here! 
I could force myself to consistently interpret things by assuming that the conformance definition suddenly adds the major burden of requiring full native support for screen reading functionality, but it seems rather strange that a tool that could quite well get a triple-A conformance rating for blind users *if* a combination with a third-party screen reader were allowed in the requirements, now drops to a zero-A conformance rating. 
There will then be many fully accessible user agents around that get a zero-A rating? 
Who will care for this rating then if its scope is this narrow? 
I'm sorry if I misinterpreted you, but when I get confused here, others may share that same fate. 
I would have hoped for a wide scope for the conformance requirements, although that would indeed imply that some sort of reference screen reader functionality must be defined to get around the complicating dependencies that I discussed in my previous posting. 
What I would have strongly hoped for is that a minimum set of functions is defined that the "reference screen reader" can be assumed to perform. 
All screen reader developers will then be motivated to provide at least this minimum functionality (and probably more to make them stand out from the crowd), such that they can brand their product as triple-A compliant with the guidelines, while on the other side many developers of (general) applications will be motivated to provide full access under this minimum set, e.g., by using only standard buttons, checkboxes and so on such that they can brand their product too as triple-A compliant with the guidelines. 
The blind user will then know that if he or she uses a triple-A screen reader together with any triple-A general application, that full accessibility is ensured. 
Moreover, the fact that only one screen reader installation is required (the one preferred by the blind user) helps to ensure a consistent "look-and-feel" across applications. 
For instance, the blind user will probably prefer having a single speech engine to access most applications. 
In addition, this is by far the most economical way of working, because few application developers will want to take the major effort/cost of including a screen reader to make their tool triple-A compliant, while screen reader developers lack the expertise to develop the best-in-class mathematics package, or browser, or whatever application you may think of. 
We need a well-defined interface in the middle to best combine the expertise of screen reader developers with the expertise of application developers. 
Until this definition has been worked out, it would seem best to drop (postpone) the conformance rating altogether? 
The UA guidelines will then indeed "just" be guidelines for the time being, but that will be a good and useful start already. 
In my personal opinion, a conformance rating is not ready for prime-time yet: it is currently either too narrow in scope to be useful or it shows too many interdependency pitfalls when it allows for tools used in combination. 
Best wishes, Peter Meijer The vOICe Internet Sonification Browser 
I think that we can fix this issue. 
(I've raised it myself on several occasions.) 
The key, I think, is that the user agent might not have to provide screen reading natively, but it does have to provide a standard interface to screen readers. 
If a browser exposes the content to third party assistive technology in a standard and documented way, then it could 
be compliant. 
If the information is not accessible, or must be "reverse engineered" to access, then the browser is not compliant. 
If we make our language focus on what a user agent must do in terms of having methods of export, then it doesn't have to have native screen reading, native expanded keyboard access, etc. 
So long as there are communication channels, it will be compliant. 
Denis Anson, MS, OTR Assistant Professor College Misericordia 301 Lake St. Dallas, PA 18612 Member since 1989: RESNA: An International Association of Assistive Techology Professionals Website: http://www.resna.org 
RESNA ANNUAL CONFERENCE -- "RESNA 2000" ORLANDO, FL, JUNE 28 -- July 2, 2000 Of peter.b.l.meijer@philips.com 
[Again, I implicitly refer only to access for blind users in the text below, but we may generalize the issues later on to include other disabilities.] 
Thank you very much, Ian, your comments indeed do clarify some things to me, but at the same time begin to confuse me to the extent that I may start asking silly questions about what the main target audience is for these UA guidelines: whether it is those involved in developing accessibility layers (e.g. screen reader developers), or those involved in general applications that may need to adhere to some extra rules to match what screen reader technology can do, or both groups. 
To cite a few sections from the guidelines: 
User Agent Accessibility Guidelines 1.0 "User agents must satisfy natively all the applicable checkpoints for a chosen conformance level." 
where applicable is further defined as 
If a user agent offers a functionality, it must ensure that all users have access to that functionality or an equivalent alternative. 
and native support as 
A user agent supports a feature natively if it does not require another piece of software (e.g., plug-in or external program) for support. 
and you add 
To avoid the dependencies you describe below (e.g., works with one screen reader but not with another), we decided that conformance would not include tools used in combination. 
Consequently, according to these guidelines and your notes, web browsers like Microsoft Internet Explorer and Netscape are w.r.t. the current conformance requirements not accessible user agents for blind people, because these user agents are of no use to them without a combination with, for instance, a screen reader (an external program). 
The same similarly applies to my image sonification user agent. 
If so, that indeed avoids the complicating dependencies that I discussed, by excluding the vast majority of applications that are in practice accessible to blind people, but only in combination with a screen reader or equivalent third-party assistive technology. 
Yet the abstract of the guidelines begins with 
where assistive technologies include screen readers. 
These guidelines discuss the accessibility of the user agent as well as how the user agent communicates with assistive technologies such as screen readers, screen magnifiers, braille displays, and voice input software. 
So now external programs like screen readers seem allowed, 
and thus MSIE, Netscape, and my sonification browser would appear accessible (give or take a few minor changes that may still be needed to really meet all of those new checkpoints). 
I'm lost here! 
I could force myself to consistently interpret things by assuming that the conformance definition suddenly adds the major burden of requiring full native support for screen reading functionality, but it seems rather strange that a tool that could quite well get a triple-A conformance rating for blind users *if* a combination with a third-party screen reader were allowed in the requirements, now drops to a zero-A conformance rating. 
There will then be many fully accessible user agents around that get a zero-A rating? 
Who will care for this rating then if its scope is this narrow? 
I'm sorry if I misinterpreted you, but when I get confused here, others may share that same fate. 
I would have hoped for a wide scope for the conformance requirements, although that would indeed imply that some sort of reference screen reader functionality must be defined to get around the complicating dependencies that I discussed in my previous posting. 
What I would have strongly hoped for is that a minimum set of functions is defined that the "reference screen reader" can be assumed to perform. 
All screen reader developers will then be motivated to provide at least this minimum functionality (and probably more to make them stand out from the crowd), such that they can brand their product as triple-A compliant with the guidelines, while on the other side many developers of (general) applications will be motivated to provide full access under this minimum set, e.g., by using only standard buttons, checkboxes and so on such that they can brand their product too as triple-A compliant with the guidelines. 
The blind user will then know that if he or she uses a triple-A screen reader together with any triple-A general application, that full accessibility is ensured. 
Moreover, the fact that only one screen reader installation is required (the one preferred by the blind user) helps to ensure a consistent "look-and-feel" across applications. 
For instance, the blind user will probably prefer having a single speech engine to access most applications. 
In addition, this is by far the most economical way of working, because few application developers will want to take the major effort/cost of including a screen reader to make their tool triple-A compliant, while screen reader developers lack the expertise to develop the best-in-class mathematics package, or browser, or whatever application you may think of. 
We need a well-defined interface in the middle to best combine the expertise of screen reader developers with the expertise of application developers. 
Until this definition has been worked out, it would seem best to drop (postpone) the conformance rating altogether? 
The UA guidelines will then indeed "just" be guidelines for the time being, but that will be a good and useful start already. 
In my personal opinion, a conformance rating is not ready for prime-time yet: it is currently either too narrow in scope to be useful or it shows too many interdependency pitfalls when it allows for tools used in combination. 
Best wishes, Peter Meijer The vOICe Internet Sonification Browser 
agreed. 
this is what I had understood to be the case. 
User Agent Accessibility Guidelines 1.0 "User agents must satisfy natively all the applicable checkpoints for a chosen conformance level." 
If a user agent offers a functionality, it must ensure that all users have access to that functionality or an equivalent alternative. 
A user agent supports a feature natively if it does not require another piece of software (e.g., plug-in or external program) for support. 
To avoid the dependencies you describe below (e.g., works with one screen reader but not with another), we decided that conformance would not include tools used in combination. 
These guidelines discuss the accessibility of the user agent as well as how the user agent communicates with assistive technologies such as screen readers, screen magnifiers, braille displays, and voice input software. 
Hands-On Technolog(eye)s Touching The Internet ftp://ftp.clark.net/pub/poehlman 
voice 301-949-7599 Dynamic Solutions Inc. Best of Service for your small business network needs 
Yes, I agree with you, Denis, and this is basically what I meant. 
I was thinking of the "off-screen model" as a possible interface level, such that the screen reader developer can tap these data structures (in practice they already do) while the application developer just needs to know which API calls, and/or visual controls added via a resource editor, end up passing their key parameters or events into the off-screen model. 
For the application developer, it is sufficient to know, for instance, whether range and position info for a progress bar ends up in the off-screen model of the GUI (and whether this part of the off-screen model will be supported by the envisioned "reference" screen reader specification, defining the minimum requirements for compliance). 
The application developer does not need to know how it is done or in what precise format the data is stored in the off-screen model: only the screen reader developer needs to know that in order to tap the off-screen model. 
Additional work will be needed to forge this into a solid and open standard, particularly if we want this as independent from any particular operating system as possible, while I think all of this 
should not delay the approval/release of the UA guidelines. 
I merely suggest to move the whole conformance/compliance issue to this proposed second phase that could follow approval/release of the UA guidelines. 
Best wishes, Peter Meijer The vOICe Internet Sonification Browser 
This is a very important point. 
Many products today are being written to run cross-platform. 
This may mean recompilation or Java. 
If an engineered, cross-platform, accessible solution is provided that is documented, and tested then we should not be the ones to prohibit their success. 
The key here is engineered, tested, and documented. 
An example of a technology like this will ultimately be the W3C DOM. 
The W3C WAI shoul create accessibility infrastucture to address these issues. 
Rich Rich Schwerdtfeger Lead Architect, IBM Special Needs Systems EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm "Two roads diverged in a wood, and I - I took the one less traveled by, and that has made all the difference.", 
Frost "Denis Anson" danson@miseri.edu on 12/01/99 01:10:50 PM Subject: RE: Some comments on conformance levels in UA guidelines draft 
I think that we can fix this issue. 
(I've raised it myself on several occasions.) 
The key, I think, is that the user agent might not have to provide screen reading natively, but it does have to provide a standard interface to screen readers. 
If a browser exposes the content to third party assistive technology in a standard and documented way, then it could 
be compliant. 
If the information is not accessible, or must be "reverse engineered" to access, then the browser is not compliant. 
If we make our language focus on what a user agent must do in terms of having methods of export, then it doesn't have to have native screen reading, native expanded keyboard access, etc. 
So long as there are communication channels, it will be compliant. 
Denis Anson, MS, OTR Assistant Professor College Misericordia 301 Lake St. Dallas, PA 18612 Member since 1989: RESNA: An International Association of Assistive Techology Professionals Website: http://www.resna.org 
RESNA ANNUAL CONFERENCE -- "RESNA 2000" ORLANDO, FL, JUNE 28 -- July 2, 2000 Of peter.b.l.meijer@philips.com 
[Again, I implicitly refer only to access for blind users in the text below, but we may generalize the issues later on to include other disabilities.] 
Thank you very much, Ian, your comments indeed do clarify some things to me, but at the same time begin to confuse me to the extent that I may start asking silly questions about what the main target audience is for these UA guidelines: whether it is those involved in developing accessibility layers (e.g. screen reader developers), or those involved in general applications that may need to adhere to some extra rules to match what screen reader technology can do, or both groups. 
To cite a few sections from the guidelines: 
User Agent Accessibility Guidelines 1.0 "User agents must satisfy natively all the applicable checkpoints for a chosen conformance level." 
where applicable is further defined as 
If a user agent offers a functionality, it must ensure that all users have access to that functionality or an equivalent alternative. 
and native support as 
A user agent supports a feature natively if it does not require another piece of software (e.g., plug-in or external program) for support. 
and you add 
To avoid the dependencies you describe below (e.g., works with one screen reader but not with another), we decided that conformance would not include tools used in combination. 
Consequently, according to these guidelines and your notes, web browsers like Microsoft Internet Explorer and Netscape are w.r.t. the current conformance requirements not accessible user agents for blind people, because these user agents are of no use to them without a combination with, for instance, a screen reader (an external program). 
The same similarly applies to my image sonification user agent. 
If so, that indeed avoids the complicating dependencies that I discussed, by excluding the vast majority of applications that are in practice accessible to blind people, but only in combination with a screen reader or equivalent third-party assistive technology. 
Yet the abstract of the guidelines begins with 
where assistive technologies include screen readers. 
These guidelines discuss the accessibility of the user agent as well as how the user agent communicates with assistive technologies such as screen readers, screen magnifiers, braille displays, and voice input software. 
So now external programs like screen readers seem allowed, 
and thus MSIE, Netscape, and my sonification browser would appear accessible (give or take a few minor changes that may still be needed to really meet all of those new checkpoints). 
I'm lost here! 
I could force myself to consistently interpret things by assuming that the conformance definition suddenly adds the major burden of requiring full native support for screen reading functionality, but it seems rather strange that a tool that could quite well get a triple-A conformance rating for blind users *if* a combination with a third-party screen reader were allowed in the requirements, now drops to a zero-A conformance rating. 
There will then be many fully accessible user agents around that get a zero-A rating? 
Who will care for this rating then if its scope is this narrow? 
I'm sorry if I misinterpreted you, but when I get confused here, others may share that same fate. 
I would have hoped for a wide scope for the conformance requirements, although that would indeed imply that some sort of reference screen reader functionality must be defined to get around the complicating dependencies that I discussed in my previous posting. 
What I would have strongly hoped for is that a minimum set of functions is defined that the "reference screen reader" can be assumed to perform. 
All screen reader developers will then be motivated to provide at least this minimum functionality (and probably more to make them stand out from the crowd), such that they can brand their product as triple-A compliant with the guidelines, while on the other side many developers of (general) applications will be motivated to provide full access under this minimum set, e.g., by using only standard buttons, checkboxes and so on such that they can brand their product too as triple-A compliant with the guidelines. 
The blind user will then know that if he or she uses a triple-A screen reader together with any triple-A general application, that full accessibility is ensured. 
Moreover, the fact that only one screen reader installation is required (the one preferred by the blind user) helps to ensure a consistent "look-and-feel" across applications. 
For instance, the blind user will probably prefer having a single speech engine to access most applications. 
In addition, this is by far the most economical way of working, because few application developers will want to take the major effort/cost of including a screen reader to make their tool triple-A compliant, while screen reader developers lack the expertise to develop the best-in-class mathematics package, or browser, or whatever application you may think of. 
We need a well-defined interface in the middle to best combine the expertise of screen reader developers with the expertise of application developers. 
Until this definition has been worked out, it would seem best to drop (postpone) the conformance rating altogether? 
The UA guidelines will then indeed "just" be guidelines for the time being, but that will be a good and useful start already. 
In my personal opinion, a conformance rating is not ready for prime-time yet: it is currently either too narrow in scope to be useful or it shows too many interdependency pitfalls when it allows for tools used in combination. 
Best wishes, Peter Meijer The vOICe Internet Sonification Browser 
Whose OSM? 
OSM's are screen reader vendor specific and are not resident on any platform other than OS/2 and Windows. 
Rich Rich Schwerdtfeger Lead Architect, IBM Special Needs Systems EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm "Two roads diverged in a wood, and I - I took the one less traveled by, and that has made all the difference.", 
Frost peter.b.l.meijer@philips.com on 12/01/99 02:19:13 PM Subject: RE: Some comments on conformance levels in UA guidelines draft 
could 
Yes, I agree with you, Denis, and this is basically what I meant. 
I was thinking of the "off-screen model" as a possible interface level, such that the screen reader developer can tap these data structures (in practice they already do) while the application developer just needs to know which API calls, and/or visual controls added via a resource editor, end up passing their key parameters or events into the off-screen model. 
For the application developer, it is sufficient to know, for instance, whether range and position info for a progress bar ends up in the off-screen model of the GUI (and whether this part of the off-screen model will be supported by the envisioned "reference" screen reader specification, defining the minimum requirements for compliance). 
The application developer does not need to know how it is done or in what precise format the data is stored in the off-screen model: only the screen reader developer needs to know that in order to tap the off-screen model. 
Additional work will be needed to forge this into a solid and open standard, particularly if we want this as independent from any particular operating system as possible, while I think all of this 
should not delay the approval/release of the UA guidelines. 
I merely suggest to move the whole conformance/compliance issue to this proposed second phase that could follow approval/release of the UA guidelines. 
Best wishes, Peter Meijer The vOICe Internet Sonification Browser 
This is in part why I had written 
All operating systems with a GUI have an off-screen model of some sort: there is no way to manage a GUI without it. 
The model may just not be available for third-party developers of assistive technology to allow for creating a wedge that implements alternative accessible I/O - as needed for screen readers, for instance. 
The implementation of, and set of hooks into, off-screen models is indeed operating system specific, but the basic visual object structure of a GUI is extremely similar across many platforms (Microsoft Windows, X-Windows on UNIX systems, Mac OS, OS/2, Java OS and so on): you nearly always find menus, icons, window borders (often with maximize, minimize and close gadgets and a title bar), buttons, edit boxes, scroll bars and so forth, soon covering the majority of controls needed to use an application effectively. 
To make my point as a sighted person: I have never used OS/2, but I'm confident that I can use it within five minutes for basic work. 
Now let's consider basic menus for some further illustration. 
It really is not so hard to specify that an off-screen model should contain a copy of the menu hierarchy of the "standard" menus of all active application instances, plus the textual content of menu items, in a way that third-party assistive technology can access that information. 
The "reference" screen reader for any operating system will for accessibility compliance be required to present all of this information in an accessible form, allowing a blind user to navigate, for any application, its menu hierarchy and select and activate one particular menu item, while the application in turn will be required to create its own menus as "standard" menus for accessibility compliance. 
(Before sprinkling known exceptions over me: I do not claim to be exhaustive or exact here, I'm merely trying to convey the basic ideas, which may be hard enough.) 
I think it should not be too difficult to spell out what "standard" means for each of the dozen or so operating systems that we may wish to consider, but yes, it does involve additional work. 
The main issue really is to specify *that* all "standard" menus must be made accessible by a screen reader in order to meet the UA conformance requirements. 
(Thus not just the menus of the screen reader itself!) Then the general application developer will know beforehand that simply using "standard" menus is OK and meets the conformance requirements, so that the use of this application in combination with any screen reader that meets the conformance requirements will *guarantee* accessibility (of menus in this oversimplified example). 
Right now the conformance requirements in the UA guidelines do not seem to fully and clearly address the accessibility of a combination of screen reader with generic application, while that seems the only economic way for making many of the best applications accessible to blind people. 
It would be rather worrisome if the UA guidelines would implicitly favour "self-contained" accessibility packages by specifying compliance ratings that cannot be properly applied to combinations of screen readers with generic applications (such as mainstream browsers used by the sighted), while the current trend seems to be rather that blind people increasingly prefer using just that. 
This is, again, why I think a compliance rating based on the current UA guidelines is not in order. 
Unintentionally, it could appear biased and selective w.r.t. accessibility practices and efforts, by providing a compliance rating only for products that include accessibility provisions "natively". 
The UA guidelines are at their current stage excellent as an informal checklist, which is highly useful and a major achievement, but I suggest that the UA guidelines are not ready for labelling products through a compliance rating. 
Best wishes, Peter Meijer The vOICe Internet Sonification Browser 
Peter, Thank you for comments about this topic. 
Conformance has been one of the most difficult topics this Working Group has had to address. 
For a summary of some of the approaches we've taken and some background that has led to the current scheme, please refer to [1]. 
The Working Group has chosen not to include a conformance provision in this version of the UA Guidelines that addresses software used in combination. 
Some of the limitations of such an approach include: 1) Combinatorial nightmare. 
Your emphasis is on screen readers, but we would have to address functional requirements of other software combinations than desktop browsers used with screen readers. 
2) Conformance dependencies. 
Vendors should be able to claim conformance alone, and not rely on the existence of other software for their claims. 
I agree that a list of guidelines for screenreaders would be very useful, and some information about functionalities that should be offered by assistive technologies appears in our Techniques Document [2]. 
[1] http://lists.w3.org/Archives/Public/w3c-wai-ua/1999JulSep/0433.html [2] http://www.w3.org/WAI/UA/WD-WAI-USERAGENT-TECHS-19991121/#dependent 
The following are just some of the checkpoints in the last call draft [3] that refer to standard interfaces and communication of information through these interfaces: 1.1, 1.5, all of Guideline 5, 9.1. 
[3] http://www.w3.org/TR/1999/WD-WAI-USERAGENT-19991105 
This will be addressed by the Working Group as issue 153. 
Thank you, - Ian Ian Jacobs (jacobs@w3.org) http://www.w3.org/People/Jacobs Cell: +1 917 450-8783 
Thank you very much, Ian. 
I will await the outcome of further discussions on this intricate but extremely important topic. 
Your comments were much appreciated. 
On second thought, maybe I still need to clarify some of my earlier remarks in relation to your most recent reply and in particular the motivations of the Working Group choice 
My examples were indeed mostly for screen readers and (mainstream) 
browsers, but I believe that the standardization of the proposed intermediate user interface layer readily extends and applies to almost any software application as well as many accessibility 
technologies other than screen readers. 
Moreoever, the sole purpose 
of my proposed intermediate layer was exactly to *prevent* the dreaded combinatorial explosion. 
The simple example of menus can be carried over to many alternative representations to suit any particular disability, and it does not and should not affect the definition *that* for instance the use of "standard" menu items conforms to UA guidelines. 
The guidelines do not need to consider whether or how the menu items are made visible on the screen, rendered to speech, to Braille, or to any other specific sensory representation that may best fit particular disabilities. 
Maybe it helps if I illustrate the concepts with a further, already existing, example of vendor-independent "software combinations" under the next point. 
(Unfortunately, the example is not operating system independent, so it leaves something to be desired...) 
Exactly, but my whole point of focus was to allow for this without a "combinatorial nightmare" through standardization of an intermediate layer, or protocol, or set of guidelines, for using arbitrary (general) non-accessibility applications in combination with, or on top of, any accessibility "wedge", which could be a screen reader or (any) other accessibility technology. 
Perhaps a useful non-accessibility analogy of how this can be done is given by a video technology standard that my user agent supports: Video for Windows. 
This is a Microsoft-specific API that allows for a very clear split between development of video *applications* and the underlying video capture hardware and *driver* software. 
It is an API, meaning that it is more strict than a set of guidelines, but that does not really matter too much for the current discussion. 
I can without problems "claim" conformance to "Video for Windows" *without* relying on the existence of software from other parties such as PC camera vendors: I just conform to the intermediate layer, and that is enough. 
Similarly, the PC camera vendor, or capture card vendor, or TV card vendor, can all rightfully "claim" conformance to "Video for Windows" as well, without relying on the existence of (application) software from other parties such as my video sonification software. 
Through the existence of a standard for the intermediate layer, there is no "combinatorial nightmare": every Video for Windows compliant application will run fine in combination with every Video for Windows compliant video capture device (driver). 
For instance, my video sonification application has been shown to work fine with PC cameras, video capture cards and TV cards of many different vendors, while I did not have to consider any specific vendor: there is no "combinatorial nightmare" at all! 
Vice versa, I think that no PC camera vendor thought of trying to make video (more) accessible to blind people. 
Nor did they have to, since the intermediate Video for Windows standard is all that is needed: it allowed me to create my own "I/O wedge" that remaps video to alternative non-visual sensory representations, the "soundscapes". 
The screen reader is in my view very much like a device driver, and as an application developer one wants and needs to abstract from any underlying "accessibility wedge" that redefines I/O for accessibility purposes. 
If that means conforming to some rules or guidelines for using "standard" user interface elements, that is OK, because it minimizes effort and cost on all sides: the screen reader developer no longer has to worry about how to add a great browser or mathematics package or whatever application, while the application developer no longer needs to worry about what underlying accessibility software the client will need or use, let alone that the application developer would have to integrate all that with his/her application (to meet the current conformance requirements). 
By the way, I do understand that/if in the current UA guidelines it may not be possible or feasible to include conformance requirements for "software used in combination", because it requires some extra work that may be more appropriately covered by a follow-up activity, and I am glad that at least the issue of, and my worries about, the currently limited "conformance" is now registered under "issue 153". 
However, I hope to have clarified that both the "combinatorial nightmare" and the "conformance dependencies" can be prevented through the proposed definition of guidelines that define basically *what* user interface elements, where applicable, can be and must be made accessible through the disability-specific low-level I/O wedge offered by accessibility software, of which screen readers form just an example. 
Best wishes, Peter Meijer 
Seeing with Sound - The vOICe Video Sonification software 
as I see this, it boils down to three components. 
1 the ua. 2 the os. 3 the assistive technology that interfaces with the computer/device. 
Further, there are myriad combinatorials of this for instance, there is a ua with built in a t or more than one. 
there are possibly ats which ride on top of a specific ua. 
There are integrations of all three components into specialized systems. 
Our focus is on the ua which in many respects generalizes to the os. 
This leads us according to our charter, purpose and scope to draw some lines which can be extended as you suggest. 
I don't have specific sitings to hand, however, the extendability can be done through w3c standards and os support. 
Many of these are still in development and as we have many ua types to deal with the best we can do for the moment is in part what we have done in refering to extention through os standards and w3c standards. 
It is our hope I believe that this layer will come about through this approach in that the os and the w3c standards will develop towards your stated level where an a t will only need to hook into what is going on with the os and that the ua will provide additional ui through the w3c standard protocols. 
As to the conformance issue, there may be something in the compliance requirements that exempts special uas from compliance and allows what might be a conditional rating meaning that it quallifies in a certain class, but I doubt we'll tackle this before we finish the guideline process its self. 
This conformance rating would be based upon documentation which has yet to be finalized if it is done at all. 
I think a better approach for our current purpose is to strongly emphasize that our conformance is aimed squarely at the general class of browsers to provide accessible rendering and ui capabilities to the extent possible as this field evolves and that there should be other more general a t software development documents that would come from a process similar to this one but perhaps out of an operating systems guidelines group from the at community. 
There is an parellell to the w3 in the software/computer field which this could possibly be extended through. 
There are sisters to this working group as you know within the wai which have and will be putting forth guideline documents which address some of these issues. 
I really want to send a strong wake up call to ua developpers some of which are working with us so they don't need it that there Is a large population which is or can be excluded by practices that do not take certain things into account which these guidelines address well I hope. 
Much of this awareness raising has been done by the release of the web content accessability guidelines and I am encouraged by this success so far. 
Hands-On Technolog(eye)s Touching The Spider Web ftp://ftp.clark.net/pub/poehlman 
voice 301-949-7599 end sig. 
see comment at MN next: MN: Hi Peter: Don't want to get into this too deep, but I think the UA working group shares many of your concerns. 
It truely is a difficult area to "draw a line" in. 
However, I know you realize that there is a lot of "distance" between a "guideline" and a "platform specific API". 
On an encouraging note, there are APIs which are continuing to evolve for accessibility on multiple platforms, and I think we can safely say that the origins of those APIs were in part do to, someone(s) first developing guidelines. 
Hopefully, as the UA guidelines evolve, they will continue to feed and support that process across platforms. 
Also, hopefully, those accessibility related APIs will just become part of the standard platform APIs smile 
Hi Peter, First off I would like to state that I wrote the OSM for Screen Reader/2 so I understand what you are saying. 
However, what I am also saying is that there many screen readers with differenct OSM architectures. 
Furthermore, these OSM's become more convoluted as new technology, like the DOM, is made available to reduce the dependency on GUI drawing to OSM reverse engineered architectures. 
Even more important is the fact that these screen reader vendors feel that the way their specific OSM design is a key differentiator from competitors. 
Some of these like Screen Reader/2 contained things like menu hierarchies. 
Tying engineered hooks back into these a non-standard OSM architecture is a tall order and not one that should be required of user agent developers. 
Also, there are platforms like UNIX where there are no screen reader products that make use of an OSM. 
Rich Rich Schwerdtfeger Lead Architect, IBM Special Needs Systems EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm "Two roads diverged in a wood, and I - I took the one less traveled by, and that has made all the difference.", 
Frost peter.b.l.meijer@philips.com on 12/02/99 04:20:16 PM Subject: Re: Some comments on conformance levels in UA guidelines draft 
This is in part why I had written 
All operating systems with a GUI have an off-screen model of some sort: there is no way to manage a GUI without it. 
The model may just not be available for third-party developers of assistive technology to allow for creating a wedge that implements alternative accessible I/O - as needed for screen readers, for instance. 
The implementation of, and set of hooks into, off-screen models is indeed operating system specific, but the basic visual object structure of a GUI is extremely similar across many platforms (Microsoft Windows, X-Windows on UNIX systems, Mac OS, OS/2, Java OS and so on): you nearly always find menus, icons, window borders (often with maximize, minimize and close gadgets and a title bar), buttons, edit boxes, scroll bars and so forth, soon covering the majority of controls needed to use an application effectively. 
To make my point as a sighted person: I have never used OS/2, but I'm confident that I can use it within five minutes for basic work. 
Now let's consider basic menus for some further illustration. 
It really is not so hard to specify that an off-screen model should contain a copy of the menu hierarchy of the "standard" menus of all active application instances, plus the textual content of menu items, in a way that third-party assistive technology can access that information. 
The "reference" screen reader for any operating system will for accessibility compliance be required to present all of this information in an accessible form, allowing a blind user to navigate, for any application, its menu hierarchy and select and activate one particular menu item, while the application in turn will be required to create its own menus as "standard" menus for accessibility compliance. 
(Before sprinkling known exceptions over me: I do not claim to be exhaustive or exact here, I'm merely trying to convey the basic ideas, which may be hard enough.) 
I think it should not be too difficult to spell out what "standard" means for each of the dozen or so operating systems that we may wish to consider, but yes, it does involve additional work. 
The main issue really is to specify *that* all "standard" menus must be made accessible by a screen reader in order to meet the UA conformance requirements. 
(Thus not just the menus of the screen reader itself!) Then the general application developer will know beforehand that simply using "standard" menus is OK and meets the conformance requirements, so that the use of this application in combination with any screen reader that meets the conformance requirements will *guarantee* accessibility (of menus in this oversimplified example). 
Right now the conformance requirements in the UA guidelines do not seem to fully and clearly address the accessibility of a combination of screen reader with generic application, while that seems the only economic way for making many of the best applications accessible to blind people. 
It would be rather worrisome if the UA guidelines would implicitly favour "self-contained" accessibility packages by specifying compliance ratings that cannot be properly applied to combinations of screen readers with generic applications (such as mainstream browsers used by the sighted), while the current trend seems to be rather that blind people increasingly prefer using just that. 
This is, again, why I think a compliance rating based on the current UA guidelines is not in order. 
Unintentionally, it could appear biased and selective w.r.t. accessibility practices and efforts, by providing a compliance rating only for products that include accessibility provisions "natively". 
The UA guidelines are at their current stage excellent as an informal checklist, which is highly useful and a major achievement, but I suggest that the UA guidelines are not ready for labelling products through a compliance rating. 
Best wishes, Peter Meijer The vOICe Internet Sonification Browser 
Hi Peter, I am resending this because I sent it before I was done editing it. 
First off I would like to state that I wrote the OSM for Screen Reader/2 so I understand what you are saying. 
However, what I am also saying is that there are many screen readers with different OSM architectures. 
Furthermore, these OSM's become more convoluted as new technology, like the DOM, are made available to reduce the dependency on GUI drawing to OSM reverse engineered architectures. 
Even more important is the fact that these screen reader vendors feel that the way their specific OSM is designed is a key differentiator from competitors. 
Some of these like Screen Reader/2 contained things like menu hierarchies. 
Tying engineered hooks back into these non-standard OSM architecture is a tall order and not one that should be required of user agent developers. 
Also, there are platforms like UNIX where there are no screen reader products that make use of an OSM. 
I agree that standardization for what you ask would be nice, however I would prefer to see the W3C WAI group continue to construct heterogeneous accessibility architectures that are not platform dependendent for accessibility. 
These constructs require considerably less reverse-engineering. 
The DOM is one example of that type of technology. 
Rich Rich Schwerdtfeger Lead Architect, IBM Special Needs Systems EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm "Two roads diverged in a wood, and I - I took the one less traveled by, and that has made all the difference.", 
Frost peter.b.l.meijer@philips.com on 12/02/99 04:20:16 PM Subject: Re: Some comments on conformance levels in UA guidelines draft 
This is in part why I had written 
All operating systems with a GUI have an off-screen model of some sort: there is no way to manage a GUI without it. 
The model may just not be available for third-party developers of assistive technology to allow for creating a wedge that implements alternative accessible I/O - as needed for screen readers, for instance. 
The implementation of, and set of hooks into, off-screen models is indeed operating system specific, but the basic visual object structure of a GUI is extremely similar across many platforms (Microsoft Windows, X-Windows on UNIX systems, Mac OS, OS/2, Java OS and so on): you nearly always find menus, icons, window borders (often with maximize, minimize and close gadgets and a title bar), buttons, edit boxes, scroll bars and so forth, soon covering the majority of controls needed to use an application effectively. 
To make my point as a sighted person: I have never used OS/2, but I'm confident that I can use it within five minutes for basic work. 
Now let's consider basic menus for some further illustration. 
It really is not so hard to specify that an off-screen model should contain a copy of the menu hierarchy of the "standard" menus of all active application instances, plus the textual content of menu items, in a way that third-party assistive technology can access that information. 
The "reference" screen reader for any operating system will for accessibility compliance be required to present all of this information in an accessible form, allowing a blind user to navigate, for any application, its menu hierarchy and select and activate one particular menu item, while the application in turn will be required to create its own menus as "standard" menus for accessibility compliance. 
(Before sprinkling known exceptions over me: I do not claim to be exhaustive or exact here, I'm merely trying to convey the basic ideas, which may be hard enough.) 
I think it should not be too difficult to spell out what "standard" means for each of the dozen or so operating systems that we may wish to consider, but yes, it does involve additional work. 
The main issue really is to specify *that* all "standard" menus must be made accessible by a screen reader in order to meet the UA conformance requirements. 
(Thus not just the menus of the screen reader itself!) Then the general application developer will know beforehand that simply using "standard" menus is OK and meets the conformance requirements, so that the use of this application in combination with any screen reader that meets the conformance requirements will *guarantee* accessibility (of menus in this oversimplified example). 
Right now the conformance requirements in the UA guidelines do not seem to fully and clearly address the accessibility of a combination of screen reader with generic application, while that seems the only economic way for making many of the best applications accessible to blind people. 
It would be rather worrisome if the UA guidelines would implicitly favour "self-contained" accessibility packages by specifying compliance ratings that cannot be properly applied to combinations of screen readers with generic applications (such as mainstream browsers used by the sighted), while the current trend seems to be rather that blind people increasingly prefer using just that. 
This is, again, why I think a compliance rating based on the current UA guidelines is not in order. 
Unintentionally, it could appear biased and selective w.r.t. accessibility practices and efforts, by providing a compliance rating only for products that include accessibility provisions "natively". 
The UA guidelines are at their current stage excellent as an informal checklist, which is highly useful and a major achievement, but I suggest that the UA guidelines are not ready for labelling products through a compliance rating. 
Best wishes, Peter Meijer The vOICe Internet Sonification Browser 
Hi Rich, I agree with you. 
It may just have been that my use of some terminology unintendedly deviated from custom usage or your usage. 
My use of the term "off-screen model" was meant to refer only an (apparently idealized) situation where there is a single ("reference") off-screen model or architecture per operating system, such that the hypothetical minimum- functionality "reference" screen reader could use a subset of that OSM to implement its functions. 
When this OSM is available (e.g., provided by the operating system vendor), there would be no necessity to "reverse engineer" an OSM architecture in order to implement the basic screen reading functions. 
With reverse engineered OSM's for each user agent, one would indeed expect many more compatibility problems. 
Even with that single reference OSM, the user agent or screen reader developer could of course still decide to add "reverse engineering" from displayed screen content to add more-than-basic functionality (for instance to do "something useful" with textures as rendered by advanced 3D graphics cards), but that would then be their problem or opportunity to stand out from the crowd of UA's that already conform at least to the basic "reference" screen reader functionality for basic accessibility. 
Thus, I personally strongly support you where you say 
I wished there were also a platform independent video capture architecture and technology. 
I once hoped that Java would soon be offering something like that, but at the time I could no longer afford to wait for that to happen, if at all, and therefore I opted for a platform dependent solution - for the time being. 
Best wishes, Peter Meijer Real-Time Closed Captioning for the Blind - The vOICe 
