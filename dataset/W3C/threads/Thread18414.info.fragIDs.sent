I disagree withthe proposed resolution of issue 535. 
This is not really really simple, but I don't think it is really really complex either... 
A page may not be placed in the cache for a number of reasons. 
In the real world there are pages that actually change, so are not listed as cacheable and pages that do not change, but are served as nucacheable for no better reason than the site developer didn't bother changing the server default setting. 
Browsers often cache pages anyway, for things like offline browsing, and may decide not to cache a page according to more or less any criteria at all. 
So if a browser keeps a history, it should be able to get the page and be where one was when one left, if the page has not changed - as determined by the HTTP headers, or by the browser doing a diff against its cache for any developer who is really not very trusting and likes that much work. 
If the page has changed, then it may not make much sense to keep the required information, since the user may need to know what has changed. 
(there is an implementation issue of how much history and how much point of regard information should be kept - if there are 1000 pages in the history, which is what I like to keep, does it need to cover all of them, or is it OK to only keep it for the last 100?) 
cheers Chaals the Issues list includes the following: Issue 535 (Second Candidate Recommendation): 9.4 (restore history): Must consider UA cache availability Name: Tantek Celik Source URL: Date: Wed Apr 10 10:45:11 2002 Category of issue: Orientation Type of issue: Checkpoints Resolution summary: Not resolved Resolution URL: Not resolved First working draft: No reference Comments: The checkpoint reads: "For user agents that implement a viewport history mechanism, for each state in a viewport's browsing history, maintain information about the point of regard, content focus, and selection." 
However, even when a user agent implements a history mechanism, it may not keep all pages in its cache. 
Proposal: Do not require the user agent to restore state variables for pages removed from the history cache. 
Location: 21 Mitchell street FOOTSCRAY Vic 3011, Australia (or W3C INRIA, Route des Lucioles, BP 93, 06902 Sophia Antipolis Cedex, France) 
Hi Charles, Thanks for being ahead of the curve on this one. 
grin 
What about if the user configures the user agent to not cache more than, say 1M of data? 
If the user has visited a page recently, but the page has been removed from the cache due to the user's memory preferences, are you suggesting that the user agent track state information that is is no longer caching? 
Even if the answer to that question is "yes", that can't be done infinitely either. 
So at some point, the user may have recently visited a page and the user agent may not have state information stored anymore. 
It is for this case that the notes (not really a formal proposal yet) suggest that the UA is not required to restore state. 
Note that this checkpoint does not require a history mechanism. 
It starts: "For user agents that implement a viewport history mechanism..." [One developer referred to a required history mechanism as a "history tax."] 
This checkpoint requires UAs to store state information, but it does not require user agents to store an infinite amount of state information. 
I don't think that we should tell user agent developers how to implement cache mechanisms, or how much to cache (though user-configurable seems like a good idea). 
In this light, it makes sense to me to say "When info is no longer in the cache (that is implemented by definition for a history mechanism, but UAAG 1.0 does not require a minimal size), state information need not be saved." - Ian Ian Jacobs (ij@w3.org) 
http://www.w3.org/People/Jacobs 
There is no necessity for a user agent to implement a cache in order to implement a history mechanism. 
In practical terms I suspect that requiring state information for cached content might be appropriate. 
Why I suspect, instead of agree: For systems that do not implement a cache (or have it as part of a chained/proxy based system, like WAP-style browsers, or "network computers"), it might be difficult to identify this. 
So I think there are cases where a history mechanism should "pay this tax" even though it doesn't have the cache. 
Does this help lead to a resolution? 
Chaals What about if the user configures the user agent to not cache more than, say 1M of data? 
If the user has visited a page recently, but the page has been removed from the cache due to the user's memory preferences, are you suggesting that the user agent track state information that is is no longer caching? 
Even if the answer to that question is "yes", that can't be done infinitely either. 
So at some point, the user may have recently visited a page and the user agent may not have state information stored anymore. 
It is for this case that the notes (not really a formal proposal yet) suggest that the UA is not required to restore state. 
Note that this checkpoint does not require a history mechanism. 
It starts: "For user agents that implement a viewport history mechanism..." [One developer referred to a required history mechanism as a "history tax."] 
This checkpoint requires UAs to store state information, but it does not require user agents to store an infinite amount of state information. 
I don't think that we should tell user agent developers how to implement cache mechanisms, or how much to cache (though user-configurable seems like a good idea). 
In this light, it makes sense to me to say "When info is no longer in the cache (that is implemented by definition for a history mechanism, but UAAG 1.0 does not require a minimal size), state information need not be saved." - Ian Location: 21 Mitchell street FOOTSCRAY Vic 3011, Australia (or W3C INRIA, Route des Lucioles, BP 93, 06902 Sophia Antipolis Cedex, France) 
I am beginning to understand your point: local cache is one thing, history is another. 
A user agent could have an empty local cache (in terms of page content) but save enough information to know that the results of a GET will return content that has not changed since previous state information established. 
Therefore, the UA could restore the old state information even though the local cache had been emptied. 
Some of this is discussed in section 13 of the HTTP/1.1 spec [1]. 
For instance: "13.3.1 Last-Modified Dates The Last-Modified entity-header field value is often used as a cache validator. 
In simple terms, a cache entry is considered to be valid if the entity has not been modified since the Last-Modified value." 
[1] http://www.ietf.org/rfc/rfc2616.txt 
So the UA could save (server) dates along with state information and compare to the last modified date of a GET response. 
If the last modified date was earlier, the state information is presumably still valid. 
There are undoubtedly additional HTTP/1.1 mechanisms (like etags, expiry header, max-age) but I am no HTTP or cache expert. 
Perhaps this is a reasonable expression of what Charles would like: "These state variables must be restored whenever the content has not changed since the most recent setting of the state variables." 
It is implied (as usual) that the user agent must be able to recognize that the content has not changed (by available HTTP mechanisms or other mechanisms for other protocols). 
I've written the above sentence in the passive voice to allow for the case where selection/focus/point of regard is set by program, not the user. 
So, in light of Tantek's request for clarification, do we set the stronger expectation for restoring state variables? 
While somewhat hesitant, I support the addition of the above sentence. 
The checkpoint does not require implementation of a history mechanism. 
The implementation burden of storing information that allows the UA to know whether content has changed since the last GET seems quite small. 
Comments from developers? 
By the way, I'd like to change the title of this checkpoint from "Restore history" to "Restore viewport state history" Thanks, _ Ian Ian Jacobs (ij@w3.org) 
http://www.w3.org/People/Jacobs 
Yes, this is a reasonable expression of it. 
(I too am interested in comments - I don't have any improvements I can suggest, but think we would need to tighten this up toclarify how much gets stored) chaals [snip] Perhaps this is a reasonable expression of what Charles would like: "These state variables must be restored whenever the content has not changed since the most recent setting of the state variables." 
So, in light of Tantek's request for clarification, do we set the stronger expectation for restoring state variables? 
[snip] Comments from developers? 
By the way, I'd like to change the title of this checkpoint from "Restore history" to "Restore viewport state history" 
