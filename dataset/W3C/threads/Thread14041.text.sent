You don't need to use images in a MAP - it also allows block content (for example a paragraph, containing a number of links - the standard format for a text navbar. 
Using a MAP and a DIV are effectively the same for authoring, except there is no need to class a MAP, since it is expected to be a set of links, and you can also use a single map by reference as an imagemap (somewhat analagous to the way you can use a single stylesheet). 
Charles McCN Option 2: MAP element PROs: Currently used for image based navigational bars CONs: 1. 
More complex than DIV to author 2. What if authors did not want to use images in their navigation bars These are three options I am aware of for markup related to navigation bars or in general grouping of links. 
Please respond with your own ideas or comments. 
FOllowing the options is a list of some of the archived e-mail discussion on the issue. 
Option 1: Using the DIV element and some type of CLASS or NAME identifier: PROs: Easy to implement and author CONs: There is no mechanism to reserve class names in HTML, there could be conflicts if specific class names are used Option 2: MAP element PROs: Currently used for image based navigational bars CONs: 1. 
More complex than DIV to author 2. What if authors did not want to use images in their navigation bars Option 3: Schema Schemas are a potential way to indicate the purpose of content or structure PROs: Proclaimed as the right tool for the job CONs: 1. New technology and being developed 2. Not currently supported by UAs, 3. Not clear how easy to author 4. Not clear how easy for AT to decode and use A few references to the discussion of navigation bars navigation bars Jon Gunderson 11 Nov 1998 Re: navigation bars Charles McCathieNevile Re: navigation bars Jon Gunderson Re: navigation bars Marja-Riitta Koivunen Re: navigation bars Jason White Re: navigation bars Al Gilman Re: navigation bars Charles McCathieNevile Re: navigation bars Nir Dagan MAP navbars Charles McCathieNevile 14 Nov 1998 Re: MAP navbars Nir Dagan Re: MAP navbars Charles McCathieNevile Re: MAP navbars Al Gilman Re: MAP navbars Jason White Re: MAP navbars Charles McCathieNevile 15 Nov 1998 Re: Navigation bars and grouping of related links Wendy A Chisholm 21 Jul 1999 Jon Gunderson, Ph.D., ATP Coordinator of Assistive Communication and Information Technology Division of Rehabilitation - Education Services University of Illinois at Urbana/Champaign 1207 S. Oak Street Champaign, IL 61820 Voice: 217-244-5870 E-mail: jongund@uiuc.edu 
WWW:http://www.staff.uiuc.edu/~jongund 
Variation: the TITLE and DIV approach. 
After today's coordination group call, Len came up with the idea that perhaps the TITLE attribute is a key resource. 
If authors do the right thing with the TITLE, maybe we don't need the UA to recognize some particular CLASS to do the right thing. 
Let's see what we can do if we pursue that idea. 
The basic dodge is that for things you want to move high up in the navigation structure, you don't TITLE too many of their ancestors in the parse tree; and for things you want to hide or minimize you add DIV structures with TITLEs so that the collection gets listed rather than the members (unless the user explicitly enters the collection). 
The User Agent method that goes with this markup strategy is hierarchical navigation of an Effective Table of Contents tree. 
The Effective Table of Contents tree is the parse tree except that containers that have no TITLE attribute on them are ignored or equivalently flattened. 
Elements below them act (in the effective tree) as though they were directly descended from the next TITLE-bearing ancestor up the tree. 
The trick here is that DIV, on the other hand, lets us push things _down_ the tree. 
We can encapsulate and quickly skip the page masthead, while the TITLE technique lets us ignore non-semantic superstructure like layout tables. 
The attached three files are 1) the original web page from Amazon.com 2) the modified page with TITLE and DIV added according to this technique and 3) the top level of the resulting effective table of contents. 
Think about it. 
Al As a refinement to general strategies for naviagtion I like it, although I am loath to recomend it as something that should be done instead of correcet use of markup, since the effective message is that it is pointless bothering with structured markup since effective strategies don't use it. 
Thinking some more: Title is human readable metadata about almost any element. 
As such it should be renderable (at the discretion of the user. 
So we can either use it to bypass the role of strongly typed data, such as HTML marked up accroding to the intended meanings of the elements as laid out in the specification, by using the title as a means of directly communicating verbally the same semantics which we use visually. 
This seems to me an equivalent to reverting to HTML 3.2 presentational markup, on the basis that we can now provide a non-visual equivalent. 
For HTML this seems a bad strategy. 
(The rules change a bit in XML were you can declare your own structure, and you declare separately how the various elements ought to be rendered. 
This allows you to declare something based on your own understanding of visual semantics, and structure it according to the logic behind those semantics. 
The structure is made explicit in the structuring of the XML DTD/schema/profile. 
I suspect that in writing presentation based, poorly structured HTML, people are selecting the particular elements they want from a given set. 
So starting from an empty set, and creating types of things could induce people to provide more structured semantics in a more natural way.) 
So I am still a fan of map, which is an HTML element created for the purpose of holding a collection of links. 
Charles McCN Variation: the TITLE and DIV approach. 
After today's coordination group call, Len came up with the idea that perhaps the TITLE attribute is a key resource. 
If authors do the right thing with the TITLE, maybe we don't need the UA to recognize some particular CLASS to do the right thing. 
Let's see what we can do if we pursue that idea. 
The basic dodge is that for things you want to move high up in the navigation structure, you don't TITLE too many of their ancestors in the parse tree; and for things you want to hide or minimize you add DIV structures with TITLEs so that the collection gets listed rather than the members (unless the user explicitly enters the collection). 
The User Agent method that goes with this markup strategy is hierarchical navigation of an Effective Table of Contents tree. 
The Effective Table of Contents tree is the parse tree except that containers that have no TITLE attribute on them are ignored or equivalently flattened. 
Elements below them act (in the effective tree) as though they were directly descended from the next TITLE-bearing ancestor up the tree. 
The trick here is that DIV, on the other hand, lets us push things _down_ the tree. 
We can encapsulate and quickly skip the page masthead, while the TITLE technique lets us ignore non-semantic superstructure like layout tables. 
The attached three files are 1) the original web page from Amazon.com 2) the modified page with TITLE and DIV added according to this technique and 3) the top level of the resulting effective table of contents. 
Think about it. 
Al --Charles McCathieNevile mailto:charles@w3.org 
W3C Web Accessibility Initiative http://www.w3.org/WAI MIT/LCS - 545 Technology sq., Cambridge MA, 02139, USA Dan Brickley is an RDF automatically build sitemaps type. 
He is here today, so I had a bit of a chat to him about the whole thing. 
We seemed to think that the title-based navigation was effectively pretending that there are not semantics already atached to the element types, which seems like a backward step. 
Not that we have managed to solve the entire problem (yet *grin*). 
But he did also provide this pointer to similar work that is (or perhaps was) going on in the Mozilla project. 
Charles McCN From: Dan Brickley Daniel.Brickley@bristol.ac.uk Subject: hiding / identifying HTML navigation the (out of date) todo list at http://www.mozilla.org/rdf/doc/ntd.html 
says: Hiding html navigation Many pages have a simple html based sitemap which should be hidden if nav center is visible. 
The portion of html which should be hidden should be placed within Need to hack the html parser (and/or layout engine) so that this portion of the html gets thrown out if the navcenter is open. 
Hiding html navigation Many pages have a simple html based sitemap which should be hidden if nav center is visible. 
The portion of html which should be hidden should be placed within Need to hack the html parser (and/or layout engine) so that this portion of the html gets thrown out if the navcenter is open. 
This is a bit, er, hacky. 
I think there was some discussion of using CSS classes instead. 
The same thing is being discussed[1] by the Web Accessibility Initiative[2] right now so if someone could point to any more recent thinking on this I'd be grateful. 
cheers, Dan [1] http://www.w3.org/WAI/ [2] http://lists.w3.org/Archives/Public/w3c-wai-gl/1999JulSep/0289.html (and following thread) I believe you mean TITLE rather than NAME, as attribute on DIV, analogous to CLASS. 
Presumably a document could associate CLASS value with STYLE info. 
That association can be context-dependent, as in nested lists. 
as Nir Dagan pointed out, there is no need to make MAP image-based. 
The MAP container is available with ((%block; )+ | AREA+) content. 
That %block; content can be a nav bar's worth of a href="URI" ... /A Ironic that MAP is only an inline, even though its content can be %block; . 
When a navigation bar is used, a page can assign an unused letter to an ACCESSKEY to get to the start of that navigation bar for the current page, so the user needn't depend on navigation bar placement at the start, within, or end of the current page. 
If this technique is used, page content courtesy would indicate that assignment should be consistent on all pages: For example, early in each document, that accesskey binding should be explained: Use accesskey-n to return to the navigation bar. 
/a . 
[The WINTEL PC/Windows would use ALT-n to activate an access key. 
What is the MAC equivalent?] 
Experimented with this, in the attached file. 
Only Microsoft IE 5.0 seems to work. 
Failed to get Netscape Navigator 4.61, Opera 3.60, pwWEBSPEAK 32, or Amaya 2.0a to respond to that attempt to assign accesskey="n" by the source. 
This assignment could be applied consistently across all pages of a site. 
Note that the navigation bars needn't have the same set of choices. 
For example, a sequence of pages, such as a presentation. 
The first page has no "prior" page. 
The last page has no "next" page. 
Is there a way to establish a global accesskey for a set of pages? 
To have it assigned at the start of browsing, and have the same accesskey have (nearly) consistent meaning as appropriate for the edge effects of some pages? 
A user agent could make that assignment and maintain the target for the accesskey for each page encountered. 
An issue: what should that accesskey do if there is no nav bar? 
Regards/Harvey Bingham 
