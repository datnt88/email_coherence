Curt, We talked a while back about Batik and its DOM implementation. 
As you may know, we have our own test infrastructure into which I would like to integrate the DOM level 1 and DOM level 2 tests you have created in the DOM WG test effort. 
Actually, the tests were primarily created by NIST. 
I created most of the implementation. 
However, I have poked around: and looked at your ReadMe.txt and I am not too sure what I am up to... 
I didn't write and haven't read the readme.txt 
(it is pretty new) and open for comments. 
It seems that your tools currently generate tests for JUnits a some other frameworks. 
Could you tell me if this was done by writing adaptors for these frameworks (but in the end you are running the same tests) or if you have different stylesheets for each framework? 
There are distinct stylesheets for different bindings. 
For example, there are distinct stylesheets for Java and ECMAScript (and hopefully Python, C++, 
C#, etc). 
The Java tests are written to use an interface that abstracts the functions required from the test framework. 
The produced jar's can current 
be run using either JUnit or Avalon testlet by matching the test jar with an adapter jar (either junit-run.jar 
or avalon-run.jar). 
Probably the most appropriate approach would be to create a similar adapter for your regard tool. 
Look at the sources in either DOM-Test-Suite/java/junit or DOM-Test/java/avalon and hopefully it will be moderately obvious. 
I'd like to scope how difficult/easy it is going to be to integrate your test suite into our regard (regression guard) tool. 
Hopefully with an appropriate adapter classes you can use the standard distribution .jars 
to test the Java implementation. 
Philippe Le Hegaret was looking at testing Batik using the existing JUnit/Avalon adapters by using the DOM 3 Load/Save interfaces. 
I would also love to see a SVG/ECMAScript test suite. 
I was thinking that you could build a grid for a particular test suite and the squares would turn green or red as the tests progress and hovering over a test would put any messages in a text box at the bottom of the page. 
Thanks in advance for your advice. 
Vincent Hardy. 
Vincent Thanks for your interest in the DOM TS. 
As I wrote the readme.txt 
which is a description of the build and run process of the TS, please forward any comments you have on it since it is under review before being published. 
A first stop for you to get a picture of how hard/difficult it will be is to visit http://www.w3.org/DOM/Test where you have sufficient information to begin with. 
I look forward to your comments. 
/Dimitris Dimitriadis, DOM WG represenative to the DOM TS 
From: "Vincent Hardy" vincent.hardy@sun.com 
Sent: Wednesday, November 28, 2001 9:38 AM Subject: Integrating the DOM test suite in the Batik test infrastructure 
Curt, We talked a while back about Batik and its DOM implementation. 
As you may know, we have our own test infrastructure into which I would like to integrate the DOM level 1 and DOM level 2 tests you have created in the DOM WG test effort. 
However, I have poked around: and looked at your ReadMe.txt and I am not too sure what I am up to... 
It seems that your tools currently generate tests for JUnits a some other frameworks. 
Could you tell me if this was done by writing adaptors for these frameworks (but in the end you are running the same tests) or if you have different stylesheets for each framework? 
I'd like to scope how difficult/easy it is going to be to integrate your test suite into our regard (regression guard) tool. 
Thanks in advance for your advice. 
Vincent Hardy. 
Batik doesn't support the JAXP API and this is currently required to run the DOM Test Suite. 
I'm working on improving the bootstrapping problem in the DOM Test Suite in order to support DOM Level 3 LS, JAXP, and do the loading ourself. 
Batik doesn't support DOM Level 3 LS (yet?) so will rely on the third solution in order to run the tests. 
Loading the Document ourself requires to have a SAX2 parser but we can include 
the xerces parser in the distribution. 
Once this loader is ok, I'll change the DOMTestCase load method to remove its dependency with JAXP and will change accordingly the framework bootstraps. 
Hopefully, I should have something stable before the end of next week. 
Philippe 
Curt, Dimitri, Philippe, Thanks for your answers. 
I think the situation is: a. 
You do have a notion of test adapter for the java tests and this should ease the integration into Batik's test infrastructure. 
b. 
The tests currently rely on JAXP and Batik is not using JAXP. 
We'll wait until Philippe has the two alternate methods in place to do the integration into the Batik test suite. 
In the meanwhile, we'll have a look at the adapters, as Curt suggested. 
Cheers, V. 
I wrote a generic SAX loader this week end and it works fine with the generic Batik implementation (I also found bugs in it and sent a bug report to the author). 
I should try it with some real DOM Level 1 implementations. 
I didn't replace JAXP yet and still thinking on how to integrate DOM Level 3 LS, JAXP and my loader in the framework. 
Philippe 
