I have put together a few ideas concerning the development of CSS properties to control the reading of table rows. 
Unfortunately I expect to be very busy this week, and will thus be unable to write this proposal properly until at least next weekend. 
Here is an outline that may stimulate some thought and discussion. 
What would be your reaction to a CSS property, perhaps called speakrow, which would contain a mixture of speech commands (for audio cues, pauses etc., as defined in the audio section of CSS 2), and references to cells in the current row? 
Each cell could be numbered, from 1 to n (where n is the number of cells in the row). 
Note how this differs from the number of columns, since there could be cells which span any number of columns; but under this numbering scheme, only cells are counted. 
Expressions could be written such as: cells(1) read cell 1 in current row, and similarly: cells(1-4) cells(5-3) [note how this last example reverses the order] cells(1-n) [n is the number of cells in the row] cells(n-1) [reversing the reading order: thus reading the table from right to left] The speakrow property should also provide for audio cues and for text strings (between quotation marks). 
Another property can also be defined, called SPEAKCELL, which defines the procedure for speaking each cell. 
It contains a comma separated list of speech commands and the two key words "header" and "data", in any order. 
The key words refer to the header of the current cell and its content, respectively. 
Thus, for example: speakcell: cue(bell.aiff), 
header, paus(75%), data; Results in sounding of the bell cue, followed by a reading of the header, a 75% pause (as defined in ACSS) and a reading of the cell's contents, in that order. 
Similarly: speakrow: cue(dong.wav), 
"Population growth in", cells(1), "was", cells(2); means that the dong.wav 
cue is played before the reading of each row; the text strings and cell contents are read in the order shown. 
A few clarifications are needed: Speakrow is a property which applies to each row of the table in turn and governs the procedure by which it is read. 
Similarly, Speakcell is a property that controls the reading of every data cell. 
Example: tr { speakrow: cue(bell.aiff), 
cells(1-n) } td { speakcell: pause(100%), header, data } CSS experts: please check the syntax of my examples for correctness and elegance. 
In my previous messages, I explained that the CELLS variable accepted numerical parameters as well as the variable "n", which refers to the last cell in the row (n being the number of cells). 
I forgot to mention that if a numerical value is out of range (greater than n), then it should be taken as referring to cell n. 
I hope these remarks deflect certain objections and make it easier to understand my proposal. 
We still need a mechanism to control the reading of tables which are column rather than row dominant. 
A further note regarding my SPEAKROW and SPEAKCELL proposal: It is intended to supersede the ACSS table properties for the speaking of headers and cell contents which are defined in section 17.9 of the current CSS draft. 
One feature of that draft which I would like to include in my proposal is the ability to suppress the speaking of a subsequent header if it is the same as the header of the previous cell. 
Perhaps this functionality could be grouped with the parameter for specifying row or column dominance, into a single property. 
If column dominance is selected, SPEAKROW would not be used. 
Perhaps one could define a property such as: speakcolumn: [same parameters as SPEAKROW, except that the numbers 1-n refer to cells in the current column] I would also like to change my proposed definition of the CELLS variable: instead of using "n" as the variable which refers to the last cell in the row, use an asterisk. 
Thus: cells(1-*) refers to all of the cells in the row in the order in which they appear in the HTML source. 
cells(*-1) is the reverse of the reading order, and so on. 
This change makes the proposal more language neutral and clarifies the fact that the variable which refers to the last cell in the row is meant to appear in the actual parameter itself and is not just a variable that I am creating for the purpose of exposition. 
