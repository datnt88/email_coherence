A third option is that the lang tag is not significant to XMLLiteral, or that XMLLiteral is not treated as a datatype, but as a third type of literal, as it used to be, either of which would be my preferance. 
I.e. the problem is with XMLLiteral, and the correction should be to XMLLiteral. 
I'm sympathetic to that idea, but I think that is just a cosmetic change to the wording. 
The semantics has to treat the built-in datatype as a special syntactic case already. 
The real issue remains: lang tags in typed literals are allowed by the syntax, but required to be meaningless by the semantics, which seems dumb. 
Either we should get rid of them in the syntax, or we should let them be at least potentially meaningful in the semantics. 
Pat 
Patrick 
From: ext pat hayes [mailto:phayes@ai.uwf.edu] 
Sent: 12 February, 2003 02:01 Subject: language tags in typed RDF literals The current design of RDF literals is needlessly complicated and kind of silly. 
The syntax allows language tags to occur in typed literals, but in all cases other than rdf:XMLLiteral, these tags are required to have no meaning, so the semantics is obliged to provide a valid inference rule which allows any language tag in any such typed literal to be removed or replaced by any other. 
This considerably complicates the statement of the semantics, adds a burden to any implementation, nullifies the implicit design principle that literals can be compared for identity using simple lexical matching (since an engine is required to strip out all such lang tags while performing inferences or checking for identity), and provides no useful expressive function. 
A related point is that the requirement in the semantics that datatypes other than rdf:XMLLiteral *must* ignore language tags seems to restrict possible future datatyping proposals needlessly. 
I suggest therefore that EITHER (1) lang tags be forbidden by the RDF syntax from appearing in non-XML typed literals. 
OR ELSE (2) the notion of the lexical space of a datatype be generalized to allow (not require) lang tags to be taken into consideration by a datatype, so that the lexical space may be a set of strings or pairs of strings, i.e. a set of simple literals. 
This would have the effect that it would no longer be valid to make arbitrary changes to a lang tag in any literal, typed or not. 
It would also bring the treatment of all RDF datatypes into alignment so that rdf:XMLLiteral need not be considered a special case. 
Either of these changes will simplify the semantics and make it more coherent, but in slightly different ways. 
Either change will produce fewer inference rules and lead to less processing in a reasoning engine. 
Pat Hayes IHMC(850)434 8903 or (650)494 3973 home 40 South Alcaniz St.(850)202 4416 office FL 32501???????????(850)291 0667 cell phayes@ai.uwf.edu http://www.coginst.uwf.edu/~phayes s.pam@ai.uwf.edu for spam 
IHMC(850)434 8903 or (650)494 3973 home 40 South Alcaniz St.(850)202 4416 office 
FL 32501???????????(850)291 0667 cell 
phayes@ai.uwf.edu http://www.coginst.uwf.edu/~phayes s.pam@ai.uwf.edu for spam 
From: ext pat hayes [mailto:phayes@ai.uwf.edu] 
Sent: 12 February, 2003 18:52 Subject: RE: language tags in typed RDF literals 
A third option is that the lang tag is not significant to XMLLiteral, or that XMLLiteral is not treated as a datatype, but as a third type of literal, as it used to be, either of which would be my preferance. 
I.e. the problem is with XMLLiteral, and the correction should be to XMLLiteral. 
If I had to choose (and only if I had to choose) I'd prefer to remove the lang tags than make them significant to datatyping. 
It means more work for us, and switching to other mechanisms for language scoping/selection of assertions, but that would be the lesser of the two evils, by a large margin. 
Patrick 
Patrick 
-----Original Message----- From: ext pat hayes [mailto:phayes@ai.uwf.edu] 
Sent: 12 February, 2003 02:01 Subject: language tags in typed RDF literals The current design of RDF literals is needlessly 
complicated and kind 
of silly. 
The syntax allows language tags to occur in typed literals, but in all cases other than rdf:XMLLiteral, 
these tags are 
required to have no meaning, so the semantics is obliged 
to provide a 
valid inference rule which allows any language tag in any 
such typed 
literal to be removed or replaced by any other. 
This considerably complicates the statement of the semantics, adds a burden to any implementation, nullifies the implicit design principle 
that literals 
can be compared for identity using simple lexical 
matching (since an 
engine is required to strip out all such lang tags while 
performing 
inferences or checking for identity), and provides no useful expressive function. 
A related point is that the requirement in the semantics that datatypes other than rdf:XMLLiteral *must* ignore 
language tags seems 
to restrict possible future datatyping proposals needlessly. 
I suggest therefore that EITHER (1) lang tags be forbidden by the RDF syntax from appearing in non-XML typed literals. 
OR ELSE (2) the notion of the lexical space of a datatype be 
generalized to 
allow (not require) lang tags to be taken into consideration by a datatype, so that the lexical space may be a set of 
strings or pairs 
of strings, i.e. a set of simple literals. 
This would 
have the effect 
that it would no longer be valid to make arbitrary 
changes to a lang 
tag in any literal, typed or not. 
It would also bring the 
treatment 
of all RDF datatypes into alignment so that 
rdf:XMLLiteral need not 
be considered a special case. 
Either of these changes will simplify the semantics and 
make it more 
The issue is not keeping the semantics simpler. 
I can make the bed either way. 
But I think it has a pea under the mattress right now which others will eventually notice. 
Remove the pea. 
Patrick 
Get rid of them. 
This means that my proposal scores on all three points. 
1. 
By not changing XML literals as defined by M&amp;S it's fully backwards compatible. 
Nothing whatsoever will break, because neither plain literals nor XML literals have changed at all. 
2. By restricting the interpretation of datatyped literals to involve only lexical forms and datatype URIs, both of which are manditory, the semantics is simpler and more consistent. 
3. By leaving out lang tags from typed literals, there's no more floatsom in the abstract syntax which is not relevant to the semantics. 
In other words, "punt the junk" into an old-style RDF literal? 
The "old school" literals become (in the abstract syntax), what: a triple of unicode string, language, "xml bit"? 
And the value space is the union of unicode strings, unicode string . 
lang tag pairs, canonical xml with the trickery used accoring to the current concepts definition? 
The datatyped literals in the abstract syntax are URIref x unicode string, with the syntax modified to make lang tags illegal (or irrelevant - they never make it out of rdf/xml)? 
I suspect there's quite a high editorial impact, but (as I'd expect/hope to see a move to datatyped literals in the longer run) I quite like this. 
Speaking for semantics, there is an editorial impact whatever we do, even stick to the status quo, since the LC version didn't handle lang tags in typed literals (mia culpa) and trying to fix it is what led me to make the suggestion. 
On balance the entire semantic framework would be simpler, and the 'correct' text easier to write, if 1. we ban lang tags from all non-XML typed literals (change the syntax, that is) and 2. make the XML case syntactically special. 
Exactly how it is made special I really don't care, but I have to treat it specially in any case since it has to be incorporated into the RDF semantics early on in the document before I refer to the datatyping stuff, so having it be a datatype doesn't really help the Semantics editor at all. 
The XML bit would be easier to talk about. 
On the other hand, I have no real objection to handling it as a datatype if people feel this is useful. 
But I do NEED some input from the Concepts editors on some terminology I can use to refer to the things in the lexical and value spaces of this datatype. 
The flip side is the "editorial impact" call, and the question of whether Pat sees this as a "technical goer". 
Yes, he does. 
This change would certainly require a second last call, since the close scrutiny of semantics, 
concepts, syntax, plus a rundown of test cases would be necessary. 
I wouldn't object to this, but I'd understand a veto on the basis of "too much, too late", particularly if a second last call is not otherwise required, and also since the benefit doesn't extend to a completely uniform treatment of literals. 
jan PS. 
Another option: make _all_ literals typed. 
Yes, the current position is that untyped literals can be seen as typed with the 'invisible' datatype whose lexical and value spaces are identical and whose L2V map is the identity. 
You could think of this as a default datatype, in fact: unless some other is mentioned, this is the one you get. 
Pat 
We've invented a datatype for XMLLiterals, why not one for "plain" RDF literals. 
This still leaves te abstract syntax with one literal in the form of a triple: unicode string, type, (lang tag /union /null) and requires lang tags to be available to l2v: - The road to lang tag deprecation is straightforward; - we can even prevent non-null lang tags on "normal" datatypes via syntax restrictions in rdf/xml - there is a uniform treatment of all literals. 
jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ Don't annihilate, assimilate: MacDonalds, not missiles. 
IHMC(850)434 8903 or (650)494 3973 home 40 South Alcaniz St.(850)202 4416 office FL 32501???????????(850)291 0667 cell phayes@ai.uwf.edu http://www.coginst.uwf.edu/~phayes s.pam@ai.uwf.edu for spam 
From: ext Graham Klyne [mailto:GK@NineByNine.org] 
Sent: 25 February, 2003 17:28 Subject: Re: language tags in typed RDF literals 
[just to make sure w.r.t. rdf comments] We currently have (in our test code) that test#x test#y "10"@en^^xsd:int. 
rdfs xsd entails test#x test#y "10"@fr^^xsd:int. 
(i.e. ignoring the lang tag) 
How about test#x test#y "10"@en^^xsd:int . 
entails test#x test#y "10"^^xsd:int . 
and vice versa? 
I think this would be less surprising to users of RDF/XML; e.g. rdf:RDF xmlns ... xml:lang="EN" rdf:Description about="ex:itemForSale" ex:itemDescription A fine widget /ex:itemDescription ex:itemPriceInCents rdf:datatype="xsd:int" 12345 /ex:itemPriceInCents /rdf:Description /rdf:RDF In this interpretation of language tags that Pat suggests, the presence of an outer language tag would not upset the inner datatyped interpretation. 
Well, this is the case now. 
I.e. we get ex:itemForSale ex:itemDescription "A fine widget"@EN . 
ex:itemForSale ex:itemPriceInCents "12345"@EN^^xsd:int . 
which entails ex:itemForSale ex:itemDescription "A fine widget"@EN . 
ex:itemForSale ex:itemPriceInCents "12345"^^xsd:int . 
but the simpler solution is if we just got from the above RDF/XML ex:itemForSale ex:itemDescription "A fine widget"@EN . 
ex:itemForSale ex:itemPriceInCents "12345"^^xsd:int . 
I.e., the xml:lang does not 'infect' typed literal at all and thus need not clutter the semantics at all. 
Patrick 
