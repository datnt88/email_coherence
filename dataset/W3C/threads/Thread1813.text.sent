This is a good question, and it applies to any "required" property that sometimes has "no value" (e.g. DAV:checked-in and DAV:checked-out). 
So this question probably should be answered in 2518bis (I'll forward this message to the WebDAV list), but we certainly could take a stab at it in the DeltaV context first. 
Like Julian, I'd probably be inclined to "b", but don't feel strongly either way. 
Anyone prefer "a", prefer to decide separately for each property, or prefer that we leave it up to the server? 
Cheers, Geoff From: Julian Reschke [mailto:julian.reschke@greenbytes.de] section 6.2.1 [of rfc 3253] says: "The DAV:workspace property of a workspace resource MUST identify itself. 
The DAV:workspace property of any other type of resource MUST be the same as the DAV:workspace of its parent collection." 
It seems to be undefined however what the value is if a resource doesn't *have* a (DAV-compliant) parent collection, for instance the root of my DAV namespace. 
So what should it be? 
a) not present b) empty (no href) Julian (leaning to b) Required properties with no value [WAS: workspace property on resources that aren't in workspaces]I think this case is a bit different. 
For DAV:checked-in and DAV:checked-out the spec is very clear that they aren't *present* for resources that don't happen to be checked-out / checked-in. 
In *this* case (DAV:workspace), the spec is just silent about the value for a resource that happens to be in no workspace. 
Furthermore, I don't think a) would work for DAV:checked-in -- clients already check for the *presence* of this property to find out whether a resource is checked-in, and RFC3253 explicitly says this is ok...: "This property appears on a checked-in version-controlled resource, and identifies a version that has the same content and dead properties as the version-controlled resource. 
This property is removed when the resource is checked out, and then added back (identifying a new version) when the resource is checked back in." 
[mailto:ietf-dav-versioning-request@w3.org]On 
Behalf Of Clemm, Geoff ources that aren't in workspaces] This is a good question, and it applies to any "required" property that sometimes has "no value" (e.g. DAV:checked-in and DAV:checked-out). 
So this question probably should be answered in 2518bis (I'll forward this message to the WebDAV list), but we certainly could take a stab at it in the DeltaV context first. 
Like Julian, I'd probably be inclined to "b", but don't feel strongly either way. 
Anyone prefer "a", prefer to decide separately for each property, or prefer that we leave it up to the server? 
Cheers, Geoff section 6.2.1 [of rfc 3253] says: "The DAV:workspace property of a workspace resource MUST identify itself. 
The DAV:workspace property of any other type of resource MUST be the same as the DAV:workspace of its parent collection." 
It seems to be undefined however what the value is if a resource doesn't *have* a (DAV-compliant) parent collection, for instance the root of my DAV namespace. 
So what should it be? 
a) not present b) empty (no href) Julian (leaning to b) Just taking an example from section 7: "Additional OPTIONS Semantics If the server supports the update feature, it MUST include "update" as a field in the DAV response header from an OPTIONS request on any resource that supports any versioning properties, reports, or methods." 
So assuming my DAV namespace is separated into two parts (for instance by servlet) "/a" and "/b". 
Both parts of the server namespace support versioning, but only "/a" supports workspaces. 
Should the "update" feature be reported on "/b" and it's descendants? 
The spec says "yes", but I don't think this is implementable (for instance, the servlet responsible for "/b" may not even know about the existence of "/a"). 
Julian I would classify two different servlets as two different servers, and so if the servlet handling the OPTIONS request does not know about the update feature, then it is expected to not return "update" in the DAV header. 
Cheers, Geoff Just taking an example from section 7: "Additional OPTIONS Semantics If the server supports the update feature, it MUST include "update" as a field in the DAV response header from an OPTIONS request on any resource that supports any versioning properties, reports, or methods." 
So assuming my DAV namespace is separated into two parts (for instance by servlet) "/a" and "/b". 
Both parts of the server namespace support versioning, but only "/a" supports workspaces. 
Should the "update" feature be reported on "/b" and it's descendants? 
The spec says "yes", but I don't think this is implementable (for instance, the servlet responsible for "/b" may not even know about the existence of "/a"). 
Julian RE: again: OPTIONS semanticsOK, let's take that further -- this is a real implementation issue, not just academic. 
I have *one* servlet "/a" that controls access to different backends through different namespace partitions such as "/a/filesystem", "/a/jdbc" and so on... 
One backend may support workspaces, the other won't. 
Would you still consider this "multiple" servers? 
[mailto:ietf-dav-versioning-request@w3.org]On 
Behalf Of Clemm, Geoff I would classify two different servlets as two different servers, and so if the servlet handling the OPTIONS request does not know about the update feature, then it is expected to not return "update" in the DAV header. 
Cheers, Geoff -----Original Message----- Just taking an example from section 7: "Additional OPTIONS Semantics If the server supports the update feature, it MUST include "update" as a field in the DAV response header from an OPTIONS request on any resource that supports any versioning properties, reports, or methods." 
So assuming my DAV namespace is separated into two parts (for instance by servlet) "/a" and "/b". 
Both parts of the server namespace support versioning, but only "/a" supports workspaces. 
Should the "update" feature be reported on "/b" and it's descendants? 
The spec says "yes", but I don't think this is implementable (for instance, the servlet responsible for "/b" may not even know about the existence of "/a"). 
Julian Yes, I think it would be fine to consider different backends to be different servers. 
The only thing I'd insist on is that the OPTIONS request return "update" in the DAV header if the resource identified by the request-URL supports the UPDATE method. 
Beyond that, I'd just do whatever makes sense for your implementation. 
Cheers, Geoff let's take that further -- this is a real implementation issue, not just academic. 
I have *one* servlet "/a" that controls access to different backends through different namespace partitions such as "/a/filesystem", "/a/jdbc" and so on... 
One backend may support workspaces, the other won't. 
Would you still consider this "multiple" servers? 
-----Original Message----- [mailto:ietf-dav-versioning-request@w3.org]On 
Behalf Of Clemm, Geoff I would classify two different servlets as two different servers, and so if the servlet handling the OPTIONS request does not know about the update feature, then it is expected to not return "update" in the DAV header. 
Cheers, Geoff -----Original Message----- Just taking an example from section 7: "Additional OPTIONS Semantics If the server supports the update feature, it MUST include "update" as a field in the DAV response header from an OPTIONS request on any resource that supports any versioning properties, reports, or methods." 
So assuming my DAV namespace is separated into two parts (for instance by servlet) "/a" and "/b". 
Both parts of the server namespace support versioning, but only "/a" supports workspaces. 
Should the "update" feature be reported on "/b" and it's descendants? 
The spec says "yes", but I don't think this is implementable (for instance, the servlet responsible for "/b" may not even know about the existence of "/a"). 
Julian 
