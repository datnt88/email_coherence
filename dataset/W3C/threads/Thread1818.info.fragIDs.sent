It looks like we have finally narrowed down this thread to one issue for 3253, which I've added as 14.4_CLARIFY_VH_DELETE_2 (i.e. can you delete the stable binding to a version history or version, if there are other bindings). 
Any discussion of 14.4_CLARIFY_VH_DELETE_2 should be mailed to the deltav mailing list, not to the general webdav mailing list. 
For the binding spec, Julian asks for two new preconditions for BIND, which I will go ahead and add, unless someone objects (they both seem reasonable to me). 
Any discussion of these two new preconditions for BIND should be mailed to the general webdav mailing list. 
Cheers, Geoff The issue here is that if we allow a DELETE to fail because other bindings exist, a client may never be able to delete a binding (because due to race conditions, there will always be additional bindings left). 
I'm not saying that this can be avoided, however it *really* sounds ugly. 
As I said, I haven't seen a convincing argument why we need this restriction in RFC3253 (and yes, this discussion should be moved to the other mailing list). 
Can we agree that servers can reject DELETE/MOVE requests and move the versioning specific discussion to the versioning mailing list? 
Yes. Still, we may have to define additional precondition values for - resource does not support additional bindings - new member name can't be used (in deltav: because it was already used for a stable URI) Julian 
RE: BIND vs. non-movable resources in RFC3253Geoff, thanks. 
I think I've got at least one other precondition: DAV:bind-loops-allowed (explanation: we don't want the server to produce a 5xx error code for this case) Behalf Of Clemm, Geoff 
It looks like we have finally narrowed down this thread to one issue for 3253, which I've added as 14.4_CLARIFY_VH_DELETE_2 (i.e. can you delete the stable binding to a version history or version, if there are other bindings). 
Any discussion of 14.4_CLARIFY_VH_DELETE_2 should be mailed to the deltav mailing list, not to the general webdav mailing list. 
For the binding spec, Julian asks for two new preconditions for BIND, which I will go ahead and add, unless someone objects (they both seem reasonable to me). 
Any discussion of these two new preconditions for BIND should be mailed to the general webdav mailing list. 
Cheers, Geoff -----Original Message----- The issue here is that if we allow a DELETE to fail because other bindings exist, a client may never be able to delete a binding (because due to race conditions, there will always be additional bindings left). 
I'm not saying that this can be avoided, however it *really* sounds ugly. 
As I said, I haven't seen a convincing argument why we need this restriction in RFC3253 (and yes, this discussion should be moved to the other mailing list). 
Can we agree that servers can reject DELETE/MOVE requests and move the versioning specific discussion to the versioning mailing list? 
Yes. Still, we may have to define additional precondition values for - resource does not support additional bindings - new member name can't be used (in deltav: because it was already used for a stable URI) Julian 
Actually, I think there are *two* issues, one of which is the one above (where I clearly disagree with the current resolution), and... 
For all live properties that refer to version resources or version history resources, which one of possibly multiple bindings should be reported? 
(I think we all agree that the stable binding should be reported). 
As we also have agreed (months ago) that the fact that the a deltaV live property points to a specific URL does *not* guarantee that the reported URL is still mapped (so a client can get a 404...), I hereby ask again to consider the following alternate resolution to 14.4_CLARIFY_VH_DELETE_2: Bindings to version resources or version history resources may be deleted in any order. 
Removing the stable binding does not affect which URL will be reported in the live properties -- the resource just itself isn't accessible through the stable URL anymore. 
This relaxes the "stable URL" requirement such that clients still can rely on the stable URL when being mapped to be mapped to the initially created resource (it won't be reused). 
Upon encountering a 404, they would however not be able to conclude that the resource itself is gone (I'd still like to hear why that would be a problem). 
This model is completely deterministic and avoids special-casing DELETE and BIND for these resources, therefore it would be a protocol simplification (a hopefully shared goal of the WG :-). 
Julian 
