From: ext Brian McBride [mailto:bwm@hplb.hpl.hp.com] Sent: 17 January, 2003 13:32 Subject: Fwd: problems with RDF datatyping From PFPS: In trying to make the OWL semantics correspond to the RDF semantics I came up with the following problems in RDF datatyping: 1/ A datatype is an element of IR, because the RDF MT says that datatypes are denoted by URI references. 
However, rdf:XMLLiteral is said to be a datatype, but rdf:XMLLiteral is a URI reference. 
Something is wrong here. 
rdf:XMLLiteral denotes the datatype. 
It is not itself the datatype. 
It is a URIref. 
2/ XSD-interpretations include in their datatypes the XML Schema datatypes that are problematic when removed from XML documents or have other problems. 
XSD-interpretations also include, for example, the datatype named FOO, which is not defined as an XML datatype. 
I'm not really sure what your saying here. 
I'm not aware of any XML Schema datatype that does not conform to the definition of rdfs:Datatype. 
Can you be more specific? 
3/ A datatype has to be more than is specified in the RDF MT. Except for XSD-interpretations, which explicitly mention the URI-reference to datatype relationship, there is no way of tying the intended URI-reference for a datatype to that datatype. 
For example, if I have D containing a datatype for integers and a datatype for strings, there is no way to require that a particular URI reference, say ex:int, denotes the integer datatype. 
It probably makes more sense to say that a datatype is a four-tuple, consisting of a URI reference, a lexical space, a value space, and a lexical-to-value mapping. 
This doesn't make sense to me. 
A URIref is a name. 
It denotes something. 
A name is not part of the thing it denotes. 
It is fully concievable that there can be multiple URIrefs that denote the same datatype, just as there can be e.g. multiple URIrefs that denote the city of Paris, France. 
A URIref denoting the city of Paris is not part of the city of Paris. 
Further, one can use OWL mechanisms to express such equality of denotation if in fact multiple URIrefs denote the same datatype. 
I would consider the inclusion of the URIref as part of the datatype definition a mistake. 
Regards, Patrick If that's the case (and your position seems reasonable) then I don't see that we have any choice but to include the language tag contents in the L2V mapping for all datatypes, OR to drop it from XMLLiteral. 
The reason why PFPS was suggesting that the URIRef be made a part of the datatype definition was (as far as I can tell) so that we can ensure XMLLiteral gets a separate treatment. 
I would much rather remove this - clearly awkward - special case and give a regular treatment to all datatypes. 
jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ Prolog in JavaScript: http://ioctl.org/logic/prolog-latest 
From: ext Jan Grant [mailto:Jan.Grant@bristol.ac.uk] Sent: 17 January, 2003 16:29 Subject: RE: problems with RDF datatyping I would drop it from XMLLiteral, as I've proposed many times before. 
The fact that the RDF/XML serialization can "infect" what is essentially an XML fragment taken in isolation (and not relevant or part of an RDF/XML serialization -- i.e. not constituting any RDF statements -- is IMO a bug in the original M&amp;S and should be fixed. 
If one has an XML literal and one wishes to specify xml:lang for that literal, then fine, do so, *in* the literal. 
Having the RDF/XML context "leak" into the XML literal makes RDF far more cumbersome to use for modular content management. 
I fully agree. 
A third option is to back up a bit and not treat XML literals as typed literals and not define any datatype rdfs:XMLLiteral. 
I.e., back to when we had three kinds of literals: plain, typed, and XML. 
But I'd rather see the semantic significance of xml:lang for XML literals removed as it is for all typed literals. 
Question: are there *any* existing implementations which rely on xml:lang defined at higher scope in the RDF/XML serialization for the proper interpretattion/processing of XML literals? 
Patrick 
