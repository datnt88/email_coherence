People seem to have agreed that doing a pattern on n-ary (reified) relations would be a useful thing to have. 
Alan Rector and I actually had a chance to work it out and you can see the first draft of our effort at aryRelations.html 
It's nowhere near as complicated or as controversial (we hope) as the Classes as Values one. 
In fact, it's rather simple, almost too simple to be a pattern. 
On the other hand, it seems to be on a topic that many 
newcomers to OWL have questions on. 
As usual, please feel free to poke holes in it and all feedback is welcome. 
Thanks in advance, Natasha and Alan 
Natasha I'm in the process of drafting a small annex to the note about representation of n-ary relations in Topic Maps following Pattern 2, as you suggested I could have a try at it. 
I stumbled on some vocabulary/conceptual issues in your document, so I wanted to figure them out to make sure we will use the same words in the same meaning. 
First issue is difference in use, if any, between "relation" and "relationship". 
This is something I always had trouble with, even in casual language, and have been often corrected by native english speakers. 
In my native French, there is a single word "relation" that matches both - which does not help. 
In my background Mathematics land, only "Relation" is used on a formal way, which makes things easy. 
You use both in the document, and I don't figure in the context what are the difference in semantics, if any, in using either one. 
OTOH, Pat in a recent answer to this thread uses "relation-instance". 
This is crystal-clear to me, and I buy the notion of relation as a class. 
In that case, and the question goes to Pat as well, could a (specific) "relationship" be an instance of a (generic) "relation"? 
So we would have "relationship" = "relation instance" ? 
This sounds to good to be true. 
Or is it that "relation" has a formal definition, whereas "relationship" is more casual in this context? 
Go figure. 
If we stick to "relation-as-class", in the case of relation represented by a binary property I agree with Pat we have to clarify the relationship (oops) between the relation and the property, which are both classes. 
Are they equivalent classes? 
I would say no, but ... In the case of n-ary relations, in any case, it's clear that the relation is not a property. 
But if we stick to the notion of the relation-as-class, what is the instance, exactly, in Pattern 2? I think we have to clarify the difference between the individual instance of Purchase and the instance of Purchase-Relation (which, IMO, would be difficult to describe as a single OWL object). 
In Topic Maps representation, things are clearer and cleaner for those matters. 
Relation-classes are represented by association types, and relation-instances by associations. 
So I have not much difficulty to represent and describe the situation in Topic Map concepts and vocabulary, but I've hard time to figure which objects they map on the OWL side. 
And, last but not least, what does "pattern" capture exactly? 
What is the difference between the relation-class and the relation pattern? 
Do I complicate it on purpose? 
Are those issues to "sweep" also under the carpet (a bit crowded down there)? 
Cheers Bernard Bernard Vatant Senior Consultant Knowledge Engineering Mondeca - www.mondeca.com 
bernard.vatant@mondeca.com 
Bernard Thanks for raising this. 
I think most English speakers get a bit sloppy, and I fear we did in the document. 
In common usage, the words "relation" and "relationship" are almost interchangeable, so we barely notice which we are using. 
Looking it up, my OED talks mostly about kinship so is unhelpful. 
The Collins Cobuild Dictionary, which is corpus based, isn't a good source for technical things but the analogies would support relation = class of relationships = (interpretation of) OWL property relationship = instance of relation = (interpretation of) OWL fact 
In the paper, however, "relationship" first appears under "Representation pattern" and actually seems to be being used as a synonym for this meaning or perhaps for "configuration or relationships" rather than in the technical meaning above. 
I think this is a genuine ambiguity of use. 
However, we then lapse into using "relationship", almost certainly incorrectly, for "relation", probably by inertia, in some of the subsequent paragraphs before going back to "relation". 
I think this probably just needs subediting and apologies for the confusion. 
However, drafting details aside, it would be useful to see if there is a consensus on the equivalences above. 
I think they are how Pat's definition translate in terms of OWL. 
If so, then we could all be more careful in our drafting. 
If not, we need to be aware of the potential confusions. 
Regards Alan 
Alan L Rector Professor of Medical Informatics Department of Computer Science University of Manchester Manchester M13 9PL, UK Room: 2.88a, Kilburn Building web: www.cs.man.ac.uk/mig www.opengalen.org 
www.clinical-escience.org 
Given the target audience will include people from the RDBMS world as well as the odd mathematician, to avoid ambiguity (and the wrath of purists) I'd suggest trying to follow Codd's use of "relation" [1] as a set of statements (in this case triples), with "relationship" used for the more general term, see Date [2]: ?Given the depth and complexity of Codd's thought, not to mention the arcane terms in which he often expressed himself, it is not difficult to grasp why so many of his key points have been widely misunderstood. 
Even programmers still often misconstrue the technical term ?relational?. 
The relational in relational theory refers to relations and not relationships. 
A relation is a special set of similar objects commonly modeled as entities or as database tables. 
Relationships may exist between these relations and if your relations are entities you could easily represent the whole thing using a Relational Entity Relationship approach. 
To elucidate a simple practical example, if you had a company table and an employee table and each company record could have many employee records associated with it, you would have two relations and one relationship. 
The relations would be the sets of similar objects found in the Employee and Company tables and the relationship would be the association between them. 
In this case one company to many employees.? Cheeers, Danny. 
[1] http://www.acm.org/classics/nov95/s1p3.html [2] http://www.dbdebunk.com/page/page/622793.htm 
Raw 
