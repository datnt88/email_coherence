If so we could asssume those as minimal browser capabilities. 
(This is already important - WCAG didn't assume people could find an empty text field, so included checkpoint 10.4 - if that is no longer a valid assumption, then that checkpoint could be dropped.) 
Now, let's look at other HTML capabilities: A good candidate for "base HTML capabilities" would be XHTML Basic and the HTML equivalent thereof. 
What about elements like abbr, acronym, dfn or tt? 
What about styling? 
What about dynamic content provided through various script languages, or flash, SVG, Java, python? 
What about handling valid code? 
What kind of systems do people have to use this software on? 
I think it's not enough to simply "ignore" or "not break" on abbr and acronym and dfn and tt -- there should be some manner in which this information is conveyed to the user. 
It shouldn't be treated as a div or span alone. 
In my opinion, styling is not merely "content enhancement" as some have claimed, and therefore -- at the very least -- CSS level one should be supported. 
There is an increasing argument to be made that JavaScript is standardizable enough that some subset of basic JavaScript must be supported. 
So, it looks like the list I'd draw up, as a start, would be: * XHTML Basic * HTML equivalents for XHTML Basic * CSS level 1 * ECMAscript (plus W3C DOM?) In my opinion that constitutes a reasonable baseline of support for 2001 web browsers. 
Anything less than that is lagging behind spec by a great deal, and represents software in serious need of upgrade. 
--Kynn Kynn Bartlett kynn@idyllmtn.com http://kynn.com 
Chief Technologist, Idyll Mountain http://idyllmtn.com 
Web Accessibility Expert-for-hire http://kynn.com/resume 
January Web Accessibility eCourse http://kynn.com/+d201 
If users have CSS1, they do not necessarily have the ability to override the stylesheet provided by the author. 
Should they have the CSS2 cascade, or should the user agent provide some means to enusre that the styling can be disabled, or should it provide a methos for overriding styling on a property by property basis (essentially the CSS2 cascade by another specification)? 
If they did have this ability, then they could clearly identify, in a way that suits them, each different element. 
chaals A good candidate for "base HTML capabilities" would be XHTML Basic and the HTML equivalent thereof. 
I think it's not enough to simply "ignore" or "not break" on abbr and acronym and dfn and tt -- there should be some manner in which this information is conveyed to the user. 
It shouldn't be treated as a div or span alone. 
In my opinion, styling is not merely "content enhancement" as some have claimed, and therefore -- at the very least -- CSS level one should be supported. 
There is an increasing argument to be made that JavaScript is standardizable enough that some subset of basic JavaScript must be supported. 
So, it looks like the list I'd draw up, as a start, would be: * XHTML Basic * HTML equivalents for XHTML Basic * CSS level 1 * ECMAscript (plus W3C DOM?) In my opinion that constitutes a reasonable baseline of support for 2001 web browsers. 
Anything less than that is lagging behind spec by a great deal, and represents software in serious need of upgrade. 
--Kynn Location: 21 Mitchell street FOOTSCRAY Vic 3011, Australia (or W3C INRIA, Route des Lucioles, BP 93, 06902 Sophia Antipolis Cedex, France) Good point. 
Users should have the CSS2 specification's cascade, and the subset of CSS2 which corresponds to CSS1. 
--Kynn Kynn Bartlett kynn@idyllmtn.com http://kynn.com 
Chief Technologist, Idyll Mountain http://idyllmtn.com 
Web Accessibility Expert-for-hire http://kynn.com/resume 
January Web Accessibility eCourse http://kynn.com/+d201 
This has been a productive discussion. 
There is a higher-level issue which hasn't been touched on, however, namely the extent to which the guidelines should allow developers to decide what level of support to expect from user agents visiting the site. 
Should it make a difference, so far as conformance to the guidelines is concerned, if a developer decides to rely on a particular technology that may not be widely available to users, but for which relevant techniques are available, or to expect a level of support that goes beyond the "minimal capabilities", whatever they may be? 
This brings us back to Kynn's "policy framework" proposals, which among other factors permit developers to choose, within limits, which technologies to require of the user agent, and at what level. 
Also, if we were to define a minimal user agent profile, how would we use it? 
There are several possibilities: 1. 
In the techniques, we could omit strategies and work-arounds that are applicable only to user agents which don't meet the minimal requirement, or at least label them as deprecated. 
2. We could maintain, separately from the guidelines, a page (which would have to be updated) giving informative advice regarding what user agent capabilities it would be reasonable for developers to expect if they wish to aim for a broad audience. 
3. In the conformance scheme we could require that conforming content be readable via a user agent that has the specified minimum capabilities. 
4. In the conformance scheme, we could allow developers to choose their own desired type and level of user agent support, but allow them to assert (in the conformance claim) what user agent capabilities their content requires. 
A fortiori, they would be permitted to assert that their content was readable by a user agent having the minimal capabilities that we define. 
Note: options 3 and 4 are mutually exclusive. 
The above list is not exhaustive. 
CSS2 conflicts with CSS1, at some points. 
Plus, CSS1 (and CSS2) is rather bloated. 
I guess CSS3: VisualBoxModel + Aureal rendering is a real minimum for CSS support (cascading and selectors should be included, too, but these are supporting modules). 
I also think that CSS3: Line Text layout module should be optional, it's really not necessary to support "Line Text layouting" in text-based browser, like Lynx (you can emulate DIV and SPAN elements, borders, padding even in text mode, but I doubt that you can use different typeface, etc.). 
Therefor, I think that dependency list for Visual BoxModel should be changed in final CSS3 Recommendation. 
Tables, Positioning, Fonts, etc. should be optional in Minimal Browser Capabilities. 
Now we just need to get Netscape and Microsoft supporting this minimum ASAP Vadim Plessky 33 Window Decorations and 6 Widget Styles for KDE KDE mini-Themes "Kynn Bartlett": Without a DOM, ECMAScript would be pointless, indeed it would be impossible to distinguish between a browser which did or did not support ECMAScript, so the real issue is DOM support, not ECMAScript support. 
There is no standardised basic DOM, it's all pretty much by agreement to the early Netscapes "DOM level 0", perhaps you could say that was a minimum requirement, DOM Level 1, and DOM level 2, can't be, they include things which make little sense in many output mediums, and would cause programmers severe difficulties. 
Then there's the simple fact that page authors can't currently even author scripts that work today, let alone work and are accessible. 
You've not explained which parts of DOM you feel are necessary - without DOM2 (well in reality the IE extensions - style object and innerHTML.) then ECMAScript/DOM does very little, either positive client-side validation (only positive from a speed/reactivity basis) and the negative of "browser sniffing". 
Jim. 
