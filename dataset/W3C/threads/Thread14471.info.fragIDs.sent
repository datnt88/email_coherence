Hi, In a previous posting, Wendy asked me to look at CC/PP amd see if it is in sync with my ideas. 
Before going into that discussion, I thought it might be helpful to talk a little about attributes/preferences and software architecture. 
An arrangement that I've found helpful in software architecture is to provide for external attributes/preferences and internal attributes/preferences. 
The external attributes/preferences are known outside of the program while internal attributes/preferences are known only inside of the program. 
There are several advantages to this arrangement. 
One is that the names used for the external attributes/preferences can be renamed, aliased, etc and the internal attributes/preferences can be left the same. 
Only the mapping of the external attributes/preferences to internal attributes/preferences need be changes. 
This arrangement also allows for external attributes/preferences to be specified from different sources using names relevant to the source without needing to change the internal attributes/preferences. 
In this arrangement, values from CC/PP would be seen as external attributes/preferences from the CC/PP source. 
Also, a web page could be provided for specifying user preferences using attributes/preferences which need not have the same names as CC/PP. 
The names would be more relevant to the purpose of the web page where the names from CC/PP would be more generic. 
Assuming that a web site provides an ability to store a user's preferences from a previous visit, a user preference page and the handling for CC/PP, the following steps would probably occur when a user visits the web site: 1. set internal attributes/preferences from defaults 2. set internal attributes/preferences from stored user preferences 3. query user agent for CC/PP information 4.a. 
if no CC/PP information is returned, display a greeting web page with a link to user preferences web page which has a list of external attributes/preferences relevant to the web site 4.b. if CC/PP information is returned, set the internal attributes/preferences from the external attributes/preferences provided by the CC/PP. 
then display a greeting web page with a link to user preferences web page which has a list of external attributes/preferences relevant to the web site. 
(This web page will let a user over-ride values provided by CC/PP as might be needed for the particular session. 
It is also highly useful for debugging.) 
In this organization, CC/PP should identify major classes of disability, e.g. "blind", "upper arm limitations". 
The application would then translate these external attributes/preferences into possible internal attributes/preferences like "use simple format" or "include fast section navigation". 
(Ideally, the user preference web page would allow the user to turn off all features relevant to a disability or let the user pick and choose which disability features to include.) As near as I can tell, CC/PP isn't providing information about a person's disability. 
Scott 
This seems like a pretty sound approach in general. 
However I am not sure that having preference settings like "upper arm disability" is going to be as well received as having the resulting features be what the user selects on - fast navigation, no images, or whatever. 
Charles Munat has also worked on this approach a fair bit, but doing browser sniffing to determine whether to include thins like accesskeys (based on the idea that if the browser doesn't handle them they are a wase of bandwidth). 
As I understand it, CC/PP does not deal specifically with 
disabilities, but instead with functional requirements/limitations. 
Another area this is being used is with system atributes in SMIL and SVG. 
Cheers Charles McCN 
Hi, In a previous posting, Wendy asked me to look at CC/PP amd see if it is in sync with my ideas. 
Before going into that discussion, I thought it might be helpful to talk a little about attributes/preferences and software architecture. 
An arrangement that I've found helpful in software architecture is to provide for external attributes/preferences and internal attributes/preferences. 
The external attributes/preferences are known outside of the program while internal attributes/preferences are known only inside of the program. 
There are several advantages to this arrangement. 
One is that the names used for the external attributes/preferences can be renamed, aliased, etc and the internal attributes/preferences can be left the same. 
Only the mapping of the external attributes/preferences to internal attributes/preferences need be changes. 
This arrangement also allows for external attributes/preferences to be specified from different sources using names relevant to the source without needing to change the internal attributes/preferences. 
In this arrangement, values from CC/PP would be seen as external attributes/preferences from the CC/PP source. 
Also, a web page could be provided for specifying user preferences using attributes/preferences which need not have the same names as CC/PP. 
The names would be more relevant to the purpose of the web page where the names from CC/PP would be more generic. 
Assuming that a web site provides an ability to store a user's preferences from a previous visit, a user preference page and the handling for CC/PP, the following steps would probably occur when a user visits the web site: 1. set internal attributes/preferences from defaults 2. set internal attributes/preferences from stored user preferences 3. query user agent for CC/PP information 4.a. 
if no CC/PP information is returned, display a greeting web page with a link to user preferences web page which has a list of external attributes/preferences relevant to the web site 4.b. if CC/PP information is returned, set the internal attributes/preferences from the external attributes/preferences provided by the CC/PP. 
then display a greeting web page with a link to user preferences web page which has a list of external attributes/preferences relevant to the web site. 
(This web page will let a user over-ride values provided by CC/PP as might be needed for the particular session. 
It is also highly useful for debugging.) 
In this organization, CC/PP should identify major classes of disability, e.g. "blind", "upper arm limitations". 
The application would then translate these external attributes/preferences into possible internal attributes/preferences like "use simple format" or "include fast section navigation". 
(Ideally, the user preference web page would allow the user to turn off all features relevant to a disability or let the user pick and choose which disability features to include.) As near as I can tell, CC/PP isn't providing information about a person's disability. 
Scott W3C Web Accessibility Initiative http://www.w3.org/WAI 21 Mitchell Street, Footscray, VIC 3011, Australia 
One should note that serving one long document to all clients rather than several short alternatives can save badwidth as any form of content negotiation reduces caching, even in a perfect HTTP spec and a perfect implementation. 
Nir. Nir Dagan Assistant Professor of Economics Brown University Providence, RI USA 
Hi, Charles The problem with using something rather specific like "fast navigation" is that it limits the choices regarding accessibility that a web site can make in response to CC/PP information. 
For example, suppose that a web page is presenting information which can be more easily analyzed by blind users if the web page provides certain features. 
The CC/PP would not know about the existence of these features. 
However, if the CC/PP specifies that the user is blind, the web server could map the external attribute/preference of "blind" into a set of internal attribute/preference features appropriate for many blind users. 
(The blind user can fine tune the choices by the web site's user preference web page.) The question of how CC/PP attributes of "blind", "upper arm limitation", etc, will be received is a hard one. 
For example, some blind people will have no problem with that. 
Like one blind person said, how many people walk around with white canes or read with their finger tips? 
Other blind people will be concerned about something being labeled "blind". 
Whatever decision is made, someone will disagree with it. 
Scott 
Indeed. 
And announcing that the document depends on the user agent string seems to pretty much guarantee the worst, because there are thousands of different user agent strings, and a proxy cache server could have no idea whether two similar user agent strings were to be regarded as functionally equivalent or not. 
So at the very least, it has to contact the original server to enquire if the variant(s) it already holds are suitable. 
May I recommend the useful tutorial and links to other resources at: There's something to be said for sending a single document that is fully functional as-is, and doing any detailed presentational adjustments (for those who consent to enable client-side scripting) via javascript. 
best regards 
