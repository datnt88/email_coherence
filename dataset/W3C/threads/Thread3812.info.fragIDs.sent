Hello everyone, We'll be having a qa-dev IRC meeting next tuesday. 
Notes from last time are at: Ville told me that (even though in general mail worked best for him) the only possible times would be 18-24 EET, that is 17-23CET if I'm not mistaken. 
I guess that may also be best for the night folks among us. 
Would it thus be possible to hold a quick poll for tuesday's meeting? 
Please send me a mail stating your preference: - 14:00 CET (15:00 EET, 08:00 Boston/Montreal) - 17:00 CET (18:00 EET, 11:00 Boston/Montreal) thanks olivier 
Given the few answers I got, The following seems like a good schedule to try at least once. 
irc://freenode#validator tuesday, Feb. 3rd 17:00 CET (18:00 EET, 11:00 Boston/Montreal) for two hours (or till I fall asleep) Agenda ideas: - recent progress /work 
- Bjoern's CSS schema 
- validators' test suites agenda additions welcome if you think that won't be enough. 
olivier 
Which is at http://www.websitedev.de/css/schema/draft/ 
btw. 
Notes from 2003-02-03 IRC meeting. 
Attendees : Bjoern, Nick, Yves, Ville, Karl, olivier + lurkers (Regrets: Terje) Agenda: - CSS schema and parser - Checklink - Test suite/harness for validator(s) Action items after this meeting: AI (cont): Bjoern - write a specification for css schema AI (cont): Bjoern - contact libcroco maintainers AI (cont): Nick - investigate Apache2+modperl, play with :8001; AI (cont): olivier - review and integrate submitted error messages AI (new): Nick - demo test harness 
AI (new): Ville - send edited changelog for checklink 
AI (new): olivier - organize release cycle for checklink - CSS schema and parser Bjoern showed and explained his draft[1] (ideas and issues) of CSS schema. the basic idea is to have a language that helps writing tools for css and a new css validator. 
[1] http://www.websitedev.de/css/schema/draft/ 
The group then discussed available CSS parsers to work from (or lack thereof). 
Ideal would be a C (CPP) engine, other languages Ok as well. 
Existing products: SAC implementations are mostly vapourware, W3C CSS validator needs to be (partly) rewritten, libcroco the best-available approximation. 
Bjoern has a (continued) AI to contact libcroco developers and will proceed with that, and will work on his draft, show it to www-style at the end of february. 
- Checklink Currently Link Checker (checklink) tied to the Markup Validator (check) but the two have very different development process and speed. 
No specific reason for them to be tied (though nothing prevents against adding some integration glue somewhere if that is desired). 
Decision: We will work on a beta test and standalone release, as well as packaging of checklink ASAP. 
Ville will send a list/summary of changes from code in stable validator, olivier will prepare beta announcement from it. 
Future work: tearing apart / modularizing. 
Easier now that it should 
not go in the way of markup validator's release pace. 
- Test suite/harness Currently we have a basic list[2] of links as "test suite" for markup validator. 
Not sufficient, nor very flexible. 
[2]http://validator.w3.org/dev/tests/ 
What would be much better: (semi?) automated test system, a solid repository of test cases with description/expected result, and an easy (i.e not bugzilla-heavy) process to submit test cases (e.g with bug reports). 
Not only for markup validator, checklink. 
Olivier has been playing with the current tests and Log validator[3], but that does not address all necessary features, e.g test the validators ui, escaping html, uris, showing proper dialogs, etc. [3] http://www.w3.org/QA/2003/10/valtest/ Nick has ideas, will hack up a demo. 
Olivier will gather clear and full feature set and requirements. 
Next meeting : March 2nd, 2004, 17:00 CET (18:00 EET, 11:00 Boston/Montreal) olivier 
Ok, here goes a "NEWS"-like change log since the production version (full changelog available at - Improved redirect loop detection - Recursion scope checking fixes - Config option to disable checking documents on non-public IP addresses - new dependency on the Net::IP CPAN module - Markup improvements - Documentation improvements (command line options, embedded man page) - Various other small bug fixes 
I have started some initial work on this, implementing some per-document type (ie. 
MIME type) based handlers, akin to HTML::LinkExtor, using a factory pattern. 
Currently first cut implementations exist for generic XML documents (XML Base, XLink, XInclude) and CSS (using CSS::SAC which is currently broken for url(...) property values - only @import's work). 
Only the handlers are implemented currently, checklink does not even use them yet. 
Will continue that development and post betas for discussion after the next "production" checklink is out and modularization officially starts. 
