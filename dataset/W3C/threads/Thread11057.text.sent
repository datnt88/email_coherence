What's a Referrer? 
Section 4.2 reads: Many addressing mechanisms assume the existence of some sort of a base address whose value effects the interpretation of the address. 
To formalize this, every HREF has a location source, an object or objects which serves as the base address. 
In most cases the location source can "base address" needs definition. 
be omitted and is implied to be the document element of the document that contains the link. 
However, this implied location source can also be specified as being the non-link element that refers to the link element (the referrer). 
What does that last sentence mean? 
And if the "implied location source" (a.k.a. "base address", which is more homey) is specified, in what manner is it still implied? 
What is the reason for having both locsrc and implied-locsrc? 
And it seems as though the "base address" may vary with each occurrence of a link element. 
Do we need that? 
The location source is specified using the the location-source attribute. 
The format of the location-source string is not specified; to be useful, clearly it must be in a form that can be processed by the processor that can deal with the HREF and reference type to which it is attached. 
If the location-source attribute is omitted, the location source is implied according to the rule indicated by the IMPLIED-LOCSRC attribute. 
This implies that every HREF value has a "base address", whether the author intended to employ such a mechanism or not. 
I wouldn't be surprised if that assumption screws up some addressing scheme, though I don't have one in mind. 
Perhaps this should be qualified such that a "base address" is implied only if HRTYPE is an addressing scheme that uses a relative addressing mechanism. 
Also, the punt on the format of the string is unsatisfactory. 
We won't get interoperability unless we can say what the format must be; if this varies with HRTYPE then reference should be made to some canonical statement of what a "base address string" is for that HRTYPE (for HRTYPEs the use of which is anticipated) or it should be said that the specification of HRTYPEs that use relative addressing must include an unambiguous specification of "base address string" for that HRTYPE. 
Note that HRTYPEs not mentioned in this spec will not be implemented by all implementors. 
Regards, Terry Allen Fujitsu Software Corp. tallen@fsc.fujitsu.com 
"In going on with these experiments, how many pretty systems do we build, which we soon find outselves obliged to destroy?" - Benjamin Franklin A Davenport Group Sponsor: http://www.ora.com/davenport/index.html Terry Allen wrote about a point which puzzles me too: namely, In Section 4.2 the "implied location source" or "base address" for a link element can have one of two fixed values, DOCELEM and REFERRER. 
DOCELEM is the document element (of the document containing the link element, one assumes): that's clear enough. 
The REFERRER is "the non-link element that refers to the link element", which is puzzling, since in this scheme there's no apparent way for a non-link element to make a meaningful reference to a link element. 
My best guess on this is that the two sorts of base address we would want to see in this scheme (at least as our first options, perhaps to be supplemented by more) are really what the TEI extended pointer language calls ROOT and HERE: ROOT meaning the document element (for which this draft uses the attribute value DOCELEM), and HERE meaning the place where the link element is (rather than the place where some other element that somehow refers to it lives, which is what this REFERRER seems to be). 
If this is what's intended, or at least what makes sense as a specification, then perhaps the values ROOT and HERE would also be clearer than DOCELEM and whatever. 
("Document element" is not one of those opaque or misleading SGML terms, but it is still less self-evident to the masses than "root element", which is the gloss that this draft provides.) John Lavagnino Women Writers Project, Brown University And it should be defined for each of the closed list of addressing modes that XML supports. 
I think we need to decide hwo things are going to work, so that we are guaranteed that and XML link in an XML linking document can at least be parsed, and its pointers resolved, by any XML linking application. 
If people need to extend XML-LINK they can make an extension and use a new architecture (and steal whatever they need from ours, if they want to). 
I think it should be crystal clear what is and is not XML-LINK, and that extensions should be clearly OUTSIDE the spec. 
I think it's supposed to refer to the previous element in the location chain (if the processor happens to implement indirect location pointers) If we need locsrc at all, then it's worth having this. 
But I think we can probably do without locsrc. 
This should be cleared up by making explicit exactly what addressing schemes are supported, and how base addresses or whatever work with each. 
We should not have to worry about random new address scheme unless and until they are integrated into XML-LINK. 
They should simply not be allowed in documents that claim to conform. 
Otherwise we have blown the no-options requirement out of the water by adding an infinite number of undeclared options for addressing mechanisms. 
I think we need 3 basic types: + URLs, as currently used. 
+ Structural addressing, i.e. some method of navigating within an XML document that has a single URL. 
+ A way to use SGML entities and IDs for linking (perhaps mostly for compatibility with the SGML world, perhaps because the options it offers for management via entities are usful in their own right). 
If people need something else, they should use something other than XML linking to meet their needs. 
-- David I am not a number. 
I am an undefined character. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ 
