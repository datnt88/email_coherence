define the term 'interface' as a set of methods. 
But IDLs of DOM declare properties as well as methods. 
How to implement such properties on interfaces? 
What is standard de facto for implementation of that? 
As Java does, ::getXXX() and ::setXXX() is the answer? 
Or nothing special but up to each implementators? 
Best regard, kz. 
See the standard Java and Javascript bindings included with the DOM spec (and the non-standardized bindings available from other sources) for specific examples of how the abstract IDL concepts of "interface" and "property" are typically converted into actual callable APIs. 
Generally, an interface maps to whatever the specific language offers as a completely abstract class/interface/object-API. 
If the language can't offer that, the binding has to come up with some equivalent way to reference the objects. 
Generally, a property will be mapped to a getter method, a setter method, or both... but it may map to field access in some bindings. 
Again, this depends on the characteristics of the language you're developing the binding for. 
Joe Kesselman, IBM Next-Generation Web Technologies: XML, XSL and more. 
"The world changed profoundly and unpredictably the day Tim Berners Lee got bitten by a radioactive spider." -- Rafe Culpin, in r.m.filk 
It is generally up to the binding creator, not the implementor, to follow the rules of the binding when doing this sort of thing. 
In the case of Java, this means using a getter and setter. 
In the case of ECMAScript, this typically is exposed as a real attribute. 
When creating other bindings, the creator should use whatever is natural for the binding. 
Ray 
I meant it is up to the binding creator to establish the rules of the binding appropriate to the environment. 
He cannot follow what he is creating. 
