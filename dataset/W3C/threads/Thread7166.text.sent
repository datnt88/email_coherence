This message is prompted by some questions/comments I received from someone recently. 
I've not yet read the -03 draft in detail, so I may have overlooked some material. 
(1) hierarchical and non-hierarchical URIs I notice that in -03 the opaque-part syntax distinction has been dropped. 
My concern is that it may now not be clear when relative-to-absolute URI conversion should take part of hierarchical '/' characters in the URIs. 
Previously, my understanding was that an algorithm would look at the path component of the base URI and, if it starts with a '/', assume the base and relative URIs are hierarchical and apply the path-merging logic; otherwise, the opaque-part in the base URI is used in all-or-nothing fashion depending on what is present in the "relative" URI. 
Section 3 says "a non-hierarchical path will be treated as opaque data by a generic URI parser", but it's not clear at this point what constitutes a "non-hierarchical path". 
Section 3.3 says " A path is always defined for a URI, though the defined path may be empty (zero length) or opaque (not containing any "/" delimiters)", which suggests that an opaque path may not contain *any* un-escaped '/' characters. 
This seems like an onerous restriction, and in conflict with existing URI scheme usage; e.g. news: according to IANA is currently specified by RFC 1738, and has: A newsgroup-name is a period-delimited hierarchical name, such as "comp.infosystems.www.misc". 
A message-id corresponds to the Message-ID of section 2.1.5 of RFC 1036, without the enclosing " " and " "; it takes the form unique @ full_domain_name . 
A message identifier may be distinguished from a news group name by the presence of the commercial at "@" character. 
No additional characters are reserved within the components of a news URL. 
-- http://www.faqs.org/rfcs/rfc1738.html or mid:, defined by RFC 2392, which is clearly non-hierarchical, but: mid-url = "mid" ":" message-id [ "/" content-id ] -- http://www.faqs.org/rfcs/rfc2392.html 
Other non-hier URI schemes using '/' are: service: http://www.faqs.org/rfcs/rfc2609.html 
My suggestion would be to add a brief comment in section 3 clarifying the intent (as to what constitutes a hierarchical URI). 
My preference is that an absolute URI with net-path or abs-path form is hierarchical, otherwise not. 
(2) square brackets Is it necessary for square brackets to be reserved outside the net-path component? 
I personally use them quite often in fragment identifiers for references. 
My correspondent had another use for them in the path component of a URI scheme. 
I think there are several instances of them occurring (unescaped) in message-IDs, and the mid: spec doesn't require them to be escaped. 
I think this also applies to the ldap: scheme. 
-- http://www.faqs.org/rfcs/rfc2392.html -- http://www.faqs.org/rfcs/rfc2255.html 
#g Graham Klyne PGP: 0FAA 69FF C083 000B A2E9 A131 01B9 1C7A DBCA CB5E Please explain in what terms you find the 'mid' scheme to be "clearly non-hierarchical." 
MIME multiparts use the header-list form of metadata wrapper hierarchically, and this reference is a reference based on that hierarchy. 
This construction uses the '/' delimiter to indicate a part of an RFC-2822 object and it identifies it both by the ID of the outer message/multipart package and the ID of the inner object or MIME part. 
Al PS: In Universal Resource Locators: cid scheme There is some serious mis-information. 
The uniqueness of 'cid' values is global to the Internet, with similar schemes and reliability as regards 'mid' values. 
Also, the syntax for referencing Content-ID values together with their Message-ID contexts is well defined as quoted above. 
quote cite="http://www.faqs.org/rfcs/rfc2392.html" 
With the appended "content-id", it refers to a body part within a message, as does a "cid" URL. 
The Content-ID of a MIME body part is required to be globally unique. 
However, in many systems that store messages, body parts are not indexed independently their context (message). 
The "mid" URL long form was designed to supply the context needed to support interoperability with such systems. 
It's too bad the w3.org URL is delivering disinformation about MIME. 
This incorrect page comes up first in a Google search for "'cid' scheme". 
I meant in the sense that it does not conform to the normal rules for hierarchical URIs; e.g. given a base URI: mid:m@example.ord/c@example.org 
and a URI-reference: m2@example.ord/c2@example.org 
making an absolute URI from these parts using normal hierarchical URI rules would yield: mid:m@example.ord/m2@example.ord/c2@example.org which isn't a valid mid: URI. 
#g Graham Klyne PGP: 0FAA 69FF C083 000B A2E9 A131 01B9 1C7A DBCA CB5E But there is no use for the relative URI that you cooked up. 
Just because there are syntactically well-formed but semantically garbage examples that can be constructed doesn't mean that there is no hierarchy in the scheme. 
Just that the hierarchy isn't everything that you expect. 
If the second multipart was sent bundled in the same message as the first, the relative-URI calculus works fine. 
Base: mid:m@example.org/c1@example.org 
Relative: c2@example.org 
Resultant: mid:m@example.org/c2@example.org 
It's true that you can't root the relative URI with the '/' character, but it's also true that if that is what you want to do the alternative of starting fresh with mid: and having a fully qualified URI is not a major cost in characters. 
Because the Message-ID space pools all email messages regardless of authority, there is no point in using the relative URI you posited. 
In that sense these URIs are not hierarchical, in that the Message-ID and Content-ID namespaces are flat and not hierarchical by DNS domain. 
The hierarchical long form of mid: scheme reference to an object with an assigned Content-ID is redundant. 
The associated Message-ID is not required for identification but aids in recovery nonetheless. 
Within the limited confines of the hierarchical relationship between a MIME part and its enclosing MIME multipart bundle, the mechanisms of relative URI reconstitution into a fully-qualified 'absolute' URI work just fine. 
Beyond that, there is no *further* hierarchy in the scheme. 
To the extent that relative URIs are useful for references into MIME multiparts, the existing syntax and algorithm work. 
'Tain't broke. 
Don't fix it. 
But don't talk as though it isn't there. 
Al Without wishing to debate the semantic minutiae, I have code based on (my reading of) a previous version of the URI specification that processes the above example and produces a perfectly usable result, namely: mid:m2@example.ord/c2@example.org 
I.e. it uses just the scheme name from the base URI. 
The lack of a leading '/' in the base URI path is taken as an indicator that URI hierarchy rules don't apply, so the path component is treated as an opaque item to be replaced by that from the URI reference. 
Now, maybe my code is wrong. 
But it seemed to me a reasonable way to write some generic URI handling code that may be called upon to do relative-to-absolute mapping on any pair of URI-references, and it seems to produce results that are reasonable and workable. 
I find the latest revision of the spec, however, is open to an interpretation in which it is not possible to get a valid URI in this case. 
That is the basis of my original question -- I don't really care if the example does or does not have any element of hierarchy, but rather that I can understand how to properly process it and (hopefully) obtain a useful or usable result. 
#g Graham Klyne PGP: 0FAA 69FF C083 000B A2E9 A131 01B9 1C7A DBCA CB5E I've never used the base URI's path as an indicator. 
The problem with that theory is folks wanted to eliminate dot-segments from paths regardless of reference type. 
fixed. 
fixed. 
Says they must be percent-encoded (section 2). 
Note that any URL-illegal characters (e.g., spaces), URL special characters (as defined in section 2.2 of RFC 1738) and the reserved character '?' (ASCII 63) occurring inside a dn, filter, or other element of an LDAP URL MUST be escaped using the % method described in RFC 1738 [5]. 
If a comma character ',' occurs inside an extension value, the character MUST also be escaped using the % method. 
Nope. 
Square brackets have never been allowed in a URI before, so allowing them in the path may lead to errors in implementations that assumed they could use them internally. 
....Roy 
