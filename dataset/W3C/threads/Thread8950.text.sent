My comments pretty much parallel those of Joseph Reagle... From: "Glenn Adams" g_a_adams@email.msn.com 
Subject: XML DSIG Questions Date: Sun, 25 Mar 2001 10:26:14 -0500 Dear Mr. Reagle, I am the editor of the ATSC (Advanced Television Systems Committee) DASE (DTV Application Software Environment) Standard in which we are attempting to make use of the W3C XML-Signature Syntax and Processing specification under development. 
We will use X.509v3 certificates for all public key representations. 
I have a few questions/comments about the W3C XML DSIG (DS) recommendation: (1) regarding KeyInfo, it is unclear whether DS intends the KeyValue to contain the certificate data which contains the signing key or whether this would be contained in KeyInfo directly; for example, is the following example what is intended with respect to specifying the signing key? 
KeyInfo KeyValue X509Data X509IssuerSerial ... /X509IssuerSerial /X509Data /KeyValue X509Data !-- end-entity certificate -- X509Certificate ... /X509Certificate !-- CA certificate 1 -- X509Certificate ... /X509Certificate !-- CA certificate 2 -- X509Certificate ... /X509Certificate /X509Data /KeyInfo KeyValue is intended to include the actual key value and is an optional field. 
If you are providing an X.509 certificate chain and are doing things in the X.509 world, I don't know why you would include a KeyValue element. 
This differs from the example of using KeyInfo found in Section 4.4.4 where there appears no instance of KeyValue. 
Our requirements regarding the use of DS are: * The specific certificate (containing the public key) must be unambiguously identified without resorting to conventions of X509Data usage or heuristics. 
It appears that by using X509Data within KeyValue to identify the certificate satisifies this requirement. 
Although we aren't certain if this usage is intended (i.e., specifying a reference to (name/identity of) the certificate in KeyValue as opposed to providing the key itself in KeyValue. 
No, you just want to use the IssuerSerial element or SKI or SubjectName in the X509Data element to indicate the certificate. 
* The public key required to validate the signature must communicated solely within a signed structure, namely, within an X509Certificate, and not be extracted from the certificate into an unsigned structure, e.g., extracted into KeyValue. 
This requirement seems to be satisfied by only placing a reference to the certificate in KeyValue and placing the certificates into an X509Data element which is a peer of KeyValue. 
Certificates are not allowed in KeyValue. 
You want to use IssuerSerial, SKI, or SubjectName inside the same X509Data to indicate the certificate. 
(2) In general, it is difficult to determine the intentions of DS with respect to the use of X509Data directly within KeyInfo and the use of X509Data within KeyValue. 
We would suggest adding more examples and better descriptions of these intentions. 
As indicated by Joseph, we hope we have improved the wording. 
(3) What is the projected schedule for advancing to PR with this recommendation? 
Since we normatively reference this work, it will be necessary for it to advance to recommendation status prior to our balloting our standard. 
Regards, Dr. Glenn Adams Acting Chair, ATSC T3/S17 DASE Specialist Group While I hope the above information will solve your problem and we do specifically provide several ways to designate the certificate with the validation key, it sounds a bit like you are locking yourself into a design where you have to include the certificate, or perhaps even the certificate chain, with every signature. 
Since certificates tend to be bulky, some systems are designed to minimize cerficiate transmissions and used cached certificates where possible, requesting certificates when needed. 
Thanks, Donald Donald E. Eastlake 3rd Donald.Eastlake@motorola.com Motorola, MS: M2-450 +1 508-261-5434(w) 20 Cabot Boulevard dee3@torque.pothole.com 
Mansfield, MA 02048 USA +1 978-562-2827(h) Thanks. 
See further comments below. 
We apparently misinterpreted the statement in Section 4.4 which says: "compliant versions MUST implement KeyValue (section 4.4.2)" 
It was not clear to us whether this required the use of KeyValue in content (i.e., in a Signature element) or required support for (the semantics of) KeyValue in an interpreting application. 
Our reading of the DTD fragment: was that X509Data was permitted in KeyValue, which, based on our misunderstanding about KeyValue being required, led us to conclude we could place a reference to an X509 certificate inside of X509Data inside KeyValue. 
Our requirements at this time are based strictly on a broadcast only environment with no return channel, in which case we do require delivery of a certificate chain up to but not including some bridge CA certificate. 
Furthermore, we presently do not permit certificate caching due to lack of support for CRL distribution. 
Our initial design is based on these constraints, which we expect to relax in the future when we add return channel support. 
So, to return to our attempt to understand XML DSIG's support for X509, we understand that each Signature element can contain one KeyInfo element which can contain multiple X509Data elements. 
What isn't clear is, if we deliver multiple certificates within a KeyInfo element (including the end-entity certificate used to sign SignedInfo as well as one or more CA certificates useful in constructing one or more possible certification paths), whether these multiple certificates should be placed into a single X509Data element or into multiple X509Data elements. 
The present language of Section 4.4.4 states: "different certificates (related to that single key) MUST be grouped within a single KeyInfo element but MAY occur in multiple X509Data elements" This language seems to state that the certificates may appear in one or in multiple X509Data elements. 
In this regard, when would it be important to use one versus multiple X509Data elements? 
Can we limit our usage to one and only one X509Data element without significant loss of generality? 
Regards, Glenn Adams Get your FREE download of MSN Explorer at http://explorer.msn.com 
Hi, From: "Glenn Adams" g_a_adams@hotmail.com 
Date: Mon, 26 Mar 2001 16:45:48 -0500 (EST) X-Originating-IP: [206.229.91.132] Old-Date: Mon, 26 Mar 2001 16:44:39 -0500 Message-ID: F178EBWEVTPStw7Tsvo0000b339@hotmail.com implement != use OK. Yes, you can always just use one X509Data element. 
I believe the concept was that you might have multiple end certificates containing the same key and authenticated via different chains, in which case you can put each end-entity cert and chain in a seprate X509Data element. 
However, of course, things can get complicated and it could be that you have multiple end-entity certs for the same key in different X509Data elements that are authenticated by a chain whose root and perhaps near-root certs are the same, in which case you could cose to watefully duplicate them between X509Data elements, assume an intelligent cert cache that the certs were all dumped into which could find chains, or lump everything into one X509Data element... Thanks, Donald Donald E. Eastlake 3rd dee3@torque.pothole.com 
155 Beaver Streeet lde008@dma.isg.mot.com 
Milford, MA 01757 USA +1 508-634-2066(h) +1 508-261-5434(w) 
