Actually, in that context you wouldn't even need to go to Unicode characters, you could use the return value "#default" when the URI matches the default namespace and leave "" for no match. 
The design of element.getAttribute() 
seems to have anticipated the problem by explicitly returning "" instead of null when the attribute name is not found. 
Many consider that a wart. 
It made us require another method to test for attribute existence. 
For already recommended methods, there needs to be a resolution that accomodates the deployed implementations where Java implementations return null and ECMAScript implementations return "". 
However, for L3 methods, avoiding the use of null DOMString parameters and attributes in the definition would preempt having to deal with it in the bindings. 
If I am not mistaken, ECMAScript implementations which substitute "" where the spec says null are broken. 
That does not preclude other bindings from making that substitution where required, but the ECMAScript binding does not require it. 
Log a bug against mozilla and vote for it. 
I was told it is clearly broken behavior. 
Ray Whitmer rayw@netscape.com 
Since null and "" are indistinguishable on some bindings See previous discussion: there are pre-existing places where the distinction may be meaningful, and the binding which chooses to create this situation is responsible for deciding how it will be handled. 
(Note that it _IS_ a choice, since a reserved value other than "" could have been used to represent the null string. 
Given Unicode, it isn't hard to come up with a string which is exceedingly unlikely to ever collide with actual data!) Joe Kesselman / IBM Research Actually, in that context you wouldn't even need to go to Unicode characters, you could use the return value "#default" when the URI matches the default namespace and leave "" for no match. 
The design of element.getAttribute() 
seems to have anticipated the problem by explicitly returning "" instead of null when the attribute name is not found. 
For already recommended methods, there needs to be a resolution that accomodates the deployed implementations where Java implementations return null and ECMAScript implementations return "". 
However, for L3 methods, avoiding the use of null DOMString parameters and attributes in the definition would preempt having to deal with it in the bindings. 
There is already a pretty substantial discussion on this in bug 69468, that support for null DOMStrings didn't make the cutoff for 0.9.4. 
I assume that after this work is complete, that DOM functions that should return null DOMString's and those that take null strings are parameters will work per spec and like the Java binding. 
Microsoft MSXML is a little more complicated. 
Most DOM 1 routines that should return null DOMString's (Node.nodeValue in particular) do, however the publicId and systemId attributes of Entity and Notations will return "" when the corresponding Id is not present. 
DOM routines that should take null strings as an parameter (for example, hasFeature() or any of the *NS methods) have problems from both Mozilla and MSXML from JavaScript and Visual Basic. 
I would assume the problem will be fixed for Mozilla with the resolution of bug 69468. 
However, the issue with null string parameters from Visual Basic and JavaScript could be avoided by defining the parameter as a VARIANT instead of a BSTR. 
Null BSTR's can be passed null from C++, however attempting to pass null to a BSTR argument from VB or JScript will result in a type mismatch. 
So it looks like ECMAScript bindings can be brought into line without much more pain. 
There are still other non-standard bindings where the obvious DOMString (for example, C++ STL str::basic_string) can't represent null strings. 
So having, for example, having lookupNamespacePrefix() return "#default" if the default namespace is matched and null if not matched would reduce the pain on those bindings. 
