(TOP (S (NP (PRP I)) (VP (VBD got) (NP (NP (DT a) (NN bug) (NN report)) (PP (IN with) (NP (NNP Java) (JJ tidy))) (SBAR (WHNP (WDT that)) (S (VP (VBZ applies) (PP (TO to) (NP (person (NNP C)) (JJ tidy))) (ADVP (IN as) (RB well))))))) (. .)) )
(TOP (S (S (NP (PRP I)) (VP (VBD spent) (NP (DT some) (NN time)) (S (VP (VBG arriving) (PP (IN at) (NP (NP (DT a) (JJ small) (NN test) (NN case)) (SBAR (WHNP (WDT that)) (S (VP (VBZ shows) (NP (DT the) (NN problem))))))))))) (, ,) (CC but) (S (NP (PRP it)) (VP (AUX 's) (NP (DT a) (JJ little)) (PP (IN beyond) (NP (PRP me))) (ADVP (RB right) (RB now)) (PP (IN as) (PP (TO to) (SBAR (WHADVP (WRB how)) (S (VP (TO to) (VP (VB fix) (NP (PRP it)))))))))) (. .)) )
(TOP (S (NP (PRP It)) (VP (VBZ appears) (SBAR (IN that) (S (NP (JJ tidy)) (VP (VBZ tries) (S (VP (TO to) (VP (VB return) (NP (DT a) (NN node)) (PP (IN from) (NP (DT an) (JJ empty) (JJ inline) (VB stack)))))))))) (. .)) )
(TOP (S (S (NP (NNP C) (JJ tidy)) (VP (AUX does) (RB n't) (ADVP (RB actually)) (VP (VB GPF)))) (, ,) (NP (PRP it)) (ADVP (RB just)) (VP (VBZ reads) (NP (JJ unallocated) (NN memory))) (. .)) )
(TOP (S (NP (NNP Java) (JJ tidy)) (VP (VBZ throws) (NP (DT an) (NN exception)) (SBAR (WHADVP (WRB when)) (S (VP (VBG accessing) (NP (DT a) (JJ 0-sized) (NN vector)))))) (. .)) )
(TOP (SINV (SBAR (IN If) (S (NP (PRP you)) (VP (VBP put) (NP (NP (DT the) (NNS lines)) (VP (VBN marked) (PP (IN with) (NP (CD *))))) (PP (IN into) (NP (NP (DT the) (NN function)) (VP (VBN InsertedToken) (PP (IN in) (NP (CD istack.c))))))))) (, ,)) )
(TOP (S (NP (PRP you)) (VP (MD will) (VP (VB see) (S (NP (NP (DT the) (NN message)) (`` ``) (NP (JJ 0-size) (NN istack)) ('' '') (VP (VP (VBN printed) (PP (IN as) (NP (JJ tidy) (NNS parses))) (NP (DT the) (NN example))) (PRN (-LRB- -LRB-) (JJ illegal) (-RRB- -RRB-)) (NP (NNP HTML)))) (VP (VBP file) (PP (IN below)))))) (. .)) )
(TOP (S (VBZ Regards) (, ,) (person (NNP Andy) (NNP Quick)) (JJ ----) (IN from) (NNP InsertedToken) (-LRB- -LRB-) (NNP Lexer) (NNP *) (NN lexer) (-RRB- -RRB-) (JJ ----) (NN node) (SYM =) (NNP NewNode) (-LRB- -LRB-) (-RRB- -RRB-) (: ;) (JJ node-) (NN type) (SYM =) (NNP StartTag) (: ;) (JJ node-) (JJ implicit) (SYM =) (UH yes) (: ;) (JJ node-) (VB start) (SYM =) (JJ lexer-) (NN txtstart) (: ;) (JJ node-) (NN end) (SYM =) (JJ lexer-) (NN txtstart) (: ;) (NN istack) (SYM =) (JJ lexer-) (NN insert) (: ;) (NNP *) (IN if) (-LRB- -LRB-) (JJ lexer-) (VB istacksize) (CD ==) (CD 0) (-RRB- -RRB-) (NNP *) (NN tidy_out) (-LRB- -LRB-) (JJ lexer-) (NN errout) (, ,) (`` ``) (JJ 0-size) (NN istack) (. !) (CD \n) ('' '') (-RRB- -RRB-) (: ;) (JJ node-) (NN element) (SYM =) (NN wstrdup) (-LRB- -LRB-) (JJ istack-) (NN element) (-RRB- -RRB-) (: ;) (JJ node-) (NN tag) (SYM =) (JJ istack-) (NN tag) (: ;) (JJ node-) (VBZ attributes) (SYM =) (NNP DupAttrs) (-LRB- -LRB-) (JJ istack-) (VBZ attributes) (-RRB- -RRB-) (: ;) (JJ ----) (NNP HTML) (NN test) (NN case) (JJ -----)) )
(TOP (S (NP (PRP I)) (VP (VBP think) (SBAR (S (NP (DT this) (NN bug)) (VP (AUX has) (VP (VBN existed) (PP (IN for) (NP (DT a) (NN while)))))))) (. .)) )
(TOP (NP (NNP See) (PRN (: :) (S (-LRB- -LRB-) (S (NP (NP (person (NNP Andy)) (POS 's)) (NN description)) (VP (VBD rang) (NP (DT a) (NN bell)))) (, ,) (CC so) (S (NP (PRP I)) (VP (AUX had) (S (VP (TO to) (VP (VB check))))))) (: ...) (-RRB- -RRB-)) (person (NNP Randy))) )
(TOP (S (NP (PRP I)) (VP (VBP think) (SBAR (S (NP (DT this) (NN bug)) (VP (AUX has) (VP (VBN existed) (PP (IN for) (NP (DT a) (NN while)))))))) (. .)) )
(TOP (NP (NNP See) (PRN (: :) (S (-LRB- -LRB-) (S (NP (NP (person (NNP Andy)) (POS 's)) (NN description)) (VP (VBD rang) (NP (DT a) (NN bell)))) (, ,) (CC so) (S (NP (PRP I)) (VP (AUX had) (S (VP (TO to) (VP (VB check))))))) (: ...) (-RRB- -RRB-)) (person (NNP Randy))) )
