This is the usual weekly call for agenda items. 
Please can I have any by 
noon uk time Thursday please. 
On my list of possibles I have: o abstract syntax - I'd prefer a whole proposal rather than specific questions 
o semantics of untyped literals Thats about it for now. 
Brian 
[Patrick Stickler, Nokia/Finland, (+358 50) 483 9453, patrick.stickler@nokia.com] 
Here is my proposal: 1. Explicitly typed non-XML literals (typed literals) would be represented in the abstract syntax by a single node, having as its label a tuple (ddd, "LLL") where ddd is the URIref value of rdf:datatype and "LLL" is the literal, including any xml:lang suffix, if present. 
The proposed representation in N-Triples is to directly concatenate the datatype URIref to the double-quote delimited literal string. 
Explicitly typed literal nodes are syntactically and semantically tidy. 
Thus would result in the triple #Jenny #age #integer "10" . 
and would result in the triple #Jenny #age #integer "10"-en . 
2. Non-explicitly typed non-XML literals (inline literals) would be represented in the abstract syntax by a single node, having as its label a tuple (ID, "LLL") where ID is an autogenerated and globally unique system ID and "LLL" is the literal, including any xml:lang suffix, if present. 
The proposed representation in N-Triples is to directly concatenate the system ID to the double-quote delimited literal string. 
Non-explicitly typed literal nodes are syntactically tidy, though given their unique system ID component each occurrence results in a distinct node. 
The semantics are not at present specified, but could be either tidy or untidy. 
Thus would result in the triple #Jenny #age _:x"10" . 
and would result in the triple #Jenny #age _:x"10"-en . 
3. XML literals would be excluded from taking an explicit datatype -- i.e. rdf:datatype and rdf:parseType would be mutually exclusive attributes -- and are represented in the abstract syntax by a single node with a label consisting of the XML flag, the XML content string, and optionally an xml:lang suffix. 
XML literals are syntactically and semantically tidy. 
Thus would result in the triple #Chapter1 #title xml" h1 Datatyping and other Horrors /h1 " . 
and would result in the triple #Chapter1 #title xml" h1 Datatyping and other Horrors /h1 "-en . 
Cheers, Patrick 
Sorry, I missed the deadline ... 
I suggest an abstract syntax along the lines of: An RDF Literal Node can be labelled with one of: - an RDF String Literal (as now) - an RDF XML Literal (as now) - a value from the value space of a datatype. 
We simply note that an implementation that is unaware of a specific datatype used in an RDF/XML document will need to store the datatype URI + lexical form pair as a fall-back. 
An RDF Graph contains precisely one triple for each Literal node in the graph. 
[As I have previously indicated this extreme syntactic untidiness is practically indistinguishable from extreme tidiness, but leaves Pat more room to wriggle.] 
I will send another e-mail, replying to this to motivate the use of values 
rather than Patrick's preference for pairs. 
Jeremy 
Benefits: 1. Implementations don't need to store the original string, fits with almost all plausible implementations of values. 
(e.g. in a database) 
2. Makes the Closed World Assumption on datatyping. 
This is more accurate than an Open World Assumption. 
When the document author writes my:datatype "10" they know already whether they mean the string "10", the number 2 (binary), or 10 or 16 (hex). 
They are not saying that they are going to make up their mind later about what the "10" means. 
my:datatype is already defined and they are using that definition. 
Someone else shouldn't come and redefine my:datatype so that "10" means something else. 
I agree with Patrick that it has a weakness to do with implementations that do not know a particular datatype have to fallback to something like his proposal; which licenses two slightly different behaviours. 
However, note 
that XML Schema Datatypes is closed. 
There are only the predefined basic types and (possibly user defined) types derived from them. 
Hence, at least in principle, an RDF implementation could know all possible predefined datatypes and the rules for understanding a user definition of a new type. 
Jeremy 
Firstly, let me say that I am very sympathetic to Jeremy's interests in making the abstract syntax as easy as possible to realize in various RDF applications, and in principle, am very much in favor of making it as close as possible to practical concrete representations that might be used. 
That said... ;-) "ext Brian McBride" bwm@hplb.hpl.hp.com 
What about round-tripping? 
Does the application then just choose any suitable datatype and lexical representation as it likes, rather than the original pair it recieved? 
What if the RDF/XML is being returned to the system it originated from, and a datatype that is not recognized or supported by the originating system is used? 
An application is free to derive and store a native value for each typed literal pairing as part of the internal representation of the typed literal node while still respecting and preserving the datatype/lexicalform label that exists in the abstract graph. 
The abstract graph should exemplify genericity, system neutrality, and portability. 
It should not presume anything about system or platform specific characteristics or innate knowledge about datatypes. 
It is a tool for interchange between *any* arbitrary RDF systems, irregardless of what extra-RDF knowledge those systems might have about particular datatypes, or particular URI schemes, etc. True, many applications will grok the XML Schema predefined types, and probably a number of other commonly used types, and those applications are certainly free to (and would be expected to) interpret typed literal nodes according to the actual values denoted when making comparisons, etc. 
But that does not mean that the abstract graph should do anything but reflect the actual assertions made, and those assertions are made in terms of a *specific* datatype URIref and a *specific* lexical form, and just as the XML flag and xml:lang information, that should not be discarded in the abstract syntax, but preserved and respected. 
Yes, as will any application that knows about the datatype my:datatype . 
But knowing that the value is 2 is not necessary to denote the value unambiguously in the abstract syntax. 
How could they? 
The "owner" of the datatype says what value the lexical form denotes. 
Someone else can't come along and change the L2V mapping. 
Using the pairing of datatype URIref and lexical form is just as "closed world" as using the value as the label of the node. 
The "owner" of a URIref says what it denotes, and if they say that it denotes a particular datatype with particular characteristics, someone else can't come along and change that (at least not in any socially acceptable fashion). 
But even more, how to applications that interact with e.g. a triples store that has opted to map as many typed literal pairing labels to values tell that triples store which datatypes the client application also groks so that the triples store knows which to re-map back into pairing labels versus leaving as values?! 
This introduces a *huge* interoperability issue, and completely unnecessarily. 
Each application should itself decide which typed literal nodes it is able to interpret as values, and if it likes, store that value statically internally, but the label of that node is not the value, but the bi-part name of the value consisting of the datatype URIref and a lexical form, and it is that bi-part name that it should use by default when interacting with other RDF applications by generic means (e.g. RDF/XML). 
Actually no. XML Schema does not provide the machinery for actually defining the L2V mapping for user-defined datatypes which are direct subtypes of xsd:anySimpleType, therefore it is not possible for an RDF application to know what some arbitrary datatype might mean simply based on the XML Schema machinery. 
Also, RDF datatyping is not restricted to XML Schema datatypes, and should not be. 
I believe that having values as labels in the abstact graph will introduce portability and interoperability problems between applications as well as misunderstandings and conflict between application developers insofar as different applications/platforms are able to natively interpret and represent different sets of datatyped literals. 
I also believe it further complicates round-tripping 
of RDF/XML which already is problemmatic and has been clearly identified as an important functionality of RDF systems. 
Furthermore, I don't see that having values as labels in the abstract graph actually provides any substantial benefit to developers, as they are free to use actual values in their internal representation anyway, and will anyway have to use bi-part labels for unsupported datatypes. 
It introduces a variable abstract graph from application to application and two variant representations for typed literals whether the datatype is understood or not. 
It seems to me to be far clearer, consistent, portable, and reliable to label typed literal nodes with generic pairings than actual values and leave application developers to decide themselves if/how they wish to intern the actual denoted values into their system-specific representations. 
Cheers, Patrick 
This is a good point Patrick and seems like a pretty general question, independent of our choice of abstract syntax. 
If an application is serializing a graph for transmission to another application, how does it choose what datatype representation to use. 
There are two assumptions in Patrick's statement here that I'm not sure are valid: 
o that all information in a model will have been de-serialized from some serialization with specific datatypes used 
o that an application receiving information represented as rdf/xml will understand the same set of datatypes as the one that provided the information in the first place. 
We could help to make the second of these true with some strong words of encouragement to use particular datatypes, e.g. xml/schema. 
[[When serializing an RDF graph, the use of xml/schema datatypes is recommended for representing datatype values where the datatype capabilities of the receiving system are not known.]] 
How would folks feel about such a strong endorsement of schema datatypes? 
Would you like an action to analyze this issue and document those problems in more concrete terms. 
Brian 
[Patrick Stickler, Nokia/Finland, (+358 50) 483 9453, patrick.stickler@nokia.com] 
Actually, I make neither of these assumptions... 
I guess I was (as usual) woefully unclear... 
If the information hasn't come from RDF/XML, then it's not round-tripping, is it? 
If the values originate within the given system, then serializing them will be the first time they are expressed in RDF/XML and hence with a datatype and lexical form. 
But this is missing the point I think. 
The point is that, although a given application is free to do whatever it wants to the RDF knowledge it recieves, including mapping terms used in the original expression to other terms or representations, the abstract syntax itself should respect, preserve, and reflect the original language of expression. 
Having datatype+lexicalform labels mapped to actual values in the abstract syntax (a) fails to reflect the original language of expression, (b) presumes that round-tripping is not important (by discarding the information necessary to accomplish it). 
Whether or not a given application does these things is irrelevant. 
It might. 
It might not. 
If an application discards the original terms of expression and thus cannot provide round-tripping, well, cest la vie. 
But the abstract syntax should not *encourage* such behavior from applications. 
A given application need not operate based on the original language of expression. 
It may choose to augment it in favor of interned values. 
But the abstract graph, the *standard* model of representation for that knowledge, which that application is intended to capture and operate on, should not casually discard the original language terms if it ever intends to re-serialize them and return them to their source. 
I do not assume this. 
No more so than I assume that all RDF applications will understand all terms of all vocabularies used to express RDF statements. 
We really need to be careful to keep separate the abstract graph from the application specific representation, which I feel is getting all mixed up here. 
ASSERTION: The abstract graph should capture the statements made in the RDF/XML, in the original language of those statements. 
Whether some application, based on special knowledge, chooses to equate various terms and merge nodes or do other modifications to its own internal representation accordingly is completely irrelevant to our specification of the abstract graph. 
An application may very well choose to transpose the scheme and domain name prefixes of all http: URIs so as to merge cases such as http://FOO.COM... and http://foo.com... into a single node, but the abstract graph does nothing of the sort. 
Nor should the abstract graph itself reflect any kind of semantics-based merging of e.g. xsd:integer "10" and xsd:integer "010" etc. even *if* some particular application chooses to do so in its own internal representation. 
Again, the abstract graph should capture the statements as they were expressed, and not merge or modify those expressions based on extra-RDF semantics (and merging equivalent datatype values *is* based on extra-RDF semantics). 
Sorry to seem to be nothing but a naysayer, but I would not be comfortable with any such recommendation. 
I believe that the language of original expression should be respected and preserved by the abstract graph, and unless applications have a very good reason to do otherwise, should also be respected and preserved on re-serialization. 
Is that a ploy to shut me up ;-) If a significant body of the WG feels that the proposal to label typed literal nodes with actual values has sufficient merit and should be seriously considered, then I would would be prepared to do this. 
As to what you mean by "concrete terms", nothing I would present would be anything but hypothetical. 
Patrick 
I'd love to know what "original anguage" means, because it seems to me on a first glance (my reading, anyway) that this assertion is probably false. 
jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ Semantic rules, OK? 
[Patrick Stickler, Nokia/Finland, (+358 50) 483 9453, patrick.stickler@nokia.com] 
Meaning, if someone expresses a statement using specific URIrefs, literal strings, or other explicit names in the RDF/XML, those same URIrefs, literal strings, and other names should be preserved in the abstract graph, not mapped to "something else". 
Just as it would IMO be unnacceptable for the abstract graph to label a node as http://foo.com/blargh when the URIref specified in the RDF/XML was http://FOO.COM/blargh, 
I also consider it unacceptable for the abstract graph to label a node with ten if the RDF/XML said ... rdf:datatype="&amp;xsd;integer" 0010 /... or even to label the node with xsd:integer "10". 
The original language used the lexical form "0010" and that should be reflected in the abstract graph. 
Applications are free to do what they will with the abstract graph, but *every* application should base its behavior and internal representation on the same exact abstract graph, which should unambiguously and accurately reflect the terms used in the original RDF/XML. 
Whether an application religiously mirrors the abstract graph in its internal representation, or does something radically different is no business of ours, in defining what the standardized abstract graph contains. 
Patrick 
