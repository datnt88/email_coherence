Markus, I'm not necessarily opposed to registration of SCSU, but I think there is a problem here. 
Additional Information: SCSU is a Character Encoding Scheme for Unicode/ISO 10646 that allows significant size reduction of text compared to UCS Transformation formats. 
SCSU does not meet the definition of a "Character Encoding Scheme" as defined in Unicode Technical Report #17, Character Encoding Model. 
UTR #17 states: "SCSU ... should also be conceived of as [a] transfer encoding syntax. 
[It is] not appropriate for registration to get [a] formal charset identifier, since the compressed forms are not unique, but depend on the sophistication of the compression algorithm." 
I don't know whether this would absolutely disallow a charset registration for SCSU, but we should be clear that while SCSU *de*coding is uniquely defined, SCSU *en*coding is not. 
--Ken Additional Information: SCSU is a Character Encoding Scheme for Unicode/ISO 10646 that allows significant size reduction of text compared to UCS Transformation formats. 
I missed this part of UTR #17. 
I am reading it now. 
UTR #17 defines: "A transfer encoding syntax is a reversible transform of encoded data which may (or may not) include textual data represented in one or more character encoding schemes." 
(Emphasis in the Report on the first instance of "data".) It then lists as examples base64, uuencode, gzip, and others. 
On the other hand, SCSU is designed specifically for Unicode text, not general data. 
The aspect of compression does not, according to the rules of IANA registration and unlike stated in UTR #17, preclude the use as a charset. 
SCSU defines encoding choices for Unicode code points. 
It does offer choices, but it essentially encodes Unicode text. 
Again, from UTR #17: "A character encoding scheme is a mapping of code units into serialized byte sequences." 
It is not a one-to-one mapping, but it is a well-defined, reversible mapping - unless you define "mapping" very closely. 
See also the charset examples below. 
In my opinion, SCSU is closer to a CES than a TES. 
At best (worst?), 
SCSU is in a gray zone between the CES and TES definitions, or it is both. 
While this is true, SCSU does fit the definition of a charset: "... a method of converting a sequence of octets into a sequence of characters. 
..." (From the draft registration procedure, section 2.3 "Charset".) 
This does not require uniqueness. 
Also, other charsets do not provide uniqueness: - ISO-2022 allows the same character encoded in as many different ways as are accessible with different embedded charsets. 
ISO-2022 is also stateful. 
- EUC-TW duplicates the entire plane 1 of CNS 11643-1992 in Code set 1 (2 bytes/char) and Code set 2 (4 bytes/char). 
(Reference: Ken Lunde's "CJKV Information Processing", pp. 162-164) I find SCSU highly useful for something like XML. markus (This is an updated proposal that incorporates feedback from Kenneth Whistler, Harald Tveit Alvestrand, and Martin J. D?rst.) Charset name: SCSU Charset aliases: (none, except for the implicit csSCSU) Suitability for use in MIME text: No Published Specification: Unicode Technical Report #6 "A Standard Compression Scheme for Unicode" CCS &amp; CES: The SCSU charset is a combination of the Unicode and ISO 10646 Coded Character Set (CCS) with the Character Encoding Scheme (CES) specified in the above document. 
It covers exactly the UTF-16-reachable subset of ISO 10646. 
SCSU can also be classified as a Transfer Encoding Syntax (TES), but one specifically designed for Unicode/ISO 10646. 
ISO 10646 equivalency table: Same as specification. 
Additional Information: SCSU is an encoding (CES/TES) of Unicode/ISO 10646 that allows significant size reduction of text compared to UCS Transformation formats. 
It approximates the size of text that is otherwise achieved with language-specific charsets while encoding all of Unicode (up to U-0010ffff). 
SCSU is byte-based, which helps further, traditional compression (LZW etc.). 
It is stateful and uses all byte values including NUL. CRLF may or may not be represented by 0x0d 0x0a depending on the encoder and the text. 
Encoders can be trivial by emitting one command byte (0x0f) followed by the text in UTF-16BE. 
Fairly simple encoders yield good results with average text of any length. 
Decoding is simple and requires no mapping tables. 
If no control characters other than NUL, TAB, CR, and LF are used, then text in US-ASCII or ISO-8859-1 is already valid SCSU text. 
There is a Unicode signature byte sequence defined (0e fe ff, see specification). 
SCSU is of no use for applications that require a canonical representation of text. 
It is not suitable for process-internal use. 
This is an intentional part of its design. 
Personal &amp; email address to contact for further information: Markus W. Scherer IBM Java Technology Center 10275 N. DeAnza Blvd Cupertino, CA 95014-2237 markus.scherer@jtcsv.com 
schererm@us.ibm.com 
Intended usage: LIMITED USE Thank you for your consideration, markus 
