I have recently been devoting consideration to the reading order issue and would like to share some initial thoughts. 
For purposes of the present discussion, the following definitions hold: 1. "Document order" denotes the order in which the elements comprising a document are given in the object language (E.G. HTML). 
2. "Presentational order" refers to the sequence in which the elements of a document are to be presented in the output. 
Style sheet properties could be defined which enable the document order to be modified according to specific rules so as to establish the presentational order. 
This could be achieved by means of properties which cause selected elements to be transposed within the document structure during the formatting process. 
Thus, an element could be moved to the beginning or end of the block defined by its parent element, or to the beginning or end of its grandparent block, etc. 
This would enable certain parts of the document (such as tables, perhaps also descriptions contained within OBJECT elements etc.) to be moved to the beginning or, perhaps more frequently in practice, the end of a section of the document, or indeed to the beginning or end of the document itself. 
Selection of elements would be based on CLASS or ID values. 
In the former case, all of the elements of a particular class would be moved, with the movement operations taking place sequentially throughout the document. 
It should also be possible to move a selected element so that it precedes or follows another designated element, the latter being identified by a specific ID value. 
Provision should also be made for moving specific elements to the beginning or end of the document, thus allowing navigation bars and forms to be relocated as required. 
Perhaps this can be achieved by the generic movement controls described above, given that the text of the document is entirely enclosed within the BODY element; thus a command that moves the selected element or elements to the end of the second level of the document hierarchy would achieve the desired result (I am counting the HTML element as the first, or outermost, level in the hierarchy). 
The development of an ordering mechanism should not be considered in isolation from the CSS work on notes. 
The treatment of an element within the document as a note essentially involves two steps: (1) substituting a reference marker (whether it be an asterisk, a sequential letter or number, or another character) for the original element; and (2) moving the original element to another location in the presentational order (E.G. to the bottom of the page, the end of the paragraph or document division, etc.). 
This second stage requires, at least in so far as it allows notes to be collected at the end of a paragraph or other structural component in the document hierarchy, the kind of control over presentational order that has already been described. 
Moreover, for the purpose of spoken or braille output, it is often convenient that notes be floated to the end of an enclosing paragraph or section than is the case in print formatting. 
However, the following example, which employs hypothetical style properties for affecting the presentational order, would also be useful in print: p class="note" Text of note. 
[...] and later in the document: A style property would be included in the relevant style sheet, or in the head of the document, which would cause the notes to be moved, in order of their occurrence in the HTML source, to a location which is defined as heading, which would not be displayed on screen due to the "display: none" style property). 
Incidentally, I would like confirmation from a CSS expert of whether, due to the default media type of SCREEN, the heading in the foregoing example would be suppressed from screen output, but would still appear in print or an audio rendering as desired. 
Another style property would, of course, also need to be given, which would define the kind of reference marker that would be used in the main text of the document to indicate the note. 
With regard to tables, it may be necessary to define style properties that would enable elements to be arranged, in the presentational order, in accordance with numerical values supplied in their ID attributes. 
I seem to recall discussion of such a possibility on the list. 
In closing, I wish to emphasise that I am definitely not an expert in the document ordering issue, and have not had time to read relevant parts of the DSSSL standard, in which a transformation language is defined that could perhaps provide a suitable model on which to build a CSS mechanism for rearranging the structure of documents. 
I am sure that members of this working group who have had more experience in this field can quickly decide whether the ideas expressed in this message are of any value. 
Regards, Jason. 
Further to my last message, the sections of the CSS 2 draft which discuss flow objects and the "visual flow model" appear to be of limited relevance to the reading order problem. 
The flow model is primarily concerned with the positioning of elements in a two-dimensional space (the canvas) rather than manipulation of the document's structure. 
However, some of the properties (FLOAT in particular) might perhaps be extended to accommodate additional functions associated with controlling the presentational order, as discussed in my previous message. 
It might of course be more convenient to define entirely new properties rather than burdening the existing properties with new syntactic constructs and additional purposes which, although related to positioning in general, are not directly concerned with visual formatting. 
All of the reading order transformations (and more) were part of AsTeR. 
Doing such things requires a generic tree transformation language, and CSS is in general not capable of such tree transformations. 
In the run upto the October deadline, let's try and do the following: 1) Clearly identify suggestions as a) Wish list in an ideal world b) For consideration for our current deadline c) Whether feasible within the constraints of HTML4 and CSS1.X as currently defined. 
This is not to dissuade speculation about what ideal solutions would look like; but at this point we risk missing our stated goals for the end of October if we put up ideas that are not based on an understanding and acceptance of what HTML4 and CSS are capable of. 
Best Regards, --raman as representative of my employer, Adobe Systems Inc. to follow up on what Dave Raggett, Jason White, and T. V. Raman said: [To address the general process issues first] Raman We will be making decisions about what is and is not reasonable to consider in this cycle -- item b. 
However, even on our timetable it is possible to make those decisions too fast as well as too slow. 
Desirability, item a, we consider tentatively for confirmation in the discussion with the Interest group after the 15th. 
Feasibility, item c, we consider tentatively for confirmation in the discussion with the HTML and CSS working groups. 
Raman For this work item, the definition of HTML4 and CSS2 are not the constraints. 
We are tasked to challenge, not accept, the documented definitions of these two formats where they violate critical requirements of access. 
By the same token there are constraints; we cannot radically re-define these formats. 
These contstraints, on the other hand, are not documented. 
Clarifying what is feasible is the other half of our work along with clarifying what is desirable. 
We should be making continuing progress in this area throughout our brief lifespan as a team. 
[To return to more specific issues] We may not be able to match the capabilities of AsTeR. 
On the other hand, if all the elements that one wants to sequence are give IDs in the HTML, it is reasonable to ask if [I don't know] CSS2 can sequence them and if not, why not. 
How would you characterize the capabilities of CSS2 to sequence elements of an HTML document? 
How far are we from being able to do that? 
If this is not a priority issue, why is it not? 
What I am wrestling with is how to split the "reading order" topic and identify two different issues, which I think have a different level of urgency attached to them. 
On the one hand, current Web technology is turning text into gibberish. 
We have situations as bad as text placed in two columns by table formatting and read in Line one of column one Line one of column two Line two of column one etc. order. 
Related to this but at a slightly lower disaster level is when a continuous text is cut and pasted into a variety of cells in a table and there is no record or implication in the HTML of the sequence-of-cells that comprise one continuous text. 
Both of those to me are violations of the intrinsic semantics of the text content and merit our vigorous attention. 
Although I suspect that most of the repair is a matter of browser guidelines, I further expect that the browser guidelines will need some support in markup and I am not yet comfortable that the HTML language as drafted lets us supply the necessary markup. 
An example of how this could be marked up using HTML and processed by a browser with that information would clear this up and remove the concern. 
I would like to distinguish this matter of connecting the cut pieces of a single text from a total ordering of all elements withing a document. 
Dave asked "what if we just let you add reading-sequence numbers?" 
My problem with that is that there often is not an intrinsic linear order for all the components of an HTML document. 
The intrinsic semantic structure is freer than that. 
So I see the capability to re-sequence elements as a styling capability, desirable for audio, and possibly for other media. 
We can then question how feasible it is to get that in the combined capabilities of HTML and CSS. 
But to preserve the connection and sequence among cut pieces of one text is to me an essential content-preserving markup and needs to be in HTML. 
Again, I am not sure that it can't be done today. 
But I do want to distinguish this capability from placing all elements in the document in one sequence. 
There can be multiple text sequences in a document which are appropriate to sequence differently in different contexts, but each of which only makes sense if its cut parts are read in a given order. 
I think we should strive to make sure that it is feasible in HTML4 to know the proper [i.e. intrinsic] order within a set of text fragments appearing in the HTML which are logically subsegments of one continuous text. 
Al Gilman I am aware of no reason why basic tree transformation controls, of the kind which I have described, could not be added to CSS 2. There are already visual flow objects. 
Tree transformation takes the concept one step further by allowing the structure of the document to be modified for the purposes of generating optimal output in a particular medium. 
I have also argued that, given the intention of the CSS working group to add support for footnotes and end notes, such transformations will be required, or at least desired in any case, particularly for the audio and braille rendering of notes, but also to some extent as a means of regulating their placement in a printed text. 
Al has raised several interesting points. 
Firstly, does there need to be an attribute which can indicate whether a table is best understood by reading down the columns or across the rows? 
This would at least allow columnar material to be identified as such. 
However, I would not support any strategy which condones the use of the HTML TABLE element for any purpose other than the representation of tables. 
Although some authors misuse HTML tables, the WAI should not endorse such a practice by attempting to compensate for it in the markup. 
Control over the layout of documents is the province of style sheets, and will become even more so as CSS is more widely adopted. 
to follow up on what Jason White said: The use of the TABLE element as layout infrastructure delivers genuine good as used in the Web today. 
I think we have to credit the widespread use it receives in this way as sufficient evidence of this proposition. 
To ask people to forego that good, which is very widely enjoyed, we will have to make an airtight case that it is reasonable and necessary for web authors to give up this value. 
Since I don't think we will find it is necessary, I doubt we can convince the people who would have to sacrifice that it is reasonable. 
While I am disclosing opinions [which I claim can be changed by suitable presentation of evidence] I perhaps should admit that I am uncomfortable about any strategy that would make the achievement of an accessible web contingent on the use of CSS. 
CSS can certainly add value in alternative media browsing as it does in pixel-grid screen browsing. 
But basic usability must be guaranteed without needing it. 
To succeed we must make sure that an alternative-media browser can present the content of an HTML document comprehensibly based on the semantic connotations of the markup in the document and the browser's knowledge of its user interface media, without recourse to any stylesheet document. 
This is the right scenario by which to establish the semantic content requirements for HTML, in any case. 
I expect that pages with well-designed alternative-media stylesheets will be a distinct minority for several years to come. 
Hence there are quantitative reasons to care that this scenario works well. 
-- Al 
