On 23 October 1996, the ERB will vote to decide the following question. 
A straw poll indicates the question needs further discussion in the work group. 
Possible positions are to remove 8879's restriction (at the cost of more complex XML-to-SGML DTD translation), to retain it, to eliminate enumerated values entirely in the hope that WG8 will relax the restriction, or to retain the restriction but make it a non-reportable error. 
C.14 Should XML allow more than one enumerated type (name-group declared value) to contain the same possible value (11.3.3)? 
We _MUST_ remove this restriction. 
It's annoying even to SGML users of the minimization hack it enables. 
We can never sell it as a reasonable syntactic restriction. 
A reportable error should reflect something the user did that might cause a problem. 
This attribute value restriction, like the -- in comment restriction, no longer has any function in XML but to annoy the user. 
We don't want to annoy our users, especially when trying to get them to do something new. 
I can't imagine what a non-reportable error even is. 
If it's an error, it should be reported, if it shouldn't be reported, then that is prima facie evidence that it should _not_ be an error. 
Enumerated values are too well entrenched in HTML (as well as damned damned useful) to be eliminated. 
-- David RE delenda est. 
-- A few other things delenda est, as well. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ 
Yes. 1. 
The restriction has to do with minimization rules and the SHORTTAG feature being an omnium gatherum. 
2. Not allowing this fails the Stoopid Test when attribute specifications will be in the canonical NAME="VALUE" form anyway. 
Order of preference (most to least desirable): - remove 8879's restriction - eliminate enumerations - nonreportable error - retain Arjun "Features whose purpose is to cause errors should be removed" -- Erik Naggum 
On Thu, 17 Oct 96 13:32:27 CDT, Michael Sperberg-McQueen 
WG8 has agreed to remove this restriction in SGML97. 
However, I think the right solution for XML is to eliminate enumeration on the grounds of simplifying attribute definitions. 
I'd dump all of the tokenized 
values for the same reason, except those that have SGML semantics that we are retaining in XML (possibly ID, IDREF, IDREFS, ENTITY, ENTITIES, and NOTATION). 
The SGML Extended Facilities, which WG8 have voted to incorporate in SGML97, have a lexical typing facility for data content and attribute values using regular expressions and other goodies. 
Why burden XML with the existing half measures? 
Keep things simple for XML 1.0 by sticking to CDATA and add clean lexical typing later. 
Charles F. Goldfarb * Information Management Consulting * +1(408)867-5553 13075 Paramount Drive * Saratoga CA 95070 * USA International Standards Editor * ISO 8879 SGML * ISO/IEC 10744 HyTime Prentice-Hall Series Editor * CFG Series on Open Information Management 
On Thu, 17 Oct 1996 22:50:07 -0400 David G. Durand said: 
Apologies for my careless phrasing. 
'Non-reportable error' is not expected to be a technical term in the XML spec; what I meant in my posting by it is an error which is not a reportable error, where 'error' means a violation of the spec the results of which are typically undefined, and 'reportable error' means an error which a conforming processor is required to detect and report (unless the user has turned off error reporting -- to answer David's acute query, I suspect 'no error reporting' would be the default in a Netscape implementation of XML, and probably in most browsers). 
'Non-reportable error' does NOT mean 'error which a conforming application is not *allowed* to detect or report' -- though there might be some sentiment for introducing such a concept precisely for cases like 
this one of enumerated types in attribute values. 
Defining double use of a name token to be an error ensures that 
SGML parsers can read XML DTDs without modification, which is clearly a Good Thing. 
Not requiring XML parsers to report it ensures that an XML parser can 'recover' from the error in an obvious way, which is also (I think) a Good Thing. 
We have a stated goal of ensuring that SGML processors should be able to read XML instances without modification, if the XML instances are provided with a suitable prolog. 
This is not at all the same thing as agreeing to burden XML processors with every rule, complication, exception, and restriction in the syntax of SGML prologs, in order to ensure that the XML prolog itself is suitable for SGML tools. 
Any restriction, complication, or oddity to be built into XML should pass the same test: is it essential, is it a good idea, is it worth the cost? 
At the very least, when we adopt rules not on their technical merits but solely to preserve compatibility with 8879, even in cases where 8879's rule is now generally conceded to be a Bad Thing, I think the spec should introduce the feature with the phrase "For compatibility reasons ... " -- as in "For compatibility reasons, the string '--' (double hyphen) is not allowed within comments." 
WG8 members can then read the XML spec with a clear idea of where an XML rule was adopted because it seemed a good one, and where it was adopted solely for the sake of compatibility with 8879:1986 and will gladly be changed when the revision sets things right. 
-C. M. Sperberg-McQueen 
On Fri, 18 Oct 96 10:07:47 CDT, Michael Sperberg-McQueen 
I think this is an excellent idea. 
Charles F. Goldfarb * Information Management Consulting * +1(408)867-5553 13075 Paramount Drive * Saratoga CA 95070 * USA International Standards Editor * ISO 8879 SGML * ISO/IEC 10744 HyTime Prentice-Hall Series Editor * CFG Series on Open Information Management 
I always thought this was a dumb restriction in SGML; I wasn't fond of the particular bit of minimization it was needed for, either. 
Let's ditch it here and see whether WG8 can do likewise. 
Jim Mason Dr. James D. Mason (ISO/IEC JTC1/SC18/WG8 Convenor) Lockheed Martin Energy Systems Information Management Services SGML Systems Development 1060 Commerce Park, M.S. 6480 Oak Ridge, TN 37831-6480 U.S.A. Facsimile: +1 423 574-0004 Network: masonjd@ornl.gov 
The enumerated type strikes me as an easy-to-use construct that helps make the act of validation look useful to people; it's natural to use it in a lot of situations, and the only thing that has been a big problem with it in SGML is this prohibition against reusing the values. 
I think all the other available declared value parameters for special lexical types are of less value than this, especially in an 
SGML-for-the masses. 
I can't see the logic of dropping enumerated types entirely on the principle that we want to be absolutely compliant with SGML. 
Those who want to retain absolute compliance can write XML DTDs that meet the SGML rule---this feature of XML would not create a second of new work for those requiring SGML interoperability. 
XML DTDs that do exploit this feature are pretty easily converted to SGML, by transforming the lists of enumeration values to NAME. 
I doubt if that's the hardest task we'll be creating for such XML-to-SGML conversions. 
John Lavagnino 
Hear hear! 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ 
Also agree. 
This restriction is the first thing programmers and DTD designers find that fails the stoopid test (yes | no). 
Change this, please. 
len 
I agree. 
Although I very much want this behavior so that I don't have to explain to people why they have to use 1s and 0s in CALS table markup, I think we should defer it to a future version of XML once the SGML revision has been completed. 
Robert Streichstreich@slb.com Schlumbergervoice: 1 512 331 3318 
I agree with Robert -- multiple enumerations are desirable, but not worth breaking conformance for. 
Another option would be to use the General Architecture "Lextype" declaration, which is standardized: !attlist elemtype1 att1 nmtokens #implied att2 nmtokens #implied lextype cdata #fixed "att1 YesOrNo att2 YesOrNo" where "YesOrNo" is a lexical type name for which a model is defined in a separate "lexical definition document". 
Charles F. Goldfarb * Information Management Consulting * +1(408)867-5553 13075 Paramount Drive * Saratoga CA 95070 * USA International Standards Editor * ISO 8879 SGML * ISO/IEC 10744 HyTime Prentice-Hall Series Editor * CFG Series on Open Information Management 
