I'm wondering about how specification evolution affects name spaces in DSIG. 
I recently received a document whose signature failed to verify, the error being that the Signature element could not be found because the name space had changed. 
The document used: while the verifier expected In the latest spec it's How does this work in the real world? 
Assuming that the spec will not be frozen forever, does the name space keep changing? 
Doesn't this affect interoperability? 
Does the specification change, but the name space stays the same? 
Would the software have to keep an ever growing list of name spaces it supports, and run down the list every time it's looking for an element in the DOM tree? 
Is basing the name on the date typical? 
Is there a name space naming guidelines document at W3C which could give me some insight? 
Ken Goldman kgold@watson.ibm.com 914-784-7646 I think the idea is that the namespace changes if the specification changes in a sufficiently incompatible way. 
It was also more reasonable to change the namespace more often when the specifciation was evoloving more rapidly. 
Now that it has been approved on the standards track of both the IETF and W3C, I think any future change will be considred very carefully. 
Donald PS: While everyone should be using the latest spec, personally, if I was implementing a robust XMLDSIG, I'd be tempted to match "http://www.w3.org/2000/*/xmldsig#". 
From: Ken Goldman kgold@watson.ibm.com 
Date: Thu, 18 Jan 2001 17:29:36 -0500 Message-Id: 200101182229.RAA37832@alpha.watson.ibm.com 
As Don pointed out, we change the namespace when we've made a substantive change to the specification -- rather than clarification. 
Also, as we get more mature one would hope the specification and namespace doesn't have to change as often, however, at that time more people are likely to be tracking it and if something does change, they're better off stubbing their toe on the change in the namespace instead of a more subtle alteration in the DTD or schema that they don't notice for 70% of their instances. 
The namespace should reflect reality instead of keeping it the same while changing the spec/dtd/schema behind it and pretending because the namespace hasn't changed, everything is stable. 
Would the software have to keep an ever growing list of name spaces it supports, and run down the list every time it's looking for an element in the DOM tree? 
Is basing the name on the date typical? 
A dated (or versioned, or RFC allocated) specification has a specific and frozen meaning. 
Prior to clarification of W3C's policies, I had written instances using schema that were valid at a given time for a given namespace. 
The WG then changed the DTD behind that namespace invalidating the examples I wrote that used to work! 
My examples should've continued to be valid under that namespace, and they should've created a new one. 
Yep, have a look at [1]. 
[1] http://www.w3.org/1999/10/nsuri [This namespace name may be reused in any update of the specification which is made for the purpose of clarification or bug fixes. 
These changes will be minor in that they do not (a) change the meaning or validity of existing documents written using the namespace, or (b) affect the operation of existing software written to process such documents.] 
Joseph Reagle Jr. W3C Policy Analyst mailto:reagle@w3.org 
IETF/W3C XML-Signature Co-Chair http://www.w3.org/People/Reagle/ 
I realized my reference to WG might be confusing here: while I was trying to write signature instances and DTDs/schemas for the Signature WG, the Schema WG had updated their DTD while using the same namespace, causing previously working instance I had written to fail. 
But now things are much clearer as expectations about the stability of a namespace are explicit [1]. 
In the working draft stage, a WG should state how likely a given namespace is to chage, and once a spec hits CR, the namespace must be stable with respect to any affects it has on previously conforming instances and processors. 
Joseph wrote before: [1] http://www.w3.org/1999/10/nsuri Joseph Reagle Jr. W3C Policy Analyst mailto:reagle@w3.org 
IETF/W3C XML-Signature Co-Chair http://www.w3.org/People/Reagle/ 
This is an important point that's not explicitly addressed. 
Namespaces let us change the spec at any moment, but that doesn't mean we should. 
Changes (even if fixes) should be limited to a coarse granularity, like a two-four times per year. 
Otherwise folks will be tempted to use a wildcard like Don suggested and that could have real bad effects. 
This 'slushifying' of the namespace (not a complete freeze) should probably happen as soon as the recommendation gets final approval. 
/r$ Once there is substantial deployment, a change in namespace 2 to 4 times a year would be a non-started and would guarantee that either the bulk of the implementors would ignore the change and stick to and recognize only one earlier namespace or the bulk of the implementors would use wildcards. 
A change every two to four years might just barely be tolerable. 
Note that the wildcard I said I would use included the fixed year 2000 and thus matched only past namespaces all of which are actually known and would not match any new namespaces generated in the future. 
Donald From: Rich Salz rsalz@caveosystems.com 
Message-ID: 3A6842C0.4C813FD4@caveosystems.com Date: Fri, 19 Jan 2001 08:36:00 -0500 References: 4.3.2.7.2.20010118231722.0209ff08@rpcp.mit.edu 
As an implementor I think it's possible to create implementations that are backwards compatible, even using namespaces specifying the version of the spec. 
A problem might appear if I wanted to declare a XML Schema for some XML document to support XML Signature specifications from both September and July. 
This I think is better solved in the way for example XSLT defines it, by using a mandatory version attribute on the root stylesheet element. 
What I'm pointing out is that even within the W3C specifications there are parallel methods of defining the version of a specification or draft that is being used. 
Petteri Petteri Stenius Petteri.Stenius@done360.com 
Done Information, Inc. Office +358-9-5259240 
