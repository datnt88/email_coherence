Summary: In August 2000 I explored the use of the class="..." attribute within WAI guideline, technique, and checkpoint list documents of WCAG, AT, UA, and ER at that time. 
A small set of values for class="value" are included in the default.css 
used for WAI documents. 
The documents studied include many more values. 
A new class="value" presumably is added by an author to make a useful distinction for the user. 
Such addition may require an augmented stylesheet to describe what to do with it. 
Any attempt by a user of assistive technology will need to know how to recognize the author's reason for such class values, and distinguish among those that are significant. 
That is asking a lot from the assistive technology. 
Few class values are explicitly included in the html head of the WAI documents. 
I believe there are many more class values identified than are included in the default WAI css stylesheet. 
I also noted some attribute values were unquoted, and some name case variations appear. 
These are inappropriate for moving forward to either XHTML or any XML application. 
Motivation: I had an action item from the last telecon on writing up a straw proposal on em making classes accessible /em . 
They are posted at Two questions: 1. Would this be of practical value? 
2. Is is philosophically acceptable? 
Len's points include the confounding of class values for presentation guidance on a set of elements, with alternative use by user agents. 
He notes that title is an alternative for description. 
He describes association of title value with class value. 
Results: The list of class attribute values is larger than the 14 values that Len Kasday had indicated. 
The semantics for several are not suggested by their names. 
I wonder if CSS support for these documents covers all of them? 
Many are missing in the default.css 
provided with WCAG at that time. 
[# Today (2001-04-01 I checked for any local class definitions in style ... /style in the html document heads. 
The few found are noted below.] 
For each of the documents of the working groups, I show the total count of class="value" followed by the counts for each of the distinct values. 
I use a two-letter code for each document in each set. 
That allows some intra-document comparisons. 
1. Summary of class attribute values in WCAG htm files Count Code Filename 93 cl cl990505.htm 
WCAG Checklist 537 te te990505.htm 
WCAG Checklist table form 363 wc wc990505.htm 
WCAG 1.0 Count Codes Class 12 te ainst # 16 cl checkhead # 65 cl checkinfo 301 te wc checkpoint 3 wc CHECKPOINT 28 te wc checkpoints 1 wc conform 3 cl te wc copyright 9 te css-example 9 te deprecated-example 40 wc dfn-instance 1 te dropcap 42 te einst 50 te example 16 wc GLOSSARY 53 wc glossary 14 wc guideline 3 cl te wc head 1 te nav 12 cl te wc navbar 1 te navigation-bar 1 te newbullet 15 te wc nonb 17 te wc noprint 9 cl te wc notoc 103 te wc noxref 57 te off 5 te quicktest 2 te section2 14 wc subhead # 3 cl table 12 te wc toc 24 te wc tocline2 51 te wc tocline3 993 Total class occurrences, 34 different class values. 
# Local style for use in table row and in div (unlisted above) to center table. 
2. Summary of class attribute values in htm files for ATAG Count Code Filename 182 at atag10.htm 
Authoring Tool Accessibility Guidelines 1.0 40 cl clatag10.htm 
ATAG Checklist 76 ct ctatag10.htm 
ATAG Checklist Table 419 tc tcatag10.htm 
ATAG Techniques Count Codes Class # 4 ct checkhead # 28 ct checkinfo 144 at tc checkpoint 14 at tc checkpoints 2 at tc conform 4 at cl ct tc copyright 82 at tc dfn-instance 2 at tc glossary 14 at tc guideline 4 at cl ct tc head 16 at cl ct tc navbar 11 at tc nonb 32 at tc noprint 28 at cl ct tc notoc 51 at cl ct tc noxref 1 at priorities-specific 49 at cl ct tc priority1 53 at cl ct tc priority2 31 at cl ct tc priority3 22 at cl ct tc priorityR # 4 ct table 74 tc techniques 1 tc technologies 9 at tc toc 15 at tc tocline2 22 at tc tocline3 717 Total class occurrences, 26 different class values. 
# Local style for use in table row and in div (unlisted above) to center table. 
3. Summary of class attribute values in htm files for User Agent Guidelines Count Code Filename 13 cl clua.htm 
User Agent checklist 114 ct ctua.htm 
User Agent checklist table 689 ua ua10610.htm 
User Agent Guidelines 2000-06-10 Count Codes Class # 14 ct checkhead # 84 ct checkinfo 118 ua checkpoint 19 ua checkpoints 3 cl ct ua copyright 195 ua dfn-instance 86 ua glossary 4 ua GLOSSARY 11 ua guideline 11 ua guideline-box 3 cl ct ua head 12 cl ct ua navbar 2 ua nonb 87 ua noprint 9 cl ct ua notoc 52 cl ct ua noxref 33 cl ct ua priority1 24 cl ct ua priority2 12 cl ct ua priority3 11 ua subhead 3 ct table 4 ua toc 4 ua tocline2 11 ua tocline3 4 ua tocxref 816 Total class occurrences, 25 different class values. 
# have local style tr:checkhead ... and style tr:checkinfo ... 4. Summary of class attribute values in htm file for ERT working draft Count Code Filename 75 er ert00823.htm 
ERT 2000-08-23 working draft Count Codes Class 1 er copyright 7 er E 1 er head 4 er navbar 2 er notoc 2 er toc 29 er tocline2 29 er tocxref 75 Total class occurrences, 8 different class values. 5. Element and Attribute Name Capitalization I also note inconsistent use of capitalization. 
Upper-case element names are used in the WCAG checklist and the table version of it. 
A mixture, some capitalized, some not, are used in WCAG. 
In ERT, most, but not all tags are uppercase, with inconsistency in individual tags (for example a ... and A ... .) 
I suggest that as we move toward XHTML or XML, we should use lower-case element type names and attribute names. 
We certainly should avoid a mixture. 
6. Attribute Name Quoting XML and XHTML require that all attribute values must be quoted, either by matching "..." or '...'. 
That has not been consistently used in the WAI html documents. 
Regards/Harvey Bingham hbingham@acm.org 
Invited Expert, W3C Web Accessibility Initiative Oh please no! 
Using classes to identify semantics when there is no strict mechanism for doing so? 
Classes may well be there to group elements of a certain type, but this is a very short first party assertion in that it groups elements of a certain type without providing any reason of why these elements are grouped. 
If the class system is used otherwise, then you are extending the XHTML 1.0 specification; you should be using Modularization of XHTML [1] instead. 
Pragmatically, given the limitations of XHTML 1.0 in providing annotations (or even links to annotations), there's not really much we can do for classes, except perhaps to use URIs as class attribute values [2]. 
[1] http://www.w3.org/TR/xhtml-modularization [2] cf. http://purl.org/net/uriprofile/ 
Kindest Regards, Sean B. Palmer @prefix : http://webns.net/roughterms/ . 
:Sean :hasHomepage http://purl.org/net/sbp/ . 
What would you think of using RDF to indicate 1. that the class is informationally relevent for the user (i.e. more than just appearance) 2. A description of what the class means. 
If we want to push this much further it's a matter for PF. 
Although it is a candidate for inclusion in EARL. 
Len p.s. I had once suggested adding at "alt" attribute to style sheets to convey the meaning of a class, but it ran afoul of the philosophy that style sheets should contain no content. 
Leonard R. Kasday, Ph.D. Institute on Disabilities/UAP and Dept. of Electrical Engineering at Temple University (215) 204-2247 (voice) (800) 750-7428 (TTY) Chair, W3C Web Accessibility Initiative Evaluation and Repair Tools Group The WAVE web page accessibility evaluation assistant: Yes, this is a good use of RDF, and it is something that we have been modelling in the past (using XPath). 
I suppose that classes already have URIs, but it is quite difficult to map between them when using XPath, unless you say:- mydoc:[@class='myclass'] = yourdoc:[@class='yourclass'] . 
But where would this assertion be stored? 
This is the problem with XHTML - it has a terrible lack of linking or extension mechanisms. 
Hence, I suggested that if people just use a URI for the class data, you could quite easily infer that:- mydoc:[@class='URI1'] = yourdoc:[@class='URI1'] . 
Where the URIs are the same, because that's a fundamental axiom of URIs: "sameness". 
Thus, you wouldn't need to make this declaration, saving us from the annotation problem. 
Note that Internet Explorer 6.0 Beta supports character escaping in CSS, and so it is now possible to style these URI classes, as well as give them meaning. 
My other suggestion was using Modularization. 
It occured to me that instead of using class="chapter" in the WAI specs, why not make a DTD/XSD for it, and then mark it up with wai:chapter ? 
Using XHTML classes where we could (should?) be using bona fide markup seems like a bit of a hack to me, although it might not be worth going to the trouble of creating an entire XHTML module (which is quite a big project) for the WAI. 
Then again, what else is m12n going to be used for? 
Actually that's no big problem because CSS should be an XML language (it was developed before XML existed...) and so there is no easy way to point inside it. 
I would have no problem with adding semantics to CSS, but I think its easier working with the styling hooks in the markup. 
Kindest Regards, Sean B. Palmer @prefix : http://webns.net/roughterms/ . 
:Sean :hasHomepage http://purl.org/net/sbp/ . 
