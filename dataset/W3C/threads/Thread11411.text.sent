From: Jean Paoli jeanpa@microsoft.com 
Subject: SD2 - Structured Attributes Date: Thu, 15 May 1997 21:14:16 -0700 SD2 - Structured Attributes: XML uses containment to hold data between tags. 
This data can be internally subdivided, for example the author can be marked to indicate internal parts, as in AUTHOR LAST Dantzig /LAST , FIRST Tobias /FIRST /AUTHOR . 
These divisions don't change the contents of AUTHOR, them merely identify constituent parts. 
Contrast this with adding a digital signature, as in the following: AUTHOR XML-DSIG="ABCDE" Dantzig, Tobias /AUTHOR . 
Here, the signature is an attribute of the author element, that is, supplementary information, but not actual contents: Adding a signature does not change who the author is. 
The distinction between contents and attributes is important when tools (particularly down-level versions of products) need to process data without fully understanding its meaning: unknown attributes are completely ignored, while the contents of unknown elements are retained. 
In both cases above, an uninformed tool could retrieve the value of AUTHOR as "Dantzig, Tobias". 
However, XML attributes inside the tag cannot have structure, nor can they themselves have attributes, nor can they be easily extended. 
Consequently, for example, a digital signature cannot have any structure (except by private conventions and private syntax) nor can attributes be digitally signed. 
The current attribute syntax is insufficient. 
Proposal: I'm going to say something radical here: We should invent a way to add structure and attributes to attributes. 
A special character sequence " *" in an opening tag (the exact characters used are to-be-determined) signals that the contents are an attribute, not a subdivision. 
<NAME> Number, the Language of Science </NAME> *XML-DSIG DIGEST 5432109876 / SIGNER AdamB@microsoft.com / /XML-DSIG *XML-DSIG DIGEST 1234567890 /DIGEST SIGNER AndrewL@microsoft.com / / XML-DSIG In this example, the AUTHOR element has a digital signature attribute, as well as subelements for First and Last parts of the name. 
Similarly, LINEITEM has a digital signature. 
Finally, the digital signatures themselves have subelements, one of which has a attribute, XML-TYPE. 
An attribute that identifies an element should be expressed within the element's tag. 
(That is, the XML-ID attribute.) 
All other attributes can be expressed in either form, so there is a smooth upgrade path as structural needs show up. 
The grove will reflect both syntactical representations the same way. 
I am having a lot of trouble figuring out what is meant by "an attribute, not a subdivision". 
In the XML spec, the definition of attribute is syntactic only. 
There is no such thing as subdivision; I assume that "child element" is meant - this definition is also syntactic-only. 
I just don't get it. 
I believe that what we need is for whoever wants this to post what they mean; by that I mean to provide some proposed language for the XML spec that would explain the meaning of this syntax. 
I also used to be troubled by the very fuzzy and non-formal lines, in SGML, between what's an element and what's an attribute. 
In fact, one of the early academic groups looking at SGML (led by Mamrak at Ohio/Columbus) proposed that there was no reason ever to use attributes for anything; I found that sensible, and still do. 
Which is to say that if I'd been designing SGML, I wouldn't have put attributes in. 
But they did get put in, and I have observed empirically that document designers like them, and use them in a productive way, and that document users also find them friendly. 
There are a few formal differentiators (no substructure for attributes, no data typing however weak for elements) but nothing remotely resembling a decision procedure. 
Conclusion: Human document desginers should decide what's an element and what's an attribute. 
And computer software that needs to pull a named chunk of data out of a document should be prepared to use either. 
- Tim If we believe that the grove formalism is the appropriate one for modelling SGML documents then the argument actually goes the other way. 
Attributes are name/value pairs that describe the "attributes" of an element. 
In the grove model, everything revolves around name/value pairs called properties. 
In this group we are discussing if we can label certain elements as being "really" attributes. 
In contrast the grove model chooses particular properties and labels them as "content." 
This suggests to me that if we (SGML people) are to align our language with our own data model then we DO need structured attributes. 
That in turn suggests a radically different syntax for both documents and DTDs. 
That in turn suggests to me that **** THIS IS NOT THE RIGHT TIME OR PLACE TO DO IT **** We have hard deadlines. 
We have SGML-86 compatibility targets. 
We have a list of several workarounds that have worked for 11 years now. 
We have working code. 
Some of those who want this in XML tend to want it for the wrong reasons. 
If we put it in, it should be to fulfill the needs of *documents*, not *relational databases*. 
Paul Prescod I have no strong feelings about whether information is transmitted as attributes or content (and BXML (before XML)) I used a content model for URLs - I have now switched to HREF. 
The key point - easily overlooked - is that by using two highly structured information components (attributes and content) you almost certainly put additional work on the implementer. 
Unless they behave *identically* you have to design them very well so that a single piece of software can manage both. 
In XML-LANG we have a very simple model. 
A parser can simply read the name/value list and output it to ESIS/TREE with almost no exceptions. 
It *may* have to do special things with attribute TYPES (ID, NOTATION, etc.). 
There is only one hardcoded entity (XML-SPACE) and look how much discussion that has generated. 
I am very worried at this stage about implied semantics. 
It's clear from the XML-LINK discussion that people make assumptions about how applications will behave, and those assumptions are not identical. 
One concept which has been introduced is inheritance - I don't have a problem with that but need to know whether it's a general model. 
The methods for attribute inheritance and content inheritance would be so apparently different that we cannot regard them as equivalent in practice. 
(People don't mind the attributes of a daughter being inherited from the mother (e.g ACTUATE) but they'd howl if new content suddenly occurred from nowhere). 
When I looked at the data attribute proposal I was concerned about *how* and then *where* it would be implemented. 
I'm very worried about implied semantics being left to the 'application'. 
That is a sure recipe for them being implemented differently (for all sorts of worthy reasons). 
We can't and shouldn't avoid them, but we have to work very hard to make it clear exactly where they are to be processed and how. 
That's why I keep shouting for a post-parser - a generic semantic processor would be another description. 
It is going to be a tough struggle to get consistency of implementation. 
There are two approaches: - make it so hard there is only one person who can do it. 
or - make it simple enough that most people arrive at the same behaviour. 
P. Peter Murray-Rust, domestic net connection Virtual School of Molecular Sciences I might be missing something here. 
I'll give my thoughts hoping that I haven't badly misunderstood things (and expecting to be elucidated if I have misunderstood things). 
As has been discussed for years in SGML circles and elsewhere and is, I'm sure, obvious to all on this list, what's made an attribute and what's made element content for any given element type is somewhat arbitrary. 
Since SGML syntax is designed to give structure to elements and not to attributes, if you want structure, use elements. 
I do not see the advantage of this proposal, and I see lots that concerns me. 
I get the sense that at least one reason behind this proposal is the idea that element content is somehow "something to be displayed" and attribute content is not. 
I do not feel this is true, and I would not want us to add structure to attributes to accomplish what style sheets should do. 
If another motivation is related to data typing, I'd prefer we work on a way (beyond XML-lang, but perhaps some additional spec) to data type element content (perhaps as well as attribute values) rather than to add structure to atributes. 
paul 
