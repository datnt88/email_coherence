I hear you laughing out loud, but do you know about research in this topic? 
I mean, like building the DTD of the whole English Language, or at least a good attempt at it? 
Get Your Private, Free E-mail from MSN Hotmail at http://www.hotmail.com. 
Share information about yourself, create your own public profile at Hi Richard, Richard: ... There _has_ been a bit of work on automatically learning DTDs from examples of marked-up documents, and there is a _lot_ of work going on trying to learn approximate natural language grammars from corpora. 
Peter: But are corpora based on XML (I know they could, but are they actually implemented this way?) Richard: ... some natural languages cannot be described by context-free grammars, and SGML is not even as powerful as general context-free grammars. 
Peter: some natural languages, or all othem? 
Which natural languages can and which ones can not? 
Can you point me to more info regarding this? 
Get Your Private, Free E-mail from MSN Hotmail at http://www.hotmail.com. 
Share information about yourself, create your own public profile at Richard: ... There _has_ been a bit of work on automatically learning DTDs from examples of marked-up documents, and there is a _lot_ of work going on trying to learn approximate natural language grammars from corpora. 
Peter: But are corpora based on XML (I know they could, but are they actually implemented this way?) Some are. 
(The LT group at Edinburgh have built a rather good kit of "Normalised SGML" and XML tools precisely for this purpose.) Some aren't. 
The Wall Street Journal collection, for example. 
But what of it? 
XML is even more restrictive than SGML. 
If you want to represent the structure of an English sentence in XML, you have to make heavy use of attributes. 
(Rather like RDF.) But DTDs (and XML Schemas) cannot express contextual constraints on attribute values; if attribute A of element type E may _ever_ have value V, then it may _always_ have value V. (Well, in XML that's true. 
In SGML there's a technical exception which isn't useful in this context.) Programs that learn DTDs learn the grammar of which element types can appear where and perhaps what attributes they may have, but they do not learn what DTDs cannot ever express. 
SGML and XML just aren't *useful* for expressing the structure of English or any other natural language. 
Lisp data values, yes. 
Prolog data values, yes. 
Either would be considerably more compact than XML. 
You might raise RDF as a counter-example, but RDF is inexpressibly clumsy and bulky, and the structural constraints could not be expressed as a DTD. 
Richard: ... some natural languages cannot be described by context-free grammars, and SGML is not even as powerful as general context-free grammars. 
Peter: some natural languages, or all othem? 
Which natural languages can and which ones can not? 
Can you point me to more info regarding this? 
I have heard of *proofs* for three languages (one a German dialect, another another Germanic language, and one an African language) but am not up to date. 
The people who invented GPSG (Generalised Phrase Structure Grammar) pointed out that Chomsky's original proof, based on English, was flawed. 
GPSP takes a context-free core language and applies transformations to the grammar rather than the sentences. 
The grammars one ends up with are context free, but huge. 
Parsing using a standard context-free parsing would be grossly inefficient, so special techniques are used. 
From memory, the name of the person at SRI who proved that there _were_ languages that couldn't be handled at all by context-free grammars was Hans Uszkoreit (sp?) but I could be wrong about that. 
You mean SGML and XML DTDs: you can express any kind of structure (that can be captured as directed, cyclic graph) in SGML and DTD. 
A grammar abstracts away certain aspects to reduce the amount of markup needed. 
People involved in this area may be interested in exploring the Schematron toolkit, which is a schema language for XML based on making assertions about the presence or absense of patterns (guarded XPaths) in an XML document. 
This allows non-regular-expression-based patterns in a document to be reported or required. 
It is a very simple language, and people find it pretty friendly. 
Cheers Rick Jelliffe From ricko@gate.sinica.edu.tw 
Wed Nov 8 23:22:10 2000 Date: Wed, 8 Nov 2000 18:21:54 +0800 (CST) From: Rick Jelliffe X-Sender: ricko@gate Subject: Re: DTD of natural language MIME-Version: 1.0 Rick Jelliffe ricko@gate.sinica.edu.tw replied You mean SGML and XML DTDs: you can express any kind of structure (that can be captured as directed, cyclic graph) in SGML and DTD. 
A grammar abstracts away certain aspects to reduce the amount of markup needed. 
I expressely wrote "could not be expressed as a DTD". 
That was, after all, what this thread is *about*: a DTD or DTDs for English. 
Yes, you can express any digraph in SGML. 
For that matter, you can express any digraph in Lisp (which is far more compact) and people do exactly that. 
If you get right down to it, you can express any digraph as an integer, using some kind of Goedel coding. 
The question is whether one can encode the constraints in a DTD (or Schema or whatever) so that *only* valid digraphs in some set will be allowed by that schema. 
The practical point is that using SGML or XML to express the structure of English would have no practical advantages over expressing it as Lisp or Prolog data values, and many disadvantages. 
People involved in this area may be interested in exploring the Schematron toolkit, which is a schema language for XML based on making assertions about the presence or absense of patterns (guarded XPaths) in an XML document. 
This allows non-regular-expression-based patterns in a document to be reported or required. 
This sounds like a very useful reference. 
Thank you very much. 
Where can I go to learn something about this? 
Thanks. 
Jack This discussion is certainly fascinating, but am I alone in feeling it is in danger of getting just a little off-topic? 
