Hello DOMers, I have been looking at the DOM level two interfaces from the W3C site, and am a little confused by what (in my na?ve view) seems to be a contradiction between the DOM spec and the Java bindings. 
If this is unutterably trivial, then please excuse me! 
1.1. 
states "Finally, the interfaces Text, Comment, and CDATASection all inherit from the CharacterData interface." the "org/w3c/dom/CDATASection.java" section, the following appears: package org.w3c.dom; public interface CDATASection extends Text{ Which clearly does not extend the CharacterData interface but in fact the Text interface (which itself extends the CharacterData interface). 
Are the Java language bindings definitive on the Java platform and was there some good reason for tweaking the spec in these bindings which I haven't figured out? 
Should I assume that the spec or the Java bindings are authoritative? 
Thanks, Jim 
An interface inherits from all the types the superclasses do, just as I inherit not only from my parents, but from my grandparents. 
If you use the Java "instanceof" operator, you will find that Text is indeed an instance of CharacterData. 
The IDL interface definitions appear to me to be identical to the Java in this respect, unless I missed something you are trying to point out. 
Ray Whitmer rayw@netscape.com 
Guys, Thanks for the responses they were most instructive. 
The reason this arose was because I was playing with some stuff on the .Net 
platform casting from System.Xml.XmlCDataSection (the child class according to the Java bindings) to System.Xml.XmlText (the alledged parent class according to the Java DOM 2 bindings): // xc is an instance of System.Xml.XmlCDataSection System.Xml.XmlText xt = (System.Xml.XmlText)xc; // Can't do this cast 
But when I try to cast from CDATASection to CharacterData: System.Xml.XmlCharacterData cd = (System.Xml.XmlCharacterData)xc; things work just fine which I would have expected from the spec, but not from the Java bindings. 
Therefore perhaps my question should have been: Is the Microsoft interpretation of the DOM spec compatible with that of the Java camp? 
If not, which is authoritative (W3C I assume)? 
And how is DOM's cross-platform nature not compromised by this? 
Jim 
I have no way of answering your question with respect to what Microsoft is doing. 
The cast from CDataSection to CharacterData should work just fine, but would look very different from what you show above: org.w3c.dom.CDATASection xc; org.w3c.dom.CharacterData cd = xc; Casting in this direction does not even require a casting operator because you are casting to the superclass. 
correct me if I made an error. 
The class names you used above indicated that it is not DOM or W3C. 
If you value open public W3C standards and interoperability with other platforms, I believe the API you cite your examples from will not give you that. 
In the past, Microsoft has supported interoperability through W3C DOM, Java, etc. 
I have no idea what is available from that source today. 
There are other publicly-available DOM's, such as the one from Apache, which support the standard, interoperable APIs which will run in your environment if it resembles enough of a Java environment. 
It is your call. 
There are many alternatives out there, depending upon your requirements. 
Ray Whitmer rayw@netscape.com 
