Here are two method I'm looking for, mostly for debug purposes: DOMString Element.getStartTag(); DOMString Element.getEndTag(); 
I know they can both be created with the existing DOM (that is what I'm currently using), at least it terms of the logical structure. 
What you can't do is recreate an empty element from the DOM. 
In the case that the original XML document's element (assuming it came from a standard XML document and was not dynamically generated), getStartTag() should return " TagName ATTRs... / ", and getEndTag() should return an empty string. 
Where I'm using this is in reporting errors encountered in the XML documents semantics to the user and I want to match the original notation as closely as possible. 
Sun's DOM implementation includes the toString() method (also very useful), it includes all the child elements as well. 
Thanks. 
Anm PS - I'm not a part of this mailing list (I used to be), so if you have any useful comments directed to me, please include my above address in the If an element is declared as EMPTY, it has no content and then, you can write in two ways : Both are valids and are equivalents. 
Your problem is a serialization and DTD problem: you should have the DTD to know if your element is declared as EMPTY and also have a way during the serialization to choose if you want to write an empty tag or a start tag and an end tag with no content. 
Serialization and DTD will be addressed in DOM Level 3. A start tag is not an empty tag. 
Your getStartTag method can't return foo/ . 
It's not possible, with the DOM, to produce an exact copy of an XML document (character entities are not exposed, no difference between foo/ and foo /foo ). 
Methods like addText(" foo sdfggs /foo ") or toString are on our list of ideas. 
Regards, Philippe. 
Serialization of a DOM to XML syntax is one of the topics under consideration for DOM Level 3. I don't know if anyone has considered whether that should be able to generate the start and end tags separately as well as rendering a complete subtree; that's probably worth considering. 
You _can_ "recreate an empty element" from the DOM; it just requires having your XML-syntax generator check whether the node has children or not. 
Pseudocode for your proposed functions: getStartTag(Element e) if(e.hasChildren()) print " "+e.getNodeName+" "+printAttributes(e)+" " else print " "+e.getNodeName+" "+printAttributes(e)+" / " getEndTag(Element e) if(e.hasChildren() print " /"+e.getNodeName+" " What you can't do is distinguish between the two ways of writing an empty element: foo /foo and foo/ . 
According to the XML spec, these are semantically identical, and the DOM doesn't maintain the distinction between them. 
Joe Kesselman / IBM Research 
