I don't need to use an XML browser to browse HTML; I've already got plenty of HTML browsers that do that just fine. 
I'm not convinced that an XML system should be able to parse "valid" HTML (there's so little of it anyway that it's probably a moot point), but there is a large community of people out there who are used to reading and writing pointy brackets. 
If we alienate that group by putting in too many "niceties" that result in a "That's STOOPID" comment (thank you, Len), then what have you really gained over SGML? 
We already have good SGML parsers (thank you, James, and others) and most of the problems that I have with current SGML applications have little to do with their parsers. 
If XML is to be anything more than just a stimulating mental exercise, it has to be a relatively easy jump for any HTML author who isn't afraid to use HoTMetaL, emacs, etc. to edit HTML. 
It's difficult enough to get most people to make the leap away from display-oriented markup. 
If we add a lot of restrictions or syntax oddities, we could make the jump downright undesirable. 
Robert Streichstreich@slb.com Schlumbergervoice: 1 512 331 3318 I don't need to use an XML browser to browse HTML; I've already got plenty of HTML browsers that do that just fine. 
I wasn't aware that converting HTML users was a requirement of XML. 
I thought the objective was a lean-and-mean dialect of SGML that would: 1. reduce the size of web transmissions of SGML documents 2. serve as a better electronic delivery target for SGML processors than HTML currently is 3. be easier to implement tools for because: a) only one (or a few) character sets are supported b) the instance can be parsed (but not validated) without reference to a DTD c) attributes can be validated, parsed, and defaulted without reference to a _full_ DTD d)tools for full SGML can easily generate and accept XML without loss of EE-ESIS information It would certainly be wonderful if XML won a host of HTML users to SGML, but that is a fringe benefit. 
Our real growth opportunity is winning more users to SGML because of the existence of XML. 
If we start confusing the requirements we run the risk of not satisfying any of them (as others have pointed out before on this list). 
Charles F. Goldfarb * Information Management Consulting * +1(408)867-5553 13075 Paramount Drive * Saratoga CA 95070 * USA International Standards Editor * ISO 8879 SGML * ISO/IEC 10744 HyTime Prentice-Hall Series Editor * CFG Series on Open Information Management From Charles@SGMLsource.com Tue Sep 17 17:43:18 1996 My apologies on this one. 
I didn't see it on the list of "design principles" so I thought it was a non-issue especially with the trend in many of the discussions towards increasing the amount of markup to make it easier to write the parser. 
Since this is a requirement that Jon validated in a later mail (I think he was referring to this message), I'll have to change my opinion on a few issues. 
And I agree that these are all good things and worth pursuing. 
However, I remain very skeptical that there will be a big surge of new tools. 
I hope that one of the vendor-types will correct me if I'm wrong, but I'd bet that the changes that we are discussing affect less than 1% of the code base of the typical SGML system on the market today. 
If the changes to the language have a significant effect on the authors, then it really doesn't matter how simple it is to write a parser. 
Without authors, there won't be anything for the parsers to parse. 
Resistance to change has been the biggest impediment to SGML acceptance that I've faced. 
If we make XML more difficult to author than SGML, it doesn't stand a chance. 
I think you might be missing my intent. 
I'm not concerned about winning over generic HTML users or "Joe Homepage" as others have referred to them. 
I'm concerned about *providing an easy path* for the thousands of HTML users we have in my company. 
We have several hundred WWW servers on our net (nobody really knows for sure how many). 
That's a lot of people typing HTML. 
It'd be really great if I could offer them something that was easier to get started with, i.e., didn't introduce too many new concepts, cheaper, and got them on the track towards SGML. 
I was hoping that XML could fill that need. 
Robert Streichstreich@slb.com Schlumberger512-331-3318 (voice) [Bob Streich:] From Charles@SGMLsource.com Tue Sep 17 17:43:18 1996 Oops, I screwed up on my blanket endorsement of Charles's statement. 
First of all, I was speaking for myself that time, not ex cathedra. 
I will try to make this distinction clearer in future postings. 
Second, I was flat wrong in seeming to endorse the position that XML documents should be optimized for size. 
When I think of SGML on the Web, I think in terms of fragments served out according to SGML Open TR9601, and I assume that the server is smart enough to deliver appropriately sized chunks. 
Bob's initial impression was the correct one. 
As our discussion of end-tag omission makes clear, size optimization is *not* a priority for XML. 
Unless I speak directly for the ERB or am acting in an administrative role with regard to the list, please don't take any statements of mine as authoritative. 
For our current position, refer to the statement of principles. 
Jon On Wed, 18 Sep 1996 20:07:42 -0700, bosak@atlantic-83.Eng.Sun.COM (Jon Bosak) Good. 
I never liked that idea I think verbosity is an acceptable trade-off to obtain clarity. 
The reason I attempted a concise summary of my understanding of the principles-modulo-current-apparent-consensus was because ambiguous and contradictory (to me, at least) "principles" were being used as reasons to support or reject various proposals. 
Bob has raised another interesting point. 
I assumed (item #2 in my corrected summary, below) that encouraging easy tool-building is a major goal of XML. 
Bob says it will never happen, that SGML tools and HTML tools are the only ones we'll ever see. 
Is he right? 
We should decide ASAP if that goal is unrealistic, as it has a major effect on the language design. 
(Indeed, it is virtually the only reason to have XML, if I understand things correctly.) There is a corollary to that point as well: what is our assumption regarding whether XML creation will be done with SGML and XML tools, or with ordinary text editors? 
To put it another way, is it ok for XML to be inconvenient to create "by hand" as long as it is reasonably possible to do so? 
(Jon?) Unofficial (but apparently accurate) Summary of XML Design Principles The objective of XML is a lean-and-mean dialect of SGML that will: 1. serve as a better electronic delivery target for SGML processors than HTML currently is 2. be easier to implement tools for because: a) only one (or a few) character sets are supported b) the instance can be parsed (but not validated) without reference to a DTD c) attributes can be validated, parsed, and defaulted without reference to a _full_ DTD d)tools for full SGML can easily generate and accept XML without loss of EE-ESIS information Charles F. Goldfarb * Information Management Consulting * +1(408)867-5553 13075 Paramount Drive * Saratoga CA 95070 * USA International Standards Editor * ISO 8879 SGML * ISO/IEC 10744 HyTime Prentice-Hall Series Editor * CFG Series on Open Information Management I think we should expect XML browsers quickly, but should not depend on XML editors. 
Since an XML browser is not much harder to write than an HTML browser, we can probably expect Microsoft and Spyglass at least to write them quickly. 
If it were not for the HTML experience, I might not think that Jane Notepad is worth supporting. 
But vi/emacs/notepad/hotdog/bbedit is still the editor of choice for HTML and if we want to win over that crowd, XML should be at least as easy to write by hand (with a simple DTD). 
If the target user community had demonstrably given up hand-coding, we could write a language that makes that process arduous. 
But right now, I think that doing so would delay XML's acceptance by end users and vendors. 
If XML code looks too verbose, the major browser vendors may even shun it on the presumption that the users would not embrace it. 
In other words, XML might be declared DOA (by the Vendors that Be) before the editing tools are even created! 
That doesn't mean that we have to support markup minimization options. 
I think that getting rid of them makes hand-coding easier and less error-prone. 
On the other hand, getting rid of mixed content would make hand-coding more difficult and probably more error prone than a language that allows mixed content but has simple RS/RE rules. 
Paul Prescod [Charles Goldfarb:] We have a fairly complete statement of XML design principles: It would help organizationally if discussions about the design principles were stated in terms of this draft, either as proposed amendments to existing points or proposed additions to the draft. 
Jon (traffic cop hat on) For the convenience of those who might not have ready access to a Web browsers, I've reproduced an ASCII dump of the latest version of the XML design principles document below. 
The original is at Jon Draft DD-1996-0001 - Design Principles for XML Date: August 25, 1996 Introduction XML stands for eXtensible Markup Language We expect definition of XML to involve mostly changes to the SGML metalanguage, with perhaps some restrictions on DTDs or conventions about name usage in the absence of DTDs. 
Conventions for interchange and processing semantics may also be part of our work, but we expect that they will be addressed separately from the definition of XML. 
List of Principles This list of principles is presented in descending order of priority. 
We currently regard items #1 through #4 as "non-negotiable", required characteristics of any successful XML design. 
1. XML shall be straightforwardly usable over the Internet. 
This does not mean you can feed it to, for example, the Netscape of today, but that the design will have regard at all times to the needs of distributed applications working on large-scale networks. 
2. XML shall support a wide variety of applications. 
No design elements shall be adopted which would impair the usability of XML documents in other contexts such as print or CD-ROM, nor in applications other than network browsing. 
Examples of such applications include: * validating authoring tools * batch validators * simple filters which understand the XML document structure * normalizers * formatting engines * translators to render XML documents into other languages (e.g. RTF, TeX, ...) 3. XML shall be compatible with SGML. 1. Existing SGML tools will be able to read and write XML data. 
2. XML instances are SGML documents as they are, without changes to the instance. 
3. For any XML document, a DTD can be generated such that SGML will produce "the same parse" as would an XML processor. 
4. XML should have essentially the same expressive power as SGML. 
Note: #1 and #2 describe our goal in its ideal form. 
If this goal is not achievable in its fullest form, then we may back out to a weaker form: it shall be simple to transform XML documents into equivalent SGML documents, and vice versa. 
Our intention, however, is to bite the bullet and ensure if we can that no transformation is needed to allow SGML tools to read and write XML document instances. 
#3 and #4 indicate our intentions accurately, but it is not yet clear how best to formalize and explain the phrase "the same parse", or the phrase "essentially the same expressive power". 
These remain open questions; see point 8 also. 
4. It shall be easy to write programs which process XML documents. 
In particular, it shall be straightforwardly possible to construct useful XML applications which do not read, or need to read, the DTD of the XML document. 
Note: For this purpose, "easy" means that the holder of a CS bachelor's degree should be able to construct basic processing (parsing, if not validating) machinery in less than a week, and that the major difficulty in the application should be the application-specific functions; XML should not add to the inherent difficulties of writing such applications. 
5. The number of optional features in XML is to be kept to the absolute minimum, ideally zero. 
As a result of this, any XML document has a high probability of being handled successfully by any XML processor. 
6. XML documents should be human-legible and reasonably clear. 
7. The XML design should be prepared quickly. 
A first draft of the XML design should be ready for distribution and comment by end of 1996; a version should be ready for production use by the end of March 1997. 
8. The design of XML shall be formal and concise. 
XML should be simple and easy for implementors to grasp; its reference documentation should not exceed 20 pages, which should contain mostly formal grammar and very little normative text, if any. 
Note: normative text is not the same as descriptive or explanatory text. 
XML shall specify clearly what characteristics of the input must be represented in the parse tree of an XML document, and what characteristics need not be captured by XML processors. 
This means the property sets "significant" in an XML application will be defined both formally and informally. 
Which properties are significant and which are insignificant remains an open question. 
9. XML documents shall be easy to create. 
It should be a straightforward task (though possibly labor-intensive) to create valid XML documents by hand (i.e. without a validating authoring tool). 
It should be a straightforward task (though possibly labor-intensive) to create a validating XML authoring system. 
10. 
Terseness is of minimal importance. 
Minimizing keystrokes is not deemed important in achieving any of the above goals, but other things being equal a concise notation should be preferred to a verbose. 
(repost due to finger trouble) This is my point. 
You *cannot* read the entity in unless you know the coded character set and encoding. 
It seems to me there are three basic data formats which character encodings use: eight bits (8-bit fixed and 8bit variable), 16-bits (fixed and variable) big-endian and 16-bit (fixed and variable) little-endian. 
If you include fixed 32-bit character formats you only add another 3 (Intel order endian, Motorola order-endian, PDP11 order-endian). 
Can you give me any examples of any character set encodings in use (not compression, UUENCODE, etc) in which you can't reliably establish the data format used (for coded character sets which have ASCII characters in the ASCII code positions) if the first string in the file is " ?XML" ? 
Once one can establish the data format, one can read the PI and get the charset/encoding in use. 
(I.e. this is not autodetecting the character set, nor the encoding, but merely the basic data format {of the initially appearing ASCII-valued characters}. 
If that is such a 'hack' why does Unicode sepcifically have the byte-ordering mark characters to allow it?) Rick Jelliffe http://www.allette.com.au/allette/ricko 
Allette Systems http://www.allette.com.au 
