I know not all implementations of DeltaV will allow deleting old versions, but the specifications specifically allows it. 
I've been looking into that functionality and encountered some issues and questions. 
#1) Is there some way of finding out, before trying the delete, if it's possible to delete a version? 
Before you say "supported-method-set", allow me to point out that this property is not shown to exist on versions. 
#2) It looks like there's a set of error msgs the server can return if it decides to prevent the user from deleting the referenced version, the root version, or all versions. 
What error msg should the server return if it decides to prevent the user from deleting the "current" version (though one that is not checked out)? 
Or what if the server decides to prevent the only remaining version from being deleted? 
#3) I don't understand the following text from 3.12: "(DAV:update-predecessor-set): If a version is deleted, any reference to that version in a DAV:predecessor-set MUST be replaced by a copy of the DAV:predecessor-set of the deleted version." 
Does that mean that before deleting a version, the client must munge the predecessor-set properties of a bunch of other versions? 
But the predecessor-set is protected! 
Or does it mean that the server must update the predecessor-set before performing the action, and if it cannot, it returns the error msg? 
Please explain this better in the draft &amp; to the list... #4) Can situations arise where resources can have no versions? 
I can actually think of two ways this might be achieved: - A client deletes all the versions (but not the version-controlled resource) - A null resource gets versioning turned on but no body is added Must clients be able to deal with VCRs with zero versions? 
If not, then we need to make a requirement on servers that they must not ever create a VCR with zero versions. 
lisa 
From: Lisa Dusseault [mailto:lisa@xythos.com] Actually, I think the problem is that I (do other readers?) still don't look in the preconditions and postconditions for normative requirements. 
I think of them as error/status codes, but in fact a lot of the postconditions make requirements. 
That would be a problem, because the majority of the normative requirements are specified in the pre and post conditions. 
The introductory text provides motivation and guidance, but the pre and post conditions are the actual specification of functionality. 
And, in the case of this requirement, the use of the passive voice makes it a bit of work to figure out whether the client is responsible or the server is responsible. 
Satisfying a precondition is always the responsibility of the client, and satisfying a postcondition is always the responsibility of the server. 
This is now stated explicitly in the introduction. 
But I agree that this could be emphasized by replacing the passive voice with "the server MUST ...", and will do so. 
So yes, a clear statement like "The server MUST NOT allow the last version to be deleted" would be useful. 
OK, how about if I add the following sentence to the postcondition: "A result of this postcondition is that every version history will have at least one version." 
? 
I'd suggest saying that MKWORKSPACE can be allowed on a write-locked null resource, but no other DeltaV methods. 
What is the (compelling :-) use case for creating a lock-null resource before issuing the MKWORKSPACE request? 
Cheers, Geoff 
For the record, I have found this confusing on multiple occasions as well. 
- Jim 
