Hi, In DOM Level 2 Core, it is not clear which of several possible Exceptions a method should raise. 
Example: DocumentType::replaceChild (inherited from Node) Possible exception codes listed in the recommendation are HIERARCHY_REQUEST_ERR, WRONG_DOCUMENT_ERR, NO_MODIFICATION_ALLOWED_ERR, NOT_FOUND_ERR. 
Supposed that newChild is from the right document, all error conditions except WRONG_DOCUMENT_ERR apply. 
(DocumentType is always readonly) Which of these exception codes should be chosen, and what is the rule that should be followed here? 
(DocumentType::replaceChild is far from being the only method affected) Thanks for any suggestions, Tobias Peters 
See recent discussion in this list. 
If the operation if always illegal with these two node types, no matter what the values of those nodes are otherwise, it should probably be reported as a hierarchy error, and most existing DOMs seem to do it that way simply because it's easiest to code... but it isn't clear that the DOM has completely nailed this down. 
Joe Kesselman / IBM Research 
hello, everyone! 
I have a question about SystemID of DOCType in Document, is there any standard style about it? the following is a DOCType sample, but when I use DocumentBuilder to parse the XML file, it reports there an error about the DOCType of the XML file. 
!DOCTYPE ejb-jar PUBLIC "-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 1.1//EN" "http://java.sun.com/j2ee/dtds/ejb-jar_1_1.dtd 
Is there anyone can give me some advices ? 
Chaingun Best regards ! 
Additional information about this issue: If I changed the DOCType to : !DOCTYPE ejb-jar PUBLIC "-//Sun Microsystems, Inc.//DTD Enterprise JavaBeans 1.1//EN" "./ejb_jar_1_1.dtd" and I create a file named ejb_jar_1_1.dtd in the current directory. 
It works well. 
So, as a conclusion, it is possible to raise any one of the exceptions that apply, and DOM implementors can choose the one that is easiest to implement. 
Thanks, Tobias Peters 
As far as what's actually said in the REC goes.. yes, I believe that's true. 
I think there are strong expectations that the "most appropriate" DOMException will be chosen. 
Generally DOM code shouldn't be throwing exceptions unless the caller did something wrong, and you want to give them the clearest information you can so they can fix their code. 
Which is most appropriate in every possible case is not perfectly nailed down. 
The DOM test cases (now under develoment) may help to focus this more precisely. 
Joe Kesselman / IBM Research 
