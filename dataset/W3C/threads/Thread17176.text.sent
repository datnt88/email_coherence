Hi, I saw Dean Jackson's SVG presentation at OzeWAI on Thursday. 
He was generating his slide presentation from XSLT into a pure SVG slide show. 
This left me with the feeling that there is a much more flexible alternate for Office suites, and that when Multimedia developers really understand the power and flexibility of this, it may become the medium of choice. 
As SVG in now becoming installed in more and more devices, and is native in Mozilla, could we see the default document type on the web becoming .svg, 
given it's power and presentation? 
I can see a lot of people wanting to design like this. 
I don't have a problem with it because it is XML based. 
I'm just wondering about the consequences for the Sematic Web? 
There shouldn't be any, as far as I can see, only peoples abuse of the media by not supplying real metadata. 
And the questions with metadata, given the report at http://searchenginewatch.com/sereport/02/10-meta.html most people do not bother with it, not because they don't necessarily care, but time is money, and to invest time doing something there has to be a return on investment, and there is little evidence to show any ROI on it now. 
But I do feel that using Dublin Core as a CMS data repository and search repository is a different matter and offers real value. 
What do others think about these issues. 
There is a side issue of dynamic SVG replacing dynamic HTML, especially for pull down menus. 
Does this have the same accessibility issues, or does it overcome some or many of them. 
Yours truly, Geoff Deering My view is that SVG is competing with Flash, and, if adopted by Microsoft and recognized by the mass of authors, will result in rather more visually predictable, but entirely visual, web page designs. 
It's basically a descendant of PDF, not of HTML. 
Originally, it offered a more semantic way of doing static drawings than bit maps, but now all the concentration is on animation. 
With likely authoring tools, authors will be able to easily place components of the page individually, and are unlikely to place them in a sensible linearised reading order, because they will probably never see the linearised code. 
The SVG developers claim that it is better than Flash, but my impression is that it has attracted slightly less trivial applications because the people who commision web pages are not really aware of it, or are put off by the fact that it is not bundled with IE. 
This is not a new view, although it has been reinforced by the direction of the discussions on www-svg following the release of the the version 1.1 draft. 
"Geoff Deering" gdeering@acslink.net.au wrote in message news:NBBBJPNFCLNLAADCLFJBKEJGDOAA.gdeering@acslink.net.au... native in SVG is certainly not native in Mozilla, it's available in special mozilla builds and is far from release quality. 
to based. 
That would be an absolute disaster for accessibility, SVG has very few accessibility features and those that are available (like css) cannot be used without rendering the content inaccessible. 
SVG due to some compromises in the design (such as "z-index" support) does not allow for sensible grouping and description in the general case, and also it often relies on position to give information yet provides no mechanism to describe that position in a meaningful manner. 
There's also problems with lack of any non pointer based interaction. 
There are many good features though, and with metadata you can make the content accessible - however, that's really just providing a metadata version of the document and that works with all different document types. 
for it It adds lots of new ones, whilst solving none from well authored dynamic HTML, that is not the place for SVG, SVG is about graphics semantics not doing drop down menus etc. Jim. 
"David Woolley" david@djwhome.demon.co.uk wrote in message news:200212012354.gB1NsVO32314@djwhome.demon.co.uk... especially for does it Unfortunately many users seem to think this, I don't I see them in very different areas of the marketplace (although the area of "publishing on the web" encompasses them both just like HTML/PDF) than I disagree with this, there's still lot of static drawings being done - this is the only sort of SVG that could remotely be called accessible today too IMO. linearised code. 
Also because you can't really get a sensible linearised reading order, because the only way to control this also controls the z-index of the element, and the navigation index, so it's near impossible without lots of fiddling. 
direction 1.1 1.1 draft? 
1.1 is a Proposed Rec. 
1.2 draft is available. 
Jim. 
From: w3c-wai-ig-request@w3.org 
[mailto:w3c-wai-ig-request@w3.org]On 
Behalf Of Jim Ley native in SVG is certainly not native in Mozilla, it's available in special mozilla builds and is far from release quality. 
Well, I was just reading what is on the Mozilla site Native SVG vs. plug-in SVG The Mozilla SVG implementation is a native SVG implementation. 
This is as opposed to plug-in SVG viewers such as the Adobe viewer (which is currently the most popular SVG viewer). 
* could we see the default document type on the web becoming .svg, to based. 
That would be an absolute disaster for accessibility, SVG has very few accessibility features and those that are available (like css) cannot be used without rendering the content inaccessible. 
SVG due to some compromises in the design (such as "z-index" support) does not allow for sensible grouping and description in the general case, and also it often relies on position to give information yet provides no mechanism to describe that position in a meaningful manner. 
There's also problems with lack of any non pointer based interaction. 
There are many good features though, and with metadata you can make the content accessible - however, that's really just providing a metadata version of the document and that works with all different document types. 
Interesting. 
for it It adds lots of new ones, whilst solving none from well authored dynamic HTML, that is not the place for SVG, SVG is about graphics semantics not doing drop down menus etc. Yes but SVG does interact with the DOM via ECMAScript. 
You can do a lot of stuff with that just like Dynamic HTML Geoff One of the persistent arguments against the viability of the Semantic Web in general is that people can't or simply won't bother putting metadata in (or with) their documents. 
I recently gave vent to my opinion on this on xml-dev [1]: The "metacrap" argument is a complete red herring, because it makes the assumption that the creation of metadata must involve extra effort on the part of the system/application users. 
In most circumstances there is stacks of metadata on hand, and I don't have far to look for an example. 
Nearby there's all the mail header date/time &amp; routing material etc, there's a thread in the archives. 
Without any extra effort on my part, there's a sig with the addresses of my web space and some of the material I'm working on. 
Linked to that there is biographical information about me. 
Your address is here too, which may or may not be used to get to biographical information about yourself, but it does describe a communication channel to you through which more information could be obtained. 
Ok, so the mail client I'm using doesn't take advantage of all this, and that to recall any of this pile of information post-mortem scraping is needed. 
This client (Outlook) is smart enough that if I didn't have defenses then a bit of kiddy code from a third party could make it spam everyone in my address book. 
Why shouldn't the client use this information in a consistent, secure and useful fashion? 
C'mon mail dude, the spell checker knows this is in UK English, why don't you? 
Cheers, Danny. 
Danny Ayers Semantic Web Log : "The lyf so short, the craft so long to lerne." - Chaucer [1] http://lists.xml.org/archives/xml-dev/200211/msg00707.html 
I agree with you on this. 
A lot of people argue for this, with good cause, but most people don't bother because time is money and cannot be bothered or invest time in something that shows no real ROI. 
On the other hand, I do see the value of this when CMS use such data to manage the various publishing meta information of large sites. 
Of Danny Ayers One of the persistent arguments against the viability of the Semantic Web in general is that people can't or simply won't bother putting metadata in (or with) their documents. 
I recently gave vent to my opinion on this on xml-dev [1]: The "metacrap" argument is a complete red herring, because it makes the assumption that the creation of metadata must involve extra effort on the part of the system/application users. 
In most circumstances there is stacks of metadata on hand, and I don't have far to look for an example. 
Nearby there's all the mail header date/time &amp; routing material etc, there's a thread in the archives. 
Without any extra effort on my part, there's a sig with the addresses of my web space and some of the material I'm working on. 
Linked to that there is biographical information about me. 
Your address is here too, which may or may not be used to get to biographical information about yourself, but it does describe a communication channel to you through which more information could be obtained. 
Ok, so the mail client I'm using doesn't take advantage of all this, and that to recall any of this pile of information post-mortem scraping is needed. 
This client (Outlook) is smart enough that if I didn't have defenses then a bit of kiddy code from a third party could make it spam everyone in my address book. 
Why shouldn't the client use this information in a consistent, secure and useful fashion? 
C'mon mail dude, the spell checker knows this is in UK English, why don't you? 
Cheers, Danny. 
Danny Ayers Semantic Web Log : "The lyf so short, the craft so long to lerne." - Chaucer [1] http://lists.xml.org/archives/xml-dev/200211/msg00707.html 
