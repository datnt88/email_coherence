This is a question concerning I would like to write an XSL transform to implement (parts of) the Canonical XML recommendations I am concerned that as to whether the definition of sorting provides the sort 
that is needed to perform such a transformation. 
The relevant text from xml-c14n is: Lexicographic order is imposed on the namespace declarations and attributes of each element Lexicographic comparison, which orders strings from least to greatest alphabetically, is based on the UCS codepoint values, which is equivalent to lexicographic ordering based on UTF-8. 
Thus my question is it possible to sort qnames using XSLT 2.0 to achieve this sort order (without using an implementation dependent feature)? 
(I will be satisfied with a "YES" with no supporting justification) thanks Jeremy PS: Is there such an implementation? 
maybe with XSLT 1.0 
If you specify the codepoint collation in the collation attribute of xsl:sort then you get the lexicographic sorting described. 
Regards, Michael Kay 
I am concerned that as to whether the definition of sorting provides the sort that is needed to perform such a transformation. 
The relevant text from xml-c14n is: Lexicographic order is imposed on the namespace declarations and attributes of each element Lexicographic comparison, which orders strings from least to greatest alphabetically, is based on the UCS codepoint values, which is equivalent to lexicographic ordering based on UTF-8. 
Thus my question is it possible to sort qnames using XSLT 2.0 to achieve this sort order (without using an implementation dependent feature)? 
(I will be satisfied with a "YES" with no supporting justification) thanks Jeremy PS: Is there such an implementation? 
maybe with XSLT 1.0 
RE: Using XSLT 2.0 to do XML CanonicalizationThank you, I am happy with this response. 
Jeremy If you specify the codepoint collation in the collation attribute of xsl:sort then you get the lexicographic sorting described. 
Regards, Michael Kay 
I am concerned that as to whether the definition of sorting provides the sort that is needed to perform such a transformation. 
The relevant text from xml-c14n is: Lexicographic order is imposed on the namespace declarations and attributes of each element Lexicographic comparison, which orders strings from least to greatest alphabetically, is based on the UCS codepoint values, which is equivalent to lexicographic ordering based on UTF-8. 
Thus my question is it possible to sort qnames using XSLT 2.0 to achieve this sort order (without using an implementation dependent feature)? 
(I will be satisfied with a "YES" with no supporting justification) thanks Jeremy PS: Is there such an implementation? 
maybe with XSLT 1.0 
Hello, I am feeling the need of a built-in function, any() in XSLT.. 
please look, at the following e.g. any() function, would match to any node in the preceding-sibling::, and following-sibling:: *axis* 
any() function, would be equivalant to (preceding-sibling:: or self:: or following-sibling:: 
I am wondering, if this might be appropriate ?? Regards, Mukul Do you Yahoo!? Protect your identity with Yahoo! 
Mail AddressGuard 
Hi Mukul, 
Personally, I don't think so. 
As you say, the "any()" function, as you've defined it, doesn't do anything new, just provides a shorthand for accessing all the sibling nodes of the context node. 
Probably the easiest way to do this now is with: ../node() except . 
(Get the child nodes of the parent of the context node, and remove the context node from that sequence.) 
Your example would become something like: If you feel the need for an "any()" function, you can always define it yourself as a stylesheet function: Since it has an uncomplicated equivalent, and you can create it yourself without problems, I don't think "any()" needs to be a built-in function. 
Cheers, Jeni Jeni Tennison 
you could use ../* for this. 
David This e-mail has been scanned for all viruses by Star Internet. 
The service is powered by MessageLabs. 
For more information on a proactive anti-virus service working around the clock, around the globe, visit: 
Thank you for your responses. 
I am happy with the answers.. Thanks Jeni, Thanks David Regards, Mukul Do you Yahoo!? Protect your identity with Yahoo! 
Mail AddressGuard 
