Given the controversy and the problems with every method that's been suggested to make a resource unversioned, I suggest that the DeltaV draft should be silent on the question. 
That means striking the non-normative note on how clients might achieve this with COPY, DELETE, MOVE (a problematic approach because COPY creates a new resource, and thus initializes all sorts of new-resources stuff like default ACLs, creationdate, owner, access history). 
I think we'll need to deal with this issue in the future, but it can wait. 
lisa 
That sounds like a sensible suggestion to me. 
I'll make that change in the final editorial pass, if nobody objects. 
Cheers, Geoff Given the controversy and the problems with every method that's been suggested to make a resource unversioned, I suggest that the DeltaV draft should be silent on the question. 
That means striking the non-normative note on how clients might achieve this with COPY, DELETE, MOVE (a problematic approach because COPY creates a new resource, and thus initializes all sorts of new-resources stuff like default ACLs, creationdate, owner, access history). 
I think we'll need to deal with this issue in the future, but it can wait. 
lisa 
I've been on vacation, but I've tried to keep up. 
In version #17 the expand-property report has been moved from an optional report (Section 15 of version #16) to a SHOULD implement in 3.8. 
I object to it being listed there, and I recall no discussion let alone a consensus to moving it from section 15. 
Outlook does not find 'expand-property' listed in any discussion of this type in my folder dedicated to DeltaV messages. 
As an optional report, I did not pay any attention to it. 
The nesting feature (properties within properties) makes this a very difficult and annoying feature to implement or use IMHO. 
The version-tree report also seems to be defined differently (in 16 as well as 17) than I thought. 
I can implement it that way (fix my implementation), but it seems more limited that it should be. 
For example, I see no reason to redirect a version-tree report to the checked-out version of a VCR. 
It makes more sense to print the following information, if the target is a VCR: 1. 
A listing for the VCR (properties can be different than for a version) Followed by a listing for each version in the VCR (starting with the latest version and continuing on down). 
As currently defined, it takes 2 calls to get all the properties you want on all the versions of a file. 
One to pick up any properties on the VCR including the location of the VHR and the other to pick up additional properties on the file versions. 
Acutally, I'd far prefer the following definition for version 3.7: The DAV:version-tree report describes the requested properties of all the versions in the version history of a version. 
If the report is requested for a version-controlled resource, then the requested properties of the version-controlled resource are supplied in addition to the requested properties for all the versions in the version history of the version. 
A server MAY support a depth value other than 0. If so, the report may target a collection and the report is applied to each versioned controlled resource in the tree. 
From: John Hall [mailto:johnhall@evergo.net] MAY is more appropriate than SHOULD given the late date at which the change was made, the manner of the change, and the fact that a commercial implementation of the spec will not be implementing this report and will recommend that clients who wish to be interoperable avoid it as well. 
And if there is no difference between MAY and SHOULD, then there should be no objection to making it MAY. 
There is no material difference to a client implementer, since both MAY and SHOULD means that your client needs to prepared for it not being implemented. 
The only difference is to a server implementer, and even there, it is just a hint from the working group to the implementor, not a requirement. 
The consensus at the IETF meeting was that the expand-property report was valuable enough (as demonstrated on the mailing list) for it to be worth strengthening the MAY to a SHOULD. 
Currently, we have only received objections from one vendor about this, which does not in my opinion represent sufficient opposition to reflect a lack of consensus. 
Cheers, Geoff 
