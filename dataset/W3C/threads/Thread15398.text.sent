Hi, I'm just wanting to maybe put forward an observation from working with a lot of web developers in large organisations. 
It goes without saying that web development is becoming more and more complex, and almost impossible to keep up to date with changing and advancing technology. 
Just briefly, as I come back to getting involved in WAI what bothers me is the inability to reconcile the standards. 
I feel the first discipline a web developer should aim at is following formal grammars in markup. 
That means validating your markup, specifically against the W3C validators. 
Most web developer only have time to do this and then (maybe) check their code against another parser specialising in checking for accessibility issues. 
Most are up against tight deadlines. 
Unfortunately these parser are not yet of a high standard. 
I think I remember rightly that Bobby 3.x checking priority 1 didn't even look for NOSCRIPT tags. 
This leaves most web developers with at least 4 stages in checking their code; HTML Validator, CSS validator, WAI Validator, manual checklist of both machine checkable that are not covered adequately by WAI parsers and items that are only checkable by human interaction. 
My point to all this is, there needs to be a better unification of the standards so that developers feel that most important issues are addressed at the HTML validator check. 
For instance. 
What do developers use a TRANSITIONAL DTD for? 
Mostly it is used when tables are required for layouts. 
With the recent discussion on not requiring TH in tables that are only used for layouts, I feel this is something that if the WAIGL feels is important, it has to go to the Markup GL to get changed. 
In this case I would suggest things along the lines of * TRANSITIONAL DTD = TH is optional, summary is optional * STRICT DTD = TH is required, summary is required And new items like the element attribute contextHelp have to be added to the next version of the Markup before they become a formal recommendation or considered by WAIGL, cause this type of thing is driving developers crazy. 
Take the recent discussion on ACRONYM and ABBR here, when the XHTML 2.0 proposes to drop ACRONYM . 
Why support something in WCAG 2.0 that will be deprecated? 
Why even bother with something that the Markup GL sees fit to deprecate. 
I know it hasn't happened yet, but it looks like it. 
I think Mark Pilgrim's frustration (http://diveintomark.org/archives/2003/01/13/semantic_obsolescence) as representative of a lot of developers who are trying to do the right thing, but are caught in the fragmentation that happens, even though this whole process is about trying to readdress just that point. 
There are a lot of them out there that are trying to do the right thing. 
What is going to happen is that we are not going to end up with a formal set of grammars, but just a better and improved HTML soup. 
Currently, I think the only developer who can get this type of thing right is one who has full access to configuring their web server, deploying transparent content negotiation, and transforming their documents using XSLT. 
Otherwise there is just too many sets of variables. 
If there is fragmentation between the Markup standards and the Accessibility standards, then web developers will ignore whatever is fragmented. 
If possible they only want to deal with one validator, which represents a unification of standards. 
As I have been off the WAIGL for a while, I hope I haven't been to far off the mark, but your most welcome to address these issue to me. 
Regards, Geoff Deering I guess there is no answer to this; no point in any discussion, no solution, it's just the nature of the beast. 
Geoff Geoff, We are not suggesting that TH is required on _all_ tables. 
We are suggesting that if you use a table for layout that you do not use TH in that table. 
We are suggesting that TH is required only for tables that present data (i.e., cells can not stand alone, there is a relationship between cells) and not for tables used for layout (i.e., each cell should be able to stand on its own). 
The HTML WG has said that tables are for data only and that there are better mechanisms for layout. 
However, today, developers are still developing for user agents that do not support CSS positioning well and many authoring tools are still generating tables as the primary means for layout. 
We are caught between the future-thinking ideal and the current reality. 
Before we include a technique describing a new element/attribute (such as contextHelp) we will make sure it is included in an industry-accepted specification or is a widely-used technique. 
For example, "embed" does not appear in the HTML specs but since "object" isn't supported consistently (or at all in some user agents) we suggest how to use it in an accessible way. 
XHTML 2.0 isn't a W3C Recommendation, yet. 
WCAG WG should address the needs of developers who want to make content accessible *today.* 
In the Techniques Task Force we have discussed labeling techniques as "legacy" or "deprecated" or "future" to help clarify these distinctions for developers. 
There are many pieces to the puzzle. 
Why haven't user agent developers implemented the standards that they helped develop? 
Why don't users update their browsers each time a new one is released? 
Why don't authoring tools generate valid code? 
There are several answers to each of these questions. 
Some of our recommendations will be for HTML 4.01 others will be for XHTML 1.0/1.1. 
We'll stay aware of developments in XHTML 2.0. 
We will clearly label if a technique is for HTML 4.01 or XHTML 1. 
Where we have ideas about accessibility improvements in XHTML we will discuss them with the Protocols and Formats Working Group (PFWG [1]) who is our primary contact with other W3C working groups (per our charters) and is actively monitoring development of XHTML 2.0. 
An historical example: during work on WCAG 1.0, we worked with PFWG on accessibility features for HTML that were adopted by the HTML WG and included in the HTML 4.01 spec. 
Thanks for voicing your concerns and helping to make sure we contribute to the W3C mission. 
I hope this calms your frustrations/fears. 
If not, let's figure out what we need to do. 
Best, --wendy [1] http://www.w3.org/WAI/PF/ wendy a chisholm world wide web consortium web accessibility initiative Hi Wendy, I take your points, and I am familiar with these issues, but I am more concerned with all these branches leading to disunity and web developers giving up because it is too difficult to reconcile to one point and not one good parser that is able to address validation of their code according to DTD, Schema and Accessibility Guidelines. 
Like, I have just gone back and read the specs on TH/TD to see what I suggested is not related to the specs. 
Fair enough. 
But I don't have a photographic memory and only have a basic framework of the W3C standards in my mind, I have to consult them to resolve issues. 
Most developers will not do that, not cause they are lazy or don't care, but because every hour of their work is time managed and their project manager is going to say; "What the hell we you doing there? 
Is it really necessary? 
We are on a tight budget." 
But it if an accessibility analysis parser is a check option on the official W3C validator page, that brings the whole issue into bearing and focus, and developers will use it to get a status report on their page. 
I know there are commercial products out there, but they do not have the respect the W3C parsers have. 
Regarding the ACRONYM and ABBR issue, if I know that XHTML2.0 is dropping ACRONYM , why should I use it, when I know that the templates or code I am going to use will require additional finances and time in the future to come back and address this. 
My project manager would not be happy to find I am using an element that looks like being dropped, when I could drop it and just use ABBR and save the company time and money. 
Such minute details of project cost cutting do get addressed in places I have worked, and the project managers are ruthless on anyone not using their full knowledge to be absolutely efficient and economical. 
This is where such knowledge does pay off. 
PM's then know the time you spend on this knowledge is of some value. 
There are many pieces to the puzzle. 
Why haven't user agent developers implemented the standards that they helped develop? 
Because of market forces. 
But now they are doing a far better job. 
Why don't users update their browsers each time a new one is released? 
Why should they, and that's one of the benefits of following these guidelines, that your content is more accessible. 
Why don't authoring tools generate valid code? 
First, why should they when generating HTML soup best addresses the market needs. 
And to be blunt, because their programmers aren't good enough... not because I am better, but because I have worked with programmers who can build such applications, some really good ones. 
There are several answers to each of these questions. 
set Accessibility Thanks for voicing your concerns and helping to make sure we contribute to the W3C mission. 
I hope this calms your frustrations/fears. 
If not, let's figure out what we need to do. 
Thanks, but I'm not so much voicing my frustrations as those of a lot of well intentioned developers I have worked with. 
Often the W3C is seen as evil incarnate, which I often have to explain is the wrong end of the stick, where I explain if you really approach these recommendations, guidelines and checkpoints properly they are very friendly advice on how to avoid possible problems. 
When they say it is just a bunch of academics trying to impose their view, I often tell them to go and read the discussion lists, and you see a lot of people trying to work together to make it both more accessible for everyone and also more addressable to the developer, and fighting for the developers rights equally. 
From time to time I will play the devils advocate on this list, but it is not meant to be malicious or counterproductive, just a voice from a part of the community as a whole that needs their view expressed Thanks for reply Geoff What huh? 
The DTD choice has no effect -- zero, nada, none -- on whether you can use tables for layouts. 
It's _perfectly valid_ to use tables for layout in XHTML 1.0 Strict, for example. 
I use Transitional myself because it's a bit more secure for what I need it to do, and because I may need to make inline changes in some of my blog posts. 
Quite honestly, there is little difference between div align="right" and div style="text-align: right;" -- except that the first is safer because it's more likely to work correctly. 
If the working group is going to make assumptions based on why people use specific DTDs, I would like to see that backed up with hard data, e.g. a survey of Web developers asking them why they've chosen to use a specific DTD, or not use one at all. 
--Kynn Kynn Bartlett kynn@idyllmtn.com http://kynn.com 
Chief Technologist, Idyll Mountain http://idyllmtn.com 
Author, CSS in 24 Hours http://cssin24hours.com Shock &amp; Awe Blog http://shock-awe.info 
Inland Anti-Empire Blog http://inlandantiempire.org What huh? 
The DTD choice has no effect -- zero, nada, none -- on whether you can use tables for layouts. 
It's _perfectly valid_ to use tables for layout in XHTML 1.0 Strict, for example. 
That's right, that's true. 
But it also shows that the intention of separating content from display markup as not being fully implemented in the design of the document. 
At least the content will still be more flexible because some of the more fixed attributes in transitional are not available in strict. 
But that is why transitional is there isn't it, to support layout in older or more no standard compliant browsers? 
I use Transitional myself because it's a bit more secure for what I need it to do, and because I may need to make inline changes in some of my blog posts. 
Quite honestly, there is little difference between div align="right" and div style="text-align: right;" -- except that the first is safer because it's more likely to work correctly. 
The first becomes much more and an issue when trying to generate content out of an XML repository. 
It starts to make it a pain in the arse for architecting large document repositories. 
This is where you wish you could kiss transitional goodbye and just use strict and keep content and display separate. 
If the working group is going to make assumptions based on why people use specific DTDs, I would like to see that backed up with hard data, e.g. a survey of Web developers asking them why they've chosen to use a specific DTD, or not use one at all. 
I may be able to contribute something towards this in the future. 
Geoff Deering 
