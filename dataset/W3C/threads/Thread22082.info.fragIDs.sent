Dear all Below please find my proposal for immediate action. 
Issues raised in the discussions we have had so far should be raised in the telephone conference we should be able to schedule for next week (I'm still waiting for technical details) 1. 
We should consider migrating toward declaring the IDL interfaces and methods in our schema in accordance with Curt's proposal. 
Also we will get rid of entities. 
Language-specific issues on bindings should be resolved in teh transformation layer. 
I think we've solved the issues that were raised about the loading. 
2. We should try to work with one common schema as this greatly enhances the chances for people submitting more tests, as they will not lose time developing for two distinct frameworks. 
3. Finalize the schema within the next few days. 
4. Rewrite the XSLT for Java and write another one for ECMA (these are the minimal requirements for the DOM TS, naturally more stylesheets for other bindings are more than welcome) 5. Set up details for submitting on the W3C site (i'm already looking into this). 
We also need to look at issue tracking (Bugzilla has been proposed). 
6. Produce reference documents to simplify test authoring. 
Have I missed something? 
/Dimitris 
Just in case, please Be aware that Monday is a significant legal holiday in the US. 
Here is are some of the issues that I know of: 1. Use of Java binding like accessors and mutators I'll update the schema to use IDL like accessors and mutators. 
There will be some loss of constraint checking but the number of read-write properties is small. 
2. No mechanism for in-line metadata I would suggest either adding to the content model of test , suite and the assertions either a metadata element with a very permissive content model or a rdf:RDF element. 
However, with the acknowledgement that external metadata is expected and that in-line metadata should be reserved for (relatively) fixed metadata (for example, author or source, not test results for a particular processor) 3. Test packaging Suite definition is currently supported by placing test definitions within suite elements. 
Preferable to have tests as independent XML documents. 
I propose defining suite with test href=".."/ children as an interim approach but think that we might eventually use EARL to define test packaging. 
4. Identifying test documents I had defined a document element to provide some mechanism for indirection, however that is definitely inadequate. 
I propose switching load back to using a URI to identify the test document but with the expectation that a mechanism outside of the test definition (RDDL?) would be used to resolve the test URI to an local resource. 
5. Lack of usable XML schemas for DCMES and EARL The XML schema for DCMES seems pretty strange on a quick read and I'm pretty sure that it is not valid. 
I don't know of an XML Schema for EARL. 
There is an (non-normative) XML Schema for RDF on the schema home page. 
6. Lack of visibility (at least from outside the DOM WG) I haven't seen the existing XSLT transform for Java and ECMAScript. 
I assume they are against the NIST DTD and maybe against the NIST testing framework. 
Since I'm spending a good deal of personal time on this, it would be good to have some idea that I'm not replicating work that is already going on. 
It would be very helpful if people could publicly state at least what they are thinking about working on or need for their continued progress. 
7. Coordination with XML Schema test development I've pinged the xmlschema-dev list to see if they could share their approach to test metadata. 
The proposed language (DTD), transformation (XSL), all of the NIST Node tests (node.xml) and the translated java code (node.java) were posted on this mailing list on March 23 -- the transformation has not changed significantly since then -- we have updated the test descriptions and added the ability to automatically generate javadoc style comments with all of the tests. 
I've attached the files again -- node.xml, generate.xsl, 
and node.java so you can see the generated code. 
All 400+ of the NIST tests have been encoded in this format, and we can generate java code for all of them. 
We have done some work on an ECMAScript version, but need to get the issues related to loading an XML doc worked out -- we could use some input from the ECMAScript folks here -- in particular, some ideas from folks who can deal with a variety of ECMAScript implementations. 
Quite honestly, I expected comments against what we had, but I didn't expect that you would completely re-do it :-). 
Unfortunately, I do see duplication as I watch you going through much of the same thought process we've already been through: - try to represent the test logic - add capabilities as you step through the tests and find you need more - declare variables, because some of the tests might actually need this (we actually did this as well, but decided in the end that we could make the transformation smart enough to do it for us...) - etc... Don't misread this message -- I actually like the idea of using a schema due to the added error checking that is inherent in it. 
I don't mind using dom-like names as element names -- we didn't do this in the beginning because NIST is involved in lots of testing efforts, and we were interested in creating a language that could be used for other efforts as well. 
I am concerned at the time it is taking to run down the schema path. 
Until more tests are encoded and there is an available transformation, I don't think that we'll have a schema that we are confident in. 
Let's also keep our eyes on the future -- this framework is supposed to be used to develop tests for the rest of DOM Level 2 and DOM Level 3. I think that we would get to where we want to go much faster if we agreed on an approach, defined a list of what needs to be done, and then all pitched in to get it done. 
--Mary Mary Brady NIST, Web Technologies mbrady@nist.gov 
Sorry -- I forgot the files -- here they are: node.xml -- NIST Node tests generate.xsl 
-- transformation node.java -- generated tests --Mary 
Curt, In an attempt to determine which way to go, we are trying to use your schema to describe some of our tests -- could you post an example of how to describe a DOMException? 
Are you currently doing any work on a transformation? 
--Mary Mary Brady NIST, Web Technologies mbrady@nist.gov 
Sorry -- I forgot the files -- here they are: node.xml -- NIST Node tests generate.xsl 
-- transformation node.java -- generated tests --Mary 
(Hm. 
I just found an instance of the 254-point font problem on another W3C list. 
So it's probalby not something you folks are doing; it's either the W3C server or my mail tool. 
Weird.) Joe Kesselman / IBM Research 
As a question, though, what external metadata would be expected? 
I assumed that all relevant metadata would be inlined in the test decritpion itself. 
Links to pertinent archive email messages discussing the test. 
Relationships with tests yet to be developed. 
Results of processors against the test. 
forward to further discussing the possible use of the EARL framework. 
Have you received any feedback from that community? 
No, but still hopeful. 
Sure, that could be one way of doing it. 
I anticipate implementor's various harnesses to deal with that to the largest possible extent so as not to burden the DOM TS framework. 
I did this some time ago, but haven't received any useful information. 
Thanks for reminding them, let's just hope that they respond quickly. 
I'm hopeful. 
If there is not responce to the public query, I'll asj Henry Thompson, though I would prefer to avoid adding anything to his personal burden since I'm sure either he knows the answer or at least the right contact person. 
I think it is more likely that they haven't, but it might be a good idea to use it or at least watch us try. 
