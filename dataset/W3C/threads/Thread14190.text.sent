6.? "accesskey" example We answered the following questions during the call: Q1. 
The example places the "accesskey" attribute on the LABEL element associated with the form control. 
Is it????? appropriate for the LABELs to have "accesskeys" or should the controls have them? 
A1.? The HTML spec says that "accesskey" may appear on links, form controls, and labels.? 
Therefore, if the label and control are associated, it shouldn't matter. 
Q2. Does "accesskeys" introduce or create any usability issues? 
For example, should this be a UA thing or should authors continue to create? 
A2.? As in other software, the author/authoring tool ought to create them, while the UA handles displaying and using them. 
Q3. What about pages that have too many elements to have unique accesskeys, is this poor design? 
Should the form be broken up onto different pages? 
A2.? yes, this is bad design.? Since accesskey uses unicode, there are 36,000 characters to use for accesskeys grin . 
Q4. Are there implications on future versions of HTML? 
A4. 
We did not come up with nor forsee any. 
The group was clearly suffering from barn fever at this point. 
Yes, there are unresolved usability issues around the layering of keystroke commands from multiple authors of the web page, the browser and the operating system. 
Bryan has been quite eloquent in UA on this point. 
Even if the keyboard is the most broadly accessible single command device, it is not equally accessible to all and AccessKeys are device specific. 
These issues will not likely be resolved in time to add any significant new knowledge to this volume, however. 
They _will_ likely generate considerations for future versions of HTML or XML applications used like HTML. 
On Q1 it would be good to check with UA. 
Even if it is just to add notes in the UA guidelines that say what needs to happen and that it needs to happen in certain ways regardless of whether the AccessKey invocation leads to a control or a label. 
If there is going to be a difference in browser handling depending on where the AccessKey resides, then authors reading this volume need to understand and bind accordingly. 
Al 11. 
Grouping and bypassing links Of the five proposals, a hybrid approach of a few of them is what the group on the call was happiest with.? 
Therefore, we propose two strategies.? The first should always happen, the second is supplemental. 
11.1 Group related links (such as those in a navigation bar) using any appropriate element (P, FRAME, DIV, SPAN) and label the group with class="nav" Note this has UA implications. 
11.2 Use "tabindex=1" on a link that appears at the beginning of the "meat" of the content. 
This could be relaxed a little. 
"Program the TABINDEX sequence to get to the meat of the page quickly, leaving navigation links for later. 
For example, set TABINDEX=1 on an element that makes a good place to start reading." 
Al Grouping related links with a class is yet another reason for UAs to implement CSS positioning properly. 
This would allow for many 'neat tricks' beloved of designers to be implemented in an accessible way, since the user can override the stylesheet and declare positioning of their own. 
But it's really a mater for UA... Charles McCathieNevile 11. 
Grouping and bypassing links Of the five proposals, a hybrid approach of a few of them is what the group on the call was happiest with.? 
Therefore, we propose two strategies.? The first should always happen, the second is supplemental. 
11.1 Group related links (such as those in a navigation bar) using any appropriate element (P, FRAME, DIV, SPAN) and label the group with class="nav" Note this has UA implications. 
