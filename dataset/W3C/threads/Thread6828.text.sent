The XML spec DTD is pretty cool in a lot of ways, but it seems to me that it's arbitrarily different from HTML in expensive ways: you *have* to use a batch process to convert from source form to preview/display/delivery form. 
Ideal Solution Source format: HTML dialect use a strict HTML dialect with: tables, class=abstract, possibly math. 
Document Manipulation API: java interface -- http://www.w3.org/MarkUp/SGML/spec-mgmt and in May 1997, I did a little hacking on a (psuedo-)XML parser and some tools to convert an HTML dialect to lout for typesetting. 
The example I used was: i.e. source: output of lout conversion: postscript output from lout: along with which "refines" HTML: to add report titlepage stuff (abstract, ...) a section/subsection structure, bibliography stuff, etc. (note that I used an extension to SGML marked section syntax for modules) Now that we have XHTML (nearly) and DOM and XSLT, I hope to revisit this idea and finish the code, but I haven't managed to find time, so I'm sending this message to see if anybody else is interested/motivated. 
For example, my conversion program was rules-based, and I hope that it converts to XSLT straightforwardly: The idea is to use on XHTML dialect for editing *and* delivery. 
It has some redundancy that is (or at least: could be) managed by machine; for example for quotations: If you're using lynx or Mosaic 2.0 or something, you just get "Hyperdocuments" but you can also do a stylesheet that adds real printer's quotes and supprsesses c as a child of q. 
If you don't want to add these c " /c things by hand, you can do it automatically using DOM scripts or XSLT. 
Same goes for all sorts of generated text: tables of contents, cross references, indexes, ... . 
Not to mention specialized notations like grammars and such. 
The idea is: you generate those by machine, but you don't treat the results as junk to be thrown away; you fold it back into the source. 
Dan Connolly Hmm, the current XML dialect has all sorts of semantic markup for stuff like BNF and conformance constraints and so on. 
Switching to XHTML for HTML-like stuff (ordered lists, paragraphs) seems obvious; but I'm not sure how you avoid that batch processing step if you want to use fancy div/span or table machinery to make BNF look good and so on. 
-Tim FWIW, the XMLspec documentation discusses some of the issues surrounding making XMLspec a relative of HTML: I'm kind of interested in the idea of "augmenting" the content of an XMLspec document with generated material, but worry about people editing it by hand when in a hurry. 
(I've seen it happen in many a production environment.) 
Also, over time, XMLspec has gotten more specific/semantic, not less, and all these constructs are miles away from HTML. 
I'm not sure that much is gained by connecting them artificially, especially if we can commit (finally :-) to making a good, official XSLT stylesheet that transforms into HTML. 
I believe this is what Ben Trafford has been working on. 
Eve Eve Maler Sun Microsystems elm @ east.sun.com +1 781 442 3190 First, I'd rather use CSS2 table style stuff than HTML table markup to decorate BNFs and such (someday, at least...) Second... 
I'm not necessarily trying to avoid the batch processing step altogether. 
The idea is that -- without the batch process, you can still use a web browser to get a rough idea of your document and -- after you run the batch process, you don't throw away the results, but rather fold them back into the source. 
So I'd probably do something like: p Pickles are not allowed at this point in the sandwich due to the risk of allergic reaction. 
/p for grammars with constraints. 
And with the right tools, the s:c stuff would be added by machine from source that looked like: p Pickles are not allowed at this point in the sandwich due to the risk of allergic reaction. 
/p Dan Connolly 
