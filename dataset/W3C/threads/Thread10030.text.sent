Guys, Recent attempts (in collaboration with Peter and Ian) to reconcile the RDF(S) MT with the emerging OWL MT have suggested that it would be good to make a technical alteration to the semantic conditions for RDFS. 
I think that this change will make no appreciable difference to RDFS itself (ie it will give the same RDFS entailments), but am soliciting comments on this change from the WG before deciding to do it. 
We can illustrate the point by considering rdfs:subClassOf. 
Right now, we say that A rdfs:subClassOf B is true in I if ICEXT(I(A)) is a subset of ICEXT(I(B)). 
Which seems kind of obvious; but the idea is to change this to read " ... is true in I IFF ... " , i.e. make the semantic conditions *necessary and sufficient* for the truth of the triple. 
The reason this doesnt make any appreciable difference to RDFS is that RDFS has no notion of negation, so it doesnt really matter if it treats something as false when its really true, which would be possible in the current MT: that is, you could (currently) have two classes and one class extension be a subset of the other, and still count rdfs:SubClassOf as being false in that interpretation. 
That wouldnt matter since that interpretation wouldnt satisfy any antecedents that might trigger a wierd conclusion, since it just fails to make something true. 
But when we go to OWL, there is something like a negation (owl:complementOf), and so now this possible mismatch between what is actually correct in the interpretation and what triples the interpretation makes true suddenly starts to matter, both ways round. 
Similar changes need to be made to the conditions for rdfs:subPropertyOf and the domain and range conditions, for similar reasons. 
Unless anyone objects, I plan to make this change in the next (and hopefully close-to-final) version. 
So object now or forever hold your piece. 
(To emphasize, this change makes the MT *more* conventional rather than less, ie this is the standard way to do it) Pat IHMC(850)434 8903 home 40 South Alcaniz St.(850)202 4416 office phayes@ai.uwf.edu 
I don't think this is a big deal either way, but note that you argued against this in In fact that thread is quite interesting: Jan: If rdfs:subClassOf is pronounced "rdfs:subSETOf" then we ought to consider fixing the spelling. 
DanC: Which part of our spec allows you to conclude the rdfs:range triple? 
PatH: In fact, your entailments aren't even valid, because two different classes can have the same class extension. 
PatH: That would be disastrous for the datatyping and in any case not make sense. 
At the time I was somewhat persuaded by Peter's view ... Jeremy Pat, I don't have any problem with the proposed change, but I'm a little puzzled by your explanation. 
Looking at the words, I read "A rdfs:subClassOf B is true in I if ICEXT(I(A)) is a subset of ICEXT(I(B))" to mean the second part implies the first. 
Thus I don't recognize the possible concern that A's class extension being a subclass of B's class extension could allow A rdfs:subClassOf B to be false. 
#g Graham Klyne Domain &amp; range test case, in n3, will RDF/XML latter. 
1:[[ eg:prop rdfs:range eg:A . 
eg:A rdfs:subClassOf eg:B . 
rdfs-entails eg:prop rdfs:range eg:B . 
(i.e. in english, every object of a eg:prop is an eg:A. 
every eg:A is an eg:B, thus every object of an eg:prop is an eg:B). 
Similarly 2: [[ eg:prop rdfs:domain eg:A . 
eg:A rdfs:subClassOf eg:B . 
rdfs-entails eg:prop rdfs:domain eg:B . 
As Jan says, maybe we have misspelt rdfs:subSetOf. 
If we don't have this, Peter has to work harder anyway; and doing it four times over is about the same as doing it once. 
So if Pat is changing his mind on these ones, I would tend to want to leave the subClassOf ones alone too. 
Jeremy I've tested those 2 testcases and had a proof found after adding following 2 closure rules IF | THEN :rule11 | ?A rdfs:subClassOf ?B . 
| ?p rdfs:domain ?A . 
| ?p rdfs:domain ?B . 
:rule12 | ?A rdfs:subClassOf ?B . 
| ?p rdfs:range ?A . 
| ?p rdfs:range ?B . 
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
"Jeremy Carroll" om cc: Sent by: Subject: RE: Technical change to the RDFS MT (test cases in n3) w3c-rdfcore-wg-req uest@w3.org 
2002-09-23 09:52 AM Domain &amp; range test case, in n3, will RDF/XML latter. 
1:[[ eg:prop rdfs:range eg:A . 
eg:A rdfs:subClassOf eg:B . 
rdfs-entails eg:prop rdfs:range eg:B . 
(i.e. in english, every object of a eg:prop is an eg:A. 
every eg:A is an eg:B, thus every object of an eg:prop is an eg:B). 
Similarly 2: [[ eg:prop rdfs:domain eg:A . 
eg:A rdfs:subClassOf eg:B . 
rdfs-entails eg:prop rdfs:domain eg:B . 
As Jan says, maybe we have misspelt rdfs:subSetOf. 
If we don't have this, Peter has to work harder anyway; and doing it four times over is about the same as doing it once. 
So if Pat is changing his mind on these ones, I would tend to want to leave the subClassOf ones alone too. 
Jeremy I think that I haven't thought hard enough and that Pat has some good arguments in so I withdraw rule10 and rule11 Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
Jos De_Roo 2002-09-23 12:18 cc: "pat hayes" phayes@ai.uwf.edu , w3c-rdfcore-wg@w3.org 
PM Subject: RE: Technical change to the RDFS MT (test cases in n3)(Document link: Jos De_Roo) I've tested those 2 testcases and had a proof found after adding following 2 closure rules IF | THEN :rule11 | ?A rdfs:subClassOf ?B . 
| ?p rdfs:domain ?A . 
| ?p rdfs:domain ?B . 
:rule12 | ?A rdfs:subClassOf ?B . 
| ?p rdfs:range ?A . 
| ?p rdfs:range ?B . 
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
"Jeremy Carroll" om cc: Sent by: Subject: RE: Technical change to the RDFS MT (test cases in n3) w3c-rdfcore-wg-req uest@w3.org 
2002-09-23 09:52 AM Domain &amp; range test case, in n3, will RDF/XML latter. 
1:[[ eg:prop rdfs:range eg:A . 
eg:A rdfs:subClassOf eg:B . 
rdfs-entails eg:prop rdfs:range eg:B . 
(i.e. in english, every object of a eg:prop is an eg:A. 
every eg:A is an eg:B, thus every object of an eg:prop is an eg:B). 
Similarly 2: [[ eg:prop rdfs:domain eg:A . 
eg:A rdfs:subClassOf eg:B . 
rdfs-entails eg:prop rdfs:domain eg:B . 
As Jan says, maybe we have misspelt rdfs:subSetOf. 
If we don't have this, Peter has to work harder anyway; and doing it four times over is about the same as doing it once. 
So if Pat is changing his mind on these ones, I would tend to want to leave the subClassOf ones alone too. 
Jeremy Prompted by Jos' message, I've just scanned the OWL debate on this. 
It seems to be that it hinges on differing views of the nature of a class: my limited reading around description logics suggests to me that DLs treat classes as being identified by their set of members. 
Thus, if two classes have the same members they are ipso facto the same class. 
The RDF model theory separates a class from its members. 
So if we look at the above entailment, it may not hold, even though a related entailment always holds: 1a:[[ eg:prop rdfs:range eg:A . 
eg:A rdfs:subClassOf eg:B . 
_:x eg:prop eg:C rdfs-entails eg:C rdf:type eg:B . 
That is, if for all eg:C that are members of some class eg:B, eg:C is a valid object for property eg:prop, it does not necessarily follow that eg:B is a range of eg:prop. 
As far as I can tell, accepting or rejecting Jeremy's entailment 1 has little practical effect. 
I think that because there may be subsets of IR that to not correspond to ICEXT(x) for any x in IR, it's still possible to have PropObj a subset of IR such that _:x eg:prop eg:C = eg:C in PropObj without PropObj being the class extension of any range of eg:prop. 
So I'm inclined to say the entailment doesn't really add any useful value, so why bother? 
Returning to Pat's proposed change [1], I think I can see that the IFF is appropriate for rdfs:subClassOf and rdfs:subPropertyOf, because they are directly related to expectations of class membership. 
I'm not so convinced the same considerations apply to rdfs:range and rdfs:domain. 
The current MT [2] constraints on an RDFS interpretation are If x,y is in IEXT(I(rdfs:range)) and u,v is in IEXT(x) then v is in ICEXT(y) If x,y is in IEXT(I(rdfs:domain)) and u,v is in IEXT(x) then u is in ICEXT(y) If x,y is in IEXT(I(rdfs:subClassOf)) then ICEXT(x) is a subset of ICEXT(y) If x,y is in IEXT(I(rdfs:subPropertyOf)) then IEXT(x) is a subset of IEXT(y) I can see Pat's additions to the rdfs:subClassOf and rdfs:subPropertyOf entailments. 
I'm not sure what the corresponding additions would be for rdfs:range and rdfs:domain. 
#g [1] http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2002Sep/0169.html [2] http://www.w3.org/TR/rdf-mt/#rdfs_interp Graham Klyne 
