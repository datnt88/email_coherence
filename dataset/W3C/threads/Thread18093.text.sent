Regarding the OSM. 
I have these concerns: Prone to errors Very difficult to create from scratch Each platform has an entirely different graphics subsystem requiring an incredible amount of rework There is no OSM on pervasive devices or UNIX systems We absolutely need the DOM to be able to support the chrome. 
This is not just for GUI interfaces but it is also for audio browser interfaces that need to access information beyond the document such as history lists, etc. 
In fact, it was amazing how many of the other companies present at the DOM 3 working group meeting had a need for an application architecture based on DOM. 
This is not to say that IE would not be accessible because it uses MSAA for the chrome. 
An accessible application framework is absolutely critical to address the needs that I am referring to. 
The fact is the construction of an OSM requires reverse on engineering on every new platform. 
The cost of creating accessibility for each new platfrom based on the DOM is expensive. 
New accessible infrastructures like the DOM, Java Accessibility, and MSAA target accessible objects and not an OSM because: They are more accurate They are less costly to implement They create an engineered conduit through which to make applications accessible I am very proud of our work on the OSM too. 
However, I am not comfortable with its limitations and the future accessible web we are all trying to create it does not fit. 
I working cross-platform accessible application model for the web is needed. 
This model will need to support the chrome. 
Rich Rich Schwerdtfeger Lead Architect, IBM Special Needs Systems EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm "Two roads diverged in a wood, and I - I took the one less traveled by, and that has made all the difference.", 
Frost thatch@us.ibm.com on 01/29/2000 06:42:43 PM menovak@facstaff.wisc.edu , Peter Korn peter.korn@sun.com 
, w3c-wai-ua@w3.org Subject: Re: Tenative meeting on the DOM with AT vendors for the User Agent Guidelines Rich, In speaking of developing DOM 3 to include agent chrome, you say that the only alternative is: "going back down the antiquated OSM route to get the needed information." 
I would hardly call Off-Screen Model technology "antiquated." 
I suspect that having put so much effort into developing the most stable and robust OSM in the business, you didn't remember that Screen Reader/2 used OS/2 messages and queries to get at chrome. 
So it is today that most screen readers depend on Windows messages and queries, and those available through from a common interface, namely MSAA, to access Chrome. 
I see no reason for including Chrome in the DOM. 
The age of OSM technology, about 13 years, has nothing to do with it. 
Jim Thatcher IBM Accessibility Center www.ibm.com/sns 
HPR Quick Help: http://www.austin.ibm.com/sns/quickreplace.html 
(512)838-0432 schwer@us.ibm.com on 01/28/2000 03:00:04 PM peter.korn@sun.com 
, w3c-wai-ua@w3.org Subject: Re: Tenative meeting on the DOM with AT vendors for the User Agent Guidelines That's fine. 
I think you should know that I met with the DOM working group in California. 
We (PF group) plan on extending the DOM further for accessibility in DOM 3. Furthermore, I have started the wheels rolling on an editorial team in the DOM working group to address the feasibility of extending the DOM to include the "chrome." 
There were a number of DOM WG members who were very interested in this prospect for a number reasons: audio browsers pervasive devices, etc. 
I don't understand why you feel it is necessary to solicit support given that there is no other mechanism other than going back down the antiquated OSM route to get the needed information. 
Rich Rich Schwerdtfeger Lead Architect, IBM Special Needs Systems EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm "Two roads diverged in a wood, and I - I took the one less traveled by, and that has made all the difference.", 
Frost Jon Gunderson jongund@ux1.cso.uiuc.edu on 01/27/2000 04:52:46 PM Schwerdtfeger/Austin/IBM@IBMUS, Peter Korn peter.korn@sun.com 
Subject: Tenative meeting on the DOM with AT vendors for the User Agent Guidelines Peter, Mark and Rich, The W3C WAI User Agent guidelines are going to be in Candidate Recommendation within a day or two. 
Part of the goal of our candidate recommendation period is to discuss the use of the DOM with AT vendors for assistive technologies to provide alternative access to WWW content. 
We hope to gain their support in using the DOM as the primary way to provide an exchange of WWW content between user agents and assistive technologies. 
We have tenatively scheduled this meeting for 18 Feburary at 2:00 EST. 
I would like to invite all of you to participate in this teleconference and was wondering about your availability and interest in attending at the tenative date and time. 
Thank you, Jon Jon Gunderson, Ph.D., ATP Coordinator of Assistive Communication and Information Technology Chair, W3C WAI User Agent Working Group Division of Rehabilitation - Education Services College of Applied Life Studies University of Illinois at Urbana/Champaign 1207 S. Oak Street, Champaign, IL 61820 Voice: (217) 244-5870 E-mail: jongund@uiuc.edu 
WWW: http://www.staff.uiuc.edu/~jongund 
WWW: http://www.w3.org/wai/ua Rich, while I agree with you that an Off Screen Model is often not the best way to engineer a product, particularly for cross-platform protability, I don't think there is an intrinsic reason why it is harmful. 
If a developer was working only on a single platform (and many do) and found that using an OSM was more effective than tying to get through a bizarre API or an undocumented one, then it may be a better solution. 
I think a DOM which includes access to the chrome is a great benefit to accessibility, and using itis a very good way to meet the needs of users. 
However I am not sure that it is always a requirement. 
In favour of requiring this approach is that it is a single standard, and is compatible with the DOM used to provide access to a document. 
Charles McCN Regarding the OSM. 
I have these concerns: Prone to errors Very difficult to create from scratch Each platform has an entirely different graphics subsystem requiring an incredible amount of rework There is no OSM on pervasive devices or UNIX systems We absolutely need the DOM to be able to support the chrome. 
This is not just for GUI interfaces but it is also for audio browser interfaces that need to access information beyond the document such as history lists, etc. 
In fact, it was amazing how many of the other companies present at the DOM 3 working group meeting had a need for an application architecture based on DOM. 
This is not to say that IE would not be accessible because it uses MSAA for the chrome. 
An accessible application framework is absolutely critical to address the needs that I am referring to. 
The fact is the construction of an OSM requires reverse on engineering on every new platform. 
The cost of creating accessibility for each new platfrom based on the DOM is expensive. 
New accessible infrastructures like the DOM, Java Accessibility, and MSAA target accessible objects and not an OSM because: They are more accurate They are less costly to implement They create an engineered conduit through which to make applications accessible I am very proud of our work on the OSM too. 
However, I am not comfortable with its limitations and the future accessible web we are all trying to create it does not fit. 
I working cross-platform accessible application model for the web is needed. 
This model will need to support the chrome. 
Rich Rich Schwerdtfeger Lead Architect, IBM Special Needs Systems EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm "Two roads diverged in a wood, and I - I took the one less traveled by, and that has made all the difference.", 
Frost thatch@us.ibm.com on 01/29/2000 06:42:43 PM menovak@facstaff.wisc.edu , Peter Korn peter.korn@sun.com 
, w3c-wai-ua@w3.org Subject: Re: Tenative meeting on the DOM with AT vendors for the User Agent Guidelines Rich, In speaking of developing DOM 3 to include agent chrome, you say that the only alternative is: "going back down the antiquated OSM route to get the needed information." 
I would hardly call Off-Screen Model technology "antiquated." 
I suspect that having put so much effort into developing the most stable and robust OSM in the business, you didn't remember that Screen Reader/2 used OS/2 messages and queries to get at chrome. 
So it is today that most screen readers depend on Windows messages and queries, and those available through from a common interface, namely MSAA, to access Chrome. 
I see no reason for including Chrome in the DOM. 
The age of OSM technology, about 13 years, has nothing to do with it. 
Jim Thatcher IBM Accessibility Center www.ibm.com/sns 
HPR Quick Help: http://www.austin.ibm.com/sns/quickreplace.html 
(512)838-0432 schwer@us.ibm.com on 01/28/2000 03:00:04 PM peter.korn@sun.com 
, w3c-wai-ua@w3.org Subject: Re: Tenative meeting on the DOM with AT vendors for the User Agent Guidelines That's fine. 
I think you should know that I met with the DOM working group in California. 
We (PF group) plan on extending the DOM further for accessibility in DOM 3. Furthermore, I have started the wheels rolling on an editorial team in the DOM working group to address the feasibility of extending the DOM to include the "chrome." 
There were a number of DOM WG members who were very interested in this prospect for a number reasons: audio browsers pervasive devices, etc. 
I don't understand why you feel it is necessary to solicit support given that there is no other mechanism other than going back down the antiquated OSM route to get the needed information. 
Rich Rich Schwerdtfeger Lead Architect, IBM Special Needs Systems EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm "Two roads diverged in a wood, and I - I took the one less traveled by, and that has made all the difference.", 
Frost Jon Gunderson jongund@ux1.cso.uiuc.edu on 01/27/2000 04:52:46 PM Schwerdtfeger/Austin/IBM@IBMUS, Peter Korn peter.korn@sun.com 
Subject: Tenative meeting on the DOM with AT vendors for the User Agent Guidelines Peter, Mark and Rich, The W3C WAI User Agent guidelines are going to be in Candidate Recommendation within a day or two. 
Part of the goal of our candidate recommendation period is to discuss the use of the DOM with AT vendors for assistive technologies to provide alternative access to WWW content. 
We hope to gain their support in using the DOM as the primary way to provide an exchange of WWW content between user agents and assistive technologies. 
We have tenatively scheduled this meeting for 18 Feburary at 2:00 EST. 
I would like to invite all of you to participate in this teleconference and was wondering about your availability and interest in attending at the tenative date and time. 
Thank you, Jon Jon Gunderson, Ph.D., ATP Coordinator of Assistive Communication and Information Technology Chair, W3C WAI User Agent Working Group Division of Rehabilitation - Education Services College of Applied Life Studies University of Illinois at Urbana/Champaign 1207 S. Oak Street, Champaign, IL 61820 Voice: (217) 244-5870 E-mail: jongund@uiuc.edu 
WWW: http://www.staff.uiuc.edu/~jongund 
WWW: http://www.w3.org/wai/ua W3C Web Accessibility Initiative http://www.w3.org/WAI 21 Mitchell Street, Footscray, VIC 3011, Australia Charles, The major problem with OSM technology as the primary means for access WWW content is the loss of information on the types of elements and relationships between elements in the document. 
OSM primarliy provides information on text, fonts, colors and position of content redered on a graphical display, but the AT will not get any information on the type of element rendered or the element's attributes. 
Jon Jon Gunderson, Ph.D., ATP Coordinator of Assistive Communication and Information Technology Chair, W3C WAI User Agent Working Group Division of Rehabilitation - Education Services College of Applied Life Studies University of Illinois at Urbana/Champaign 1207 S. Oak Street, Champaign, IL 61820 Voice: (217) 244-5870 E-mail: jongund@uiuc.edu 
WWW: http://www.staff.uiuc.edu/~jongund 
WWW: http://www.w3.org/wai/ua Hi Charles, Please pardon my soap-box... 
There is a significant issue with the OSM approach: responsibility for problems in accessibility are almost never clear. 
If one screen reader's OSM is able to capture information on the screen through some particularly tricky heuristics, then it is to the benefit of the users of that particular screen reader, but it may not work in other screen readers (to the detriment of those users). 
Then the question becomes who should change - the poorly behaved application putting that information on the screen, or the OSMs of the other screen readers? 
If there is a standard way for applications to describe their contents via a programming interface (API), then it is much eaiser to figure out what is going wrong and fix it. 
The API may be insufficiently expressive, the app may not be implementing the API properly, or the assistive technology may not be utilizing the API. 
Those three things I claim are eaiser to test and verify than the finger-pointing we get via the OSM model. 
When we have an API, assistive technologies can always go beyond the API (as happens already today), if the API or the application implementation(s) of the API do not meet their needs. 
Should we not require full keyboard access? 
After all, the functionality of one screen reader - outSPOKEN for Macintosh - provides features like Find that make keyboard access less critical (especially since on the Macintosh there isn't that much support in the OS for keyboard access to controls). 
Also, an assistive technology could potentially assign their own keyboard access mechanism on top of ill-behaved apps (just as screen readers build information in their OSMs that by rights should be directly exposed by applications). 
I think going forward we need to require that applications provide *all* of their semantic information directly via a clear and easy to use API to assistive technologies. 
Assistive technologies have a long, proud, and painful history hacking around operating systems and applications so as to provide their users with access. 
The engineering staffs of these companies have tremendous expertise in reverse engineering behavior, and these techniques have provided tens of thousands of users with workable access solutions and thereby employment and general access to information. 
But it is time we stop relying on this expertise, and leaving users with a mish-mash patchwork of access quality to applications that are supposedly complying with a new set of guidelines on how to be compatible with assistive technologies. 
We can do better than that, and require better than that, of the next generation of applications. 
Peter Korn Sun Accessibility team For an application to provide *all* its semantic information is a non-terminating process. 
We need an information model or class system that defines a required "skin depth" of information that has to be visible behind the surface at the API. 
Peter (I believe) in referring to "all the semantic information" has internalized the current definition of the Java accessibility profile as a reasonable version of such a spec. 
Once we get into issues of what constitutes the semantic definition of the interface, and how to specify that in a way which is effective, we have touched PF territory. 
Not to take the issue away from this discussion, but just to say "register PF as a listener on this one, please." 
Al those may meet that information it is with With structured information such as HTML and XML markup (even when it is done badly there is structure to the information) it is indeed useful to have access to all the available structure semat=ntics and the content. 
I agree - building an Off Screen Model relies on the content being presented, which may or may not be the case. 
The choice then seems to be whether we require of user agents a way to present all the semantic information (i.e. element types and their attributes) on screen, or to expose it through an API, or to do at least one of these. 
Following the discussion, it seems that having the information exposed through an API is generally a superior choice, and the DOM is the natural choice for documents, although a case could be made for the use of a platform-specific alternative where one is available - for example the Java access bridge or Microsoft Active Accessibility. 
One thing that does not seem (as I understand the discussion) to follow is a requiremnt to completely implement the DOM, which provides for manipulation of the document as well as "read access" to it. 
Indeed, it could be argued that doing this makes the browser liable to being an authoring tool, opening a whole new bag of tricks for accessibility. 
(I don't have the answer to this question either. 
But it seems to be getting clearer slowly) Charles McCN Hi Charles, Please pardon my soap-box... CMN: On the contrary, thank you for spending long enough atop it to bring some clarity to bear. 
PK: There is a significant issue with the OSM approach: responsibility for problems in accessibility are almost never clear. 
If one screen reader's OSM is able to capture information on the screen through some particularly tricky heuristics, then it is to the benefit of the users of that particular screen reader, but it may not work in other screen readers (to the detriment of those users). 
Then the question becomes who should change - the poorly behaved application putting that information on the screen, or the OSMs of the other screen readers? 
If there is a standard way for applications to describe their contents via a programming interface (API), then it is much eaiser to figure out what is going wrong and fix it. 
The API may be insufficiently expressive, the app may not be implementing the API properly, or the assistive technology may not be utilizing the API. 
Those three things I claim are eaiser to test and verify than the finger-pointing we get via the OSM model. 
When we have an API, assistive technologies can always go beyond the API (as happens already today), if the API or the application implementation(s) of the API do not meet their needs. 
CMN had written and PK responded: Should we not require full keyboard access? 
After all, the functionality of one screen reader - outSPOKEN for Macintosh - provides features like Find that make keyboard access less critical (especially since on the Macintosh there isn't that much support in the OS for keyboard access to controls). 
Also, an assistive technology could potentially assign their own keyboard access mechanism on top of ill-behaved apps (just as screen readers build information in their OSMs that by rights should be directly exposed by applications). 
I think going forward we need to require that applications provide *all* of their semantic information directly via a clear and easy to use API to assistive technologies. 
Assistive technologies have a long, proud, and painful history hacking around operating systems and applications so as to provide their users with access. 
The engineering staffs of these companies have tremendous expertise in reverse engineering behavior, and these techniques have provided tens of thousands of users with workable access solutions and thereby employment and general access to information. 
But it is time we stop relying on this expertise, and leaving users with a mish-mash patchwork of access quality to applications that are supposedly complying with a new set of guidelines on how to be compatible with assistive technologies. 
We can do better than that, and require better than that, of the next generation of applications. 
Peter Korn Sun Accessibility team W3C Web Accessibility Initiative http://www.w3.org/WAI 21 Mitchell Street, Footscray, VIC 3011, Australia 
