Then you always will have discussions about whether new resource types will be necessary if they just have one or two more methods or properties than another one. 
The resources in the spec are not defined by the set of methods or properties. 
They are defined by *human* concepts. 
We have identified a model which incorporates Version Controlled Resources, Baselines, Activities, Workspaces, Working Resources, Version Resource, etc. 
Note that I used labels to define those things. 
I did *not* use {DAV:checked-in}, {DAV:baseline-collection}, {DAV:activity-version-set}, {DAV:workspace-checkout-set}, {???}, {DAV:checkout-set} as the descriptions. 
This is precisely the point I raised in "One suggestion is to annotate DAV:resourcetype with those types and categorizations adopted by the Delta-V specification (version, working resource, baseline, etc.) Those types were obviously considered important when writing the specification to aid in its understanding, so it seems reasonable to reflect them in the resources themselves." 
Some further points: *) howthehell do I describe a Working Resource? 
I can't see that it has a unique property. 
(You're going to like this :-) A working resource has DAV:checked-out/ and does not have (appears and does not appear, respectively, in DAV:supported-live-property-set) *) is DAV:checkout-set actually unique to a Version resource? 
Some of those properties are reflected in VCRs. 
Which Version Resource properties *do* get copied to a VCR, and which do not? 
The ones that don't will therefore signal whether a resource is a Version resource or not. 
A version is identified by its support for the DAV:version-name property. 
For the full list of defining properties, plus Geoff's corrections, see Sorry. 
But the human is what we are writing this spec for. 
And we attach labels to these things. 
Not a set. 
Agreed. 
Oh: and Tim argued, "well, for somebody to implement DeltaV, we're going to ask a lot more than simple Set computations." 
Oh. Great. 
Just because some part is difficult, that means we can make *everything* difficult? 
That's bogus. 
"Hey, John. 
You can do DeltaV if you can jump over this 6 foot bar. 
Oh. Wait. 
The DeltaV designers said that if you can do that, then you can also jump over this 10 foot bar. 
Cool. 
Go, man! 
Jump!" pthtpth. 
Non-starter. 
(I don't know what 'pthtpth' means, but you probably just swore at me in acronym-speak:^) Flame on. 
Come on Greg -- you can't be serious. 
(1) Performing set intersection is absolutely trivial. 
It requires WAY more intelect to figure out how to implement merge functionality, XML parsing, PROPPATCH atomicity. 
(2) If we _do_ go for extending DAV:resourcetype the likely outcome is something like a *Set* of orthogonal characteristics, such as version-controlled-resource , collection , checked-in -- guess what, you'll have to do that "difficult" Set thing again anyway. 
(3) Just because I said that there is more to delta-v than these simple operations doesn't mean that I'm suggesting we make everything difficult. 
That doesn't follow at all. 
Clients and servers are *already* doing these Set operations for each PROPPATCH, PROPFIND and other methods. 
Give people some credit. 
Tim The reason I'm applying so much time/energy to this thread, is that it is really a general DAV question that shows up (and will continue to show up) in every DAV extension. 
I'd like to develop some guiding principle for "what goes in DAV:resourcetype", so that we don't end up having these same (often metaphysical :-) arguments every time the topic comes up. 
Hey, that's an impressive target. 
I won't pretend to solve this problem with my comments :-) Geoff: hey, you've been rumbled! 
From your ACL list posting: "For DAV:resourcetype in the versioning protocol, I really don't care much what we do with DAV:resourcetype there either, but figured we might as well argue about something in the versioning list while we're waiting for the area directors to review the versioning protocol." 
Which is it? 
You want to "develop some guiding principle" for future generations, or "don't much care ... but figured we might as well argue about something" g (You don't have to answer that question:-) For some historical background, I orginally proposed DAV:supported-method-set and DAV:supported-live-property-set because DAV:resourcetype wasn't giving me the detail I needed to populate my GUI's. 
Certainly, before I had these two properties, DAV:resourcetype was essential. 
This may therefore be one of those times where a protocol feature that was required has become redundant through the addition of later features. 
I follow this thread already for a while and couldn't decide which way to go. 
But at the moment I think I agree with Geoff. 
It sure is easier to cope with a limited number of resource types. 
OTOH there is the problem to define them and their differences. 
Then some are similar but still different and you are in danger to define a (class) hierarchy sometime in the future. 
Then you always will have discussions about whether new resource types will be necessary if they just have one or two more methods or properties than another one. 
In the realm of programming languages there are ideas of avoiding compatibility problems between classes (which have their defined place in a class hierarchy) or components (Buzz word :-) by just defining interfaces in the form of messages/methods. 
As long as an object understands all of the messages (By name) of an interface it is treated as that (resource)type. 
If it has a different semantics for some methods ? 
Bad luck. 
I see that this is a risk, but OTOH it is more flexible. 
I acknowledge the drawbacks some of you have mentioned, but a design without (too much) redundencies also has it's advantages. 
So I guess removing resource type is okay with me (See my signature about Einstein) I agree with your observation, and note that the "interfaces" are usually _named_. 
Since the specification has already named these interfaces ("types") I think it makes sense to use those names rather than constantly refer to resource types by the set of "messages/methods" they define. 
Tim *) howthehell do I describe a Working Resource? 
I can't see that it has a unique property. 
[ Greg puts on his safety harness... ] Oh, bleck. 
I can't possibly imagine a client developer figuring stuff like that out. 
Geez... *) is DAV:checkout-set actually unique to a Version resource? 
Some of those properties are reflected in VCRs. 
Which Version Resource properties *do* get copied to a VCR, and which do not? 
The ones that don't will therefore signal whether a resource is a Version resource or not. 
But also the absence of some other properties. 
VCRs have the version-name property on them, too. 
This is why I'm leery of this approach. 
If I looked for a version-name property, then I'd be screwed because it would be on all my VCRs, too. 
Reading that, it would appear that creating a classification of the resources is order dependent. 
I better have my checks in the proper order. 
If we aren't going to use resourcetype, then the contents of that post must be reflected somewhere. 
Or people just aren't going to get it right. 
If it doesn't go into the spec "because it duplicates information", then where are we supposed to put it, such that people will find it? 
The spec seems the appropriate place for algorithms like that. 
But using a resourcetype can avoid algorithms in the first place :-) Oh: and Tim argued, "well, for somebody to implement DeltaV, we're going to ask a lot more than simple Set computations." 
Oh. Great. 
Just because some part is difficult, that means we can make *everything* difficult? 
That's bogus. 
"Hey, John. 
You can do DeltaV if you can jump over this 6 foot bar. 
Oh. Wait. 
The DeltaV designers said that if you can do that, then you can also jump over this 10 foot bar. 
Cool. 
Go, man! 
Jump!" pthtpth. 
Non-starter. 
Nah. 
Just a typed out "raspberry". 
:-) (and you probably don't know that term either, over there in the UK :-) :-) Okay. 
I probably deserved that. 
Partly serious. 
I disagree with the notion of saying that something has an acceptable difficulty just because something else is even more difficult. 
I'd prefer to see a simple "this is this type" in the resourcetype field. 
This is probably the sticking point here. 
We'd probably end up with several tokens in there to avoid combinatorial explosion :-( Cheers, -g Greg Stein, http://www.lyra.org/ 
Nope. 
A version-controlled resource does not have a DAV:version-name property. 
Nope again, the checks can be performed in any order. 
I hereby volunteer to write an appendix describing that if people consider it a good thing. 
Oh yes, I'm please to say that some parts of our `culture` are compatible several Absolutely. 
Tim Woah. 
Reading the spec on this part closely... it would appear that we dropped the whole thing about a VCR copying all the props of the version? 
What happened here when I wasn't looking? 
:-) Cheers, -g Greg Stein, http://www.lyra.org/ 
I assume by "a VCR copying all the props of the version", you mean after an UPDATE request? 
To my knowledge, UPDATE has always copied only the dead properties of the version to the VCR, not the live properties. 
Cheers, Geoff version-name Woah. 
Reading the spec on this part closely... it would appear that we dropped the whole thing about a VCR copying all the props of the version? 
What happened here when I wasn't looking? 
:-) Cheers, -g Greg Stein, http://www.lyra.org/ 
