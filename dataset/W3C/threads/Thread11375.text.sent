I have ploughed through the mail archive of this group looking for any arguments for or against the removal of name groups in the element type part of an ELEMENT and ATTLIST declaration. 
i.e. !ELEMENT (a|b|c|d) ........... 
I was suprised to find none, considering how widely used this construction is in SGML DTDs. 
I have looked at many of the popular DTDs, ISO12083, AECMA, IBMIDDOC, DOCBOOK, HTML, etc. 
Every DTD I have looked at (with one exception) used name groups in their declarations to a greater or lesser extent. 
While popularity is not the main reason for promoting a feature, I believe that this piece of syntax is useful in XML for a number of reasons: - Losing this feature would entail expanding out name groups in the DTD. 
In cases where this feature is extensively used the DTD would grow significantly and in some cases the maintainability of the structure would be greatly reduced. 
e.g. 
The number of element declarations in ISO12083 DTD for articles would nearly double without this feature. 
- Parameter entities to 'name' sets of elements is used by those who have to scan the DTD text 'in the raw' are a great boon to the clarity of the DTD. 
e.g. from ISO12083 DTD for articles !ENTITY % pub.ph "fpage|lpage|coden|acqno|issn|acidfree|price|extent|artid|category|pubid" -- publication related front matter material -- - Remarks have been made about re-admitting tag minimisation characters into the syntax to preserve compatibility between SGML and XML DTDs. 
Although I realise that DTDs for both languages can be written without using name groups, I believe there is an argument for them being placed in the same class of compatibility features. 
- I believe that until more graphic DTD creation tools abound the use of name groups, coupled with parameter entities is significant in easing the creation of new DTDs. 
Martin Pike, Stilo Technology WWW: http://www.demon.co.uk/stilo 
On Tue, 25 Mar 1997 13:51:40 -0500 Martin Pike said: The main argument against is simple to describe: anything you can say with name groups of this sort, you can say without them. 
And eliminating the construct eliminates the need to describe and explain it in the spec, and the need for readers to understand it. 
In any language, every new construct imposes some burden of documentation and complication. 
In a language designed to be as lightweight as possible, complications of any kind are very hard to justify. 
Complications which do not provide new functionality are and should be even harder to justify. 
Those most interested in making XML-compatible DTDs maintainable had (and continue to have) other fights on our hands, to defend the existence of parameter entities and conditional sections. 
Me, I don't even find name groups useful even in full SGML; I think they complicate things more than they help, and every time I consult the HTML 3.2 DTD I curse the fact that I can't just search for ' !ELEMENT foo' to find the relevant declaration. 
So while I see your point, I for one remain convinced that the decision on this question was the right one. 
-C. 
M. Sperberg-McQueen Just like in all those programming languages where you say integer a ; integer b ; integer c ; integer d ; --which is much easier than integer a, b, c, d ; Dave Peterson SGMLWorks! 
davep@acm.org 
Pshah. 
Use FORTRAN and you don't _need_ this stuff... Now _there_'s a thought: all char ents beginning with i, j, k,... are reserved for...no, scrub it... :-) ///Peter 
