I work for a University and we are trying to update all our web sites so that they have full accessibility. 
Does anyone know of any good 
libraries online that explicitly and clearly list what Javascript is fully compliant with accessibility web standards and what script is not suitable? 
Any URLs you can point me to would be vastly appreciated! 
Thanks Stephanie Hagopian IT Security Analyst University of North Carolina-Chapel Hill 
An admirable goal, and one we encourage and support you in (actually, I should say I, but this list is very supportive too). 
Do the "policy makers" and decision takers understand what they are saying when they make that statement? 
Is the goal one of convenience, marketing, or sincerity (or a combination of all 3). 
With no offence, making a statement is a good start, but has a desired outcome been completely and thoroughly discussed, decided upon and agreed to? 
Have the appropriate people involved in the decision making process been appraised of the full ramifications of setting out on this task? 
Are they prepared to give up "pet projects" or specific "views" (or visions) of how it's *supposed* to be/look/act? 
Have they determined a "measurable" level of compliancy (be it Section 508, or W3C Priority 1, Priority 2, or Priority 3)? 
Have they thought about how they plan to monitor and ensure compliancy now, and in the future? 
These are tough questions, and the answers aren't any easier. 
The W3C Web Content Accessibility Guide is a great starting place (http://www.w3.org/TR/WCAG10/), or start with the Prioritized Checklist (http://www.w3.org/TR/WCAG10/full-checklist.html) 
One of the Priority One checkpoints is Number 6.3, which states: "Ensure that pages are usable when scripts, applets, or other programmatic objects are turned off or not supported. 
If this is not possible, provide equivalent information on an alternative accessible page." 
Now, depending on how you read and interpret that statement will help you to determine whether the JavaScript you are using is "Accessible" or not. 
If you are using JS to create "eye-candy" effects such as "rollover" images or writing to the document location bar, well, shouldn't be a real problem, because if a user is using a browser which does not support JS, they won't see the rollover or what have you, but they can still get to the heart of the page; it's content or function. 
On the other hand, if you are using JS to provide what I call a "Mission Critical" function (say perhaps to write out your navigation or provide a search functionality) then IMHO you are crossing the line. 
What happens when a browser that does not support JS hits that page? 
They cannot navigate or search? 
That's a serious Accessibility issue! 
But even then, all is not lost, because, depending on what you are doing with the JS, you can also develop a fallback position which degrades nicely; whether it's the "Return False;" declaration in your event or the use of the noscript block to provide the alternate content. 
Thus, it's not so much that there is a library of canned "approved" scripts which one can download and use, but rather the philosophy behind the usage of the script(s). 
I would suggest that if it is simply for GUI tricks, have a party. 
But if it contributes any real functionality to the page or site, then it MUST be a server side scripting language to ensure universal accessibility. 
Stephanie, as you move through this process, do not hesitate to turn to this list with your questions or concerns... there are a number of talented, concerned and informed people who will try their hardest to help you with your questions. 
Good Luck JF 
Here is an example that demonstrates why javascript is basically bad technology as far as accessibility is concerned. 
Our department has a web site that displays important working information regarding our group. 
One of the things displayed is a schedule of who is on call at a given time. 
A person who created the site saw what he thought was a cool little clock artifact that followed the mouse over the screen and graphically showed who is on call. 
I needed to find out that information to update an automated script I have which rotates the contact information in an automated paging sequence which had gotten out of sync with our actual list. 
Had this been written in standard html or had it used a server-side xml engine that evaluated the client, I would have received the information textually. 
Instead, I got the standard javascript wimp-out in which you see the link you need, select it and the screen just stays the same. 
I have seen a few test web pages in which xml server-side mechanisms deliver javascript to those who can use it and html to those who either turn off scripting or run something like lynx which doesn't understand javascript and they work very well with lynx. 
I think this type of web server is apt to be more of an example of what just might fix a lot of seemingly intractable problems. 
Right now, UNIX users who happen to be blind do not have any scripting browser that can work satisfactorily for them. 
One real problem with javascript or ECMAscript is that lots of it is actually customized for either Netscape or Internet Explorer. 
As long as people have to do extra work for accessibility, it "ain't gonna' happen." 
It will only happen when servers automatically tailor their output to the client rather than spewing javascript at everything that uses port 80. Martin McCormick WB5AGZ Stillwater, OK OSU Center for Computing and Information Services Network Operations Group 
I have to disagree that this exemplifies how JavaScript is in itself a "bad technology." 
Used in a coherent manner, JavaScript can be quite useful. 
You can make an inaccessible environment in any programming language, so I would conclude that this example demonstrates the developers narrow scope of various JavaScript coding practices. 
I do, however, agree with the phrase "As long as people have to do extra work for accessibility, it 'ain't gonna' happen.'" 
But I don't believe that this is a reflection on the language itself. 
To insure that you receive proper support, please include all past correspondence (where applicable), and any relevant information pertinent to your situation when submitting a problem report to the GW Micro Technical Support Team. 
Aaron Smith GW Micro WWW: http://www.gwmicro.com 
FTP: ftp://ftp.gwmicro.com 
Technical Support &amp; Web Development 
Amen, brother. 
I wholeheartedly agree. 
Used correctly, JavaScript can tremendously add to the user experience. 
It only becomes a problem when the developer relies on client-side scripting to complete essential functionality. 
For example: Client-side form modification and validation can save a user an enormous amount of time and headaches, but it should be supplemented with server-side control should the client-side behavior not be available. 
James 
I don't actually disagree with those who said that javascript is neither accessible nor inaccessible. 
Some used the analogy of a two-year-old child. 
I kind of think it is more like a tourist who goes to another land and thinks that if he or she shouts loudly enough and long enough, the natives will somehow understand. 
Maybe I should have said that present-day web authoring tools, when used as directed, encourage people to write inaccessible web sites. 
If it wasn't so, then we would only have 
this problem when someone was pushing the envelope and trying to produce unusual results. 
My real frustration with the whole situation is that I wonder how much of what has happened over the last decade or so is a true desire to advance the state of the art and how much is 
simply various private entities trying to gain an advantage by designing systems that are incompatible with accepted standards and practices. 
The model of lynx being an engine to render ASCII text out of html is an excellent Plan B for those who aren't using a graphical interface. 
As I have said before, people who are blind don't really use a graphical interface but instead use software that modifies the function of their graphical operating system so as to make it work much like a text terminal. 
There are two or three browsers being developed that work in a text environment which handle some of the common practices of javascript, but I have yet to see one that really works 
against most real-world sites which look like they should otherwise work. 
Usually, what happens is that if it bombs under lynx, you can get a little bit further under netrik or links as in L I N K S before those also bite the dust when they either just stop displaying anything useful or appear to get confused by whatever the site is trying to make happen. 
There are those who think that accessibility and usability are just one version of JAWS away, but I've been hearing that for about a decade now and it hasn't happened yet. 
There's always some reason why it doesn't quite work right now. 
If ever-increasing complexity isn't the answer, what is? 
I am truly asking this to the list, and am also suggesting that there is virtue in simplicity if for no other reason than simple systems are easier to debug. 
In this day, straight html pages with linear text as opposed to columns are apt to work for everybody. 
The more one adds scripting and or pluggins, the more users fall off the train for one reason or other. 
If you really want to get the word out, keep it simple. 
To me, the coolest thing of all is something that works like it should. 
I haven't seen very much cool stuff lately. 
Just to clear up any confusion I may have caused, UNIX users who work in the text environment have a small number of choices for web browsing. 
Lynx doesn't do any scripting but handles html very well. 
Links has some javascript support, but it has never gotten me out of a bind by letting me use a site that wouldn't work under lynx. 
There is also netrik which like links, has some javascript support, but which also tends to fold when faced with the wrong kind of web page. 
Martin McCormick WB5AGZ Stillwater, OK OSU Center for Computing and Information Services Network Operations Group 
A lot of web pages are for marketing purposes, and that tends to make pushing the envelope pretty much standard practice. 
Unfortunately pages for organisations with a mission to communicate, rather than to sell, seem to either get outsourced to the same companies that design marketing sites, or written by in house people chasing after higher paid jobs in the private sector. 
(The UK is particularly into outsourcing governmental web sites.) 
I think lock-in is a secondary benefit. 
The main aim has been to take a semantic medium and make money from using it in an environment that abhors overt semantics. 
As a result, it gets decorated with presentational features, then scripting is added to allow one to grossly change the user interface. 
The problem with idiom based script handling is that faces a moving target, and has to be continually maintained to track current fashions. 
