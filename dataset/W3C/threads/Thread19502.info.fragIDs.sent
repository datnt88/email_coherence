Since there has been a lot of theorizing on MathML lately, I thought I would explore the practical performance of the existing renderers. 
I wrote a little article that can be seen on The abstract is attached below. 
If you have any comments or corrections, I would be happy to hear them, if they are polite! 
Comparative Review of World-Wide-Web Mathematics Renderers. 
Ian Hutchinson Abstract I review three available means of browsing mathematical documents on the web. 
Two consist of Browsers with MathML rendering built in: Amaya, sponsored by W3C, and e-Lite, a Java-based commercial offering from IceSoft in collaboration with WebEQ. 
The comparison is with Netscape rendering mathematics created by the TeX to HTML translator TtH in HTML4.0. 
The MathML browsers compare very unfavorably with Netscape. 
e-Lite is extremely slow and consumes vast resources on the client platform. 
Its equation alignment is poor and it can't cope with large equations. 
Amaya is significantly faster rendering, is more robust, and has much smaller footprint. 
Its equation alignment is much better but it lacks support for most attributes of the Presentation MathML standard, including ``bold'', limiting its usefulness. 
Netscape, with minor settings adjustments on X and Mac platforms, renders equations produced with TtH at full text speed with more complete support of symbols and styles than either of the others. 
At present, therefore, Netscape has the overwhelming advantage, but of course, it is not rendering MathML. 
Would it be possible for you to make available the mml that you used in the tests? 
It is hard to really draw a judgement on comments such as 
Semantic difficulty is possibly implied by the excessively large parentheses on Es(ws), 
unless the mathml input is available. 
but appears to require upright to be explicitly specified as well as bold to behave in standard TeX fashion, 
I believe that is the correct behaviour. 
(Also in TeX it is perfectly possible to switch to bold without being upright. 
eg \boldsymbol or \bm in latex). 
You are probably refering to the behaviour of \bf but that just selects a bold upright roman font for letters and doesn't make symbols bold at all, which probably isn't the semantics you would want for a fontweight="bold" attribute! 
In many ways of course it is fairer to compare tth with using gif images. 
(Which I know that you are quite willing to do:-) In that they both produce something that is essentially `read only'. 
MathML, even presentation MathML as tested here, is passing the mathematics to the browser in some half way sensible format so that it may be possible (eventually:-) to cut and paste sub expressions and do searches. 
This does of course have an impact on the amount of work that needs to be done in the browser. 
MathML technology is in its infancy and improving. 
I do not doubt your conclusions that _today_ a typical user (whatever that may mean) may not want to pay the price in terms of speed. 
But with a bit of luck things may be better next year... 
A difficulty all browsers are going to have with MathML is that the entity list is immense and there are numerous synonyms, so supporting the whole standard is going to be tough and there is no accepted subset choice that can be regarded as a de-facto standard. 
It would be possible to make a list of those entities that could be mapped to the glyphs (or combinations thereof)in the ISO latin-1 and adobe symbol font encodings. 
But probably trying to define such a core minimal set would not be useful as it is hard to give restrictions when authoring based on the capabilities present on a remote browser. 
Probably better would be for the browsers to accept all the entities but just do something recognisable if they do not have a suitable font available. 
(ie outputting the entity name in red would be preferable to just silently skipping over the symbol). 
The whole question of what symbols are available, and what entities should point at them will probably have to be looked at again in the future if the STIX proposal (or something like it) succeeds in getting an agreed set of mathematical symbols into unicode. 
David 
I have not looked at Ian's work. 
But David's comments about character entities lead me to suggest that it might be helpful to add to MathML a layer of core characters, say, corresponding to STIX, that are empty xml elements. 
Then if I am writing a processor from an authoring xml format to a presentation xml, say, voyager+mathml, I would have a better idea of what to write. 
Also provide in MathML distributions a default, but hackable, translation of this core into the world of character entities. 
It goes without saying that I see no place for character entities in 
authoring dtd's. 
-- Bill 
why? 
You use characters, so why not character entities (which are on the same level from an XML/SGML viewpoint). 
David 
:  It goes without saying : why? 
:  that I see no place for character entities in :  authoring dtd's. 
: You use characters, so why not character entities (which are on the : same level from an XML/SGML viewpoint). 
In a few words: it's more flexible. 
Yes, I confess that I do use characters. 
I have decided that there are only 62 characters, namely [0-9][A-Z][a-z], that I completely trust in every situation. 
Every other character has special "command" or "mark-up" meaning in at least one presentation format that I know. 
(For example, I see /bin/sh code as a possible presentation format.) 
Therefore, every other character has a name in my authoring DTD. 
As an author I sometimes choose not to use all of these names in every document that I produce, depending on the list of presentation formats that I plan for that document. 
For \alpha --- alpha/ at the authoring level I offer these reasons: 1. 
I want to avoid having the documents that I write be dependent on public standards that have not stood the test of time. 
2. I may have a presentation format in my list that does not encompass "&amp;alpha;". 
3. With some types of sgml/xml processing, e.g., sgmlspl/sgmlspm, it is more difficult to provide non-default handling for "&amp;alpha;" than for " alpha/ ". 4. I may decide that I do not want to rely on a browser to provide the string "alpha" in red when it cannot handle it. 
-- Bill 
