We spent a lot of time on this question on Dec. 11th, and it is clear we need some more help from the WG. 
The ERB is, by at least a substantial majority, convinced that there is a real nead for PUBLIC identifiers in XML. 
The ERB is highly concerned, in at least a significant minority, about the effects of putting this facility in without specifying a resolution mechanism. 
Doing so would contravene one of the major design goals of XML - that any compliant XML processor should be able to read any compliant XML document. 
On the other hand, there is also substantial concern about giving an unconditional blessing to any particular name resolution mechanism at this point in history. 
Thus, there are a variety of options open to us. 1. Leave it as it is 2. Agree that we'll put PUBLIC identifiers into XML *when* we are ready to specify the resolution mechanism; the practical effect is almost certainly that they don't go in for now. 
3. Put a slot in the syntax for PUBLIC identifiers... 3* ...and require an accompanying SYSTEM identifier 3a - say nothing about resolution mechanisms, perhaps providing a taxonomy of available technologies in this area 3b - document one resolution mechanism, but not make it required. 
This is somewhat similar to our i18n approach, where we bless 2 encodings but admit the possibility that people use others. 
3c - document one resolution mechanism as before, but make its use mandatory for XML processors. 
Note that there is a continuum between 3b and 3c; we could place varying strengths of recommendation behind one resolution mechanism, with homilies about document portability. 
In the area of which resolution mechanism to (perhaps nonexclusively) bless, SGML/Open catalogs (hereinafter Socats) stand out, and would probably be the ERB's choice. 
On another hand, there has been a lot of work go into the URN effort; on another hand, that work has not yet born practical fruit in terms of ubiquitous implementations; on another hand, the FPI syntax is repellent to some and it is not clear how well it supports internationalization; on another hand, it may be the case that FPI's really are URN's as they stand. 
I suspect that if a binding vote were taken today, the ERB would either (a) reinstate the PUBLIC keyword, and put in a nonexclusive recommendation for Socat support, or (b) refuse to put PUBLIC in until there was agreement on a required resolution mechanism. 
Input, please. 
Cheers, Tim Bray tbray@textuality.com 
http://www.textuality.com/ 
+1-604-488-1167 Personally, (a) would satisfy me. 
To mitigate implementers' concerns about how complex "Socat support" might be, the straw-man proposal posted 1996-12-02 describes (I hope) a syntax compatible with the complete SGML Open Catalog definition, with only the single keyword "PUBLIC" supported. 
This would allow implementers to work with a supplied Socat without modification, ignoring any specification of function other than the basic PUBLIC indirection. 
Implementers could then choose to support more than the basic functionality at their leisure ... there would be no fear of complexity that might be there if XML just "pointed" to the Socat spec. 
......... Ken Microstar Software Ltd. WATS: 1 800 267-9975 3775 Richmond Road Mail: gkholman@microstar.com 
Nepean Ontario Info: info@microstar.com 
CANADA K2H-5B7 Web: http://www.microstar.com 
Kars, Ontario CANADA K0A-2E0 E-mail: gkholman@CanadaMail.com -----BEGIN PGP PUBLIC KEY BLOCK----- Version: 2.6 mQCNAjHOimAAAAEEAK47HbDtZZB8hJBk+r9Zh7m7QxdFHTaz/m200QQ7J9XX4QYs h6hsuP6ZqBJXyLdmIVMEwR6Ry6oxjKMd6BRJ8OGScD89eIghgbrpMX+900NxM0x2 v3yWO9ki2gKRPrn4vlCXznnmcmsyke0G02T2LefXbgZHyVSqDSOLy8nwuN7dAAUR tClHLiBLZW4gSG9sbWFuIDxhYjk0NUBmcmVlbmV0LmNhcmxldG9uLmNhPg== =IN3T -----END PGP PUBLIC KEY BLOCK----- This is in contradistinction to other markup specifications. 
Is XML trying to specify the world around it? 
Are we specifying the behavior of an XML processor (parser?), or an entire XML environment? 
Note that while HTML mentions things like URLs and http, implementation details of other protocols, etc. are left to those other specifications. 
Given that one is well accepted but changing, the other not ready for prime time just yet. 
I don't see why there is a need for an "unconditional blessing". 
This sounds like a red herring. 
Merely describing a solution as *one option* for resolution without restricting others seems like the path of least resistance. 
This disallows a feature that *seems* to be demanded by many potential users of XML, forcing them to continue using 8879 unless they are willing to give up use of public text or embed system info in their documents. 
For example, I imagine an XML-ized HTML DTD available for XML developers might be a good idea. 
Well, how would that be distributed? 
A fixed SYSTEM URL? yuck. 
Not much for standards. 
Again, this begs the question of why the XML spec *needs* to create a complete solution in the first place. 
Putting off the discussion for later versions seems dangerous. 
I can see FONT and BLINK on the horizon. 
*Requiring* a SYSTEM identifier is tantamount to requiring authors to hardwire URLs into their documents, which is (at least in my mind) the principal objection to the status quo. 
This would be my choice. 
This would be fine, but I'm guessing some folks don't want anything to do with putting Socats in the spec, judging by the discussion. 
I think if we did, it would be best as an appendix. 
This limits the XML specification, as well as shackles development of better approaches in the future. 
While it may promote interoperability at some level, I suspect there are many who would either break the rule or simply ignore XML. 
Agreed. 
My choice as well. 
Particularly if we limit socats to PUBLIC only, disallowing such things as LINKTYPE, SGMLDECL, DTDDECL and the complexities of delegated catalogs. 
This would reduce it to a simple lookup table, which should be extremely simple to parse for content. 
These are issues that have yet to be decided. 
We can't wait until they are, given that timeline on this spec is so short. 
My vote. 
(well, I don't get a vote, but whatever) As I mentioned above, I think this puts an unnecessary onus on the XML specification to provide a solution, which seems unlike other markup specifications. 
Murray Murray Altheim, Program Manager Spyglass, Inc., Cambridge, Massachusetts "Give a monkey the tools and he'll eventually build a typewriter." 
Sorry for the long-winded response... 
I would like to see a 3b type spec for PUBLIC, which I characterize as: hand-wave about name resolution schemes, and allow a range of implementations consistent with common Web and SGML practices. 
I would like to see some recognition of catalogs, FPIs, and URNs, without requiring them. 
I'm swayed by all the arguments for allowing PUBLIC in XML. 
I see no compelling argument against full support per 8879-1, if we allow systems to assume "FORMAL NO" by default in the SGML declaration. 
This only requires a validating system to report an error if a PUBLIC ID is not a minimum literal. 
Authors and processing systems are free to interpret IDs as they see fit. 
On further reflection I believe that, in the interest of fostering the deployment of name resolution schemes for the Web, the XML spec should *recommend* that URL syntax be used for SYSTEM IDs, and URN syntax for PUBLIC IDs. 
The common naming schemes are relatively easy to explain, and parsing IDs is trivial. 
The message to implementors is forward looking: XML (the language) does not require recognition or handling of URNs and FPIs, but *does* encourage their use. 
The message to Web publishers is very positive: XML supports a useful feature for interchange with name resolution systems, and XML will scale better than HTML as industrial strength naming schemes come online. 
To make this work the spec should provide some concrete examples. 
The example should be placed in context with real world problems, and should employ naming schemes that are known to work (URL, FPI, ISBN). 
So we may not offer a formal specification of PUBLIC and SYSTEM IDs for the Web, but we can enable everyone in the Web community to recognize them when they see them. 
This approach strikes me as a reasonable balance among realism, political correctness, and functionality. 
It recognizes an important mechanism for name resolution, but does not impose undue hardship on implementors. 
No authors are forced to use them; no implementors are forced to parse them. 
And of course customers and vendors will work things out in the marketplace. 
/kmc 3. Put a slot in the syntax for PUBLIC identifiers... 3* ...and require an accompanying SYSTEM identifier As a list newcomer, I wasn't party to the previous debate on this, but whichever way it goes, I feel it is essential to specify what the order of acceptance is. 
The current position in SGML is a serious problem for users and implementors, where one application will use the SYSTEM identifier if it is there, and ignore the PUBLIC identifier even if it cannot locate the resource referred to by the SYSTEM identifier; and another application takes the PUBLIC identifer first and ignores the SYSTEM identifer even if it cannot resolve the PUBLIC identifier; and yet others work only with PUBLIC identifers or SYSTEM identifers but not both. 
///Peter I think this is sensible. 
If you don't specify a resolution mechanism, the SYSTEM identifier will certainly be required. 
I think this is a cop-out: "XML has a feature which is not documented in the spec, but here is the telephone number of the ERB members so you can ask how to implement XML properly" reminds me of another markup definition language.... :-) If you expect programmers to write code, the functionality of that code must be in the spec. 
There isn't anywhere else for it, unless you can include a normative reference to another text (e.g. to the X500 specification for ISO directory services, which obviously (?) should be preferred in an ISO/SGML context over the IETF URN work :-) There is no use (as far as I can see) for PUBLIC "string" being in the XML spec if XML systems all ignore it. 
It just clutters the language (like the - - omissible tag parameters, or " !DOCTYPE X SYSTEM "). 
A restricted subset of CATALOG, together with a documented set of mechanisms for resolving the catalog itself, might work. 
The mechanism for finding a remote catalog over ftp or http must work in the presence of CGI scripts and URLs with / in a query. 
I can post details of what SoftQuad Panorama does if it will help. 
It can all be described in under a page, I think, taking us to 28pp, although we're still some 50% over the 20 page goal. 
The difficulty with this is that URNs aren't ready yet, and SOcats only defer the problem: you then have to say how to get the catalog. 
On the other hand, we are going to have the same problem with associating style sheets with documents, and with following hypertext links based on public identifiers for documents. 
I don't think this will fly, ,as we don't have a single mechanism that satisfies everyone's needs yet, I think. 
I would still favour omitting PUBLIC for XML 1.0. 
The concerns that have been voiced all seem to relate to using SGML in an SGML context; it's not clear to me that the same concerns and implementation constraints apply to XML. 
There has been no clear statement in support of PUBLIC saying what functionality is needed and why. 
Allowing PUBLIC "xxx" to be ignored in XML has (as I see it) only a single advantage -- it is then possible to have an XML file that is also a legal HTML file, as long as it doesn't use any EMPTY elements or entities. 
It doesn't help you use existing SGML tools on your XML, as unmodified SGML tools don't actually work with XML (they don't interpret the charset processing instruction, for example, and have problems with the NET tag). 
Yuo have to modify your SGML files to use them with XML, althouth the transformatioon is automatic and simple. 
That modification can remove PUBLIC. 
You have to modify XML files to use them with old SGML tools. 
That modification can add PUBLIC. Lee XML systems will not "all" ignore it. 
Some XML systems will ignore it. 
Just as some XML systems will ignore my organization's or application's processing instructions. 
Nobody seems to have a problem with processing instructions, so why are public identifiers any more or less dangerous/mysterious/useless? 
For now, PUBLIC identifiers are "addressing processing instructions." 
At some point in the future they will be standardized, just as some processing instruction syntaxes are standardized (e.g. ?XML ). 
These hooks give us room to experiment in the present, and room to expand the standard in the future. 
Paul Prescod Since there will _never_ be a single resolution mechanism, this is not sensible. 
This straw man has been burned repeatedly. 
But we have seen that not _all_ systems will ignore it. 
Just the ones that you write, I guess. 
That's OK. CATALOG has default places to look that extend trivially to URLs and relative URLs -- this is another straw man. 
It is common to defer complex mechanisms one needs to protocols that provide those mechanisms -- And commonplace for schedules to be less-than perfectly aligned in such development. 
More straw. 
There is no _single_ mechanism that can meet the need to have multiple mechanisms. 
This point has been rather frequently repeated. 
I can repeat my quote from the URN list yet again, but I will let you look it up: (Hint: it's short and starts with "Mechanism independent") -- David I am not a number. 
I am an undefined character. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ yay! 
They'll get over it. 
"Mechanism independent" means that a requirement of a specific mechanism is not productive. 
We _should_ suggest URNs and SOCAT as possibilities and leave it to the market. 
2 key points: 1. PUBLIC IDs, if resolvable by a parser, should take precedence over a SYSTEM ID. 
This lets people who want to count on naming do so... 2. SYSTEM IDs must be required. 
This means that there is always _one_ resolution mechanism that can be tried even if you do nothing with names. 
People with internal use of PUBLIC and active opposition to SYSTEM can just put in an empty string. 
Given the state of implementation and acceptance it would be foolish. 
Please, no! Since a mandatory resolution mechanism is an anti-requirement, I think this is a bad approach. 
3b* please: We suggest the two most likely, allowing for doing nothing, and require a SYSTEM ID for those who find it disturbing not being able to tell if you can resolve a name or not. 
[ Note that this is the real difference between URL and URN resolution: you can tell that a URL is broken at time T, by trying to fetch the resource and seeing if you get it. 
Given a URN, you can _never_ tell if it is really broken, or you are just trying to wrong mechanism to resolve the URN. 
] I think 3c is actively unhelpful, as it removed one of the key kinds of flexibility that make URNs/FPIs attractive to those who find them attractive. 
FPIs probably will become URNs, with some kind of prefix. 
URN syntax is already divergent from FPI syntax (and in the initial characters, too). 
Maybe we shoul follow Keith Corbett's excellent suggestions: + FORMAL NO + URN, FPI both legal (I would add 9070 Object identifiers too, but I'm a weirdo). 
Keith's comment sums it up nicely: Tim, again: Acceptable. 
Wrong, because it eliminates one of the reasons to _use_ PUBLIC. 
more than you want, I'm sure. 
You're welcome. 
-- David I am not a number. 
I am an undefined character. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ Please, no.... Maybe. 
Doing it this way would keep XML system from fragmenting and returning to the current state of "I do it better--do it my way!" marketing. 
No. This would break existing documents. 
It is also philosophically wrong. 
If I give a public identifier, I really don't want to embed system identifiers. 
... not to say that it wouldn't work in some cases. 
Now, I could write perl script that filters.... slap! 
sorry, I been writing too much perl/SGML filters lately. 
Yes! Resolution technologies do not belong in a document spec. 
No. No. I would seem to me that we need *two* standards. 
One that specifies how the document is encoded and one that specifies the technical-environment-of-the-day-that-makes-it-go standard. 
Why couldn't we have XML standard and the XML-web environment standard for resolutions and other such things. 
One of the powers of SGML in a good number of the systems that I have built is the ability to replace the technology underneath and *not* change the documents. 
It would seem that in XML we want this as well. 
If we have a core XML document encoding standard and ancillary standards that define the environment for transport, resolution, etc. we can change the environment later and still use the document encoding standard. 
In addition, it can well define the difference between representation of information, understanding that representation, and environmental processing of such information. 
Such well defined components will keep people from developing systems in which encoding understanding is mixed with environment processing--as the current implementation of the web has done in some cases. 
It is my proposal that we have the following *separate* but related standards: * XML encoding as a subset of SGML - defines the encoding much as XML 1.0 does today. 
* XML-Web environment - defines resolution mechanisms, transport, etc. ...later on down the road we might want: * XML-CDROM environment * XML-MAIL environment ... etc. XML encoded documents *will* outlast the technology we use to transport and process it today. 
R. Alexander Milowski http://www.copsol.com/ 
alex@copsol.com 
Copernican Solutions Incorporated (612) 379 - 3608 Even though I was editor of the SGML Open "catalog" Resolution, I have read all the email and considered all the options. 
I do want public ids and the indirection they give. 
That means there has to be some resolution mechanism (not that it has to be in the XML spec or there is only one, but merely that resolution will be a necessary step when using public ids). 
Since SGML Open catalogs have been accepted, implemented, and used as one resolution mechanism, it is important to me to be able to continue to use them to resolve XML public ids. 
Since I can see benefit in allowing other resolution mechanisms, I am led to choices 3a or 3b. 
In the interest of having interoperable tools, I lean toward 3b. 
In fact, I would support having the XML spec require support for some (possibly simplified as per Ken Holman's posting) catalog resolution. 
Almost all the postings I have seen against mandating a resolution mechanism give good reasons why users/authors/tools shouldn't be restricted to a single resolution mechanism, but I have not seen arguments (except the "it's too hard to implement" argument that I have not quite accepted) to suggest that there is a downside to requiring XML tools to support catalog resolution. 
What I'm saying differs from 3c in that the use of catalogs would not be mandatory, but *if* the user/author wants to use catalogs, support for its use would be mandatory for all XML tools. 
Finally, I'd be happier with any of the 3-ish choices than not having public ids in XML 1.0. 
I would not want XML to require a SYSTEM identifier. 
I also wouldn't want it to require a PUBLIC id. I'd like to leave it as it is now in 8879 in that respect. 
This gives maximum flexibility to the user. 
As far as precedence of the PUBLIC versus SYSTEM id when both are given, the SGML Open technical committee had long discussions on this topic in 1993 and 94 when drafting TR9401. 
Some SGML luminaries argued that it was obvious that the SYSTEM id should always be preferred while others argued that certainly the PUBLIC id should always be preferred. 
After much heated discussion, if nothing else was clear it was that neither position is obvious. 
TR9401 decided to say that all implementations must support the user's ability to say whether they wanted to prefer the PUBLIC or SYSTEM id. 
In fact, the same user may wish at one time to give preference to the PUBLIC ids and at another time to give preference to the SYSTEM ids. 
Provided that all catalog implementations comply with the requirement to give the user this choice, I see no problem. 
(Peter, perhaps you can tell me more off-line about: The current position in SGML is a serious problem for users and implementors, where one application will use the SYSTEM identifier if it is there, and ignore the PUBLIC identifier even if it cannot locate the resource referred to by the SYSTEM identifier; and another application takes the PUBLIC identifer first and ignores the SYSTEM identifer even if it cannot resolve the PUBLIC identifier; and yet others work only with PUBLIC identifers or SYSTEM identifers but not both. 
It sounds to me like you must be looking at non-compliant implementations.) paul I would not want XML to require a SYSTEM identifier. 
I also wouldn't want it to require a PUBLIC id. I'd like to leave it as it is now in 8879 in that respect. 
This gives maximum flexibility to the user. 
As far as precedence of the PUBLIC versus SYSTEM id when both are given, the SGML Open technical committee had long discussions on this topic I seem to have opened an inadvertent can of worms here, sorry. 
It's not even the precedence which concerns me, so much as making sure apps try the other identifier if both are provided and one fails to resolve. 
I know this is an app issue, but I do feel the spec should make the point that this performance is expected (trying the other), otherwise we risk misleading authors and users into believing that in providing both identifiers they are somehow improving reliability. 
///Peter I think you are absolutely right, Peter. 
Providing both *should* improve reliability. 
I would say that apps that don't try both are not doing the Right Thing (no matter what the spec says), but maybe there are extenuating circumstances. 
After all, isn't it the job of an app to use all of the information at its disposal to try to solve the user's problems? 
If a line in the spec can clarify this situation, then I certainly support it. 
On the other hand, I'm surprised that Paul says that the ordering issue is contentious. 
If the reader has overridden a public identifier, shouldn't that always take precedence over the author's system id, from his machine?? 
What is the counter argument? 
Paul Prescod On the other hand, I'm surprised that Paul says that the ordering issue is contentious. 
If the reader has overridden a public identifier, shouldn't that always take precedence over the author's system id, from his machine?? 
What is the counter argument? 
I think it's more along the lines that the SYSTEM identifier is not seen as an override by authors, but as a failsafe because of the reputed poor resolution of FPIs. 
It took me weeks to work out how they resolved, when I first encountered them, and they still won't work on some systems (W95 won't allow colon in long filenames; some users can't get write access to the right directory to install them :-), so I feel some sympathy for users who consign them to resource-broker hell and stick to SYSTEM identifiers. 
If we include PUBLIC identifiers, the resolution must be documented and must work. 
Much more useful would be a URL-style resolution that would try a fully-qualified URL, but also strip down to the directories and filename and try the local disk as well (someone mentioned the intranet problem), but that's outside the scope of the current discussion. 
///Peter Agree. 
Len Bullard 
