But note that system IDs, being system-specific, are not reliable. 
In this whole web/SGML excercise, I regard the web as an SGML system (with entity resolution equivalent to URL resoltion). 
So as long as the universe of discourse is the web, URLs as system IDs are reliable. 
XML is intended to be interoperable with systems that exceed the confines of the web, and public identifiers can facilitate that interoperability. 
(They can provide redundancy within the web as well.) 
But if the web is your only target, URLs are all you need. 
Strange. 
I seem to remember I once clicked on a hotspot on an HTML page and found that the link was broken! 
Or was I dreaming? 
The issue seems to me to be one if 
_ownership_and_accountability_. 
It may be possible to consider the web as a single system. 
But it sure does not have a single owner. 
If my system ID is a URL, then it is only as reliable as my confidence that the owner of the file to which the URL points will not move it without informing me and giving me a chance to modify the system ID (URL) in all my document instances. 
The point about public identifiers is that they provide 1)redundancy - i.e. a fallback if the URL fails 2)accountability - the syntax of public identifiers is linked to a registration procedure and places responsibility on the content owner to follow certain rules 3)a universe higher than that of the machine to resolve the reference. 
When the ERB was debating whether to add PUBLIC to the XML-LANG syntax, the stumbling block was the difficulty of providing a reliable 
standard procedure to resolve the references. 
I would argue that it is precisely _because_ public identifiers cannot be fully resolved by the system that they are so important. 
Any identifier that can be fully 
resolved by the system will only be as reliable as the system. 
When the system breaks, we need (a) to know it has broken and (b) to be able to 
resolve the problem outside the system. 
This means there must be redundancy _and_ recourse to something beyond the system. 
This is precisely what PUBLIC provides. 
Such things do happen. 
But consider that even in that case, you have as much information as an FPI gives you: you have an identifier in a global context. 
I don't follow you. 
How does this make them important and/or useful? 
Could you give me pointers to this discussion you referred to? 
I agree that redundancy helps when things break. 
But what recourse do FPIs provide that URLs don't? 
If you mean the ISO owner registry, how is that better/different from the DNS domain registry? 
If you can't access it, it's equally useless, no? 
Unless you've seen the owner string before. 
And I'll bet the odds are higher that the DNS domain owner string is in your cache than that the ISO FPI string is in your cache, because URLs are used for all sorts of things and FPIs are only used for SGML stuff. 
Dan Connolly, Architecture Domain Lead 
There is about a month of discussion in the back archives of this list -- it echoes, point-for-point, about 4 years of the URN discussion. 
We decided to allow PUBLIC, and need not revisit that. 
I don't remember whether we will link to FPIs via URN syntax or to URNs vi FPI syntax -- but it doesn't matter, which way we do it, either way we will be using the relevant ISO and Internet standards to create a feature some will not happily live without. 
Just for yucks, I'll note that the URN/FPI registries can be independent of software, and many will be. 
Domain names may be potentially so, but in practice, an expired or reassigned domain name's old organizational binding is not readily accessible. 
But this is not important, we already had _all of these discussions_. 
Read the archives if you care, and much joy to you in the reading. 
-- David David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ 
