The SGML ERB met today, Saturday Oct. 19th, and voted on several items already discussed by the SGML WG. Participating: Bosak, Clark, Kimber, Maler, Paoli, Sharpe, Sperberg-McQueen. 
Absent: Bray (represented in 
part by written votes on open issues), DeRose, Hollander, Magliery. 
All decisions were by consensus of all those participating in the call, and thus carry a majority of the membership of the ERB. 
I should note that the wording of the rationales given below reflects the understanding, and is the responsibility, of the author. 
The 
rationales have not been reviewed or approved by the ERB; they are thus subject to correction when I have misunderstood or misstated the ERB's 
intention. 
The ERB agreed on the following position statements: * We will maintain a list of topics to be addressed in future revisions of XML. * We will include some version of this list in the specification itself. 
The rationale for the list and for its inclusion in the specification is to allow some topics to be postponed until there is more time for their resolution, and to inform users of XML of the expected lines of development. 
In the light of these agreements, the ERB reconfirmed its earlier decision that XML 1.0 will not have SDATA entities. 
It is thought that most uses of SDATA entities are adequately served by character references to Unicode characters (see example below). 
Techniques for dealing with non-Unicode characters, specification of glyphs rather than characters, and related topics (such as possible mechanisms for document private agreements governing the ISO 10646 Private Use Areas) will be addressed in future revisions. 
Instead of a declaration like any XML processor can work properly with a declaration of the form 
On question A.17 (Should XML have entities or not?), the ERB had already decided that XML would have internal entities (either text or CDATA, not both). 
Today we decided further: * XML will have external NDATA entities. 
* XML will have internal text entities. 
The rationale for allowing internal text entities was this: CDATA entities are very easy to implement (because they need not be expanded at parse time, but can be expanded later without changing the structure of the parse tree); text entities are more complex (if they are synchronous, they may require the replacement of a leaf node with an arbitrarily complex subtree; if they are asynchronous, they *must* be expanded at parse time and complicate the parser). 
Nevertheless, internal text entities are so useful to the user that they justify the cost of implementation. 
Whether XML will have external text entities remains an open question. 
On question B.9, the ERB decided: * In version 1.0, XML will not have public identifiers, only system identifiers. 
* In version 1.0, system identifiers will be URLs. 
* In version 1.0, URLs need not carry the FSI-style url label. 
Whether system identifiers in XML 1.0 will be *allowed* to carry the url label remains an open question. 
Addition of public identifiers and extension of system identifiers to other formats will be taken up in preparation of future versions of XML. 
The rationale for these decisions was that URLs are well understood and well established, and can handle both remote and local addresses. 
Restricting external identifiers to URLs helps keep the specification simple. 
In the long run, however, public identifiers are desired by many users and may provide solutions to the well known fragility problems associated with URLs. 
Better infrastructure, in the form of catalog management tools and http-based catalog resolution services, would help make the introduction of public identifiers into XML smoother. 
-C. 
M. Sperberg-McQueen 
(I'm assuming that 'you' is the XML processor; if John is assuming it's the client application, the two views are compatible. 
On this interpretation, John's account of application behavior does assume that SDATA entity boundaries are visible to applications, which is a common usage but not one required by 8879, as far as I can tell.) 
None of ESIS is mandated by 8879 as far as I know. 
I have generally assumed that the XML specification will go much further than specifying just the syntax of the language, and hence (in any normal non-SGML terminology) will affect more than just the parser. 
The following two make more sense to me: and I'd hope XML could allow both of them. 
Applications which display text must maintain a Unicode-to-local mapping table, unless they have Unicode display drivers (which effectively embody such tables). 
Or they can use the numbers, if they are more useful. 
But they will still need to cope with &amp;#0x4486;&amp;#0x030C;, which is OLD HANGUL SYLLABLE MIEUM-ALAE A-GIYEOG LIEUL with a CARON accent over it, if they're going for strict conformance. 
So the application at least needs to know which code points are to be treated as non-spacing accents. 
2. An ISO 10646 character unknown to the application: The text entity provides only a Unicode code point; the SDATA entity provides either a quasi-mnemonic identifier or a full SC2-style character name. 
For fallback processing, the text-entity user must rely on display-specific sets of entity declarations -- unfortunately, without public identifiers these cannot be reliably labeled. 
If there were public identifiers for the unknown glyphs, they probably wouldn't need to be unknown! 
Ask someone like Glenn Adams or bc Krishna of FutureTense about this... 
Yes. This is the difference -- whether you get meaningless in the failure case or whether you get something you can use. 
A [less than with tilde under it] B can be read immediately and understood by milions of people the world over. 
A &amp;0x60000020; B cannot be read by anyone. 
(this is character 0x20 (32 decimal) in row 0 of plane 0 in group 0x60, the first Private Use group; this is the lowest code point that is generally available, unless you use the 8192 positions in plane 0 of group 0 that are in the R-zone.) 
Not if the XML spec handles this case. 
The SDATA method seems to involve a slightly lower chance of accidental collisions arising when private agreements inadvertently use the same name or character position, and thus may have less need of mechanisms to signal the applicability of this or that private agreement. 
Yes. 
4. A non-ISO-10646 character unknown to the application: Same as case 2, except that the user presented with only a code point cannot find out, by consulting ISO 10646 or Unicode documentation, what character is involved. 
Yes. 
On the whole, it seems to me that SDATA provides some advantages over text entities in cases 2 and 4; this is what I understand David and Lee and John to be arguing as well. 
Yes. The whole system becomes completely unusable with just numbers, if you are working with anything outside the spec. 
Latin scribal abbreviations might be too obscure to bother with, as might mathematical symbols, since mathematicians will continue to use TeX, I expect. 
In neither case do the advantages seem to me to be extremely large; 
Well, when a system can't do what you need it to do at all, you don't use it. 
If we restrict ourselves to a subset of those documents that can be handled by HTML, the advantages are vanishingly small. 
But why not just use HTML for that? 
Lee 
On Wed, 23 Oct 96 15:31:18 EDT Liam Quin said: 
For fallback processing, the text-entity user must rely on display-specific sets of entity declarations -- unfortunately, without public identifiers these cannot be reliably labeled. 
Sorry to be unclear. 
The antecedent of 'these' was intended to be 'display-specific sets of entity declarations', not 'unkown glyphs'. 
That is, what I meant was "without formal public identifiers being part of XML, there will be no public text display version field in the external identifier for an entity set; it will thus be impossible (by which I meant: I don't know how) to select automatically the specific version of the entity set which should be used by a system with the display characteristics of the current application; since the public text display version field can be used to identify device-specific versions of entity sets and handle some sophisticated fallback schemes, this means that XML may have no standard way of handling fallback information via device-specific and generic entity sets." 
3. A non-ISO-10646 character known to the application: In both cases, private arrangements of a form not covered by the XML spec are required. 
Possible forms of private arrangements are indeed on the list of topics to be addressed in future revisions. 
I don't think there are proposals on the table to address it in version 1.0. 
Sorry; my obscurity; I should have said XML 1.0. 
-C. 
M. Sperberg-McQueen 
