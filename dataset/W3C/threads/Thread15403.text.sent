I feel there is a section here that needs addressing, and yes, if others feel it is relevant and warranted, I'll draft the material on it. 
This is addressing "server side techniques". 
see 3 - Bottom layer - Technology-specific application information The Techniques Documents will include code examples, screen shots, and other information specific to a technology. 
These documents will be non-normative. 
They will contain different strategies for meeting the requirements as well as the current preferred approaches where they exist. 
Examples include: * Hypertext Markup Language (HTML) and Extensible Hypertext Markup Language (XHTML) Techniques * Cascading Style Sheets (CSS) Techniques * Server-side scripting Techniques * Client-side scripting Techniques * Scalable Vector Graphics (SVG) Techniques * Synchronized Multimedia Integration Language (SMIL) Techniques * Extensible Markup Language (XML) Techniques (These will become active links as the corresponding working drafts are published) I am not too sure what defines "Server-side scripting Techniques", but as a web developer I understand that as anything on the server side that has to do with programming or markup. 
What that does not refer to is server management and configuration techniques that address WCAG (and other issues). 
I feel there is a real need to add "Server Management Techniques" into this list. 
Why? 
Web sites can greatly improve accessibility and usability addressing server configuration and management issues. 
For instance; server side redirects/redirection. 
See If the redirection is marked as permanent, and if the user requested the URL for redirection from a bookmark, the user agent is supposed to update the bookmark (I haven't looked at UAAG thoroughly, but this was always meant to be the case in handling HTTP). 
There are heaps of other server side techniques, like using mod_speling, mod_rewrite, etc. 
There is also the hugely underused and undervalued "Transparent content negotiation" (TCN), see It's true that Netscape 2.0 destroyed this feature by getting that UA to market as quickly as possible, and sending back any requests for browser configs with "*.*" (ie - everything including the kitchen sink is installed on this UA), but it is reasonably well supported these days. 
Well enough to build Web Services. 
TCN becomes very important and far more sophisticated in XML content delivery systems such as Apache/Cocoon (http://cocoon.apache.org/). 
This is something I am spending more time with and would be happy to try and deliver some Techniques, etc for, later down the track. 
Is there any value or point to addressing these as part of WCAG2 Techniques? 
Geoff Deering There seems to be a large number of languages to choose from when it comes to scripts on the server or on the client side. 
Should we then be specific about the language and include jsp, asp, javascript, perl script, c, java and vb script. 
Do we want to only focus on a subset of thees languages (say JSP and javascript only), or do we look at this subset (say javascript and jsp) as the core where comprahensive techniques "must" be available, and provide a forum for people to contribute with techniques in other languages which "may" be made available but don't strictly have to be. 
In addition to the list of technologies, should we include xsl (xslt) techniques as well. 
(Maybe DTD?). should we go further and include voiceML and MathML as we are doing with other xml languages such as xhtml and svg. 
And.... when we look at techniques with given languages, should we be specific about the version refered to such as css 1 or 2, html 4 or xhtml 1, etc. (http://cocoon.apache.org/). 
This is something I am spending more time with and would be happy to try and deliver some Techniques, etc for, later down the track. 
Is there any value or point to addressing these as part of WCAG2 Techniques? 
Geoff Deering There seems to be a large number of languages to choose from when it comes to scripts on the server or on the client side. 
Should we then be specific about the language and include jsp, asp, javascript, perl script, c, java and vb script. 
Do we want to only focus on a subset of thees languages (say JSP and javascript only), or do we look at this subset (say javascript and jsp) as the core where comprahensive techniques "must" be available, and provide a forum for people to contribute with techniques in other languages which "may" be made available but don't strictly have to be. 
In addition to the list of technologies, should we include xsl (xslt) techniques as well. 
(Maybe DTD?). should we go further and include voiceML and MathML as we are doing with other xml languages such as xhtml and svg. 
And.... when we look at techniques with given languages, should we be specific about the version refered to such as css 1 or 2, html 4 or xhtml 1, etc. 
I'm not talking about client side or server side scripting; I'm talking about server configuration and management and the techniques of managing content via the server configuration. 
There are a number of things that can be done on the server side through proper configuration and management, whether it be Apache, MSIIS, iPlanet, whatever (but not PWS). 
You can do them either by managing the server's configuration directly, of if you do not have access or permission to the server's configuration, you can implement many of these techniques via placing the server directives in a .htaccess 
file in various directories. 
The server always looks for these files in the directory tree and addresses the content accordingly. 
It's true that sometimes these issues are addressed via server side scripting, and sometimes it is necessary to do that, only because the developer cannot implement that procedure any other way. 
But this is actually a poor method of implementation and reflects poorly on the organisation as a whole. 
It shows an inability to develop good procedural policy and strategies for managing their web content. 
It is far more effective to do these things through server configuration. 
That also allows the whole server to be better managed, it shows some sense of QA towards managing the delivery of content, and is somewhat self documenting in that the server configuration file becomes documentation of the state of content on that server, else you have to parse heaps of markup to be able to realise the state of that content. 
This type of approach is extremely important in XML content management. 
If you look at the Apache/Cocoon framework it is built on a architecture that allows one to address these issues; This framework allows you to deliver content on the fly, according to the capacities of the UA; for instance, it could deliver the page in standard XHTML/CSS and GIF for IE, XHTML/CSS and PNG for Mozilla, and for future Mozilla, when SVG is native, XHTML/CSS and SVG. 
If you want the content in PDF, it will generate and deliver it in PDF, or pure SVG. 
The same content could be delivered in XHTML2 to UAs with the capacity to render it, without changing the method of delivery to other UAs that can only manage older DTDs or Schemas. 
So in order to understand how to manage and deliver content in this medium it is very important to understand server side techniques, not necessarily scripting, but understanding how server, and three tiered architecture processes HTTP requests, and just what techniques are available to better enhance web services and accessibility. 
Geoff Deering This is an important topic and it should go forward. 
It is an open question how much of this should be published as an "accessibility" document or as a "quality" document, a companion to the CUAP and CHIP documents. 
Failure of server operators to employ the functionality in the specifications or to give content authors control over the necessary [HTTP header] metadata have repeatedly frustrated the intentions of Web architecture. 
I don't think we are going to see an HTML 4.02 out of W3C with the DTD changes that you suggest. 
But I would definitely go to bat for a policy statement that it is an OK and sometimes constructive thing to do to scrub your content (on posting to the server) with a stricter DTD than the specification requires. 
Interoperability failures happen when the server assumes user agent respect for rules that the UA does not understand or process. 
Examples here are altered content models for TABLE as you suggest and html:a.name 
(make the content be NMTOKEN rather than CDATA). 
Al This is an important topic and it should go forward. 
It is an open question how much of this should be published as an "accessibility" document or as a "quality" document, a companion to the CUAP and CHIP documents. 
Failure of server operators to employ the functionality in the specifications or to give content authors control over the necessary [HTTP header] metadata have repeatedly frustrated the intentions of Web architecture. 
I don't think we are going to see an HTML 4.02 out of W3C with the DTD changes that you suggest. 
But I would definitely go to bat for a policy statement that it is an OK and sometimes constructive thing to do to scrub your content (on posting to the server) with a stricter DTD than the specification requires. 
Interoperability failures happen when the server assumes user agent respect for rules that the UA does not understand or process. 
Examples here are altered content models for TABLE as you suggest and html:a.name 
(make the content be NMTOKEN rather than CDATA). 
http://www.w3.org/2002/02/mid/5.1.0.14.2.20021129085107.01e3f080@pop.iamdig ex.net;list=www-qa Al I also feel it is addresses the charter of WCAG2 more succinctly because it "attempts to apply checkpoints to a wider range of technologies". 
I also feel that this way of addressing content delivery will become much more prevalent and a lot of front end development will just die due to it's inefficiency, impracticality, and ineconomy of scale for delivering content. 
Geoff Hi Geoff - yes indeed, we see the need to have server side techniques as you describe. 
We haven't focused too much on that yet but were planning on turning our attention that and other kinds of techniques soon, once we pass the current hurdle to release a substantially revised version of the HTML techniques. 
Some people have already been putting thought into this; it's possible that their area of focus is somewhat different than yours, but I think it would make sense to start working on them together and if two distinct types of "server side techniques" emerge, we can split the documents or something. 
Although the techniques teleconference calls are not at a good time for Australia, we should find a way to pull you into this. 
Since it sounds like you have some ideas to start with there might be a lot of progress quickly. 
I'll follow up soon. 
Michael (http://cocoon.apache.org/). 
This is something I am spending more time with and would be happy to try and deliver some Techniques, etc for, later down the track. 
Is there any value or point to addressing these as part of WCAG2 Techniques? 
Geoff Deering Fine. 
I'll keep my eye on everything that is happening, but a focus on this issue. 
I'll try to find time to go over the HTML techniques and other aspects, as well. 
I've printed them, just to find time to read them. 
At the same time I'll focus on looking at server side techniques. 
Hi Geoff - yes indeed, we see the need to have server side techniques as you describe. 
We haven't focused too much on that yet but were planning on turning our attention that and other kinds of techniques soon, once we pass the current hurdle to release a substantially revised version of the HTML techniques. 
Some people have already been putting thought into this; it's possible that their area of focus is somewhat different than yours, but I think it would make sense to start working on them together and if two distinct types of "server side techniques" emerge, we can split the documents or something. 
Although the techniques teleconference calls are not at a good time for Australia, we should find a way to pull you into this. 
Since it sounds like you have some ideas to start with there might be a lot of progress quickly. 
I'll follow up soon. 
Michael 
