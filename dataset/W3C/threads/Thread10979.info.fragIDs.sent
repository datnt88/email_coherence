[...] the goal of the W3C SGML activity is to enable Web browsers to receive and process generic SGML in the way that they are now able to receive and process HTML. 
Agreed.... however, if that were the only issue, SoftQuad Panorama would satisfiy it, no? 
We can all go home :-) Well, OK, there are still issues -- * Panorama is only shipping on Windows (Unix and Mac are in early beta) * Panorama deals with documents, not fragments. 
I don't want to subvert the discussion towards SGML OPEN fragments, but only to note that Panorama can't deal with 100 MByte documents * Panorama works with Netscape and MSIE and Mosaic, but other browser writers need to work with us &amp; write a DLL (for Windows) to communiate * Panorama can't (as far as I can tell) work on Unix as a helper-app unless you edit your SGML to add a processing instruction giving the document's URL. 
This is because under Unix you can't ask Netscape for the URL of the document you've been asked to fetch -- you just get handed a tmp file. 
We might be able to use the Netscape plugin API to deal with this. 
The CCI spec (asking the user to specify an IP port number) is unworkable. 
However, Panorama under Windows with documents no larger than 4 MBytes works pretty much like a standard web browser. 
I therefore assert that the goal stated above is already satisfied. 
That doesn't mean I don't think XML is not a bad idea. 
I fully support the idea of a regular, simplified version of SGML that can be parsed easily. 
Let's make SGML uniquitous, as Michael SMcQ put it in his fabulous closing speech at SGML 95 last December (is that online anywhere??). 
So perhaps I am unclear on how to interpret the Goals. 
One factor that we know has prevented the wide deployment of generic SGML browsers is the difficulty of implementing the complete 8879 specification. 
Well, it has prevented devlopment of multiple browsers. 
And even Panorama implements only the required features of SGML. 
No OMITTAG, no SHORTTAG (actually some SHORTTAG features are there, but I don't think net enabling tags are supported, for example) no DATATAG or SHORTREF (I've hardly ever even seen those used, but maybe that's self-selection), no LINK, no CONCUR, no RANK (I think), no SUBDOC... don't know about CURRENT. 
You can always run James' spam on the server, right out of the can, and remove the minimisation features that Panorama doesn't understand. 
In fact, use of OMITTAG is a frequent source of error, so it should probably be added. 
I have listed lots of things Panorama can't do, not because I don't like it (it's a fabulous piece of software) but because I want to show that you can go a long way without supporting those features. 
They are not needed. 
Perhaps LINK and SUBDOC are hardest to do without; I have recently seen a way (I think) to do subdoc, as long as it is used as an entity-valued attribute and not just CHAPTER &amp;otherdoc; TITLE ... which is somewhat harder. 
LINK can be done in an odd sort of way with HyTime. 
Using external markup and connecting it to a document frame with HyTime is very powerful. 
So for deploying SGML on the web, I think we are there today, and the right question may be `Is this where we want to be? 
Why are we not satisfied?'. 
I don't want to start a flame war about this. 
Clearly Panorama does _not_ satisfy the goal in everyone's minds, or this list wouldn't exist. 
Or is the stated goal merely a political front for a Higher Goal? 
(better reply privately on that one!) Lee 
[Liam Quin:] 
I don't mind responding publicly as long as it's clearly understood that this is just my own opinion. 
Panorama is a magnificent application. 
It's so good, in fact, that it serves as a proof that the lack of an implementation isn't the problem here. 
To my mind, it's the lack of ubiquity that's the problem. 
I believe that SGML functionality needs to be ubiquitous before content providers will be encouraged to make SGML data available as an optional high-level alternative to the HTML that they will be serving from their SGML databases (which is how I visualize this happening). 
In my vision of a transition to SGML on the Web, two things occur to make SGML browser capability ubiquitous: 1. Entrepreneurial ISVs are enabled to try their luck in a new market by developing XML applications, i.e., applications that can consume an SGML that has been made much easier to implement. 
These applications could be browsers or they could be special-purpose applets. 
I think that this is what Len means when he speaks of another house to burgle. 
2. One or more of the big and soon-to-be-big browser vendors (Netscape, Microsoft, Spyglass, JavaSoft) are encouraged to build XML support into their standard HTML offerings. 
The introduction of XML applications from multiple vendors is enabled simply by the existence of a properly designed XML. 
Whether the transition to XML as a standard browser format can be made to occur without participation of one of the larger players is an open 
question. 
My own opinion on this changes daily, but I do believe that our job will be much easier if we can persuade one of the HTML browser vendors to choose XML for their next forward leap in functionality rather than choosing something that they invent on their own. 
I suspect that people will have different opinions on this last point, but I don't think that it really matters for purposes of the current effort; as far as I can tell, the simplification that makes XML attainable for the independent developer is exactly the simplification that allows us to make a reasonable case for its adoption by the big guys. 
Jon 
Yes. It just doesn't work in a 5 second sound byte. 
Yes. But the market has to make it necessary. 
The market won't unless the content developers do. 
They won't unless they have tools or see it as "the next cool thang". 
In any event, it's a chicken and the egg. 
To break the circle, you need either vendors or college students. 
College students with encouragement from the federal government or enlightened professors have been the traditional engine of the internet. 
OTH, the guys in DoD are sitting on massive lumps of SGML data that they would like to move onto the net in some cases, or into interoperable IETMs in others. 
Because the creme de la creme of SGML is here, we all know of a few projects that could use cheaper tools. 
The barrier to SGML is not how hard it is to implement, it is the cost of obtaining the implemented tools and that everytime someone tried to do this in the past, members of our own community stifled the attempts. 
True. But go forward with or without them. 
Otherwise we repeat the same mistake we have always made. 
We assume the market must exist before the work is done and the market assumes the work must exist. 
All we are investing right now is our time. 
Exactly. 
Just remember, the big guys are the former little guys. 
They are building up legacy code just as some of our companies did. 
They become dinosaurs and we become little big eyed mammals coming out at night to eat eggs. 
This is like gigging in an indy band: they don't come to you. 
You make the opportunity. 
It takes brains and bravery, and just a bit of chutzpah. 
len 
Jon 
I could not agree more, but I fail to see how this can be possible when we say that XML cannot read even valid HTML documents. 
A leap into the dark without taking the light you already have takes a vast amount of faith. 
Martin Bryan, The SGML Centre, Churchdown, Glos. 
GL3 2PU, UK 
