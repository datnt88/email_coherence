Hi, I am looking into the problems of making road maps on the net more accessible. 
Most solutions rely heavily on JavaScript, and that is probably necessary since speed is a big issue. 
I am more interested in how to make navigating the road maps more accessible for keyboard users. 
It is pretty easy to make functions like ZOOM and panning the map accessible and they sometimes are, but I have not yet seen a road map where all the basic functionality were optimized for keyboard users. 
It would help me a lot if some of you could point me to good examples of accessible navigation to road maps, or just point me to the better Map Services, from an accessible point of view. 
Cheers, Jesper Tverskov How accessible is .NET when it's compiler removes the title attribute from radio button and check box form controls? 
Yes there are better ways to make these contols accessible, but when the occasion arises to use the title attribute as a last resort... Behalf Of david poehlman how backward compatible is .net? ----- Original Message ----- markup language. 
Are not those preceding windows software applications considered perfectly usable by individuals with disabilities using the I was thinking of the predecesors of Flash and of MS Word and PDF, rather than Visual Basic, although many web sites do strive to behave like VB. With application programs, the key difference is that you don't download a different application program from every potential supplier or dodgy entertainment site. 
You tend to have a small number, bought from reliable sources, which you learn to use well. 
HTML plus DOM plus scripting isn't a particularly good application platform, though, because when people try to use HTML as a graphics library they tend to have to go through contortions to achieve what a designed for the purpose GUI library would allow. 
Microsoft, in pushing thick client .NET more or less accept that, and .NET 
probably is not significantly more insecure than scripted HTML. 
People who really want to run client side applications should seriously consider .NET. 
Moreover, there are very few true web application programs. 
Most scripting is about creating variant user interface controls to do jobs that are either not necessary (the page is a document) or could be done with standard controls with a lot less confusion for the users. 
This transmission may contain information that is privileged, confidential and/or exempt from disclosure under applicable law. 
If you are not the intended recipient, you are hereby notified that any disclosure, copying, distribution, or use of the information contained herein (including any reliance thereon) is STRICTLY PROHIBITED. 
If you received this transmission in error, please immediately contact the sender and destroy the material in its entirety, whether in electronic or hard copy format. 
Thank you ***  from radio button and check box form controls? 
Yes there are better ***  ways to make these contols accessible, but when the occasion arises to ***  use the title attribute as a last resort... 
You are really refering to Web Forms/ ASP.NET here, where I was referring to Common Language Runtime (CLR) code directly using the .NET 
framework. 
That Web Forms would produce code without concern for accessibility guidelines was something that I raised on this list maybe two years ago. 
It also generates invalid HTML (disabled attributes on elements which are not HTML controls). 
The good thing for the scripting debate, is its own controls and (less likely) user code conforming to the authoring guidelines, always provides server side backup for functions that will be scripted on a cooperating browser. 
Web Forms is largely about producing an environment where the bulk of programmers can write almost as though they were dealing with a local, stateful, client - although people adding new controls are likely to be exposed to the resulting complexity. 
There is a likelihood that Web Forms may become common on public web sites, but my guess is that true .NET 
thick client code will only commonly be used for intranet applications. 
Unfortunately, I think that Web Forms will prevent any signficant adoption of W3C XML forms extensions. 
CLR + .NET 
Framework is backwards compatible to Windows 98, but you will need to install some fairly resource greedy code. 
Microsoft's business model is dependent on regular software upgrades, so you would expect a great deal of backwards compatibility. 
I expect the main adoption to be for intranets, where the environment is controlled and the main reason for quoting it was to discuss tools that were designed to meet the technical requirements of "web applications", rather than kludges on top of a simple document language, and information search submission language. 
