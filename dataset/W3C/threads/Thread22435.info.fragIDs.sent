Hello, Would there be any chance that the node tree traversal methods in the Node interface be deprecated and sent to some sort of work camp for bunk code patterns? 
It seems to me that NodeIterator could handily replace them and be much more efficient for most implementations. 
The aggregate/iterator pattern is pretty standard these days (C++ STL, Java JGL, Java 1.2 Collections, etc.) [See Gamma et al] and is not only easy to use but implementing it is a snap! 
IMHO the following methods can be summarily deprecated: Node.getFirstChild() Node.getPreviousSibling() Node.getNextSibling() 
Also, I saw some previous posts requesting that reference counting be somehow tacked on to the DOM. 
I vote no on that. 
Thanks, Claude Zervas, UTL Co., Seattle 
This "bunk code pattern" is well-beloved by untold generations of SGML weenies ;~) who would prefer to deprecate the idea of used indexed arrays to represent document structures. 
It's a dilemma for us -- there's no single acceptable paradigm for document structuring and navagation that we've been able to find, and we don't want to bloat the spec by supporting everything, and (while I happen to agree with you about the iterator design pattern) iterators are not supported in any of the legacy APIs from which we're trying to build. 
Mike Champion 
Ok. I'm not really familiar with the legacy APIs and how much current software depends on them so I was a little hasty in condemning them. 
Thanks for the clarification. 
But I would still like to know if the Attribute interface should inherit from Node or not because Element.getAttributes() is very handy but since it returns a NodeIterator (in the current spec) 
I'm kind of confused. 
I'm assuming there is a typo either in the declaration of the Attribute interface or in the declaration of Element.getAttributes() but I can't know which. 
Kent Tamura's (IBM) implementation of Attribute inherits from Node but this may just be to facilitate the implementation. 
Am I missing something here? 
The prose is pretty unhelpful on this, it mentions "attrubute node" 
but does not explicitly state or show inheritance of Node. 
Anyway, I'd like to thank all the folks at W3C for putting in the work to get the DOM out! 
Thanks, Claude Zervas, UTL Co., Seattle 
This was a typo. 
Give us a week; there's a face to face DOM WG meeting coming up, and this will be resolved. 
My best guess is that individual attributes will continue to be Nodes, the set of attributes will be a NodeList with associative array semantics (or AttributeList). 
To answer your question in another message, the whole point of AttributeList is to provide associative array semantics so that attributes can be looked up by name. 
NamedNodeList was once used as the name for this, but we found that attributes were the only objects that needed these semantics. 
Mike Champion 
Ok, but NamedNodeList is used all over the place in HTML DOM and Arnaud Le Hors says that AttributeList is archaic (now basically just a typo). 
I have the feeling that there is severe disagreement among y'all at W3C over DOM collection models. 
Some sort of simple and clean 
way is needed to traverse node trees that can also be *efficiently* implemented by a DOM vendor. 
This is clear. 
I think level one DOM needs to solve this otherwise users will find other solutions (ie non-standard extensions a la Microsoft). 
The NodeIterator is easy to implement, easy to use, and can be adapted over or to existing collection models (JGL, STL, etc). 
NodeList is less useful because you still need an iteration mechanism and it does not lend itself to associative collections because of the indexed access method ( NodeList.item( int n ) ). 
I think that any mechanism that limits or overly complicates implementation will cause a proliferation of non-standard implementations which will, in the end, just limit the spread of DOM use. 
And a DOM that lacks key features such as a clear node traversal model will end up the same way. 
I would suggest three basic interfaces for a collection model: NodeList, NodeMap, and NodeIterator. 
- NodeList more or less what it is now. 
- NodeMap would be the associative collection. 
It should not have to implement NodeList.item() 
however - instead the user should use a NodeIterator. 
- NodeIterator would, of course, be a way to traverse *any* collection of nodes and should be the preferred way to access DOM nodes. 
I won't write any IDL here because its obvious what the interfaces would look like and this message is already pretty dang long-winded. 
And, lastly, the HTML DOM should use the ***same*** model as the core! 
What is it with the HTML guys anyway? 
BTW, thanks for your replies to my questions! 
Regards, - Claude Zervas 
P.S. I don't really understand what Mr. ANOQ of the Sun is suggesting about AttributeLists... 
P.P.S. People are already using the draft spec for implementations so the need for a speedy resolution can't be over emphasized. 
Claude, 
Gee, what makes you think that? 
g 
Since I have implemented NodeIterator several times already, I can definitely say that NodeIterator, as it stands now, is NOT easy to implement. 
I do prefer NodeIterator over all other methods but implementation options are severely limited if current design is adopted. 
BTW, STL is not thread-safe last time I checked and JGL is not very efficient IMHO. 
Just a few million users and about hundred thousand lines of code just waiting to enter alpha, I believe. 
I got projects left and right just waiting for the DOM API to settle down which I hope will happen after the June WG meeting. 
The problem is that people like us are part of the problem: implementing before the standard. 
The dog is running backward with its tail swing madly ahead. 
The good news is that Microsoft and Netscape folks are hanging onto the tail with the rest of us. 
The bad news is that hindsight makes poor foresight. 
All we can do is pucker up and hope for the best. 
Best wishes, Don 
I guess it can be a little hard to imagine just from the IDL interface and my quickly written descriptions... But which parts didn't you understand? 
I will gladly elaborate. 
I just know from Delphi, that this kind of architecture really _kicks ass_! 
:) Cheers ANOQ of the Sun / Johnny Andersen E-Mail: anoq@vip.cybercity.dk or anoq@berlin-consortium.org Homepage: http://users.cybercity.dk/~ccc25861/ 
