I missed one thing out on my list of things to evaluate: (URIs with) FragmentIDs, and especially XPointers. 
IMO, the more I think about XPointer, the less consistent that I feel it is with the rest of Web architecture. 
In fact, I only became aware of it after continual nagging from Aaron, and then actually trying to implement it in our (consistent) EARL-world. 
I would like to address a note to the XML-Linking group, but if I am to do it on behalf of the ER WG rather than myself, we obviously all need to discuss it, and the Chair needs to have the final say. 
Quoted sections of this document come from the CR version of XPointer [1]. 
Comments period ends on 4 March 2002, but I hope that we can address this very quickly. 
In the course of implementing the XPointer design as presented herein, were any aspects or subparts encountered which caused significant implementation difficulty? 
One core principle of the Web is that URIs and URI references should generally apply to the "same thing". 
There is a notion of persistence that makes the Web work - the binding of a URI to a resource in particular is persistent. 
The relevent RFCs (2396 and 2616) are very clear on how the Web should work. 
For the Evaluation And Report Language, we are being careful to ensure that it fits in with Web archtecture. 
We also have a need to be able to point into the XML document tree in order to make assertion about it. 
Although we felt that XPointer would be perfect for this, we have found that it conflicts terribly with Web architecture in general. 
The EARL model contains a certain structural entity called the "Test Subject". 
This is simply the resource (in the RDF sense of the word) which is being evaluated. 
To be clear about what is identified, we have a property that gives a relationship between a representation, and the resource. 
This breaks down if a fragment identifier points to a specific set of bytes in a page. 
The notion of an "ID" (or "name" in HTML) is very useful, because it allows you to define relevent pieces of the document; but they still have a certain level of abstraction. 
It is still true that IDs can and 
should be persistent. 
This is not true for XPointers; unless a 
resource has only one corresponding representation, and does not allow content nor perhaps even language negotiation. 
The fear is that people want something much looser... XPointer *will* be abused. 
To state this problem in alternate terms, consider an example. 
There is a document available in plain text, and as XML. 
The XML version can obviously have its constituent parts identified by a series of XPointers. 
However, if someone uses (for example):- Does the group expect that same XPointer to apply for the text document too? 
Of course not, and this means that using XPointer on a resource prevents conneg in any way shape or form. 
It also prevents modification of the document, unless you start stating that FragmentIDs are not persistent, which would violate a Web axiom. 
If so, would eliminating some or all of the difficult-to-implement aspects or subparts leave a coherent design still useful for your needs? 
We *do* need a method to point into representations of resources that use the generic XML media type (anything with the "+xml" suffix). 
We do not believe that a fragment identifier is the correct solution. 
One possible solution is to use an XPointer as a predicate relationship, thus:- [ earl:reprOf http://example.org/ 
; :date "2001-10-17"; :format "text/xml"; :XPointer "xpointer(id("toc")/li[3])" ] . 
The difficult-to-implement part is simply in defining XPointer to be the standard XML FragmentID syntax. 
Does your implementation experience suggest reasons why the XPointer language as defined herein should not be recommended to the IETF as the fragment identifier language for resources of type text/xml etc.? 
Yes, see above for details. 
The fear is that XPointer will be abused. 
Another point to note is that XPointer (in general) conflicts with fragment IDs in RDF. 
This is a highly relevent point to us because EARL is an application of RDF; the schemata and so forth are RDF too. 
A FragmentID on a document using the (yet-to-be-registered) XML RDF MIME type will necessarily identify the concept that the RDF document *says* it identifies. 
It does not identify a part of the document tree, and yet XPointer says that it does. 
In summary, XPointer is an excellent and vehemently useful idea. 
The work conducted by the XML linking group has provided us with a glimmer of hope in being able to identify parts of specific XML documents. 
However, implementing XPointer as a FragmentID is not consistent with Web architecture, and XPointer should not go to recommendation mandating that behaviour. 
[1] http://www.w3.org/TR/2001/CR-xptr-20010911/ Kindest Regards, Sean B. Palmer @prefix : http://purl.org/net/swn# . 
:Sean :homepage http://purl.org/net/sbp/ . 
Hi Sean &amp; all, I've been playing with XPointer a bit (trying to hack annotations a la Annotea) and though some of the points you raise are exactly the things I've 
had trouble with, I'm not sure about your reading of the spec. 
The way I 
read it is that an XPointer expression simply adds a bit of fine detail to 
what you'd get with XPath or DOM2 - presumably going back to the Infoset 
(but those are murky waters that I find a bit scary). 
But if document a has 
XPointer expression B, then it's tied to that document whether we like it or 
not. 
Mechanical. 
The idea of the pointer being able to point to the same entity when the document is transformed into text or whatever I think is a non-starter. 
Transform the doc, the pointer moves. 
Though the predicates you suggest look a really promising idea, I don't think it gels with XPointer as proposed. 
As far as conflict with RDF is concerned, I would like to see an example where things can't work - RDF can use an XPointer as a resource, XPointer can refer to specific parts of a document. 
The identifier should surely be as fine grained as you want it - a doc, a nodeset, a node, a range, a point. 
(The definition of a fragment is another muddy pond for me By the way, the bit of XPointer (carried from XPath) that makes me most uncomfortable is the dichotomy between a series of DOM text nodes against an XPointer expression from above - the string-value seems a very loose approach. 
Cheers, Danny. 
Danny Ayers Alternate email (2001) : danny666@virgilio.it 
danny_ayers@yahoo.co.uk 
"Danny Ayers" : 
I've 
I 
to 
Infoset 
has 
it or 
Yep, which means it can't be a fragment id on a http:// resource as that isn't a document, it could be anything the document is only one representation, and XPointer are only valid for that representation, current fragment IDs are valid for all. 
document you get back is the film, the book, the film script or whatever the representation of the resource the request returns (based on accept headers or whatever.) whereas http://LordofTheRings/#xpointer(page=57) only makes sense for the book. 
This means I can't send you that url and have it mean anything unless I also tell you what accept-headers to send (and what if you get the large print version?) XPointers are very useful for specifying things in documents, but they shouldn't be considered a fragment of the url, they are pointers within documents not pointers within urls. 
Jim. 
