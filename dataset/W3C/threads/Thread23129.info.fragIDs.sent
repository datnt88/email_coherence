Having attributes that allow you to readily determine if the type is complex vs simple or named vs anonymous would seem to be helpful. 
Such as: readonly attribute boolean isSimple; readonly attribute boolean isAnonymous; (may be redundant with typeName == null) 
XML Schema Datatypes has equivalents for the DTD attribute types which could be used instead of null and attribute type property. 
The current definition would not provide an easy way to distinguish between: 
and 
An anonymous type could be nested many levels down in the content model, a containingElements NameList attribute could be used to enumerate the element names. 
For the schema: 
The TypeInfo associated with the world element in hello xmlns="http://www.example.com/typeinfo" 
world/ /hello Would have typeName == null, typeNamespace == null, isSimple == true, containingElements.getNamespace(0) 
== "http://www.example.com/typeinfo", 
containingElements.getName(0) 
== "hello" containingElements.getNamespace(1) 
== null (if elementFormDefault = false) or "http://www..." containingElements.getName(1) 
== world 
This request goes into the debate of how much of the PSVI API should be included on this interface. 
We judge this one to be a real PSVI addition than a type generic one. 
An application can always know the schema apply to the document by checking the schema-type parameter of the configuration object, so there is a way to distinguish them. 
Philippe 
Why not looking at the ancestors of the node where the TypeInfo is attached? 
typeName and typeNamespace cannot be both null if there is a declaration. 
In your case, it will exposed the the namespace and local name of the corresponding anonymous type name, with anonymous type name being an implementation-defined, globally unique qualified name provided by the processor for every anonymous type declared in a schema. 
Philippe 
