Following recent discussion on the WAI IG list and elsewhere, I spent a few minutes this afternoon re-reading the section of the CSS 2 draft that deals with cascading order. 
I think there is definitely a problem that needs to be considered by this working group, resulting from the fact that where two or more inconsistent declarations are made, each of them having the same specificity, the author-supplied declaration overrides the reader's default style sheet. 
Furthermore, if a declaration in the reader's default style sheet is marked as important, any inconsistent declaration in the author's style sheet which is likewise marked as important will prevail. 
It has been pointed out to me that some authors may tend to mark all of their colour and font declarations as important, thereby defeating the reader's preferences. 
Obviously this has important consequences for people with disabilities. 
A second problem results from the definition of specificity. 
It was mentioned some time ago on the interest group list that it is difficult to design, for example, a "large font" style sheet, because more specific declarations override those which are of greater generality. 
Thus if, for instance, a second level heading with a particular class value h2 class="abc" is declared by the author to have a particular font, this will override any of the reader's font declarations relating to h2 (unless the reader has defined an IMPORTANT style specifically for h2 class="abc" ). 
Perhaps what is required is a mechanism by which the reader can designate certain properties as being (1) so important that they can not be modified subsequently in the cascading process; and (2) inheritable in such a way that they will not be modified by any declaration in the author's style sheet which has greater specificity. 
This only applies to situations in which there are two or more inconsistent declarations of the same property. 
This entire issue is obviously of concern to the interest group, and therefore it is desirable that the HC working group should develop a position with respect to it. 
I have previously outlined an alternative solution which addresses the problem by requiring an exact match of media types in order for a style sheet to participate in the cascade. 
That solution has its disadvantages, as Daniel has pointed out. 
One approach might be to include a directive which the reader could specify in her or his default style sheet, requiring that no subsequent style sheet should participate in the cascade unless it has a parameterised media type which exactly matches the parameterised media type of the style sheet in which the declaration occurs. 
Thus, a style sheet with media="screen enlarged" (my hypothetical example) would, if it contained this declaration, not be modified in its application by a subsequent style sheet with the less specific media type of media="screen". 
If the proposed declaration is not given, then a subsequent style sheet of type media="screen" would participate in the cascade and, where applicable, override the provisions of the style sheet of type media="screen enlarged". 
This should take care of Daniel's example of a style sheet with media="braille embossed 42" being modified by a later style sheet of type media="braille". 
Personally, I would prefer the first of the two solutions which have here been outlined, namely the one which modifies the definition of the !important declaration and its role in the cascading process. 
Good. 
That's correct. 
This is a controversial issue, but as explaned below, I don't think it's much of a problem in practice. 
I have never seen an author style sheet with !important in it. 
I have, however, talked to many authors who are hesitant to start using style sheets if it gives them less "control" than their current tools (i.e. images). 
This, I believe, is a real issue and you're among the few who have spotted it. 
Today, writing a "large font" style sheet requires that the other style sheets are written with cascading in mind, e.g. that all font sizes are specified relative to the font size of the BODY element. 
Changing the font size of the BODY element would then propagate magnifications throughout the document. 
To ease this problem, inheritance must be strengthend on the expense of cascading. 
One proposal is to add the keyword "inherit" on all properties, e.g.: BODY { font-size: 12pt } P { font-size: inherit } H1 { font-size: 140% } This proposal has not yet been discussed in the CSS WG, but I think it should. 
If we want to address the first issue, I believe we should do so without adding any new syntax (a la adding "absolute" in addition to "imporatant") since this would not work in older browsers. 
Instead, I think CSS2 could say that "important" declararations in author style sheets should be regarded as having normal weight. 
Regards, -h&amp;kon H ? 
k o n W i u m L i e howcome@w3.org http://www.w3.org/people/howcome World W i d e Web Consortium This is a critical part in the author/reader balance, but I've yet to see a UA which allows users to turn off style sheets on off on a per sheet basis. 
The closest they get is to turn the whole style sheet mechanism on/off in a hard-to-find menu. 
Actually, the infrastructure is there to support this in IE4 - we expose a rich stylesheet object model. 
All it would require is a wrapper application to our Web browser control that provided UI for these hooks. 
(In essence, I'm saying we implement the code necessary to do this, but not the UI.) Adding "!accessibility" will provide a hook which corresponds e.g. to the "Accessibility" dialog box of MS IE 4. Not completely true - the semantics are ever-so-slightly-different (then the user would be required to say "use this color always", not "ignore colors set in the documents"). 
This also would not support another accessibility feature or two we intended for IE4 but let slip. 
It might be a step in the right direction, but it wouldn't obviate our need for explicit accessibility support - I think that would require an @accessibility block in the user stylesheet, or some such, with some explicit properties. 
The user may not want to have to define what they WANT to see, they may want to define what they CAN'T see (or hear). 
-Chris Wilson Internet Explorer Team cwilso@microsoft.com 
Chris, This is a critical part in the author/reader balance, but I've yet to see a UA which allows users to turn off style sheets on off on a per sheet basis. 
The closest they get is to turn the whole style sheet mechanism on/off in a hard-to-find menu. 
Good, would Microsoft be able to publish a wrapper application? 
Adding "!accessibility" will provide a hook which corresponds e.g. to the "Accessibility" dialog box of MS IE 4. I see the difference between the two statements, but I still believe you can use CSS to express all semantics. 
When the user declares that colors in the incoming document is to be ignored, the UA increases the weight of the color declarations in the browser and user style sheets from normal to "accessibility", and voila! 
-h&amp;kon H ? 
k o n W i u m L i e howcome@w3.org http://www.w3.org/people/howcome World W i d e Web Consortium 
