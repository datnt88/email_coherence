The main thing we're after is consistent information that can be queried useful in future. 
The more consistent your information, the more useful it is. 
Imagine the following report:- http://www.w3.org/blargh rdf:type earl:WebContent; earl:date "2001-10-15" . 
http://www.w3.org/blargh earl:fails :MyTest. 
and then a couple of days later, another report:- http://www.w3.org/blargh rdf:type earl:WebContent; earl:date "2001-10-17" . 
http://www.w3.org/blargh earl:passes :MyTest. 
Now, how do you expect to query it to check whether the page has been fixed, given that the URIs representing the resources are the same? 
It's broken. 
The rule is: one URI, one resource. 
[People get votes, URIs get resources!] 
I still don't think I understand. 
What's supposed to be available in the 
bit in my namespace? 
The test report? 
(Maybe the problem is that I'm 
misunderstanding the purpose of the "resource" in question...) 
If two different people complete the same test suite and come up with conflicting results that look like the example above, how is having 
more helpful when the same information is stored elsewhere in the report? 
So you're putting the "thing" in your own namespace for a few reasons: to separate it from other "things"; so that you can add data in the future; so that your data will be consistent; so that people can query it in the future; so that if you abandon or break it, you lessen the impact. 
Is the "thing" the EARL report? 
Or are we querying my namespace for 
information on what produced the report? 
(Sorry, I feel like I'm being really slow about this, but I still don't understand all the rules and syntax of RDF yet so a lot of it feels arbitrary.) 
You should make "Learning EARL by Example" public, it's quite helpful. 
Thanks - I'm glad that it's useful. 
BTW, the document is already public:- 
I meant linked to in some prominent place, like the EARL page, so that people can reach it easily. 
The existing examples there aren't as helpful. 
I was rather peeved when reading through the list archives and someone had attached some document that looked really useful but the link from the archives was broken. 
The W3C Quality Assurance group is chartered to investigate a test point definition language. 
As long as such a framework is scaled up to the Web, it should be possible to integrate it neatly with EARL. 
Gosh, it would be helpful if that already existed. 
:) So, if I were to go about trying to define my own rdf language for test cases, is there anything in EARL that needs to be considered? 
Actually the script uses POST by default, but it accepts either. 
Ah, that's alright then. 
Perhaps you could change the forms to GET, if you think it's suitable to do so? 
Why do you want GET so much more than POST? 
CGI.pm is neat about reading both. 
If you sense some reluctance on my part to change, it's because I don't think it's really necessary to have the existing generated forms use get (I think 500 char urls are ugly). 
Or is it because you'd like to have a unique URI for each result? 
I'd rather save information in some kind of EARL database (that can use pretty namespace references) that the script can query than have people trying to retrieve things using GET links to the script. 
You can now view the source code: There's a link from the index page too. 
Nadia 
"Nadia Heninger" 
Now, how do you expect to query it to check whether the page has been fixed, given that the URIs representing the resources are the same? 
It's broken. 
The rule is: one URI, one resource. 
[People get votes, URIs get resources!] 
the 
I've never had this clear myself, but I think of it more as just a name, or pointer that refers to the report, that's unique. 
So it's nothing 
more than a unique handle. 
any 
report? 
If you put a combined report through the RDF-validator, you'll see the problem I believe. 
I believe so. 
I'd rather save information in some kind of EARL database 
Well now you can... 
If you POST your earl to http://jibbering.com/earldb/v.1 it will store it in a database (returns 500 status on error, or echos your RDF back to you 
if no error. 
You can then retrieve it with 
0.95 namespace, and the earl1.0 
Sean users and Nicks 1.0-test (any others by request.) 
When it combines two EARL reports, I've no idea if they make sense or are useful, but they seem to validate as RDF. 
It's very early in development, but feel free to play with it, don't be surprised if things break. 
Jim. 
Indeed, but you could put a bit of XHTML or RDDL there saying what it's for. 
It doesn't particularly matter. 
This sounds really neat, but I can't get it to work at all. 
I've tried POSTing, I've tried POSTing as a value, I've tried GETting... Could you give us an example, please? 
Kindest Regards, Sean B. Palmer @prefix : http://purl.org/net/swn# . 
:Sean :homepage http://purl.org/net/sbp/ . 
I'd rather save information in some kind of EARL database 
Is that an HTTP POST with a text/xml or rdf COntent-Type? 
If so, PUT might perhaps be more appropriste. 
Or is it a conventional Form submission with the EARL URL- or multipart- encoded as Form data? 
Nick Kew Site Valet - the mark of Quality on the Web. 
"Sean B. Palmer" sean@mysterylights.com 
As Nick says PUT would make more sense, a straight post, with the body just containing the XML+RDF, I'll add in PUT later (I was meaning too but forgot - annotea always doubles up PUT/POST so I assumed there was some good reason!) Jim. 
