Jim, why do you say that label-for is inadequate when labels with label-for attribute and input with id attribute fields are in seperate table cells? 
Since the HTML uses an I D to explicitly associate both the labeler and labelee, isn't it up to the assistive technology to worry about the UI presentation? 
I did have a question about multiple labels for one field, if that was valid HTML - but according to HTM 4.01 [1], each LABEL element is associated with exactly one form control. 
There is also the table heading (TH) and the ability to have one header associated with multiple cells. 
Regards, Phill 
But I haven't found anything that says the converse is true. 
That is, each label has to point to a single field (and there is some behaviour defined that means this makes sense). 
But it does not say how many 
labels can each point to the same field, and there is no intrinsic reason why 
this shouldn't work, except that it makes the tabindex messy. 
As noted, using 
table headers may be called for in that situatiion. 
Cheers Charles McCN I did have a question about multiple labels for one field, if that was valid HTML - but according to HTM 4.01 [1], each LABEL element is associated with exactly one form control. 
There is also the table heading (TH) and the ability to have one header associated with multiple cells. 
Regards, Phill 
Charles mentioned : 
But what is that behavior? 
If HEADERS can do it, why can't LABEL FOR attribute do it? 
I 'm not sure I even can imagine a problem with the contents of the LABEL element containing more than one INPUT element. 
Am I missing something? 
Might there even be a spec [1] editing problem, meaning that it should have said that each control can only have one unique id, not one label? 
I thought TABINDEX just stopped at each control, not at each label, so it would always stop at each text entry field regardless of how many labels each field had or didn't have. 
[1] HTML 4.01 Label http://www.w3.org/TR/html4/interact/forms.html#h-17.9 Regards, Phill Jenkins, IBM Research Division - Accessibility Center 11501 Burnet Rd, Austin TX 78758 http://www.ibm.com/able 
The label redirects focus to the control. 
It was a design decision, and 
until then there was no reason why a label could not have said that it applied to two or more elements (except that it is slightly messy to work out the syntax). 
There is a different semantic attached to headers. 
Oh, and label just makes an association between some existing content and a 
control explicit. 
There may be cases where the same thing is needed without 
adding content - this is why there is a title attribute. 
Charles McCN Charles mentioned : 
But what is that behavior? 
If HEADERS can do it, why can't LABEL FOR attribute do it? 
I 'm not sure I even can imagine a problem with the contents of the LABEL element containing more than one INPUT element. 
Am I missing something? 
Might there even be a spec [1] editing problem, meaning that it should have said that each control can only have one unique id, not one label? 
I thought TABINDEX just stopped at each control, not at each label, so it would always stop at each text entry field regardless of how many labels each field had or didn't have. 
[1] HTML 4.01 Label http://www.w3.org/TR/html4/interact/forms.html#h-17.9 Regards, Phill Jenkins, IBM Research Division - Accessibility Center 11501 Burnet Rd, Austin TX 78758 http://www.ibm.com/able 
Location: 21 Mitchell street FOOTSCRAY Vic 3011, Australia (or W3C INRIA, Route des Lucioles, BP 93, 06902 Sophia Antipolis Cedex, France) 
Hi Phill, The LABEL construct is inadequate when the labeling text comes from two (or more) places. 
The simplest example is when the form elements are in a table and the headers are, in effect the labels. 
E.g., I think the question of labeling input elements shouldn't be merged with questions of making header information available for table cells. 
The use of these is different by assistive technologies. 
Also the forms I have seen in tables are not as simple as my example above. 
You asked about multiple labels for one INPUT element. 
That is part of the issue and it is forbidden by 4.01. 
Also you may want one label to contribute to more than one input element; there's no way to even write that. 
This is why I argue the title attribute on INPUT elements is a good, practical and simple solution. 
Jim jim@jimthatcher.com 
Accessibility Consulting 512-306-0931 Behalf Of Phill Jenkins 10.5 Jim, why do you say that label-for is inadequate when labels with label-for attribute and input with id attribute fields are in seperate table cells? 
Since the HTML uses an I D to explicitly associate both the labeler and labelee, isn't it up to the assistive technology to worry about the UI presentation? 
I did have a question about multiple labels for one field, if that was valid HTML - but according to HTM 4.01 [1], each LABEL element is associated with exactly one form control. 
There is also the table heading (TH) and the ability to have one header associated with multiple cells. 
Regards, Phill 
Jim's example [1] is very compelling, simple, yet eloquently conveys the problem. 
However, I believe that the suggested TITLE attribute solution is just as much a temporary solution as the HEADERS solution. 
How will the AT know the context of when to speak the title and when not too? 
always? 
How will the author know when to add the title attribute? 
always? 
In Jim's example, I see the first field titled as "Taxpayer W2 Gross", and the second field titled "Spouse W2 Gross" and so on so that it is spoken each and every time you visited that field. 
Sounds simple, yet I could also achieve a similar result by using the headers attribute. 
But as you pointed out, use [or support] of the headers attributes [and the title attribute for that matter] varies among ATs. 
For example HPR would only read by default the new or changed header as the row or column was traversed. 
So one would hear something more like "W2 Gross - Taxpayer, edit field, Spouse, edit field" which I find less chatty than the verbose title example. 
But the real problem I have with the TITLE attribute solution is that it prevents the developer from providing a "tool tip" type additional information, such as "see field x from the taxpayers W2", which is what the TITLE attribute is spec'd for. 
So, the only real best solution is to fix the LABEL spec [2]. 
We simply need to be able to have the LABEL element label more than one field. 
The spec [2] doesn't explain the restriction, but I could imagine a DOM developer complaining that he has to traverse the DOM tree looking for new or changed ID references all the time, or worse yet, the same control having more than one ID. 
It might even be a spec editing problem, meaning that it should have said that each control can only have one unique id, not one label. 
But in any event, I think the spec should say something more like - Phill's proposal: The LABEL element is to be used to attach information to controls. 
Each LABEL element is associated with one or more form controls. 
The FOR attribute associates a label with another control explicitly. 
The value of the FOR attribute must be the same as the value of the ID attribute of an associated control element. 
The same LABEL may be associated with more than one control by listing multiple IDs in it's FOR attribute. 
Each control must have only one unique ID. 
More than one LABEL may be associated with the same control by creating multiple references to the INPUT's ID attribute via the LABEL's FOR attribute. 
example of one label labeling more than one control and one control being labeled by more than one label: This example needs some table layout markup added to resemble Jim's example to make more visual sense, and perhaps a review by a US income tax web developer grin/ . 
And who knows, we better try the example, it might even work despite the spec big smile/ . 
The spec should also mention what happens if the HTML is poorly formed. 
For example, if the FOR attribute is not unique, drop the next ones; if the ID is not unique, drop the next ones, etc. [1] http://jimthatcher.com/simpleformwithtitles.htm [2] HTML 4.01 Label http://www.w3.org/TR/html4/interact/forms.html#h-17.9 Regards, Phill Jenkins IBM Research Division - Accessibility Center 11501 Burnet Rd, Austin TX 78758 http://www.ibm.com/able 
What? 
The label doesn't redirect anything, it only makes an association. 
Focus is always on the control and occasionally, depending on the browser and the HTML coding, the visual focus indicator, the little dashed box, surrounds both the label and the control. 
The keyboard or other input can re-direct focus, so I'm not sure what you mean. 
It was a design decision, and until then there was no reason why a label could not have said that it applied to two or more elements 
My question is that I haven't found any rationale for the design decision. 
So when was this decision made? 
If there was no reason before, what was the reason that came along? 
(except that it is slightly messy to work out the syntax). 
See my example syntax, borrowed heavily from the headers syntax, in response to Jim's post. 
But basically I don't see any difference between the HEADERS attribute associating the cells with headings and the FOR attribute associating LABELs with INPUTs. 
a 
exactly my point. 
I'm not adding content. 
Adding a title attribute is, in a sense, adding content and semantics into one via the natural language, especially in Jim's example of title="Tax payers's W2 Gross". 
Label is an association while title is additional information. 
Regards, Phill 
Although not perfect, one solution for the use of Title at this time is to include the naming and additional information as part of the title tag. 
For example if you have an edit box with a title of first name, the title for the edit box might be first name: 20 characters max. 
This assumes that you want to inform all users of the max characters that can be entered as the tool tip. 
i had thought that labels would not be needed with option select as the directions can be included in the option text and this may be true. 
however, the title, accesskey and label aspect would be needed on the command, for example "State". 
so labels would be needed. 
i like that i can mouseover a form control in Internet Explore and it pops up text. 
however, the 'for' and 'id' would be needed if tables are used. 
Behalf Of Phill Jenkins 10.5 Jim's example [1] is very compelling, simple, yet eloquently conveys the problem. 
However, I believe that the suggested TITLE attribute solution is just as much a temporary solution as the HEADERS solution. 
How will the AT know the context of when to speak the title and when not too? 
always? 
How will the author know when to add the title attribute? 
always? 
In Jim's example, I see the first field titled as "Taxpayer W2 Gross", and the second field titled "Spouse W2 Gross" and so on so that it is spoken each and every time you visited that field. 
Sounds simple, yet I could also achieve a similar result by using the headers attribute. 
But as you pointed out, use [or support] of the headers attributes [and the title attribute for that matter] varies among ATs. 
For example HPR would only read by default the new or changed header as the row or column was traversed. 
So one would hear something more like "W2 Gross - Taxpayer, edit field, Spouse, edit field" which I find less chatty than the verbose title example. 
But the real problem I have with the TITLE attribute solution is that it prevents the developer from providing a "tool tip" type additional information, such as "see field x from the taxpayers W2", which is what the TITLE attribute is spec'd for. 
So, the only real best solution is to fix the LABEL spec [2]. 
We simply need to be able to have the LABEL element label more than one field. 
The spec [2] doesn't explain the restriction, but I could imagine a DOM developer complaining that he has to traverse the DOM tree looking for new or changed ID references all the time, or worse yet, the same control having more than one ID. 
It might even be a spec editing problem, meaning that it should have said that each control can only have one unique id, not one label. 
But in any event, I think the spec should say something more like - Phill's proposal: The LABEL element is to be used to attach information to controls. 
Each LABEL element is associated with one or more form controls. 
The FOR attribute associates a label with another control explicitly. 
The value of the FOR attribute must be the same as the value of the ID attribute of an associated control element. 
The same LABEL may be associated with more than one control by listing multiple IDs in it's FOR attribute. 
Each control must have only one unique ID. 
More than one LABEL may be associated with the same control by creating multiple references to the INPUT's ID attribute via the LABEL's FOR attribute. 
example of one label labeling more than one control and one control being labeled by more than one label: This example needs some table layout markup added to resemble Jim's example to make more visual sense, and perhaps a review by a US income tax web developer grin/ . 
And who knows, we better try the example, it might even work despite the spec big smile/ . 
The spec should also mention what happens if the HTML is poorly formed. 
For example, if the FOR attribute is not unique, drop the next ones; if the ID is not unique, drop the next ones, etc. [1] http://jimthatcher.com/simpleformwithtitles.htm [2] HTML 4.01 Label http://www.w3.org/TR/html4/interact/forms.html#h-17.9 Regards, Phill Jenkins IBM Research Division - Accessibility Center 11501 Burnet Rd, Austin TX 78758 http://www.ibm.com/able 
CMN 
It was a design decision, and until then there was no reason why a label could not have said that it applied to two or more elements 
PJ My question is that I haven't found any rationale for the design decision. 
So when was this decision made? 
If there was no reason before, what was the reason that came along? 
CMN You would have to ask the HTML working group. 
CMN 
PJ But basically I don't see any difference between the HEADERS attribute associating the cells with headings and the FOR attribute associating LABELs with INPUTs. 
CMN Headers are explicitly part of a table - they are expected to be labelling each of a set of items, where that set is those things in the same column/row (or column/row group). 
Label is expected to label one thing. 
These semantics are defined in the HTML specification, which is precisely the authorative specification of the semantics of HTML elements and attributes (plus a little bit which is the specification of the syntax). 
CMN 
PJ I'm not adding content. 
Adding a title attribute is, in a sense, adding content and semantics into one via the natural language, especially in Jim's example of title="Tax payers's W2 Gross". 
Label is an association while title is additional information. 
CMN Exactly. 
Cheers Charles 
