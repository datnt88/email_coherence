The rhetorical cannons in here have been going off in all directions, and there are a few points that I thought might benefit from some more clarification. 
1. 
What is XML For? 
Jon has pointed out that by W3C statute, the primary goal of the ERB and WG work is to enable the delivery of SGML over the Web. 
Which is true. 
However, I and several others on both the ERB and the WG (including I think Charles Goldfarb) have an entirely un-hidden agenda, namely to construct a lightweight, lean, mean, easy-to-learn on-ramp for SGML. 
Which involves no conflict (far as I can see) with the primary Web-oriented goal. 
At a deep level, XML is *nothing new* - people have been building successful SGML apps for years and making a point of leaving out minimization and other tricky stuff. 
We're just writing down a standard way to do this. 
2. Why the HTML Empty Tag Trick? 
Primarily, to make it possible for a valid, normalized HTML document also to be a valid XML document. 
Lee Quinn has raised, and nobody has addressed here, the claim that this is a political move. 
Not speaking on behalf of the ERB, let me say that I think that Lee is correct; this is a political move, and one which I approve of 100%. 
It is not an attempt to grandfather existing HTML. 
It is an attempt to get lightweight SGML off the ground by making it possible to have a dialogue with the huge, well-funded, energetic Web population. 
Consider two scenarios: a. web-head: "Can XML process HTML documents?" 
xml-evangelist: "Yes, if they're clean" w-h: ...more questions... b. w-h: "Can XML process HTML documents?" 
x-e: "No" w-h: "Huh?" x-e: "Well, XML can't handle the syntax of tags like IMG and BR and HR." ... no more questions; the conversation just ended. 
Now, XML doesn't necessarily win in scenario a; but at least you're still talking and you have a chance. 
3. XML and existing SGML tools Existing SGML tools can, if they're compliant, read XML today modulo *only* overlapping enumerated attribute values and perhaps some mild inconsistencies as to which RE's are where. 
Existing SGML tools can't write XML until they can write empty tags as e/ . 
hint I suspect that the SGML vendors of the world could, if they started today, be demonstrating this at SGML'96 /hint . 
Large quantities of SGML that use features such as &amp;-based content models, inclusions, exclusions, and so on, are *not* valid XML and cannot be made into valid XML without some real work. 
I can't imagine why you'd want to do that work - you already have good tools for dealing with them as SGML, and if you change the end-tag syntax you have well-formed [for well-formed read network-ready] XML. 
Large quantities of SGML are XML, modulo the syntax of end tags, which I refuse to see as a significant obstacle. 
It is absolutely the unanimous intent of the ERB that existing SGML tools be able to deal with XML, and there have been significant design compromises in XML in order to make this happen. 
Paul Grosso's assertion: I have sensed a lot of people trying to give lip service to the claim that XML is a subset of SGML--at least in spirit if not in fact--and it's refreshing to have you admit that this is not your intent. 
It's not your intention that the base of existing SGML authoring tools will handle XML. is simply incorrect. 
XML is a subset of SGML in spirit and in fact, and XML is designed so that the adjustments required in existing SGML tools are trivial. 
Paul, any chance of getting you to back off on that a bit? 4. XML and HTML browsers In order to work with XML, HTML browsers would have to do a small number of things: 1. accept empty tags in the e/ form 2. apply stylesheet directives on non-HTML tags It would also be nice but not essential if they would stop rendering PI's on the screen. 
[grrrrr] Will this happen? 
I don't know. 
I think it would be wonderful and a huge shot in the arm for the Web, and as a consequence a huge shot in the arm for SGML. 
I think the chances are not that good, but also not zero. 
If anyone can think of a way to help make this happen, that would be a major contribution. 
I know for sure that all sorts of people cooking up cool web technologies desperately want to extend HTML, and have damn little chance of getting such extensions blessed by the current W3C process. 
For them, XML is a gift from above - if the browsers read it. 
5. Economic Impacts of XML on the SGML community Yes, if XML succeeds, this will place unprecedented stress on the SGML community, as it scrambles to deal with a user base that has increased by an order of magnitude, and overpowering market pressures from the big players who have their own axes to grind. 
It is achingly obvious to me that this is an improvement over the present situation. 
In particular, this should be a pot of gold for the authoring vendors - none of the current half-cooked HTML-only tools are going to be exactly easy to teach self-extending tag sets to. 
And I'll tell you something, the end-users are going to love it. 
I've been pitching the XML idea to my consulting practice customers for the last 2 or 3 months, and the idea of a standard, lightweight, easy way to get into some descriptive markup and structure management is not a hard sell. 
Most of these people know but SGML but are not currently using it. 
Mostly because they think it's too complicated. 
Cheers, Tim Bray tbray@textuality.com 
http://www.textuality.com/ 
+1-604-488-1167 Sure. 
It appears I was mistaken about the intentions of the ERB with respect to using existing SGML tools. 
I'm sorry for the misinformation, but I hope my early, relatively semi-private confusion (more private than in front of hundreds at SGML '96 or thousands elsewhere) allows us all to benefit. 
I have heard it clearly now that XML is a subset of SGML, even if most existing SGML will require some, admittedly minor, conversion to turn it into valid (or well-formed) XML. 
Is there anything else that needs to be done to your standard SGML declaration for a Basic document other than DELIM GENERAL SGMLREF PIC "? " and NAMECASE GENERAL NO and whatever has to be done to the character set description (and ignore capacities and quantities) to get it to be sufficient (if admittedly more than necessary) to allow an SGML parser to parse valid XML properly (disregarding the RE/space detail)? 
paul This is my hope as part of an SGML consultancy that writes a lot of DTDs and a few apps. 
We almost never use LINK, CONCUR, SUBDOC, exceptions, #CURRENT, CONREF, etc. now. 
(Not because we don't like them, or don't understand then, but because we almost never NEED them for real life applications.) 
We do use parameter entities heavily (both kinds) and despair about RS/RE behavior and the prohibition against the same value in two Declared value list. 
We don't want this to be "new" either, we hope it will be codified standard practice. 
Because unless it is codified as well as usual, no one will write applications for/in/using it. 
Seconded. 
I don't like this solution much, but I have racked for a better one and drawn blank. 
XML must be easily within the reach of existing tools (small, simple, easy, or clearly superior modes only) or no one will write applications for/in/using it. 
(And if the tools don't accommodate this fast enough, even I could write a pre/post processor to put them in and take them out with one hand tied behind my back. 
And so could you. 
Not a good solution, but a fine temporary.) Pavlov's dogs have nothing on me. 
As a Co-Chair of SGML'96 may I urge... Being able to demo this, even on a partly smoke-and-mirrors basis would be fantastic! 
Obviously smaller products with less ISO 9000 and departmental infrastructure have a better change of hacking this in a week, but... Lee, Chris, Gavin, anybody? 
This needs to be true. 
Period. 
--Debbie Lapeyre Not just an on-ramp, in my case, but a genuine subset. 
That means that a valid XML 1.0 document must be a conforming ISO 8879:86 document. 
The former makes XML *not* conforming SGML. 
The latter could avoid being nonconforming if the spec were written carefully (see below). 
The above statement is inconsistent on its face. 
If XML is a subset of SGML "in fact", why should existing "compliant" SGML tools require any adjustments? 
One can argue (but not here, please) whether a DTD-less markup language is a subset of SGML in spirit, but to be one in fact means that conforming XML documents must conform to 8879. 
At present, they don't. 
However, XML can be made conforming (without changing its present RE handling) as follows: 1. 
The spec must carefully distinguish the "conforming subset" SGML syntax from the other things that XML defines, but which have nothing to do with generic SGML parsing. 
So far, those other things are: a. Character encoding rules for storage objects. 
b. 
A mandatory unvarying SGML declaration. 
It declares the XML concrete syntax, feature set, etc. c. 
A mandatory unvarying "XML component" of every DTD. 
It consists of some entity declarations, a short reference mapping declaration, some element type declarations for empty element types, and a data content notation for white space handling (discussed below). 
It is considered to occur at the start of the internal subset, meaning that nothing in it can be preempted. 
d. 
Some attribute definitions for use in DTDs (notably those having to do with white space handling). 
e. 
Prescribed semantic (i.e., not parsing) behavior of XML processors, such as browsers and editors. 
This would include rules for processor behavior when an XML document is non-conforming (not valid), but possibly well-formed, such as in the absence of a DTD. 2. XML's white space handling should be defined as a data content notation (XMLWS), applicable to the document element. 
(Suitable shortref mappings can prevent normal SGML RE handling from taking place.) 
The behavior of the notation can be dependent on attribute values and/or element types, so existing XML white space behavior and/or other useful behaviors could be supported. 
(It is possible, incidentally, that full SGML applications might want to use this notation.) 3. XML 1.0 would have to drop enumerated attribute values. 
As has been pointed out, the uniqueness constraint is unjustifiable in the absence of shorttag minimization. 
Declare them as CDATA and include a comment constraining the values (perhaps expressed as a regexp). 
All that is lost is parser-level validation. 
We've exhibited great restraint in more important areas to maintain SGML conformance; it would be unfortunate to abandon conformance just for this one. 
(No matter where the REs are, the *document* would still be valid SGML. 
It's the *parser behavior* which would differ slightly from "XML processor" behavior...) Regarding *writing* XML, it's certainly possible for existing tools to need adjustment. 
Most SGML-aware editors normalize things like NET. 
In order to write them out again, they'd need to be modified. 
(Not that this is achingly hard to do.) can The problem is that only one NOTATION attribute is allowed on any one attlist, and this would be a major invasion of the user's markup design space. 
(If 8879 were to relax this, it could open up a whole new way to do architectural forms!) Eve You didn't address this point, Eve. 
Conforming SGML means that any conforming system will produce the same ESIS. 
At present, an XML document is not conforming SGML. 
True, but it is the parsing that determines conformance, and you haven't refuted my point: XML at present is not conforming SGML. 
Not at all. 
The notation attribute need only be attached to the document element, as everything else is part of its content. 
Subelements can have their own notations as well. 
This is certainly a smaller "invasion of the user's markup design space" than the use of dedicated empty element type names or built-in entity declarations. 
And, it makes XML a conforming subset of SGML, rather than a W3C competitor to ISO. True. 
That one is incompatible. 
(I snipped out the parts I agreed with.) The ERB has made some incredibly hard decisions, all to keep compatibility with SGML design, and in the process often went against several of our other principles. 
Perhaps the notion of a successful SGML on the Web is incompatible with SGML86. 
If so, we've pared down the true incompatibilites to a tiny list, all because of our commitment to SGML86 and our belief in the SGML97 process. 
But if the XML document is valid -- that is, a full DTD is available (leaving aside for a moment whether the DTD's attlists are all 8879-valid) -- the ESIS is essentially the same, right? 
"ESIS" is a slippery concept anyway, and the major parsers already produce some differences regarding REs, as I understand it. 
refuted I'm sorry, but I think this is missing the point of XML somehow. 
I'll let my remarks above stand. 
I don't understand how attaching white-space semantics to the document element will help all the other subelements, since it differs on a per-element basis. 
And the moment you add a notation to a subelement, it can no longer have any other notations. 
Eve Well, not exactly ESIS, since ESIS isn't part of 8879. 
Given that 8879 doesn't say what the result of parsing is, how do you tell whether a conforming system has done "the same thing" as another one has, *purely* given requirements of 8879? 
In 8879, a parser can be a black box that returns TRUE or FALSE (and maybe some error messages). 
For example, is there a normative definition for what it actually means to "ignore" an RE? If we take "ignore" at its English face value, then an SGML system which produces a byte-identical copy of its input is non-conforming -- it clearly doesn't ignore the REs that 8879 requires be ignored, so it violates 8879. 
What I'm saying is, if XML output falls so close to SGML's that nobody cares about the difference in practice, did we make a noise? 
S Because we have all agreed to bite the bullet here. 
SGML'97 has the opportunity to fix this problem for SGML, but we can't wait. 
This is not true. 
The ESIS definition is not normative text. 
The standard itself is hopelessly ambiguous on the subject of what is and is not to be produced by an SGML processor, defining only a syntactic acceptance procedure (Exoterica's whitepaper on whitespace is quite informative in this regard). 
You may _wish_ that the ESIS was normative text, but it is _not_. 
But I have. 
Except for the attribute value thing. 
But that is still impossible to justify in the absence of minimization, and you have already declared that you would be willing to fix in in SGML '97. 
If we lead by a year, what's the harm? 
-- David RE delenda est. 
I am not a number. 
I am an undefined character. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ I think what needs to be done is to define a grove plan for XML. 
Given such a grove plan, it is then meaningful to say something like "using the XML grove plan, an XML document parsed by an SGML parser shall produce a grove identical to the grove produced by an XML grove construction process using the same grove plan." 
[snip] This would certainly provide a more precise definition than "ESIS". 
This is emminently sensible. 
Accepting the grove concept would certainly make the other pieces we need to consider easier to specify as well. 
ESIS has been a weakly defined concept for some time and has not given us the required precision in many cases. 
That is why we have heard the term "beyondESIS" or "superESIS" too often. 
I think this also establishes a precedent that will serve the W3C members well in other applications and language work if adopted. 
What are the objections? 
len ESIS. 
At I think what needs to be done is to define a grove plan for XML. 
Given such a grove plan, it is then meaningful to say something like "using the XML grove plan, an XML document parsed by an SGML parser shall produce a grove identical to the grove produced by an XML grove construction process using the same grove plan." 
Note the connection to the syntax of the source: it's not enough simply to have some arbitrary syntax from which you can construct an SGML grove: it must be possible for an SGML parser to produce the same grove from the same source. 
For example, the XML grove plan can exclude the "ignored markup" property, thereby stating explicitly that "ignored" REs are in fact truly ignored, in the sense that they will never be available to XML processors operating on an XML document grove. 
This would certainly provide a more precise definition than "ESIS". 
Cheers, E. W. Eliot Kimber (eliot@isogen.com) 
Senior SGML Consulting Engineer, Highland Consulting 2200 North Lamar Street, Suite 230, Dallas, Texas 75202 "Rats in the morning, rats in the afternoon...if they don't go away, I'll be re-educated soon..." --Austin Lounge Lizards, "1984 Blues" There is an alternative even for this point: don't support name token values (enums) at all in XML 1.0. 
Then you are 100% conforming and you don't have to explain the indefensible. 
Enums can be added as a feature in 2.0 when the constraint is removed for SGML97. 
White space handling is problematic enough in 8879 that every product interprets the rules its own way. 
No one (least of all me) would complain about XML introducing a reasonable interpretation of how to handle this area (particularly as it is application behavior, not purely parsing behavior). 
But breaking the enum constraint is a flat out obvious contradiction of the standard. 
Moreover, it is unnecessary, since you don't need to declare enums as anything but nmtokens; more than that is useful only for validation and documentation -- it can wait for XML 2.0. 
The concept of conformance is technically vital to SGML; adherence to the ISO standard is our political lifeblood. 
Because of that, even WG8 itself was unwilling to jump the gun on SGML97 when we developed the HyTime TC. 
We lived with unpleasant constraints that we know will be removed in SGML97. 
If you remove this one unnecessary egregious conflict with the standard, XML will indeed conform to SGML. 
There will be no reasonable grounds for anyone to claim the contrary. 
I understand that it can be difficult to explain why you can't have duplicate enumerated values, but I fail to understand how this one, relatively small issue is worth breaking SGML conformance. 
It seems rather curious to me that the ERB considers it "political suicide" to fail to accomodate the "typical" empty end tag syntax when processing an HTML document, yet feels that it is politically "safe" to break SGML conformance. 
I hate to ask, but is this an indication of preference towards a particular community of users or vendors? 
I'm not being argumentitive here. 
Sadly, I feel quite detached in this process and believe that this is a reasonably objective perception. 
If implementors don't like this restriction, fine. 
They're going to do what they want anyway. 
Removing the restriction in the spec, however, seems like a bad move to me. 
bob I strongly agree. 
SGML is broken in this regard, and will be fixed soon. 
XML 2.0 can incorporate the fix. 
As Bob mentions, vendors will probably not implement this restriction, so those that do not care about SGML compatibility will probably never notice it. 
Those that do care will be glad that validating XML parsers will not accept invalid SGML documents. 
This restriction does not have to be with us forever -- only until SGML is fixed. 
Paul Prescod Boycott Shell Oil worldwide! 
http://www.web.apc.org/embargo/shell.htm 
"Shell is here on trial and it is as well that it is represented by counsel said to be holding a watching brief."..."The ecological war that the Company has waged in the Delta will be called to question sooner than later." 
-Ken Saro-Wiwa to the tribunal that later executed him. 
Good to hear. 
Perhaps we can go back to the most simple and uniform model of all: no RE/RS elimination. 
Hear! 
Hear! RE delenda est. 
I am not a number. 
I am an undefined character. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ 
