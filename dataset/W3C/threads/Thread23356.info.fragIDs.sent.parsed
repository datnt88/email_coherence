(S1 (S (S (ADVP (ADVP (RB As) (RB long)) (IN as)) (NP (PRP we)) (VP (AUX 're) (PP (IN on) (NP (NP (DT the) (NN subject)) (PP (IN of) (NP (NN .insertBefore))))))) (-LRB- -LRB-) (-RRB- -RRB-)))
(S1 (SBARQ (WHADVP (WRB Why)) (SQ (AUX does) (NP (DT this) (NN method)) (, ,) (SBAR (WHADVP (WRB when)) (S (NP (DT no) (JJ second) (NN argument)) (VP (AUX is) (VP (VBN specified))))) (, ,) (VP (VB append) (NP (DT the) (NN child)))) (. ?)))
(S1 (NP (NNP .appendChild)))
(S1 (S (S (ADVP (RB already)) (VP (AUX does) (NP (DT this)) (: -) (FRAG (WHADVP (WRB why)) (RB not) (VP (VB make) (NP (NN .insertBefore)))))) (-LRB- -LRB-) (-RRB- -RRB-)))
(S1 (NP (NP (NN insert)) (PP (IN at) (NP (DT the) (NN beginning))) (PP (IN by) (NP (NN default))) (. ?)))
(S1 (S (NP (NP (NN Opportunity)) (PP (IN for) (NP (JJ added) (NN functionality) (RP aside)))) (, ,) (VP (VB consider) (SBAR (IN that) (S (NP (NP (DT a) (NN loop)) (SBAR (S (VP (TO to) (VP (VB add) (NP (NNS elements)) (PP (TO to) (NP (NP (DT the) (NN end)) (PP (IN of) (NP (DT a) (NN list)))))))))) (VP (AUX is) (ADJP (JJ simple)))))) (: :)))
(S1 (S (IN for) (-LRB- -LRB-) (NP (PRP i)) (VP (SYM =) (NP (NP (NP (CD 0)) (: ;) (S (NP (PRP i)) (NP (NNP len)))) (: ;) (NP (NP (CD i++) (-RRB- -RRB-) (NN node.appendChild)) (PRN (-LRB- -LRB-) (JJ list-LSB-) (NN i) (NN -RSB-) (-RRB- -RRB-))) (: ;)) (SBAR (IN Whether) (S (NP (DT the) (NN node)) (VP (VBZ begins) (ADJP (JJ empty) (CC or) (RB not)))))) (. .)))
(S1 (S (CC But) (S (NP (NP (DT a) (NN loop)) (SBAR (S (VP (TO to) (VP (VB add) (NP (NNS elements)) (PP (TO to) (NP (DT the) (NN beginning)))))))) (VP (AUX is) (RB not))) (: :) (SBAR (IN for) (S (-LRB- -LRB-) (NP (PRP i)) (VP (SYM =) (NP (NP (CD 0)) (: ;) (NP (NNP i) (NNP len)) (: ;) (NP (CD i++)) (-RRB- -RRB-) (-LRB- -LCB-)) (SBAR (IN if) (FRAG (-LRB- -LRB-) (ADJP (JJ node.childNodes.length)))))))))
(S1 (NP (NNP ==) (CD 0) (-RRB- -RRB-)))
(S1 (NP (JJ last) (SYM =) (VP (VBN node.appendChild) (-LRB- -LRB-))))
(S1 (S (S (S (VP (VBG list-LSB-) (NP (NP (PRP i) (NN -RSB-) (-RRB- -RRB-)) (: ;) (NP (NP (RB else) (NN node.insertBefore)) (PRN (-LRB- -LRB-) (NP (NP (JJ list-LSB-) (NN i)) (ADJP (JJ -RSB-) (, ,) (JJ last))) (-RRB- -RRB-))) (: ;)) (SBAR (IN While) (S (NP (PRP I)) (VP (VBP realize) (NP (DT the)) (PP (IN for) (NP (NN loop)))))))) (VP (MD could) (VP (AUX be) (VP (VBN optimized))))) (, ,) (S (NP (DT that)) (VP (AUX 's) (RB not) (NP (DT the) (NN point)))) (. .)))
(S1 (S (NP (EX There)) (VP (AUX are) (NP (NP (JJ many) (JJ varied) (NNS cases)) (SBAR (WHADVP (WRB where)) (S (NP (NNS objects)) (VP (MD must) (VP (AUX be) (VP (ADVP (RB repeatedly)) (VBN added) (PP (TO to) (NP (NP (DT any) (NN number)) (PP (IN of) (NP (NNS lists))) (, ,) (SBAR (WHNP (WDT which)) (S (VP (VP (MD may)) (CC or) (VP (MD may) (RB not) (VP (AUX be) (ADJP (JJ empty)) (PP (IN at) (NP (DT the) (NN time))))))))))))))))) (. .)))
(S1 (S (S (NP (DT The) (NN call)) (VP (MD may) (RB not) (VP (VB happen) (ADVP (RB directly) (RB inside) (IN of) (DT a)) (PP (IN for) (NP (NN loop)))))) (, ,) (CC but) (S (NP (NP (JJ several) (NNS methods)) (ADVP (RB down))) (, ,) (NP (DT the) (NN top-most)) (VP (AUXG being) (VP (VBD called) (PP (IN in) (NP (PDT such) (DT a) (NN loop)))))) (, ,) (FW etc) (. .)))
(S1 (FRAG (WHADVP (WRB Why)) (RB not) (VP (VB make) (NP (DT this) (NN call)) (PP (IN as) (ADJP (JJ simple) (PP (IN as) (NP (: :) (NP (NP (NN node.insertBefore)) (PRN (-LRB- -LRB-) (NP (JJ list-LSB-) (NN i) (JJ -RSB-)) (-RRB- -RRB-))) (: ;))))))))
(S1 (NP (NNP -Chris) (`` ``) (NNP SoopahMan) ('' '') (NNP Moschini)))
(S1 (NP (NNP Hi) (, ,)))
(S1 (FRAG (WHNP (WP what) (RB about)) (SBAR (IN for) (S (-LRB- -LRB-) (S (NP (PRP i)) (VP (SYM =) (NP (CD 0)))) (: ;) (S (NP (PRP i)) (NP (NNP len))))) (: ;) (NP (NN i++)) (-RRB- -RRB-)))
(S1 (NP (NP (NNP node.insertBefore)) (PRN (-LRB- -LRB-) (NP (JJ list-LSB-i) (NN -RSB-)) (, ,) (ADJP (ADJP (JJ node.firstChild)) (-LRB- -LRB-)) (-RRB- -RRB-) (-RRB- -RRB-)) (: ;)))
(S1 (NP (NP (JJ ok) (S (S (NP (EX there)) (VP (AUX are) (NP (NP (CD two) (NN method) (NNS calls)) (CONJP (RB instead) (IN of)) (NP (RB only) (CD one))))) (CC but) (S (NP (PRP I)) (VP (VBP think) (SBAR (S (NP (DT this)) (VP (AUX is) (ADJP (JJ acceptable)) (PRN (-LRB- -LRB-) (CC and) (S (S (VP (VBG inserting) (PP (IN at) (NP (NP (DT the) (NN beginning)) (PP (IN of) (NP (DT the) (NN list))))))) (VP (AUX is) (ADJP (ADJP (RB IMHO) (RBR less) (JJ common)) (PP (IN than) (NP (NN appending)))))) (-RRB- -RRB-))))))))) (: --) (NP (NN luca))))
(S1 (NP (NN child) (. ?)))
(S1 (S (NP (NP (DT The) (NN next-sibling)) (PP (IN of) (NP (DT the) (JJ last) (NN sibling)))) (VP (AUX is) (ADJP (JJ null))) (. .)))
(S1 (S (ADVP (RB Hence)) (, ,) (NP (JJ insert-before) (NN null)) (VP (AUX is) (VP (VBN taken) (PP (IN as) (NP (DT a) (NN request))) (PP (TO to) (NP (NN insert))) (PP (IN at) (NP (DT that) (NN point))))) (. .)))
(S1 (SQ (AUX Did) (NP (PRP we)) (VP (AUX have) (S (VP (TO to) (VP (VB support) (NP (DT that) (NN behavior)))))) (. ?)))
(S1 (S (S (S (NP (NNP No.) (NNP But) (PRP it)) (VP (AUX 's) (ADJP (JJ cheap) (CC and) (JJ easy)) (S (VP (TO to) (VP (VB implement)))))) (, ,) (NP (PRP it)) (VP (VBZ makes) (NP (NN sense)) (SBAR (WHADVP (WRB when)) (S (NP (PRP you)) (VP (VBP understand) (NP (DT the) (NN rationalle))))))) (, ,) (CC and) (S (NP (PRP it)) (VP (VBZ makes) (S (NP (NP (DT some) (NNS kinds)) (PP (IN of) (NP (NN code)))) (ADJP (NP (DT a) (RB trifle)) (JJR easier) (SBAR (S (VP (TO to) (VP (VB write))))))))) (. .)))
(S1 (SQ (MD Would) (NP (PRP you)) (ADVP (RB really)) (VP (AUX have) (VP (VBN preferred) (SBAR (IN that) (S (NP (PRP we)) (VP (VBP throw) (NP (DT a) (ADJP (RB null) (JJR pointer)) (NN exception))))))) (. ?)))
(S1 (S (-LRB- -LRB-) (NP (PRP It)) (VP (AUX 's) (ADJP (RB far) (RB too) (JJ late)) (S (VP (TO to) (VP (VB change) (NP (PRP it))))) (, ,) (PP (IN in) (NP (DT any) (NN case)))) (. .) (-RRB- -RRB-)))
(S1 (S (NP (PRP We)) (VP (AUX have) (NP (NP (NN something)) (PP (IN like) (NP (DT that))))) (. .)))
(S1 (S (PP (RB Rather) (IN than) (S (VP (VBG using) (NP (DT a) (NN list)) (S (VP (TO to) (VP (VB hold) (NP (PRP$ your) (NNS nodes)))))))) (, ,) (VP (VB make) (S (NP (PRP them)) (NP (NP (NNS children)) (PP (IN of) (NP (NP (DT a) (JJ DocumentFragment) (NN node)) (, ,) (SBAR (WHNP (WDT which)) (S (VP (AUX has) (NP (NP (DT the) (JJ magic) (NN property)) (SBAR (WHNP (WDT that)) (S (S (VP (VBG inserting/appending) (NP (PRP it)))) (ADVP (RB actually)) (VP (VBZ inserts/appends) (NP (PRP$ its) (NNS children)))))))))))))) (. .)))
(S1 (NP (NP (NP (NNP Joe) (NNP Kesselman)) (, ,) (NP (NNP IBM) (JJ Next-Generation) (NNP Web) (NNP Technologies))) (: :) (NP (NP (NNP XML)) (, ,) (NP (NNP XSL)) (CC and) (NP (JJR more))) (. .)))
(S1 (S (`` ``) (S (NP (DT The) (NN world)) (VP (VBD changed) (ADVP (RB profoundly)))) (CC and) (ADVP (RB unpredictably)) (S (NP (NP (DT the) (NN day)) (NP (NNP Tim) (NNP Berners) (NNP Lee))) (VP (VBD got) (VP (VBN bitten) (PP (IN by) (NP (NP (DT a) (JJ radioactive) (NN spider.)) ('' '') (: --) (NP (NNP Rafe) (NNP Culpin)))) (, ,) (PP (IN in) (NP (NN r.m.filk))))))))
(S1 (S (S (NP (DT This)) (VP (VP (AUX is) (NP (DT a) (JJ Level) (CD 1) (NN change))) (CC and) (VP (MD would) (VP (VB break) (NP (VBG existing) (NN DOM) (NNS implementations)))))) (, ,) (CC so) (S (NP (PRP it)) (VP (MD can) (RB n't) (VP (AUX be) (VP (AUX done))))) (. .)))
(S1 (NP (NNP Philippe)))
