1. LAST CALL ANNOUNCEMENT: DOM CORE This is the last call announcement from the W3C DOM Working Group (DOM WG) for review of the DOM Level 3 Core Specification. 2. REQUEST FOR DOCUMENT REVIEW The DOM WG asks for review of the following document: Document Object Model (DOM) Level 3 Core Specification This specification defines the Document Object Model Core Level 3, a platform- and language-neutral interface that allows programs and scripts to dynamically access and update the content, structure and style of documents. 
The Document Object Model Core Level 3 builds on the Document Object Model Core Level 2 [DOM Level 2 Core http://www.w3.org/TR/DOM-Level-3-Core/references.html#DOM2Core ]. 
The document is available at: See Appendix A for a list of changes between DOM Level 2 Core and DOM Level 3 Core specifications. 
3. HOW TO SEND COMMENTS Comments from any W3C Working Group or Member of the Community are welcome on: www-dom@w3.org 
mailto:www-dom@w3.org?Subject=Re:%202nd%20Last%20Call%20Announcement%20for%20DOM%20Events&amp;In-Reply-To= 3E8918FF.8030003@netscape.com 
&amp;References= 3E8918FF.8030003@netscape.com 
archived at: and will be added to the last-call issues list at: 4. INTENTIONS OF DOM WG Unless the review uncovers substantial problems, the next step will be to recommend the document for publication as Candidate Recommendation to gain implementation experience. 
5. IMPLEMENTATION EXPERIENCE The DOM WG is looking for implementations of the draft. 
If you, or your company, are planning to implement (or already has an implementation of) this DOM module and are willing to participate in the Candidate Recommendation phase with your implementation, please let us know by sending a message to the public mailing list www-dom@w3.org. 
6. END OF REVIEW PERIOD The Last Call review period ends at 5p Pacific Time on July 31, 2003. 
7. REQUESTED REVIEWS The following Working Groups are especially invited to provide review comments: - XML Core - XML Schema - XQuery / XSL (XPath Task Force) - I18N Any other groups or individuals are encouraged to send comments as appropriate. 
8. PATENT DISCLOSURES A page about Patent disclosures for the DOM WG is found at: No patents have been disclosed at this time. 
Thank you, Ray Whitmer, for the DOM WG Looks reasonable from what I've read so far. 
Issues noticed: 1.2.3 (DOMUserData): the repeated wording "an application data" is rather odd; 'data' is of course plural. 
1.3.6 (features): the new method of prepending a '+' to the feature name seems rather clumsy. 
If a Level 2 feature is updated to a Level 3 feature which can be non-castable, an application that wants the Level 2 feature and doesn't care about casting would have to call hasFeature twice to find out whether the feature can be supplied, once with "+"..."3.0" and once with "2.0". 
Document.renameNode: it seems to be impossible to rename a node and end up with a non-namespace (Level 1) node. 
For orthogonality, shouldn't there be renameNode and renameNodeNS? 
Text.wholeText: by my reading of the definition of "logically adjacent text nodes", fooNode's wholeText should also give "barfoo". 
Is this a mistake? 
If not, why is fooNode adjacent to barNode but not vice versa? 
If wholeText is only supposed to look forwards, the spec should say so. 
DOMError: still seems a bit vague. 
How exactly does a fatal error differ from an error? 
Can an error handler be called for arbitrary DOM exceptions, or just the few circumstances defined here? 
Are parse errors in Load/Save going to cause DOMErrors? 
What should DOMErrorHandlers do with unrecognised errors? 
Are the "wf-..." errors warnings? 
(And given the allusions to changes in LS, can we expect a new Draft of this soon?) DOMConfiguration parameter whitespace-in-element-content: "Discard all Text nodes that contain whitespaces in element content" implies that Text nodes in element content with *any* whitespace characters in their data should be removed, rather than Text nodes composed *only* of whitespace. 
I'm pretty sure this is not what was meant. 
Interface CDATASection: "The DOMString attribute of the Text node..." - surely "The data attribute...". 
I've recently written a standalone Python 1.5-and-later module implementing this Draft (above issues notwithstanding) and the February Draft of Load/Save. 
(Beta testers welcomed.) Andrew Clover There was always good intentions to add Python test generation to the DOM Test Suite (http://www.w3.org/DOM/Test) effort. 
That would probably be the easiest way to get a decent amount of test coverage. 
If you'd like to take a shot at manually coverting some of the generated Java or Javascript tests, I'd be willing to create a variant of the existing stylesheets to produce Python tests. 
If interested, please follow up on www-dom-ts@w3.org. 
correct. 
The application would need to care anyway since, depending on the result, it will have to access the object that implements the interface using getFeature or by simple cast. 
We discussed that and didn't find enough interest in having a renameNode/renameNodeNS solution, so unless people start to express an interest in having it, we won't do it. 
By the way, createDocument is another exception to that orthogonality... 
We updated the definition of logically adjacent text node as follow: Logically-adjacent text nodes are Text or CDATASection nodes that can be visited sequentially in document order or in reversed document order without entering, exiting, or passing over Element, Comment, or ProcessingInstruction nodes. 
The example has been fixed accordingly (i.e. foo Node's wholeText returns "barfoo"). 
A fatal error stops the processing, unlike an error. 
Unfortunately, we did not consider your proposal (July 21), so we'll have to revisit this. 
No. DOMExceptions are and stay exceptions. 
The relatedException is meant to platform dependent ones, not DOMException. 
An example would be a SecurityException or IOException when using DOMParser. 
[skipped in this message since it is regarding LS. will be tracked separately] We certainly don't intent to define the required behaviors of DOMErrorHandler for recognized or unrecognized errors. 
The unrecognized error must be of one of the 3 severity levels but that's all. 
No changes were done to the specification. 
wf- error types (from the well-formed parameter) are: - errors when generated after a call to normalizeDocument() - fatal errors when generated by the DOMParser. 
[skipping whitespace-in-element-content since we did not decide on it yet] correct. 
As usual, let us know if you're satisfy or not with the resolutions, Philippe Actually, we did talk about this one: The definition of whitespaces in element content is quite clear in the draft, especially since the following sentence indicates that Text.isWhitespaceInElementContent() should be used. 
We'll add an extra link to the infoset property as well. 
Philippe 
