(TOP (S (S (INTJ (UH Hello) (RB together)) (NP (PRP I)) (VP (AUX am) (VP (VBG building) (PRT (RP up)) (NP (DT a) (NN DOM)) (PP (IN from) (NP (NN scratch)))))) (, ,) (NP (DT all)) (VP (VBZ works) (ADJP (JJ fine)) (, ,) (SBAR (IN except) (S (S (VP (VBG adding) (NP (DT an) (NN attribute)) (PP (TO to) (NP (DT a) (NN node))))) (ADVP (RB Here)) (VP (AUX is) (NP (NP (DT a) (JJ small) (NN code) (NN snippet)) (SBAR (WHADVP (WRB where)) (S (NP (PRP I)) (VP (VBP want) (S (VP (TO to) (VP (VB add) (NP (DT the) (NN attribute)) (PP (TO to) (NP (DT the) (NN node)))))))))))))) (. .)) )
(TOP (FRAG (NP (NNPS Whats)) (ADJP (JJ wrong)) (ADVP (RB here)) (. ?) (. ?)) )
(TOP (S (SBAR (IN if) (PRN (-LRB- -LRB-) (VP (VBZ attributes)) (-RRB- -RRB-))) (NP (PRP myAttr)) (VP (SYM =) (NP (NP (NN answerDocument.createAttribute)) (PRN (-LRB- -LRB-) (NP (NN partialPath)) (-RRB- -RRB-)))) (: ;)) )
(TOP (NP (NP (NN myAttr.setValue)) (PRN (-LRB- -LRB-) (`` ``) (S (NP (NNS Attributes)) (VP (AUX are) (ADJP (ADJP (JJ stupid)) (CC or) (RB not)))) ('' '') (-RRB- -RRB-)) (: ;) (RB else)) )
(TOP (S (NP (NN element)) (VP (SYM =) (NP (NP (NN answerDocument.getElementsByTagName)) (PRN (-LRB- -LRB-) (NN partialPath) (-RRB- -RRB-)))) (: ;)) )
(TOP (S (NP (VB try) (NN nodeFound)) (VP (SYM =) (NP (NP (NN element.item)) (PRN (-LRB- -LRB-) (NP (CD 0)) (-RRB- -RRB-)))) (: ;)) )
(TOP (S (NP (NN String) (NNS xyz)) (VP (SYM =) (VP (VB nodeFound.getNodeName) (-LRB- -LRB-) (-RRB- -RRB-))) (: ;)) )
(TOP (S (NP (NNP //if) (NN node)) (VP (AUX does) (RB not) (VP (VB exist) (S (VP (VB throw) (NP (NP (NN exception) (NNS nodeDoesExists)) (FRAG (X (SYM =) (ADJP (JJ true))) (: ;) (NP (NN node)) (X (SYM =)) (NP (NN nodeFound)) (: ;) (VP (VB catch) (NP (PRN (-LRB- -LRB-) (NN Exception) (NN e) (-RRB- -RRB-)) (NNS nodeDoesExists))) (X (SYM =)) (NP (JJ false) (PRN (: ;) (PP (IN if) (NP (NP (PRN (-LRB- -LRB-) (NP (NNS attributes)) (-RRB- -RRB-)) (JJ node.appendChild)) (PRN (-LRB- -LRB-) (CD myAttr) (-RRB- -RRB-)))) (: ;)) (JJ //add) (NN attribute)))) (PP (TO to) (NP (DT the) (JJ node) (NNS Thanks))) (PP (IN in) (NP (NN advance)))) (NP (person (NNP Mario))))))) )
(TOP (S (INTJ (UH Hello)) (, ,) (NP (PRP You)) (VP (MD can) (RB not) (VP (VB append) (NP (NP (DT an) (NN attribute)) (VP (VBG using) (NP (NN appendChild)) (-LRB- -LRB-) (-RRB- -RRB-))))) (. .)) )
(TOP (S (NP (PRP It)) (VP (MD will) (VP (VB cause) (NP (DT a) (NNP HIERARCHY_REQUEST_ERR)))) (. .)) )
(TOP (S (NP (PRP You)) (VP (MD should) (VP (VB use) (NP (NN setAttributeNode)) (-LRB- -LRB-) (-RRB- -RRB-))) (. .)) )
(TOP (S (NP (DT This)) (VP (VBZ applys) (NP (QP (RB only) (TO to) (NN element)) (NNS nodes)) (SBAR (IN so) (S (NP (PRP you)) (VP (MD may) (VP (AUX have) (S (VP (TO to) (VP (VB static_cast) (ADVP (RB first)))))))))) (. .)) )
(TOP (NP (NNP Gareth)) )
(TOP (S (CC Or) (VP (VP (ADVP (RB simply)) (AUX do) (NP (NP (DT a) (NN node.setAttribute)) (PRN (-LRB- -LRB-) (NP (`` ``) (NN name) ('' '')) (, ,) (NP (`` ``) (NN value) ('' '')) (-RRB- -RRB-)))) (CC and) (VP (VB let) (NP (DT the) (NN implementation) (NN deal)) (PP (IN with) (S (VP (VBG creating) (NP (DT the) (NN attribute) (NN node)) (PP (IN for) (NP (PRP you)))))))) (. .)) )
(TOP (S (NP (NNP setAttribute) (-LRB- -LRB-) (-RRB- -RRB-)) (VP (MD will) (VP (VB create) (NP (DT a) (JJ new) (NN attribute)) (SBAR (IN if) (S (NP (NP (DT the) (NN attribute)) (SBAR (S (NP (PRP you)) (VP (AUX 're) (VP (VBG setting)))))) (VP (AUX does) (RB n't) (VP (VB exist) (SBAR (S (CC and) (PP (IN in) (NP (NP (ADVP (IN at) (JJS least)) (DT some) (NNS implementations)) (VP (VBG using) (NP (NN setAttribute))))) (-LRB- -LRB-) (-RRB- -RRB-) (VP (AUX is) (ADJP (ADVP (RB even) (RBR more)) (JJ efficient) (PP (IN than) (S (VP (VP (VBG creating) (NP (DT the) (NN attribute))) (CC and) (VP (VBG setting) (NP (DT the) (NN attribute)) (ADVP (RB node)) (PP (IN on) (NP (DT an) (NN element))))))))))))))))) (. .)) )
(TOP (NP (NNP jst)) )
