It's great how XHTML is progressing with version 2 etc. but it strikes me that while the W3C is taking the specs into the future the majority of the Web Development world is lagging miles behind. 
I don't think I'm the first one to have noticed this but wouldn't we be better putting out efforts into getting other developers to do the XHTML walk rather than producing the XHTML run? 
For example, a college near to me teaches Web Design. 
They teach HTML not XHTML. 
People come out of there happily writing br tags and not closing their p tags and some will go on to create Web sites. 
I had an email from a tutor in the states somewhere who is starting to teach his classes XHTML this coming semester. 
I can't claim to having any more data than that but from looking at code on the sites that I see it seems that most developers still couldn't care less about closing their empty elements and making sure all elements nest properly. 
I'm just concerned that once XHTML 2 gets released people will hear about it, no backwards compatibility etc. and loads of new elements and be scared by it. 
It's okay for us making the transition because we're already fully aware of 1.0 but from what I've seen most are not, old habits die hard, and especially with the number of people that know HTML. 
It's not like a new version of Perl where the majority of users are enthusiastic about the language, most people couldn't care less about the language and just want to get the job done, how do we get them to start being more strict in their coding practices? 
For my part I've started a series of articles aimed at teaching XHTML to beginners, if anyone is interested it's at: 
I too have noticed this. 
Schools teach the worst Web design since they think they have to use fancy text books (which cost money, take time to make and purchase, etc.) when they could just use the actual specifications which are sometimes even easier and are monetarily free. 
By the time the textbook is printed, it is probably out-of-date and if adopted, it takes about five years before new text books are adopted. 
In the worst cases, Web design education is at least six years behind the Web specifications. 
That is why you still see people writing presentationally using invalid HTML 3.2 through a Web editor. 
Such is the case with my school. 
Despite all my efforts, they fail to realize that HTML is a markup language that adds meaning, not fancy colors. 
They fail to see that this makes the language easier, not more difficult. 
They seem to think: I have to be a nerd to read HTML code. 
I don't want to be a nerd. 
I refuse to read HTML code. 
Not only is that false logic, being a geek or nerd is not a bad thing. 
A geek is simply someone with a passion for his or her profession or hobby whether it be computers, sports, or something else. 
Well, I hope those ramblings didn't stray too far from the original topic. 
Brant Langer Gurganus 
It's great how XHTML is progressing with version 2 etc. but it strikes me that while the W3C is taking the specs into the future the majority of the Web Development world is lagging miles behind. 
For example, a college near to me teaches Web Design. 
They teach HTML not XHTML. 
People come out of there happily writing br tags and not closing their p tags and some will go on to create Web sites. 
For my part I've started a series of articles aimed at teaching XHTML to beginners, if anyone is interested it's at: 
I have seen all this, agreeing with the sentiments here and by the greatest of good fortune I have been appointed Lecturer in Computing at the University of Central England in Birmingham. 
I start officially on Wednesday, 1st January. 
One of my remits it to teach a course on Internet Technologies. 
So it's been a busy Christmas preparing for a complete change in career direction, having spent the last 30 years in industry 
Nigel's tutorial is interesting, and part of the way I plan to go. 
However 
my plan is probably more radical (I am after all teaching people who are getting a degree and will probably have some web page writing experience). 
My plan is to start off with a basic format of a page with "Hello World" as a header or like of text and then develop it no more - but then attach a style sheet and then alter the appearance of the page using the style sheet. 
I'll also introduce the difference between bold and strong tags with reference to speech browsers as well as visual. 
All this is in XHTML 1.1. 
So the initial development is not so much XHTML as the presentation of information across the web to a variety of internet devices. 
Only after the concept of separating content and presentation is fully understood will we elaborate on XHTML and develop CSS along with it. 
Later on we'll have to consider retrofitting table and frame based HTML pages, but I haven't got there yet. 
Neither have I got to the stage of server side PHP, JSP and Client side Javascript. 
But the core concept is a parallel development of XHTML and CSS skills with the goal that web pages presented to any browsing device, standard or using adaptive technologies, is both standard and accessible. 
Initially the coding will be performed using a text editor - the organisation's Windows only at the moment but I've already had discussions about Linux and deploying it more widely. 
- but the one and only tool I've been able to feel comfortable with is TopStyle Pro (http://www.bradsoft.com) 
and although I've been trying to get to grips with Arachnophilia (http://www.arachnoid.com/arachnophilia/) 
I haven't yet been satisfied that I can convert it all into XHTML 1.1 compliant mode without a load of work (where'd all the time go!?). 
Although it's free 
doesn't seem to be approaching the code from the 'right' way IMHO. 
Dreamweaver is a great tool, but a no-no because of cost. 
I'm going to get them to process graphics with the GIMP. 
I'd appreciate anyone's views on this and your opinion of this type of approach, both for learning style and toolsets, bearing in mind that this is classroom teaching by lecture and workshop (it may expand later into print and web media) and is intended to be part of a degree course. 
Regards John John Colby john.colby@uce.ac.uk (active early January) Lecturer in Computing, University of Central England, Franchise Street Perry Barr, Birmingham B42 2SU phone +44 (0)121 331 5000 john@colbyweb.co.uk 4 Ambion Rise, Market Bosworth, Nuneaton, Warwickshire, CV13 0NY Phone +44 (0) 1455 290271, mobile 0771 114 1621 website 
Following on from what everyone else has said, I work with someone who started learning web design at an evening class at a local college. 
After a couple of weeks, she came up and asked me why I wasn't using FrontPage. 
I despair - this isn't web design, it's "lets see what prettiness I can make with a WYSIWYG editor" (or to use a great phrase stolen from someone WYGIWYD (What You Get Is What You Deserve)). 
The people running these courses are really damaging the web! 
I think I'm going to have to spend some time explaining exactly what web design is, rather than what colleges and other such places promote ot as to get bums on seats and money in the bank. 
It really irritates me. 
I get called a geek by my intranet manager at work - this coming from the 
man who won't use CSS and uses FrontPage for "ease". 
I have to say that I'm looking forward to getting my hands on XHTML2.0 but I share the fear of others that as it isn't designed to be backwards compatible, it may well put people off. 
Also, considering the hacks that we have to use if we want a page to be viewable in numerous browsers, it's going to be a while until we get decent browser support. 
Have a good new year Francis 
To make any progress, we have to at least identify the primary obstacle: Are you irritated by the fact that FrontPage is easier to use (for most humans) than writing raw markup? 
Are you irritated by the fact that Microsoft owns FrontPage? 
Are you irritated by the fact that 
other WYSIWYG tools are not as popular/known as FrontPage? 
Are you irritated by CSS properties that make writing raw CSS/HTML markup difficult and generated markup ugly? 
Are you irritated by browsers that tolerate invalid markup? 
Other? 
In other words, what should be the first priority: changing human nature, changing Microsoft, changing W3C marketing, changing CSS/HTML, or changing browsers? 
Simply declaring that "valid markup is better than invalid one" and "new XHTML is better than old HTML" or even "hand-written markup is better than generated markup" is not going to change much, IMHO. 
This is an "evangelist@w3" mailing list; does evangelism imply pro-active action or just stating personal preferences? 
Alex. 
HTTP performance - Web Polygraph benchmark 
www.measurement-factory.com | HTTP compliance+ - Co-Advisor test suite 
all of the above - PolyBox appliance 
The problem is making people care about doing something the /right/ way. 
Someone learning how to make web pages can sit down and relatively 
quickly get the results they want without any regard to proper structural based web design (font tags, etc). 
It's hard to explain to them why doing this is wrong, especially since "everyone else seems to do it this way". 
You can talk about right and wrong, and accessibility, browser and platform neutrality, but the problem is most people /do/ /not/ /care/. 
Students glaze over. 
They especially don't care when doing it the right way is vastly more difficult that doing it the wrong way (table based layout for example). 
Even if it was easy, they still wouldn't care. 
And for the most part they don't want to understand why they should care, they just want their page to be cool and work - which they can get with little effort. 
So, in answer to your question: Human Nature. 
Chris Hubick 
First of all, I suspect there is no /right/ way to do it, and even if 
there is, we do not know it. 
But let's imagine for a moment that we 
know the right way to do Web design. 
Why do people not care? 
Is it because, by their nature, people prefer "easier" solutions? 
Is it 
because Microsoft made people not care? 
Is it because W3C marketing is 
not effective enough? 
Is it because modern CSS/HTML makes people to stay away from what is right? 
Or do browsers make people do wrong things? 
It is unlikely that you can make people care if you do not know what causes them not to. 
True. 
Two conclusions can be derived from your observation: - either "proper structural based web design" is not "right" for humans (so we need to change humans or change our notion of what is right) - or the environment where people learn encourages "wrong" behavior (so we need to change the environment) What we do next depends on which of the above three primary obstacles we want to change (humans, the notion of "right", or the environment). 
If you are right, then we are obviously wasting our time here. 
I do not think it is reasonable to expect that we can change our own Nature (except for, perhaps, destroying it). 
In my opinion it is not Human Nature. 
It is our notion of "right" and/or the environment that we have created. 
It is not clear to me whether perfect structural markup is the "right" thing for humans to use. 
Humans are not computers. 
You say that "most people do not care" and, hence, "create wrong markup". 
I say that the environment they create in forces them to create wrong markup. 
A student does not care whether the design/markup is structural-based or table-based. 
Thus, a priory, student does not favor one over the other! 
The environment should force that student to favor the "right" approach. 
Changing environment is possible, and the first step would be to identify what makes the current environment bad (again, is it the editors, the markup itself, the browsers, etc.?) 
Alex. 
HTTP performance - Web Polygraph benchmark 
www.measurement-factory.com | HTTP compliance+ - Co-Advisor test suite 
all of the above - PolyBox appliance 
The web was invented to separate structure and presentation, doing so is "right". 
My outlook on humanity is fundamentally cynical in nature. 
I would say mainly, yes, to the "easier solutions" being the major culprit. 
As I said...people can easily get a web page which /appears/ to work for them and (or 95% of) their users without having to learn much. 
Is it because W3C marketing is not effective enough? 
In part, possibly. 
The designers I know don't take accessibility and browser neutrality to heart. 
We need more Mac and Linux desktops, more WebTV's, more Mozilla browsers deployed, millions of handhelds with wireless web access, and every web designer needs a deaf or blind person as their boss. 
These issues aren't "real" enough to most of them. 
They think if the page works on their 15" monitor running Internet Explorer then all is well. 
I think the browsers strict handling of XHTML will probably mean that it will be extremely difficult to catch on. 
I think if we would have started out with this behavior 10 years ago, we might all be using gopher or something today. 
The reason the web is so successfull is because of the low barrier to entry. 
I think there is also a very high elasticity of difficulty. 
That is, make it a /little/ harder and you will drop a /lot/ of web authors. 
I think XHTML 2 will be the first markup language which will even make it possible to realize the full ideals of the web while still creating complex and attractive sites. 
We still litter around our structure with the use a lot of presentational oriented div's and span's today, which we arguable shouldn't. 
The richer semantics of XHTML 2, such as sections, might make that possible. 
I think it is the environment. 
I think web authors need to be directly exposed to the vast array of user agents out there. 
They need to be shown their sites on everything from PC's, Macs, Unix boxes, PDA's, Braille terminals, voice browsers, etc, etc, etc. 
And I think they need better examples. 
I think Wired's redesign is in the right direction (but still far from ideal). 
We need more good examples of real and attractive sites which can display on any device. 
You have to draw the line somewhere. 
I personally find using and HTML editor (which hides the details) /more/ difficult that doing it by hand with the spec handy, when creating a complex page. 
Are a plethora of icons easier to learn than / ? 
People seem to fundamentally rebel against learning anything non-trivial. 
I don't think the problem is any of these things though. 
I think the problem is expectations. 
People expect to be able to have control over things like fonts and sizes, positioning, etc. 
They miss out on the fundamental fact that they web is TRYING TO TAKE THAT CONTROL AWAY, and they fight against it from start to finish. 
Traditional media thinking, rather than web thinking. 
Even people doing their first design in any medium have trouble really grokking these concepts - or they give up and forget about them when it get's down to the dirty details. 
The web is a new paradigm medium filled with old paradigm thinking. 
Chris Hubick 
IIRC, the Web was invented to ease information sharing in the first place. 
The structure versus presentation separation came in later and is secondary. 
Moreover, regardless of the original design goals, the question is whether humans should be tought to write better markup OR whether computers should be built to generate better markup (based on inputs from a human-oriented interface). 
OK. It is technically trivial to show users how their pages look/sound in all non-IE browsers. 
I am sure W3C can make that kind of service. 
Of course, it would make no difference until there are enough ``non-IE'' users out there! 
So do we wait until there are more non-IE users around, then? 
Or is it possible to build tools that generate markup that works OK for non-IE users based on a naive non-markup [FrontPage] user input? 
In other words, who is responsible for content-versus-structure separation and other good-design principles? 
Is it a grandma posting a picture of a flower on the Web? 
Or is it the software that helps the grandma to post that picture? 
If the medium is so powerful, flexible, and complex, should not it be the computer job to cross-compile user input so that it works well in many environments? 
Are we expecting the majority of Web designers to program in and be excited about a Web-equivalent of an assembly language? 
Should we try to learn from past mistakes and migrate to something more human-oriented like a Web-equivalent of C++ or Java, leaving assembly stage to the computer? 
Alex. 
HTTP performance - Web Polygraph benchmark 
www.measurement-factory.com | HTTP compliance+ - Co-Advisor test suite 
all of the above - PolyBox appliance 
* Specification case I think that at least it's possible to improve what we have right now. 
It's not really the HTML mistake. 
Responsibility belongs to the specification when it's hard to implement or ambiguous. 
When you don't have enough test cases, when the clarity of the spec is not obvious, etc. (Clarity of the spec is useful for teachers who teach to future engineers, etc.) But let's talk about tools. 
* Visual layout and structure. 
Users (Content editors) want something to use. 
When you read a magazine, a book, etc. 
You guess the structure from the visual layout of the document. 
When you write a letter, a class, a report in a meeting or a mail, you do a kind of visual presentation to explain the structure, exactly as I did in this email (and there's no precise guide to visually present email :) ) So people are used to guess the structure of a document from the visual presentation and not from the structure itself. 
It's even sublter than that because they do not really analyze there's a structure, but their brain recognize that this is the title of the book, because it's the big think with large letters in the middle of the book at the first page. 
But they do not verbally say "Hey, that's the title". 
It's more on the Pavlov side. 
* Editing tools for Structure To create an editing tool, we have to try to mock-up in part the way the human will act or think and to try to produce the right content behind. 
Let's take a short look at what already exists in this kind of structural editing tools that COULD work but doesn't really now. 
- Word (mode Plan) There's a way to structure your document in a very structured way in Word. 
Unfortunately, most of the people do not use it at all, or use it correctly. 
If you use it correctly, you can apply styles to your documents and have automatic generation of Table of Contents, list of tables and images, etc. 
It's not as powerful as LaTeX, but it's very close. 
- QuarkXPress That's quite the same you have in this tool a lot of possibility to apply a structure to a document and apply particular style rules to the whole document. 
Most of the newspapers, magazines, annual reports, etc. are (were) done with this tool. 
Unfortunately, there are only a few people who uses it correctly. 
- Outliners these tools are very structured by their nature and you could think that there's a solution here. 
And there's one, except that the user interface is missing. 
An interface that will help the edition. 
All these tools miss something, human nature? 
or bad user interface metaphor? 
* Content first! 
People do not really care about the structure of the mark-up except if they really have a benefit for using it. 
You will only modify the habits of people, only they can improve what they write, make it faster or fun. 
They have to enjoy the cost of doing the right way. 
I think HTML 4.01 is a language which is strongly semantics already, but that we have difficulty to understand the semantics, because there's more than one way to do it. 
What's missing to the HTML 4.01 specification is a DETAILED semantic guide for using the tags. 
I hope we will have that for XHTML 2.0 and I encourage people on this list to review the specs and propose strong request for that. 
Imagine XHTML 2.0 on the user side but with a Semantics magnifier. 
So don't write Code, but write content. 
* Editing Tools How to achieve this semantic mark-up without annoying the users? 
It will be a kind of Christmas wish list. 
1. 
I DO NOT want an editor which says "add a strong", "add a blockquote", etc... 2. I DO NOT want an editor which says "make it bold", "indent your text on the right" 3. I want an editor where I can write plain text. 
4. I want a logical editor When I want to add a title to my document like it doesn't have a possibility of styling the document for example with an element "strong" or with a font face thingy. 
I want "add a title" and when I do that, it put a h1 element at the top of the page, but I don't even know that's an h1. 
If I want I can precise the style of the h1, and it will create a css with the style chosen and that will define the style for h1 { ... } In the menu, I can have "add a section", "add a citation", etc... 
For example, When I add a citation, I will have a pop-up window in my browser and will have the possibility to give the text and URIs and depending on the context it will add a q or a blockquote, with the cite at the right place. 
The problems with the HTML 4.01 Specification is the precise use of the markup is not enough explain to make the implementer's life easy. 
For example, we can say I want to insert a piece of code in my webpage. 
What the developper must implement? 
while (1) : print "Hello World"; or while (1) : print "Hello World"; or .... etc. * Any hopes? 
We have to improve the specifications for sure, we have to improve the software, we will not be able to change the human nature (except if HTML is teached in the right way in schools). 
I'm still waiting for the Semantics HTML book too. 
I have discussed already about that with Molly Hoszchlag. 
There are no books which gives the semantic view of a spec and explain how to use the semantic of the language. 
More of the books, repeat what the specs say will more context, and more examples. 
A Semantics book is still to write... ahhh... If I had more time. 
Karl Dubost / W3C - Conformance Manager --- Be Strict To Be Cool! --- 
For example, When I add a citation, I will have a pop-up window in my browser and will have the possibility to give the text and URIs and depending on the context it will add a q or a blockquote, with the cite at the right place. 
The problems with the HTML 4.01 Specification is the precise use of the markup is not enough explain to make the implementer's life easy. 
Dreamweaver MX sort of does this if you have all the Accessibility options turned on - it'll prompt for alt + longdesc attributes for an img element, caption, summary and headings for table elements etc. 
What would make it easier would be some kind of basic WYSIWYG CSS editor. 
For example you select "page heading" (meaning h1 ) then select from a list of fonts, font weights + styles, background colors etc. 
This would then update the css attached to a page. 
The actual X/HTML editor could run with a series of prebuilt templates (a la Microsoft's "Wizards") that could generate 2, 3 column layouts, etc etc along with user prompts for things such as q blockquote , address , caption etc etc. 
If it came with a good set of documentation so that new users could be "puppy walked" through exactly why, for example, a 3 column floated layout might or might be a good idea, and how it works (and what exactly "float" is!) in plain, easy to userstand language, this might get people more interested in the code side of it. 
Add into this something like TopStyle's excellent "this won't work in Netscape 4, Opera and IE5" thing that it has for CSS and a validator, it would be quite a nice tool. 
And, if the editors generated good code, it might not scare the pants off anyone looking at X/HTML for the first time. 
We have to improve the specifications for sure, we have to improve the software, we will not be able to change the human nature (except if HTML is teached in the right way in schools). 
If the specs were easier to understand for the "non-geek" and were promoted as "the right way to go" we might see more people using standards. 
There are more and more articles and books coming out about accessibility and standards, and maybe if the W3C really promoted the "accessible to more users", "easier to update mass content with CSS" angles, amongst other things, (yes I know that they do, but how much of that is preaching to the converted - people who actually use and read W3C.org all the time) people might start to be more interested in the workings of a page rather than just presentation. 
Have a good new year. 
Francis 
I think the point is that no one should have to look at the HTML or really understand what CSS is :) It's the content that matters, not how it's done. 
But a tool like this which may aid designers in the creation of Web templates would be nice. 
Does anyone here know of any software developers (or would can collate a team together) to make such a tool a reality? 
The W3C specs were never really geared for the general Web development/ design audience - I presume the target audience of the specs is for those who actually implements Web software, be it user-agents or editors. 
IMHO, it's not enough to just say the W3C should really promote this or that - they are comparable to a standards body - lately, when I describe the kind of standards evanglism I am involved in to non-Web people, I mention a similarity to the ISO. 
Don't you think it is really up to us, designers and developers who have been converted, to preach to our colleagues and educate the next generation of developers? 
I wish all a fabulous new year. 
:) cheers, -steph 
Yes, yes, and once again, yes! 
This is the only way that standards will get known about - by talking about them. 
Peer example, peer education, peer pressure if you like - to get more and more people talking about standards and the reasons why they a great advantage. 
I got into standards because I was (and still am) lazy - I was looking for ways of writing pages once for all browsers and browsing devices rather than writing exceptions and exclusions. 
This is why the standards route was attractive to me, and then I started learning about problems with accessibility as I learned more about people's use of the web. 
And now standards seem so attractive rather than any non-standard route, not as an end in themselves but because I can continue to be lazy and code once for all users. 
As an aside, I wonder if IE7 will be less buggy with regards to stylesheet compliance? 
If there ever is going to be an IE7, that is. 
Regards John 
