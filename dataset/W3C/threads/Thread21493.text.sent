[ccing www-archive] I just came across your "REST, RPC, mountains, molehills, and a retraction (sort of)" [1] and I *love* the unix/plan9 "everything is a file" association. 
It makes soooo much sense (to this old unix hacker, at least, but I suspect I'm not the only one.) Has this been talked about much elsewhere? 
So GET == get the contents of the file PUT == replace the contents of the file DELETE == remove the file POST == ? 
TimBL tells me that POST was originally meant to be "create"; you'd POST to one resource to create a nearby, related resource. 
But I've never seen it used directly that way -- it's used more like ioclt, like "talk to the man/kernel/server behind the curtain," breaking the system's simplicity of interface. 
How does it seem to generally be viewed by REST folks...? I've also had trouble with the use of the word "resource" to mean things-themselves (like cars and dogs) instead of files. 
But I think I've got it: in an OOP system, each object is stored in some bunch of memory (contiguously in C/C++, probably spread out in perl/python). 
The thing itself (my dog Taiko) is represented in the computer by some OOP "object" at address 0x00f754c0; if we want to talk on the web about him, I also give him a URI (http://hawke.org/taiko) and a GET of that address will fetch some marshalled form of the data at 0x00f754c0. 
Does that all sound about right? 
(I do have a problem with this glossing over the difference between things and files about the things, which is that files often contain data on many things and things are often mentioned in many files -- but in good OOP, that's not supposed to happen.) (the light dawns outside my window, and in my brain....) -- sandro [1] http://www.xent.com/pipermail/fork/2001-August/002801.html 
Probably not by anybody else. 
;-) There doesn't seem to be much overlap between the OS and Web communities... when I pointed the plan9 / UNIX philosophy ~ REST similarity to Fielding, he seemed to think it was a pretty good analogy. 
It's rather sloppy and inexact, but this is how I sort of think of things: GET: someprog  foo PUT: somestuff  foo DELETE: rm foo POST: somestuff   foo Ioctl tends to be rather controversial... Roy, for example, uses ioctl as an example of how REST differs from / is more constrained than typical UNIXy network filesystems. 
(Plan 9 doesn't have ioctl, btw... it accomplishes the same thing, if necessary, by operations on associated control files. 
A very RESTful and resource-like way to do things.) Sounds about right. 
There are perennial debates even within TAG on whether URI must refer to the abstract thing in the computer or to Taiko himself; my opinion, and certain other people's, too, is that the URI can refer to anything at all, including the real-world object. 
The implication is that URI do not necessarily have to support being dereferenced. 
(Think about XML: we can use URI to refer to schemas, but the URI that refers to a schema cannot necessarily be dereferenced to obtain a representation of the schema.) Cool! 
Good luck, jb I've always said: GET: cat foo (or if CGI: ./foo 
--arg1=val1 --arg2=val2 ...) PUT: cat  foo DELETE: rm foo POST: cat | foo Writing an implementation of a generic foo is on my todo list: Aaron Swartz [http://www.aaronsw.com] 
If I squint and wave my hands, that works, but looking more closely this approach constrains foo to be both end-user content and system-executable content. 
I think we need to change POST to be be more like POST: cat | .post-handler-for-foo or POST: cat  foo.fifo 
That is, POST talks to some process which is associate with foo, but not in so simple a manner as being the foo, itself, running. 
What's more, this approach of talk-to-the-man-behind-the-curtain breaks the very-useful illusion of a space filled with linked documents. 
How should Google index things-you-POST-to? 
They're really very different things from web pages. 
My current theory is that POST is the way to create a new web page, and the data you post is the data for the page. 
Whether the page lasts more than a nanosecond, and whether it every becomes public, are beside the point. 
POSTing is handing a peice of paper to the guy running the bulletin board; he might look at it and throw it away, he might put in in a private section of the board for a while, or he might put it up on the board with everything else. 
The essential points are (1) you hand it to the guy in charge of some particular slip already on the board, and (2) it's a peice of paper like the stuff on the board, but with no actual location on the board yet. 
-- sandro How so? 
Something that accepts POST is considered a CGI in the get case: ./foo 
cat  foo rm foo cat | foo These are all reasonable things to do with system-executable content. 
Aaron Swartz [http://www.aaronsw.com] 
