I brought this whole subject up several months ago. 
Check out URL: The consensus of the group, at that time, was that curly quotes marks were not the domain of the WAI. 
Of course, this was before WCAG! 
Comments inline below.  
is Nir Dagan,   is Jason White 
Does Unicode (or ISO 8859-1 which is what most older user agents support) include distinct opening and closing single quotation marks? 
Unicode has the correct opening and closing quotation marks. 
So people can use them (e.g., with numerical character references). 
ISO-8859-1 doesn't have the marks used in English, but has of other languages. 
Check out URL http://www.pemberley.com/janeinfo/latin1.html which has a nice overview of "Latin 1" characters in 8859-1 and Unicode with a note specifically on "Smart Quotes" (...#unicode). 
Quick answer: 
8859-1 does not support left and right quote marks, but Windows has 
co-opted the non-displayed characters from &amp;#128; (x80) through &amp;#159; 
(x9F) for its own purposes, and these include typographical quote marks and 
several other characters that Mac/PC users have taken for granted for years (dagger, emdash, (tm), etc.). 
Unicode supports smart quotes (and much more), but the 3x versions of MS IE and 4x (!) version of Netscape Navigator do not display them. 
The same is 
true for the named entities (&amp;ldquo; ... &amp;rdquo;) and for Q ... /Q (which actually even have LESS support). 
The most cross-platform-compatible way to get proper quote mark is with &amp;#147; and &amp;148; -- works on Mac and PC and with ALL browsers (and all 
versions) that I have tested. 
You can point your browser to URL 
the W3C validator DOES approve the use of &amp;#147; and the like. 
I would love to hear from someone to tell me if &amp;#147; ... &amp;#148; works with Un*x browsers. 
I would love to hear from Braille users to tell me if &amp;#147; ... &amp;#148; translates properly. 
I would also like to know how it is that Un*x users functioned for all these years without these common typographical characters! 
I think that the checkpoint should be split into "do not use BLOCKQUOTE for formatting" and "use Q for short quotations" (sorry for using neutral quots) 
I agree with that! 
I think that everybody agrees on the first. 
Boy, I hope so! 
Concerning the second, Using Q is better than hard coding the quot characters because 1. 
It is more informative (machine understandable) 2. More flexible rendering. 
May be affected by user's stylesheet. 
3. Author doesn't have to bother in matching the quots, or choosing the correct ones when nesting (less room for errors). 
People who insist on backward compatibility will probably insist on using neutral quots, as both Q and Unicode character references are not supported in some browsers. 
I disagree, since Q ... /Q is not rendered properly by the CURRENT (major market) browsers and WILL NEVER be rendered properly by the older versions that will be in use for a few years yet! 
This, IMHO, far out weights your (quite legitimate) points 1, 2, and 3. is compatible, but it is just too ugly to tolerate. 
As Jason points out, it is also carries less information. 
For some populations, this is not merely a matter of aesthetics. 
I intend to keep using &amp;#147; ... &amp;#148; for a while -- at least until I get some tool that will let me do a global search and replace on my site (yes, they exist now, but I only do this part time). 
By then, I hope to be managing my site with a proper (i.e., generates accessible HTML) tool rather than one-page-at-a-time (as it is now). 
Does anyone have a suggestion as to how this issue can best be resolved? 
This is the only work around that I can think of that does not either loose the quote marks for the current GUI browsers or result in double-double-quotes marks with better (Lynx) and future (5x?) versions of the "big name" browsers. 
1) Use a style sheet to render Q ... /Q as fancy *single* quote marks. 
(Can one do this?) 2) Use code like this: &amp;#145; Q short quotation /Q &amp;#146; This is machine readable, displays fine with HTML 4.0 compliant browsers, and okay (Gee, why is this author using only single quote marks?) in current browsers. 
I have not tried this, and don't intend to. 
(smile) Charles McCN's suggestion to use a style sheet to have text inside a Q render in italics (or whatever) is a good one, but that leaves me with a couple of questions. 
Do style sheets for unsupported elements get applied by the current crop of browsers? 
If not, and for older browsers in any case, does one still surround short quotes with &amp;#147; ... &amp;#148; ? 
If not, I think the best solution would be to leave the requirement in checkpoint 3.7 as is. 
I also agree with this. 
&amp;#147; and &amp;#148; do not exist in HTML. 
Using them is invalid HTML. 
If there is a validator that accepts them, send a bug report to its maintainer (with a sample URL that replicates the bug). 
Numerical references refer to positions in "the document character set" i.e., Unicode. 
The above mentioned positions are not assigned. 
It is possible to encode right and left quots with single octets in positions 147 and 148 if your document is encoded with windows-1252, for example. 
It seems that someone (including browsers...) is confusing "character set" with "character encoding". 
See http://ppewww.ph.gla.ac.uk/~flavell/charset/quick.html for an introduction on the subject. 
Regards, Nir Dagan "There is nothing quite so practical as a good theory." -- A. Einstein 
Does Unicode (or ISO 8859-1 which is what most older user agents support) include distinct opening and closing single quotation marks? 
Unicode has the correct opening and closing quotation marks. 
So people can use them (e.g., with numerical character references). 
ISO-8859-1 doesn't have the marks used in English, but has of other languages. 
I think that the checkpoint should be split into "do not use BLOCKQUOTE for formatting" and "use Q for short quotations" (sorry for using neutral quots) 
I think that everybody agrees on the first. 
Concerning the second, Using Q is better than hard coding the quot characters because 1. 
It is more informative (machine understandable) 2. More flexible rendering. 
May be affected by user's stylesheet. 
3. Author doesn't have to bother in matching the quots, or choosing the correct ones when nesting (less room for errors). 
People who insist on backward compatibility will probably insist on using neutral quots, as both Q and Unicode character references are not supported in some browsers. 
Does anyone have a suggestion as to how this issue can best be resolved? 
If not, I think the best solution would be to leave the requirement in checkpoint 3.7 as is. 
This is surely common knowledge. 
These character correspond to unicode code points which are located (well) above 255 in the HTML Document Character Set. 
These notations are explicitly undefined in HTML. 
Please do not confuse the argument even further by using these undefined notations in your presentation: the discussion is hard enough, without having to deal with this kind of problem too. 
These character code values would be technically legal as 8-bit coded characters in a datastream whose coding had been correctly announced with an appropriate charset value (one of those charset values registered at the IANA repository). 
However, there is no requirement for client agents to accept any arbitrary coding that the server may offer. 
Best results would be achieved by using one of the internationally standardised codings, rather than a vendor-defined one. 
Be that as it may... 
It isn't really true that NN 4.* versions cannot display them, though it may be that some readers don't have their NS4.* properly set up. 
If I display this page for instance on Win NS4.* with the Unicode font configured to be e.g Verdana (I'm downgrading it from my usual Cyberbit unicode font for the purpose of this discussion) then I see a good repertoire of quotation marks from U+2018 to U+201E, as well as your daggers at U+2020 and U+2021. 
The TM is also in its proper place (on the next page, of course). 
I believe that the lack of support for Q was already appreciated by the participants in this discussion, and is a matter of some concern, despite the strong attractions of this construct in accessibility terms. 
Well, I'm sorry, but as far as I'm concerned, these constructs are undefined in HTML, and I assure you that it does NOT work with "all" browsers. 
There is a correct way of representing these characters in HTML, and nothing seems to be gained at this point in trying to reverse the progress of HTML in order to pander to the ad hoc behaviour of some older browser versions. 
This is a subtle technical issue, but these constructs are not syntactically invalid (and therefore could not be rejected by a formal validator): their meaning, however, is not defined by the HTML specification. 
The HTML document character set is defined to be iso-10646/Unicode, and these positions of the document character set are reserved for control functions, not populated with displayable characters. 
With standard fonts, the characters disappear entirely, for reasons that should be obvious (and are trenchantly documented in the writeup for the "demoroniser" tool). 
You could make it work if you visit every unix user and force them to install non-standard unix fonts. 
This was unfortunate. 
There are some very real problems to be discussed and tackled, but I feel the my response here has done nothing to move matters forward, but has merely made an effort to regain some of the ground that was just lost. 
best regards 
