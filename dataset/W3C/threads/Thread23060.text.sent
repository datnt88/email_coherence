The current L/S draft appears close but insufficient to invoke SOAP or WebDAV methods. 
I think it would be very beneficial if it could. 
I believe two additional parameters to parseURI could be sufficient: Document parseURI(DOMString uri, DOMString method, Document body) Where method and body could be null. 
The LS is short at providing an IO library. 
No HTTP headers, authentification, etc. 
You cannot access the HTTP headers of the received document either. 
If we add your proposal, why should we stop half-way? 
You can always use an external library to manipulate those and give an input stream to the DOMBuilder. 
However, we did include for SOAP 1.2 the following parameter for the configuration of the DOMBuilder: "disallow-doctype" true [optional] Throw a fatal error if a doctype node is found while parsing the document. 
This may be useful when dealing with things like SOAP envelopes where doctype nodes are not allowed. 
false [required] (default) Allow doctype nodes in the document. 
Philippe to invoke SOAP or if it could. 
I be sufficient: Document body) The LS is short at providing an IO library. 
No HTTP headers, authentification, etc. 
You cannot access the HTTP headers of the received document either. 
If we add your proposal, why should we stop half-way? 
You can always use an external library to manipulate those and give an input stream to the DOMBuilder. 
Supporting SOAP may be too ambitious and nothing I write that late at night should be considered a proposal. 
Since parseURI is already deployed, modifying its signature is undesirable. 
However, I don't see any obvious way to actually use the Save part of Load/Save within a browser without resorting to some browser-specific mechanism to get a DOMOutputStream. 
Having some standard way of doing a simple HTTP PUT or POST would seem to open up a lot of possibilities for client-side editing of data. 
Do you Yahoo!? Yahoo! 
Calendar - Free online calendar with sync to Outlook(TM). 
