PS. So here is the formal proposal we make to WEBONT. 
We say that 1. Whereas WEBONT needs to encode complex syntactic structures in RDF triples, and requires some structuring primitives to enable it to do that;   and 2. Whereas the current RDF container model is apparently inadequate for this task, by virtue of the there being no way to mark the end of a container or specify an exact size for the container; and well, I now think there is no problem... at least not in the case that the container is a bNode in one document one can add as many elements as one wants but another document can never add to that bNode (that's why we have bNodes and relabeling) so the end is *within* the document No??? also an empty container is just _:x rdf:type rdf:Seq . 
3. By virtue of the fact that to provide such a facility in RDF would be a major change to the RDF language and data model, effectively introducing a form of negation into the language, Owwwwwwwwww! 
I thought I asked you about that before. 
Obviously I didn't understand the reply. 
OK another strong technical reason about where it should be spec'd. 
and would therefore be an unacceptable burden to the RDF core WG; THEREFORE 4. The RDF core WG respectfully suggests to the WEBONT WG that it adopt the following CONVENTION: that for purposes of WEBONT, a particular individual be chosen to be the end-of-syntactic-container entity, by analogy with NIL in LISP; and that for WEBONT purposes, any RDF container used for syntactic encoding of WEBONT expressions (or for whatever other purposes that WEBONT shall, in its total discretion, decree to be of utility to itself) shall be understood to contain only those elements which are lower, in the RDF ordering defined by the numerical indices of the RDF container properties, than the index of the lowest-numbered occurrence of said particular individual. 
Just out of curiosity, have you been talking to lawyers a lot recently :) strange, isn't it? 
The situation is that we've got a little subgroup of RDF and WEBONT folks tasked with proposing a solution to this (I believe, DanC, Jos, possibly Lynn, possibly another). 
It would nice if that group were to make the proposal. 
I think at this stage, we have had a discussion within RDFCore about it, Jos being present, and we are making an informal suggestion to the group at this time about how this could be accomplished. 
More a sort of "Well, could you do it this way guys." 
It would be good to get it sorted out quickly though, so some progress at the webont f2f would be good. 
will do our best Jos PS rdf:Seq and rdf:li are a kind of iterative notation whereas owl:first, owl:rest and owl:nil are recursive and I still think the latter is a better way to deal with lists, at least that's what I found in in which o is syntactic sugar for o V V ( :a ) _:x owl:first :a . 
_:x owl:rest owl:nil . 
( :a :b ) _:x owl:first :a . 
_:x owl:rest _:y . 
_:y owl:first :b . 
_:y owl:rest owl:nil . 
( :a / :b) _:x owl:first :a . 
_:x owl:rest :b . 
( ) _:x owl:rest owl:nil . 
I've been catching up on the daml:collection discussion. 
Thank you DanC for I don't follow the reasons for: [[* add a 'highest index' property to bags: it tells you the highest index that's used to relate a collection to one of its members. 
This is only slightly better than a "count" property, to my mind. 
You reject the count property on the grounds of arithmetic and comparison. 
RDF must already have the concept of equality of properties and ordering of the ordinal properties. 
I don't see that this proposal requires any more than that. 
It seems to me, that if we are closing RDF's current containers, then this is the front running option. 
I'm a wee bit nervous that it introduces something close to negation by the back door though. 
Pat? 
The alternative is that the owl folks use daml collection. 
They can do that without any help from us, just as the daml folks did. 
Daml was quite happy to define daml:collection as an extension to RDF. 
All that is needed is a preprocessor to turn it into legal RDF. 
Such a preprocessor may be built into an RDF parser, but that is an implementation matter. 
Between these two choices, should we ask the customer which they prefer? 
Brian I'm working out the details... cwm seems to cooperate when there are two continents but not when there are six... 
I hope to get back to you shortly... Yes, any form of closed list involves negation. 
The whole point of a closed list is to be able to conclude that something is *not* in it. 
But I don't think we can condone it. 
i.e. we can't say "no, that file isn't RDF, but you're free to put rdf:RDF at the top of it." 
It's sorta like the XSLT-template-in-HTML-document's-clothing situation that has come up in the TAG. 
For the sake of a coherent architecture, it's important that each document's meaning as a formula is clear, and doesn't depend on whether you use an RDF parser or a WebOnt parser. 
Hmm... 
I'm not sure how to make this point clearly... No, it's an interoperability nightmare. 
Not if you want my support. 
The latter is unacceptable; I'd object. 
The former is ugly; I'd abstain. 
Dan Connolly, W3C http://www.w3.org/People/Connolly/ 
