Al, Assuming that I wish to separate the timing in my TT-AF document from the content by using references within the timing 'tree' a la Daisy model - and assuming that this might be possible! 
- would it then possible to apply style through the timing tree rather than by inline markup or attribute within the text content. 
If you are happy to use a SMIL wrapper to sequence and time the presentation, you can use the digital talking book specification and you don't need TT-AF which will be a more lightweight specification for marking the timing in the file with the text content, IIRC. 
Hmmm... 
Not sure about using SMIL I'm unconvinced that it's a good fit with what I would use TT-AF for. 
For one thing the timing model in SMIL doesn't suit external timing - the synchronisation model is primarily internal (if you get what I mean). 
Happier to use limited SMIL semantics though..... why re-invent tag names :-) I will read the DTB spec again - it's close to what I want to do... but a bit of a tangent from my requirements IIRC. 
Secondly, the best practice is not to apply the style inline in the timing script, but it would be natural to associate a stylesheet cascade with each channel or display region. 
But you still want to put a well-articulated display-mode-independent basis for the styling in the markup of the text itself. 
I certainly agree that referencing external stylesheets is preferable, but what I don't want is to put the reference to the style in the content. 
The reason I don't want to do this is because the style desired for the content will need to vary depending upon which of multiple timelines is being played. 
The timelines are in effect the description of how the content is presented temporally for a specific display. 
Specific displays have limitations that prevent the adequate representation of certain styles, limitations on line lengths and line breaking etc. 
I'm also not really angling after the issue of user defined style sheets - I don't think that is particularly relevant in an **authoring format**. 
Why does the text have hard line breaks? 
Typical cases are lists and poems. 
The line breaks were in the example I snipped from a GA post and were not intended to imply any behaviour other than differentiating the two pieces of text. 
Please ignore them and just consider it as 'text line one' and 'second line of text' CSS provides facilities to apply styles by ID-keyed selctors but this is should be avoided. 
Why? 
Then encode the basis for the styling decisions in [elements and attributes in] the content markup, and key the result to the encoded basis by the selector in your separate style rule. 
This will give you a rule you can lift and reuse. 
But content markup is messy - content and style are two faces of the (three sided :-) TT coin. 
It's not always appropriate to have style inside content - not if you want to reuse the content in different contexts. 
It's a triumvarate Style + Content + Timing. 
Ideally none should be intermixed with the other. 
Note: Ive spooled the temporal flow off into a separate response to Glenns recent post.... regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
Glenn, further - might it be possible to replace the style attribute above with a reference to an element (or portion of a style sheet) that defines the style (to avoid multiple large style attribute definitions)? 
E.g. [JB ] Snip my crude example This could be accomplished by declaring the animation elements separately, and then referring to them for reuse. 
This would essentially be syntactic sugar, but I would guess useful, at least in terms of saving typing and DOM footprint, e.g., the above example might be expressed as: [JB ] This is exactly what I was thinking of! 
I need to go away and investigate how you get this to work, i.e. what the DTD / XSD would look like. 
One final wrinkle: what would be the impact of: I.e. an attempt to modify the style partway through the sequence. 
What would the 3rd animation be limited to - just that inside the par ? 
regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
Glenn, Thanks for your reply - I perhaps did not make exactly clear what I intended would be the effect of the last animation. 
what would be the impact of: I.e. an attempt to modify the style partway through the sequence. 
What would the 3rd animation be limited to - just that inside the par ? 
GA: There is no problem in principle to this (although you need to select some content with the last cue). 
We can use the additive and accumulate animation attributes to determine combinatorial effects and we can define implicit additive semantics as well. 
See http://www.w3.org/TR/SVG11/animate.html#AdditionAttributes as an example. 
The last cue does not select content because I want the animation to affect the content already selected by the previous two cues. 
What I am thinking of is effects like Karaoke - where the style of displayed text is modified (emphasis, colour change, underlines etc) Karaoke might be achieved by replacing the content with new content over successive intervals..... e.g. 0006 : 10:00:18:19,10:00:19:03, Scooby dooby doo, where are you? 
0007 : 10:00:19:03,10:00:19:16, Scooby dooby doo, where are you? 
0008 : 10:00:19:16,10:00:20:03, Scooby dooby doo, where are you? 
0009 : 10:00:20:03,10:00:20:17, Scooby dooby doo, where are you? 
0010 : 10:00:20:17,10:00:21:00, Scooby dooby doo, where are you? 
0011 : 10:00:21:00,10:00:21:21, Scooby dooby doo, where are you? 
This is a bit repetitive..... and makes it somewhat awkward to edit - tho' I guess a Karaoke aware editor could ameliorate the issue! 
Incidentally at least one fan-subbing format (USF) includes a Karaoke markup. 
- karaoke : The karaoke element is very similar to the text element. 
The main differrence is that you can used the special tag k t="duration_in_ms"/ . 
So in the example below the text "song" has a duration of 400 ms, "cool " has a duration of 300 ms... karaoke k t="100"/ a k t="200"/ very k t="300"/ cool k t="400"/ song /karaoke The sum of all the duration must be equal to the subtitle duration. 
Here 100+200+300+400 = 1000 ms = 1s If temporal flow in TT-AF is possible - then it would be desirable to be able to move a region using a style animation - without 'knowing' the content of the region. 
Consider: you have some text that you are flowing into a region under UA temporal flow - but halfway through the display of the text (and you have only specified an overall start and end point) - you need to move the display region because it is obscuring some important part of the picture. 
Eg. a Magic show - the subtitles are most of the time at the bottom of the screen - magician is talking about something - but halfway through you want to see his hands - so you need to move the subtitle region to the top of the screen - then later it can go back down. 
An example of how style and text are not intrinsically linked. 
(or is it just that style should not include layout :-) regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
Thank you for the thoughtful response. 
There's a lot of agreement, here. 
A few clarifications inline below. 
Assuming that I wish to separate the timing in my TT-AF document from the content by using references within the timing 'tree' a la Daisy model - and assuming that this might be possible! 
- would it then possible to apply style through the timing tree rather than by inline markup or attribute within the text content. 
Absolutely. 
Most of what they have you don't need. 
But most of what you need has a precedent in there somewhere. 
[And some of what they have you may need and not have articulated the need yet.] 
Secondly, the best practice is not to apply the style inline in the timing script, but it would be natural to associate a stylesheet cascade with each channel or display region. 
But you still want to put a well-articulated display-mode-independent basis for the styling in the markup of the text itself. 
Yes. 
This is one of my major points. 
And I don't think that either SMIL or HTML give us a precedent we can 'just use' and meet the needs of the future world where multimodal interaction and device-independent authoring are intrinsic in the web technology. 
string-search for "session 2" in Agenda: W3C Technical Plenary, 5 March 2003 Among the variations in 'delivery context' that are used by people with disabilities there are variations in the pagination/chunking and pull-vs.-push 
balance in the dialog. 
I see this as a re-engineering requirement because the precedent in HTML is for the content document to cite its proper stylesheets, whereas the correct decision flow is that the style policy is decided based on the content and delivery context, jointly. 
The content document should cite the rhetorical ontology used in classifying the content, not the style policy repertory appropriate for presenting the content. 
In tactical terms it could mean that there are pure and adapted forms of the content in the process flow. 
An XSL transform that inserts the style refs appropriate to the delivery context of the moment. 
But it is clear that the content maintenance form is the pure. 
The display and the user enter into the decision as to which timing should be used. 
In the long run we may be able to get the user's need articulated and uploaded for server satisfaction. 
But in the mean time the user may be browsing options and interactively selecting an option that works for them. 
The Device Independence authoring discussions have been good in terms of factoring the enumeration of the _presentation decisions to be made_, the _delivery context factors affecting the decisions_ and the _content factors affecting the decisions_ into three spaces that then get composed in the final analysis. 
Saying that will earn you the undying opposition of the accessibility community. 
[emphasis often cues that subliminally you understand that you have a weak position...] The "authoring format" must accept as a prior and external constraint that it composes well with post-authoring changes in styling decisions. 
Compare with the W3C Recommendation known as User Agent Accessibility Guidelines 1.0 in particular 1.6 User control 4. Ensure user control of rendering Even 'though 80% of the use of the TT-AF may be to drive delivery contexts such as analog TV where the user's entire control over the caption pane is a boolean 'present/absent' control, the format must be architected for a universe of modes of use which include user-directed re-styling of the content which has been captured in the authoring format. 
The decision flow is roughly that the User Agent gives the upper hand initially to the author in setting style decisions, but in the end to the user. 
We talked this through to a mutually-tolerable detente with the SMIL group concerning the 'override' attribute. 
some WAI comments on Device Independence Al Why does the text have hard line breaks? 
Typical cases are lists and CSS provides facilities to apply styles by ID-keyed selctors but this is should be avoided. 
Because it gives zero information for the creator of an alternate style, and because it is a missed opportunity to create a reusable style rule. 
A unique styling is still usually rationalizable based on a unique conjunction of content factors and delivery context factors. 
The problem is that articulating the underlying factors is a knowledge engineering task that takes getting "out of one's box" which in practice takes a second set of eyes -- passing the work by another person. 
That doesn't come free. 
There have to be Enterprise Integration payoffs to make this level of rationality affordable, but in business contexts the EI payoffs are generally lurking in the situation. 
Then encode the basis for the styling decisions in [elements and attributes in] the content markup, and key the result to the encoded basis by the selector in your separate style rule. 
This will give you a rule you can lift and reuse. 
Content modeling is difficult. 
So it may seem messy. 
But the correct factorization into style vs. content includes more in the 'content' than what people will at first recognize as their content. 
The difference can be roughly described as articulating the rhetorical roles of sub-parts of the content. 
It takes some push-back, extra effort, to get the content fully articulated with rhetorical-role properties in place. 
What I am saying should be articulated as _content_ aspects or properties is not the style including indents and fonts. 
But the basis for the style, such as: class="new featured" class use - innovations only, pls. 
Then in the stylesheet one selects the domain of a style rule by articulated content features. 
The point is that where there are variations in the styling, there is an underlying rhetorical shift. 
Get the rhetorical shift and the content model supports multiple adapted views, not just the one that you envisioned. 
If only one presentation is worked through to completion, the factorization into content and style is generally a failure. 
An ideal that breaks down on close examination, but still a direction to try to move in. 
Actually the reality is that there is presentation which if we are lucky is factored reasonably well into some sort of resource base and [one or more] presentation transform[s]. 
Until there are actually multiple views in play and checked in the authoring, it is a fiction anyway. 
Consider the mso practice of using style names as class tokens. 
This is not the accessible practice. 
But timing couples with chunking couples with [in interactive spaces] navigation couples with styling. 
So the schema for the 'content' model has to be iterated on until successful multi-view presentation is reliably achieved. 
What I am talking about are the pre-style content properties that are a sufficient basis to key the selection of appropriate styles in different presentation spaces from a caption window to a voice browser dialog. 
The architecture of the future web, particularly for authoring, is an architecture for authoring the content model that supports extraction in multiple views, a model that is appropriate to multiple delivery contexts. 
WWW2003 DevDay Track6 presentations (all) Al At the BBC f2f we considered adding a 'word' level selector to XPath, so the example might become: p { display : none; color: blue } Scooby dooby doo where are you? 
However what word is defined as (e.g. some sort of regular expression), might be highly language sensitive. 
On another topic in this thread, the notion of fitting a too long caption in a fixed size box, one approach might be some temporal additions to the CSS2 overflow property. 
Sean Hayes European Standards and Strategy Microsoft From: public-tt-request@w3.org [mailto:public-tt-request@w3.org] 
On Behalf Of Johnb@screen.subtitling.com 
Subject: RE: TT and subtitling/captioning - separating timing from style f rom content Glenn, The last cue does not select content because I want the animation to affect the content already selected by the previous two cues. 
GA: this would still require selecting content. 
It would be awkward to have an implicit selection. 
[JB ] I don't have a problem with selecting the content - I can see how implicit slection could cause complications witrh inherited style etc. in your example reproduced below.... p { display : none; color: blue } Can we dispense with the spans, i.e. is there a way that the select can extract from a single element. 
BTW Your spans lost the whitespace - unless there is some assumed mechanism for re-inserting it?. Scooby dooby doo where are you? 
regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
Glenn, The last cue does not select content because I want the animation to affect the content already selected by the previous two cues. 
GA: this would still require selecting content. 
It would be awkward to have an implicit selection. 
[JB ] I don't have a problem with selecting the content - I can see how implicit slection could cause complications witrh inherited style etc. in your example reproduced below.... p { display : none; color: blue } Can we dispense with the spans, i.e. is there a way that the select can extract from a single element. 
BTW Your spans lost the whitespace - unless there is some assumed mechanism for re-inserting it?. Scooby dooby doo where are you? 
regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
Hi Sean, At the BBC f2f we considered adding a 'word' level selector to XPath, so the example might become: I'd forgotten this was talked about at BBC F2F, I suspect that Glenn's suggestion of adopting XPath range notation is more appropriate - if solely from a reuse principle :-). 
However the word selector does have merits (its more obvious what is happening, and it's more concise). 
Is the following correct? 
BTW I don't see a great issue with what a word selector would select - probably only Thai and similar languages where you would need to define what the behaviour was.... (line, character or use-dictionary?) On another topic in this thread, the notion of fitting a too long caption in a fixed size box, one approach might be some temporal additions to the CSS2 overflow property. 
Indeed, I suggested some candidates (see below) :-) Tho' I'm not sure that they should / could bolt in to CSS. Bear in mind that these candidates come from my experience with subtitling/captioning - and pre-suppose that there is a desire for a temporal-flow concept within TT-AF. 
It may be that TT-AF only supports an explicit timing mechanism. 
I would argue that if TT-AF is considered to be valid content within a SMIL 'container' document - where SMIL may define the region for the content.... that some from of temporal flow may be desirable. 
It's synonymous with video in that sense - in that a video clip is actually a series of still images flowed over time. 
SMIL does have some say over what happens if the content doesn't fit the duration - it would be nice if TT-AF was intrinsically able to define its own 'frame-rate'. 
fill-direction - regardless of writing mode - in subtitling/captioning - regions are filled from different directions depending on where they are on the screen. 
E.g a top of screen subtitle will use the uppermost line first - then the second etc... Conversely a bottom of screen subtitle will use the lowest line first - then the bottom two lines etc. 
This is to minimise the intrusion of the subtitle into the central picture area. 
The UA would need a 'hint' in order to decide which direction is appropriate. 
fill-mode - basically the size of content used when filling a region - e.g. all | line | word | fragment. 
region-full-clear - is the region cleared when it fills - or does content shift to make space - and by what extent (none | all | line | word | fragment) add-interval - A desired (target) interval between additions (auto | value) read-interval - The desired (target read-interval) - how long the last content must 'hang' to allow reading. 
tidemark - A subtle wrinkle - you may wish to nominally have just two line subtitles - but allow three liners if the amount of content demands it. 
The tidemark would define when to typically consider a clear down in pop mode - but might be overwritten by the content / time demands. 
Of course these concepts are not just limited to TT-AF for subtitling / captioning - but have application in many other areas.... regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
Glenn, We could dispense with spans in the following example if we supported XPointer's range functionality (e.g., see [1]). 
We wouldn't want to restrict authors from marking up each span if they wish. 
Note that the two mechanisms are semantically equivalent, so this is just an optimization (i.e., to use range). 
JB Indeed retaining the span functionality may be desirable within a subtitling/captioning context since it could be used to represent a unit of capture (e.g. steno input or voice recogniser) - It may be useful to be able to represent captured speech with timing in this way. 
IIRC David Kirby's example was in this form - with each word individually timed. 
The biggest problem with using span is that it is mixing the selection mechanism into the content. 
The range mechanism is preferable to me (even solely on aesthetic grounds) as it completely divorces the selection mechanism from the content. 
As for whitespace, you neglect that there is whitespace between the spans (e.g., newline), which would be normalized by formatter in conjunction with xml:space preservation or default processing semantics. 
In other words, it isn't required to include the whitespace in spans in this example. 
[JB ] Yes - you're right - I did forget the newlines. 
I think for subtitling/captioning you'd want a fairly verbatim transcription of the content of the p element into the displayed region. 
So I'd expect: To produce the output Scooby dooby doo, where are you? 
and To produce the output Scooby dooby doo, where are you? 
Which I assume it would :-) I think I prefer the range selector functionality over a word selector - since it wouldn't stop there - you'd also want a line selector, a character selector... regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
Glenn, I'm not as familiar with what can be achieved wrt line break using just style... To give you an idea of what is required in subtitling / captioning take a look at Section BM__Toc122799347.1. 
Line-breaks I also include below a section (Section 4.10) cut from the Australian Caption Centre's guidelines... 
This is a draft document (acc_ap_b.doc) 
There is a link to the full document on this page Don't take either of these as gospel though..... 
I merely include them as illustrations of what various organisations think is a **good** standard for captioning / subtitling. 
If a CSS/XXX style model can 'easily' support the line breaking concepts outlined by these documents, ideally without requiring explicit line breaks within the content - then great. 
I guess I might still want soft hyphens tho' :-) regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
from content My experience is that relying upon whitespace in marked up content is problematic for a variety of reasons. 
It is much better to use xml:space=preserve and then subsequently perform whitespace normalization during formatting in combination with explicit markup or style properties to indicate forced line breaks. 
The WG recently added "force line break" to the requirements for content vocabulary as well as adding break-after and break-before style properties that take a "line" value. 
The WG sees these as the prefered ways to indicate line break semantics. 
G. [JB ] Yes - you're right - I did forget the newlines. 
I think for subtitling/captioning you'd want a fairly verbatim transcription of the content of the p element into the displayed region. 
So I'd expect: To produce the output Scooby dooby doo, where are you? 
and To produce the output Scooby dooby doo, where are you? 
Which I assume it would :-) Glenn, We would have to extend XPointer to handle ranges that involve words or lines. 
At present, ranges demarcate their endpoints using character offsets or element offsets, e.g., from 2nd to 4th character, from before element E to after element F, etc. 
I'm not sure I see that this is a problem - since we wouldn't be using the spans in this instance... Scooby dooby doo where are you? 
we've got some work to do now Scooby dooby doo, where are you? 
we need some help from you now come on Scooby doo, I see you pretending we've got a slither you're not fooling me, cause I can see the way you shake and shiver so presumably: and so on - would select lines from the paragraph. 
But agreed - this is not quite as elegant as a word / line / character / paragraph selector. 
Doing a line selector is problematic unless it is based strictly on forced line breaks in content, which would require the authoring system to predetermine line breaks and which would not work well if UA or device could change fonts or layout region. 
It might be possible to introduce a form of "pseudo" selector that makes selection based on units that are not determinable by lexical content. 
CSS provides such selectors. 
JB I'd definitely prefer to avoid hard line breaks - they would tie the content to a specific layout. 
Within subtitling / captioning, a line break has a greater significance than within 'bulk text' - since there may be an inferred change of speaker etc..... 
I think the issues that arise when the "UA or device could change fonts or layout region" are within what I am calling the "temporal flow " model. 
That is - I see two distinct modes here: 1) an explicit 'knife and forked' model - where content is without inline **style** markup - but perhaps uses some form of line markup to support selection. 
This mode is 'author driven' i.e. the author is making choices based on expected delivery interfaces. 
2) a relaxed model - where content is without **any** inline markup. 
In this model - the "temporal flow" attributes control how much content is in the region and what happens if it overflows. 
This supports device independence much more flexibly. 
So this example might produce pop on subtitles.... p { display : none; color: blue; temporal-overflow: auto; add-interval: 1s; read-interval: 3s; region-full-clear: all; region-fill-mode: all} Scooby dooby doo where are you? 
we've got some work to do now Scooby dooby doo, where are you? 
we need some help from you now come on Scooby doo, I see you pretending we've got a slither you're not fooling me, cause I can see the way you shake and shiver regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
See below. 
From: Johnb@screen.subtitling.com 
[mailto:Johnb@screen.subtitling.com] 
Glenn, We would have to extend XPointer to handle ranges that involve words or lines. 
At present, ranges demarcate their endpoints using character offsets or element offsets, e.g., from 2nd to 4th character, from before element E to after element F, etc. 
I'm not sure I see that this is a problem - since we wouldn't be using the spans in this instance... Scooby dooby doo where are you? 
we've got some work to do now Scooby dooby doo, where are you? 
we need some help from you now come on Scooby doo, I see you pretending we've got a slither you're not fooling me, cause I can see the way you shake and shiver so presumably: and so on - would select lines from the paragraph. 
GA: Your example doesn't select lines; rather it selects characters which may or may not be mapped to a line. 
Unless you are using manual line breaks, e.g., by using a br/ element or a style property equivalent, then selecting character runs in this fashion would not be guaranteed to map to a line since you may have font substitutions, different region sizes, etc. 
What we would need is effectively a pseudo selector that operates on the area tree produced by the layout process. 
The layout of the above paragraph may produce one or more block areas, each containing one or more line areas, each containing one or more glyph areas. 
Perhaps we can introduce a new axis extension that logically selects areas produced by formatting the referenced content, e.g., id('p1')/area::line(1) // select first line area id('p1')/area::line(1)/glyph(1) // select first glyph area of first line area But agreed - this is not quite as elegant as a word / line / character / paragraph selector. 
Doing a line selector is problematic unless it is based strictly on forced line breaks in content, which would require the authoring system to predetermine line breaks and which would not work well if UA or device could change fonts or layout region. 
It might be possible to introduce a form of "pseudo" selector that makes selection based on units that are not determinable by lexical content. 
CSS provides such selectors. 
JB I'd definitely prefer to avoid hard line breaks - they would tie the content to a specific layout. 
Within subtitling / captioning, a line break has a greater significance than within 'bulk text' - since there may be an inferred change of speaker etc..... 
I think the issues that arise when the "UA or device could change fonts or layout region" are within what I am calling the "temporal flow " model. 
That is - I see two distinct modes here: 1) an explicit 'knife and forked' model - where content is without inline **style** markup - but perhaps uses some form of line markup to support selection. 
This mode is 'author driven' i.e. the author is making choices based on expected delivery interfaces. 
GA: Could you explain this "knife and fork" model that you have now referred to a few times? 
I can guess what you might mean, but I'm would rather you explain. 
2) a relaxed model - where content is without **any** inline markup. 
In this model - the "temporal flow" attributes control how much content is in the region and what happens if it overflows. 
This supports device independence much more flexibly. 
So this example might produce pop on subtitles.... p { display : none; color: blue; temporal-overflow: auto; add-interval: 1s; read-interval: 3s; region-full-clear: all; region-fill-mode: all} Scooby dooby doo where are you? 
we've got some work to do now Scooby dooby doo, where are you? 
we need some help from you now come on Scooby doo, I see you pretending we've got a slither you're not fooling me, cause I can see the way you shake and shiver regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
1. SSML has an interest in tokenization policy[1]. 
If TT-AF wants to do selection based on indexing over un-marked tokens the tokenization policies here and there should be aligned. 
[I think TT-AF wants to avoid this one for one round; I think when the dust settles on SSML 1.0 we will find Voice has, too.] 2. Lines in poetry should be entified, i.e. marked with appropriate container elements, and not separated with separators comparable to html:br. 
The Scooby theme song example is poetry, IMHO. 
Outside of poetry and similar domains where the line division is proper content, we do need to have some way to address the post-flow lines in the presentation space. 
The presentation spaces for [subtitles and captions] are confined enough so that we can't ignore these divisions (as John has said). 
I don't have a suggestion or precedent for how to approach this 3. Line-break-suppression is still something that may be considered content. 
[Keep-together is a common theme in the content-borne formatting hints in experience in the device-independent-authoring community. 
Again, XML container elements are to be preferred over separators. 
The infix &amp;nbsp; character has been so abused in HTML practice as to beg to be superceded by markup wrappings for proper names and other compound terms that should resist breaking over lines. 
This example is poetry, not streaming prose. 
So the line divisions are content, not simply presentation. 
Appropriate content markup could be line Scooby dooby doo where are you? 
/line line we've got some work to do now /line line Scooby dooby doo, where are you? 
/line line we need some help from you now /line line come on Scooby doo, I see you /line line pretending we've got a slither /line line you're not fooling me, cause I can see /line line the way you shake and shiver /line /stanza In that case no extensions on XPath are involved. 
Al [1] In answers to Last Call comments, the SSML Editor has said quote cite="http://lists.w3.org/Archives/Public/www-voice/2003AprJun/0050.html" [60] Rejected. 
This is a tokenization issue. 
Tokens in SSML are delimited both by white space and by SSML elements. 
You can write a word as two separate words and it will have a break, you can insert an SSML element, or you can use stress marks externally. 
For Asian languages with characters without spaces to delimit words, if you insert SSML elements it automatically creates a boundary between words. 
You can use a similar approach for German, e.g. with "Fussbalweltmeisterschaft". 
If you insert a break in the middle it actually splits the word, but that's probably what you wanted: Fussbal break weltmeisterschaft. 
If you wish to insert prosodic controls, that would be handled better via an external lexicon which can provide stress markers, etc. 
On the other hand, I couldn't find any basis for this assertion in the Last Call document itself. 
quote cite="http://www.w3.org/TR/speech-synthesis/#S3.3" 
The W3C Voice Browser Working Group is developing the Pronunciation Lexicon Markup Language [LEX]. 
The specification will address the matching process between words and lexicon entries snip/ PS: Character offsets may prove problematical unless and until the early normalization provisions of the Character Model for the World Wide Web are generally honored in practice. 
But it probably makes more sense for the TT-AF using community to work on implementing early uniform normalization per the above than to invent workarounds to cure the effects of its absence. 
Glenn, Scooby dooby doo where are you? 
we've got some work to do now Scooby dooby doo, where are you? 
we need some help from you now come on Scooby doo, I see you pretending we've got a slither you're not fooling me, cause I can see the way you shake and shiver so presumably: and so on - would select lines from the paragraph. 
GA: Your example doesn't select lines; rather it selects characters which may or may not be mapped to a line. 
Unless you are using manual line breaks, e.g., by using a br/ element or a style property equivalent, then selecting character runs in this fashion would not be guaranteed to map to a line since you may have font substitutions, different region sizes, etc. Well it selects lines from the content - agreed that they may not map to a line on the display region. 
I was assuming when I wrote this that there was a layout property in style a2 that caused a line break. 
In some cases (e.g. snake mode) you would not want a line break. 
As regards font substitutions and different region sizes - I see the above example as the explicit model - i.e. all this is pre-calculated by the author - default overflow mode is hidden - so superfluous content is clipped from the region (not very desirable for subtitling / captioning!). 
GA: What we would need is effectively a pseudo selector that operates on the area tree produced by the layout process. 
The layout of the above paragraph may produce one or more block areas, each containing one or more line areas, each containing one or more glyph areas. 
Perhaps we can introduce a new axis extension that logically selects areas produced by formatting the referenced content, e.g., id('p1')/area::line(1) // select first line area id('p1')/area::line(1)/glyph(1) // select first glyph area of first line area I'm not really sure I understand how this could work - What in the above statements defines the style (which specifies the font, region size etc) that the selection mechanism uses to determine how long the line is? 
Especially in the case of style animation..... 
I think the insertion of a 'temporal line break' has to be in the style domain - not in the content domain. 
If an individual selection defines too much content for a line (assuming that is the mode of the temporal line breaking model) - then 'normal' style attributes for overflow (marquee - scrolling etc) would be applicable. 
I'm trying to get my head round this - don't want to stray too far from current concepts - but are we jumping through hoops to avoid modifying the style model here? 
regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
Glenn, my comments below in green from content -----Original Message----- from content Glenn, Scooby dooby doo where are you? 
we've got some work to do now Scooby dooby doo, where are you? 
we need some help from you now come on Scooby doo, I see you pretending we've got a slither you're not fooling me, cause I can see the way you shake and shiver so presumably: and so on - would select lines from the paragraph. 
GA: Your example doesn't select lines; rather it selects characters which may or may not be mapped to a line. 
Unless you are using manual line breaks, e.g., by using a br/ element or a style property equivalent, then selecting character runs in this fashion would not be guaranteed to map to a line since you may have font substitutions, different region sizes, etc. Well it selects lines from the content - agreed that they may not map to a line on the display region. 
I was assuming when I wrote this that there was a layout property in style a2 that caused a line break. 
In some cases (e.g. snake mode) you would not want a line break. 
As regards font substitutions and different region sizes - I see the above example as the explicit model - i.e. all this is pre-calculated by the author - default overflow mode is hidden - so superfluous content is clipped from the region (not very desirable for subtitling / captioning!). 
GA: OK, that (a style property) would work. 
However, since in this scenario the author is manually selecting line break points irrespective of the contingincies of user agent display, I can't see a great advantage to using range selection over explicit markup in content. 
I suppose your response would be that by not using markup to delineate lines, that you can apply multiple timesheets/stylesheets to the same content without changing the content such that these different timesheets/stylesheets could select different lines or units. 
Is this the crux of your argument for using external ranges rather than inline markup? 
[JB ] Let's say it's one of the supporting arms for my desire to allow external range based selection cf inline delineation.Certainly 
within my area of interest - I would like to be able to have a TT-AF file with a single content area, that was used by multiple timesheets/stylesheets - for use when an author has explicitly catered for different presentation scenarios. 
I.e. The same file is usable for Teletext, Open, DVB and DVD presentations (each of which have different timing and style limitations). 
GA: What we would need is effectively a pseudo selector that operates on the area tree produced by the layout process. 
The layout of the above paragraph may produce one or more block areas, each containing one or more line areas, each containing one or more glyph areas. 
Perhaps we can introduce a new axis extension that logically selects areas produced by formatting the referenced content, e.g., id('p1')/area::line(1) // select first line area id('p1')/area::line(1)/glyph(1) // select first glyph area of first line area I'm not really sure I understand how this could work - What in the above statements defines the style (which specifies the font, region size etc) that the selection mechanism uses to determine how long the line is? 
Especially in the case of style animation..... GA: I was just providing an example of how by introducing a new axis into XPath expressions that we could select areas produced by formatting content as opposed to selecting the content itself. 
For example, if you wanted to time the appearance of line areas at authoring time but you don't know where line breaks will occur (because UA is performing line breaking), then by using the above mechanism you could associate timing and style properties with the areas produced by the formatting process. 
Since XPath only provides axes that select lexical content, we would need such an extension if we wanted to time or style the results of formatting. 
[JB ] I think I understand the direction you're going in here - but I see a problem. 
You have used line numbers in your examples, but the document author has no a priori knowledge of where the UA will line break - so how many selectors should he create, 1, 2, 3, (how many lines will the content be broken into by the UA?). 
The number of lines the content is broken into by the UA should affect the timing of those lines...... the two are intrinsically linked - linebreaking in subtitling / captioning creates potential temporal overflow (the need to remove existing content) which affects the timing of all the content - including the first displayed content. 
I.e. (not intended to be xml) - the first stanza as three lines, the second into a two line region. 
[Example 1 seq end="6s" - three liner] [dur = "2s"] Scooby dooby doo where are you? 
we've got some work to do now Scooby dooby doo, where are you? 
[dur = "2s"] we need some help from you now come on Scooby doo, I see you pretending we've got a slither [dur = "2s"] you're not fooling me, cause I can see the way you shake and shiver [/seq] [Example 2 seq end="6s" - two liner] [dur = "1.5s"] 
Scooby dooby doo where are you? 
we've got some work to do now [dur = "1.5s"] 
Scooby dooby doo, where are you? 
we need some help from you now [dur = "1.5s"] come on Scooby doo, I see you pretending we've got a slither [dur = "1.5s"] you're not fooling me, cause I can see the way you shake and shiver [/seq] I think the insertion of a 'temporal line break' has to be in the style domain - not in the content domain. 
If an individual selection defines too much content for a line (assuming that is the mode of the temporal line breaking model) - then 'normal' style attributes for overflow (marquee - scrolling etc) would be applicable. 
GA: I don't believe we can force one particular model on all uses. 
Some authors may want to express in content domain for whatever reason, others may want to express in style domain. 
We should support the vocabulary to express both models. 
[JB ] I'm in total agreement - though I personally regard content domain as strongly associated with the knife and fork - hard layout - explicit styled document models. 
As I've said previously - I think that it is currently possible to imitate existing subtitling authoring formats using standard xml and CSS style. 
An added wrinkle is the use of selectors to remove the need for inline line demarkation and style animation to support ideas like Karaoke. 
But I personally don't see much of a unique selling point (USP) in transferring across to this form of TT-AF from existing file formats (aside from the use of Unicode). 
What I'd like to continue to see developing is a vocabulary for soft layout. 
Although style animation and enhanced selectors can help - I still feel there is a need to develop a vocabulary for temporal overflow. 
The CSS overflow attributes don't go far enough in controlling how a region is emptied to make space for new content. 
Concepts like explicit marquee-speeds don't work - since you cannot predict the size of the region on the UA that is being used - the required speed is content / time / region size dependent. 
Also missing are many subtleties in how the region is reused/reflowed. 
This is where I see the USP..... regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
