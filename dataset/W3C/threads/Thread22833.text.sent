Hi. First of all, please forgive my ignorance about this subject. 
I have downloaded, and printed, the DOM Level 1 Spec and think I have got the general idea. 
Also, I have downloaded the Java-bindings.zip file and have amended my CLASSPATH to point to the class files. 
My question is, how do I actually USE the Java Bindings classes? 
I don' t mean how do I use the interfaces, but how do I get access to the interfaces from within Java. 
Do I need to import the classes, or something? 
Ultimately, I want to be able to dynamically alter an HTML document using the HTML Bindings. 
Regards John Duffy jbduffy@cwcom.net 
Different DOM implementations have different ways of letting you access the Java bindings. 
These depend, for example, on whether you are using a browser, or parser/DOM implementation, or some other sort of tool. 
Because of this, the only answer I can give is that you will need a DOM implementation which supports the Java bindings. 
Check the documentation for the implementation you're interested in to make sure this is the case. 
The documentation should also include information as to how to use the Java bindings. 
regards, Lauren Hello, I have another Java language binding question: Why is the DOMException artificially made abstract? 
Best regards Stefan Haustein SAX-based access to WBXML and WML: http://www.trantor.de/wbxml 
XML pull parser: http://www.trantor.de/xml 
I don't know what you mean by "artificially", but the reason it is abstract is that it's the closest we could get to an interface. 
Ideally the DOM java binding would only define interfaces. 
This is unfortunately impossible due to the way Java defines exceptions. 
Arnaud Le Hors - IBM Cupertino, XML Technology Group 1. Obtain an _implementation_ of the Java bindings. 
Try looking around http://xml.apache.org , for example. 
2. The implementation will normally come with a parser that constructs a DOM parse tree from a document read from a file. 
3. In your application, import the implementation's parser class, and also the DOM interfaces, using (for example) import org.w3c.dom.*; 4. Do whatever it takes to run the implementation's parser over a file. 
This will eventually return an org.w3c.Document object, to which you can then apply the various methods given in the DOM spec. 
DOM level 1 specifies what you can do with a Document once you have it, but says nothing about how you can obtain a Document in the first place. 
It also says nothing about how you convert from a DOM tree back to text, if that's what you want to do. 
You may have trouble finding a Java implementation for the HTML interfaces; I think that most freestanding implementations only implement the core. 
If you want to do this inside of a browser, you may be out of luck -- I'm not sure whether applets are given access to their enclosing document. 
If they were, it would probably give rise to some rather interesting security holes. 
Stephen R. Savitzky steve@rsv.ricoh.com 
http://rsv.ricoh.com/~steve/ 
Platform for Information Applications: http://RiSource.org/PIA/ 
Chief Software Scientist, Ricoh Silicon Valley, Inc. Calif. 
Research Center home: steve@theStarport.org 
URL: http://theStarport.org/people/steve/ 
What he means is that there's no real reason beyond a desire for some kind of philosophical purity to make it abstract: as far as I know no exception anywhere in the Java classes is abstract; you can construct and throw an IOException or even an Exception if you want to. 
The fact is that the implementation of the IDL concept of an Exception is mapped onto a language binding in a language-dependent way; it isn't even logically necessary for it to be an object at all. 
Philosophical purity is not a good excuse for making things unnecessarily complicated. 
Stephen R. Savitzky steve@rsv.ricoh.com 
http://rsv.ricoh.com/~steve/ 
Platform for Information Applications: http://RiSource.org/PIA/ 
Chief Software Scientist, Ricoh Silicon Valley, Inc. Calif. 
Research Center home: steve@theStarport.org 
URL: http://theStarport.org/people/steve/ 
I don't really care but, actually, the level of complexity you're talking about is not even worth mentioning. 
Arnaud Le Hors - IBM Cupertino, XML Technology Group take me off this list....;. 
This Email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed. 
It may also contain confidential and privileged material. 
Any review, re-transmission, dissemination or action taken in reliance upon it, or any other use of this information by persons, or entities, other than the intended recipient is prohibited. 
If you have received this Email in error please contact the sender and delete it. 
take me off this list This Email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed. 
It may also contain confidential and privileged material. 
Any review, re-transmission, dissemination or action taken in reliance upon it, or any other use of this information by persons, or entities, other than the intended recipient is prohibited. 
If you have received this Email in error please contact the sender and delete it. 
please take me off this stupid list. 
From:Arnaud Le Hors [SMTP:lehors@us.ibm.com] 
Sent:28 January 2000 00:18 Subject:Re: Another Java Language Binding Question This Email and any files transmitted with it are confidential and intended solely for the use of the individual or entity to whom they are addressed. 
It may also contain confidential and privileged material. 
Any review, re-transmission, dissemination or action taken in reliance upon it, or any other use of this information by persons, or entities, other than the intended recipient is prohibited. 
If you have received this Email in error please contact the sender and delete it. 
Just a sanity check: John, have the recent answers (that the DOM is just an interface, and that you need to obtain or write code which actually implements that interface and supports the language bindings you want to use) addressed your question? 
Or did we misinterpret what you were asking? the HTML  Bindings. 
The challenge is indeed going to be finding an HTML DOM that will talk to Java -- or finding more than one, if you want to do this portably. 
Unfortunately, not all browsers support accessing their DOM from Java. 
Joe Kesselman / IBM Research Firstly, thanks to everyone who took the time to reply to my original posting. 
I think I'm a little bit out of my depth here regarding DOM. 
What I am trying to achieve is the dynamic update, once a minute, of a web page containing a table. 
At the moment I refresh the page using a META HTTP-EQUIV="REFRESH"... construct. 
After a while this becomes a tad annoying and hard on the eyes. 
My plan, when I first discovered DOM, was to load the page containing the table into the browser once, at load, and then use a Java Applet to create a socket connection to a data server and update the table via the DOM HTMLTable... interfaces. 
Apologies if I have completely got the wrong idea about what DOM is all about. 
Regards John jbduffy@cwcom.net Sorry; I was jumping to a FAQ when you may have been asking another question entirely... 
That should be doable, assuming that your browser makes its DOM accesssible to Java. 
(Not all do, yet.) You'll have to work out what format you want to recieve that data in, extract the information once you recieve it. 
Then you can use the DOM APIs to update the document's contents with the new data. 
Joe Kesselman / IBM Research That is, you want your web browser to support a DOM implementation coupled to that data server, instead of only one that's built into the web browser? 
Or do you also want that same DOM implementation to be coupled to the display, so you don't need that "http-equiv"? 
I'd sure prefer to see architectures which completely separate the notions of a "DOM that renders" and a "DOM tied to a database". 
It should be no trouble at all for a programming environment to support both of those notions -- separately. 
Glueing them together could be a huge barrier to new market entrants, which would be a bad thing. 
It's completely natural to expect that web browsers provide access to DOM from Java that's as complete as what they provide to JavaScript programs. 
If your browser vendor doesn't support that, let them know about their bug. 
- Dave I agree with David, but in the meantime you may want to consider using IBM's weblets which provide you with what you're missing! 
See http://www.ibm.com/alphaworks 
Arnaud Le Hors - IBM Cupertino, XML Technology Group Looks interesting, but it only seems to support IE5 (Win32). 
Also, I had problems setting it up with JDK 1.2.2-001 since the registry editing tool demanded a "javai.dll" that doesn't exist. 
That's an undocumented dependency. 
How's the Mozilla support going? 
- Dave 
