After a brief look at the tests, I am still missing some important tests (I am not sure how many new tests have been added since the NIST tests) I am missing tests that actually test *all* functions on an interface, including testing methods on interfaces that was inherited, even if they make no sense. 
(For example, Text::getChildNodes should return a NodeList with no nodes. 
The same goes for ProcessingInstruction::getFirstChild etc. 
The list goes on.) What we have done where I am working is to test absolutely all functions on one interface, and then test if the method behaves as expected. 
(E.g test if Text::getFirstChild returns NULL etc.) I consider a conformance test to be incomplete if such tests are not included. 
Are somebody working on this issue? 
Best regards Jan-Arve S?ther 
The current test suite is by no means complete. 
In previous discussions, we have iterated the need for testing methods on interfaces that were inherited -- I believe that the interfaces are for the most part tested on the top-level interface, but probably not any down the path. 
If you have such 
tests, please contribute to the effort. 
We had envisioned from the start that test contributions would come from a variety of folks working in this area -- what you currently see is just the start. 
At NIST, we have additional tests for DOM L2, which should be committed 
soon -- we are down to just a couple of problems. 
We also have about 600 DOM L1 HTML tests -- if you would like to see where we have tests, we have an older test matrix available from our web site, Other than those mentioned, please feel free to fill in the holes! 
--Mary 
I'll take a look at expanding the test-matrix.xsl 
so it will report tests against inherited methods. 
The setNodeValue tests I mentioned yesterday are one example of this issue. 
Some tests that use non-USASCII characters would be beneficial, for example, a test that calls createElement with a valid Japanese tagname and then compares the value from nodeName. 
[dd] Pretty early on, there was an implicit understanding that not all facets of a particular method could be tested as this introduces an 
ever-growing set of tests that would need to be written. 
I'm not all too happy about this, so please provide any feedback/ideas on how we could solve this (for practical reasons, however, we are limiting the TS to testing the most basic functions of each method). 
[dd] Pretty early on, there was an implicit understanding that not all facets of a particular method could be tested as this introduces an ever-growing set of tests that would need to be written. 
I'm not all too happy about this, so please provide any feedback/ideas on how we could solve this (for practical reasons, however, we are limiting the TS to testing the most basic functions of each method). 
