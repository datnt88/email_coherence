Hi, 
I am wondering if it makes sence to add transactional capability in DOM. 
Thanks, Alex 
Definitely someday; this is not in the requirements for the Level 3 Load/Save functionality, but there are at least some of us who have expressed interest in the past. 
If you could elaborate on your needs and suggest some features, that would help. 
I think we could have the same transactional model as Oracle has. 
So we can set up savepoints and then make rollback to any of those savepoints. 
Say we have a transaction that sets savePoints like |startTransation():-*- savePoint(1):-*- :savePoint(2):-*- ...savePoint(n) 
------------rollback(); |commit(); 
than we make a rollback to savePoint2. 
Commit can be made at any time after startTransaction() was issued. 
I think this would work very well for me. 
Alex ----- Original Message ----- 
Definitely someday; this is not in the requirements for the Level 3 Load/Save functionality, but there are at least some of us who have expressed interest in the past. 
If you could elaborate on your needs and suggest some features, that would help. 
Alex Rojkov arojkov@communicate.com 
I'm not familiar with Oracle's model, but this sounds quite useful. 
Only instead of a flat series of savepoints, I'd prefer to have a hierarchy of transactions. 
So you could start a transaction whilst in another transaction and commit it when that sub-transaction is done, or rollback without screwing the parent transaction if it fails. 
Looking forward to being able to write multi-user file editors with XML as the underlying file format. 
:-) Andrew Clover Technical Support 1VALUE.com 
AG 
A transactional DOM seems like a fine thing, but I think that the DOM should support something like a DOM Repository first, so that there is an Object model for the thing where the transaction is stored. 
