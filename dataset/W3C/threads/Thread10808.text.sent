One of the things we haven't yet discussed (or did I miss something?) is the interaction between different XML systems and what this might necessitate in terms of documentation. 
[...] [...] In HTML, there is no need for documentation on elements, as long as all UAs read and implement the HTML spec. 
This is not necessarily the case for XML, where UAs will need documentation on elements to enable interoperability. 
I would very much like to see a formal way of describing elements. 
At the very least, a short readable string. 
When a DTD is something private, used only within a department, the names don't matter too much. 
If I am publishing a DTD worldwide, people are going to create style sheets to view it, or set up conversion tables to filter it into porridge, and they need to know what the elements mean. 
I rule out the possibility of "put it in comments", as those are not normally fed back to a client of a parser. 
So it can go in an element or an entity. 
If we have entities in XML, you could do Lauren's examples seem closer to architectural forms, though. 
Will XML have architectural forms? 
I didn't think we had #FIXED attributes any more... 
Without inheritance, arch forms are awfully inelegant, it seems to me, but they are a kludge I could live with. 
Lee From: lee@sq.com 
This would be a *very good thing*, but it is just a subset of the problem of comments in a declaration. 
All that is really needed is a formal specification for relating comments in a declaration to some part of that declaration. 
The problem with SGML right now is that in the case of: !ATTLIST foo -- this is ambiguous -- name CDATA #IMPLIED it is unclear what the comment is meant to apply to. 
If there were a formal way of determining what part fo the declaration the comment applied to, it would be easy for the parser to return the comment, associated to it's context. 
This formal defintion could (easily?) be part of the parsing specification for the DTD. 
The reason parser don't normally feed back the comments is because comments are ignored markup in SGML. 
The only way to return the comments is to return the markup, and even then, you are faced with the ambiguity question I raised above. 
I think it would be a mistake to define XML such that we lost architectural forms. 
I see architectural forms as realizing there potential in exactly such an environment as XML is being designed for (ie. 
dynamic data interchange between systems). 
-enjoy, derek -- Derek E Denny-Brown II --- SGML/HyTime/DSSSL/WWW/C++/Perl/etc. 
"technical staff" @ TechnoTeacher, Inc. http://www.techno.com/ -- A smart cartoon never stagnates in one place long enough for a safe/piano/etc to fall from the sky and squash it. 
I can't find the vote, but I'm pretty sure that XML *does* have #FIXED attributes. 
Someone else from the ERB shout if I'm wrong. 
Cheers, Tim Bray tbray@textuality.com 
http://www.textuality.com/ 
+1-604-488-1167 [Derek Denny-Brown:] We're saving the discussion of architectural forms for Phase II (December 1996 through March 1997), in which we define the hypertext mechanisms for XML. 
Architectural forms have definitely not been ruled out, and XML is not being defined in a way that would preclude them. 
Jon 
