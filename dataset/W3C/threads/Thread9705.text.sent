Are the two documents descriptions of the same graph? 
I think I heard yes. 
Furthermore is this the same: I suspect it is too? 
Jeremy If the literal is intended to be a number, then I think yes. 
But a possible issue then would be that RDF engines without knowledge of XML schema datatypes would get different answers from engines that do have such knowledge. 
I don't know if that's a problem. 
Hmmm... I'd need to consult XML schema details for that. 
And what about: In this case I think the answer is no. (For reasons mentioned in the message Dan cited recently -- The question raised, I think, is does constructing the correct abstract graph depend on knowing about the datatypes? 
If so, then I think extensibility has just been comprehensively denied. 
(Which is not too surprising, if one considers the way programming languages typically distinguish syntactically between literal types -- the range of literal types is often prescribed by the language, though complex values may sometimes be constructed from them.) #g Graham Klyne First, a big "hooray" on this. 
It might be less glamorous than some of the other proposals, but I feel that this offers a huge advantage for the folks out there doing DB/RDF interface work, query, etc. 
The answer is yes. 
However, this raises a question I was trying to figure out a while ago. 
Depending on how schema datatypes are revised, this might be a problem anyway. 
I don't think you can promise anything from an RDF implementation on datatypes it knows nothing about except some default behaviour ("I'll use string comparison") in the absence of any other knowledge. 
That's the killer question I couldn't come up with only one answer to, and I think it's the most important one. 
Do we produce some xsd-influenced hierarchy of idealised types C, R, Q, Z, N or do we take a pragmatic RDBMS-influenced view of having "reals" and "ints" as separate datatypes that don't intersect? 
While I like the former, I've got a suspicion that the latter is a more realistic approach from an implementation point of view*. 
The only thing that makes me feel reasonably happy about the latter view is that we've got some "tradition" in RDF of making intension/extension distinctions explicit and in that vein I'd be reasonably persuaded by "it's an int, dammit, not a bloody real number" when talking about (say) cardinality, number of parents/fingers/mail addresses, etc. 
The other thing that we need to be sure of is the story we tell regarding all the other scenarios and requirements we collected in the (close to) first round of all this. 
We've got (like java) a fixed (? - can we wedge a type theory on top of literals?) set of primitive types, so what about 1. enumerations, 2. compound types, and 3. taxonomic categorisations? 
I'd be happy with saying, "use a uri-labelled resource" for 1 and 3, and "express the structure using nodes and arcs" for 2. jan * I've got a c. 3.5-year-old implementation that went this way; implementation language (java) had a lot to do with that, however. 
jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ Talk is cheap: free, as in beer. 
As in Real Ale, not that Budweiser rubbish. 
From: ext Graham Klyne [mailto:Graham.Klyne@MIMEsweeper.com] 
Sent: 06 August, 2002 19:49 Subject: Re: xsi:type test case A few questions: 1. 
What triples are generated from the above? 
2. Will this work with non-XML Schema datatypes? 
3. Will this work with arbitrarily/user defined primitive types? 
4. How does this relate to defining datatype ranges of properties? 
Patrick Patrick.Stickler@nokia.com 
said: From: ext Graham Klyne [mailto:Graham.Klyne@MIMEsweeper.com] 
Sent: 06 August, 2002 19:49 Subject: Re: xsi:type test case I am still waiting to see this. 
The above is half a test case. 
There is no triples output. 
Don't expect any RDF/XML syntax for this anytime soon without any description of what the output is proposed. 
Maybe I have to invent some new proposed N-triples for these, unless we are going to quads? 
So how about as answers to the above (assuming xmlns:eg="http://example.org/" added) in order: _:a http://example.org/prop 
xsd:decimal"2.0" . 
_:a http://example.org/prop 
xsd:decimal"2.00" . 
and then please argue about what such things are and if they are the same. 
Don't do it at the RDF/XML level. 
I may change the above syntax since I have no idea yet what is expected to go into the model - datatyped literals as above. 
(Or Typed Data Literals as Patrick put it ;) although the latter used rdf:value and rdf:type rather than creating a new literal, if I recall correctly.) Dave for I'm still tempted to say (in NTriples) _:aaa eg:prop _:bbb . 
_:bbb xsd:decimal "2.0" . 
but I guess one wants to see _:aaa eg:prop xsd:decimal"2.0" . 
(I'm not yet "more comfortable with it as each day goes by") I guess so I guess so well I guess global range constraints could be used to detect inconsistencies, no? (too much guesses I guess) Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
