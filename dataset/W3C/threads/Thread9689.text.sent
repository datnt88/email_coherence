All blank nodes are assigned arbitrary URIs. 
This is inconsitent with our policy w.r.t. blank nodes. 
I propose section 6 be dropped for now, until this is fixed. 
Dan DanBri: Opposed. 
There are practical problems in RDF serialization. 
At some point the specs need to acknowledge this, and indicate to implementors what they should do. 
In RDF2 I would hope to fix this, e.g. allow the "_:nnn" bnode syntax as matching uriref production in the grammar. 
That was out of charter. 
The charter allows us to clarify M&amp;S. 
The clarification is "this is screwed up". 
I think a minor change highlighting that the meaning of the graph has changed in such a serialization may improve the document. 
Jeremy Ah, we disagree. 
Agreed Offer guidance, sure. 
Provide pseudocode -- perhaps in a Note. 
The current text provides an algorithm for taking an RDF graph and turning it into an RDF/XML document whose meaning is different from the graph's. 
Our decisions on bNodes make this clear. 
Yup. 
I'd do it a bit differently: unique bnode labels could be (just about...) done as unambiguous properties of a resource. 
(as could URI names, imho, but definitely RDF 2 territory there). 
This doesn't help folk tying to serialize the 1.0 spec graphs, and having guidance in the doc (or a doc) is useful. 
I want to write a serializer in Ruby, for eg., and guidance much appreciated. 
Having a serialization algorithm that directly contravenes one of our most painfully drawn out decisions also feels a bit wrong. 
I'd rather the spec stayed silent or we introduced a better version of the id/idref linking syntax (which'd take time) than include the current spec. 
If the meaning changes, it's not a serialization so much as a transformation... Dan Why does the spec need to tell implementors what to do? 
There are several well-known techniques for handling local variables, and the choice is up to the implementor. 
Fix what? 
Wait: its not screwed up. 
The MT is about as clear as it can possibly be on this issue. 
Bnodes are not urirefs, and it is *invalid* to replace a bnode by a uriref, even a 'new' one. 
Sorry about the practical problems, but life is like that. 
I vote to scrap the misleading wording in section 6. Pat IHMC(850)434 8903 home 40 South Alcaniz St.(850)202 4416 office phayes@ai.uwf.edu 
Jeremy: DanBri: Less than we might think. 
I agreed with all the facts you laid out; only disagreeing with the action. 
A different action could be: - add some test cases to clarify the difficulty - indicate that often we have to serialize an "instance of" a graph rather than the graph itself. 
(see model theory section 0 for defn of "instance of") - add sufficient warning text - change status to non-normative Test cases: error001.nt 
_:foo eg:test _:foo . 
has no corresponding RDF/XML (we already have one of these error001.nt 
somewhere). 
B: eg:sk1 eg:test eg:sk1 . 
C: eg:sk2 eg:test eg:sk2 . 
Then two entailment tests and four non-entailment tests (between the three graphs above) clarify the relationships between these graphs. 
By referring to these test cases in the serialization text the limitations of the method can be made clear. 
It's a fairly small transformation, and that smallness can be made clear model theoretically. 
Jeremy Hi OK, we're getting closer :) I like that we have a MT-based story about what's going on here, too. 
One puzzle: Some graphs we're supposed to throw a 'this can't be serialized' error, others we transform into an MT-instance and serialize. 
It isn't clear why we make this distinction. 
There's a trick for serializing graphs with edges whose URIref names don't map to XML element names: one generates a new property name, delcare it a subproperty, and run the serializer so it serializes with the new property name instead. 
I would (in all my implementations) much rather do this than throw an 'unserializable' error. 
And I would rather throw an unserializable error than generate URIs to label bNodes. 
This might be my personal taste. 
The two techniques seem similar: slight (MT-friendly) changes to the data structure to allow it to be serialized according to RDF/XML 1.0 syntax. 
My instinct is: they're either both OK, or both bad. 
Gotta go do RDFS for a bit. 
Probably won't here more from me on this before WWW2002... cheers, Dan That's cool, I might use that trick. 
(use two subPropertyOf's and we have a samePropertyAs). 
Jeremy From: w3c-rdfcore-wg-request@w3.org [mailto:w3c-rdfcore-wg-request@w3.org]On 
Behalf Of Pat Hayes Sent: 29 April 2002 23:12 Subject: RE: comments on syntax wd: bug in graph seriali[zs]ation algo The problem is, I have the graph: _:a eg:foo _:a . 
I wish to write an RDF/XML file that conveys the information. 
I cannot, what should I do. 
The solution in section 6 is: 1: take an instance of the graph that is serializable in RDF/XML 2: serialize that instance. 
I agreed with DanB that there was not enough warning text about that operation. 
But there is a practical problem, and it is part of our job to clarify both the existence of and possible work-arounds to, this problem. 
practical problems = screwed up no offence to the MT (which I hold in highest regard) but it isn't everything. 
Jeremy 
