I've added a dom1-html-matrix target. 
I believe matrix production was locking up Xalan-J, at this point, I'd recommend using SAXON 6.5.1 to build the suites. 
I added metadata to HTMLAnchorElement*.xml. 
None of the existing tests had any subject elements which are used to build the test matrix. 
Adding the subjects is a clerical task, mostly cutting and pasting the appropriate URL from dom1-subjects.xml to the test. 
I made some global replacements in the HTML L1 tests. 
Every test defined the variable "doc" as a "Node". 
While this is legal and the code does run, we know that "doc" really is a "Document" and declaring it as such removed a whole lot of unnecessary cast operations. 
Changed "it's" to "its". 
Changed ignoreCase="auto" to ignoreCase="false". 
There may be a few cases where ignoreCase="auto" is appropriate, however it is only right in a small minority of cases and not for all but three comparisons in all those tests. 
ignoreCase="auto" should only be used in those comparisons when the case of the returned value is dependent on the media type. 
For example, using ignoreCase="auto" would be approriate for an assertion on an element's or attribute's name since an HTML processor should have uppercased the name and an XML processor should have preserved the existing case. 
Thanks for the changes 
I haven't experienced a Xalan lock up when building the matrix, when did this happen? 
Maybe it was just transient and cleared up with later modifications. 
Just remember if any of the new stuff locks up on a style task, trying switching processors. 
If you don't experience problems, no need to do anything. 
Reminder: If you've got something which is causing Xalan to malfunction _please_ be sure to report it into Apache's Bugzilla tracking system. 
It's hard to fix "it locks up" when we don't know it's doing so never mind having a good description of how to provoke the problem... and we've got enough other demands on our time that stuff not logged into Bugzilla risks getting lost in the shuffle. 
(DOM TS generation probably should be one of our large-scale regression tests...) Joe Kesselman / IBM Research 
We are still using Xalan-J 2.2 since when we attempted to use pre-release versions of at Xalan-J 2.3, there were still problems with the large number 
of document() calls being made in the transforms for the overall test 
suites. 
I haven't tried using the current Xalan-J code base on DOMTS for quite some time, so those issues might be resolved. 
I'll take a look at running the build process with the current Xalan-J and log the appropriate bugs. 
number 
Current versions of Xalan should be able to handle many more documents at once than earlier versions, so I do think it's worth trying again. 
(If you're using global variables I'd recommend trying the current CVS code, since I just discovered and fixed an annoying bug in 2.3.1's 
handling thereof.) If we still fail please do post a bug report, with a pointer to the current testcase source so whoever tackles this can reproduce the failure on their own machine. 
Possibly relevant tip: If you're using for-each to step through a series of documents, there's a special-purpose optimization in Xalan which lets you tell it to discard these documents from memory (and recover the storage) after that iteration of the for-each loop is complete, rather than caching them for possible re-examination as is the default. 
To select this mode of operation, insert the ?xalan:doc-cache-off? processing instruction as an immediate child of the xsl:for-each/ element. 
This PI should be harmless for other XSLT processors. 
(Yes, we're aware that a more centralized and automated approach to managing the document cache is needed.) Joe Kesselman / IBM Research 
