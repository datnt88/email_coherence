I just read a very interesting proposal: From: "Electronic Commerce Standards for the WWW (Spyglass)" Tue Dec 6 21:54:52 1994 |Simple Authentication - OPTIONAL |This scheme, proposed by Spyglass, uses a random challenge sent from |the server to the client. 
The client encodes the random challenge |using the user's password as an encryption key in order to establish |authentication. 
See Note B for a full specification. 
|This method is currently indicated as OPTIONAL, but Spyglass believes |that it should become REQUIRED for HTTP compliance. 
This was something of an eye-opener. 
It's so simple. 
We should have been doing this all along. 
There was never any reason to send passwords in the clear (well, uuencoded), given HTTP's two-round-trip authentication mechanism. 
Why is this nifty proposal tucked away in a corner? 
Why didn't I hear about it before now? 
I thought I was pretty tuned in to this sort of thing... 
For the longest time, I was under the impression that the web user base would have two choices: 1. Use a free browser, and access only public information, or send your password essentially in the clear to subscribe to for-pay info. 
2. Use a commercial browser that supports the security options (SHTTP, SSL, kerberos...) supported by the services you use. 
The reason I believed this was that real security is to expensive to develop to give away (and it almost always requires a license of some kind...). 
As a result, information providers are faced with the unfortunate choice between: 1. Require users to send passwords essentially in the clear. 
2. Require users to license a browser. 
This message is a call to eliminate passwords-in-the-clear from HTTP. 
This means the browser developers should implement something like the spyglass proposal (it looks like a few hours more work to upgrade to this from the existing basic auth. 
scheme), and subscription-based information providers should _strongly_ encourage their user base to upgrade. 
Something like: "Please upgrade to a browser that doesn't send passwords in the clear (such as... links to recommended browsers.). 
In 6 months, we will not be accepting Basic authentication." 
I suggest that Spyglass lead the way by releasing source code patches to lynx and Mosaic to implement this enhancement, just to show how it's done. 
It should be a "simple" excercise for them. 
Using high-quality services on the web should not be an incentive to send passwords over the net in the clear. 
Let's fix this! 
Dan p.s. I hear s-key is another simple technology that eliminates the need to send passwords in the clear. 
But for the life of me, I can't find a technical description of it. 
Is there an RFC that I just can't find? 
Could somebody send me a pointer? 
Eric from Spyglass posted to www-talk a proposal for using MD5 encryption in a system like this a few weeks ago - it looked solid, and I'm waiting for a server and a browser to implement it (WN and Arena maybe?) so I can set it up for HotWired. 
Only until 1997! 
:) rom a quick glance at the list of browsers used on our site, less than %2 are more than 4 months behind the current rev of their browser, so I don't see that as a huge issue. 
However the above statement implies that a server can negotiate which type of authentication can be used: S: Here's a challenge. 
Encrypt it. 
C: Huh? 
S: oh, nevermind. 
Send me your uuencoded password. 
C: okay, here goes.... ...which doesn't seem to be in the specs anywhere. 
I'd prefer not to have two separate URL's for different authentication schemes, though I could hack around that by keeping around a list of browsers implementing challenge-response. 
Brian brian@hotwired.com 
brian@hyperreal.com 
http://www.hotwired.com/Staff/brian/ 
This does look like a good idea. 
My one concern is that we'd want to make sure various extension mechanisms could live together before standardizing an Extension: header, but they seem to think this is not essential to make the protocol work. 
(Is there any other MD5 PW authentication proposals for WWW lurking around in draft form? 
I think I've seen this before, but I'm not sure, and I think it's been done lately for other protocols, too.) Albert Lunde Albert-Lunde@nwu.edu 
In message Pine.BSD.3.91.950109121342.19279d-100000@get.wired.com , Brian Behl Yikes! 
Jinks! 
I asked for a reference to s-key in my p.s. Brian replies to other issues, but includes the address of his home-page. 
Dan wastes a little time surfing Brian's home-page, and subconsiously follows these links... Which has a handy reference to the S/Key paper from bellcore: After reading the S/Key paper, I think we should consider it in place of the simple challenge/response system. 
Advantages of S/Key: * passwords are _not_ stored on the server side in clear form. 
* user can securely use the same password at different sites * password can be changed without sending it over the net Drawbacks: * server-side passwd database is not read-only: server must update the user's count of logins each time * doesn't support the opaque="..." feature of the spyglass proposal Dan 
