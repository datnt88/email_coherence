One of the things that the CSS working group has produced is test suites - a set of pages you can use to check whether you conform. 
In reading through the evaluation tests I noticed that there are certain clear things that should be checked. 
A classic example is keyboard activation - how does a user activate an onMouseover without a mouse? 
perhaps we should create some example pages for testing. 
This also relates to WCAG - what should we test for in areas where WCAG has an "until user agents" requirement? 
SHould we test pages which conform to WCAG, or pages which do not, or both? 
Hmm. 
I feel like I have asked a lot of questions in the last week or so, and have not offered much in the way of answers or even suggested answers. 
Charles McCN --Charles McCathieNevile mailto:charles@w3.org 
W3C Web Accessibility Initiative http://www.w3.org/WAI MIT/LCS - 545 Technology sq., Cambridge MA, 02139, USA I'd be interested in hearing suggestions about how a UA might provide mouse-over activation without a mouse. 
We haven't thought up any good solutions. 
-Chris Wilson Internet Explorer Team One of the things that the CSS working group has produced is test suites - a set of pages you can use to check whether you conform. 
In reading through the evaluation tests I noticed that there are certain clear things that should be checked. 
A classic example is keyboard activation - how does a user activate an onMouseover without a mouse? 
perhaps we should create some example pages for testing. 
This also relates to WCAG - what should we test for in areas where WCAG has an "until user agents" requirement? 
SHould we test pages which conform to WCAG, or pages which do not, or both? 
Hmm. 
I feel like I have asked a lot of questions in the last week or so, and have not offered much in the way of answers or even suggested answers. 
Charles McCN --Charles McCathieNevile mailto:charles@w3.org 
W3C Web Accessibility Initiative http://www.w3.org/WAI MIT/LCS - 545 Technology sq., Cambridge MA, 02139, USA Include elements which have a mouseover in the tabbing order (I think IE only recognises the attribute on links anyway, so that isn't very hard) and provide an option to link onmouseover and onfocus as teh same event. 
Charles McCN I'd be interested in hearing suggestions about how a UA might provide mouse-over activation without a mouse. 
We haven't thought up any good solutions. 
-Chris Wilson Internet Explorer Team One of the things that the CSS working group has produced is test suites - a set of pages you can use to check whether you conform. 
In reading through the evaluation tests I noticed that there are certain clear things that should be checked. 
A classic example is keyboard activation - how does a user activate an onMouseover without a mouse? 
perhaps we should create some example pages for testing. 
This also relates to WCAG - what should we test for in areas where WCAG has an "until user agents" requirement? 
SHould we test pages which conform to WCAG, or pages which do not, or both? 
Hmm. 
I feel like I have asked a lot of questions in the last week or so, and have not offered much in the way of answers or even suggested answers. 
Charles McCN --Charles McCathieNevile mailto:charles@w3.org 
W3C Web Accessibility Initiative http://www.w3.org/WAI MIT/LCS - 545 Technology sq., Cambridge MA, 02139, USA --Charles McCathieNevile mailto:charles@w3.org 
W3C Web Accessibility Initiative http://www.w3.org/WAI MIT/LCS - 545 Technology sq., Cambridge MA, 02139, USA This could also be done as a javascript - in PERL the action you want to do is s/onmouseover="([^"]+)"/onmouseover="$1" onfocus="$1"/ I used to have a WordBasic script that did something similar. 
Basically yu search for onmouseover=", get to the quotation mark, put everything up to the next quotation mark in a buffer, and then add an onfocus="(whatevris in the buffer)" attribute. 
Or you could work through the DOM - for those who have one, such as IE, that helps interoperability... 
This is based on the fact that there are not pages which use onfocus and onmouseover to do different things. 
Since that would represent a very wierd appraoch to user interface design, I think it is a safe assumption. 
similar process can be applied to onmouseout/onblur, which i think is justified for the same reason. 
Charles McCN Include elements which have a mouseover in the tabbing order (I think IE only recognises the attribute on links anyway, so that isn't very hard) and provide an option to link onmouseover and onfocus as teh same event. 
Charles McCN I'd be interested in hearing suggestions about how a UA might provide mouse-over activation without a mouse. 
We haven't thought up any good solutions. 
-Chris Wilson Internet Explorer Team One of the things that the CSS working group has produced is test suites - a set of pages you can use to check whether you conform. 
In reading through the evaluation tests I noticed that there are certain clear things that should be checked. 
A classic example is keyboard activation - how does a user activate an onMouseover without a mouse? 
perhaps we should create some example pages for testing. 
This also relates to WCAG - what should we test for in areas where WCAG has an "until user agents" requirement? 
SHould we test pages which conform to WCAG, or pages which do not, or both? 
Hmm. 
I feel like I have asked a lot of questions in the last week or so, and have not offered much in the way of answers or even suggested answers. 
Charles McCN --Charles McCathieNevile mailto:charles@w3.org 
W3C Web Accessibility Initiative http://www.w3.org/WAI MIT/LCS - 545 Technology sq., Cambridge MA, 02139, USA --Charles McCathieNevile mailto:charles@w3.org 
W3C Web Accessibility Initiative http://www.w3.org/WAI MIT/LCS - 545 Technology sq., Cambridge MA, 02139, USA --Charles McCathieNevile mailto:charles@w3.org 
W3C Web Accessibility Initiative http://www.w3.org/WAI MIT/LCS - 545 Technology sq., Cambridge MA, 02139, USA hi Chris and Charles: I recall working with certain apps, or perhaps it was certain widgets within the UI of an app., when something with selection/focus would react to either the mouse click or the spacebar could be substituted for a mouse click. 
I think the Clistbox may work this way. 
Now that I think about it, seems a radio button group, and checkboxs, etc., follow that pattern? 
mark aloha, chris! is it really necessary to simulate a mouse-over event in the case of exposing the TITLE attribute when used, for example, as an attribute in the definition of a horizontal rule? 
wouldn't it be simpler to offer the user a choice -- i.e. a "Display Horizontal Rules" and "Display Title (where present)" setting for horizontal rules? 
and, while i suppose that this may be a suggestion more appropriately addressed to AT developers, who could substitute the content of the TITLE attribute for a horizontal rule -- provided, of course, that the AT is capable of making a DOM call to obtain the necessary information... which mousover events in particular are you attempting to make available to the mouseless user? 
knowing that would greatly assist us in assisting you... gregory. 
He that lives on Hope, dies farting -- Benjamin Franklin, Poor Richard's Almanack, 1763 Gregory J. Rosmaita unagi69@concentric.net 
President, WebMaster, &amp; Minister of Propaganda, VICUG NYC http://www.hicom.net/~oedipus/vicug/ 
aloha, charles! 
after ruminating that you asked: i would argue that our (meaning the UA WG's) primary focus should be on pages that conform to the WCAG and all current specifications -- building, locating, and / or maintaining pages that illustrate "until user agents..." strategies should be the responsibility of either the WCAG group or EO... oh, and one last thing -- i would gladly assist in the construction slash development of test suites slash example pages... gregory. 
He that lives on Hope, dies farting -- Benjamin Franklin, Poor Richard's Almanack, 1763 Gregory J. Rosmaita unagi69@concentric.net 
President, WebMaster, &amp; Minister of Propaganda, VICUG NYC http://www.hicom.net/~oedipus/vicug/ 
My question was in the context of providing access for accessibility tools. 
For mechanisms like the CSS :hover pseudoclass, and onmouseover/onmouseout events in the object model, I don't see a clear solution for providing these mechanisms. 
The OM is particularly difficult, because I've seen lots of pages developed that use onmouseover to switch the visible content of another area (a clickless frame-selection, sort of). 
Horrendously bad content-design decision for accessibility, perhaps, but I'd been pondering whether there was some way we could expose that capability to ATs. aloha, chris! is it really necessary to simulate a mouse-over event in the case of exposing the TITLE attribute when used, for example, as an attribute in the definition of a horizontal rule? 
wouldn't it be simpler to offer the user a choice -- i.e. a "Display Horizontal Rules" and "Display Title (where present)" setting for horizontal rules? 
and, while i suppose that this may be a suggestion more appropriately addressed to AT developers, who could substitute the content of the TITLE attribute for a horizontal rule -- provided, of course, that the AT is capable of making a DOM call to obtain the necessary information... which mousover events in particular are you attempting to make available to the mouseless user? 
knowing that would greatly assist us in assisting you... gregory. 
He that lives on Hope, dies farting -- Benjamin Franklin, Poor Richard's Almanack, 1763 Gregory J. Rosmaita unagi69@concentric.net 
President, WebMaster, &amp; Minister of Propaganda, VICUG NYC http://www.hicom.net/~oedipus/vicug/ 
AG: Caveat: I haven't read others' responses to this, yet. 
Before I get into specific solutions scenarios, I want to review a few things I think me may know about a solution if there is one. 
There is a concept of severity or weight of consequences that us useful in understanding how different events are used. 
The main idea I have at the moment is that OnMouseOver is a light touch, OnHover is a slightly heavier touch, OnClick is a heavier touch yet and OnDoubleClick is the heaviest touch of all these. 
What we really want is the ability to classify the actual consequences of running the even-handler script, and extract severity grading appropriate to the class of change and the current operational profile of user interface couplings. 
But lacking adequate visibility into the transaction associated with a given event, we can guess based on the conventional severity grading of the events used to trigger changes. 
So mapping OnScreenEvent events to some other form of screen-free activation method is something of a hack and a guessing game, but it is still worth doing. 
The basic or universal method is the context menu. 
This is familiar as the right mouse button in Microsoft Windows. 
There is also a dedicated Context Menu key in the Windows 95 keyboard. 
In the absense of a viable screen medium of exchange with graphic display and continuously varying pointing, one wants to create an interaction world of abstract, named objects. 
Anything that has an event handler defined for it is an object with methods. 
Anything that has text content has a speak method in the presence of TTS capability (which is regarded as readily available and is a system capability all services delivering information in text form should be prepared to interoperate with). 
The key to the most generic method of accessing screen-oriented event handlers is the ability to make any object bearing such a method capable of being the current context in the sense of what is exposed by the current context menu. 
The all event handlers should be action opportunities exposed through this menu. 
In addition, there are quite likely other modes of triggering that are useful in specific scenarios. 
One is the machine to teach reading. 
In that case there is a reading cursor which is moving through the speakable content. 
It is quite likely that the OnMouseOver response should be stimulated when the reading process arrives at the leading edge of the reading stream for an entity with an OnMouseOver response defined. 
This may need to be configurable in terms of whether the OnMouseOver response is simply executed in its native terms, or whether any textual content in a transient display is fed to the speaking process as well, and if spoken is it spoken first or last, or does the reading pause at the end of the prime content for the user to elect to read the annotation or press on. 
That's my buffer contents on how to operate with behaviors that the author conceived of as OnMouseOver responses but in user interface contexts where the screen metaphor is not something that is maintainable as a shared two-dimensional graphic frame of reference shared by application and user. 
Al aloha, chris! 
this is something that concerns me greatly as well, but more from the perspective of obtaining any information derived from javascripted events that are exposed by on mouseover ... to take an example close to home, consider the main Microsoft home page as i noted in a UA teleconference some time in june or july, the toolbar slash nav bar at the top of the page offers the following options: Home Events/Training Subscribe About Microsoft US/Worldwide Downloads MSN.com all of which are voiced when one navigates the page sequentially using the tab key... however, on mouseover, each of the items in the tool/nav bar spawn a pop-down submenu of options that are not available to me as a speech user -- even if i traverse the nav/tool bar with JFW's mouse emulation cursor, despite the fact that a sighted colleague can see the extended options appear on the screen... the drop-menus that are spawned on mouseover are not automatically voiced, nor can they be considered navigatable as: 1. without sighted assistance, there is no way for a blind user to know that they have been painted to the screen 2. even if one has such foreknowledge, it is difficult to navigate the drop-down menu using speech, as the entire line of text (i.e. everything on the screen, including the text which is partially obscured by the drop-down menu) is read, making it difficult to ascertain what text belongs where -- a difficulty which is exacerbated by the fact that when one queries JFW for font and attribute information, it returns the font and attribute information for the text behind slash beneath the mouseover invoked drop-down menu... gregory He that lives on Hope, dies farting -- Benjamin Franklin, Poor Richard's Almanack, 1763 Gregory J. Rosmaita unagi69@concentric.net 
President, WebMaster, &amp; Minister of Propaganda, VICUG NYC http://www.hicom.net/~oedipus/vicug/ 
Frames is a good metaphor. 
Take for example the New Yorker readerlink page http://www.newyorkerreaderlink.com/index2.html . 
Here there is a set of blurbs which occupy the central display space depending on which subtitle arrayed around the main title one has the mouse over. 
Clearly this linearizes to a hierarchical tree structure with a major head, a list of subhead, blurb modules, and then on to the rest of the page. 
But the bodies of the subsections are buried in the scripts. 
This is where the polyglot page-definition medium really bites us. 
The key is that there is a simple information structure, but it takes coordinated changes in display and behavior to map it into the audio environment in a constructive fashion. 
Without scavenging HTML-equivalent content out of the scripts and just managing how they are run, one can still make this structure accessible by making the subtitles readable and attaching to each subtitile a "doOnMouseOver response" action opportunity and trap the mutation event when the page content is changed by running the script. 
Then the user would automatically or on election hear what had changed on the page. 
This would provide a usable if not optimal way to navigate the information contained in the HTML and script, both. 
Al Chris, One way the group has discussed is to make elements that can respond to events (like mouse over) part of the list of active elements that the user can sequentially move to with the TAB key of IE. 
The user could then use a keyboard command to get a list of events an element can respond to and simulate the event by selecting it from the list. 
This should be a user configurable option, due to the potential impact on the number of elements the user would need to navigate (for example if their was an event on the BODY element every element in the document would be associated with that event). 
The number of elements could potentially be more managable if only elements with explicit event handlers were added to the list of active elements. 
Jon 
