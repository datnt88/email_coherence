This is my attempt to converge on one TABLE proposal from Dave and Al message. 
Added Dave's example for SCOPE and tried to regourp ref to the LINK/META proposal and mention their relevance to RDF. 
I think we need to be more compact for the HTML WG, closer to the DTD diff format without going that far. 
Sort of a summary at the end. 
We can work on that in the upcoming week. 
TABLE Making TABLEs comprehensible BACKGROUND: Tables have been a serious problem for people using audio browsing. 
Today HTML pages use tables for two purposes: to layout pages, and to present tabular information. 
Both uses present accessibility problems. 
When tables are being used purely for visual layout, the issue is mainly one of reading order and style sheet are probably the best way to go int hat situation. 
This message will focus on how to improve the browsing experience for tabular information. 
Tabular information generally consists of headers and data. 
Imagine using a speech-based browser to examine a table designed for visual browsers. 
If there are more than just a few cells it will be easy to forget the headers as you move from cell to cell. 
If there was some way of knowing which headers are appropriate to this cell, then perhaps you could ask for these headers to be spoken, either on request, or automatically when you move to a new cell. 
This will work much better if the author has been so kind as to provide abbreviations for headers. 
We also need to improve communication between applications and screen readers. 
Sometimes what browsers do to de-tabulate table contents works better than the tabular presentation; sometimes you really have to browse the material in its two-dimensional pattern of relationships to get what you are being told. 
The HTML working group has introduced new features in version 4.0 to fix this situation, and the HC working group has recommended that the WAI ask for a little more. 
PROPOSAL: The WAI Browser Guidelines group should seek functions from browsers which break down a table into alternate presentations. 
One useful alternate presentation is a hierarchical list such as is used for listing tables of contents. 
The WAI Markup Guidelines group should develop recommended CLASS values to be used in TABLEs to indicate when tables should be read by rows, when by columns, and whatever other structural classes they find necessary to guide the selection of non-tabular presentations. 
The AXIS attribute in HTML can be used to group rows or columns into related groups and this should be used to guide browser functions that list table contents. 
For audio browsing it is important to have a clear indication outside the visual layout of which headers go with which body cells in a table. 
The SCOPE and AXES attributes, together with defaulting rules, should be used to capture this information. 
The WAI Browser Guidelines and Markup Guidelines can be used to clarify defaulting rules and compatible markup practices using SCOPE, AXES and CLASS. 
The proposals for specifying which headers are relevant to each cell are designed to allow these headers to be grouped and for these groups to be ranked. 
This is intended to give implementors the freedom to treat the table as a hierarchy that is independent of the visual layout chosen for windows based browsers. 
The idea is to allow large and complex tables to be browsed in a similar way to browsing file system directories, with the ability to hide or expose levels of detail. 
The scope attribute allows authors to state whether a given header applies to the current row, column, row group or column group. 
This takes advantage of new table features in HTML 4.0 for specifying column properties and for grouping rows and columns. 
Scope works well for most simple tables. 
Here is an example: TABLE summary="History courses in Bath arranged by course name, tutor, summary, code and fee" TH colspan="5" scope="colgroup" Community Courses - Bath Autumn 1997 /TH The summary attribute is used to summarise the role and structure of the table: "History courses in Bath arranged by course name, tutor, summary, code and fee" Each row is represented by the TR element. 
The first row contains column headers. 
These are marked up using the TH element, each of which has scope="col" to indicate its role as a column header. 
The abbr attribute is used to provide an abbreviation for longer headers. 
The next row is marked up as: The course will examine the turbulent years in England after 1646. 
EM 6 weekly meetings starting Monday 13th October. 
/EM The TD element is used to markup each data cell. 
The first cell in the column gives the course name. 
Since this is considered to be helpful when browsing subsequent cells in the row, it has been marked up with the scope attribute, this time with scope=row to indicate that its relevant to the rest of the current row. 
The scope attribute is of limited generality. 
For cases where it breaks down, we propose an attribute called "axes" that is used to list the ID's of all relevant headers. 
The name is based upon the idea of thinking of tabular data in terms of values at points in an n-dimensional space. 
The headers then form marks along the axes of this space. 
An attribute called "axis" is used to supply a name indicating which axis a given header belongs. 
Scope and axes are interelated and implementors are likely to map them both into the same internal model of which headers are relevant to each cell. 
Finally, there is interest in being able to associate tables with meta-information that describe richer semantics about the table. 
The WAI Browser Guidelines group should seek functions from browsers which support browsing tables on a cell-by-cell basis. 
Moving through the table by one or some number of cells up, down, backwards, and forwards are desirable. 
A more extensive strawman operational model is available. 
See the REF&amp;META discussion for more on this, in particular how it relates to RDF. 
The W3C should ensure that a table can be linked to a data dictionary or other resource providing additional documentation of the data usage in the table. 
One way to do this in HTML is to provide the capability through LINK elements. 
See the REF&amp;META discussion for more on this. 
Finally, the SUMMARY attribute should be suitable to be spoken after the CAPTION element, when there is a CAPTION for a table. 
This should be made clear in the WAI Markup Guidelines, and in the prose of the HTML specification as well. 
QUESTIONS: These are representative questions the Interest Group may wish to discuss. 
How would the proposed markup be applied to this table (give URL)? 
Who has experience with browsers that support cell-by-cell browsing, and how did it work? 
FOLLOW UP: Please discuss this issue by sending email to w3c-wai-ig@w3.org . 
Include the symbol TABLE in the subject heading of your message, to help other subscribers organize the volume of mail we hope this will generate. 
I think you mean "to address this issue" or some such. 
This is misleading. 
AXIS is designed for grouping cells that act to mark points along an axis, for instance dates, categories of expenses, types of bagels, pizza toppings etc. 
The grouped cells are not constrained to be in a given row or column. 
Axis is used to group headers for two purposes: a) to allow style sheets to control when relevant headings are spoken either always before each cell, or just when the cell you have moved to corresponds to a different header in the same group, e.g. moving down a column, would suppress speaking the column header, while moving across a row ould suppress the row header. 
The style sheet property for this is in the latest CSS2 draft. 
b) to enable the table to be recast as a hierarchy, where each branch corresponds to choosing a header from a group. 
This gets away from a reliance on the visual arrange of table data and offers the possibility of being able to suppress or expand levels of detail. 
Axis is therefore a valuable addition to table markup. 
Regards, -- Dave Raggett dsr@w3.org 
http://www.w3.org/People/Raggett World Wide Web Consortium (on assignment from HP Labs) to follow up on what Dave Raggett said: This is misleading. 
[snip] Thanks for pointing out this discrepancy in the way I said it. 
I will edit that part. 
How about: "The AXIS attribute in HTML can be used to associate table cells with a conceptual category such as dates, expense catetories, etc. 
This can be done on the individual cell or indirectly by an AXIS value on a header cell which describes a cell in the body of the table." 
I was only thinking about the hierarchy part and the scenario where the first level of grouping is accomplished by binding a TD to one or more TH's by SCOPE or AXES and the AXIS attribute was only used at higher levels in the hierarchy. 
I agree we don't want to give the idea that the capability is resricted to that. 
The picture I am getting is that AXES and AXIS are used to link from a value [nominally in a TD but de-facto in a TD or TH] to a category of values. 
If the category of values is described by the contents of another cell [nominally a TH, but de-facto a TD or TH], the one included the ID of that other cell in the AXES value of the current cell. 
If the category is not described by the contents of another cell, one has the opportunity to put one mnemonic identifier in the AXIS attribute of the current cell. 
If the category is a super-category of a category described in a table cell, then the above markup emanates from the category-describing cell for the sub-category. 
It is unfortunate that AXIS only allows one value. 
In practice we do use multiple, overlapping sets of categories in grouping. 
The example I found, motivated by a real table, is the matter that the econometric data for the first quarter of 1996 is a part of at least two wholes: The four quarters of one year The multiyear series of first-quarter statistics I don't have the capability to tie a cell or cell category two ways to accomodate this with the single-entry limitation in AXIS. 
-- Al to follow up on what Dave Raggett said: Yes, I will fix that. 
-- Al I guess we could extend AXES to support this. 
The question then is what syntax? 
Space separated lists are conventional in SGML, but this presupposes the list items are single words. 
I would prefer to use a comma as the delimiter in this case to give authors more flexibility in choosing axis names, the motivation being the ability to use the axis name in "explanations" of the table structure. 
Regards, -- Dave Raggett dsr@w3.org 
http://www.w3.org/People/Raggett World Wide Web Consortium (on assignment from HP Labs) to follow up on what Dave Raggett said: AXIS -- No? We could stick to the space-separated list of lexical atoms and if we want to put in long equivalents we use Jason's XML dictionary format (e.g.) in foreign-language fragments like the STYLE definitions in the HEAD of a page. 
Or maybe this is even legal CSS to apply optional expansions in some CSS2 utilities that higher-level stylesheets can exploit. 
-- Al to follow up on what Al Gilman said: [snip] If the truth be known, what I really think about AXIS is that it is just CLASS under another name and can be dropped. 
I don't see enforceable semantics above and beyond CLASS that goes with calling a name or string an AXIS. 
If you had an AXIS one-word term, it would be a legal and appropriate use of CLASS. 
I think that our best deal is to go forward with a free-for-all of one-word class designators and when we hit a collision we disambiguate the term by a LINK tying the element holding an ambiguous CLASS term to a lexicon resource in which the correct definition of that CLASS term is given. 
And, as I said before, the CLASS attribute should be just short keys to the classes and long forms are dictionary business. 
-- Al There is indeed a similarity, but I am concerned that not all class names are appropriate for grouping headers into categories for the purpose of rendering tables as hierarchies etc. 
This would also screw up the simple application of style sheets for indicating how headers are to be spoken as you move from cell to cell. 
This ties into another issue I would like to address, which is to provide an explicit way for authors to rank axes. 
This is important for rendering the table as a hierarchy as it determines which level of the hierarchy given header groups occur. 
One solution is to add an attribute to the table element for listing the axes in decreasing order of importance. 
Lets call this "axes". 
We now can safely use the class attribute on cells to say which axis or axes a given header belongs as we can use the axes list to tell which of the classes are axes names and which are not. 
At this point we could even choose to rename the attribute on cells that lists the headers that are relevant to that cell, for instance "headers" might be a more natural name for this. 
Any comments? 
Regards, -- Dave Raggett dsr@w3.org 
http://www.w3.org/People/Raggett World Wide Web Consortium (on assignment from HP Labs) On further thought I wish to retract to suggestion for an attribute on table for listing the axes names. 
This doesn't provide the means to express the hierarchy adequately unless you start to use brackets a la lisp! 
I therefore stand by the current axis/axes definitions. 
Regards, -- Dave Raggett dsr@w3.org 
http://www.w3.org/People/Raggett World Wide Web Consortium (on assignment from HP Labs) to follow up on what Dave Raggett said: I am not sure this is a problem. 
The rules about which companion columns/cells are to be spoken on row-transition, for example, are not dependent on all the CLASS values present but on the presence in the CLASS list of tokens that they know they care about. 
The only problem comes when your favorite stylesheet for table speaking is sensitive to class names that are being used on the same cells/columns/rows/etc for other reasons because different class-mark inventors accidentally using the same term. 
That is when you have to start rewriting the names as assumed in the foreign domains and explaining the relationship between the new symbols and the old (symbol, application) pairs; that's a local glossary in the current page using some dictionary format. 
On the whole I agree but I want the author to be able to indicate a partial ordering. 
The top priority for the user is that the browser gives the user the ability to control the sorting hierarchy governing the list-out. 
Giving the author that capability is nice, but not so important to accessibility. 
The problem is I don't think we get to the right answer on this without an analysis which is both broader and deeper. 
My concept of how we should do this is analyze requirements for object capability, and converge on an object model. 
Then determine a systematic plan for migrating HTML to support an appropriate, tailored view of that class system. 
The kind of generic language construct that one could see wanting is a DEFINE block -- doesn't have to be called that -- but it is an invisible composite -- a container restricted to contain nothing but other [normally-] invisible elements. 
In it would be assertions that get applied collectively as an atom to the enclosing scope or some TARTGETed domain of appication. 
The problem with CLASS values in HTML now is that they only have spellings. 
They have no declaration or ID one can hang further information on. 
In typeful languages like VHDL you have type-qualified references such as CLASS'length for "the string 'length' were it appears as a value of the attribute 'CLASS'." 
I don't see where we have that powerful a naming capability in HTML. 
You could define [/refine] the semantics of a CLASS value in HTML if there were the appropriate declarative mechanism. 
If that existed, you would want it to be consistent with declarations for a variety of purposes. 
That is sorta why I am suggesting that in the time available we let CLASS values be dumb tokens and for those with the capability to make them smart we give the option to link to an external glossary that explains usage (defines the classes...). 
-- Al AXIS and CLASS should be kept distinct. 
The possibility of a conflict between a category name and a class used by a style sheet, is significant enough to justify a separate AXIS attribute as proposed in the HTML 4.0 draft. 
The table markup should be as simple as possible, whilst providing the flexibility that is needed for effective audio rendering. 
I would therefore discourage excessive dependence on dictionaries or other external data formats. 
Such supplements to the markup are useful extensions, but should not be essential to the representation of the table's structure. 
