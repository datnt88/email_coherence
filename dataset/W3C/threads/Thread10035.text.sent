I'm suggesting to treat strings with xml:lang specifiers as a new datatype (call it "language-tagged string"), disjoint with xsd:string. 
Similarly, XML infosets should simply be yet another datatype, disjoint with any other XSD datatype. 
These two datatypes were essentially defined as such in the original RDF spec. 
Now that we have a general-purpose datatyping mechanism, we can make use of it. 
The two datatypes should get their own URIs. 
If there is enough support for that, I'd like to put the above point for vote at the next telecon. 
The current proposal for representing typed values in the abstract syntax (URI + string) fails for the above datatypes. 
Therefore, I'm also suggesting that this overspecification is not required. 
In the abstract syntax, typed literals may be kept as opaque constants, whereas the applications may use their internal representation of choice. 
Sergey Er... as far as making group decisions, we're supposedly done. 
We've disposed of all our issues. 
I'd really rather not put new issues in the ciritcal path. 
Maybe you can just work with the editors to make this a natural consequence of the decisions we made on datatyping; it seems reasonably consistent with what we discussed. 
i.e. in stead of suggesting this for the WG agenda, I suggest you just take it straight to the editors. 
which proposal is that, exactly? 
I gather the status quo (i.e. what exactly the WG has decided) is rather sparsely documented (e.g. the whole discussion of tidy/untidy options was reduced to pretty much one bit in today's telcon record), and the editors have actions to figure out all the details. 
ACTION: 2002-09-13#2 Graham to update concepts doc to cover 1.1, 1.2, 2.2, 2.3 to reflect datatype concensus ACTION: 2002-09-13#3 Danbri to update schema to cover 2.1, 3.1, 3.2, 5 to reflect datatype concensus ACTION: 2002-09-13#4 PatH to update model theory to cover 4 to reflect datatype concensus ACTION: 2002-09-13#5 FrankM to update primer to reflect datatype concensus ACTION: 2002-09-13#6 Jan to create testcase to reflect datatype concensus -- http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2002Sep/0178.html 
Dan Connolly, W3C http://www.w3.org/People/Connolly/ 
I've tried to make the following point before, and will try again. 
The datatype of a literal is disjunct from any xml:lang attribution, and a literal can be specified for both. 
E.g. xsd:string"This string is not a valid token."-en 
xsd:token"moi"-fi Thus, it is not always the case that the datatype for language qualified literals is xsd:string. 
It may be some subtype of xsd:string or other string type, and the specific datatype is of course significant. 
And although the xml:lang does not affect the L2V mapping and is ignored by the datatyping machinery, it still is relevant to applications. 
It must then be possible to specify both datatype and xml:lang for a given literal. 
Patrick Patrick Sender:ext Sergey Melnik melnik@db.stanford.edu 
I'm suggesting to treat strings with xml:lang specifiers as a new datatype (call it "language-tagged string"), disjoint with xsd:string. 
Similarly, XML infosets should simply be yet another datatype, disjoint with any other XSD datatype. 
These two datatypes were essentially defined as such in the original RDF spec. 
Now that we have a general-purpose datatyping mechanism, we can make use of it. 
The two datatypes should get their own URIs. 
If there is enough support for that, I'd like to put the above point for vote at the next telecon. 
The current proposal for representing typed values in the abstract syntax (URI + string) fails for the above datatypes. 
Therefore, I'm also suggesting that this overspecification is not required. 
In the abstract syntax, typed literals may be kept as opaque constants, whereas the applications may use their internal representation of choice. 
Sergey Fair enough. 
I interpret it as a voice of support, and I hope that the editors are taking notes... 
I'm referring to the pair vs. value decision taken at that telecon. 
As far as I understand the issue, "pair" means that typed values are represented as pairs in the abstract syntax, e.g. (URI, string). 
"Value" means that typed values are opaque constants in the graph (applications are free to represent them however they like). 
The group voted for "pairs". 
My observation is that there is no room in a (URI, string) pair to keep e.g., an xml:lang value, if the language-tagged strings is a separate datatype. 
My suggestion to the editors is to make the pairs more flexible, e.g., (URI, something). 
Sergey Language-tagged strings in RDF are not subtypes of xsd:strings, and aren't subtypes of xsd:tokens either. 
Is that what you are claiming? 
In mathematical terms, there is no total injective function from language-tagged strings to xsd:string... No, it cannot be a subtype of string. 
It can only be a derived type defined over a cross-product xsd:string x xsd:string. 
Of course, therefore language-tagged strings should be a separate datatype. 
I don't see any utility of making the language attribution orthogonal to datatyping. 
Sergey [Patrick Stickler, Nokia/Finland, (+358 50) 483 9453, patrick.stickler@nokia.com] 
Yes. 
Datatypes are formal languages with very precise intepretations of their lexical representations. 
And we often mix formal and natural language intepretations for the same lexical representation. 
See below. 
I'll take your word for it ;-) Ummm, isn't a derived type a subtype? 
Perhaps we need a mini-glossary for this discussion. 
I've already given one example of how one may wish to constrain property values to datatypes other than xsd:string and still specify the language in question. 
We may wish to say that the datatype for a given property (or literal) is a token list, or an XML name, or some other string-derived datatype, yet also state that values of that property (or the particular literal) has meaning according to a particular language. 
These two types of attribute, datatype and language, are disjunct; even though there are similarities in the machinery of datatyping and natural language. 
And though there is not presently any notable interest (that I can tell) for datatyping XML literals, should we do so, then the disjunct relationship of complex (structured) typing and language attribution becomes even clearer. 
Patrick [Patrick Stickler, Nokia/Finland, (+358 50) 483 9453, patrick.stickler@nokia.com] 
The WG voted for the technical foundation outlined in part 1 of the restructured datatyping specification, which specifies (URI, something) where that something is a literal, which is a unicode string with optional language tag. 
I.e. a typed literal is a structure that contains a literal which is itself a structure. 
Have a look again at part 1 to see how this is specified. 
I forget the www-archive URL, but it is also available at And per my recent proposals, we can treat all literals as typed literals, where the first member of the pair is either a datatype URIref or a systemID implicitly denoting the datatype, thus, per part 1: literal ::= [ xmlFlag ] unicodeString [ languageTag ] typedLiteral ::= ( datatype, literal ) datatype ::= URIref | systemID Or, better, just make the datatype a manditory part of the literal structure: literal ::= datatype [ xmlFlag ] unicodeString [ languageTag ] datatype ::= URIref | systemID which is probably clearer. 
The reason why there was the structural distinction between literal and typed literal in part 1 was because we hadn't yet decided for untidy inline literals at that time, so it was not possible to introduce the datatype denotation as part of the basic literal structure itself. 
Now though we can, and probably should. 
Patrick 
