I recently re-read the text relating to content negotiation in draft-ietf-http-v10-spec-01.txt, dated August 3, 1995. 
This text was taken out of subsequent HTTP 1.0 drafts, and should reappear in the upcoming HTTP 1.1 draft. 
In my opinion, at least half of the v10-spec-01 content negotiation text needs to be rewritten (both changes to the presentation and changes to the semantics). 
I am wondering how many rewriting has been done already. 
My question to the 1.1 draft authors is: will the new 1.1 content negotiation text be very different from the old v10-spec-01 text? 
Will there be cleanups in the presentation? 
Will things previously left unspecified be specified? 
Will there be changes to header semantics? 
I'm trying to decide if I should postpone comments on content negotiation mechanisms until after the new 1.1 draft has been released. 
Koen. 
Amongst other things, yes. 
It's all in pieces right now (split amongst my notes) but I have not physically changed that section of the FrameMaker document yet. 
I am hoping to include reactive negotiation on an equal footing with the current description of preemptive negotiation. 
None planned. 
Will things previously left unspecified be specified? 
Some things, yes. 
What did you have in mind? 
Will there be changes to header semantics? 
Yes, but perhaps not the ones you are thinking of. 
It is difficult for me to read minds, so I can't tell for sure. 
Are they different than the comments already on the mailing list archive? 
If so, then they may be useful, and I'd prefer to hear them before generating a new draft. 
I can change my mind in a nanosecond, but it takes several days to generate a new draft. 
I already have the old comments saved and will review them again before finishing the section. 
I actually made a great deal of progress on it this weekend, so it should be published next weekend (it must be published by Nov 22). 
...Roy T. Fielding Department of Information &amp; Computer Science (fielding@ics.uci.edu) 
Roy T. Fielding: [Koen Holtman:] I have not yet written out any comments, all I have now are notes, but yes, most comments would be different from the stuff already the mailing list archive. 
OK, I'll write out some of the more `high level' notes. 
I tried to define some superstructure to the existing header definitions. 
There are two reasons two have such a superstructure: - it allows one to better state the definitions - it allows one to see areas that are not yet defined. 
This is what came out: `Negotiation port' model of content negotiation For various reasons, web software should distinguish between two kinds of URI types with respect to content negotiation: 1) normal URIs 2) negotiation ports A normal URI (e.g. http://blah.com/animals/cat.gif) is bound to one entity, which may be dynamic (the entity may change through time). 
There is no content negotiation when accessing a normal URI. 
A negotiation port URI (e.g. http://blah.com/animals/cat) is not bound to an entity, but to a `variant set', which is a set of normal URIs, e.g { http://blah.com/animals/cat.gif , http://blah.com/animals/cat.jpg 
} , where each element in this set has certain properties known (at least) to the server. 
The variant set and variant properties can be dynamic, they can change through time. 
Normal and negotiation port URIs cannot be distinguished by their syntax. 
To determine the status of a certain URI, a request for that URI must be made: The URI is a negotiation port if and only if an URI: header is present in the resulting response. 
When a user agent does a request to a negotiation port URI P, a content negotiation process is initiated, which results in either an error message at some point, or the choosing of one normal URI U from the variant set, after which the contents bound to U are displayed by the user agent. 
The content negotiation process can take multiple requests and responses. 
In the most simple case, with one request and one response, the request on the negotiation port P generates a 200 OK response, with the response message containing: 1) in the response body: the entity body bound to the chosen URI U 2) in the response headers: 2a) headers describing the variant set of the negotiation port P (e.g. URI) 2b) the entity headers for the chosen URI U (e.g. Content-type, Location, Last-modified) 2c) headers about the whole response (e.g. Pragma, Date) One of the unresolved issues is: for every response header, does it go under 2a), 2b), or 2c)? 
One particular sticky issue is the Expires header. 
Does it apply to both URI P and URI U? Would two different expires headers (say Expires for 2b) and Port-Expires for 2a) ) be better? 
There are a number of reasons for adopting the above model with its clear dichotomy between two types of URI: - Conceptual simplicity. 
This is especially important because the negotiation will be visible, on request, to the end user. 
One requirement for content negotiation is that the user can manually request different variants of a content negotiated resource. 
This model - has no recursive negotiation, which may be nice to have for CS purists, but which also makes a clear presentation of the available variants to the user a lot more difficult - ensures that each variant has its own URI by which it can be reached directly - I expect that having this model will make the semantics of strange combinations of headers more easy to define - `emulation' of content negotiation by proxy caches can be expensive. 
Under this model, caches can always recognize normal URIs (which make up at least 99% of all current URIs), and can remember that they do not need to emulate negotiation for them when serving them from the cache. 
Summary of caching related things that need to be defined: - how do we express the dynamism of a) The variant set and variant properties bound to the negotiation port P, and the property that P is a negotiation port b) the entity bound to the result URI U - when may a conditional GET with date D on a negotiation port return a `not modified' code? 
i) if a) above was not modified since date D? ii) if both a) and b) was not modified since date D? OK, that sums up the superstructure and the caching issues. 
I have more notes, some about the negotiation calculation itself and some about a new option in reactive negotiation, but I don't have time to expand them now. 
I'll see if I can send them tomorrow. 
Koen. 
As promised, here are some more notes on content negotiation. 
The text below assumes that you know what a `negotiation port' and `variant set' is, see my previous message. 
Reactive negotiation There are two possible forms of two-round-trip reactive negotiation. 
They start out the same: 1) Client sends a request with some small set of accept headers X to a negotiation port on URI P 2) Server calculates the quality values for its variants, but has insufficient information in the headers X to determine which variant would match best to the client capabilities. 
Server responds with a 300 Multiple Choices or 406 None Acceptable response containing an encoding of the variant set V bound to P, also listing some of the properties of the variants. 
First form: early reactive negotiation (as in the v10-spec-01 text) 3A) Client chooses the URI U with the highest quality from the variant set V and issues a request for the contents of U 4A) Server sends back the contents of U I call this _early_ reactive negotiation because the variant selection is done early, in step 3A. Second form: late reactive negotiation (new, proposed) 3B) Client sends a new request on the negotiation port P with _different_ accept headers Y. The headers Y are i) for naive clients: headers containing all configured MIME types, languages, etc. ii) for sophisticated clients: headers containing a subset of the configured MIME types, languages, etc. constructed by looking at the variant properties in the variant set returned in step 2): the headers Y would allow the server to unambiguously select the variant with the best quality. 
The client also sends a special `you-choose-one' flag that will force the server to choose and send back one of the variants in its variant set. 
If the `you-choose-one' flag is present, the server may not send a 300 Multiple Choices or 406 None Acceptable response, even if the accept headers still give an ambiguous match to the variant set. 
4B) The server selects the response with the highest quality based on the accept headers Y and sends it back. 
I call this _late_ reactive negotiation because the variant selection is done late, in step 4B. 
The only thing that is needed to add late reactive negotiation to the protocol would be the introduction of the `you-choose-one' flag. 
We may want to introduce such a flag anyway to make 1.0- 1.1 request translation in proxies easier. 
I propose to introduce such a flag. 
Using the `vary' fields in the URI header, proxies can safely cache all transactions in the two kinds of reactive negotiation described above. 
If late reactive negotiation is added to the protocol, making a minimal implementation of a negotiation conformant client is very simple, because the client would not have to have a `variant selection engine' that matches up a user agent profile with a variant set to determine the best variant. 
Also, if early reactive negotiation is taken out of the protocol, `variant selection engines' are only needed in proxies and origin servers, not in user agents. 
That could make it a lot less painful to introduce new variant selection engine functionality in subsequent protocol versions. 
Instead of taking early reactive negotiation out completely, we could also define circumstances under which a client side `variant selection engine' would produce a `cannot determine which variant is best' result, which would cause late reactive negotiation to be used. 
One of those circumstances could be that the client side `variant selection engine' has a lower `engine version number' than the required version number attached to the variant set. 
Again, this would allow smooth upgrades to higher levels of engine complexity. 
Perhaps even more importantly, having a safe way to disable the client/proxy side `variant selection engine' would allow service providers to use special purpose variant selection algorithms that cannot be `run' on client-side `variant selection engines'. 
One example of such a special purpose algorithm is negotiation around known bugs in user agents based on the user-agent header. 
User-agent header based negotiation One of the requirements I have for HTTP/1.1 content negotiation is that variant selection based on the contents of the User-Agent header sent by the user agent is efficient. 
In my opinion, the v10-spec-01 negotiation text does not satisfy this requirement. 
In a typical example, the origin server has 3 different versions of a HTML page under negotiation port URI /some/report: /some/report.html.1 : HTML page without tables /some/report.html.2 : HTML page with tables and tables-in-tables /some/report.html.3 : HTML page with tables but no tables-in-tables, because they would trigger a bug in user agent X. /some/report.dvi 
: document in dvi file format The origin server would use some specialized variant selection rules, e.g. based on a database of client capabilities at the server side, to select the proper version of the HTML page if the client has no dvi viewer capabilities (with a high enough quality). 
Proxy caches and user agents have no hope of doing this negotiation on behalf of the origin server. 
In the case of user agents, this shows that `variant selection engines' in user agents _must_ have the option of saying `cannot determine which variant is best' and delegate the decision to the origin server (as in late reactive negotiation). 
The alternative would be for origin servers to 1) never combine user-agent negotiation with other negotiation, so that it can always be done preemptively or 2) tailor variant sets sent in URI headers for each user agent, so that the client side variant selection engines can never select the wrong variant. 
But then you get into problems with proxy caches that serve more than one kind of user agent, so you would have to disallow caching. 
Suppose that a proxy cache serving a large number of different user agents already has the /some/report variants /some/report.html.1 and /some/report.html.2 already in cache. 
Now, suppose that the proxy gets a request for /some/report from a user agent with a user-agent string X it has not yet seen in earlier requests for /some/report. 
It will then need to relay the request to the origin server, and the origin server will (either immediately or in a reactive negotiation response) send a reply with the correct variant, which happens to be variant 2, to the proxy. 
But this is wasteful, the proxy already had variant 2 in cache memory. 
I therefore propose a new GET request header: Send-no-body-for: list of variant URIs , which would cause a server serving a GET request on a negotiation port to omit sending back the body of the selected variant if the (Location) URI of that variant is in the list. 
For the example above, the GET request would look like: GET /some/report HTTP/1.1 User-Agent: X Accept: something indicating that the user agent cannot handle dvi files Send-no-body-for: /some/report.html.1 /some/report.html.2 and the response would be 20x No Body Location: http://blah.com/some/report.html.2 (no response body here) If we have this header, it is not that bad if the `variant selection engine' in the proxy is unable to select the appropriate variant for a previously unseen combination of varying request headers. 
Being unable to select would cost time because the origin server has to be contacted, but it would hardly cost any bandwidth. 
Thus, if we have this header, there is a lot less pressure on `variant selection engines' in proxies and user agents to always produce a definite result. 
Producing a `cannot determine which variant is best' would only cause an overhead comparable to a conditional GET request. 
This lack of pressure would allow the `variant selection engine' we need to standardize in the HTTP protocol to be simple, which is a good thing. 
We could even decide to do away with `variant selection engines' in proxies and user agents altogether, and use late reactive negotiation only. 
Summary of requirements mentioned in these notes - We need a `superstructure' to the content negotiation headers to allow these headers to be discussed and defined more easily. 
- The content negotiation mechanism should allow a clear presentation of all available variants to the end user. 
- The mechanism should allow negotiation based on the User-Agent header to be efficient. 
- The mechanism should not put too much pressure on client side `variant selection engines' to always produce a definite result. 
- There should be a way to bypass client side `variant selection engines' to allow use of variant selection algorithms not (yet) supported by those engines. 
Summary of proposals in these notes For meeting these requirements in HTTP/1.1, 
I propose that 1) there should be a negotiation model like the `negotiation port model'. 
2) for each response header in a negotiated response, it should be defined whether it applies to the the variant set bound to the negotiation port, the variant chosen, or the response as a whole. 
3) The exact semantics of Expires headers and conditional GETs for negotiated URIs need to be defined. 
4) there should be a `you-choose-one' flag in requests to force a server to select one variant. 
This allows for safe late reactive content negotiation and may also be nice for 1.0- 1.1 gateways. 
5) there should be a Send-no-body-for: list of variant URIs request header to make content negotiation more efficient and take some pressure off the requirements for client-side `variant selection engines'. 
6) Client side `variant selection engines' must have the option of saying `cannot determine which variant is best' and leaving the variant selection to the server. 
7) To allow service providers to bypass client side `variant selection engines' when implementing a negotiation algorithm that cannot be `run' on such engines, the protocol must define at least one situation in which the client side `variant selection engine' must take itself out of the loop and leave the variant selection to the server. 
Koen. 
Dave Kristol: [a long proposal on content negotiation] purist I really despise content negotiation based on User-Agent. 
/purist me-too I don't really like it either /me-too , but I don't think we can live without it: it is the only way to negotiate around user agent bugs. 
One problem with such negotiation is it precludes a user's enabling/disabling features on the User-Agent. 
No it does not, it only does if used incorrectly. 
Suppose someone decided (Jeez, I don't know why) to disable tables in tables. 
If my User-Agent field says Browser/Version-with-tables-in-tables, this negotiation very likely may decide to send a tables-in-tables version of a resource. 
What then? 
Then the service provider used User-Agent based negotiation when it was not appropriate. 
Using the User-Agent header to determine the value of a user-settable part of the user agent profile is of course not possible: User-Agent based negotiation should always be limited to properties that cannot be changed by the user. 
If the user can disable tables-in-tables, we'd better hope that the `tables-in-tables enabled' flag can be accessed by the negotiation process in some way, e.g. because it is in a bitmap of user-configurable browser capabilities sent in an accept header. 
Profiles listing some user agent features that cannot be changed by users may reduce the number of cases in which User-Agent based negotiation is needed, they cannot eliminate those cases. 
(OK, we could have browsers that automatically download the latest bug list for inclusion in the profile, but that would be even more horrible than User-Agent based negotiation.) Dave Kristol Koen. 
