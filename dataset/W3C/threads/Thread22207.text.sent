Attached is a filter test which generated test1.java if you leave out the whatToShow... element. 
Can someone have a look at this and tell me how you would have to specify whatToShow in this case (I've been staring on it a while now) ? 
I'd also like to know how you can refer to constants defined in other interfaces,e.g. NodeFilter.SHOW_ELEMENT. 
Thanks in advance, Jeroen X-Hive Corporation Jeroen van Rotterdam, CEO e-mail: jeroen@x-hive.com 
There was no transform in test-to-java.xsl 
for overriden property accessors. 
I've committed changes to test-to-java.xsl that will now take: and produce class ... implements DOMFilterBuilder { public long getWhatToShow() { return 1; I've committed a modified version of your test as tests/level3/ls/test1.xml and added a "dom3-ls-javac" target to build.xml. 
What you were doing to make FILTER_REJECT and FILTER_ACCEPT visible exploited too much knowledge of how DOMTSML tests were translated to Java and would not allow us to generate other language bindings. 
Symbolic constants, if needed, should be done via entity expansion (as shown in my modification of your test) or expressed as literals (as in all the existing core tests that check that nodeValue is 1 or 3 or whatever). 
If we want to make tests like assert(NodeFilter.SHOW_ELEMENT,1) then we will need to add some specific test construct that will properly handle the lack of these constants in JavaScript. 
Those should be separate tests than testing the implementation which should be independent of whether NodeFilter.SHOW_ELEMENT returns the specified value. 
Thanks, looks good Can you tell me why: Delivers: public short startElement(Element elt) { Instead of public short startElement(Element element) { ?? Jeroen X-Hive Corporation Jeroen van Rotterdam, CEO e-mail: jeroen@x-hive.com 
There are no attributes defined for startElement when it is used to define an inner class method. 
The parameter list is built from the parameter names in the spec. 
Validating the test against the schema is very helpful to identify usage errors. 
For example, in the context of an inner class startElement has no attributes, so it would flag this problem immediately. 
I've been using Sun's multischema validator, primarily because it had a command line that would you validate a fileset against on schema. 
Unfortunately, it seems to have some problems with the entity expansion. 
For my personal convienience, I manually expanded the entities and then fixed the schema validity errors. 
I've put comments in text1.xml where I made changes. 
I don't think there currently any read-write attributes on user implemented interfaces, but for that day, I've added an intermediate get (and set when appropriate) elements on inner class attributes. 
So an implementation of DOMFilterBuilder.whatToShow now looks like: dom3-ls-javac.jar and dom3-ls-jar will now compile the sample test. 
Though I haven't attempted to run the test with a DOM L3 Load-Save implementation. 
