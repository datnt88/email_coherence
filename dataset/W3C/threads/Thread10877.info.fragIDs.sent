I don't think we want to revisit this whitespace issue after we attack stylesheets. 
We are currently defining the input to the stylesheet engine, so we whould discuss it now. 
If we presume that most or all occurances of whitespace in element content will be unlabelled and undifferentiated from whitespace in mixed content, then only the stylesheet writer can properly remove source-formatting whitespace. 
We've said this before, but I want to make sure that we all have the same understanding. 
If I understand correctly, * the stylesheet writer will explicitly have to have a declaration for every element with an element-content content-model to surpress the whitespace * OR we could make whitespace elimination the default in the stylesheet language in which case they would have to have an explicit declaration for every element that has mixed content so that whitespace will not be removed erroneously * OR the author must avoid all whitespace in element content. 
The first will make much larger stylesheets, with lots of repetition. 
The second will make larger (but perhaps not much larger) stylesheets, but is incompatible with DSSSL as it exists. 
The last is user-hostile. 
Have I forgotten any options? 
Are we satisfied with these ones? 
Paul Prescod 
If we presume that most or all occurrences of whitespace in element content will be unlabelled, and undifferentiated from whitespace in mixed content, then only the stylesheet writer can properly remove source-formatting whitespace. 
We've said this before, but I want to make sure that we all have the same understanding. 
That's the most succinct I've seen yet. 
* the stylesheet writer will explicitly have to have a declaration for every element with an element-content content-model to surpress the whitespace * OR we could make whitespace elimination the default in the stylesheet language in which case they would have to have an explicit declaration for every element that has mixed content so that whitespace will not be removed erroneously * OR the author must avoid all whitespace in element content. 
Have I forgotten any options? 
Are we satisfied with these ones? 
What's the real take on (b)'s incompatibility with DSSSL? 
I still 
don't grasp why we can't make white-space removal the default for mixed-content elements, and retention the default for all others 
(I think Panorama does it this way: at least, it did it to me this evening, and I had to insert more markup in an abstruse area of the TEI header to overcome it :-) 
This approach also has the [dis?]advantage of acting as a gentle 
reminder to authors that mixed content is evil :-) ... or is that seen 
as too user-hostile? 
///Peter 
b) * OR we could make whitespace elimination the default in the stylesheet language in which case they would have to have an explicit declaration for every element that has mixed content so that whitespace will not be removed erroneously The result returned by the default construction-rule shall depend on the type of node to which it is applied: ? 
for a node with a char property, it shall return (make character). 
We would have to change that to: "for a node with a char property, it shall return (make character), if the node is not entirely composed of whitespace" or "for a node with a char property, it shall rreturn (empty-sosofo)." 
We're presuming that the input to the stylesheet engine is the output of a parser that doesn't have a DTD. 
So it must presume that all content is mixed content (or make guesses!). 
To be clear, I am using the definition of mixed content on page 320 of the SGML handbook, any mix of data characters, elements and "other stuff" (pis, comments, etc.). 
If that's evil, then SGML lends itself to nefarious purposes... Paul Prescod 
Paul Prescod replied: We're presuming that the input to the stylesheet engine is the output of a parser that doesn't have a DTD. 
So it must presume that all content is mixed content (or make guesses!). 
Sorry, I missed this condition (before I arrived). 
If there's no DTD, you simply throw all remaining (non-markup) bytes at the app, which should pop up a big red flag if it wants to be nice, otherwise just use some Microsoft/Netscape guesses about what the author must have had in mind... 
To be clear, I am using the definition of mixed content on page 320 of the SGML handbook, any mix of data characters, elements and "other stuff" (pis, comments, etc.). 
If that's evil, then SGML lends itself to nefarious= purposes... 
I agree with you 100%...I've seen some pretty evil DTDs... :-) ///Peter 
