Hi Doug, all, 
Should have mentioned, I tentatively decided to drop the skos:Facet class and the skos:inFacet and skos:facetMember properties in SKOS-Core 1.0 after there was some contention as to whether this had been modelled in the right way. 
But Doug if you think the way it was done was OK for now, then I'm happy to 
re-include it. 
[So the proposed statements to re-add to SKOS-Core 1.0, in N3: skos:Facet a rdfs:Class; rdfs:subClassOf skos:Concept; rdfs:subClassOf rdfs:Class; rdfs:label 'Facet'. 
skos:inFacet a rdf:Property; rdfs:domain skos:Concept; rdfs:range skos:Facet; rdfs:subPropertyOf skos:broaderInstantive; rdfs:label 'in-facet'. 
skos:facetMember a rdf:Property; rdfs:domain skos:Facet; rdfs:range skos:Concept; rdfs:subPropertyOf skos:narrowerInstantive; owl:inverseOf skos:inFacet; rdfs:label 'facet-has-member'. 
The statements above are based on the principal that facets are disjoint classes (although the disjoint condition is sometimes broken and therefore is not expressed as a formal constraint), and facet members are class instances. 
Al. 
Alistair Miles Research Associate CCLRC - Rutherford Appleton Laboratory Building R1 Room 1.60 Fermi Avenue Chilton Didcot Oxfordshire OX11 0QX United Kingdom [mailto:public-esw-thes-request@w3.org]On 
Behalf Of Tudhope D S (Comp) 
Yes, I am becoming more and more convinced that thesauri and classification schemes are just alternative ways or arranging and presenting lists and groups of concepts. 
I therefore am very keen to help arrive at a single set of unambiguous terms which we can use to discuss these things, rather than having to qualify statements by saying that we are talking "in a thesaurus context" or "in a classification context". 
Yes - it would be nice to move to a situation where we just defined a particular kind of KOS and its properties according to a standard KOS scheme and set of terms. 
This is an interesting discussion - I wonder whether other people have views on whether what we are saying makes sense. 
Are we making any progress towards a consensus of opinion? 
Just picking up this thread having returned from a trip - I do think we are fairly close to a broad consensus on the basic notion of a (simple) facet, without getting into any particular set of top level categories or combination rules. 
Eg as per Leonard's previous definitions of a homogeneous class of concepts or the similar definitions in the BSI standards, Aitchison &amp; Gilchrist, etc. 
Some of the other issues, such as roles, synthesis rules for strings, and fundamental categories belong I think to the (next) stage of higher level schemes or OWL definitions for different kinds of KOS. 
However as regards the SKOS RDF scheme, I thought the original SKOS definition of facet was fairly close* to this and I was sorry to see it dropped it from the latest version. 
Did I miss some discussion on this or is it considered something best left for the next version? 
* (My original question boiled down to a couple implementation details: Is a 'facet' best modelled as a type of concept or as a separate entity, when considering future OWL developments? 
Is the Broader relationship best suited for concept-facet relationships, or should it be a basic subclass/superclass relationship?) Doug 
Hi Alistair, a minor comment and a question. 
Comment - since rdfs:label is a human readable label rather than for machines, it seems better to me if you just put spaces between words. 
If you want to auto-generate property names from labels you can do so by globbing them together (or camel-casing them, or whatever) but as far as the machine is concerned you could also do so by selecting random combinations of arabic and chinese characters that don't already appear in your schema. 
This would probably encourage people to build interfaces that look for human-readable text to present things, so may be beneficial (although I suspect there are still enough hand-coders out there that there is some value in legible tag names). 
The question (because I don't know the answer) is "how would you express the disjoint condition in RDF?" cheers Chaals 
[snip] 
All else being equal, I suspect it might make life easier to use a class Facet, so owl:disjointWith can be used directly rather than having to construct intermediate constraint sets 'on the fly'. 
Cheers, Danny. 
to 
Yes I think it does capture the key points and it would be good to include it - the implementation could always be fine tuned later if other ideas surfaced. 
Doug 
