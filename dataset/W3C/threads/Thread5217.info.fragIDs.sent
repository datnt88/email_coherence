I propose that by convention all OWL fragments are given using the reader-friendly abstract syntax, rather than the parser-friendly XML syntax. 
Personaly, I cannot read OWL fragments well enough to be motivated to ever understand the details, so I tend to skip over them. 
Even when I can get motivated, it takes way too much time. 
I would argue very strongly that any public documents published by this WG do use the more readable syntax. 
Why not get used to it when we communicate with each other? 
It will also make it easier to grab things from discussions in the archive and plunk them into documents, instead of having to translate into the abstract syntax suitable for the public. 
Of course, if the discussion is about parsing, or about the syntax of the language, then it is better to use the parser-friendly syntax, both for internal discussions and for publised documents. 
What do people think about this suggestion? 
If the overwhelming majority of this WG actually PREFER to read the parser-friendly syntax, then perhaps I'd best get used to it, but it there are many like me, it makes sense to use a more reader-friendly syntax. 
Mike 
From: Natasha Noy noy@SMI.Stanford.EDU 
Date: Wed, 24 Mar 2004 10:26:00 -0800 
Are there other concrete experience on that, not only theoretical considerations? 
Seems like there are not so many people exploring the terminology-ontology interoperability. 
Or are they? 
I am not sure if Bernard's concern is only about subject hierarchies or about mixing ontologies and terminologies in general. 
If it is the former, than the message below is not very relevant. 
For the latter, here are a few words from the experience in a number of medical-informatics projects in our lab. 
In our experience, the issue of linking ontologies and terminologies comes up often. 
There is no lack of (often reasonably well-structured) controlled terminologies in medical informatics, using them makes sense both from reusability and interoperability perspectives. 
However, in our projects and their ontologies, it inevitably led to mixing classes and instances, and we really didn't find any practical workarounds (although admittedly we were not wedded to DLs, so didn't look too hard). 
Consider for example clinical guidelines (again, this is a practical example from a couple of kb-based systems here). 
A specific clinical guideline (an instance of a class Clinical Guideline) represents the tests, decisions, etc. in diagnosing and treating a particular ailment. 
One of the reference terminologies used here is that of drugs. 
(cf Chris's message later: a drug hierarchy is not a partonomy, it is indeed a subclass hieararchy. 
You have beta-clockers, and specific types of beta-blockers as subclasses, etc.). 
So, a specific instance of a clinical guideline must refer to classes of drugs to be prescribed. 
Again, at a particular step in a guideline you want to prescribe a specific beta-blocker. 
But you want this guideline to be retrieved when looking for all guidelines using beta-blockers. 
Note, the guideline really refers to a class of drugs and not a specific bottle with pills. 
We have had exactly the same experience in using thesauri for annotating art collections. 
For example, the value for the "style" property of a painting is taken by us from the AAT (Art and Architecture Thesaurus) hierarchy of styles and periods. 
Even for seemingly simple attributes like "color" we have found this feature: we cannot treat the color value as a simple instance from a flat value space, as color subtleties can be key issues in art objects (e.g. porcelain) and the thesauri, like AAT, thus contain elaborate color hierarchies (e.g. vivid-pink subClassOf pink). 
[Note: some parts of the style/period hierarchy are in fact based on parts (periods). 
An important practical point however is: these thesauri are out there and they represent community consensus. 
Are we going to discard them because they model the world in the "wrong" way?] 
Interestingly enough, we have also encountered some problems with putting classes as values for Dublin Core elements. 
The maim problem is: how do you define the value type for the Dublin Core slot. 
Our tool uses this to present the annotator with the right subtrees in the thesauri to choose a value for this slot. 
One way to do this is to define for every slot a metaclass that has the top nodes of the subtrees as its instances. 
But that does not lead to the intended semantic interpretation which is: all classes in the subtrees are valid slot fillers. 
In other words, there seems to be no way to express in OWL the Protege notion of "AllowedClasses", in which you define the value type of a slot through a set of classes, with the intended interpretation that all subclasses of these classes are legal slot values. 
The approach we have recently been using actually avoids the use classes-as-instances. Take this example: This is a piece of our OWL ontology for VRA [1]. 
[NOTE: VRA is a specialization of Dublin Core for visual resources [2]. 
The VRA spec defines the VRA elements as specialization's of DC elements. 
This is reflected in the OWL ontology through subproperties, thus allowing for DC's dumb-down principle. 
Note that if the DC elements have been defined as OWL annotation properties, this piece of OWL is actually not OWL DL but OWL Full.] 
The value type of "style/period" (see the union) is specified here through the two top nodes of the relevant subtrees in the AAT hierarchy (&amp;aat;50111078 and &amp;aat;50111079). 
Assume we have a painting for which we want to define the style/period value of "Cubism". 
Cubism is a class in one of the subtrees, so it would not be a legal value. 
Instead, we store an anonymous instance of "cubism". 
In fact, there is something to be said for this solution: the style of a painting is not cubism but some expression of cubism. 
Likewise, a painting is not "blue" but some expression of blue. 
Sorry if this is confusing. 
We have had many long internal discussions about this, and it is difficult to summarize. 
Some of these considerations you can also find in our KCAP'01 paper "From thesaurus to ontology" [3]. 
For examples of the annotation tool see [4]. 
Guus [1] http://www.cs.vu.nl/~guus/public/vra.owl [2] http://www.vraweb.org/vracore3.htm [3] http://www.cs.vu.nl/~guus/papers/Wielinga01a.pdf [4] http://www.cs.vu.nl/~guus/papers/Hollink03b.pdf 
I could find more examples, Hope this helps. 
Natasha 
Free University Amsterdam, Computer Science De Boelelaan 1081a, 1081 HV Amsterdam, The Netherlands E-mail: schreiber@cs.vu.nl 
Home page: http://www.cs.vu.nl/~guus/ 
I object to this strongly -- that syntax is neither reader friendly 
nor actually a part of the recommendation. 
Much more importantly, we should be creating fragments that people can cut and paste into their documents (and edit) -- forcing them to figure out the mapping from the so-called human readable syntax into actually RDF or OWL (XML or 
N3) makes no sense. 
I advocate use of "turtle" - which should be the first document this WG approves as a working note (if Dave is willing) 
what is parser friendly? 
well, we could get into whether this is a voting issue for a WG (be careful when you use words like "majority" in a W3C group) but my vote is for N3 (Turtle) which is a nice compromise - or else to stick w/the RDF/XML for cut and paste reasons -JH 
p.s. Mike - have you noticed our world view doesn't always seem to align :- 
Professor James Hendler http://www.cs.umd.edu/users/hendler 
Director, Semantic Web and Agent Technologies 301-405-2696 Univ of Maryland, College Park, MD 20742 240-277-3388 (Cell) 
MFU Actually, while there are some key views we do not share, often the differences are more apparent than real. 
For example in this note, I'm not wedded to the abstract syntax in particular, it is just one example of a user-friendly syntax. 
We both seem to agree that a reader-friendly syntax would be helpful in some situations. 
I can live with N3 far better than raw OWL/RDF. 
I object to this strongly -- that syntax is neither reader friendly 
nor actually a part of the recommendation. 
Much more importantly, we should be creating fragments that people can cut and paste into their documents (and edit) -- forcing them to figure out the mapping from the so-called human readable syntax into actually RDF or OWL (XML or 
N3) makes no sense. 
MFU: in cases when it is likely that cut and pasting fragments is likely to done, the actual OWL fragment should be available, but I prefer it at the end in an appendix, and to keep the flow of the text more readable and more quickly understood. 
Recent exchanges which had varoius OWL fragments, I think are very unlikely to be cut/pasted and parsed. 
I advocate use of "turtle" - which should be the first document this WG approves as a working note (if Dave is willing) 
what is parser friendly? 
well, we could get into whether this is a voting issue for a WG (be careful when you use words like "majority" in a W3C group) but my vote is for N3 (Turtle) which is a nice compromise - or else to stick w/the RDF/XML for cut and paste reasons -JH 
p.s. Mike - have you noticed our world view doesn't always seem to align :- 
Professor James Hendler http://www.cs.umd.edu/users/hendler 
Director, Semantic Web and Agent Technologies 301-405-2696 Univ of Maryland, College Park, MD 20742 240-277-3388 (Cell) 
Mike, 
I strongly support your suggestion about this. 
I recently sent an email to the protege discussion list about this (see [1]). - Protege's OWL pluging is already able to export the Abstract Syntax, - they are about to make a new tab for it which allows you to copy/paste 
the abstract syntax from the screen 
- there is an on-line service in Manchester which translates the XML/RDF 
syntax to Abstract Syntax (see [2]) 
(all we need is a convertor in the other direction (should be easy) - all examples in our new textbook ( http://www.semanticwebprimer.org ) 
are also given in abstract syntax, 
- see [3] and [4] for a long example (the infamous wildlife example) in both raw RDF/XML and Abstract Syntax, and see the difference Frank. 
[1] http://protege.stanford.edu/mail_archive/msg08462.html [2] http://phoebus.cs.man.ac.uk:9999/OWL/Validator [3] http://www.cs.vu.nl/~frankh/spool/wildlife.owl [4] http://www.cs.vu.nl/~frankh/spool/wildlife.abs 
As always I share both Jim's and Mike's concerns - despite them disagreeing. 
It really doesn't help that the abstract syntax to triples mapping is many-to-many ... 
Jeremy 
A further concern I have is that many Semantic Web users use mainly RDF with maybe just a tiny bit of OWL ... To communicate with them OWL Abstract Syntax is not appropriate. 
Jeremy 
Remember who is our 'customers' here, the syntax should rather help 
them than us. 
In most cases I believe that the 'customer' will be engineers trying to build systems using RDF/RDFS/OWL, me being one of them. 
These people are usually already quite familiar with XML and possibly RDF, and it is actually easier using an RDF/XML syntax. 
Cut and paste reasons was actually very useful in HTML. 
David 
David Norheim wrote : 
Very much agreed. 
For 'angle-brackets' people, RDF-OWL looks first like just yet another 
XML dialect. 
So, many of them will come to OWL through the RDF-XML syntax, because this is 
a language they know. 
Then they will hopefully switch to semantics - although an identified pitfall is to have hackers using OWL as yet another convenient XML vocabulary without understanding well or caring about its semantics. 
If we can't speak to those guys their own language, there is a whole part of the SW target market and potential developers that we might miss. 
Bernard 
Hi, Would it be impractical to consider having both syntaxes in the documents issued by this working groups? 
Something like in the test case document of OWL: 
owl:Class rdf:ID="A" first:ap owl:Class rdf:ID="B"/ /first:ap /owl:Class owl:AnnotationProperty rdf:ID="ap"/ first:A rdf:type owl:Class . 
first:B rdf:type owl:Class . 
first:A first:ap first:B . 
first:ap rdf:type owl:AnnotationProperty . 
Fabien. "The best way to steal souls is to divide peoples." 
|__ _ |_ http://www-sop.inria.fr/acacia/personnel/Fabien.Gandon/ 
(_||_) INRIA Sophia Antipolis - ph# (33)(0)4 92 38 77 88 
I have code that does that - what was being asked for was yet another format 
(based on OWL abstract syntax) for which a very good advert is the work Guus 
circulated on WordNet. 
I don't find any of these ideal. 
Jeremy 
As I understand it, RDF Schema is a subset of OWL, so why would the abstract syntax would be less appropriate? 
Mike 
A further concern I have is that many Semantic Web users use mainly RDF with maybe just a tiny bit of OWL ... To communicate with them OWL Abstract Syntax is not appropriate. 
Jeremy 
I'm not talking about mapping the abstract syntax to any triple, just to those triples that are part of OWL [expressed in RDF]. 
I thought the abstract syntax was just an syntactic variant, therefore the mapping (I would expect) should be, at least for semantic purposes, one to one. 
Any differences should not interfere with human understanding, nor machine-processing. 
Am I mistaken? 
MIke 
As always I share both Jim's and Mike's concerns - despite them disagreeing. 
It really doesn't help that the abstract syntax to triples mapping is many-to-many ... Jeremy 
because there is no reason for the whole world to have read the OWL S&amp;AS document just so they can understand our examples -- esp. 
folks interested in RDF linking more than OWL's modeling properties. 
Professor James Hendler http://www.cs.umd.edu/users/hendler 
Director, Semantic Web and Agent Technologies 301-405-2696 Univ of Maryland, College Park, MD 20742 240-277-3388 (Cell) 
As a non-member of the WG, I'm reluctant to interfere, but since it's on the public list, what the heck: Arguments so far: 
- Mike wants AS because RDF/XML hurts his eyes 
- Jim doesn't want AS because (he says) it isn't part of the specs, and proposes N3 instead - Jeremy points out the relationship with RDF, and says AS is not appropriate for RDF-only users 
- @@forgot-who@@ points out that RDF/XML is the appropriate syntax for an 
engineering audience. 
My $0.02: 
- I find it very surprising that anybody believes that any single syntax will do for all purposes, and all audiences. 
So at least, in the WG documents, you should think who the intended audience of the document is, and what is most suited for them. 
Sure, RDF/XML is appropriate for some (e.g. a document for engineers about parsing OWL), but not for all. 
A good witness for that is the following: 
- In his invited talk at ISWC'03, Tim listed a number of "Risks for the Semantic Web" [1], including: "RDF/XML syntax shock". 
I think this suggests 
that Mike is not alone, and that indeed RDF/XML is not the solution for all 
audiences, at least in the experience of Tim (and why else would he have done N3?) 
- Of course, syntax is also a matter of taste, and indeed, N3 is already a whole lot better than RDF/XML, but we might as well use parts of the W3C spec's rather than non-spec notations. 
I find it strange that Jim argues against the Abstract Syntax on the grounds that it isn't part of the OWL specs (while it is, see [2]), and then argues in favour of N3, which has no formal status whatsoever. 
Frank. 
PS: it would be a great service to the community if anybody wrote an AS-to-RDF/XML convertor (Sean Bechhofer has already done the inverse (and much harder) direction, at [3]) [1] http://www.w3.org/2003/Talks/1023-iswc-tbl/slide4-0.html 
[2] http://www.w3.org/TR/owl-semantics/ the table of contents lists the Abstract Syntax (section 2) as "Normative" [3] http://phoebus.cs.man.ac.uk:9999/OWL/Validator 
Frank - this was indeed an error on my part -- typing too fast -- I was trying to say that not all the specs included it (RDF and RDF S dont) nor do all the Owl specs (WG chose to use RDF/XML) -- my apologies for poor wording. 
I also didn't actually argue in favor of N3 per se -- I argued for Dave BEckett's Turtle, and suggested the WG could make it a note -- not a spec, but a very useful way to write RDF/OWL - even better than the AS in many cases IMHO 
however, I do agree with your conclusion: 
However, I personally have always had far more difficulty reading the AS than the N3 or RDF/XML -- I also notice that my favorite SW text 
to date [1] uses the RDF/XML syntax as the common denominator 
language - so I suspect this, like lots of other things, is not something where there are hard and fast rules as to which is better for what... -JH 
[1] A Semantic Web Primer, Antoniou and van Harmelen, MIT Press, forthcoming. 
Professor James Hendler http://www.cs.umd.edu/users/hendler 
Director, Semantic Web and Agent Technologies 301-405-2696 Univ of Maryland, College Park, MD 20742 240-277-3388 (Cell) 
Touche...:-) Actually, just before it was shipped to the press, we rushed in an appendix with all OWL examples listed in AS. (I attach them to this msg). 
In fact, the appendix was done under serious pressure from members of our preprint reading group that weren't SemWeb insiders. 
But we might take up your suggestion for the next edition, and relegate the RDF/XML to the appendix instead:-) We will make the OWL code (in both AS and RDF/XML) available at 
Main thing is: it's good to hear the WG will consider which syntax to use in 
which documents! 
Frank. 
"there is no reason for the whole world to have read the OWL S&amp;AS document just so they can understand our examples " 
One way to address this might be to have a short/sweet tutoiral on the AS. 
One way to deal with the syntax shock Tim mentions (and that I continue to experience every time I see some), is to assume that in general, few folk in the world will be EXPECTED to read raw OWL (or RDF) syntax. 
Exceptions include those who need to be concerned about the syntax and parsing of the language. 
I advocate this position, something more readable is needed. 
If we agreed that far, we could begin discussion of what particular variant(s) are preferred. 
Mike 
because there is no reason for the whole world to have read the OWL S&amp;AS document just so they can understand our examples -- esp. 
folks interested in RDF linking more than OWL's modeling properties. 
Professor James Hendler http://www.cs.umd.edu/users/hendler 
Director, Semantic Web and Agent Technologies 301-405-2696 Univ of Maryland, College Park, MD 20742 240-277-3388 (Cell) 
Yes. (It's very tempting to stop there ...) Ideally if a1 and a2 are abstract syntax trees and g1 and g2 are RDF graphs and a1 maps to g1 and g2, and also a2 maps to g1 then at a first approximation they all have the same OWL DL semantics (a1 and a2 with the direct semantics, g1 and g2 with the RDFS compat semantics). 
So that "should not interfere" is correct. 
However, if what you want to do is to use some OWL Full feature, it is not clear at all whether or not the (weak and unproven) semantic guarantees involved in the mapping are appropriate. 
e.g. foaf uses Inverse Functional Property on DatatypeProperties. 
Basically if what you want to talk about is soemthing to do with OWL Lite or OWL DL, then the abstract syntax is appropriate, but using it to talk about dc:creator say does not work because it forces you into making decisions that are not appropriate for dc:creator. 
Jeremy 
I don't think so - I tend to agree with Frank that there isn't a single answer. 
It may be helpful to have a tutorial on the abtsract syntax, but that won't make the universal answer. 
One of the aspects of the syntax shock is that it is so XML unfriendly, making a more friendly XML syntax for RDF I suspect would make it even less palatable to naive users. 
There is not one 'syntax shock' but many: RDF/XML is a compromise between pressures in different directions. 
OWL AS is more palatable to some communities, and less palatable to others. 
Jeremy 
Well, we've actually done the other way round too! 
But it was still a little tricky as it needed some firming up of the abstract syntax so we could put it through a parser generator. 
Details of the grammar we used are at [1]. 
If this is at all useful, I can add this functionality to the Validator... Sean [1] http://owl.man.ac.uk/2003/concrete/latest/ Sean Bechhofer seanb@cs.man.ac.uk 
Just two cents on our experience in teaching OWL and writing about OWL In our book on "Ontological Engineering" (from Asun Gomez-Perez, Mariano Fernandez-Lopez, and me) the OWL examples are written in RDF/XML syntax [*], and people who have read them have been able to understand it, since they are small bits of code. 
The same applies when we have taught about OWL in PhD courses. 
Of course, the Abstract Syntax is much less verbose, and I also like it, especially when I want to communicate something "bigger", but at the same time, for those cases, we also use UML class diagrams and other graphical notations. 
Oscar [*] Unfortunately, some of those examples are not valid OWL by now, since the OWL version we used when we sent the book to print was the one available in March last year. 
-----Mensaje original----- De: public-swbp-wg-request@w3.org [mailto:public-swbp-wg-request@w3.org]En nombre de Jeremy Carroll Enviado el: martes, 06 de abril de 2004 14:50 Para: Uschold, Michael F CC: Jim Hendler; Frank van Harmelen; public-swbp-wg@w3.org 
Asunto: Re: [ALL] Human-friendly syntax for communicating OWL fragments 
If this is true, then it covers OWL-DL and OWL-Lite, presumably. 
Jeremy: you said that there are problems with trying to do this with OWL-Full. 
Can you give a simple example that shows the problem? 
Also, I'm happy to accept the simple fact that different people do prefer different syntaxes for various reasons, ranging from what they are familiar with, to what particular purpose/context they are concerned with, to just a simple 'how their brain works' personal preference. 
Hopefuly we can agree then on a small number of syntaxes to use. 
One reader-friendly version for people shocked by too many angle brackets, and the RDF/XML one. 
There are lots of graphical possibilties, but lets not go there! 
MIke 
Well, we've actually done the other way round too! 
But it was still a little tricky as it needed some firming up of the abstract syntax so we could put it through a parser generator. 
Details of the grammar we used are at [1]. 
If this is at all useful, I can add this functionality to the Validator... Sean [1] http://owl.man.ac.uk/2003/concrete/latest/ Sean Bechhofer seanb@cs.man.ac.uk 
to do this with OWL-Full. 
Can you give a simple example that shows the problem? 
Here's a very simple one: Saying that Pat Hayes is the author of RDF Semantics may be said in RDF with a single triple: http://www.w3.org/TR/rdf-mt dc:creator "Pat Hayes" . 
To say that in OWL AS we may well end up with something like individual( annotation( dc:creator "Pat Hayes" ) ) The difficulty is that the mapping rules automatically will generate dc:creator rdf:type owl:AnnotationProperty . 
as well as the triple we want and some other fairly harmless triples. 
A different way of saying a similar thing in the AS would be: individual( value( dc:creator "Pat Hayes" ) ) And here we would need to have dc:creator as a datavalued property, giving the triple: dc:creator rdf:type owl:DatatypeProperty . 
Under the OWL Full semantics these two are not semantically identical (in fact neither entails the other), and neither is entailed by what might actually be written in a concrete document which might just be the single triple. 
Jeremy 
