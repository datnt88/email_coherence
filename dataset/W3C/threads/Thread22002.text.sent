As indicated in a previous mail, we have indeed thought about this. 
If would be a great thing if we could describe the tests in a language-neutral way and automatically generate tests for a particular language. 
However, as we've ancountered some difficulties, I'd personally like to see a thread on this mailing list to discuss this. 
The objectives are: 1. Describe tests in IDL terms 2. Generate tests for particular languages 3. Point to relevant part of the specification /Dimitris -----Ursprungligt meddelande----- Fr?n: Stanley Guan [mailto:Stanley.Guan@oracle.com] 
Skickat: den 21 mars 2001 19:03 Till: www-dom-ts@w3.org ?mne: 
[Fwd: NodeList (Re: CSS::SAC)] In all respects, a conforming Perl DOM lite implementation, via an OMG IDL wrapper, should be a conforming DOM implementation. 
Mostly it's a difference in presentation. 
Has this point of view been taken into consideration? 
Thx, -Stanley Okay -- it's pretty crude, but this is what we have been up to. 
I've defined an external DTD, called methods.dtd. 
Inside this dtd, I have definitions for describing a particular test scenario (at this point, it is crude, but allows us to illustrate the point). 
We would of course augment this test description with pointers to the spec, and additional documentation for generating in-line comments for code, etc. 
This file also contains a conditional include, which defines names for each binding (methods for Java, functions or properties for ECMAScript). 
I've come to realize that what we have is overkill -- we don't really need a type definition for each call -- instead, we could simply have a collection of allowable types. 
At any rate, this approach relies on using the idl name as the entity name and the particular binding as the value of the entity. 
I also have something called domtests.xml, 
which calls in methods.dtd, and a discrete set of tests -- right now, it is nist/node.xml 
-- inside node.xml, 
I have definitions for each test scenario -- this example uses only the nodeType tests, but I think it can be extended to cover all of our tests. 
Under test scenario, I've defined the necessary steps, using the appropriate idl entity def's, which will in turn substitute the approriate bindings, to execute a particular test. 
This approach needs some additional work -- in particular, support for if's and loops, operating on a particular object, and simple assignments. 
Using the supplied stylesheet, java.xsl, 
I'm able to generate a set of node tests. 
I'm currently using the xerces parser and xalan 2. I've supplied a simple Test driver, Test.java, that loads the xml file we are operating on -- staff.xml (staff.dtd) and simply uses the reflection api to get at all defined test methods, run them, and print out the results. 
I've purposely kept this simple until we know the end approach -- at that point, it can be polished to work with additional parsers, different input files, and automatically comparing expected and actual results. 
The idea is that we can write additional stylesheets for ECMAScript, Perl, Python, etc. Comments / suggestions? 
Mary Brady NIST, Web Technologies mbrady@nist.gov 
Behalf Of Dimitris Dimitriadis As indicated in a previous mail, we have indeed thought about this. 
If would be a great thing if we could describe the tests in a language-neutral way and automatically generate tests for a particular language. 
However, as we've ancountered some difficulties, I'd personally like to see a thread on this mailing list to discuss this. 
The objectives are: 1. Describe tests in IDL terms 2. Generate tests for particular languages 3. Point to relevant part of the specification /Dimitris -----Ursprungligt meddelande----- Fr?n: Stanley Guan [mailto:Stanley.Guan@oracle.com] 
Skickat: den 21 mars 2001 19:03 Till: www-dom-ts@w3.org ?mne: 
[Fwd: NodeList (Re: CSS::SAC)] In all respects, a conforming Perl DOM lite implementation, via an OMG IDL wrapper, should be a conforming DOM implementation. 
Mostly it's a difference in presentation. 
Has this point of view been taken into consideration? 
Thx, -Stanley In all respects, a conforming Perl DOM lite implementation, via an OMG IDL wrapper, should be a conforming DOM implementation. 
Mostly it's a difference in presentation. 
In Perl there could be two levels of conformance testing, one at the "full DOM API" level using an OMG IDL wrapper and the standard tests, but also a level that tests what Perl considers the "lite DOM API"[1], which, for reference, is currently only in draft. 
That may be the thinking behind the original question. 
We should be able to work out what the crossover is. 
For interested perl-xml folks, the mail list is www-dom-ts@w3.org[2], and you can subscribe by sending a message to www-dom-ts-request@w3.org with the word 'subscribe' in the subject of the mail message. 
-- Ken [1] http://Casbah.org/~kmacleod/orchard/perlish-dom-draft [2] http://lists.w3.org/Archives/Public/www-dom-ts/ 
In all respects, a conforming Perl DOM lite implementation, via an OMG IDL wrapper, should be a conforming DOM implementation. 
Mostly it's a difference in presentation. 
Is this W3C's point of view? 
Is this applied only to Perl's implementation? 
I'd say it's Perl-specific at this point. 
-- Ken Yep. 
The DOM test suite will test for compliance against the DOM spec. 
If you fail tests, you aren't compliant. 
If you deliberately don't implement all the DOM behaviors, you should be able to predict exactly what tests you're going to fail. 
(Note that passing a test suite never proves compliance since it's impossible to test every possible case, but failing it -- assuming the test is correct -- definitely establishes a point of noncompliance.) If you want to discuss whether the DOM might define specific subsets and compliance to those subsets, that's a topic for the IG list rather than this one. 
Start by reading the open issues list (level_3_issues.html), 
specifically the section titled "Lightweight DOM"; we _have_ considered the issue before but it's unlikely to fly unless there is a subset whose exact boundaries are widely agreed upon (meaning cross-langage and cross-implementation) and which defines a fairly sharp functional/semantic boundary. 
For example, the "read-only DOM tree" proposal passes the second test but so far has failed the first despite several attempts. 
Joe Kesselman / IBM Research 
