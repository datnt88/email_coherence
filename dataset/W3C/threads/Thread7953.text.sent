I am attempting to develop a Java Applet with simple Webdav functionality - I currently have an Applet that reads an XML file from a web server and I would like to adapt it so that it reads the file from a Webdav server and can perform updates ie a) locks the file b) deletes/replaces the file c) unlocks the file As it is a fairly simple Applet I didn't want to use the IBM DAV4J libraries. 
I am testing against mydocsonline and having trouble getting the Applet working-even with a PROPFIND command - not sure if it is a problem with the way Webdav works with mydocsonline or whether it is a fundamental mistake in the way I'm going about things. 
The return code I get is error 401, even when I put in Basic authentication command - I have tried hardcoding the username/password. 
(As a second issue - when I access the webfolders HTML page referencing the applet, IE prompts for username and password - is there any way of picking up the username and password values that have been entered in IE and passing them through to my PROPFIND command ?) Apologies if these are 'rookie' questions, but I'd appreciate any assistance - as there are few simple examples of Java code and Webdav, I'd be happy to share source sample code once I have a working version. 
See below for code explanation... Regards, JC Samson I'm using the URL class i.e. URL url=new URL("http://webfolders.mydocsonline.com/rfc 2518.htm"); int port=url.getPort 
if (port==-1)port=80;// if no port use the default String host=url.getHost 
Socket socket = new Socket(host,port); InputStream from_server=socket.getInputStream(); 
PrintWriter to_server= new PrintWriter(new OutputStreamWriter(socket.getOutputStream())); The code to create the PROPFIND looks like this : String userpass=""; userpass=base64EncodeString("username:password"); } catch(UnsupportedEncodingEx ception to_server.println("PROPFIND 
" + filename + " HTTP/1.0\r\n\r\n"); to_server.println("Host:" 
+ host); to_server.println("Content-Type: 
text/xml"); to_server.println("Authorization: 
Basic " + userpass + " "); query=" ?xml 
version=\"1.0\" 
encoding=\"utf-8\"? 
"+ D:propfind xmlns:D=\"DAV:\" "+ D:allprop/ /D:propfind "; to_server.println("Content-Length: 
"+ query.length()); 
to_server.println(query); 
to_server.flush(); 
Oops -- looks like this message was accidentally attributed to me when I re-sent it to the list after it was caught by the spam filter. 
It was originally sent by JC Sampson csamson@ndirect.co.uk . 
I've added this email address to the accept2 list, so future emails will go through to the list. 
My only thoughts are: This looks like it would send too many CRLF's -- I think you should omit the \r\n\r\n at the end of the line, since the CRLF added by println should be sufficient. 
Also, you should be sending HTTP/1.1, not HTTP/1.0. 
D:propfind xmlns:D=\"DAV:\" "+ D:allprop/ /D:propfind "; Perhaps it also expects a User-Agent header as well. 
Do you get the same behavior interacting against Sharemation http://www.sharemation.com/ 
? 
- Jim Accidentally caught by the spam filter. 
- Jim JC: You also need a space between the last request header and the body of the message. 
Also leave off the trailing space on the authorization header. 
Try: PROPFIND / HTTP/1.1 Connection:Keep-Alive Conent-length:XXX Content-type:text/xml Accept-language:en-us Authorization:Basic YWRtaZ46YWRtaW4= Host:webfolders.mydocsonline.com 
User-agent:Microsoft Data Access Internet Publishing Provider DAV 1.1 Depth:0 Kam Thanks to Jim and Kam for the input to my query putting together a Java Applet example using WebDAV. 
As Jim had suggested the "\r\n" at the end of the PROPFIND command was terminating the HTTP request header. 
This became apparent when I tested against sharemation which returned an error indicating that the Host: command was missing. 
The reason that I had included the "\r\n" is that this seemed to be needed to get a response from the WebDAV servers - I was just putting it in the wrong place ! 
In practice, as Kam indicated, you need a blank line containing at least one space - and this needs to be followed by "\r\n". 
i.e. the main pieces of Java code to access a file stored on mydocsonline are : URL url=new URL("http://webfolders.mydocsonline.com/rfc2518.htm"); 
// input and output streams InputStream from_server=socket.getInputStream(); 
PrintWriter to_server= new PrintWriter(new OutputStreamWriter(socket.getOutputStream())); String query=""; String userpass=""; userpass=base64EncodeString("username:password"); } catch(UnsupportedEncodingException x){ query=" ?xml 
version=\"1.0\" 
encoding=\"utf-8\"? 
"+ " D:propfind xmlns:D=\"DAV:\" "+ " D:allprop/ /D:propfind "; to_server.println("PROPFIND 
" + filename + " HTTP/1.1"); to_server.println("Host:" 
+ host); to_server.println("Connection:Keep-Alive"); 
to_server.println("Content-Length:"+ 
query.length()); 
to_server.println("Content-Type:text/xml"); 
to_server.println("Accept-Language:en-us"); 
to_server.println("Authorization:Basic 
" + userpass); to_server.println("User-Agent:" 
+ "Microsoft Data Access Internet Publishing Provider DAV 1.1"); to_server.println("Depth:0"); 
to_server.println(" 
" + "\r\n"); this.showStatus("Characters sent:"+ query.length()+ 
" characters"); to_server.println(query); 
to_server.flush(); 
I've got examples of PROPFIND, LOCK and UNLOCK working with sharemation, but only PROPFIND with mydocsonline. 
The LOCK returns a message 412 Precondition Failed - although the same code works with sharemation - Does mydocsonline support locking ? 
Looking at the Web interface, there is no mention of locking. 
Regards, JC Samson -----Original Message----- Accidentally caught by the spam filter. 
- Jim -----Original Message----- JC: You also need a space between the last request header and the body of the message. 
Also leave off the trailing space on the authorization header. 
Try: PROPFIND / HTTP/1.1 Connection:Keep-Alive Conent-length:XXX Content-type:text/xml Accept-language:en-us Authorization:Basic YWRtaZ46YWRtaW4= Host:webfolders.mydocsonline.com 
User-agent:Microsoft Data Access Internet Publishing Provider DAV 1.1 Depth:0 Kam 
