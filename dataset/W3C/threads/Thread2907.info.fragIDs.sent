From: Dan Simon dansimon@microsoft.com 
Date: Wed, 24 Apr 1996 12:50:49 -0700 
To me, the issue is not whether password authentication is weaker than authentication by certified asymmetric key; most everyone would agree that this is the case. 
Unfortunately, for reasons ranging from established practice to portability issues to plain ignorance, many people will likely continue to use passwords for authentication for some time to come, whether protocol authors want them to or not. 
The issue at hand is therefore whether password-based authentication must continue to be as weak as the encryption available (which is often, as we all know, woefully weak), or whether, by our protocol design choices, we can make the security of password authentication as strong as it can possibly be. 
No matter how weak the encryption is (40 bits :-), passwords are always going to be weaker. 
How many people do you know who pick 8 character passwords having even 24 bits of entropy? 
If you rely on shared secret passwords to establish encryption or MAC keys, the protocol design has done nothing to strengthen anything but the perception of security. 
On the other hand, if you use certificate authentication and 3DES encryption at the Transport layer, then it may be perfectly acceptable for many applications to use password authentication **at the application layer** for finer-grained access control. 
Nobody advocates forcing people to use passwords (even if it were possible to do so). 
The question is whether we can force them not to, and what to do given that we can't. 
We can refuse to create an IETF-standard transport layer protocol that allows password authentication. 
If there is enough of a market, I'm sure some enterprising company would introduce non-standard extensions to allow 24 bit privacy, and another company would follow suit if they felt competitive pressure to do so. 
At that point, the IETF standard might be updated to accommodate the sorry state of existing practice. 
But I believe that it will soon be easier to generate and use certificates than it will be to pick, remember, and type passwords. 
"Build it, and they will come." 
There are obviously strongly-held opinions on both sides. 
I hope the working group can establish rough consensus on this issue and include the decision in the charter relatively quickly, to avoid prolonging the debate. 
I agree with most of your points about passwords. 
However, the scenario that you draw about extensions would imply that we should think about mechanisms by which extensions to TLS may be made cleanly -- reserve some record type numbers that are vendor-specific, and mandate that the rest be not used except as officially sanctioned blah blah blah when/if TLS gets revised. 
If we don't do this, then we risk creating compatibility problems in the future. 
-bsy Web:http://www-cse.ucsd.edu/users/bsy/ 
USPS:Dept of Comp Sci and Eng, 0114, UC San Diego, La Jolla, CA 92093-0114 
While I agree that an extension mechanisim might be useful, I think there's more utility in keeping the standard simple to understand and implement. 
An extension mechanisim that allowed vendor-specific extensions would probably require yet another negotiation, if you don't want to repeat the HTML problem of conflicting vendor-added features- i.e. "do I write my TLS to talk to Microscape's TLS extentions, or Netsoft's?"). 
Adding another negotiation would increase the complexity of the TLS standard. 
Look at the RFCs, it's the simple standards that have been successful and widely deployed, while there are many super-flexible but complicated standards that have few implementations. 
I think it would be better to create one simple TLS standard, then add on additional standards or IANA registration schemes for things like password-exchamge protocols, additional CipherSuites, support for pre-encrypted data, etc. rather than trying to do everything now. 
Eric Murray ericm@lne.com 
ericm@motorcycle.com 
http://www.lne.com/ericm 
PGP keyid:E03F65E5 fingerprint:50 B0 A2 4C 7D 86 FC 03 92 E8 AC E6 7E 27 29 AF 
