The XML Protocol Working Group would like to bring one of its work items, XML-binary Optimized Packaging (XOP) [1] to the attention of the DOM Working Group. 
XOP is an alternate serialization of XML that provides Infoset fidelity, while making it possible to gain efficiencies when base64-encoded content is present in elements. 
In particular, although the content is conceptually base64-encoded (i.e., it shows up as such in an Infoset abstraction), it is in fact binary data when serialized; a MIME multipart package contains the XML with references out to the binary data in attachments. 
However, to enable applications to obtain the full benefit of the this serialization, it is necessary for slight changes to existing APIs, so that they can access the raw binary stream, rather than the character representation of it. 
Because of this, the XML Protocol Working Group would like the DOM WG (or IG) to consider how this might be accommodated in DOM. 
We would be glad to discuss the use cases, practical considerations, etc. with you, at your convenience. 
We would also appreciate any feedback, as we anticipate being in Last Call soon. 
1. http://www.w3.org/2000/xp/Group/3/06/Attachments/XOP.html 
On behalf of the XMLP WG, Mark Nottingham Principal Technologist Office of the CTO BEA Systems Speaking for myself and not officially for XMLP, I think it's also worth pointing out that the XMLP workgroup is preparing a related working draft, known as MTOM, that provides for XOP to be used for optimizing the transmission of SOAP messages. 
So, SOAP is one of the use cases for XOP, though we also hope that XOP will be considered by non-SOAP users of XML who may have similar needs to embed binary content. 
The current editors' copy of MTOM is at [1]. 
We are also doing some work that may lead to standardization of markup that would indicate the mime type of base64 encoded streams, with the understanding that such markup would commonly be used in conjunction with MTOM. 
I'm not sure whether this mime typing work has reached the point that there is a copy you should be reviewing; I suggest that you keep in touch with our chair David Fallside if you are interested in that aspect of our work. 
I hope this informal update is useful to you as you follow up on Mark's suggestion that you evaluate XOP. 
Again, this note does not necessarily represent the opinions of or input from other members of the XMLP workgroup, though since we do our work in public, there is no particular secret about the developments I've discussed, except insofar as they are work in progress and we may not in all cases have reached consensus as to which will move forward. 
I think it's fair to say that at least XOP and MTOM are very much on a recommendation track. 
Noah [1] Noah Mendelsohn IBM Corporation One Rogers Street Cambridge, MA 02142 1-617-693-4036 Mark Nottingham mark.nottingham@bea.com 
Sent by: xml-dist-app-request@w3.org 04/30/2004 06:05 PM Subject: Request for review: XOP The XML Protocol Working Group would like to bring one of its work items, XML-binary Optimized Packaging (XOP) [1] to the attention of the DOM Working Group. 
XOP is an alternate serialization of XML that provides Infoset fidelity, while making it possible to gain efficiencies when base64-encoded content is present in elements. 
In particular, although the content is conceptually base64-encoded (i.e., it shows up as such in an Infoset abstraction), it is in fact binary data when serialized; a MIME multipart package contains the XML with references out to the binary data in attachments. 
However, to enable applications to obtain the full benefit of the this serialization, it is necessary for slight changes to existing APIs, so that they can access the raw binary stream, rather than the character representation of it. 
Because of this, the XML Protocol Working Group would like the DOM WG (or IG) to consider how this might be accommodated in DOM. 
We would be glad to discuss the use cases, practical considerations, etc. with you, at your convenience. 
We would also appreciate any feedback, as we anticipate being in Last Call soon. 
1. http://www.w3.org/2000/xp/Group/3/06/Attachments/XOP.html 
On behalf of the XMLP WG, Mark Nottingham Principal Technologist Office of the CTO BEA Systems I have no particular problem with the idea of packaging binary data along with an XML document in a MIME envelope. 
It seems a reasonable thing to do for some use cases. 
However, a XOP envelope is not an XML document, though it contains such a document, in addition to binary data. 
It is therefore unreasonable to expect XML APIs such as DOM to do more than process the XML content of a XOP envelope. 
Doing so would be actively harmful to the XML community. 
It would pollute DOM with features that have no function when processing XML, as opposed to XOP. Processing XOP requires a XOP API, not an XML API. 
All the fancy language about infosets notwithstanding, it's clear you're not interested in processing XML. 
A XOP document is not an XML document, and you're not even willing to expose it through standard XML APIs. 
XOP may be useful, but it's clearly not XML. 
Please don't ask the XML community to break its standards to fit your new and different invention. 
Elliotte Rusty Harold elharo@metalab.unc.edu 
Effective XML (Addison-Wesley, 2003) DOM Level 2 HTML also does not deal with XML. 
It's the DOM all the same. 
SMIL and SVG DOMs have non-XML features, yet they integrate well, strongly, and usefully with the Core DOM. 
If that's pollution, it would seem we are much polluted already, and people are liking it. 
Amongst the clever things DOM 3 Core adds is DOM Features[0]. 
If one were to develop a supplemental DOM chapter that would add support for the direct retrieval of binary data, and define a feature string for it, then with no modification to the Core DOM implementations could nevertheless support XOP, and make it cleanly available to users. 
That would be something for XMLP to develop though, but I reckon it wouldn't require much of their time. 
[0]http://www.w3.org/TR/2004/REC-DOM-Level-3-Core-20040407/core.html#DOMFeatures 
Robin Berjon Those work by subclassing the existing DOM interfaces. 
I read this proposal to be requesting modifications to the core of DOM, a very different thing. 
If that's not the case, and they just want to subclass, then why do they need support for the DOM Core group instead of doing it themselves as the SVG and SMIL groups have done? 
However, SMIL and SVG are XML. 
XOP is not. 
I really question whether trying to present XOP as XML is the right path, especially since they seem to find it onerous to use the existing APIs for processing XML. 
HTML is not XML (though XHTML is) and this is partly responsible for the mess that is DOM. 
And people do not like it. 
In fact, I would say that web developers who have to deal with HTML DOMs are even less fond of the DOM than XML developers are. 
Perhaps. 
I suspect that would not satisfy the requestors though. 
In particular I think they would object to having to create element nodes for their xop:include elements. 
Elliotte Rusty Harold elharo@metalab.unc.edu 
Effective XML (Addison-Wesley, 2003) Speaking only for myself, I found this comment interesting; XML allows base64-encoded content; indeed, this is a practice that is encouraged by other recommendation-level W3C specifications. 
Is it too difficult to believe that people creating or consuming documents containing such content might actually want to work with the binary data instead of its encoded form? 
I would think that use cases for such data that explicitly focus on the encoded form are by far in the minority (Digital Signature is the only significant one that comes to mind immediately). 
Regards, Mark Nottingham Principal Technologist Office of the CTO BEA Systems XML can contain data in many forms including (but far from limited to) integers, floating point numbers, decimals, dates, quoted printable, structs, e-mail addresses, URLs, URIs, URNs, ISBN numbers, phone numbers, hex encoded data, and many, many more. 
Should we add methods to interpret all of these things to DOM? 
Of course not. 
Base-64 is no different. 
It is simply one thing that may appear in an XML document, but it has no special status within XML. 
DOM should focus on XML, not on a 1000 different things that may be encoded in XML. 
Higher level applications built on top of DOM may choose to decode the Base-64 data or not as suits their needs. 
However, adding special purpose convenience methods that serve only a small fraction of the user community primarily serves to complexify an already overly complex API. 
It makes implementation, documentation, and learning more difficult, completely out of proportion to the benefit achieved. 
But most importantly it is conceptually wrong. 
It confuses XML with the data encoded in XML. 
It presents an incorrect abstraction of an XML document. 
Rather than modelling XML, it models one particular interpretation of an XML document. 
This is not appropriate for an XML API. 
Elliotte Rusty Harold elharo@metalab.unc.edu 
Effective XML (Addison-Wesley, 2003) Speaking for myself, the API's I would consider would in fact be general to all of XML, but they would optimize particularly well when used with XOP. 
The sort of thing I would have in mind would be along the lines of // given a binary octet stream, create a text node consisting // of the characters representing the xsd:base64Binary // canonical lexical representation of that stream Text t = createBase64TextfromBinaryStream(binStream); // inverse of the above, retrieves the stream OctetStream recoveredStream = parseTextasBase64Binary(t); // the following is usable anytime after the creation // of t. 
In an optimized implementation, the // character form won't actually be computed // unless a method like this is called. 
String base64 = t.data(); 
This would create a text node with the base64binary coding of the corresponding stream. 
I'm not a DOM expert, so excuse any errors of detail. 
Perhaps CharacterData would have been a better node type than Text, I'm not sure. 
As you can see, this is general to XML and not specific to XOP. 
The reason it's important for XOP is that optimized implementations can defer generation of the actual characters until they are actually requested. 
With XOP, there will be important cases in which the characters will never be inspected. 
In particular, if the document is to be serialized as XOP, then parseTextasBase64Binary can merely reference or copy the original supplied binStream. 
That's the optimization we're hoping to get for XOP: the characters are there in principle but in important cases, nobody asks for them and you never actually generate them. 
In any case, I don't think anyone is proposing a DOM API that would manipulate XOP at the multipart level. 
Again, these are my personal opinions; others in the XMLP wg may agree of disagree. 
Noah Mendelsohn IBM Corporation One Rogers Street Cambridge, MA 02142 1-617-693-4036 If you guys start doing some work on conversions between b64 and binary in the DOM, then it would be good to coordinate with SVG, where similar things are used: Unifying the APIs would definitely be good here. 
Robin Berjon I'm with Eliotte here. 
Either subclass or simply make a new API set, it doesn't have to be pushed to the DOM level. 
If you are not handling Markup based structures then use another API, maybe it already exists maybe not, but in the later case it's not a reason to push it in DOM which is already complex enough. 
Daniel Daniel Veillard | libxml Gnome XML XSLT toolkit http://xmlsoft.org/ 
daniel@veillard.com 
| Rpmfind RPM search engine http://rpmfind.net/ 
From my viewpoint (i.e., not representing the WG), the focus of the request wasn't to "push" a particular way to support this onto DOM; rather, to solicit feedback from DOM about how it would be best accommodated. 
Based on the discussion so far, subclassing seems to be a good approach, but it sounds likely that it would need to be done by a WG other than DOM. 
Mark Nottingham Principal Technologist Office of the CTO BEA Systems Okay, that sounds reasonable, subclassing is fine. 
My main worry is that DOM is already considered complex, and has a lot of different extensions. 
The only thing more or less clear to users is that it is an API to process parsed markup languages, and it's probably better to avoid using the "DOM" name for anything which is not strongly tied to markup. 
Daniel Daniel Veillard | libxml Gnome XML XSLT toolkit http://xmlsoft.org/ 
daniel@veillard.com 
| Rpmfind RPM search engine http://rpmfind.net/ 
