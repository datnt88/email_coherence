(S1 (S (NP (PRP I)) (VP (AUX had) (NP (DT the) (NN idea)) (ADVP (RB also)) (, ,) (SBAR (IN that) (S (NP (PRP it)) (VP (MD would) (VP (AUX be) (ADJP (JJ good)) (SBAR (IN if) (S (NP (PRP we)) (VP (AUX were) (ADJP (JJ able) (S (VP (TO to) (VP (VB provide) (NP (DT an) (: ') (S (S (VP (VB executable) (NP (NP (NN specification) ('' ')) (PP (IN of) (NP (DT the) (NN translation)))) (PP (IN from) (NP (NP (DT the) (NNP RDF) (NNP XML) (NN syntax)) (PP (IN into) (NP (NNS triples))))))) (CC and) (S (NP (PRP I)) (VP (VBP suspect) (SBAR (S (NP (DT this)) (VP (MD will) (VP (AUX be) (ADJP (ADJP (JJR easier)) (CC and) (ADJP (JJR clearer))) (SBAR (IN if) (S (NP (DT this) (NN translation)) (VP (AUX is) (PP (TO to) (NP (DT a) (ADJP (RB very) (JJ simple)) (NN syntax)))))))))))))))))))))))))) (. .)))
(S1 (S (S (NP (PRP I)) (VP (AUX 've) (VP (AUX done) (NP (NP (DT an) (JJ informal) (NN experiment)) (VP (VBG using) (NP (NP (DT an) (NN attribute) (NN grammar)) (PP (IN with) (NP (DT an) (JJ XSLT) (NN implementation))))))))) (CC and) (S (NP (DT that)) (VP (VBD seemed) (S (VP (TO to) (VP (VB work) (ADJP (JJ ok))))))) (. .)))
(S1 (S (S (VP (VBZ Sounds) (ADJP (JJ good)))) (, ,) (FRAG (ADVP (RB certainly)) (NP (NP (DT the) (NN idea)) (PP (IN of) (NP (: ') (JJ executable) (NN specification) (POS '))))) (. .)))
(S1 (S (NP (PRP It)) (VP (VP (VBZ reminds) (NP (PRP me)) (PP (IN about) (NP (NNP ISO) (NNP Standard) (NNP Prolog)))) (PRN (-LRB- -LRB-) (S (VP (VB see) (S (VP (VBG e.g.) (NP (NP (NP (DT the) (NNP INRIA) (NNP ISO) (NNP Prolog) (NN web)) (PP (IN at) (NP (CD http)))) (: :) (NP (NN //pauillac.inria.fr/~hodgson/prolog/))))))) (-RRB- -RRB-)) (ADVP (WRB where)) (SBAR (S (NP (NP (DT the) (JJ executable) (NN specification)) (PRN (-LRB- -LRB-) (S (NP (DT the) (JJ ftp) (NN package)) (VP (AUX is) (PP (IN at) (NP (NP (CD ftp)) (: :) (NP (NN //ftp-lifo.univ-orleans.fr/pub/Users/eddbali/SdProlog/)))))) (-RRB- -RRB-))) (VP (AUX is) (NP (NP (DT a) (JJ specific) (NN implementation)) (PP (IN of) (NP (NNP Standard) (NNP Prolog)))))))) (. .)))
(S1 (S (ADVP (RB So)) (, ,) (NP (NP (DT all) (NNS concepts)) (SBAR (WHNP (WDT which)) (S (VP (AUX are) (ADJP (ADJP (NN implementation) (VBN defined)) (, ,) (ADJP (NN implementation) (JJ dependent)) (CC or) (ADJP (JJ undefined))))))) (VP (AUX have) (VP (VBN received) (NP (DT some) (NN interpretation)))) (. .)))
(S1 (S (NP (PRP It)) (VP (AUX 's) (ADVP (RB mainly)) (NP (DT that) (JJ last) (NN point) (SBAR (IN that) (S (NP (PRP I)) (VP (VBD wanted) (S (VP (TO to) (VP (VB stress)))))))) (, ,) (SBAR (IN although) (S (NP (PRP it)) (VP (MD must) (VP (AUX be) (ADJP (JJ possible) (S (VP (TO to) (VP (VB write) (NP (NP (PDT such) (DT an) (JJ executable) (NN specification)) (PP (IN in) (NP (NNP N3))))))))))))) (. .)))
(S1 (S (NP (NNP Brian)) (, ,) (VP (AUX is) (NP (NP (DT that) (JJ informal) (NN experiment)) (VP (VBG using) (NP (DT an) (NN attribute) (NN grammar)))) (PP (IN with) (NP (DT an) (JJ XSLT) (NN implementation))) (NP (NP (DT the) (CD one)) (X (IN at))))))
(S1 (NP (NP (NNP Jos) (NNP De) (NNP Roo)) (, ,) (NP (NNP AGFA) (CD http)) (: :) (ADVP (RB //www.agfa.com/w3c/jdroo/))))
(S1 (NP (NP (NNP Hi) (NNP Jos)) (, ,)))
(S1 (S (INTJ (UH Yes)) (, ,) (CC and) (S (NP (NP (NNS thanks)) (PP (IN for) (S (VP (VBG picking) (PRT (RP up)) (PP (IN on) (NP (DT that)))))))) (. .)))
(S1 (S (NP (PRP It)) (VP (MD would) (VP (AUX be) (NP (JJ good) (NN discipline)) (SBAR (IN for) (S (NP (PRP us)) (ADVP (RB always)) (VP (TO to) (VP (VB provide) (NP (NNS references)) (SBAR (WHADVP (WRB where)) (FRAG (ADJP (JJ possible)))))))))) (. .)))
(S1 (S (NP (DT The) (JJ above) (NN URL)) (VP (AUX is) (RB not) (ADJP (JJ likely) (S (VP (TO to) (VP (AUX be) (ADJP (RB very) (JJ persistent)) (ADVP (RB so)) (S (VP (TO to) (VP (VB make) (ADJP (JJ sure)) (NP (PRP$ its)) (PP (IN in) (NP (NP (DT the) (NN archive)) (SBAR (S (NP (PRP I)) (VP (AUX 've) (VP (VBD included) (NP (DT the) (NN document)) (PP (IN at) (NP (NP (DT the) (NN end)) (PP (IN of) (NP (DT this) (NN message))))))))))))))))))) (. .)))
(S1 (NP (NP (NNP Brian) (. !)) (: --) (NP (NN Author)) (: :) (NP (NP (NNP Brian) (NNP McBride)) (NX ($ $) (NNP Revision) (: :) (NP (NP (CD 1.8) (ADJP ($ $) (QP ($ $))) (NN Date)) (: :) (NP (NP (CD 2001/02/22) (CD 12:31:14) (NP (NP (NP (QP ($ $))) (: --) (NP (NNS xsl)) (: :) (NP (NN stylesheet) (NNS xmlns)) (: :)) (NNS xsl=) (POS ')) (NNS http)) (: :) (NP (NP (NN //www.w3.org/1999/XSL/Transform) (POS ')) (NNS xmlns)) (: :) (NP (NNS rdf='http)) (: :) (NP (JJ //www.w3.org/1999/02/22-rdf-syntax-ns) (# #) ('' ') (NNS xmlns)) (: :) (NP (NP (NNS rdfg=) (POS ')) (NP (CD http))) (: :) (NP (NNS //purl.org/NET/BMCB/2001/RDFG)) (: ') (S (NP (NN exclude-result-prefixes=) (POS ')) (VP (VBG xsl) (NP (NNP rdf) (CD rdfg) (POS ')))) (. !))))) (: --)))
(S1 (NP (NP (DT An) (NN experiment)) (PP (IN in) (S (VP (VBG doing) (NP (NP (DT a) (JJ formal) (NN specification)) (PP (IN of) (NP (DT the) (NNP RDF) (NNP Syntax))))))) (. .)))
(S1 (S (NP (DT The) (NN goal)) (VP (AUX is) (S (VP (TO to) (VP (ADVP (RBR more) (RB formally)) (VB define) (NP (NP (DT the) (NNS triples)) (SBAR (WHNP (WDT that)) (S (NP (DT any) (VBN given) (NNP RDF) (NN XML)) (VP (VBZ represents))))))))) (. .)))
(S1 (S (NP (DT The) (NN idea)) (VP (AUX is) (S (VP (TO to) (VP (VB annotate) (NP (DT the) (NN grammar)) (PP (IN with) (NP (NNS attributes))))))) (. .)))
(S1 (S (NP (NP (DT Each) (NN production)) (PP (IN in) (NP (DT the) (NN grammar)))) (VP (VP (VBZ takes) (NP (NNS attributes)) (PP (IN as) (NP (NNS arguments)))) (CC and) (VP (MD can) (VP (VB return) (NP (NNS attributes)) (PP (IN as) (NP (DT a) (NN result)))))) (. .)))
(S1 (S (NP (NP (DT A) (NN production) (NN emitTriple)) (, ,) (SBAR (WHNP (WDT which)) (S (ADVP (RB always)) (VP (VP (VBZ succeeds)) (CC but) (VP (AUX has) (NP (NP (DT the) (NN side) (NN effect)) (PP (IN of) (S (VP (VBG emitting) (NP (DT a) (JJ triple))))))))))) (VP (AUX is) (VP (VBN introduced))) (. .)))
(S1 (S (NP (EX There)) (VP (AUX is) (NP (NP (DT a) (JJ trivial) (NN transformation)) (PP (PP (IN from) (NP (DT the) (JJ annotated) (NN grammar))) (PP (TO to) (NP (NP (DT an) (JJ equivalent) (NN XSLT)) (VP (VB transform) (, ,) (ADVP (RB thus) (PP (IN in) (NP (NN effect)))) (VBG enabling) (NP (DT an) (JJ executable) (NN specification)))))))) (. .)))
(S1 (S (S (NP (CD @@) (NN ISSUE) (NN aboutEach)) (VP (RB not) (VP (VP (VBD handled) (NP (CD @@) (NN Issue) (NN aboutEachPrefix) (NNS @@)) (NP (NNP TODO) (NNP Oops))) (: -) (VP (VBD forgot) (NP (CD xml)))))) (: :) (S (NP (NNP lang)) (VP (VBD @@) (S (NP (NNP TODO)) (VP (VB consider) (SBAR (IN if) (S (NP (NNP XML) (NNP Schema)) (VP (MD should) (VP (AUX be) (VP (VBN used) (S (VP (TO to) (VP (VB express) (NP (DT the) (NN grammar)))))))))))))) (. .)))
(S1 (S (NP (NNP @@) (NNP TODO)) (VP (VB consider) (NP (NNP Schematron) (FW @@) (NNP TODO) (NN search)) (PP (IN for) ('' ') (NP (NP (JJ proper) ('' ') (NN attribute) (NN grammar) (NNS tools)) (SBAR (S (NP (DT The) (JJ annotated) (NN grammar)) (VP (AUX is) (SBAR (IN as) (S (VP (VBZ follows))))))) (: :) (NP (JJ //) (NNP Constants) (NNS RDFNS)) (X (SYM =)) (: ') (NP (NNS http)) (: :) (NP (JJ //www.w3.org/1999/02/22-rdf-syntax-ns) (# #) ('' ') (NNS RDFGNS)) (X (SYM =)) (: ') (NP (NNS http)) (: :) (NP (NNS //purl.org/NET/BMCB/2001/RDFG/)) (: '))))))
(S1 (S (NNP HASMEMBER) (SYM =) (POS ') (NN hasMember) (POS ') (CD //) (NN container) (NN membership) (NN property) (NN TYPE) (SYM =) (POS ') (NN type) (POS ') (NN BAG) (SYM =) (POS ') (NN Bag) (POS ') (NNP URI) (SYM =) (POS ') (NNP URI) (POS ') (NN ANON) (SYM =) (POS ') (NN ANON) (POS ') (NNP ABOUTEACH) (SYM =) (POS ') (NN aboutEach) (POS ') (NNP ABOUTEACHPREFIX) (SYM =) (JJ LITERAL) (SYM =) (POS ') (JJ LITERAL) (POS ') (NN NONE) (SYM =) (POS ') (NN NONE) (POS ') (NN AUTO) (SYM =) (POS ') (NN NONE) (POS ') (CD //) (NN change) (TO to) (POS ') (NN anon) (POS ') (TO to) (VB turn) (IN on) (CD //) (NN creation) (IN of) (NNS bags) (IN for) (DT all) (CD //) (NN description) (NNS elements) (CD -LSB-6.1) (JJ -RSB-) (NNP RDF) (-LRB- -LRB-) (-RRB- -RRB-) (CD ::) (SYM =) (JJ -LSB-) (POS ') (NNP rdf) (: :) (NNP RDF) (POS ') (JJ -RSB-) (CD obj) (NNP *) (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-) (, ,) (-LRB- -LRB-) ('' '') (, ,) ('' '') (-RRB- -RRB-) (, ,) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-) (, ,) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-) (JJ -LSB-) (POS ') (CD /rdf) (: :) (NNP RDF) (POS ') (JJ -RSB-) (CD //) (VBD dropped) (DT the) (NN container) (NNS productions) (: -) (VBN used) (NN mcbride/beckett) (NN approach) (CD //) (DT The) (CD obj) (NN production) (MD can) (CC either) (AUX be) (DT a) (JJ top) (NN level) (NN resource) (RB immediately) (CD //) (IN within) (DT an) (VBG enclosing) (NNP rdf) (: :) (NNP RDF) (CC or) (PRP it) (MD can) (AUX be) (DT the) (VBP object) (IN of) (DT a) (NN statement) (. .)))
(S1 (S (NNP //) (NN Input) (NNS Attributes) (: :) (CD //) (JJ subject) (-LRB- -LRB-) (NN Type) (, ,) (NNP Valu) (-RRB- -RRB-) (NN type) (AUX is) (NN none) (IN for) (JJ top) (NN level) (CD //) (VB predicate) (-LRB- -LRB-) (CD ns) (, ,) (JJ localname) (-RRB- -RRB-) (CD //) (NN bag) (-LRB- -LRB-) (NN Type) (, ,) (NNP Valu) (, ,) (JJ next) (-RRB- -RRB-) (TO to) (VB hold) (NNS reifications) (CD //) (JJ rsid) (NN id) (IN of) (VBN reified) (NN statement) (CD -LSB-6.2) (JJ -RSB-) (CD obj) (-LRB- -LRB-) (JJ subject) (, ,) (VB predicate) (, ,) (NN bag) (, ,) (JJ rsid) (-RRB- -RRB-) (CD ::) (SYM =) (NN description) (-LRB- -LRB-) (JJ subject) (, ,) (VB predicate) (, ,) (NN bag) (, ,) (JJ rsid) (-RRB- -RRB-) (CD -LSB-6.2.1) (JJ -RSB-) (CD obj) (NNP *) (-LRB- -LRB-) (JJ subject) (, ,) (VB predicate) (, ,) (NN bag) (, ,) (JJ rsid) (-RRB- -RRB-) (CD ::) (SYM =) (CD obj) (-LRB- -LRB-) (JJ subject) (, ,) (VB predicate) (, ,) (NN bag) (, ,) (JJ rsid) (-RRB- -RRB-) (CD obj) (NNP *) (-LRB- -LRB-) (JJ subject) (, ,) (VB predicate) (, ,) (-LRB- -LRB-) (NN bag.type) (, ,) (NN bag.value) (-RRB- -RRB-) (, ,) (JJ rsid) (-RRB- -RRB-) (CD -LSB-6.3) (JJ -RSB-) (NN description) (-LRB- -LRB-) (JJ subject) (, ,) (VB predicate) (, ,) (NN bag) (, ,) (JJ rsid) (-RRB- -RRB-) (CD ::) (SYM =) (POS ') (NNP rdf) (: :) (NN Description) (POS ') (CD idAboutAttr) (. ?)))
(S1 (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (INTJ (VB rsid) (, ,) (VB subject) (, ,) (VB predicate)) (, ,) (-LRB- -LRB-) (INTJ (UH idAboutAttr.Type)) (, ,))))
(S1 (PRN (NP (NNP idAboutAttr.Valu)) (-RRB- -RRB-) (-RRB- -RRB-)))
(S1 (S (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (, ,) (NP (NN bag)) (, ,) (PRN (-LRB- -LRB-) (NP (NNP RDFGNS)) (, ,) (NP (NNP HASMEMBER)) (-RRB- -RRB-)) (, ,) (NP (NN rsid)) (-RRB- -RRB-)) (VP (VBZ bagIdAttr)) (. ?)))
(S1 (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (INTJ (INTJ (UH bagIdAttr.Type)) (, ,) (INTJ (UH bagIdAttr.valu))) (-RRB- -RRB-) (, ,))))
(S1 (S (-LRB- -LRB-) (NP (NP (NNP RDFNS)) (PRN (, ,) (NP (NN TYPE)) (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (NP (NNP URI)) (, ,) (NP (NNP RDFNS+BAG)) (-RRB- -RRB-))) (-RRB- -RRB-) (VP (VBZ propAttr) (NP (NP (NNP *)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (INTJ (UH idAboutAttr.Type)) (, ,) (NP (NN idAboutAttr.Valu)) (-RRB- -RRB-)))) (, ,)))
(S1 (PRN (-LRB- -LRB-) (INTJ (UH bagIdAttr.Type) (, ,) (NN bagIdAttr.Valu)) (-RRB- -RRB-) (, ,)))
(S1 (S (NP (CD 0)) (-RRB- -RRB-) (VP (POS ') (NP (NNP /) (POS ')))))
(S1 (FRAG ('' ') (NP (NNP rdf)) (: :) (NP (NN Description)) ('' ')))
(S1 (INTJ (UH idAboutAttr) (. ?)))
(S1 (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (ADJP (JJ rsid) (, ,) (JJ subject) (, ,) (JJ predicate)) (, ,) (-LRB- -LRB-) (NP (NNP IidAboutAttr.Type)) (, ,) (NP (NNP idAboutAttr.Valu)) (-RRB- -RRB-)) (-RRB- -RRB-)))
(S1 (S (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (, ,) (NP (NN bag)) (, ,) (PRN (-LRB- -LRB-) (NP (NNP RDFGNS)) (, ,) (NP (NNP HASMEMBER)) (-RRB- -RRB-)) (, ,) (NP (NN rsid)) (-RRB- -RRB-)) (VP (VBZ bagIdAttr)) (. ?)))
(S1 (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (INTJ (INTJ (UH bagIdAttr.Type)) (, ,) (INTJ (UH bagIdAttr.valu))) (-RRB- -RRB-) (, ,))))
(S1 (S (-LRB- -LRB-) (NP (NP (NNP RDFNS)) (PRN (, ,) (NP (NN TYPE)) (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (NP (NNP URI)) (, ,) (NP (NNP RDFNS+BAG)) (-RRB- -RRB-))) (-RRB- -RRB-) (VP (VBZ propAttr) (NP (NP (NNP *)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (INTJ (UH idAboutAttr.Type)) (, ,) (NP (NN idAboutAttr.Valu)) (-RRB- -RRB-)))) (, ,)))
(S1 (PRN (-LRB- -LRB-) (INTJ (UH bagIdAttr.Type) (, ,) (NN bagIdAttr.Valu)) (-RRB- -RRB-) (, ,)))
(S1 (S (NP (CD 0)) (-RRB- -RRB-) ('' ') ('' ') (VP (VBP propertyElt) (NP (NP (NNS *)) (PRN (-LRB- -LRB-) (ADJP (JJ subject)) (, ,) (-LRB- -LRB-) (INTJ (INTJ (UH bagIdAttr.Type)) (, ,) (INTJ (UH bagIdAttr.Valu))) (-RRB- -RRB-) (-RRB- -RRB-))))))
(S1 (FRAG ('' ') (NP (NP (NN /rdf)) (: :) (NP (NN Description) (POS ')))))
(S1 (NP (NP (NNP typedNode)) (PRN (-LRB- -LRB-) (INTJ (VB subject) (, ,) (VB predicate) (, ,) (NN bag) (, ,) (NN rsid)) (-RRB- -RRB-))))
(S1 (S (NP (CD -LSB-6.4) (JJ -RSB-) (NN //) (NN container) (NN production)) (VP (VBN deleted) (NP (CD -LSB-6.5) (JJ -RSB-) (NNS idAboutAttr))) (. ?)))
(S1 (X (FW ::) (SYM =) (X (FW idAttr) (FW this.Type) (SYM =)) (NP (NN idAttr.Type))))
(S1 (S (NP (NNP this.Valu)) (VP (SYM =) (NP (NN idAttr.Valu)))))
(S1 (NP (NNP aboutAttr)))
(S1 (NP (NNP this.Type) (SYM =) (FW aboutAttr.Type)))
(S1 (S (NP (NNP this.Valu)) (VP (SYM =) (NP (NN aboutAttr.Valu)))))
(S1 (NP (NNP aboutEachAttr)))
(S1 (NP (NNP this.Type) (SYM =) (FW aboutEachAttr.Type)))
(S1 (S (NP (NNP this.Valu)) (VP (SYM =) (NP (NN aboutEachAttr.Value)))))
(S1 (NP (NNP this.Type) (SYM =) (NNP ANON)))
(S1 (S (NP (NNP this.Valu)) (VP (SYM =) (NP (NP (NN genid)) (PRN (-LRB- -LRB-) (FRAG (-RRB- -RRB-) (NP (CD -LSB-6.6) (JJ -RSB-) (NN idAttr) (NNS ::)) (X (SYM =)) (: ') (NP (CD ID=)) ('' '') ('' ') (NP (NNP IDsymbol) (POS ')) ('' '') ('' ')) (NX (FW this.Type=URI) (FW this.Valu=BASEURI)) (-LRB- -LRB-) (-RRB- -RRB-)) (NP (NP (NNS +) (POS ')) (ADJP (# #) ('' ') (JJ +)) (JJ IDsymbol) (JJ -LSB-6.6.1) (NN -RSB-) (NNS idAttr)))) (. ?)))
(S1 (S (NP (NNP ::)) (VP (SYM =) (NP (CD idAttr) (NN this.Type=idAttr.Type)))))
(S1 (NP (NNP this.Valu=idAttr.Valu)))
(S1 (S (NP (NNP this.Type)) (VP (SYM =) (NP (NN NONE)))))
(S1 (FRAG (NP (NP (NNP this.Valu=) ('' '') (CD -LSB-6.7) (NN -RSB-)) (NP (CD aboutAttr) (NNS ::))) (X (SYM =)) (: ') (NP (NN about=)) ('' '') (PRN (: ') (NP (NN URI-reference) (POS ')) ('' '') (: ')) (X (FW this.Type=URI) (FW this.Valu) (SYM =) (X (NP (JJ ABSOLUTE) (PRN (-LRB- -LRB-) (JJ URI-reference) (-RRB- -RRB-)) (CD -LSB-6.8) (JJ -RSB-) (JJ aboutEachAttr) (NNS ::)) (SYM =)) (: ') (NP (NN aboutEach=)) ('' '') ('' ') (NP (NNP URI-reference) (POS ')) ('' '')) (: ') (NP (NN this.Type)) (X (SYM =)) (NP (NNP ABOUTEACH) (CD this.Valu)) (X (SYM =) (ADJP (ADJP (JJ ABSOLUTE)) (PRN (-LRB- -LRB-) (ADJP (JJ URI-reference)) (-RRB- -RRB-))))))
(S1 (FRAG ('' ') (NP (INTJ (UH aboutEachPrefix=) ('' '')) ('' ') (NN string)) ('' ') ('' '') ('' ')))
(S1 (S (NP (NNP this.Type) (SYM =) (NNP ABOUTEACHPREFIX) (NN this.Valu)) (VP (SYM =) (NP (NN string)) (NP (CD -LSB-6.9) (JJ -RSB-) (NNS bagIdAttr))) (. ?)))
(S1 (NP (NNP ::) (SYM =) ('' ') (NP (NNS bagID=)) ('' '') ('' ') (NP (NNP IDsymbol) (POS ')) ('' '') (: ') (NP (NN this.Type)) (X (SYM =) (X (FW URI) (FW this.Valu) (SYM =)) (NP (NP (NNP BASEURI) (NNP +) (POS ')) (# #) ('' ') (NNP +) (NNP IDsymbol)))))
(S1 (S (NP (NNP this.Type)) (VP (SYM =) (NP (NNP AUTO)))))
(S1 (S (NP (NN this.Value)) (VP (SYM =) (NP (NN genid)) (PRN (-LRB- -LRB-) (FRAG (-RRB- -RRB-) (NP (JJ -LSB-6.10) (JJ -RSB-) (NN propAttr) (PRN (-LRB- -LRB-) (NP (NN subject) (, ,) (NN bag) (, ,) (NN maxOrd)) (-RRB- -RRB-)) (NNS ::)) (X (SYM =) ('' ') (ADJP (JJ xml))) (: :) (NP (CD lang=)) ('' '') ('' ') (NP (NN string) (POS ')) ('' '') ('' '))) (SBAR (S (NP (NNS //)) (VP (VBP ignore) (SBAR (S (NP (NN this.maxOrd)) (VP (SYM =) (NP (CD 0)))))))))))
(S1 (S (FRAG ('' ') (NP (NP (NNS xmlns)) (: :) (: ') (NP (NN name) ('' ') (SYM =) ('' '') (: ') (NP (NN string) (POS ')))) ('' '')) ('' ') (NP (NNS //)) (VP (VBP ignore))))
(S1 (S (NP (NNP this.maxOrd)) (VP (SYM =) (NP (CD 0)))))
(S1 (S (FRAG ('' ') (NP (NNP ID=) ('' '') ('' ') (NN string)) ('' ') ('' '')) ('' ') (NP (NNS //)) (VP (VBP ignore))))
(S1 (S (NP (NNP this.maxOrd)) (VP (SYM =) (NP (CD 0)))))
(S1 (NP (: ') (NNS about=) ('' '') ('' ') (NP (NN string) (POS ')) ('' '') (: ') (NP (JJ //) (VB ignore))))
(S1 (S (NP (NNP this.maxOrd)) (VP (SYM =) (NP (CD 0)))))
(S1 (NP (: ') (NNS aboutEach=) ('' '') ('' ') (NP (NN string) (POS ')) ('' '') (: ') (NP (JJ //) (VB ignore))))
(S1 (S (NP (NNP this.maxOrd)) (VP (SYM =) (NP (CD 0)))))
(S1 (NP (: ') (NNS aboutEachPrefix=) ('' '') ('' ') (NP (NN string) (POS ')) ('' '') (: ') (NP (JJ //) (VB ignore))))
(S1 (S (NP (NNP this.maxOrd)) (VP (SYM =) (NP (CD 0)))))
(S1 (S ('' ') (NP (NP (NNS bagID) (POS ')) (NNS //)) (VP (VBP ignore))))
(S1 (S (NP (NNP this.maxOrd)) (VP (SYM =) (NP (CD 0)))))
(S1 (NP (NP (NNP typeAttr)) (PRN (-LRB- -LRB-) (INTJ (NN subject) (, ,) (NN bag)) (-RRB- -RRB-))))
(S1 (S (NP (NNP this.maxOrd)) (VP (SYM =) (NP (CD 0)))))
(S1 (FRAG ('' ') (NP (NNP rdf)) (: :) (RB li=) ('' '') ('' ') (NP (NN string)) ('' ') ('' '') ('' ')))
(S1 (S (NP (NP (NNP this.stmtType) (SYM =)) (PP (IN if) (NP (NN bag.Type==NONE)))) (ADVP (RB then)) (NP (NN NONE)) (NP (RB else) (JJ ANON) (NN this.stmtValu)) (VP (SYM =) (NP (NP (JJ genid) (-LRB- -LRB-) (-RRB- -RRB-) (NN emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (INTJ (UH this.stmtType)) (, ,))))))
(S1 (NP (NNP this.stmtValu) (-RRB- -RRB-) (, ,) (NP (NP (NN subject)) (, ,) (-LRB- -LRB-) (NP (NP (NNS RDFNS)) (, ,) ('' ') (NP (NNS _1) (POS '))) (-RRB- -RRB-) (-LRB- -LRB-) (NP (JJ LITERAL) (PRN (, ,) (NP (NN string)) (-RRB- -RRB-) (-RRB- -RRB-)) (JJ emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NP (NN NONE)) (, ,) ('' '') (-RRB- -RRB-)) (, ,) (NP (NN bag)) (, ,) (PRN (-LRB- -LRB-) (NP (NNP RDFGNS)) (, ,) (NP (NNP HASMEMBER)) (-RRB- -RRB-))) (, ,) (PRN (-LRB- -LRB-) (INTJ (UH this.stmtType)) (, ,))))
(S1 (S (LST (NN this.stmtValu) (-RRB- -RRB-)) (-RRB- -RRB-) (VP (VB this.maxOrd) (SYM =) (NP (CD 1)))))
(S1 (S (NP (NNP propName) (POS ')) (VP (SYM =) ('' '') (PRN (: ') (NN string) ('' ') ('' '') ('' ') (S (VP (VBG //) (PP (IN with))))))))
(S1 (S (NP (VBN embedded) (NN //) (NNS quotes)) (VP (VBD escaped) (NP (NP (NN this.stmtType)) (SBAR (X (SYM =) (PP (IN if) (NP (NN bag.Type==NONE)))) (S (ADVP (RB then)) (NP (NN NONE)) (NP (RB else) (JJ ANON) (NN this.stmtValu)) (VP (SYM =) (NP (NP (JJ genid) (-LRB- -LRB-) (-RRB- -RRB-) (NN emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (INTJ (UH this.stmtType)) (, ,))))))))))
(S1 (NP (NP (NNP this.stmtValu) (-RRB- -RRB-)) (, ,) (NP (NN subject)) (, ,) (NP (-LRB- -LRB-) (NNS propName.ns)) (, ,)))
(S1 (PRN (NP (NN propName.namespace)) (-RRB- -RRB-)))
(S1 (PRN (-LRB- -LRB-) (NP (NP (JJ LITERAL) (PRN (, ,) (NN string) (-RRB- -RRB-) (-RRB- -RRB-)) (JJ emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (, ,) (NP (NN bag)) (, ,) (PRN (-LRB- -LRB-) (NP (NNP RDFGNS)) (, ,) (NP (NNP HASMEMBER)) (-RRB- -RRB-))) (, ,) (-LRB- -LRB-) (INTJ (UH this.stmtType)) (, ,)))
(S1 (S (LST (NN this.stmtValu) (-RRB- -RRB-)) (-RRB- -RRB-) (NP (NN this.maxOrd)) (VP (SYM =) (NP (NP (NN maxOrd)) (-LRB- -LRB-) (NP (NN maxOrd)) (, ,) (NP (NNS propName.ns)) (, ,)))))
(S1 (NP (NNP propName.localname) (-RRB- -RRB-)))
(S1 (NP (CD -LSB-6.10.1) (NN -RSB-)))
(S1 (S (NP (NNP propAttr) (NNP *) (PRN (-LRB- -LRB-) (NP (NN subject) (, ,) (NN bag) (, ,) (NN maxOrd)) (-RRB- -RRB-)) (NN ::)) (VP (SYM =) (NP (NP (JJ propAttr) (PRN (-LRB- -LRB-) (NP (NN subject)) (, ,) (NP (NN bag)) (-RRB- -RRB-)) (NNS propAttr) (NN *) (PRN (-LRB- -LRB-) (NP (NN subject)) (, ,) (NP (NN bag)) (-RRB- -RRB-)) (NN this.maxOrd=max)) (-LRB- -LRB-) (NP (NN maxOrd)) (, ,) (NP (NN propAttr.maxOrd)) (, ,)))))
(S1 (NP (NNP propAttr) (NNP *) (NNP .maxOrd) (-RRB- -RRB-)))
(S1 (NP (NP (NP (CD -LSB-6.11) (JJ -RSB-) (NNS typeAttr)) (PRN (-LRB- -LRB-) (NP (NN subject)) (, ,) (NP (NN bag)) (-RRB- -RRB-))) (JJ ::) (SYM =) ('' ') (NP (NN type=)) ('' '') (: ') (NP (NP (NNP URI-reference) (POS ')) ('' '') (: ') (NP (NN this.stmtType)) (X (SYM =) (PP (IN if) (NP (NN bag.Type==NONE))) (X (ADVP (RB then)) (NP (NP (NN NONE)) (NP (RB else) (NN ANON) (NN this.stmtValu))) (SYM =)) (NP (NP (JJ genid) (-LRB- -LRB-) (-RRB- -RRB-) (NN emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (INTJ (UH this.stmtType)) (, ,)))))))
(S1 (FRAG (NP (NNP this.stmtValu)) (-RRB- -RRB-) (, ,) (NP (NP (NN subject)) (PRN (, ,) (-LRB- -LRB-) (NP (NNP RDFNS)) (, ,) (NP (NN TYPE)) (-RRB- -RRB-)) (, ,) (NP (PRN (-LRB- -LRB-) (NP (NNP URI)) (, ,) (NP (NN URI-reference)) (-RRB- -RRB-) (-RRB- -RRB-)) (JJ emitTriple)) (PRN (-LRB- -LRB-) (NP (NP (PRN (-LRB- -LRB-) (NP (NN NONE)) (, ,) ('' '') (-RRB- -RRB-)) (NN bag)) (, ,) (PRN (-LRB- -LRB-) (NP (NP (NNP RDFGNS)) (, ,) (NP (NNP HASMEMBER))) (-RRB- -RRB-))) (, ,) (-LRB- -LRB-) (INTJ (UH this.stmtType)) (, ,)))))
(S1 (NP (NP (NNP this.stmtValu) (-RRB- -RRB-) (-RRB- -RRB-) (NN -LSB-6.12) (NN -RSB-) (NN propertyElt) (PRN (-LRB- -LRB-) (INTJ (NN subject) (, ,) (NN bag)) (-RRB- -RRB-)) (NN ::)) (X (SYM =) ('' ')) (: ') (NP (NP (JJ propName) (NNS rsidAttr)) (. ?) (PRN (-LRB- -LRB-) (NN bag) (-RRB- -RRB-)))))
(S1 (S (NP (NNP //)) (VP (VBD modifed) (PP (IN from) (NP (CD idAttr)))) (. ?)))
(S1 (NP (NP ('' ') ('' ') (NN value)) (PRN (-LRB- -LRB-) (ADJP (JJ subject)) (, ,) (-LRB- -LRB-) (NNS propName.ns) (, ,))))
(S1 (PRN (NP (NN propName.localname)) (-RRB- -RRB-) (, ,)))
(S1 (NP (NP (NN bag)) (PRN (, ,) (-LRB- -LRB-) (INTJ (INTJ (UH rsidAttr) (. ?) (UH .Type)) (, ,) (INTJ (UH rsidAttr) (. ?) (UH .Valu))) (-RRB- -RRB-) (-RRB- -RRB-)) (: ') (NP (NP (NNP /) (POS ')) (NN propName) ('' ')) (: ')))
(S1 (S ('' ') ('' ') (VP (VBD propName))))
(S1 (S (NP (NNP rsidAttr) (. ?) (PRN (-LRB- -LRB-) (NN bag) (-RRB- -RRB-)) (NN //)) (VP (VBN modified) (PP (IN from) (NP (CD idAttr)))) (. ?)))
(S1 (NP (NP (NNP parseLiteral) (POS ')) (: ') (NP (NP (NP (JJ literal) ('' ') (NNP /) (POS ')) (JJ propName) ('' ') (PRN ('' ') (NP (JJ emitTriple) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (JJ rsidAttr) (. ?) (FRAG (INTJ (UH .Type)) (, ,) (ADVP (RB rsidAttr)) (. ?))) (NNS .Valu)) (-RRB- -RRB-)) (, ,) (ADJP (JJ subject)) (, ,)) (PRN (-LRB- -LRB-) (NNS propName.ns) (, ,)))))
(S1 (PRN (NP (NN propName.localname)) (-RRB- -RRB-) (, ,)))
(S1 (PRN (-LRB- -LRB-) (NP (NP (JJ LITERAL) (, ,) (JJ literal) (-RRB- -RRB-) (NN emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (, ,) (NP (NN bag)) (, ,) (PRN (-LRB- -LRB-) (NP (NNP RDFG)) (, ,) (NP (NNP HASMEMBER)) (-RRB- -RRB-)) (, ,) (NP (PRN (-LRB- -LRB-) (INTJ (UH rsidAttr) (. ?) (UH .Type)) (, ,)) (NN rsidAttr)) (. ?)) (NN .Valu) (-RRB- -RRB-) (-RRB- -RRB-)))
(S1 (S ('' ') ('' ') (VP (VBD propName))))
(S1 (S (NP (NNP rsidAttr) (. ?) (PRN (-LRB- -LRB-) (NN bag) (-RRB- -RRB-)) (NN //)) (VP (VBN modified) (PP (IN from) (NP (CD idAttr)))) (. ?)))
(S1 (S (NP (NP (NNP parseResource) (POS ')) ('' ') (NN this.objectType)) (X (SYM =)) (NP (JJ ANON) (NN this.objectValu)) (VP (SYM =) (NP (NP (JJ genid) (PRN (-LRB- -LRB-) (FRAG (-RRB- -RRB-) (NP (JJ emitTriple) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (INTJ (UH rsidAttr) (. ?) (UH .Type)) (, ,)) (NN rsidAttr)) (. ?)) (NP (NN .Valu)) (-RRB- -RRB-)) (NN subject)) (PRN (, ,) (-LRB- -LRB-) (NNS propName.ns) (, ,))))))
(S1 (PRN (NP (NN propName.localname)) (-RRB- -RRB-) (, ,)))
(S1 (PRN (-LRB- -LRB-) (NN this.objectType) (, ,)))
(S1 (NP (NP (NNP this.objectValu) (-RRB- -RRB-) (-RRB- -RRB-) (NN emitTriple) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (, ,) (NP (NN bag)) (, ,)) (PRN (-LRB- -LRB-) (NP (NNP RDFG)) (, ,) (NP (NNP HASMEMBER)) (-RRB- -RRB-)) (PRN (-LRB- -LRB-) (INTJ (UH rsidAttr.Type)) (, ,))))
(S1 (PRN (NP (NNP rsidAttr.Valu)) (-RRB- -RRB-) (-RRB- -RRB-)))
(S1 (S (X (FW this.bagType) (SYM =)) (NP (NN AUTO) (NN this.bagValu)) (VP (SYM =) (NP (NP (NN genid)) (PRN (-LRB- -LRB-) (NP (NP (-RRB- -RRB-) (NN emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-))) (-LRB- -LRB-) (INTJ (UH this.bagType)) (, ,))))))
(S1 (S (NP (NNP this.bagValu)) (-RRB- -RRB-) (, ,) (PRN (-LRB- -LRB-) (NP (NNP RDFNS)) (, ,) (NP (NN TYPE)) (-RRB- -RRB-)) (, ,) (-LRB- -LRB-) (NP (NNP URI) (, ,) (NNP RDFNS+BAG)) (-RRB- -RRB-) (NP (NP (JJ propertyElt) (NNS *)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (INTJ (UH this.objectType)) (, ,)))))
(S1 (NP (NP (NNP this.objectValu) (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (INTJ (UH this.bagType)) (, ,))))
(S1 (S (LST (NN this.bagValu) (-RRB- -RRB-) (-RRB- -RRB-)) (: ') (NP (NP (NNP /) (POS ')) (NN propName)) ('' ') ('' ')))
(S1 (S ('' ') ('' ') (VP (VBD propName))))
(S1 (INTJ (UH idRefAttr) (. ?)))
(S1 (X (X (NNP this.stmtType) (SYM =)) (PP (IN if) (NP (NN bag.Type==NONE))) (X (ADVP (RB then)) (NP (NP (NN NONE)) (NP (RB else) (NN ANON) (NN this.stmtValu))) (SYM =)) (NP (NP (NP (JJ genid) (-LRB- -LRB-) (-RRB- -RRB-) (NN emitTriple)) (PRN (-LRB- -LRB-) (INTJ (UH this.stmtType)) (, ,) (NP (NN this.stmtValu)) (-RRB- -RRB-))) (, ,) (NP (NN subject)) (, ,) (NP (-LRB- -LRB-) (NNS propName.ns)) (, ,))))
(S1 (PRN (NP (NN propName.localname)) (-RRB- -RRB-) (, ,)))
(S1 (PRN (-LRB- -LRB-) (INTJ (UH idRefAttr.Type) (, ,) (NN idRefAttr.Valu)) (-RRB- -RRB-) (-RRB- -RRB-)))
(S1 (NP (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (, ,) (NP (NN bag)) (, ,)) (PRN (-LRB- -LRB-) (NP (NNP RDFG)) (, ,) (NP (NNP HASMEMBER)) (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (INTJ (UH this.stmtType)) (, ,))))
(S1 (S (LST (NN this.stmtValu) (-RRB- -RRB-)) (-RRB- -RRB-) (VP (VBZ bagIdAttr)) (. ?)))
(S1 (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (INTJ (INTJ (UH bagIdAttr.Type)) (, ,) (INTJ (UH bagIdAttr.valu))) (-RRB- -RRB-) (, ,))))
(S1 (S (-LRB- -LRB-) (NP (NP (NNP RDFNS)) (PRN (, ,) (NP (NN TYPE)) (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (NP (NNP URI)) (, ,) (NP (NNP RDFNS+BAG)) (-RRB- -RRB-))) (-RRB- -RRB-) (VP (VBZ propAttr) (NP (NP (NNP *)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (INTJ (UH idRefAttr.Type)) (, ,) (NP (NN idRefAttr.Valu)) (-RRB- -RRB-)))) (, ,)))
(S1 (PRN (-LRB- -LRB-) (NN bagIdAttr.type) (, ,)))
(S1 (PRN (NP (NN bagIdAttr.value)) (-RRB- -RRB-) (, ,)))
(S1 (S (NP (NP (CD 0) (-RRB- -RRB-) ('' ') (NNP /) (POS ')) (JJ //) (JJ new) (NN alternative)) (VP (VBN added) (S (VP (TO to) (VP (VB handle) (NP (JJ unknown) (NN parseType) (POS 's))))))))
(S1 (S ('' ') ('' ') (VP (VBD propName))))
(S1 (NP (NP (NNP rsidAttr) (. ?) (PRN (-LRB- -LRB-) (NN bag) (-RRB- -RRB-)) (NN parseType) ('' ') (PRN (: ') (VP (VBG //) (NP (NP (JJ other) (JJ parse) (NNS types)) (VP (ADVP (RB //)) (VBN treated) (PP (IN as) (NP (NP (JJ literal) (JJ literal) ('' ') (NNP /) (POS ')) (ADJP (JJ propName) ('' ') (: ') (JJ emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (FRAG (INTJ (UH rsidAttr) (. ?) (UH .Type)) (, ,) (NP (NN rsidAttr)) (. ?))) (NN .Valu)))))) (-RRB- -RRB-)) (, ,) (ADJP (JJ subject)) (, ,)) (PRN (-LRB- -LRB-) (NNS propName.ns) (, ,))))
(S1 (PRN (NP (NN propName.localname)) (-RRB- -RRB-) (, ,)))
(S1 (PRN (-LRB- -LRB-) (NP (NP (JJ LITERAL) (, ,) (JJ literal) (-RRB- -RRB-) (NN emitTriple) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (, ,) (NP (NN bag)) (, ,) (PRN (-LRB- -LRB-) (NP (NNP RDFG)) (, ,) (NP (NNP HASMEMBER)) (-RRB- -RRB-)) (, ,)) (PRN (-LRB- -LRB-) (INTJ (UH rsidAttr) (. ?) (UH .Type)) (, ,) (NP (NN rsidAttr.Valu)) (-RRB- -RRB-))) (-RRB- -RRB-)))
(S1 (NP (NP (CD -LSB-6.13) (JJ -RSB-) (NN typedNode) (PRN (-LRB- -LRB-) (NP (NN subject) (, ,) (NN predicate) (, ,) (NN bag) (, ,) (NN rsid)) (-RRB- -RRB-)) (NNS ::) (SYM =) ('' ')) (: ') (NP (JJ typeName) (NN idAboutAttr)) (. ?)))
(S1 (S (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (NP (NP (NN rsid)) (, ,) (NP (NP (NN subject)) (, ,) (NP (NN predicate)) (, ,) (PRN (-LRB- -LRB-) (INTJ (UH idAboutAttr) (. ?) (UH .Type)) (, ,)) (NP (NN idAboutAttr))) (. ?) (PRN (NN .Valu) (-RRB- -RRB-) (-RRB- -RRB-)) (NP (NP (NN emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (, ,) (NP (NN bag)) (, ,) (PRN (-LRB- -LRB-) (NP (NNP RDFG)) (, ,) (NP (NNP HASMEMBER)) (-RRB- -RRB-)) (, ,) (NP (NN rsid)))) (-RRB- -RRB-))) (VP (VBZ bagIdAttr)) (. ?)))
(S1 (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (INTJ (INTJ (UH bagIdAttr.Type)) (, ,) (INTJ (UH bagIdAttr.valu))) (-RRB- -RRB-) (, ,))))
(S1 (S (PRN (-LRB- -LRB-) (NP (NNP RDFNS)) (, ,) (NP (NN TYPE)) (-RRB- -RRB-)) (, ,) (NP (PRN (-LRB- -LRB-) (NP (NNP URI)) (, ,) (NP (NNP RDFNS+BAG)) (-RRB- -RRB-) (-RRB- -RRB-)) (JJ this.stmtType) (SYM =) (PP (IN if) (NP (NN bagIdAttr.Type==NONE)))) (ADVP (RB then)) (NP (NN NONE)) (NP (RB else) (JJ ANON) (NN this.stmtValu)) (VP (SYM =) (NP (NP (JJ genid) (-LRB- -LRB-) (-RRB- -RRB-) (NN emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (INTJ (UH this.stmtType)) (, ,))))))
(S1 (NP (NP (NNP this.stmtValu) (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (INTJ (UH idAboutAttr.Type)) (, ,))))
(S1 (PRN (NP (NNP idAboutAttr.valu)) (-RRB- -RRB-) (, ,)))
(S1 (NP (PRN (-LRB- -LRB-) (NP (NNP RDFNS)) (, ,) (NP (NN TYPE)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (FW URI) (, ,)) (NNS typeName.ns)))
(S1 (PRN (NP (JJ +) (NN typename.Qname)) (-RRB- -RRB-) (-RRB- -RRB-)))
(S1 (NP (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (INTJ (INTJ (UH bagIdAttr) (. ?) (UH .Type)) (, ,) (INTJ (UH bagIdAttr) (. ?) (UH .Valu))) (, ,))) (PRN (-LRB- -LRB-) (NP (NNP RDFG)) (, ,) (NP (NNP HASMEMBER)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (INTJ (UH this.stmtType)) (, ,))))
(S1 (S (NP (NNP this.stmtValu)) (-RRB- -RRB-) (VP (VBD propAttr) (NP (NP (NNS *)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (INTJ (INTJ (UH idAboutAttr.type)) (, ,) (INTJ (UH idAboutAttr.valu))) (-RRB- -RRB-) (, ,))))))
(S1 (PRN (-LRB- -LRB-) (NN bagIdAttr.type) (, ,)))
(S1 (PRN (NP (NN bagIdAttr.value)) (-RRB- -RRB-) (, ,)))
(S1 (S (NP (CD 0)) (-RRB- -RRB-) (VP (POS ') (NP (NNP /) (POS ')))))
(S1 (S ('' ') ('' ') (VP (VBD typeName))))
(S1 (INTJ (UH idAboutAttr) (. ?)))
(S1 (S (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (NP (NP (NN rsid)) (, ,) (NP (NP (NN subject)) (, ,) (NP (NN predicate)) (, ,) (PRN (-LRB- -LRB-) (INTJ (UH idAboutAttr) (. ?) (UH .Type)) (, ,)) (NP (NN idAboutAttr))) (. ?) (PRN (NN .Valu) (-RRB- -RRB-) (-RRB- -RRB-)) (NP (NP (NN emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (, ,) (NP (NN bag)) (, ,) (PRN (-LRB- -LRB-) (NP (NNP RDFG)) (, ,) (NP (NNP HASMEMBER)) (-RRB- -RRB-)) (, ,) (NP (NN rsid)))) (-RRB- -RRB-))) (VP (VBZ bagIdAttr)) (. ?)))
(S1 (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (INTJ (INTJ (UH bagIdAttr.Type)) (, ,) (INTJ (UH bagIdAttr.valu))) (-RRB- -RRB-) (, ,))))
(S1 (FRAG (PRN (-LRB- -LRB-) (NP (NNP RDFNS)) (, ,) (NP (NN TYPE)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (NP (NNP URI)) (, ,) (NP (NNP RDFNS+BAG)) (-RRB- -RRB-)) (-RRB- -RRB-) (NP (NN this.stmtType)) (X (SYM =)) (PP (IN if) (NP (NP (JJ bagIdAttr.Type==NONE) (JJ else) (NN ANON) (NN this.stmtValu)) (X (X (SYM =)) (NP (NP (JJ genid) (-LRB- -LRB-) (-RRB- -RRB-) (NN emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (INTJ (UH this.stmtType)) (, ,))))))))
(S1 (NP (NP (NNP this.stmtValu) (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (INTJ (UH idAboutAttr.Type)) (, ,))))
(S1 (PRN (NP (NNP idAboutAttr.valu)) (-RRB- -RRB-) (, ,)))
(S1 (NP (PRN (-LRB- -LRB-) (NP (NNP RDFNS)) (, ,) (NP (NN TYPE)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (FW URI) (, ,)) (NNS typeName.ns)))
(S1 (PRN (NP (JJ +) (NN typename.Qname)) (-RRB- -RRB-) (-RRB- -RRB-)))
(S1 (NP (NP (NP (NNP emitTriple)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-)) (PRN (, ,) (-LRB- -LRB-) (INTJ (INTJ (UH bagIdAttr) (. ?) (UH .Type)) (, ,) (INTJ (UH bagIdAttr) (. ?) (UH .Valu))) (, ,))) (PRN (-LRB- -LRB-) (NP (NNP RDFG)) (, ,) (NP (NNP HASMEMBER)) (-RRB- -RRB-)) (, ,) (PRN (-LRB- -LRB-) (INTJ (UH this.stmtType)) (, ,))))
(S1 (S (NP (NNP this.stmtValu)) (-RRB- -RRB-) (VP (VBD propAttr) (NP (NP (NNS *)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (INTJ (INTJ (UH idAboutAttr.type)) (, ,) (INTJ (UH idAboutAttr.valu))) (-RRB- -RRB-) (, ,))))))
(S1 (PRN (-LRB- -LRB-) (NN bagIdAttr.type) (, ,)))
(S1 (PRN (NP (NN bagIdAttr.value)) (-RRB- -RRB-) (, ,)))
(S1 (NP (NP (CD 0) (-RRB- -RRB-) (NN propertyElt) (NN *)) (PRN (-LRB- -LRB-) (-LRB- -LRB-) (INTJ (INTJ (UH idAboutAttr.Type)) (, ,) (INTJ (UH idAboutAttr.Valu))) (-RRB- -RRB-)) (, ,)))
(S1 (PRN (-LRB- -LRB-) (INTJ (UH bagIdAttr.Type) (, ,) (NN bagIdAttr.Valu)) (-RRB- -RRB-) (-RRB- -RRB-)))
(S1 (FRAG ('' ') (NP (NP (NP (NNP /) (POS ')) (NN typeName) ('' ')) (: ') (NP (CD -LSB-6.14) (JJ -RSB-) (JJ propName) (NNS ::))) (X (SYM =)) (X (JJ Qname) (NNS this.ns) (SYM =)) (NP (NNPS Qname.ns))))
(S1 (NP (NNP this.localname) (SYM =) (NNP Qname.localname)))
(S1 (S (NP (CD -LSB-6.15) (JJ -RSB-) (JJ typeName) (NNS ::)) (VP (SYM =) (NP (NP (JJ Qname) (NNS this.ns)) (X (X (SYM =)) (NP (NNP Qname.ns)))))))
(S1 (NP (NNP this.localname) (SYM =) (NNP Qname.localname)))
(S1 (S (NP (CD -LSB-6.16) (NN -RSB-)) (VP (VBD idRefAttr)) (. ?)))
(S1 (X (FW ::) (SYM =) (X (FW idAttr) (FW this.Type) (SYM =)) (NP (NN idAttr.Type))))
(S1 (S (NP (NNP this.Valu)) (VP (SYM =) (NP (NN idAttr.Valu)))))
(S1 (NP (NNP resourceAttr)))
(S1 (NP (NNP this.Type) (SYM =) (FW resourceAttr.Type)))
(S1 (S (NP (NNP this.Valu)) (VP (SYM =) (NP (NN resourceAttr.Valu)))))
(S1 (NP (NNP this.Type) (SYM =) (NNP ANON)))
(S1 (S (NP (NNP this.Valu)) (VP (SYM =) (VP (VB genid) (S (-LRB- -LRB-) (-RRB- -RRB-) (NP (NP (CD -LSB-6.17) (JJ -RSB-) (NN value) (PRN (-LRB- -LRB-) (NP (NN subject) (, ,) (NN predicate) (, ,) (NN bag) (, ,) (NN rsid)) (-RRB- -RRB-)) (NNS ::) (X (SYM =)) (CD obj)) (PRN (-LRB- -LRB-) (NP (NN subject) (, ,) (NN predicate) (, ,) (NN bag) (, ,) (NN rsid)) (-RRB- -RRB-))))))))
(S1 (NP (NN string)))
(S1 (S (NNP emitTriple) (-LRB- -LRB-) (JJ rsid) (, ,) (JJ subject) (, ,) (VB predicate) (, ,) (-LRB- -LRB-) (JJ LITERAL) (, ,) (NN string) (-RRB- -RRB-) (-RRB- -RRB-) (JJ emitTriple) (-LRB- -LRB-) (-LRB- -LRB-) (NN NONE) (, ,) ('' '') (-RRB- -RRB-) (, ,) (NN bag) (, ,) (-LRB- -LRB-) (NNS RDFNS) (, ,) (POS ') (NNP _) (POS ') (NNP +) (NN bagNext) (-RRB- -RRB-) (, ,) (JJ rsid) (-RRB- -RRB-) (NN -LSB-6.18) (JJ -RSB-) (CD resourceAttr) (CD ::) (SYM =) (POS ') (CD resource=) ('' '') (POS ') (NN URI-reference) (POS ') ('' '') (POS ') (NN this.Type) (SYM =) (NNP URI) (NN this.Valu) (SYM =) (NN URI-reference) (CD -LSB-6.19) (JJ -RSB-) (NNP Qname) (CD ::) (SYM =) (JJ -LSB-) (NNP NSprefix) (POS ') (: :) (POS ') (JJ -RSB-) (NN name) (NNS this.ns) (SYM =) (FW namespaceURI) (-LRB- -LRB-) (NNP NSprefix) (-RRB- -RRB-) (JJ this.localname) (SYM =) (NN name) (CD -LSB-6.20) (JJ -RSB-) (NN URI-reference) (CD ::) (SYM =) (NN string) (, ,) (VBN interpreted) (IN per) (NN -LSB-URI) (JJ -RSB-) (JJ -LSB-6.21) (JJ -RSB-) (NNP IDsymbol) (CD ::) (SYM =) (-LRB- -LRB-) (DT any) (JJ legal) (NNP XML) (NN name) (NN symbol) (-RRB- -RRB-) (CD -LSB-6.22) (JJ -RSB-) (NN name) (CD ::) (SYM =) (-LRB- -LRB-) (DT any) (JJ legal) (NNP XML) (NN name) (NN symbol) (-RRB- -RRB-) (CD -LSB-6.23) (JJ -RSB-) (NNP NSprefix) (CD ::) (SYM =) (-LRB- -LRB-) (DT any) (JJ legal) (NNP XML) (NN namespace) (NN prefix) (-RRB- -RRB-) (CD -LSB-6.24) (JJ -RSB-) (NN string) (CD ::) (SYM =) (-LRB- -LRB-) (DT any) (NNP XML) (NN text) (, ,) (IN with) ('' '') ('' '') (, ,) ('' '') ('' '') (, ,) (CC and) (`` ``) (NN &amp) (: ;) ('' '') (VBD escaped) (-RRB- -RRB-) (CD -LSB-6.25) (JJ -RSB-) (CD //) (NN container) (NN production) (VBN deleted) (CD -LSB-6.26) (JJ -RSB-) (CD //) (NN container) (NN produciton) (VBN deleted) (CD -LSB-6.27) (JJ -RSB-) (CD //) (NN container) (NN production) (VBN deleted) (CD -LSB-6.28) (JJ -RSB-) (CD //) (NN container) (NN production) (VBN deleted) (SYM @) (SYM @) (NNP rdf) (: :) (NNP li) (NN processing) (NN todo) (CD -LSB-6.29) (JJ -RSB-) (CD //) (NN container) (NN production) (VBN deleted) (CD -LSB-6.30) (JJ -RSB-) (CD //) (NN container) (NN production) (VBN deleted) (CD -LSB-6.31) (JJ -RSB-) (CD //) (NN container) (NN production) (VBN deleted) (CD -LSB-6.32) (JJ -RSB-) (JJ parseLiteral) (CD ::) (SYM =) (POS ') (CD parseType=) (`` ``) (JJ Literal) ('' '') (POS ') (CD -LSB-6.33) (JJ -RSB-) (NN parseResource) (CD ::) (SYM =) (POS ') (CD parseType=) (`` ``) (NNP Resource) ('' '') (POS ') (CD -LSB-6.34) (JJ -RSB-) (JJ literal) (CD ::) (SYM =) (-LRB- -LRB-) (DT any) (JJ well-formed) (NNP XML) (-RRB- -RRB-) (CD //) (JJ new) (NNS productions) (RB here) (CD -LSB-6.35) (JJ -RSB-) (NN parseType) (CD ::) (SYM =) (POS ') (CD parseType=) ('' '') (POS ') (NN string) (POS ') ('' '') (POS ') (CD -LSB-6.36) (JJ -RSB-) (CD rsidAttr) (. ?) (-LRB- -LRB-) (NN bag) (-RRB- -RRB-)))
(S1 (S (NP (NNP ::) (SYM =) ('' ') (NP (INTJ (UH ID=) ('' '')) ('' ') (NN string)) ('' ') (PRN ('' '') (: ') (PP (FW this.Type=URI) (FW this.Valu=BASEURI)) (-LRB- -LRB-) (-RRB- -RRB-))) (VP (VBZ +) (: ') (NP (NP (# #) (POS ')) (JJ +) (NN string)))))
(S1 (PP (IN if) (NP (NN bag.Type==NONE))))
(S1 (NP (NP (JJ this.Type=NONE) (JJ else) (NN this.Type=ANON) (NN this.Valu=genid)) (-LRB- -LRB-) (-RRB- -RRB-)))
(S1 (FRAG (ADVP (RB Now)) (SBAR (IN for) (S (NP (DT the) (NN XSLT)) (VP (VB transform)))) (. .)))
(S1 (S (NP (NP (DT The) (NN output) (NN language)) (SBAR (S (NP (PRP it)) (VP (VBZ produces))))) (VP (AUX is) (SBAR (IN as) (S (VP (VBZ follows))))) (. .)))
(S1 (S (NP (DT Each) (NN statement)) (VP (AUX is) (NP (NP (NN output)) (PP (IN as) (NP (DT a) (NN statement) (NN element))))) (. .)))
(S1 (S (NP (DT The) (NN subject)) (VP (AUX is) (VP (VBN represented) (PP (IN by) (NP (NP (DT an) (NN attribute)) (, ,) (NP (NP (DT either) (FW subjURI)) (SBAR (IN if) (S (NP (DT the) (NN subject)) (VP (AUX has) (NP (DT a) (JJ known) (NN URI)))))) (, ,) (CC or) (NP (NN subjANON)))) (SBAR (IN if) (S (NP (DT the) (NN subject)) (VP (AUX is) (ADJP (JJ anonymous))))))) (. .)))
(S1 (S (NP (NP (DT The) (NN value)) (PP (IN of) (NP (DT a) (JJ subjRes) (NN attribute)))) (VP (AUX is) (NP (NP (DT the) (NN URI)) (PP (IN of) (NP (DT the) (NN resource))))) (. .)))
(S1 (S (NP (NP (DT The) (NN value)) (PP (IN of) (NP (DT the) (NN subjAnon) (NN attribute)))) (VP (AUX is) (NP (NP (DT a) (VBN generated) (VBN id.) (JJ -LSB-) (NN @@) (NN TODO)) (SBAR (S (NP (PRP It)) (VP (AUX does) (RB n't) (ADVP (RB currently)) (VP (VB handle) (NP (ADJP (JJ aboutEach) (CC and) (JJ aboutEachPrefix)) (VBN distributed) (NNS referents)) (ADVP (RB properly)))))))) (. .)))
(S1 (S (PP (IN For) (NP (RB now))) (, ,) (NP (PRP it)) (ADVP (RB just)) (VP (VBZ outputs) (NP (DT a) (JJ single) (NN statement)) (PP (IN for) (NP (NP (DT each)) (PP (IN with) (NP (DT either) (DT a) (NN subjaboutEach) (CC or) (NN subjaboutEachPrefix) (NN subject)))))) (. .) (`` -RSB-)))
(S1 (S (NP (NP (DT The) (NN predicate)) (PP (IN of) (NP (DT the) (NN statement)))) (VP (AUX is) (VP (VBN represented) (PP (IN by) (NP (NP (CD two) (NNS attributes)) (, ,) (ADJP (JJ ns) (CC and) (JJ localname)))))) (. .)))
(S1 (S (NP (NP (DT The) (NN value)) (PP (IN of) (NP (DT the) (JJ ns) (NN attribute)))) (VP (AUX is) (NP (NP (DT the) (NN URI)) (PP (IN of) (NP (NP (DT the) (NN namespace)) (PP (IN of) (NP (DT the) (NN predicate))))))) (. .)))
(S1 (S (NP (NP (DT The) (NN value)) (PP (IN of) (NP (DT the) (JJ localname) (NN attribute)))) (VP (AUX is) (NP (NP (DT the) (JJ localname) (NN part)) (PP (IN of) (NP (NP (DT the) (NN Qname)) (VP (VBG representing) (NP (DT the) (NN predicate))))))) (. .)))
(S1 (S (SBAR (IN If) (S (NP (NP (DT the) (NN object)) (PP (IN of) (NP (DT the) (NN statement)))) (VP (AUX is) (NP (DT a) (JJ literal))))) (, ,) (NP (NP (DT the) (NN value)) (PP (IN of) (NP (DT the) (JJ literal)))) (VP (AUX is) (VP (VBN represented) (PP (IN as) (NP (NP (DT the) (NN content)) (PP (IN of) (NP (DT the) (NN element))))))) (. .)))
(S1 (S (SBAR (IN If) (S (NP (DT the) (NN object)) (VP (AUX has) (NP (DT an) (JJ associated) (NN language))))) (, ,) (NP (DT the) (NN statement) (NN element)) (VP (AUX has) (NP (NP (DT an) (NN xml)) (: :) (NP (NP (NNP lang) (NN attribute)) (SBAR (WHNP (WP$ whose) (NN value)) (S (VP (AUX is) (NP (NP (DT the) (NN encoding)) (PP (IN of) (NP (DT that) (NN langauge)))))))))) (. .)))
(S1 (NP (NP (JJ -LSB-) (NN @@) (NNP TODO) (NNP xml)) (: :) (S (S (NP (NNP lang)) (VP (VBG processing) (S (RB not) (VP (AUX done) (ADJP (JJ -RSB-)) (SBAR (IN If) (S (NP (NP (DT the) (NN object)) (PP (IN of) (NP (DT the) (NN statement)))) (VP (AUX is) (NP (DT a) (NN resource))))))))) (, ,) (RB then) (S (NP (DT the) (NN statement) (NN element)) (VP (MD will) (VP (AUX have) (ADVP (RB either)) (NP (NP (DT an) (NN objURI) (NN attribute)) (CC or) (NP (DT an) (NN objAnon) (NN attribute))))))) (. .)))
(S1 (S (SBAR (IN If) (S (NP (NP (DT the) (NN object)) (PP (IN of) (NP (DT the) (NN statement)))) (VP (AUX is) (NP (DT an) (JJ anonymous) (NN resource))))) (, ,) (RB then) (NP (DT the) (NN statement)) (VP (AUX has) (NP (NP (DT an) (NN objURI) (NN attribute)) (SBAR (WHNP (WP$ whose) (NN value)) (S (VP (AUX is) (NP (NP (DT the) (NN URI)) (PP (IN of) (NP (DT the) (NN resource))))))))) (. .)))
(S1 (S (SBAR (IN If) (S (NP (NP (DT the) (NN object)) (PP (IN of) (NP (DT the) (NN statement)))) (VP (AUX is) (ADJP (JJ anonymous))))) (, ,) (ADVP (RB then)) (NP (DT the) (NN statement) (NN element)) (VP (MD will) (VP (AUX have) (NP (NP (DT an) (JJ objANONn) (NN attribute)) (SBAR (WHNP (WP$ whose) (NN value)) (S (VP (AUX is) (NP (NP (DT an) (JJ internal) (NN identifier)) (PP (IN of) (NP (DT the) (NN resource)))))))))) (. .)))
(S1 (NP (NP (NNS Examples)) (: :) (S (NP (NN Statement)) (VP (VBZ subjURI=) (`` ``) (NP (NP (NNS http)) (: :) (NP (CD //aldabaran.hpl.hp.com/bwm))) ('' '') (S (VP (VBG ns=) (`` ``) (NP (NP (NNS http)) (: :) (NP (CD //aldabaran.hpl.hp.com/ns/))) ('' '') (S (VP (VBG objURI=) (`` ``) (NP (NP (NNS http)) (: :) (NP (CD //aldabaran.hpl.hp.com/))) ('' '') (SBAR (S (NP (NNP /) (NN Statement)) (VP (VBD subjANON=) (SBAR (S (NP (NP (`` ``) (CD 1) ('' '') (NN ns=)) (`` ``) (NP (NP (NNS http)) (: :) (NP (JJ //aldabaran.hpl.hp.com/ns/) ('' '') (NNS xml)) (: :) (NP (NN lang=) (`` ``) (FW en) ('' '') (NP (NP (DT The) (NN value)) (PP (IN of) (NP (DT a) (JJ literal) (NN object)))) (, ,) (VP (ADVP (RB possibly)) (VBG including) (NP (NP (JJ markup) (JJ /Statement) (NN Statement)) (VP (VBN subjANON=) (NP (NP (`` ``) (CD 2) ('' '') (NN ns=)) (`` ``) (NP (NN http))))))) (: :) (NP (NNS //aldabaran.hpl.hp.com/ns/))) ('' '')) (VP (VBD objANON=) (SBAR (S (NP (`` ``) (CD 2) ('' '')) (VP (VBD /) (SBAR (S (NP (NP (DT The) (NN tranform)) (SBAR (WHNP (WDT which)) (S (VP (VBZ follows))))) (VP (AUX is) (RB not) (NP (DT a) (NN parser)))))))))))))))))))) (. .)))
(S1 (S (NP (PRP It)) (VP (VBZ assumes) (SBAR (IN that) (S (NP (DT the) (NN input)) (VP (VP (AUX is) (ADJP (RB syntactically) (JJ valid))) (CC and) (VP (AUX does) (NP (DT no) (JJ syntax) (NN error) (NN checking))))))) (. .)))
(S1 (NP (: --) (NP (NN xsl)) (: :) (NP (NP (JJ variable) (NNS name=) (POS ')) (NNS RDFNS)) (: ') (NP (NP (NP (NNS select=) (POS ')) (`` ``) (NP (NP (CD http)) (: :) (NP (NN //www.w3.org/1999/02/22-rdf-syntax-ns) (# #) ('' '')) (: ') (NP (QP (CD /) (CD xsl))) (: :) (NP (NP (JJ variable) (NNS name=) (POS ')) (NNS RDFGNS)) (: ') (S (NP (NNS select=) (POS ')) (`` ``) (VP (VBG http) (: :) (NP (NP (CD //purl.org/NET/BMCB/2001/RDFG)) ('' '') (: ') (NP (CD /) (NN xsl)) (: :) (SBAR (WHADVP (WRB when)) (S (NP (NN test='namespace-uri)) (-LRB- -LRB-) (-RRB- -RRB-) (VP (SYM =) (NP (NP ($ $) (CD RDFNS)) (CC and) (NP (NP (NP (JJ local-name) (-LRB- -LRB-) (-RRB- -RRB-) (SYM =)) (`` ``) (NP (NN Description)) ('' '') (CC and) (RB not)) (PRN (-LRB- -LRB-) (NP (CD ./) (NN *)) (-RRB- -RRB-))))))) (: ') (NP (CD xsl)) (: :) (SBAR (WHADVP (WRB when)) (S (NP (NN test='namespace-uri)) (-LRB- -LRB-) (-RRB- -RRB-) (VP (SYM =) (NP (NP ($ $) (CD RDFNS)) (CC and) (NP (JJ local-name) (-LRB- -LRB-) (-RRB- -RRB-) (SYM =) (`` ``) (NX (NN Description)) ('' ''))) (CC and))))))) (. .))) (NP (NNP /) (NNP *) (POS ')))))
(S1 (S (NN xsl) (NN :) (NN with-param) (NN name=) (NN ') (NN ns) (NN ') (NN select='namespace-uri) (NN -LRB-) (NN $) (NN nodeSet-LSB-position) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN 1) (NN '') (NN -RSB-) (NN -RRB-) (NN ') (NN /) (NN xsl) (NN :) (NN with-param) (NN name=) (NN ') (NN localname) (NN ') (NN select='local-name) (NN -LRB-) (NN $) (NN nodeSet-LSB-position) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN 1) (NN '') (NN -RSB-) (NN -RRB-) (NN ') (NN /) (NN xsl) (NN :) (NN with-param) (NN name=) (NN ') (NN nodeSet) (NN ') (NN select=) (NN ') (NN $) (NN nodeSet-LSB-position) (NN -LRB-) (NN -RRB-) (NN !) (NN =) (NN ``) (NN 1) (NN '') (NN -RSB-) (NN ') (NN /) (NN xsl) (NN :) (NN when) (NN test=) (NN ') (NN name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN xml) (NN :) (NN lang) (NN '') (NN or) (NN -LRB-) (NN name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN ID) (NN '') (NN and) (NN $) (NN elementNS=) (NN $) (NN RDFNS) (NN -RRB-) (NN or) (NN -LRB-) (NN namespace-uri) (NN -LRB-) (NN -RRB-) (NN =) (NN $) (NN RDFNS) (NN and) (NN local-name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN ID) (NN '') (NN -RRB-) (NN or) (NN -LRB-) (NN name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN about) (NN '') (NN and) (NN $) (NN elementNS=) (NN $) (NN RDFNS) (NN -RRB-) (NN or) (NN -LRB-) (NN namespace-uri) (NN -LRB-) (NN -RRB-) (NN =) (NN $) (NN RDFNS) (NN and) (NN local-name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN about) (NN '') (NN -RRB-) (NN or) (NN -LRB-) (NN name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN aboutEach) (NN '') (NN and) (NN $) (NN elementNS=) (NN $) (NN RDFNS) (NN -RRB-) (NN or) (NN -LRB-) (NN namespace-uri) (NN -LRB-) (NN -RRB-) (NN =) (NN $) (NN RDFNS) (NN and) (NN local-name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN aboutEach) (NN '') (NN -RRB-) (NN or) (NN -LRB-) (NN name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN aboutEachPrefix) (NN '') (NN and) (NN $) (NN elementNS=) (NN $) (NN RDFNS) (NN -RRB-) (NN or) (NN -LRB-) (NN namespace-uri) (NN -LRB-) (NN -RRB-) (NN =) (NN $) (NN RDFNS) (NN and) (NN local-name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN aboutEachPrefix) (NN '') (NN -RRB-) (NN or) (NN -LRB-) (NN name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN resource) (NN '') (NN and) (NN $) (NN elementNS=) (NN $) (NN RDFNS) (NN -RRB-) (NN or) (NN -LRB-) (NN namespace-uri) (NN -LRB-) (NN -RRB-) (NN =) (NN $) (NN RDFNS) (NN and) (NN local-name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN resource) (NN '') (NN -RRB-) (NN or) (NN -LRB-) (NN name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN bagID) (NN '') (NN and) (NN $) (NN elementNS=) (NN $) (NN RDFNS) (NN -RRB-) (NN or) (NN -LRB-) (NN namespace-uri) (NN -LRB-) (NN -RRB-) (NN =) (NN $) (NN RDFNS) (NN and) (NN local-name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN bagID) (NN '') (NN -RRB-) (NN ') (NN xsl) (NN :) (NN when) (NN test=) (NN ') (NN -LRB-) (NN name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN li) (NN '') (NN and) (NN $) (NN elementNS=) (NN $) (NN RDFNS) (NN -RRB-) (NN or) (NN -LRB-) (NN namespace-uri) (NN -LRB-) (NN -RRB-) (NN =) (NN $) (NN RDFNS) (NN and) (NN local-name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN li) (NN '') (NN -RRB-) (NN ') (NN xsl) (NN :) (NN when) (NN test=) (NN ') (NN -LRB-) (NN name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN type) (NN '') (NN and) (NN $) (NN elementNS=) (NN $) (NN RDFNS) (NN -RRB-) (NN or) (NN -LRB-) (NN namespace-uri) (NN -LRB-) (NN -RRB-) (NN =) (NN $) (NN RDFNS) (NN and) (NN local-name) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN type) (NN '') (NN -RRB-) (NN ') (NN xsl) (NN :) (NN with-param) (NN name=) (NN ') (NN ns) (NN ') (NN select='namespace-uri) (NN -LRB-) (NN $) (NN nodeSet-LSB-position) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN 1) (NN '') (NN -RSB-) (NN -RRB-) (NN ') (NN /) (NN xsl) (NN :) (NN with-param) (NN name=) (NN ') (NN localname) (NN ') (NN select='local-name) (NN -LRB-) (NN $) (NN nodeSet-LSB-position) (NN -LRB-) (NN -RRB-) (NN =) (NN ``) (NN 1) (NN '') (NN -RSB-) (NN -RRB-) (NN ') (NN /) (NN xsl) (NN :) (NN with-param) (NN name=) (NN ') (NN nodeSet) (NN ') (NN select=) (NN ') (NN $) (NN nodeSet-LSB-position) (NN -LRB-) (NN -RRB-) (NN !) (NN =) (NN ``) (NN 1) (NN '') (NN -RSB-) (NN ') (NN /) (NN xsl) (NN :) (NN when) (NN test=) (NN ') (NN $) (NN parseLiteral) (NN !) (NN =) (NN ``) (NN Literal) (NN '') (NN and) (NN $) (NN parseResource) (NN !) (NN =) (NN ``) (NN Resource) (NN '') (NN and) (NN -LRB-) (NN ./) (NN *) (NN or) (NN text) (NN -LRB-) (NN -RRB-) (NN -RRB-) (NN ') (NN xsl) (NN :) (NN value-of) (NN select='concat) (NN -LRB-) (NN generate-id) (NN -LRB-) (NN -RRB-) (NN ,) (NN ``) (NN -BID) (NN '') (NN -RRB-) (NN ') (NN /) (NN !) (NN --) (NN dodgy) (NN 2nd) (NN call) (NN to) (NN generate-id) (NN --) (NN xsl) (NN :) (NN with-param) (NN name=) (NN ') (NN objectValu) (NN ') (NN select='concat) (NN -LRB-) (NN namespace-uri) (NN -LRB-) (NN -RRB-) (NN ,) (NN local-name) (NN -LRB-) (NN -RRB-) (NN -RRB-) (NN ') (NN /) (NN xsl) (NN :) (NN with-param) (NN name=) (NN ') (NN objectValu) (NN ') (NN select='concat) (NN -LRB-) (NN namespace-uri) (NN -LRB-) (NN -RRB-) (NN ,) (NN local-name) (NN -LRB-) (NN -RRB-) (NN -RRB-) (NN ') (NN /) (NN xsl) (NN :) (NN with-param) (NN name=) (NN ') (NN bagType) (NN ') (NN select=) (NN ') (NN $) (NN newBagType) (NN ') (NN /) (NN !) (NN --) (NN @@) (NN ???) (NN ?) (NN --) (NN xsl) (NN :) (NN when) (NN test=) (NN ') (NN -LRB-) (NN @) (NN parseType=) (NN ``) (NN Literal) (NN '') (NN and) (NN namespace-uri) (NN -LRB-) (NN -RRB-) (NN =) (NN $) (NN RDFNS) (NN -RRB-) (NN or) (NN @) (NN rdf) (NN :) (NN parseType=) (NN ``) (NN Literal) (NN '') (NN ') (NN Literal) (NN /xsl) (NN :) (NN when) (NN xsl) (NN :) (NN when) (NN test=) (NN ') (NN -LRB-) (NN @) (NN parseType=) (NN ``) (NN Resource) (NN '') (NN and) (NN namespace-uri) (NN -LRB-) (NN -RRB-) (NN =) (NN $) (NN RDFNS) (NN -RRB-) (NN or) (NN @) (NN rdf) (NN :) (NN parseType=) (NN ``) (NN Resource) (NN '') (NN ') (NN Resource) (NN /xsl) (NN :) (NN when) (NN xsl) (NN :) (NN template) (NN name=) (NN ') (NN rdfg) (NN :) (NN incOrd) (NN ') (NN !) (NN --) (NN @@) (NN TODO) (NN what) (NN if) (NN namespace) (NN missing) (NN --)))
(S1 (S (NP (PRP I)) (VP (AUX 'm) (NP (NNP Frank) (NNP Manola))) (. .)))
(S1 (S (NP (PRP I)) (VP (AUX 've) (VP (AUX been) (PP (IN on) (NP (NP (DT the) (JJ technical) (NN staff)) (PP (IN at) (NP (NNP MITRE) (NNP Corporation))))) (PP (IN for) (NP (NP (RB just)) (PP (IN under) (NP (DT a) (NN year))))) (, ,) (PP (IN with) (NP (NP (JJ prior) (NNS stints)) (PP (IN at) (NP (NP (NP (NN Object) (NNP Services) (CC and) (NNP Consulting)) (PRN (-LRB- -LRB-) (NP (DT a) (JJ small) (JJ virtual) (NN corporation)) (-RRB- -RRB-))) (, ,) (NP (NNP GTE) (NNP Laboratories)) (, ,) (NP (NP (NNP Computer) (NNP Corporation)) (PP (IN of) (NP (NNP America)))) (, ,) (CC and) (NP (DT the) (NNP US) (NNP Naval) (NNP Research) (NNP Laboratory)))))))) (. .)))
(S1 (S (NP (PRP$ My) (NN background)) (VP (AUX is) (UCP (PP (IN in) (NP (NN database) (NN research))) (, ,) (PP (VBN distributed) (NP (NN object) (CC and) (NN agent) (NNS systems))) (, ,) (CC and) (S (ADVP (RBS most) (RB recently)) (VP (VBG trying) (S (VP (TO to) (VP (VB merge) (NP (DT these) (NNS technologies)) (PP (IN into) (NP (DT the) (NNP Web) (NN environment)))))))))) (. .)))
(S1 (S (NP (DT This)) (VP (VP (AUX has) (ADJP (VBN involved) (SBAR (SBAR (S (VP (VBG looking) (PP (IN at) (NP (NNP RDF)))))) (, ,) (CC and) (SBAR (WHADVP (WRB how)) (S (VP (TO to) (VP (DT both) (VP (VB use) (NP (PRP it)))))))))) (, ,) (CC and) (VP (VBP relate) (NP (PRP it)) (PP (TO to) (NP (NP (JJ other) (NNS approaches)) (PP (IN for) (S (VP (VBG representing) (NP (NP (JJ various) (NNS kinds)) (PP (IN of) (NP (NN metadata))))))))))) (. .)))
(S1 (S (NP (PRP I)) (VP (VP (AUX 'm) (ADVP (RB currently)) (VP (VBG working) (PP (IN on) (NP (NP (DT a) (NN project)) (VP (VBG developing) (NP (NNP Semantic) (NNP Web) (NNS technologies))))))) (, ,) (CC and) (VP (AUX have) (VP (AUX been) (VP (ADVP (RB closely)) (VBG following) (NP (NP (DT the) (NNS discussions)) (PP (IN on) (NP (DT the) (ADJP (JJ rdf-interest) (CC and) (JJ rdf-logic)) (NN email) (NNS lists)))))))) (. .)))
(S1 (S (NP (PRP I)) (VP (AUX 'm) (VP (VBG looking) (ADVP (RB forward)) (PP (TO to) (S (VP (VBG making) (S (NP (DT the) (NNP RDF)) (VP (NN specification) (NP (DT a) (JJ suitable) (NN base)) (PP (IN for) (NP (NP (DT the) (ADJP (RBR more) (JJ sophisticated)) (NNS applications)) (SBAR (WHNP (WDT that)) (S (NP (DT these) (NNS lists)) (VP (AUX have) (VP (AUX been) (VP (VBG talking) (PP (IN about)))))))))))))))) (. .)))
(S1 (NP (NP (NNP --Frank) (NNP Frank) (NNP Manola)) (NP (NP (DT The) (NNP MITRE) (NNP Corporation) (NN 202) (NNP Burlington) (NNP Road)) (, ,) (NP (NNP MS) (NNP A345) (NNP Bedford)) (, ,) (NP (NNP MA) (CD 01730-1420)))))
