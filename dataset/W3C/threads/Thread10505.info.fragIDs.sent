See I suggest we modify the comment in the test case as follows: See OLD Description: Example of relative uri with too many ..'s in path. 
Note: RFC 2396 appears to permit implementations that discard excess .. components, "compensating for obvious author errors". 
Such behaviour is not correct for RDF/XML. 
Author: Jeremy Carroll (jjc@hpl.hp.com) 
NEW Description: Example of relative uri with too many ..'s in path. 
Note: The behavior recommended in the forthcoming revision of RFC 2396 may be different from in RFC 2396, hence document authors are advised to avoid such relative URIs. 
Note: RFC 2396 appears to permit implementations that discard excess .. components, "compensating for obvious author errors". 
To avoid ambiguity RDF/XML requires that no such compensation is performed. 
Author: Jeremy Carroll (jjc@hpl.hp.com) 
And then the following response ... 

Thank you for your comment. 
We were unaware of this planned changes to RFC 2396. 
We have modified the comment in the test case to read: In answer to your question: RDF/XML and RDF Concepts depend normatively on RFC 2396. 
RFC 2396bis has not yet completed its standardization. 
Thus the test case is correct. 
Jeremy 
I probably have my facts wrong - I haven't checked the documents: There are two possible behaviours: a) leave extra ".."'s in the path b) delete extra ".."'s. 
a is legal in 2396 and not in 2396bis b is legal in 2396 (but not recommended) and in 2396bis You are recommending we fix on a? Brian 
My earlier understanding was that b was not legal but tolerated in RFC 2396. 
Unfortunately, I had misread RFC 2396 - I just reviewed it ... It seems that my understanding was correct except that a is not legal either, but tolerated to a greater extent. 
Hence the pedant in me suggests the test should in fact be an illegal document. 
I'll have a look at 2396bis - to see if that helps. 
On this topic - the section I had read said: C.2. Abnormal Examples Although the following abnormal examples are unlikely to occur in normal practice, all URI parsers should be capable of resolving them consistently. 
Each example uses the same base as above. 
An empty reference refers to the start of the current document. 
= (current document) Parsers must be careful in handling the case where there are more relative path ".." segments than there are hierarchical levels in the base URI's path. 
Note that the ".." syntax cannot be used to change the authority component of a URI. 
Berners-Lee, et. al. Standards Track [Page 30] RFC 2396 URI Generic Syntax August 1998 ../../../g = http://a/../g ../../../../g = http://a/../../g In practice, some implementations strip leading relative symbolic elements (".", "..") after applying a relative URI calculation, based on the theory that compensating for obvious author errors is better than allowing the request to fail. 
Thus, the above two references will be interpreted as "http://a/g" by some implementations. 
with the earlier paragraphs suggesting the behaviour of retaining the .. is recommended and the behaviour of stripping the .. is implementation variation. 
However, in the main body it says: 5.2. 
Resolving Relative References to Absolute Form g) If the resulting buffer string still begins with one or more complete path segments of "..", then the reference is considered to be in error. 
Implementations may handle this error by retaining these components in the resolved path (i.e., treating them as part of the final URI), by removing them from the resolved path (i.e., discarding relative levels above the root), or by avoiding traversal of the reference. 
which suggests that the normative behaviour is to barf. 
