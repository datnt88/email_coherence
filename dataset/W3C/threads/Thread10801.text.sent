I find the introduction of "optional features" in XML most unfortunate Me too - I've been feeling bad ever since the vote. 
Maybe the WG can help us out here. 
Where we got to on the ERB was: 1. external text entities are a basic necessity for authoring (I want to validate my 700-page book without having to have it in a file) and they're not even that hard to do [once you've limited the system identifier repertoire, which we've done]. 
Arguably, without them, XML is a delivery-only toy language 2. external text entities are big-time bad news for a browser - particularly since browsers are moving in the direction of exposing the document structure to client-side logic. 
And in fact the jam-it-in-the-parse-tree semantic of text entities is not really the kind of transclusion you want in a browser. 
So what we REALLY WANT is to say "Here is a feature that is intended for authoring and document management but look, boyo, don't you go asking client programs to do this!" I had proposed a side-step by saying you could only use osfile system identifiers for text entities, but this kind of smells like a kludge. 
Bob Streich had earlier spoken about server-mode vs. client-mode XML; is this anything more than an option by another name? 
I think I speak for the ERB when I say that we would welcome a way to throw out the optional bathwater without losing the text entity baby, and cheerfully reconsider the vote of the 23rd. 
Cheers, Tim Bray tbray@textuality.com 
http://www.textuality.com/ 
+1-604-488-1167 I would like to point that at least one person on the ERB (me) passionately believes that this viewpoint is totally misguided... ... it is certainly possible to build a fine authoring environment without any use of external text entities. 
James is correct; it is certainly possible to do this. 
But SGML provides a built-in, standard, nonproprietary way to go about it. 
The way I sell SGML in the corporate world is: SGML gives you: 1. a way to model the structure of your documents, and 2. a way to control the authoring so they come out right, and 3. a way to modularize documents for re-use and management, and 4. ALL OF THIS IS STANDARDIZED AND NON-PROPRIETARY It seems to me that if XML loses text entities, then #4 no longer applies to #3. 
I don't know - is this a fair price to pay for making XML lightweight and easy to adopt? 
At the same time, James is correct that it is unreasonable and wrong to expect render-mostly network browsers to use the SGML transclude-and-parse semantics. 
Is there an option-free way to reconcile our goals? 
Cheers, Tim Bray tbray@textuality.com 
http://www.textuality.com/ 
+1-604-488-1167 I would like to point that at least one person on the ERB (me) passionately believes that this viewpoint is totally misguided. 
If you do large-scale authoring with nothing more than a parser, a simple file-based entity manager, a text editor and the filesystem, then, yes, you would have problems managing without external text entities. 
If that's what you want to do, author in SGML: you have all the authoring tools you need already. 
The focus in XML should be on enabling the development of authoring environments, and it is certainly possible to build a fine authoring environment without any use of external text entities. 
James I think you can get 3 and 4 without external text entities by using transclusion via link semantics, which are going to be standardized in a later phase of XML. James Well, I'm not on the ERB, but I do not believe that external text entities are essential for authoring. 
That there are people who rely on them shows how poor our SGML tools are right now, I suppose. 
A system like Astoria is (at least in principle -- I haven't used Astoria) far better for authoring. 
Or should be. 
You can do text entities server-side if you like using a short perl script. 
Some web servers do this already, with either procesing instructions or coments -- works in the Apache and (I think) NCSA servers today. 
Lee I find the introduction of "optional features" in XML most unfortunate Yes, options are not a good thing. 
Let us rinse the taste of option stew from out mouths (Thanks for the metaphor, Bill!). 
While James' point that entities are not necessary is valid, I agree with Tim's (later post) that they provide the "vendor-independent" way to do doc management. 
Pace, Eliot, I think that with the synchrony restriction they could prove to be a lot more useful than SGML entities have proven to be. 
I think the problem here is the assumption that the browser _must_ expand the entity if it _can_ expand the entity. 
I advocate a different approach, where a browser would have "transclude-if-convenient" semantics. 
So an external entity reference might be rendered as an expandable link, like the links in the old OWL product. 
The browser could automatically follow small external entities, and link-ify large ones. 
This behavior is incompatible with validation, but a non-validating parser would not care about this. 
Since documents are parseable without a DTD, entities are too, so it's easy to resolve an entity even after you have finished your first parse. 
You will get better formatting if you retain the element stack + formatter state variables in effect before unexpanded references, but even that is a luxury. 
Is letting the client program do what it wants (including just popping up a link) enough freedom to make browsers easy? 
No, it's not, I'm afraid. 
You've got my idea, for what it's worth. 
RE delenda est. 
I am not a number. 
I am an undefined character. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ But note that general text entities *don't actually do point 3*. 
General text entities *ARE NOT REUSABLE*. 
In fact, the only way to have re-usable SGML documents, as James has pointed out, is to make them documents syntactically (even if the objects may be semantically subparts of documents). 
While external text entities are a useful convenience for single-person authoring, they are not useful as a general mechanism for managing SGML data as re-usable objects. 
Cheers, E. W. Eliot Kimber (kimber@passage.com) 
Senior SGML Consultant and HyTime Specialist Passage Systems, Inc., (512)339-1400 10596 N. Tantau Ave., Cupertino, CA 95014-3535 (408) 366-0300, (408) "If I never had existed, would you still remember me?..." --Austin Lounge Lizards, "1984 Blues" Why are they so bad for clients? 
The ERB has decided that enternal text entities must be strictly synchronous with the document structure after all, which would be one of the major hurdles. 
Without the possibility of asynchronous nodes, it the purely linear parsing model still required? 
I think it's possible to work around the issues. 
Assuming that we do not have asynchronous nodes, can't the transclude-parse model be replaced by parser-transclude-parse? Validation would complicate it somewhat, but not overly much. 
Right. 
Can't we treat external entities as a special case of that given the synchronous structure of them? 
I like this approach. 
The only problem with it that I can see is that you would have to parse the external piece in order to get the formatting straight since you don't know what the missing siblings/children are. 
There is also the issue of missing IDs. 
I really don't see any significant difference between entities and other forms of transclusion--the semantics are the same only the syntax is different. 
bob An XML parser intended for Web browsers wouldn't resolve an external text entity immediately itself but rather would return a transclude event to the application and keep going. 
This would make it hard for a Web browser to do validation, but that may not be a problem. 
Yes, that's the idea. 
In some code I wrote a long time ago, I had a smart pointer that would resolve nodes as needed. 
I imagine an entity (transclusion event) would basically become a smart pointer. 
On Thu, 24 Oct 1996 15:52:21 -0400 James Clark said: I think you may be right. 
An XML parser intended for Web browsers wouldn't resolve an external text entity immediately itself but rather would return a transclude event to the application and keep going. 
This would make it hard for a Web browser to do validation, but that may not be a problem. 
It would be easier to make this work if we disallowed references to external text entities in attribute values, but hopefully people can live without those. 
Er, I'm sorry if I'm missing something, but doesn't clause 7.9.4.2 (p. 335 of Handbook) restrict ENTITY/ENTITIES attributes to data and SUBDOC entities? 
I.e. isn't your conditional already met? 
(I think we reaffirmed that XML will work the same way, on question C.3 the other day.) I hope so, because anything that would make this work more easily while allowing external text entities is a good thing in my book. 
-Michael Sperberg-McQueen I think you may be right. 
An XML parser intended for Web browsers wouldn't resolve an external text entity immediately itself but rather would return a transclude event to the application and keep going. 
This would make it hard for a Web browser to do validation, but that may not be a problem. 
It would be easier to make this work if we disallowed references to external text entities in attribute values, but hopefully people can live without those. 
James I'm talking about *references*; for example, James Agreed. 
When explaining external text entities to new SGML users, they invariably leap to the conclusion these are hypertext links. 
They are usually disappointed when I explain these are not. 
They then ask, why the extra features. 
We dropped these from the IADS and IDE/AS designs for precisely this reason: we were getting this functionality from the hyperlinks. 
Wouldn't an independent link with a semantic of get do this job? 
len bullard Maybe that's the problem. 
In order for an external SGML entity to be ignored safely by the parser, it has to be a document entity (or subdoc, which for our purposes is the same thing). 
Therefore, if we restrict external SGML/XML entities to being referenced from attribute values, we can have reusable objects (as Eliot has pointed out) and we don't have to redefine the meaning of an entity reference. 
Of course, "quoteref" is really a typed hyperlink, as is any "entity reference" that a parser can safely ignore. 
My conclusion: drop the optional entity references. 
We'll get them back in a robust and fully conforming form when we add hyperlinking. 
Charles F. Goldfarb * Information Management Consulting * +1(408)867-5553 13075 Paramount Drive * Saratoga CA 95070 * USA International Standards Editor * ISO 8879 SGML * ISO/IEC 10744 HyTime Prentice-Hall Series Editor * CFG Series on Open Information Management Although I would agree that external text entities have a whole host of problems and that hyper-link provides a better re-use model, external text entities can be managed quite well via a component model. 
If you can decide what your re-usable components are before you author them--which is necessary in a large authoring environment--you can setup systems for managing and validating these components. 
So, I wouldn't rule out external text entities for reuse unless we demanded HyTime and created a *required* application convention to handle inclusion of information. 
As an aside, according to Church's thesis and the Godel Incompleteness Theorems documents with external text entities that are variable are never verifiable. 
Documents with hyper-links to variable documents are, of course, verifiable. 
The argument goes something like this: 1. 
Those things that are computable in our sense are those things that are computable by humans or machines given that limitations on time and speed are overcome. 
(Church's Thesis) 2. Godel's theorem states: There is no consistent, complete, axiomatizable extension of Q--where Q is in our case the set of functions necessary to parse an SGML document. 
In our sense, extensions include asking the question "will this document parse under all instances of entity x that conform to constraints y". 3. If the constraints y on entity x allow x to have infinite variants, then proof (program) of the question of validation is not both complete and consistent at the same time. 
You can never validate an infinite number of variants but you could attempt to prove that the document will always be valid. 
4. Thus, although one could be bright enough to prove that for all variants of a particular x, this particular document is valid, it is not necessary that such a proof exists or that such axioms that make up the proof will apply in all cases. 
5. Hence, there is no program that can prove that a document containing a set of variant external entities can be proven, given a set of constraints on the external text entities, that the resultant document is valid. 
In a sense, the hyper-linked approach gets us closer to a verifiable system in that each component--variable or not--can be validated independent of each other. 
The approach would be simpler to saying: "You can either compile all your C++ code at once and, if everything compiles, you get your program, or you can break your code into verifiable modules and compile them separately. 
There is no guaranty that they will fix together or that the resultant program--while valid C++--will be semantically correct. 
Unfortunately, you will never be able to verify the semantics of your program unless you can get it compile and link!" See "Computability and Logic" by George S. Boolos and Richard C. Jeffrey for a much better description of the above. 
R. Alexander Milowski http://www.copsol.com/ 
alex@copsol.com 
Copernican Solutions Incorporated (612) 379 - 3608 I don't think anybody says SGML external text entities are essential for authoring. 
A method for modular construction of documents *is* essential for authoring, and SGML text entities provide a portable, vendor-independent method for doing this. 
Lots of other non-portable, proprietary methods could (and have been) thought of ("Master Document View", anyone?). 1. authoring tools could indeed be better 2. once they stop having to worry about a lot of the hard stuff we're cutting out of SGML, then they can focus more attention on basic things like modular document construction 3. last time I saw Astoria was a year ago, but I thought their approach [component management at the *element* level] was brutally difficult to accomplish and didn't offer any advantages over a slick entity-management system. 
Cheers, Tim Bray tbray@textuality.com 
http://www.textuality.com/ 
+1-604-488-1167 
