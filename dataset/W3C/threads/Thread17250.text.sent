Slightly OT: I am making a site that relies almost exclusively on CSS for presentation/formatting of standard HTML tags TD P, H3, etc. 
I have exactly ZERO elements declared with pixel widths, all % and em for font sizes. 
When resizing the browser window in NS7 &amp; OP7 (Win only tests so far) the text is reflowing perfectly but for some reason I can't figure out (driving me mad) IE is not reflowing the text as expected, thus in IE the design is wider than 800 px on some pages... unacceptable. 
I'm wondering if I need some box hack or @import hack in order to load a different CSS for IE. 
If you have a sec to check it out, staged here: username: sfmi password: 8474320035 The pages I have so far are index, sale, about us, &amp; catering. 
Thanks in advance (TIA) Geoff Hoffman Geoff There is a mailing list that deals with css issues with some extraordinarily knowledgeable people on it (including a few names that you'll recognise from here). 
Your problem is almost certainly caused by IE's css parsing oddities but without further investigation I'm not sure what. 
A box model hack might solve it but bear in mind that not all hacks produce valid css. 
I'm not sure if there is an @import hack to serve up a css for IE only. 
You could do some php server-side sniffing to detect for IE and then serve up an alternative css based on that. 
Another alternative is to take advantage of IE's conditional HTML comments to serve up a completely different style sheet for all or certain versions of IE. 
I tried doing that as an experiment and it seems to work OK. 
If anyone knows of any accessibility base reasons not to use conditional comments then please could they let me know. 
thanks Julian. 
The information in this email is confidential. 
The contents may not be disclosed or used by anyone other than the addressee. 
If you are not the addressee, please tell us by using the reply facility in your email software as soon as possible. 
Sheffield City Council cannot accept any responsibility for the accuracy or completeness of this message as it has been transmitted over a public network. 
If you suspect that the message may have been intercepted or amended please tell us as soon as possible. 
Whilst I'd suggest CGI instead of PHP, this comment applies to both: server-side sniffing of user-agent is *not* an easy task. 
Sniffing for IE only is marginally easier. 
For an experiment in just this technique, see - Tina Holmboe Greytower Technologies tina@greytower.net 
http://www.greytower.net/ 
[+46] 0708 557 905 Just a question... why would you suggest using CGI instead of PHP? 
Starting new CGI processes takes more time and server load than a simple PHP script... -Mike Julian Scarlett wrote ... "Another alternative is to take advantage of IE's conditional HTML comments to serve up a completely different style sheet for all or certain versions of IE. 
I tried doing that as an experiment and it seems to work OK. 
If anyone knows of any accessibility base reasons not to use conditional comments then please could they let me know." 
Funnily enough, I was looking into this only yesterday, pondering various "cox model hacks" and other things on a redesign of my own site. 
As I understand it, there are two syntaxes for writing these comments. 
One reads something like: IE 5 _only_ will get this code (including any amount of markup) This is a valid HTML comment (from !-- to -- ) so I can't see an _accessibility_ reason why it may be a problem. 
There may be problems with bandwidth (because you are sending redundant code to browsers who can't use it). 
There shouldn't be a forward compatibility problem, because even if MS dropped support for this form of scripting in future versions of IE - if any ever arrive - they couldn't retrospectively remove the support form the installed base of IE5. 
The other syntax for writing the comment is be: All browsers will get this (including markup) _except IE5_ This looks a lot more problematic to me, as the comments are not proper comments. 
You are making an assumption about how [Random browser X] will treat these "comments" - for example, will they erroneously treat them as comments and hide what is between; will they treat the comments as unrecognised tags and render what is between, as MS hope, or some other behaviour? 
So I think this method would be flaky on any kind of accessibility / future proofing grounds. 
If you are trying to specifically exclude code from IE5, you could always rewrite to use the first syntax: All MS browsers except IE 5 will get this code. 
Of course, it is hidden to non-IE browsers ... So fairly rapidly it gets complex and server-side detection starts to look enticing - if you have scripting rights on your server, that is ... See rview/ccomment_ovw.asp for MS' documentation. 
My view is that it could be useful for detecting IE5 unambiguously, but probably not for anything more complex. 
The most commonly used situation is indeed for some kind of Box Model Hack: link rel="stylesheet" type="text/css" href="standards-compliant-boxmodel.css" 
There are other ways of sending correct box model widths to various target browsers (the Tantek Hack; the Caio Hack; the Simplified Box Model Hack etc.) All have advantages and disadvantages, at least from a CSS point of view. 
Fundamentally, however, they all require writing two widths for a given box - one for IE 5, one for compliant browsers (including IE6 if you force it into standards mode), so arguments about one mechanism or another simplifying maintenance don't wash for me - all require maintenance of two separate values, whether in two separate stylesheets or twice in one stylesheet. 
For someone who in future has to maintain the site (perhaps not the initial author) I think the conditional comments mechanism (or a server-scripted variation) at least has the advantage of being intuitively clearer than the variations that rely on some kind of CSS parsing bug to work - but that is just my view. 
Tom Dr Tom James Corporate e-Government Officer Salisbury District Council 3 Rollestone Street Salisbury SP1 1DX "Internet Communications are not necessarily secure, and therefore Salisbury District Council does not accept legal responsibility for the contents of?this message. 
Any views or opinions presented are those of the author and do not necessarily represent those of Salisbury District Council. 
Anyone?replying?by 
email to the author of this message?(or?emailing anyone else, using the "@salisbury.gov.uk"?address),?is advised that?such emails may be read by persons other than the intended recipient" This e-mail has been scanned for all viruses by Star Internet. 
The service is powered by MessageLabs. 
For more information on a proactive anti-virus service working around the clock, around the globe, visit: HTML doesn't actually have comments. 
It's a valid SGML directive with a null name and a comment, provided that there are no runs of -s in the text which are not exactly a multiple of four in length (end comment, immediately followed by begin comment). 
Actually odd length runs can be rounded down to a multiple of two in deciding the above. 
A common way of breaking comments is to do rules like this unterminated one: A number of browsers have historically not parsed comments properly. 
Lynx has three different ways of parsing them: one for SGML conforming comments and two for different styles of broken parsing. 
People are quite likely to use Lynx in one of the broken modes, because it is more likely to work on the real web. 
A more correct way of doing this would have been: ![%IgnoreIfIE5;[ SGML conditional section that is ignored by an SGML parser if %IgnoreIfIE5 is defined as IGNORE. 
]] which is why this whole hack is aesthetically so horrible; there is a already a conditional sections features in SGML, but HTML was intended to be simple, so such features wouldn't be needed, which is why early browsers didn't implement it. 
(Note I'm not sure if it is OK to have an empty keyword or undefined entity.**) 
I can't help but feel that if you need to use this sort of tactic you have lost sight of the purpose of HTML and really need a page description language. 
Obviously one can't use the proper SGML syntax for the %IncludeIfIE5; case, but I'm not convinced one should be trying to emulate conditionals, anyway. 
Note I would expect the "If IE5" structure to fail validation. 
I haven't tried the conditional section with no keyword on the validator. 
(Lynx's broken comment modes are: 1) to treat " " as an unconditional delimiter (oops!); 2) to treat "-- " as an unconditional delimiter. 
(1) is off by default. 
(2) is off in the compiled code, but on, for NS compatibility, in the default configuration file of the version I have.) ** As the first definition wins, I believe there is a way round this by defining defaults yourself. 
Only because not sniffing at all gives you better than 95% chance of being right. 
It is very common for minority browser users to imitate IE's User-Agent string in an attempt to get browser sniffing web sites not to discriminate against them. 
