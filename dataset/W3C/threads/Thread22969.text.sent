I've been able to do a little testing with Microsoft's implementation, unfortunately testing Netscape will have to come later. 
Trying to use hasFeature with an "unspecified" version, runs into a catch 22. MSXML's implementation is defined in terms of a COM BSTR. 
Accessed from C++, you can pass in NULL as the value for the BSTR. 
However, it is not possible to make a call from Visual Basic or JScript that calls the COM interface with a BSTR value of NULL. 
The MSXML implementation will return true for impl.hasFeature("XML",null) (in languages that can do that) but will return false for empty strings. 
So from JScript or VB: impl.hasFeature("XML","1.0") - true impl.hasFeature("XML","") - false, no special significance given to empty string impl.hasFeature("XML",null) impl.hasFeature("XML",undefined) - exception raised before call since null or undefined cannot be coersced to a string impl.hasFeature("XML") - wrong number of arguments The only pattern that would work across all languages is a empty string. 
For languages where null is an allowable value for String (for example, Java but not VB or ECMAScript) then defining the behavior to be identical to empty string would be helpful, but nearly impossible to write succinctly. 
Maybe: This is the version number of the feature to test. 
In Level 2, the string can be either "2.0" or "1.0". 
If the version is an empty string (or a null string when the value space of the string type contains such a value), supporting any version of the feature causes the method to return true. 
I believe there are other places in the DOM API where we distinguish between null and empty string." 
How are those being handled in the ECMAScript bindings? 
(From what you've said, I can see an argument for saying that "unspecified" _is_ ECMAScript's null value... but it probably ought to be exposed as an independent mnemonic, since you'll sometimes want null for parameters before the last.) Joe Kesselman / IBM Research For the second sentence, why not: If the version is an empty string or null, supporting any version of the feature causes the method to return true. 
This expresses the possible values in terms of IDL; if the IDL mapping for a language doesn't support the null value, there's no loss, and there's no need for convoluted language in the general portion of the specification. 
-Fred Fred L. Drake, Jr. fdrake at acm.org PythonLabs at Digital Creations Maybe "null string" instead of "null". 
ECMAScript has the concept of null, it just isn't in the value space of string. 
Perhaps. 
I wasn't trying to use ECMAScript-compatible terminology so much as avoiding anything other than IDL terminology, and let the ECMAScript mapping take care of the rest, which seems to me the proper level of isolation between the two. 
-Fred Fred L. Drake, Jr. fdrake at acm.org PythonLabs at Digital Creations That's my own concern. 
I'm not picky about how ECMASript chooses to bind this, but I want the IDL-level description kept language-independent. 
How is the ECMAScript binding dealing with the statement in Level 2 Core 1.1.8 that "Applications must use the value null as the namespaceURI parameter for methods if they wish to have no namespace." 
Or the doctype parameter to createDocument, ("The type of document to be created or null.")? 
Or any of the other cases where null is a legitimate alternative to a string? 
Given those, it still seems to me that this isn't a hasFeature issue. 
The binding must decide what "null" means for string arguments. 
If they aren't allowed to accept the language's basic null, that's fine; the binding must define a suitable replacement. 
That could be a magic reserved string value, if all else fails -- preferably with a mnemonic assigned to it so nobody codes dependencies on that specific string. 
(Simplest kluge, if you're working in Unicode, might to use a string containing a character normally forbidden in XML.) But it should be solved once, at the level where we map from IDL into that language's conventions, and be consistant across the whole API. Joe Kesselman / IBM Research Based on the flimsy research that I've done and by gross speculation about what is going on behind the scenes, I think this might be more pervasive than just hasFeature, but also impacting the createElementNS and other *NS methods and properties and impacts use from JScript, Visual Basic and Visual Basic Script. 
The results someone posted from the Mac version of IE definitely seems at odds with the behavior that I have observed on the Win version of IE. 
There is definitely a chance that this could turn out to be a phantom and would be nice to have someone from Microsoft or Netscape sanity check our observations. 
Shouldn't impact createDocument however since that null is an object parameter. 
That's the simplest kludge? 
An empty string seems a lot simpler. 
Though an empty string is a legal URI, would treating it as equivalent to a null namespace cause any serious harm? 
