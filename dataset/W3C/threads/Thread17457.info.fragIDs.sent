Hello all, As we become more aware of importance of web accessibilty, we also realize that people with disabilities have also found some solutions to improve their web surfing experience by using special I/O devises and by other means. 
In other words, while we struggle to make web sites more accessible from developers point of view, those with disablities are also struggling from users viewpoints. 
Are the developers and the disabled users going to meet somewhere reaching a confortable level, where both parties will be satisfied and happy? 
What will be "enough" in terms of web accessibility? 
Could we ever say, "enough is enough"? 
Enough for who? 
The users, right? 
But we know we cannnot make everyone happy. 
We must compromize somewhere. 
But where should we draw the line? 
I also would like to note that the visually and hearing impared are not only those who will benefit from accessible web sites. 
There are also people with slow internet conenctions, physical disabilities, learning disablities, and so on. 
So whom are we referring to when we say "Disabled"? 
Accessible web sites do improve everyone's (including those who are not disabled) web surfing experience in some degree. 
But again, we cannot make everyone happy. 
Kind regards, Keiko Keiko OKADA 
Actually, there is no real two sides of this fence but a continuum along which we all travel toward everyone being served. 
While devices are becoming more sofisticated, there are many who do not posess them nor the means to obtain them and even the higher end devices benefit from greater efforts toward accessibility/useability. 
AS you rightly point out, a positive side to growing accessibility/useability is the fact that the benefits extend to other realms. 
Software developers already implement accessibility to a greater extent 
than web developers because of the tools and architecture they use; SDKs, IDEs, APIs and general ability to follow standards better than web 
developers (sorry if I am offending the more respected WDs amongst 
you). 
It's very interesting to look at the two streams of development and why they differ so much in their ability to adopt and implement accessibility. 
It's also a good reference for encouragement that this will also happen on the web. 
The big difference so far is that in native software application accessibility is implemented almost transparently without any, or much conscious effort because of the well designed APIs, SDKs and tools. 
Unfortunately this is not the case on the web, and that is not necessarily to tool makers fault, it is also because markup is a different medium than software APIs. 
I feel people who design and develop with accessibility in mind more fully address these very issues you just raised. 
On a general note, from my personal perspective, I believe we will only get high level to a high level of web accessibility when tools, mainly backend and CMS's address these in their basic architecture. 
So far, it's been a long journey and looks like still being a sojourn. 
Geoff Deering 
Thank you for your feedback, Geoff. 
extent 
web 
you). 
I am not sure of any statistic data but I think it will be much easier for the users to find accessible softwares/hardwares than accessible web sites, as I believe the selections should be much larger. 
Its just the matter of availabilty. 
For example, people probably will not have problem finding an accessible display or screen reader to improve their web surfing (and I am not talking about WHERE they will buy them- online or not). 
But I wonder how many accessible websites they can find, say, 
for Christmas shopping? 
There are a lot of e-commerce sites where you can shop, but I wonder how many of them are designed with accessibility in mind? 
Web is still fairly a "new" medium, especially when compared to the history of softwares/hardwares. 
Yet it has been catching up. 
We know its much easier to create an accessible site then making an existing site accessible. 
And that's the way it should be. 
More and more sites are created everyday. 
I hope more developers (and any other project members involved) willl have time and thoughtfulness (and money if necessary) to consider accessibility. 
Kind regards, Keiko Keiko OKADA 
I'm not too sure of the stats either, but I think that there are a lot more designed with accessibility in mind than we may actually think. 
I know it is given a lot more consideration than would seem so at first glance. 
The problem is in the implementation. 
Sometimes the strategies of implementation just do not show that much real knowledge and optimume use to howtos and how greater benefit can be made for just a little effort in the right areas. 
Just understanding how to "Fully Utilise Markup" is poorly lacking. 
You know, I don't believe this myth at all, it's just a very lazy excuse 
for not understanding the foundations of this medium. 
If you have a basic understanding of the publishing model in the print world, of software development and engineering, and understand markup as applied to a device independent network (the principles of SGML), also which any 
GUI operating system represents these days, then you tend not to get caught in that myth and it's hype. 
But I will emphasis that one can now 
proclaim that because user agents do now better support enough of W3C recommendations to make them a feasible path of development based on ROI, whereas, in the very recent past, one needed to implement ones kit bag of tricks to be commercially viable. 
Geoff Deering 
Hello, Geoff, 
excuse 
any 
now 
The lack of understanding of this medium is not the only factor, or an excuse. 
I agree with you that we don't have enough skilled designers, developers, and engineers in this needed field. 
But they can get help from outside if they really are in need. 
Sadly though, there are still so many people who do not take this issue seriously. 
It is too sad to know that it is often the budget and dicision makers attitude that are making it so difficult to say yes to the question. 
First we need to understand the needs, then the skills (or skilled people). 
Kind regards, Keiko 
Keiko OKADA 
Hi Keiko, I think it is very important to be able to show ROI on accessibility. 
There is a WAI document on that. 
But it is important to be able to *show* people just how they can implement design strategies to improve and cut the cost of their SDLC. 1. Seperate content from design (HTML/CSS) 2. Layout informational and structural elements in the design 3. Develop to a formal grammar Just to start with these is a really big step to accessibility, and just avoiding the simple mistakes. 
Without the extras, you already have a site that facilitates accessibility without really focusing on it. 
All that has been done is focused on good web development principles. 
If people do that, they are improving their web development practices, and as a side issue, making their site more accessible. 
Trouble is, we are creatures of habit, and tools like Dreamweaver still generate garbage code. 
There is no mode within it you can switch to *real* W3C standards developer and have it generate the correct code. 
There are enough examples of how to front end, but there is a real need to see CMSs and backend publishing tools facilitate these concerns, only then will development teams really feel they can address these issues site wide. 
I'd like to see Dublin Core metadata repositories in CMS, which also serves as good document versioning. 
Probably the likes of Cocoon and Axkit best facilitate/represent the direction of things to come. 
I know a lot of people will come down on me for this, but I feel the future of web development is in backend development. 
I only see front end development for template design and small sites. 
But I am wrong about a lot of things, and especially picking trends :-( regards Geoff Deering 
