One effect of Koen's suggestion is to make a simple thing even more complicated. 
The simple thing is what Yoran wants -- a new _registered_ header name which must be understood by the server or rejected. 
I would suggest something like this: Man: Registered-Header1, Reg-Hedr2, 23-, 35- 
Extension: URL1; ns=23, URL2; ns=35 
For registered header, no "Extension:" is needed. 
The only complication in Man over what is required for simple mandatory registered headers is that "23-" is a prefix, not an exact match whole header. 
The concession to decentralized extensibility is that "Extension" does not have to be listed in the Man header. 
From: koen@win.tue.nl[SMTP:koen@win.tue.nl] 
Sent: Thursday, January 22, 1998 10:43 AM Subject: Re: First reactions to mandatory draft Henrik Frystyk Nielsen: 
This is an unavoidable problem when multiple extensions share a single, global header field space and no central registry can hinder this. 
The alternative is to pass all extension information as parameters: M-GET / HTTP/1.1 Host: foobar Man: "http://screwball.org/skidoo.html"; 
Skidoo=abc, "http://nutcase.org/skidoo.html"; 
Skidoo=def which avoids the problem altogether. 
I highly prefer this alternative of passing all extension info as parameters in the Man header. 
Dynamically allocating collision-free headers is so difficult that is is not worth the trouble (see my comments on an earlier PEP draft for a discussion). 
Why add a complicated indirection layer if you do not need one? 
If people really want headers, the draft can tell them to register them in the upcoming IANA header registry. 
Henrik 
Koen. 
PL I would suggest something like this: PL Man: Registered-Header1, Reg-Hedr2, 23-, 35- 
PL Extension: URL1; ns=23, URL2; ns=35 
PL For registered header, no "Extension:" is needed. 
The only complication in PL Man over what is required for simple mandatory registered headers is that PL "23-" is a prefix, not an exact match whole header. 
The concession to PL decentralized extensibility is that "Extension" does not have to be listed PL in the Man header. 
The difficulty with: Man: Register-Header is that it doesn't convey what _version_ of the definition of Registered-Header you are using. 
If, for example, I wish to send: Scooby: dooby; doo 
Where 'Scooby: dooby' was defined by RFC4000 and the 'doo' extention was defined by RFC4100. 
What I want to express is that you should reject the request unless you understand RFC4100, not that you understand some older version of the Scooby header. 
So I would add: Man: http://ietf.org/rfcs/rfc4100.txt 
As for headers, it might be usefull for me to add: Vary: Scooby so that intervening proxies would understand that the response to this request also depends on the Scooby header - that way the proxy can do the right thing even if it does not implement 4100. 
Scott Lawrence EmWeb Embedded Server lawrence@agranat.com 
Agranat Systems, Inc. Engineering http://www.agranat.com/ 
Where 'Scooby: dooby' was defined by RFC4000 and the 'doo' extention was defined by RFC4100. 
What I want to express is that you should reject the request unless you understand RFC4100, not that you understand some older version of the Scooby header. 
So I would add: Man: http://ietf.org/rfcs/rfc4100.txt 
Or perhaps Man: urn:ietf:rfc:4100 if I've correctly understood the grammar proposed in "A URN Namespace for IETF Documents": ftp://ietf.org/internet-drafts/draft-ietf-urn-ietf-02.txt 
Somewhat verbose, alas, but a little more compact than a URL, and perhaps more robust. 
Note that this is still not quite enough, unless we make a rule that this means "unconditional compliance" to the referenced RFC. 
Which is not such a big deal; if RFC4100 has some SHOULDs as well as MUSTs, then one can write RFC4101, describing a particular profile of requirements from RFC4100, and then use urn:ietf:RFC:4101 instead. 
As for headers, it might be usefull for me to add: Vary: Scooby so that intervening proxies would understand that the response to this request also depends on the Scooby header - that way the proxy can do the right thing even if it does not implement 4100. 
Vary is undefined in a request. 
Maybe we need a more symmetrical mechanism? 
Or maybe we need a different mechanism. 
For example, either the response or response could say: Cache-Control: no-cache, except-if-man-ok where "except-if-man-ok" means "ignore no-cache if the caching agent implements the extensions listed in the Man header". 
This kind of overriding is explicitly allowed in HTTP/1.1, if I recall correctly. 
-Jeff 
This would only be necessary if the Scooby header had been registered in IANA multiple times as different versions with different semantics. 
I guess this could happen - the redifinition of the Accept-Encoding header field could count as different versions, for example. 
Otherwise, Man: Scoopy would indeed point to the header field registered by IANA and nothing else. 
URIs should always be made as persistent as the objects they point to, which is independent of the syntax. 
Yes indeed - I would imagine that RDF (Resource description Framework) [1] will be used to describe exactly which features are supported by a particular name. 
Henrik [1] http://www.w3.org/RDF/ Henrik Frystyk Nielsen, World Wide Web Consortium 
Paul Leach: 
I think you misunderstood me: I did not intend to propose a restriction which disallows what Yaron wants. 
I would be OK with me to list registered header names in the Man header. 
What I am against is a mechanism which dynamically allocates unregistered headers or header prefixes and lists them in the Man header. 
This still has too much indirection for my taste. 
I would suggest something like: Man: Registered-Header1, Reg-Hedr2, URL1, URL2;arg1=x;arg2=y 
Koen. 
Folks, In order to make progress in a timely fashion, PLEASE come with specific suggestions for changes in the current draft: (It hasn't showed up as an ID yet). 
If there are incompatible or alternative suggestions that are not covered by the current draft then please write them up and submit them. 
Thanks, Henrik Henrik Frystyk Nielsen, World Wide Web Consortium 
