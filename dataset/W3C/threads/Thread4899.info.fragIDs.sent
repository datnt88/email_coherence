Kindly reconsider to amend production [54] to allow for an optional else clause. 
[54] IfExpr ::= "if" "(" Expr ")" "then" ExprSingle ("else" ExprSingle)? 
with nested if-then-else tied through parentheses as suggested below 
Personal response: I think you would stand a better chance of getting this proposal through the working group if (a) you stated a justification as to why you think this change is beneficial (don't assume that the benefits are obvious) (b) you made a proposal as to how the language should deal with the resulting "dangling else" ambiguity. 
(For my own part, I would have much prefered a syntax in which expressions were self-closing, e.g. if (Expr) then Expr [else Expr] fi But I lost that battle. 
I don't think it would be a good idea to make "else" optional unless we introduce a mandatory closer to remove the ambiguity.) 
Michael Kay 
For just this one expression, I agree - but if we went that way, we should 
do the same for other expression types, including FLWOR expressions. 
Working this through...it seemed to make the language more cumbersome. 
Jonathan 
This has been an issue in the past, and the WG decided against it, partly because it causes a choice conflict in the grammar (though this is a common thing with languages, and we can define some rules and live with it), and partly because the if statement has to return something, and so we would have to define the else to return an empty sequence. 
-scott [Speaking for myself... this in no way reflects WG overall opinion or consensus.] 
public-qt-comments-request@w3.org wrote on 01/28/2004 05:37:14 AM: 
should 
I agree - since there are many ways a FLWR expression can start, it's hard to come up with a closer that feels right. 
Michael Kay 
The FLWOR construct is a new syntax which unlike IfExpr is a borrowed grammar. 
FLWOR does not contend with a mindset precedence and I don't think making the else clause optional necessitate a change on FLWOR. 
Making the else clause optional does not in any way make IfExpr any less as an expression. 
Making it mandatory does not enhance its functional value either (even perceptively) but its redundancy becomes a syntactic nuisance. 
The balance to enforce IfExpr with a mandatory else clause doesn't feel right. 
My sincere apologies for the seemingly painful revisit of IfExpr but please reconsider. 
I agree - since there are many ways a FLWR expression can start, it's hard to come up with a closer that feels right. 
Michael Kay 
