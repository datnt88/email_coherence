Changes since deltav-10: - Moved version selector DAV:predecessor-set property to core. 
(Boris) - Made label support optional. 
(Lisa) - Removed Workspace header (Geoff) - Added DAV:must-not-be-checked-out precondition for LABEL (John) - Only require Multi-Status if there was an error in a Depth operation (e.g. LABEL and SET-TARGET). 
(John) - Got rid of "parent workspace" for MKWORKSPACE (Tim/Geoff) - Added DAV:no-checkout argument to MERGE (Tim) - Fixed BASELINE-CONTROL so that baseline (not baseline history) is the argument (Tim). 
Outstanding Issues: - Should labels be moved back to core? 
Cheers, Geoff 
I would say that, so long as label support is optional, and they don't depend on any non-core mechanism, that the core is a good place to put them. 
Mostly I see it encouraging developers to notice them and consider their support rather than come up with substitutes at the core level that don't scale into advanced. 
It may be a small thing, and I recommend it anyhow. 
-- Dennis AIIM DMware Technical Coordinator AIIM DMware http://www.infonuovo.com/dmware 
ODMA Support http://www.infonuovo.com/odma 
Dennis E. Hamilton InfoNuovo [mailto:ietf-dav-versioning-request@w3.org]On 
Behalf Of Geoffrey M. Clemm http://www.webdav.org/deltav/protocol/draft-ietf-deltav-versioning-10.2.doc Changes since deltav-10: - Moved version selector DAV:predecessor-set property to core. 
(Boris) - Made label support optional. 
(Lisa) - Removed Workspace header (Geoff) - Added DAV:must-not-be-checked-out precondition for LABEL (John) - Only require Multi-Status if there was an error in a Depth operation (e.g. LABEL and SET-TARGET). 
(John) - Got rid of "parent workspace" for MKWORKSPACE (Tim/Geoff) - Added DAV:no-checkout argument to MERGE (Tim) - Fixed BASELINE-CONTROL so that baseline (not baseline history) is the argument (Tim). 
Outstanding Issues: - Should labels be moved back to core? 
Cheers, Geoff 
From: "Dennis E. Hamilton" infonuovo@email.com 
I would say that, so long as label support is optional, and they don't depend on any non-core mechanism, that the core is a good place to put them. 
The "core" as we currently use the term is the set of required features, so if label support is optional, it by definition is not in core. 
It looks like the real problem is the term "advanced". 
We should call it "optional" or something (any suggestions?). 
Some other optional features that are obviously not "advanced" but are "optional" are DAV:checkout-branch (which lets a server declare that it only supports linear branching) and mutable versions. 
Mostly I see it encouraging developers to notice them and consider their support rather than come up with substitutes at the core level that don't scale into advanced. 
This is true for everything in the "optional" section, so I think this reinforces the need to rename "advanced". 
I'll try how "optional" works, but if anyone has a better idea for a name, please let me know. 
I'll also try to think up some words that make it clear that if you want to implement anything not in core, to look into the optional versioning features before inventing a non-interoperable mechanism. 
Cheers, Geoff 
extensions I would say that, so long as label support is optional, and they don't depend on any non-core mechanism, that the core is a good place to put them. 
The "core" as we currently use the term is the set of required features, so if label support is optional, it by definition is not in core. 
It looks like the real problem is the term "advanced". 
We should call it "optional" or something (any suggestions?). 
Some other optional features that are obviously not "advanced" but are "optional" are DAV:checkout-branch (which lets a server declare that it only supports linear branching) and mutable versions. 
Mostly I see it encouraging developers to notice them and consider their support rather than come up with substitutes at the core level that don't scale into advanced. 
This is true for everything in the "optional" section, so I think this reinforces the need to rename "advanced". 
I'll try how "optional" works, but if anyone has a better idea for a name, please let me know. 
I'll also try to think up some words that make it clear that if you want to implement anything not in core, to look into the optional versioning features before inventing a non-interoperable mechanism. 
Cheers, Geoff 
