Thanks Bruce. 
Well I took a look at the page. 
The problem is that the button that submits the form isn't an HTML submit button. 
Instead, it triggers javascript via "onClick" onClick="checkPassword(this.form) 
The code for checkPassword(data) has a bunch of checks ending in data.submit. 
In other words, it does the checks and submits the form if it's OK. 
This is a reasonable thing to do, to check data on in the browser before sending it to the cgi script. 
I've seen this before and my guess is that it's a common idiom. 
OK What to do? 
Presently, Betsie just omits Javascript. 
That doesn't handle this situation. 
The full solution would be to build a javascript interpreter into betsie that would run the checks via cgi and submit the form. 
Here's one quick and dirty "solution" Rule: Whenever there is a button with onClick=function search the javascript fot that function and, recursively, any functions that are called if you find .submit then just replace the button with a submit button. 
The obvious problem is that this will send errors back to the cgi and who knows what the cgi will do. 
Probably send back some inscrutable error message. 
So the user would just keep trying to figure out what he or she filled out wrong. 
Well, arguably better than nothing. 
Another solution, Provide an option to retain the javascript. 
This will not help people with lynx, but perhaps it could still help people using screenreaders on graphical browsers that do use javascript. 
So make "retain javascript" an option. 
Or, at least, hide javascript via !-- and -- from browsers that don't handle javscript. 
The alternative, like I say, is to build a javascript interpreter into the repair tool. 
Hmmmm. 
If there's an open source Javascript tool around this may not be that bad... Another Hmmmmm. 
Another javascript idiom is to replace images when a mouse passes over them. 
This is used, e.g., to cause text to highlight. 
Or to cause a picture of a man's forehead, visible just above a horizon line, to pop up, revealing a smiling, disembodied face, whenever the mouse passes over the forehead, or passes over a link to yahoo further down on the page (cf. 
http://astro.temple.edu/~kasday ). 
The latter page describes the effect via a D link. 
A repair tool would include a link equivalent to "onMouseOver" and tell the user what happened, assuming proper ALT text with the replacement image. 
Len 
Actually the problem was latter on. 
I should have explained this better. 
I explored both frames, and found the one with content. 
This was no big deal. 
But then try going further. 
Follow the link for "_create_ new student account". 
Filling-in the few lines is no problem (Lynx or Betsie) but submitting the form is another story. 
Lynx cannot activate the "Create" button (even though [BUTTON] is displayed). 
Betsie shows the button, but when it is selected just generates a blank page. 
Please try this, you will not get to a validation screen until after this step (use whatever text you want for the fields). 
I think the pages use poorly designed Java script. 
As you saw, nominally IE 4+ is required. 
For the source of one page was a subroutine named "IE3 stinks" -- this can't be too professional work! 
Thank you for your efforts. 
Bruce Bailey 
From: Leonard R. Kasday kasday@acm.org 
wayne.myers@bbc.co.uk ; WAI ER IG List w3c-wai-er-ig@w3.org 
Subject: Re: New(ish) Test Version Of Betsie Date: Wednesday, June 02, 1999 9:12 AM Thanks bruce for observing that 
Betsie also could not handle a page that is currently giving Lynx fits 
at 
URL: http://www.prometheus.gwu.edu 
I took a look with lynx. 
This page has two frames, one of which is actually blank, to wit (or 
witless) 
HTML HEAD TITLE Untitled /TITLE /HEAD BODY BGCOLOR="#FFFFFF" /BODY /HTML So we could add a repair rule: omit blank frames And as special case, if there's just one frame, release it from it's 
shell. 
Actually, I think WAG in effect did this by concatenating frames into a single page.... I'll have to take a look... gotta run now... There's also some images with no alt text. 
Otherwise reads OK. Len Leonard R. Kasday, Ph.D. Universal Design Engineer, Institute on Disabilities/UAP, and Adjunct Professor, Electrical Engineering Temple University Ritter Hall Annex, Room 423, Philadelphia, PA 19122 kasday@acm.org 
(215} 204-2247 (voice) (800) 750-7428 (TTY) 
Leonard R. Kasday, Ph.D. Universal Design Engineer, Institute on Disabilities/UAP, and Adjunct Professor, Electrical Engineering Temple University Ritter Hall Annex, Room 423, Philadelphia, PA 19122 kasday@acm.org 
(215} 204-2247 (voice) (800) 750-7428 (TTY) 
Um... yeah. 
Javascript is a problem. 
The main reasons I made the decision to have Betsie remove all Javascript are approximately as follows: Betsie messes around in a very serious way with the HTML in the page. 
When Javascript in a page is making assumptions about what else is going to be there in the page (especially images, and especially image roll-overs), it fails badly, and an awful lot of Javascript makes precisely those kinds of assumptions. 
I haven't managed to work out how to distinguish between such Javascript and other Javascript that makes no such assumptions and would therefore work fine in theory under Betsie. 
Building a Javascript interpreter into Betsie seems fairly pointless until it is possible to make that distinction reliably, at which point it may prove to be easier to simply rely on the user's browser's Javascript interpreter. 
Also, in practice, and certainly on the test suite of however many squillion pages I have tested Betsie on, both on the BBC site and elsewhere, I have found the general standard of 'found' Javascript to be no higher than the general standard of 'found' HTML - it's hard enough to find and fix syntactically correct Javascript after the Betsie HTML mangling, but when people make mistakes in it anyway it becomes almost impossible - certainly in a Perl CGI that is already quite large due to the amount of mucking around with HTML it does. 
Maybe a CGI written in C/C++ could encapsulate enough oomph to do the job, but this only introduces other problems associated with the much smaller pool of people who are going to be happy with installing such CGI scripts, to say nothing of the sheer magnitude of the task when you consider how many mutually incompatible versions of Javascript are out there. 
Meanwhile, removing all Javascript solves the problem of Javascript-related error messages. 
I did try and retain some Javascript, but all that ended up happening was that I retained the ablility to ensure a flurry of Javascript errors on almost every page that contained undeleted Javascript. 
So, bye bye Javascript, until we can distinguish between Javascript worth keeping and Javascript that needs throwing out. 
Any ideas? 
In any case, while there is a problem with pages that rely on Javascript for key functionality, I don't think it's Betsie's problem, or, indeed, an appropriate problem for a repair tool. 
After all, the WAI content guidelines state quite clearly in point 6.3: "Ensure that pages are usable when scripts, applets, or other programmatic objects are turned off or not supported. 
If this is not possible, provide equivalent information on an alternative accessible page. 
[Priority 1]." So relying on Javascript being present for anything is an accessibility error up there with omitting ALT attributes in an image. 
Hence, although Len writes... 
This [checking form data with Javascript] is a reasonable thing to do, to 
check data on in the 
... 
I'm afraid I don't agree that checking form data with Javascript *is* a reasonable thing to do. 
Javascript may be turned off, or may simply not be present, and then that checking - if it is indeed important - will have to be done again in the CGI. 
If it's already being done in the CGI, it doesn't need to be done in the form. 
If it doesn't really need to be done at all - if it doesn't matter whether or not it's being done - why do it at all? 
I would point out that 'click here' is also a common idiom. 
Cheers etc., Wayne Wayne Myers Interactive Software Engineer BBC Digital Media 0181-752-6116 
(I'm copying Dave Ragget on this --since he is currently looking at Javascript standardization.) Wayne and Len-- Many of the issues with Javascript that Wayne is running into are not Betsy specific --they are a generic access problem resulting from the use of imperative constructs to achieve what would be better realized via declarative HTML markup. 
Rather than kluging Betsy to have a JS interpreter built in --a conceptually Turing complete problem-- here is what I suggest to be a more productive route going forward: 0) Use the Betsy experience productively as follows-- 1) Identify instances of JavaScript usage that cause problems and could be better implemented as standard HTML constructs. 
2) Realise that many of the Javascript based hacks prevelant on the WWW are short-term patches to achieve specific effects that are hard to achieve with today's HTML constructs and their corresponding implementation within the User Agents 3) For each such usage, identify what user agents should be doing to alleviate the pain that results from using vanila HTML constructs; this will be the precursor to fixing the user agents so that page authors can reliably use standard HTML declarative constructs as opposed to imperative Javascript kluges. 
4) Doing this will mean that access plays a key role in driving forward WWW practice while at the same time cleaning up some of the mess that is being created in the name of "but the only way I can get my page to look right is to adopt this kluge" 5) Finally, doing the above clean-up will automatically result in use of JavaScript for only those things that require client-side programming e.g., form-field validation; it will then become significantly easier for an access tool to cope with those usages. 
What we have at present is a mish-mash that defies any kind logic. 
I'm copying Dave Ragget on this --since he is currently looking at Javascript standardization. 
Best Regards, --raman as representative of my employer, Adobe Systems Inc. 
