Hallo W3C, as discussed in the teleconference on march 28th I will send you a list of functional needs Ai Squared has using the DOM: Events: *focus tracking: we need to get an event when the focus changes and we need to be able to identify the element that has the focus *state change: we need to get an event when the state of a radio button or check box changes *list tracking: we need to get an event when a different item in a list is selected (list box / combo box) *text cursor tracking: we need to get an event when the text cursor is moved in an input element and when text is selected, edited or deleted *download: we need to get an event that tells us that downloading of a page is completed Data: *We need to be able to get all text and active items (links, frames, controls, graphics) on a web page. 
*For each element we need to get the screen coordinates *We need to get screen coordinates not only for a text block but for at least each word in the block if not each character *We need to be able to tell if an element is scrolled into view or not *For text we need to get the foreground and background color, font name, size, attributes (bold, italic etc) *For controls and frames we need to get the type, title, state, selected item *If the author hasn't provided a title for a control we need to be able to fast navigate to the previous or next text element (assuming that this might be the title) *We need an fast way to find the control that has the focus *For graphics we need a meaningful description Navigation: *We need to be able to enumerate the links, frames and/or controls on the page in the tab order *We need to be able to identify functional blocks on a web page (banners, navigation bar, document area) *We need to be able to find elements by screen coordinates (at a point or in a rectangle) *We need to be able to distinguish between tables that are used to internally structure the page and tables that are actual tables for the user Action: *We need to be able to scroll an element into view *We need to be able to programmatically set focus to a link, frame or control *We need to be able to programmatically execute a link, click on a button etc Currently we are using the DHTML Object Model of IE, but we are currently investigating what we could win by switching to IE DOM. 
One issue was not discussed in the teleconference: performance. 
My assumption is that performance could be increased by defining a set of functions that are doing exactly what AT vendors need, for example: GetFocusElement, GetElementAtPoint, GetElementInRectangle, GetSelectedElement, etc A lot of our requests are related to screen coordinates / rendering information. 
I do understand that this is not part of DOM, but for a screen magnifier is an essential information. 
Maybe DOM could describe a way how to get rendering information. 
Maybe it would be possible to have another standard defining how the rendering engine is providing information to the outside world. 
Best regards Jost Eckhardt, Ai Squared 
As discussed in the teleconference on March 28th I am enclosing a list of the functional requirements ION Systems has using the DOM: 1. 
A guarantee that the DOM, once obtained, is valid. 
Using certain user agents, a node may actually be the child of two parents. 
This is the result of invalid HTML, but from our perspective that makes no difference as it is impossible to work with the invalid DOM. 
If a DOM is invalid as a result of incorrect input, then we need a way to discover the errors so that the user can be presented a warning. 
If this were implemented, HTML authors might actually be informed that their sites were invalid and might have some incentive to fix them. 
2. A consistent method for determining DOM completion. 
It is possible, using certain user agents, to obtain a pointer to a DOM that is not complete. 
It would be nice if we could reliably determine partial completion so that the entire DOM would not have to be constructed before our software started. 
3. Access to the text of the document via a consistent interface. 
4. Access to the attributes, in order, of each element via a consistent interface. 
5. Access to the parent tags, in order, of each element via a consistent interface. 
6. 
A C++ binding. 
Java and Javascript are great, but they don't make the cut for many performance critical or mass distributed applications. 
ION would be curious to know how many realistic projects are under construction in each language. 
As an aside here is what we don't need: A tree structure. 
The fact that DOM is a tree might be a significant limitation to its architecture. 
Users do not see the document as a tree, they see it as a list. 
Having the DOM as a tree makes creation of a valid object from invalid input more difficult and also makes it harder to render. 
This may be an off the wall suggestion, but included it anyway because our primary problem with DOM is getting one that is broken, and we don't see the world of HTML suddenly changing and presenting us with nothing but valid documents. 
A simpler design that was correct more often would be better. 
Pat Brannan and Jill Thomas ION Systems, Inc. jill@ionsystems.com 107 Mississippi Ave., Crystal City, MO 63019 www.ionsystems.com 
Your Bridge To Usability www.galaxylibrary.com 
Where Electronic And Print Worlds Converge eMonocle (tm) an XML viewer for simultaneous use by sighted, low vision and, in the near future, blind readers. 
Web Eyes (tm) a web plug-in facilitating compliance with Section 508 and accessibility to any web page for low-vision users. 
Jill, As for error correction, we have a number of server-based transcoding projects where the DOM is created with error correction performed and reflected in the DOM. 
As for creating an incentive for developers to go back and fix there HTML sites you can forget it. 
The main browsers, IE and Netscape, have already put in so much bug fixing that the situation is irreversible unless you go to XML. 
In the last meeting Microsoft had stated that Microsoft would no-longer correct document errors in XML. 
... This is fantastic. 
It does not fix the HTML problem. 
We are looking at C++ support for the DOM in the UNIX accessibility work. 
It has nothing to do with JavaScript. 
As for performance, Home Page Reader uses the DOM just fine. 
Rich Rich Schwerdtfeger Senior Technical Staff Member IBM Accessibility Center Research Division EMail/web: schwer@us.ibm.com "Two roads diverged in a wood, and I - I took the one less traveled by, and that has made all the difference.", 
Frost Jill Thomas com cc: Sent by: Subject: Re: Functional Request for DOM w3c-wai-ua-reques t@w3.org 04/03/2002 02:04 PM 
As discussed in the teleconference on March 28th I am enclosing a list of the functional requirements ION Systems has using the DOM: 1. 
A guarantee that the DOM, once obtained, is valid. 
Using certain user agents, a node may actually be the child of two parents. 
This is the result of invalid HTML, but from our perspective that makes no difference as it is impossible to work with the invalid DOM. 
If a DOM is invalid as a result of incorrect input, then we need a way to discover the errors so that the user can be presented a warning. 
If this were implemented, HTML authors might actually be informed that their sites were invalid and might have some incentive to fix them. 
2. A consistent method for determining DOM completion. 
It is possible, using certain user agents, to obtain a pointer to a DOM that is not complete. 
It would be nice if 
we could reliably determine partial completion so that the entire DOM would not have to be constructed before our software started. 
3. Access to the text of the document via a consistent interface. 
4. Access to the attributes, in order, of each element via a consistent interface. 
5. Access to the parent tags, in order, of each element via a consistent interface. 
6. 
A C++ binding. 
Java and Javascript are great, but they don't make the cut for many performance critical or mass distributed applications. 
ION would be curious to know how many realistic projects are under construction in each language. 
As an aside here is what we don't need: A tree structure. 
The fact that DOM is a tree might be a significant limitation to its architecture. 
Users do not see the document as a tree, they see it as a list. 
Having the DOM as a tree makes creation of a valid object from invalid input more difficult and also makes it harder to render. 
This may be an off the 
wall suggestion, but included it anyway because our primary problem with DOM is getting one that is broken, and we don't see the world of HTML suddenly changing and presenting us with nothing but valid documents. 
A simpler design that was correct more often would be better. 
Pat Brannan and Jill Thomas ION Systems, Inc. jill@ionsystems.com 107 Mississippi Ave., Crystal City, MO 63019 www.ionsystems.com 
Your Bridge To Usability www.galaxylibrary.com 
Where Electronic And Print Worlds Converge eMonocle (tm) an XML viewer for simultaneous use by sighted, low vision and, in the near future, blind readers. 
Web Eyes (tm) a web plug-in facilitating compliance with Section 508 and accessibility to any web page for low-vision users. 
Jill, Thanks for sending this. 
I have just a couple of questions below, preceded by IJ:. 
I will be putting your request into a table of requested functionalities, that I hope to make available soon. 
- Ian 
I'd like to get a better sense of what is meant by a "valid DOM". 
Since the DOM is an API, does this mean "conforming DOM implementation"? 
Or does this mean "conforming mapping from source document to document tree"? 
My comments below suppose the latter. 
Suppose we have a source document D. If D is not well-formed or does not validate, UA behavior for building an internal tree is not defined in any spec I'm aware of. 
If D is well-formed and validates, then the XML Infoset (in section 2.2 [1]) ensures that information about elements (for example) is made available in document order. 
[1] http://www.w3.org/TR/xml-infoset/#infoitem.element 
DOM 2 Core does not have a requirement that the order of information respect the source document order, but it's unlikely that any DOM implementation would consciously present available information in order other than document order. 
This means that when the internal tree (conveyed through the DOM or other API) does not match the source tree, it's either because a) the source tree was broken to begin with, or b) the implementation (that converts source to internal tree) is broken with respect to conformance to the Infoset and everyone's expectations about the DOM. 
For the case you cite (one node has two parents), do you know whether the cause is bad source or bad implementation? 
Whatever the cause, I think that the most that UAAG 1.0 will be able to do is require conformance to the Infoset requirement to respect document order. 
There's nothing that UAAG 1.0 can do to explain how to repair broken content. 
There may be one extra thing UAAG 1.0 could do: require that the form of the document be available at least in canonical form, per the XML Canonicalization Recommendation [2]. 
That may be going a bit far, but maybe not. 
[2] http://www.w3.org/TR/xml-c14n 
Please clarify where this refers to: a) A requirement related to modifications to the document tree by the user (e.g., filling out a form). 
[I don't understand what this would mean.] 
b) A requirement that the UA notify the AT that either the document object is still being constructed, or construction has been completed. 
I'm not sure what you mean by "you don't need a tree". 
If you are dealing with xml and html content, the whole design is based on trees (even if the rendering is not). 
I don't know how you can get away from a tree structure (conveyed through the DOM). 
I'm sorry if I've misunderstood something. 
Ian Jacobs (ij@w3.org) 
http://www.w3.org/People/Jacobs 
Hi folks, it might be intersting to compare the requirements that AT developers have from the DOM with the W3C Note about requirements for a component extension (i.e. plugin) interface - http://www.w3.org/TR/CX 
One of the assumptions is that a plugin can itself be asked to call a plugin - and the paralell in my mind is that an assitive technology might call the browser as if it were a plugin. 
Feedback from assistive technology developers on that document would also be useful. 
Cheers Charles McCN [snip] A lot of our requests are related to screen coordinates / rendering information. 
I do understand that this is not part of DOM, but for a screen magnifier is an essential information. 
Maybe DOM could describe a way how to get rendering information. 
Maybe it would be possible to have another standard defining how the rendering engine is providing information to the outside world. 
Best regards Jost Eckhardt, Ai Squared Location: 21 Mitchell street FOOTSCRAY Vic 3011, Australia (or W3C INRIA, Route des Lucioles, BP 93, 06902 Sophia Antipolis Cedex, France) 
