If users select that they want to show e-mail address when they annotate something it works fine, but when they select Family and Given name it is currently shown as some mysterious address like X021796. 
This is probably because we collect the names separately to a structure, but (if I understand it correctly) dc:creator is just a string of the two names: I'm not sure where this needs to be corrected. 
Could we have more structure in dc:creator so that the applications could use it too or just ask the server to put the two names together to a string? 
How are other people using this? 
Marja Many people believe that dc:creator should point to a new RDF resource, with properties coming off of that, as opposed to just a text string. 
Something like: #annotation dc:creator :X10101 . 
:X10101 dc:title "Aaron Swartz" foaf:given "Aaron" ; foaf:family "Swartz" ; foaf:mbox mailto:me@aaronsw.com . 
I'd think this is perfectly acceptable, because it contains the structured information, as well as the dc:title value for simpler processors that just want a string. 
[ Aaron Swartz | me@aaronsw.com 
| http://www.aaronsw.com 
] Aaron Swartz replied: I basically agree with this, but I'd suggest doing it as a non-binary relation (RDF M&amp;S section 7.3) and using rdf:value instead of (or in addition to) dc:title. 
The RDF processor might not know that the property dc:title is more appropriate than the others as a default literal value. 
It does know that rdf:value is special. 
As an aside, two vocabularies that lend themselves to describing structured personal names are vCard and X.500. 
Perhaps the following: dc:creator :X10101 . 
:X10101 rdf:value "Aaron Swartz" x500:cn "Aaron Swartz" x500:givenName "Aaron" x500:sn "Swartz" x500:mail mailto:me@aaronsw.com . 
Ideally, you'd infer the rdf:value statement from the x500:cn (or dc:title) statement rather than duplicating the literal "Aaron Swartz" in the source statements, but expressing the inference rule would have to be done outside of RDF. 
PGP pub key: http://staff.pisoftware.com/raboczi/pgp-pub-key.asc Fingerprint: 5DOC 23A5 D5C7 FFD1 030F 62B0 D168 C77A EB25 A3A9 Yes, but in this situation, I think rdf:value might be too special. 
rdf:value seems to imply that the other properties are qualifications of the primary value, not properties of a resource. 
The example given in the spec is: rdf:value "500" ; :measurement :pounds . 
resulting in "500 pounds". 
We're not doing that here, we're instead providing a title, so dc:title is more appropriate. 
I'm a member of the DCMI Architecture WG and we're working on a "dumb-down" system to allow Dublin Core and RDF applications to receive literal values from complex data like this. 
Using dc:title and rdfs:label are both acceptable according to the spec. 
More information and a demo at: [ Aaron Swartz | me@aaronsw.com 
| http://www.aaronsw.com 
] 
