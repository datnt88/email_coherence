[Tim Bray] 
I want to lose PE's and am willing to accept that for people who need to live in a complex-DTD world, they'll probably have to use Full SGML. 
[Paul Prescod] 
It seems odd to me that we are going to add complexity to help people who need to publish databases but remove complexity required by people who need to publish large, complex documents adhering to large, complex DTDs. 
Aren' t large, complex documents with large, complex DTDs the reason we are *here*? 
I am concerned about this shift in focus from publishing large documents to solving the world's problems. 
I am *really* happy that a PE-ectomy is being considered for XML.Their complexity of implementation and explanation are at odds with the bulk of the XML spec. 
and the famous "spirit" of XML. 
Many people with SGML will stick with SGML as their data format for many good reasons. 
They will down-translate to target XML. 
In this down-translation they have many issues to deal with - not just PEs. 
I say this is good, right and proper. 
If we complicate XML too much to accomodate existing SGML we risk alienating the pioneers currently hitching up their wagons and preparing to head west. 
I say, making [SGML- XML] more complex is infinitely better than making [XML- Future Apps] more complex. 
Sean Sean Mc Grath sean@digitome.com 
Digitome Electronic Publishing 
Would parameter entities that worked like the C preprocessor be too complex? 
I don't think so... 
I want to use XML instead of SGML for many tasks -- losing parameter entities will make that close to impossible for me. 
Since the mess around PEs is due to their funny syntactic restrictions, I suggest that their high utility argues for removing the syntactic restrictions, not the feature. 
PEs as curently defined are also one fo the last things making a simple LEX/YACC style implementation of XML trivial -- since PE substitution could move into a separate input pass if they did not have contextual limits on occurrence. 
_And it would be much easier to explain to *users*._ 
There is something rotten in PEs, and it's not their existence.... -- David David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ 
Although I am probably in the 'PEs for 0 or more declarations only' minimalist camp, honesty compels me to say that David is right, that implementing PEs without restriction on their occurance, except that the RESULT has to be valid, is indeed easy in a lex/yacc environment. 
I know, because that's how PEs are implemented in LT XML. 
The only thing that's still tedious is the complexities of not barfing on references to non-defined PEs if they are inside IGNORE sections, but that won't go away on the minimalist PE stance, either. 
ht 
I want to add my voice (again) to the 'keep PEs in somehow camp'. 
I believe that their removal will raise the entry level for XML for some organisations by moving complexity from within the XML processor out to document designers and administrators who will not relish the problems of maintaining what will amount to monolithic DTDs, or collections of non-XML (SGML) units that will need preprocessing. 
And I feel sure that there will be far more designers and administrators than there are people writing XML processors.' The greatest good for the greatest number'? 
I would also like to endorse the idea of restricting the use of PEs to 'useful' parts of the syntax, like "(foo|bar)", as this should improve the lot of both XML Processor implementers and those who write and manage DTDs. 
Martin Pike Martin Pike, Stilo Technology WWW: http://www.stilo.com/ 
David Durand said: 
-Seconded --Debbie Lapeyre 6010 Executive Blvd., Suite 608 E-mail: dalapeyre@mulberrytech.com Rockville, MD 20852 WWW: http://www.mulberrytech.com 
