We seem to have two questions related to Chunked encoding, and I wonder whether answering one of them may make it easier to answer the other. 
Specifically, we have an open question on whether we will support both chunked encoding and multi-part MIME for persistent connections. 
We also have an open question about whether and how to fix the current specification of chunked encoding so that it allows the kinds of footer information the Phillip Hallam-Baker needs. 
If we agree we will support both chunked encoding (as a MUST) and multi-part MIME (perhaps as a SHOULD), can we leave messages which require footers to multi-part MIME? 
If this is possible, it seems that we could retain some of the ease of implementation that the Area Directors indicated chunking would buy us, and help us get persistent connections deployed more quickly 
Ted 
No, this is exactly the opposite of what I am saying. 
Chunked as specified is OK, it includes footers and there is a minor tweak to the grammar which I beleive should be made which would hold open interesting developments in 1.2. 
The problem is not how to "fix" chunked. 
The problem is how to keep people from taking the footers out. 
The message I put out 8 weeks ago was a result of misreading the draft. 
Roy cleared this up but it does not appear that everyone noted this. 
No, multiparts are intollerable over an 8-bit clean connection. 
They are not acceptable as the sole means of incorporating footers. 
I suggest we: 1) Leave chunked in as a MUST *including* *footers* (as is currently the case). 
2) Make the technical change to the chunk a grammar to allow chunk attributes to be incorporated at a later date. 
3) Relegate MIME multipart support to SHOULD. 
[If indeed coding time is an issue]. 
I am not proposing an onerous quantity of code. 
It is simply requiring 1.1 parsers to tolerate possible 1.2 extensions. 
It has no impact on the normal flow of control, it is merely a question of what is considered an error. 
I really do not think there is any major problem here. 
I think that it is simply a case of miscommunication which is easy enough via e-mail. 
It appears that the louder I tell people that removing footers from chunked would be a very stupid mistake the more people suggest this course of action as a means of obtaining consensus! 
If people want consensus and want chunked in 1.1 then can we please have a discussion that addresses the *technical* issues. 
Phill 
Phill, 
No one is interested in breaking anything; we are (all, I hope) interested in getting a system which interoperates as widely as possible, and which can be deployed in a reasonable manner. 
I think you would find most people would agree with you that using Multi-part MIME is less efficient than chunked encoding because of the need for interpretation; that was, in any case, my reading at the meetings in L.A. My question is simply: for the situations where you need signed parts or other footer data, what can't be done using Multipart? 
Looking over what you've posted on this matter, I see situations in which footer data is needed, and I see situations in which what you call the introspective nature of the Web makes the use 
of boundary strings problematic. 
I don't, however, see any overlap between the two. 
If there are overlapping cases, describing them would help me a lot in understanding the problem. 
Remember, we are talking here about what to put in 1.1, not 
the whole future of HTTP; what can we get done now that moves us forward? 
Ted 
My apologies; I forgot to cc the list on one of my questions to Phil, so that following exchange is probably a bit hard to follow. 
Basically, I asked why using Multiparts in an 8-bit clean environment was not acceptable. 
The following should be understood as a reply to that question, and my response. 
Ted 
1Signed live video feed. 
2Signed content generated on the fly 3Authenticated messages I have *code* which *runs* which covers item 2. 
Remember you are suggesting taking the current 1.1 spec and changing it. 
Nobody has provided any reason why this should either:- 1) Be any simpler to implement. 
2) Allow aggrement to be reached in a shorter time frame. 
If people don't want to have a large burden writing code for 1.1 then what is wrong with simply specifying a footer but defining no valid entity-footers for use in it except for extension-tag? 
What is the reason for introducing a broken version of chunked in the 1.1 spec simply so that we can fix it in 1.2? 
That will involve a lot more code and it will mean that 1.1 compliant caches and gateways will not know how to interact with 1.2 messages. 
Why can't people simply agree with *me* in order to move the spec forward? 
I generally think that the best specs are those which anticipate the next 
revision. 
That is all I am saying we should do. 
I'm willing to hear a technical argument. 
Simply asking me to go along with a *CHANGE* to the spec for the *WORSE* makes absolutely no *SENSE* to me. 
Ted, please at the very least acknowledge that you are the one who is proposing a change. 
Phill 
Because they introduce an unnecessary osurce of error. 
The assumption that one can form boundary strings with negligible probability of collision is unfortunately false. 
I have a system which provides a hyperterminal interface using HTML and HTTP. 
If multiparts were put into the HTTP spec that system could not be introspective, if the terminal ever relayed any of its own output it would fail. 
The Web as knowledge system has to be introspective. 
That is not a negotiable position. 
If the IETF wants to break our protocols because they don't want to understand what the project is about then the IETF will not be the venue for standardization. 
Althoug I quite agree with that the parsing of multipart mime is expensive, I'd do have a factual problem with the statement that 'the probability of collision is unfortunately false'. 
It should be understood that the boundary string does not need to be random, nor does it need to be unpredictable; in fact making it random and/or unpredictable increases chance of collision. 
Where the text 'whole unpredictable' a completely fixed string whould be the best boundary string; that is any fixed string of given lenght. 
(Sorry for the crappy translations; but I lack the english vocabulary to get the mathematics across) However, as you assert rightly, the message conveyed is not unpredictable. 
Now proof can be given that a multi variant string which is a function of the text it signs and a function of history has almost the same chance of collision as a *fixed* string with a random text. 
In practive, some cheap Lenght, MD5 or CRC of the text signed combined with the results of a function which is a function of the previous resoult (say a counter, timer, etc) nears the optimum. 
You might want to consult literature on Number theory and most books on encryption might help you out as well. 
What can be done to move us forward. 
I would very much prefer to have *both* chunked and multipart. 
As this allow the server builders to choose and to optimize; it is easy to envision senarios where either of the two would excell, or where the difference between server resources and programming resources are large. 
Dw. 
I agree with Phil. 
There seems to be this belief that removing footers will make implementation of chunked easier and cause 1.1 to converge faster. 
Maybe I'm not too bright, but I don't see that. 
What exactly is the technical problem with footers? 
Henry henrysa@microsoft.com 
