[This is a fuller discussion of the syntax and vocabulary for EARL.] 
The actual base vocabulary for EARL can be fairly flat, as the model of the langauge will be dictated by the RDF Model and Syntax W3C Recommendation. 
However, I don't expect that all EARL processors will need to be "RDF complete", i.e. able to process all of the RDF functions. 
On the contrary, RDF syntax is not limited to XML RDF for it can take on plain text (e.g. Notation3) forms as well. 
It may be that an evaluation processor (EP) can only support a subset of EARL designed for its own particular task. 
This is fine as long as the EP does not introduce any features outside of RDF Model and Syntax, or the associated Schemas ontologies and logic, or anything outside of the EARL framework. 
EARL itself will probably consist of two parts: a vocabulary, and a framework. 
The vocabulary can be modularized so that there are some central core concepts on the EARL namespace, that can then be ontologically extended to include other namespaces. 
The framework will provide instructions for doing so. 
Here is an update on the vocabulary:- @prefix earl: # . 
@prefix daml: http://www.daml.org/2000/10/daml-ont# 
@prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# . 
@prefix rdfs: http://www.w3.org/2000/01/rdf-schema# . 
# Properties earl:asserts a rdf:property; rdfs:comment "x asserts y" . 
earl:comment a rdf:property; rdfs:comment "x comments that y"; daml:equivalentTo http://www.w3.org/2000/08/comment# . 
earl:confidence a rdf:property; rdfs:comment "x is asserted to a confidence level of y" . 
earl:conforms a rdf:property; rdfs:comment "x conforms to y" . 
earl:testobject a rdf:property; rdfs:comment "x has test object y - the thing being tested" . 
earl:langtype a rdf:property; rdfs:comment """x is of langtype y [e.g. x earl:langtype "XHTML"]""" . 
earl:mode a rdf:property; rdfs:comment "x has a test mode of y" . 
earl:result a rdf:property; rdfs:comment "x has the result y" . 
# Classes (for modularity) earl:Level a rdf:property; rdfs:comment "is a generic level of something" . 
earl:ValidityObject a rdf:property; rdfs:comment "is a checkpoint - the thing being tested against" . 
# Objects earl:person rdfs:comment "x is an earl:person" . 
earl:tool rdfs:comment "x is an earl:tool" . 
This should be called the core EARL module. 
I expect that many people will be wanting to use their own properties in an EARL tool. 
While this should be encouraged, we must be careful to ensure that people do so in structured ways. 
The EARL vocabulary is provided so that it may form the basis of further EARL modules. 
For example, AU may want to introduce their own terms for use in an AU conforming tool. 
An example of a module (RDF schema) for this is:- @prefix atag: http://www.w3.org/2001/02/aertearl/ . 
@prefix earl: http://infomesh.net/earl/schema/ . 
@prefix daml: http://www.daml.org/2000/10/daml-ont# 
@prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# . 
@prefix rdfs: http://www.w3.org/2000/01/rdf-schema# . 
atag:levelA a earl:Level; rdfs:comment "ATAG Level A conformance" . 
atag:checkpointN a earl:ValidityObject; rdfs:comment "ATAG checkpoint N" . 
atag:assertedBy a rdf:property; daml:inverseOf earl:asserts; rdfs:comment "x was asserted by y" . 
Here, two atag specific properties have been introduced, and another specified as being the inverse of another EARL property. 
I am currently working out some N3 rules that we can use to run through CWM to show the effectiveness of making EARL an RDF language. 
Kindest Regards, Sean B. Palmer @prefix : http://webns.net/roughterms/ . 
[ :name "Sean B. Palmer" ] :hasHomepage http://infomesh.net/sbp/ . 
Why can't we use the dublin core property dc:author instead of the current earl:asserts - or should we just define an equivalence? 
Cheers Charles [This is a fuller discussion of the syntax and vocabulary for EARL.] 
The actual base vocabulary for EARL can be fairly flat, as the model of the langauge will be dictated by the RDF Model and Syntax W3C Recommendation. 
However, I don't expect that all EARL processors will need to be "RDF complete", i.e. able to process all of the RDF functions. 
On the contrary, RDF syntax is not limited to XML RDF for it can take on plain text (e.g. Notation3) forms as well. 
It may be that an evaluation processor (EP) can only support a subset of EARL designed for its own particular task. 
This is fine as long as the EP does not introduce any features outside of RDF Model and Syntax, or the associated Schemas ontologies and logic, or anything outside of the EARL framework. 
EARL itself will probably consist of two parts: a vocabulary, and a framework. 
The vocabulary can be modularized so that there are some central core concepts on the EARL namespace, that can then be ontologically extended to include other namespaces. 
The framework will provide instructions for doing so. 
Here is an update on the vocabulary:- @prefix earl: # . 
@prefix daml: http://www.daml.org/2000/10/daml-ont# 
@prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# . 
@prefix rdfs: http://www.w3.org/2000/01/rdf-schema# . 
# Properties earl:asserts a rdf:property; rdfs:comment "x asserts y" . 
earl:comment a rdf:property; rdfs:comment "x comments that y"; daml:equivalentTo http://www.w3.org/2000/08/comment# . 
earl:confidence a rdf:property; rdfs:comment "x is asserted to a confidence level of y" . 
earl:conforms a rdf:property; rdfs:comment "x conforms to y" . 
earl:testobject a rdf:property; rdfs:comment "x has test object y - the thing being tested" . 
earl:langtype a rdf:property; rdfs:comment """x is of langtype y [e.g. x earl:langtype "XHTML"]""" . 
earl:mode a rdf:property; rdfs:comment "x has a test mode of y" . 
earl:result a rdf:property; rdfs:comment "x has the result y" . 
# Classes (for modularity) earl:Level a rdf:property; rdfs:comment "is a generic level of something" . 
earl:ValidityObject a rdf:property; rdfs:comment "is a checkpoint - the thing being tested against" . 
# Objects earl:person rdfs:comment "x is an earl:person" . 
earl:tool rdfs:comment "x is an earl:tool" . 
This should be called the core EARL module. 
I expect that many people will be wanting to use their own properties in an EARL tool. 
While this should be encouraged, we must be careful to ensure that people do so in structured ways. 
The EARL vocabulary is provided so that it may form the basis of further EARL modules. 
For example, AU may want to introduce their own terms for use in an AU conforming tool. 
An example of a module (RDF schema) for this is:- @prefix atag: http://www.w3.org/2001/02/aertearl/ . 
@prefix earl: http://infomesh.net/earl/schema/ . 
@prefix daml: http://www.daml.org/2000/10/daml-ont# 
@prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# . 
@prefix rdfs: http://www.w3.org/2000/01/rdf-schema# . 
atag:levelA a earl:Level; rdfs:comment "ATAG Level A conformance" . 
atag:checkpointN a earl:ValidityObject; rdfs:comment "ATAG checkpoint N" . 
atag:assertedBy a rdf:property; daml:inverseOf earl:asserts; rdfs:comment "x was asserted by y" . 
Here, two atag specific properties have been introduced, and another specified as being the inverse of another EARL property. 
I am currently working out some N3 rules that we can use to run through CWM to show the effectiveness of making EARL an RDF language. 
Kindest Regards, Sean B. Palmer @prefix : http://webns.net/roughterms/ . 
[ :name "Sean B. Palmer" ] :hasHomepage http://infomesh.net/sbp/ . 
Location: I-cubed, 110 Victoria Street, Carlton VIC 3053, Australia (or W3C INRIA, Route des Lucioles, BP 93, 06902 Sophia Antipolis Cedex, France) there's no dc:author in dublin core. 
We have dc:publisher, dc:creator dc:contributor... also their use is pretty unconstrained. 
You might find it best to do what's right for EARL and figure out how DC relates later. 
FWIW I have been using http://xmlns.com/foaf/0.1/made 
to relate a to what you're after? 
dan dc:author? 
I was thinking that its use would be more like "x says y". 
I'm not sure what you mean by author there... as Dan points out, we can simply create lots of EARL terms anyway, and then define the equivalences later. 
DAML+OIL copies a lot of RDF Schema properties over... 
For example, we could even say:- earl:predicate = rdf:predicate . 
Then use either one, etc. Kindest Regards, Sean B. Palmer @prefix : http://webns.net/roughterms/ . 
[ :name "Sean B. Palmer" ] :hasHomepage http://infomesh.net/sbp/ . 
/me smakcs myself. 
creator was what I had in mind. 
but maybe what you have here is right. 
Charles there's no dc:author in dublin core. 
We have dc:publisher, dc:creator dc:contributor... also their use is pretty unconstrained. 
You might find it best to do what's right for EARL and figure out how DC relates later. 
FWIW I have been using http://xmlns.com/foaf/0.1/made 
to relate a to what you're after? 
dan Location: I-cubed, 110 Victoria Street, Carlton VIC 3053, Australia (or W3C INRIA, Route des Lucioles, BP 93, 06902 Sophia Antipolis Cedex, France) Dan, re your analogy to what we're trying to do with comments: similar idiom to what you're after? 
It sounds closely related in that : - two different people can associate two different channels with the same web page (i.e. the web page is seen in two different channels)); - and two different people can associate two different comments with the same web page; - and in both these cases there is no conflict (of course, "associate" means different things in these two cases; a web page is broadcast through a channel, and a comment is applied to a web page). 
So I'd like to see how you notated that. 
But when I look at pointed my browser there and did a "view source" to see the rdf). 
So I'm kinda guessing at what you had in mind. 
Could you point to some more details? 
Thanks! 
Len Leonard R. Kasday, Ph.D. Institute on Disabilities/UAP and Dept. of Electrical Engineering at Temple University (215) 204-2247 (voice) (800) 750-7428 (TTY) Chair, W3C Web Accessibility Initiative Evaluation and Repair Tools Group The WAVE web page accessibility evaluation assistant: [Long, but useful... another vocabulary update] O.K., in retrospect, some properties and classes look like they will provide more use than others. 
I'll go through what we have, and provide proper prose descriptions rather than that N3 rubbish. 
(with a summary at the end):- This is a very useful property, but let's take the ambiguity out. 
earl:asserts is like "says" in normal language. 
Something asserts something else. 
c.f. the N3 context brackets "{}" which Len pointed out was correct to use as the object of an assertion. 
This is interesting... can we assume that for all assertions made so far, the earl:confidence is set to "100%"? 
Are there any examples where you can "half trust a tool" or "trust what someone says to 20%?". 
I doubt that there are any examples with such a fine granularity: usually, you either trust something or you don't. 
One vote for deprecation then. 
:-) This is vehemently useful. 
"x conformsTo y"... oh that's a good point, there was some piece of advice I saw somewhere (from TimBL I think) about making predicate names active verbs, so that instead of "author" you have "writtenBy" and so on. 
conformsTo might be a good example of this. 
Oh, I found the reference... it was by TimBL in the N3 specification [1] of all things:- These assume that the english words people pick as properties are noun clauses. 
I actually perfer the use of verb clauses for what is in fact a verb. 
I prefer "wrttenBy" to "author". 
Hey, I even remembered the example! 
hmmmm..... a lot of the time we just use the subject as the test object, and presume that it is a testobject. 
IS this one of those things that is represented by RDF, i.e. earl:testObject = rdf:subject .? That reminds me, could we use xlink:role and xlink:arcrole in anything that we're doing? 
These have been suspiciously underused. 
This is also useful, and has been put to good use in list examples so far. 
A comment is a bit of prose that can't otherwise be represented in RDF. 
Would you want to represent an essay about the accessibility of a website in triples? 
It is completely disjoin from an assertion, although you could say :sean earl:asserts [ earl:comment "My comment" ] . 
This is also one of Len's "proposed properties to evaluate various means of representing information in an alternative form". 
These are prety well defined classes, but we need more to encourage modularization. 
Hey, no one has commented on modularization yet... now, do I take that as confusion, or consensus? 
:-) In summary then, I believe that these properties and classes should be thought of as the current earl core, based on discussions on the list since the last publishing of a vocabulary [note that by "module" I mean an EARL Schema with a certain function]:- [Core Syntax Module] earl:asserts earl:conformsTo earl:langtype Yes, there are only three properties. 
But we must also include now Len's "alternative representations" property list, which could be a core module outside of the syntax module (if you catch my drift):- [Core AR Module] earl:comment earl:exists earl:shouldExist earl:quality earl:suggestedReplacement Next, we have the classes. 
I can't think of anymore, but we really need quite a few so that people can make ontological extensions (as per some of the examples I gave in the last vocabulary discussion [2]):- [Core Classes Module] earl:Level earl:ValidityObject For those still seeking an explanation of classes and modularization: a class is like something that you can say "x is a y", where y is a class. 
So a "dog" is a type of "animal", and an "animal" is a class in this example. 
Therfore, if you are making your own EARL based langauge, it is useful to say that this is a type of EARL something, where that EARL something is a class. 
The more classes we have, the more new properties (and perhaps even subClasses) people can define. 
That's it. 
If you got to here without falling asleep or skipping anything, give yourself a pat on the back. 
[1] http://www.w3.org/DesignIssues/Notation3 [2] http://lists.w3.org/Archives/Public/w3c-wai-er-ig/2001Feb/0060.html 
Kindest Regards, Sean B. Palmer @prefix : http://webns.net/roughterms/ . 
[ :name "Sean B. Palmer" ] :hasHomepage http://infomesh.net/sbp/ . 
AG:: and one vote against. 
I have come across many places where I would like to apply a percentage rating to statements such as A covers the information content of B (70%). 
Another place that such weight factors are critical is in rating the autonomy of a sub-tree in a document. 
They vary all over the place but are rarely purely independent of the context or indistinguishable from the context. 
AG:: There are lots of other "should's." 
Like "shouldComplyWith That's a standard way to turn a reference into the techniques literature into a repair hint. 
Also the weaker (PL/1 typing) 'resembles' as opposed to the stricter 'conformsTo'. 
So we could say shouldResemble exampleRef . 
There are '.is' '?does' and '!should' mood options for about any assertion-expression. 
The '.is' flavor is the usually-elided default declaration [of fact]. 
The '?does' flavor is how one encodes what should be asked of the human in the loop. 
The piece of the action that I am not seeing described here is at a more primitive level. 
In the broader WAI context I think we need to be making assertions to the effect that "Object X works in audio" or "Composite Y works without audio" or "teaching module Z is complete in text (97%)" etc. [Pattern drill: substitute any media descriptor from HTML4/CSS2 + 'text' in the above where it says 'audio' or 'text'] These are the basic compatibility assertions that we need to know about building blocks and aggregates of web content. 
These plus equivalence assertions superimposed are about what we need to characterize the resource pool from which a multimedia [SMIL] presentation is built. 
This is the declarative language generalizing or relaxing the prescriptions encoded in SMIL test variables. 
Is EARL going to be a home for that vocabulary? 
I guess I need to find out if IMS has already done this. 
We should have the language to say "this audible description (which coexists peacefully with the soundtrack) gets you roughly 35% of what we could have told you with full-time commentary on the activity in the associated video" even if we don't have the nerve to make that sort of assertion in public often. 
Al http://www.w3.org/DesignIssues/Notation3 http://www.w3.org/DesignIssues/Not ation3 http://lists.w3.org/Archives/Public/w3c-wai-er-ig/2001Feb/0060.html http:// lists.w3.org/Archives/Public/w3c-wai-er-ig/2001Feb/0060.html http://infomesh.net/sbp/ 
http://infomesh.net/sbp/ . 
