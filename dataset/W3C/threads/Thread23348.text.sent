W3C is pleased to announce the following W3C Candidate Recommendations: DOM Level 3 Core DOM Level 3 Load/Save There was one remaining formal objection from the I18n Working Group, regarding the support of the character normalization: DOM Level 3 Core The optional character of the check-character-normalization parameter in the DOMConfiguration interface, the other one being not having it activated by default. 
A DOM user cannot do the right thing (check normalization unless careful consideration of the consequences...) if the normalization checking functionality is absent. 
The DOM is missing functionality essential for things as simple and basic as string matching. 
See also: DOM Level 3 Load and Save Given that the check-character-normalization parameter defined in DOM Level 3 Core is also used in the Load and Save module, implementation of this functionality must not be optional and must be activated by default. 
After consideration, the Director concluded that it is not obvious that checking the normalization of character, as defined in the Character Model of the Web, should be the default. 
In an architecture with early canonicalization, it is not necessarily clear that a good design involves possibly expensive checking of the canonicalization at each point. 
It may instead involve a guarantee by the parties that canonicalization will be done on documents where it could be broken. 
Given the lack of implementation commitments, despite the availability of open source implementations of the character normalization, the Director decided to move the DOM modules to Candidate Recommendations, without modifications. 
Proposed Recommendation Entrance Criteria The DOM Working Group charter includes the following success criteria: Before new DOM specifications can become a W3C Proposed Recommendation, every feature specified in the DOM Level 3 specification must have been implemented at least twice for at least one of the bindings. 
These interoperable implementations must be developed independently by two different organizations. 
The DOM Working Group expects to show two implementations of every feature defined in the DOM Level 3 Core and Load and Save modules before requesting to advance to Proposed Recommendation status. 
Given the lack of implementation commitments regarding character normalization, the DOM Working Group considers it "at risk". 
This affects the "check-character-normalization" and "normalize-characters" parameters defined in the DOMConfiguration interface. 
The Working Group MAY remove the parameters before requesting Proposed Recommendation status. 
To allow time to developers to provide implementations, the DOM Working Group does not expect to request to advance this document to Proposed Recommendation status sooner than one month from now (8 December 2003). 
What Candidate Recommendation Means Excerpted from the Process Document, Section 5.2 [1], the description of Candidate Recommendation: "A Candidate Recommendation is a document that W3C believes has been widely reviewed and satisfies the Working Group's technical requirements. 
W3C publishes a Candidate Recommendation to gather implementation experience." 
Philippe Le H?garet, DOM Activity Lead, for the DOM Working Group. 
[1] http://www.w3.org/2003/06/Process-20030618/tr.html#RecsCR 
Call for Implementations: DOM Level 3 Core and Load/Save This implementation: has been updated to all features of the November CRs with the exception of: - external resource resolution &amp; loading - validation - asynchronous LSParsers - format-pretty-print (Future versions may support external entities and pretty-printing; the others are unlikely.) I agree. 
Character normalisation is not specifically a DOM issue, is frequently not relevant to the application, and is non-trivial to implement. 
pxdom supports it where the native language libraries contain the functionality - unicodedata.normalize in Python 2.3+. 
IMO requiring all DOMs support character normalization even on platforms where such libraries are not easily available is not desirable - and I'm not convinced the feature should be 'on if supported' by default in LSSerializer, either. 
But including it as an optional feature does no harm. 
Further comments on spec to follow... Andrew Clover -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1 Call for Implementations: DOM Level 3 Core and Load/Save I've took a look at it. 
It's really nice, thankx ;) Just one comment to your extension Node.pxdomContent. 
Yes, the LS module provided a read-only attribute ElementLS.markupContent that did the same. 
But why is this attribute gone? 
I really liked it - for convience.... Many thanks, Christian Parpart. 
12:41:20 up 65 days, 22:35, 5 users, load average: 1.03, 0.50, 0.28 -----BEGIN PGP SIGNATURE----- Version: GnuPG v1.2.3 (GNU/Linux) iD8DBQE/2GTtPpa2GmDVhK0RAk4DAJ9BfpARqlnGJBBMTb3dfcyGExJ1EACfc4Wr LkvoJlv+XICHPes92vTwfAU= =irzb -----END PGP SIGNATURE----- Call for Implementations: DOM Level 3 Core and Load/Save We removed the optional conveinence interfaces since they caused too many problems for us to deal with in the time frame we had available to us, and we were quite sure that if we didn't remove them now, we would have to remove them later since not enough implementations would implement them. 
That's why. 
jst 
