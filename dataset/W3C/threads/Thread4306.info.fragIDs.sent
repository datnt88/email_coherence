I think there is a need for "human-readable" serialization, which does not necessarily have to be reversible. 
I agree that products will want to produce such output, but does it have to 
be standardized? 
If it's only for humans to read, and not for software to read, why do we need to specify its format? 
And if it's for humans to read, wouldn't one want to produce something 
richer than a string of ASCII characters? 
Michael Kay Consider 
exploratory entering query expressions to a processor, and getting a serialized result back. 
If I type: 1 to 5 I might expect: 1 2 3 4 5 or: 1 2 3 4 5 but I would not want or expect: res:atomic type="xs:integer" value="1"/ res:atomic type="xs:integer" value="2"/ res:atomic type="xs:integer" value="3"/ res:atomic type="xs:integer" value="4"/ res:atomic type="xs:integer" value="5"/ I might want type annotations: 1 : xs:integer 2 : xs:integer 3 : xs:integer 4 : xs:integer 5 : xs:integer or: (1, 2, 3, 4, 5) : xs:integer* but only if it is optional. 
Similarly, emitting an xs:string with quotes makes it easier to see what is going on and to read it back in again. 
However, emitting it without quotes allows the programming to construct arbitrary formatted output. 
For example: "The sum is: ", sum($vals), ".&amp;nl;" (Aside: a "new-line" predefined entity would be very useful.) There is also a need for an "interoperable" serialization, which might give the result using special elements as Michael Kay suggests. 
But that is a separate goal. 
The Lisp world has long distinguished "readable" output, where (for example) string and symbols are emitted with quotes, so the output is a valid "S-expression" that can be read back in again, vs "display" or "non-readable" output which is used for output meant to be read by a human, and if you want quotes you have to write them explicitly. 
--Per Bothner per@bothner.com 
http://per.bothner.com/ 
I think there is a need for "human-readable" serialization, which does not necessarily have to be reversible. 
Because someone might want to (say) generate a report or a file 
as a text (non-html) file, and it is useful to have a standard for this. 
E.g. given some numbers, I might want to produce a "report" like: 
The max is 99 and the min is 5. 
A user expect to be able to write: "The max is ",max($vals)," and the min is ",min($vals),"." 
or: concat("The max is ",max($vals)," and the min is ",min($vals),".") 
depending on what the standard specifies wrt to whitespace. 
But it is useful for the standard to specify a specific result so I know what output to expect for a given program. 
True most of the time. 
But sometimes one wants to be able to generate simple non-HTML output. 
I think this is a useful feature, and I think people will expect portable results. 
Perhaps the "text output model" sufficies for these applications - but unfortunately there appears to be no standard way to set serialization parameters in an XQuery program, like you can for XSLT. 
Also, it seems 
less intuitive to have to write: only to want the result /result to disappear. 
--Per Bothner per@bothner.com 
http://per.bothner.com/ 
I think there is a need for "human-readable" serialization, 
But you can do this (as you do in XSLT) by producing a single document node as the result of your query, and serializing it using the text output method. 
Your second example produced a string as the result of a query, and I think it's likely that most products would provide a way of serializing a string without us needing to write a spec for it. 
Michael Kay 
From an XQuery point of view, I agree with Per. 
There is also the question of closure for many systems. 
If the XML Data model producer recognizes a text node as input and is a normal XML fragment parser, I find it not acceptable to standardize the more complex requirement that your data model producer needs to be able to understand specialized markup. 
Best regards Michael 
From: public-qt-comments-request@w3.org [mailto:public-qt-comments- request@w3.org] 
On Behalf Of Per Bothner Sent: Wednesday, December 03, 2003 12:05 AM Subject: Re: [XQuery] SAG-XQ-005 Serializing Arbitrary Sequences 
I think there is a need for "human-readable" serialization, which does not necessarily have to be reversible. 
have 
this. 
something 
seems 
{min($vals)}. 
/result 
