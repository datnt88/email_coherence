(TOP (SQ (ADVP (RB hi)) (, ,) (MD can) (NP (NN anybody)) (VP (VB let) (S (NP (PRP me)) (VP (VB know) (, ,) (SBARQ (WHADVP (WRB how)) (SQ (AUX do) (NP (PRP i)) (VP (VB retrieve) (NP (NP (DT the) (NN value)) (PP (IN of) (NP (NP (DT the) (JJ xslt) (NX (NX (NN style) (NN sheet) (NN type)) (CC and) (NX (NN href)))) (, ,) (SBAR (WHNP (WDT which)) (S (VP (AUX is) (PP (IN along) (PP (IN with) (NP (NP (DT the) (JJ xml) (NN file)) (VP (VBG using) (NP (NN dom)))))))))))))))))) (. .)) )
(TOP (S (NP (EX there)) (VP (AUX is) (NP (NP (DT a) (NN createProsessingInstruction)) (PRN (-LRB- -LRB-) (S (S (-RRB- -RRB-) (VP (VBG returning) (NP (DT a) (NN processionInstuction) (NN referance)))) (, ,) (CC but) (S (NP (EX there)) (VP (AUX is) (NP (DT no) (NN getProcessingInstruction)))) (-LRB- -LRB-)) (-RRB- -RRB-)) (PP (IN in) (NP (DT the) (NNP Document) (NNP interface) (NN eg))) (: :) (. ?) (CD xml)))) )
(TOP (S (NP (NNP version=\)) (VP (`` ``) (VBZ 1.0\) ('' '')) (. ?)) )
(TOP (FRAG ('' '') (-RRB- -RRB-) (: ;) (. ?) (NP (NN xml-stylesheet))) )
(TOP (S (VP (VBG type=\) (NP (NP (`` ``) (JJ text/xsl\) ('' '') (NNS href=\)) (`` ``) (FW xslt1.xsl\) ('' ''))) (. ?)) )
(TOP (S ('' '') (-RRB- -RRB-) (ADVP (RB here)) (NP (PRP i)) (VP (AUX need) (S (VP (TO to) (VP (VB get) (NP (NP (DT the) (NN type) (CC and) (NN href)) (PP (IN for) (NP (DT the) (NN xslt)))))))) (. .)) )
(TOP (NP (NP (NNS Thanks)) (PP (IN in) (NP (JJ advance) (NNP Sridhar)))) )
(TOP (SINV (ADVP (RB Here)) (VP (AUX are)) (NP (NP (NP (CD two) (NNP Java) (NNS methods)) (SBAR (S (NP (PRP you)) (VP (MD can) (VP (VB add) (PP (TO to) (NP (PRP$ your) (NN code)))))))) (SBAR (WHNP (WDT that)) (S (VP (MD will) (VP (AUX do) (NP (PRP it))))))) (. .)) )
(TOP (S (NP (NNP *)) (VP (VBZ Gets) (NP (NP (DT the) (NN value)) (PP (IN of) (NP (DT a) (VBN given) (NN processing) (NN instruction))))) (. .)) )
(TOP (S (NP (NN *)) (VP (SYM @) (NP (JJ param) (NN document)) (S (NP (DT the) (NN Document)) (VP (TO to) (VP (AUX be) (VP (VBD searched) (NP (NP (CD *)) (X (X (SYM @) (X (FW param) (NN target) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (DT the) (NN processing) (NN instruction) (NN *)))) (SYM @)) (NP (NN return))) (NP (NP (DT the) (NN value)) (PP (IN of) (NP (DT the) (VBG processing) (NN instruction))))))))))) (. .)) )
(TOP (NP (NP (NP (JJ private) (JJ static) (NN String) (NN getProcessingInstructionValue)) (PRN (-LRB- -LRB-) (NP (NNP Document) (NN document)) (, ,) (NP (NNP String) (NN target)) (-RRB- -RRB-))) (PRN (-LRB- -LCB-) (S (NP (NNP NodeList) (NNS children) (SYM =)) (VP (VBZ document.getChildNodes) (-LRB- -LRB-))) (-RRB- -RRB-)) (: ;)) )
(TOP (S (NP (JJ int) (NN childCount)) (VP (SYM =) (NP (NN children.getLength)) (-LRB- -LRB-) (-RRB- -RRB-)) (: ;)) )
(TOP (S (SBAR (IN for) (FRAG (-LRB- -LRB-) (NP (NP (NN int)) (SBAR (S (S (NP (PRP i)) (VP (SYM =) (NP (CD 0)))) (: ;) (S (NP (PRP i)) (VP (VBP childCount)))))) (: ;) (NP (NN i++)) (-RRB- -RRB-))) (NP (-LRB- -LCB-) (NNP Node) (NN node)) (VP (SYM =) (NP (NP (NN children.item)) (PRN (-LRB- -LRB-) (NP (NN i)) (-RRB- -RRB-)))) (: ;)) )
(TOP (FRAG (IN if) (-LRB- -LRB-) (NP (JJ node) (JJ instanceof) (NNP ProcessingInstruction) (NN &amp)) (: ;) (NP (NP (NN &amp)) (: ;) (NP (NP (JJ node.getNodeName) (-LRB- -LRB-) (-RRB- -RRB-) (NNS .equals)) (PRN (-LRB- -LRB-) (NN target) (-RRB- -RRB-)))) (-RRB- -RRB-)) )
(TOP (S (-LRB- -LCB-) (S (NP (NN return)) (VP (VB node.getNodeValue) (-LRB- -LRB-) (-RRB- -RRB-))) (: ;) (S (VP (VB return) (NP (NN null)))) (: ;) (S (NP (NNP *)) (VP (VBZ Gets) (NP (NP (DT the) (NN value)) (PP (IN of) (NP (DT a) (VBN given) (NN processing) (NN instruction) (NN attribute)))))) (. .)) )
(TOP (S (NP (NN *)) (VP (SYM @) (NP (JJ param) (NN document)) (S (NP (DT the) (NN Document)) (VP (TO to) (VP (AUX be) (VP (VBD searched) (NP (CD *)) (FRAG (X (SYM @)) (NP (NN param) (NN target)) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (DT the) (NN processing) (NN instruction) (NN *)))) (X (SYM @)) (X (FW param) (NN attribute) (NP (NP (DT the) (NN name)) (PP (IN of) (NP (DT the) (NN attribute) (NN *)))) (SYM @)) (VP (VB return) (NP (NP (DT the) (NN value)) (PP (IN of) (NP (DT the) (NN processing) (NN instruction) (NN attribute))))))))))) (. .)) )
(TOP (S (NP (NP (JJ private) (JJ static) (NN String) (NN getProcessingInstructionValue)) (PRN (-LRB- -LRB-) (NP (NNP Document) (NN document)) (, ,) (NP (NNP String) (NN target)) (, ,) (NP (NNP String) (NN attribute)) (-RRB- -RRB-)) (PRN (-LRB- -LCB-) (FRAG (NP (NN String) (NN value)) (X (SYM =) (NP (NP (NN getProcessingInstructionValue)) (PRN (-LRB- -LRB-) (INTJ (NN document) (, ,) (NN target)) (-RRB- -RRB-))) (: ;) (PP (IN if) (NP (-LRB- -LRB-) (NN value)))) (. !) (X (SYM =)) (NP (NN null))) (-RRB- -RRB-)) (-LRB- -LCB-) (NP (NNP String) (NN searchString)) (X (SYM =))) (VP (VBP attribute) (NP (NP (NNP +) ('' '') (NN =\) ('' '')) ('' '') (: ;) (NP (NN int) (NN index)) (X (SYM =))) (NP (NP (NN value.indexOf)) (PRN (-LRB- -LRB-) (VBG searchString) (-RRB- -RRB-)))) (: ;)) )
(TOP (S (SBAR (IN if) (FRAG (-LRB- -LRB-) (NP (NN index)) (. !) (X (SYM =)) (NP (NN -1)) (-RRB- -RRB-))) (-LRB- -LCB-) (NP (NN value)) (VP (SYM =) (S (VP (VBG value.substring) (NP (-LRB- -LRB-) (NN index)))))) )
(TOP (S (S (NP (NNP +)) (VP (VBZ searchString.length))) (-LRB- -LRB-) (-RRB- -RRB-) (-RRB- -RRB-) (: ;)) )
(TOP (S (NP (NNP index)) (VP (SYM =) (NP (NP (NN value.indexOf)) (PRN (-LRB- -LRB-) (VP (POS ') ('' '')) ('' ') (-RRB- -RRB-)))) (: ;)) )
(TOP (NP (NP (NNP value) (SYM =) (VBG value.substring)) (PRN (-LRB- -LRB-) (CD 0) (, ,))) )
(TOP (NP (LST (NN index) (-RRB- -RRB-)) (: ;) (NP (JJ return) (NN value)) (: ;)) )
(TOP (S (NP (NNP node) (NN instanceof) (NNP ProcessingInstruction)) (VP (VP (AUX is) (ADJP (JJ dangerous)) (ADVP (RB here))) (CC and) (VP (VB make) (NP (NN expectation)) (PP (IN on) (NP (DT the) (JJ underlying) (NN DOM) (NN implementation))))) (. .)) )
(TOP (S (NP (NN Nothing)) (VP (VBZ prevents) (NP (DT a) (JJ DOM) (NN implementation)) (S (VP (TO to) (VP (VB implement) (NP (JJ several) (organization (NN DOM)) (NNS interfaces)) (PP (IN in) (NP (DT the) (JJ same) (NN class))))))) (. .)) )
(TOP (S (ADVP (RB Instead)) (, ,) (NP (PRP I)) (VP (MD would) (VP (VB suggest) (S (VP (VBG using) (SBAR (IN if) (S (PRN (-LRB- -LRB-) (FW node.getNodeType) (-LRB- -LRB-) (-RRB- -RRB-)) (VP (VBZ ==) (NP (NP (JJ Node.PROCESSING_INSTRUCTION_NODE) (NN &amp)) (: ;) (NP (NN &amp)))))))))) (: ;) (NP (NNP Philippe))) )
