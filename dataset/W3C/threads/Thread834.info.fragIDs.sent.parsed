(S1 (NP (NNP Hi) (, ,)))
(S1 (S (NP (PRP I)) (VP (AUX was) (VP (VBG searching) (NP (DT the) (JJ net)) (PP (IN for) (NP (NP (DT a) (NN solution)) (PP (IN for) (NP (NP (DT the) (NN problem)) (VP (VBN mentioned) (ADVP (RB above)) (, ,) (SQ (MD can) (NP (PRP you)) (VP (VB send) (NP (PRP me)) (NP (NP (DT the) (NN patch)) (SBAR (S (VP (TO to) (VP (VB fix) (NP (DT this) (NN problem)))))))))))))))) (. .)))
(S1 (NP (NNS Thanks) (NNP Joseph)))
(S1 (S (CC So) (S (NP (PRP you)) (VP (AUX have) (CC and) (VBP want))) (CC but) (S (NP (JJ Tidy)) (VP (VBZ gives))) (CC and) (S (NP (DT that)) (VP (AUX 's) (NP (DT a) (NN problem)))) (. ?)))
(S1 (S (S (NP (NP (NNS Thanks)) (PP (IN for) (NP (PRP$ your) (NN respond)))) (INTJ (UH Yes)) (INTJ (RB exactly)) (, ,) (S (NP (PRP I)) (VP (VBP get))) (CC but) (S (NP (PRP I)) (VP (VBP want) (PP (IN with) (NP (NP (DT no) (NN space) (CC or) (NN carriage) (NN return)) (PP (IN between) (NP (NP (DT the) (CD two) (JJ empty) (NNS tags)) (PP (IN By) (NP (DT the) (NN way)))))))))) (, ,) (S (NP (PRP I)) (ADVP (RB also)) (VP (VBP use) (ADJP (JJ tidy)) (PP (IN as) (NP (NP (DT an) (NN object)) (PP (IN in) (NP (PRP$ my) (NNP DELPHI) (NN project))))))) (, ,) (S (NP (DT the) (JJ tidy) (NN function)) (VP (AUX is) (VP (VBN called) (PP (IN within) (NP (PRP$ my) (NNP Delphi) (NN Application)))))) (. .)))
(S1 (NP (NNP Joseph)))
(S1 (S (CC So) (S (NP (PRP you)) (VP (AUX have) (CC and) (VBP want))) (CC but) (S (NP (JJ Tidy)) (VP (VBZ gives))) (CC and) (S (NP (DT that)) (VP (AUX 's) (NP (DT a) (NN problem)))) (. ?)))
