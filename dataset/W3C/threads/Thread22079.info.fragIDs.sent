Hi, The LS DOMWriter interface has a method writeNode which takes a DOMOutputStream as a parameter to serialize a node to. 
DOMOutputStream has a language specific binding which is an OutputStream in java. 
At the moment the stylesheet can't handle DOMOutputStream which is transformed as is. 
I also need a way to instantiate this object. 
The same counts for DOMInputStream, DOMReader Jeroen X-Hive Corporation Jeroen van Rotterdam, CEO e-mail: jeroen@x-hive.com 
For the events tests, I designed an instrumented EventHandler called an EventMonitor that was implemented by the testing framework and captured all raised events and allowed the test to make assertions about the number of bubbling events, the properties of the second captured event. 
Simple EventHandler's could have been implemented in DOM TS language, however adding the EventMonitor to the framework simplified the tests and kept DOM TS a simpler language. 
For the load/save tests, I always expected that we would need to add some similar test framework implemented classes. 
However, you are probably in a better position to enumerate the capabilities that you would want. 
To start, I think that you would want: 
1. A method to create a new byte array output stream 
2. A method to create a new input stream from a URL 
3. A method to create a new input stream from a string variable 4. The ability to create a new input stream from an output stream 
That much could be accomplished by tweaking the semantics of the existing var and assign elements. 
For example, Could you list other capabilities that you would want and any suggested syntax. 
in  a better position to enumerate the capabilities that you would want. 
Ok, browsing through the spec I believe that the following methods are required to write certain LS tests: 
- a method to create a new File OutputStream a.k.a. in java new FileOutputStream(String fileName) 
- a method to close a DOMOutputStream - a method to create a new File object a.k.a in java: new File(String filename) 
- a method to test the existence of a file 
- a method to test whether a substring appears in a file 
- a method to get the size of a file 
- a method to create a new FileReader from a File object 
- a method to create a new byte array output stream 
- a method to create a new input stream from a URL - the ability to create a new input stream from an output stream - a method to get a substring of DOMString 
- A method to create a new input stream from a string variable I guess we don't need that. 
DOMInputSource.stringData is meant for that one. 
Best regards, jeroen X-Hive Corporation Jeroen van Rotterdam, CEO e-mail: jeroen@x-hive.com 
Comments and/or possible constructs inline: 
There are a lot of issues involved with letting the tests write to the file system. 
If writing to the file system is needed, then the temporary filenames should be generated by the framework. 
However, even these could not be supported by browser based implementations. 
I'm pretty darn curious about what would be considered a DOMOutputStream on an ECMAScript implementation. 
You'd want to transparently use an existing browser stream implementation, but it might be good to have a fallback that any class implementing a writeByte(byte) method would also be recognized as a DOMOutputStream. 
On further thought, it appears that some minimal definition for an recognizable implementation of DOMOutputStream, DOMInputStream and DOMReader is necessary for the ECMAScript test harness to implement those interfaces to support the tests. 
See previous 
See previous 
Is this specific to files? 
Ditto. 
Would there be any need (hopefully not) for this to something other than a resource provided with the test? 
Do we want to provide a mechanism to mechanism to create a reader from a file? 
It would be difficult to implement for ECMAScript. 
It might be cleaner just to provide a mechanism to initialize a reader from a string. 
would need something like the writeByte(byte) fallback to implement this in ECMAScript. 
substringData var="substring" obj="string" offset="1" count="5" interface="DOMString"/ 
Actually, it would provide a mechanism to test DOMInputSource.setByteStream(). 
Should be functionally equivalent to: but would test a different code path 
There are a lot of issues involved with letting the tests write to the file system. 
If writing to the file system is needed, then the temporary filenames should be generated by the framework. 
However, even these could not be supported by browser based implementations. 
I'm pretty darn curious about what would be considered a DOMOutputStream on an ECMAScript implementation. 
Ok, so for the framework you suggest testing DOMWriter using pipes by creating an inputstream from an outputstream ? 
I guess I can live with that. 
We probably can skip this, see above. 
This is typically used to do weak tests on e.g. pretty print. 
Since pretty print is weakly defined you would probably fall back to test whether the output has a different size than the input after applying pretty-print. 
I know this isn't great but it's probably the best you can do. 
If we use strings and read from the outputstream I can do it with String.length(). 
No, DOMInputSource can have both a DOMInputStream as a DOMReader as an input. 
If we just use strings in tests we won't be able to test System Exceptions. 
It is currently still an open issue whether System Exceptions are passed on and how. 
If this will be done by a DOMException than it makes sense to build a test for it (something like parse a non existing file and find out whether a DOMException is thrown). 
Jeroen X-Hive Corporation Jeroen van Rotterdam, CEO e-mail: jeroen@x-hive.com 
I don't know if we can do much more than check that the same DOM implementation can read the stream back. 
Being able to get a count of the number of times a specific character appeared in a stream might be helpful. 
If you output 100 elements and the pretty printed stream has no linefeeds, you'd know it wasn't very pretty. 
I was trying to distinguish between reading files that were provided as part of the test package (like "staff.xml") 
versus arbitrary file system files. 
Populating a character reader from a file would be difficult from JavaScript. 
However, it should be possible to fill a stock reader implementation from a string and allow a test to provide a custom reader that throws an exception from both Java and JavaScript implementations of DOM. or version='1.0'? 
foo/ "/ 
