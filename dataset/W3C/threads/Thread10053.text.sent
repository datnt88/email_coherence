there's actually a simple way to make desirable non entailments if, for datatype property #bar we interpret as #foo #bar ( #bar "abc") that would not affect current RDF applications and would be no problem for generic RDF engines (and they would then make no entailments for that film title testcase that we all know) it would also allow nice datatype inferencing as e.g. #bar rdfs:range xsd:duration could make things sharper my main belief in literals denoting themselves is that that it is sound i.e. out of somthing that holds one can never derive something that doesn't hold, but it is indeed incomplete i.e. something that holds is not necessarily derivable although canonical lexical forms could make it less incomplete, to work in that way Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
PS I would really like to play the *ball* [Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, patrick.stickler@nokia.com] 
As Brian pointed out some time ago, this does not work with generic membership properties. 
E.g. both give us _:x rdf:li (rdf:li "10") Patrick are we really prepared to go that far in saying that rdf:li rdf:type rdfs:Datatype ? 
I would say no, that's not the case Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
[Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, patrick.stickler@nokia.com] 
Well. 
That's my point. 
Your interpretation seems to impose some closure rule whereby in the absence of an explicit datatype, the property is used as the datatype, and hence any property may be a datatype. 
And since membership properties which assert no actual datatype on their objects, such as rdf:li, would introduce ambiguity, I don't see that your mechanism would work. 
Is it really that much different to just map to #foo #bar (_:a "10") #str rdf:li (_:b "10") #int rdf:li (_:c "10") where either 1. 
The interpretation of each literal is left up to the application. 
or 2. There is additional knowledge in the graph that clarifies the interpretation of those literals. 
E.g. ?g rdf:type rdf:Bag . 
?b rdf:li (?d ?l) . 
?l rdf:type rdf:Literal . 
?b ex:collectionType xsd:integer . 
log:implies ?d 
ex:equalTo xsd:integer . 
etc. Patrick 
