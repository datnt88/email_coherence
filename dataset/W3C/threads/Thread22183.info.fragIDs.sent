(Dimitris, Mary and I had a phone call on Friday to summarize the status of the DOM Test Suites.) The main concern was the harness of the future DOM Conformance Test Suites. 
As I pointed out in this past, it is not possible to rely the test suites and the harness on the GNU license. 
The test suites were bound to the W3C license, but the harness for JUnit is under the GNU license unfortunately (GPL license, not LGPL). 
GPL and W3C license are not compatible and we cannot recommend people/companies to use the *Unit frameworks only. 
We can certainly point people to the *Unit of course but the Java and ECMAScript DOM Conformance Test Suites will need to use a different one. 
After a few discussion, we agreed to reuse what was possible from the existing harness and develop the missing bits by reusing the NIST harness. 
We'll point people to the two harnesses (new one and *Unit) and people will have a choice like that. 
Mary is going to take care of the ECMAScript harness. 
I will do the Java one (Mary needs to send him the appropriate bits to start with). 
We need to make sure that the same tests are run and in the "same way" in the two harnesses, thus making no difference as far as choice of harness is concerned. 
We are still missing the DOM Level 1 HTML Test Suite. 
Given that DOM Level 2 HTML is not backward compatible, a DOM Level 2 HTML test suite would be more appropriate. 
Mary will see what can be done in NIST and will ask for help in the www-dom-ts mailing list to convert the existing NIST DOM HTML test suite. 
Dimitris will help to unify the harnesses and needs to take of the documentation. 
For the documentation and the harnesses, we'll try do be ready before the next DOM f2f meeting in the middle of November. 
A demo of the test suites against some DOM implemetations is scheduled for the f2f. 
For DOM Level 2, we now have the Core test suite. 
The Events module should be the next target (no schedule or allocated ressources yet), in order to get ready for the DOM Level 3 Events module. 
We should advertize the DOM Level 1 test suite as soon as it is ready, in order to get people's attention on the work and try to get ressources to work on DOM Level 2 suites. 
Philippe 
The test suite jar's have no dependency on JUnit and can be run on any test framework for which the adapter classes have been created. 
There are currently adapters for both JUnit or Apache Jakarta Avalon Testlet framework. 
Is the Apache license compatible with the W3C Software License? 
Is there another Java test framework that would be compatible with the W3C Software License? 
We should be able to have one set of test .js 
files that will run under both JSUnit and the custom harness. 
I'm not familiar with the internals of the NIST harness, so I don't know how much can be reused. 
I know that Mozilla also had a test harness used in some of their publically downloadable tests. 
Good, it seems that we all agree on that we want to give implementors the option to run the same DOM TS in different harnesses, depending on their needs. 
In order to intensiffy this last part of producing the suite, I would again like to ask everyone to do the following, which would facilitate bringing it all together: 1. Send me a short description of the partculars you've been working on (except for the tests themselves and the transforms). 
This could be building, harness, validating, and so forth. 
2. Check through your own work before we start the review period that was postponed two weeks ago. 
Send me any documentation, notes, or pointers so that I can start producing the final documentation without having to dig through the etnire mailing list archive. 
What we want, and obviously can, is to produce one set of code per binding and then llet implementors use a harness that suits their needs. 
Since we want to be able to let people test theis browser using a page on the DOM TS hierarchy, we are thinking of changing the old NIST harness to do this. 
This harness will use the same code that any packaged DOM TS will, so the only difference is that in this case people run the TS online, whereas they download the DOM TS in the latter case. 
As I have been asked to do a demo for the DOM WG during the 13-14 November DOM WG F2F, I'll primarily be trying to get things up and running on my machine (I've changed to Mac OS X, so if any of you have experience either on this platform or Linux, please advise). 
So let's start three threads: 1. Ecma harness (here I believe the people that will work are Mary, Dimitris and if I remember correctly Jason) 2. Java (all, Philippe) 3. Documentation (Dimitris, with the contribution from all, especially Fred) Packaging is straightforward, as is building. 
This still needs to be documented, though. 
Best, /Dimitris 
In building the ECMA harness, I have started with the original harness that was provided from the NIST web site: This harness uses whatever DOM implementation is running on the client side, attempts to run available tests, and reports the results. 
Each of the tests expect to have access to common xml load routines and common assertion routines. 
I expect that we can use the same code that is currently being used by the jsunit harness. 
The following needs to be done: 1) Integrate current load/assertion routines -- Mary 2) Validate load routines -- IE (Jason) -- Mozilla (Do we have a Netscape volunteer?) 3) Validate DOMException codes -- IE (Jason) -- Mozilla ? 
4) Determine high level interface -- all -- Do we want to run all tests, or be able to discriminately pick appropriate tests? 
5) Determine reporting mechanism -- simply dump returns from tests? 
-- color-code results? 
-- display expected vs actual? 
-- possibly modify code to accomodate what we want to display. 
6) Access to other testing resources ? 
-- test assertions, subjects -- view source code -- view portion of spec being tested. 
Anything else? 
--Mary 
I'll try to respond more fully tonight. 
Probably the most time critical thing that I can do is prepare an issues list for the DOM Level 1 Core tests to focus the review process on those tests that are not unanimously passed by all implementations and generally accepted. 
The DOM Level 2 tests now compile and run, but a significant amount of investigation of test failures needs to occur. 
I need to check the test suite out with the latest Mozilla nightly drops to determine if the problems that caused certain tests to lock up have been resolved. 
I have been the build process lock up with certain combinations of Ant, Xerces or Crimson and Xalan, I need to identify a safe combination and file bugs for the unsafe combinations. 
P.s. I've updated build.xml 
to point to the 25 Oct 2001 DOM Level 2 HTML working draft. 
comments inlined 
