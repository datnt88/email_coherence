There seems to be a bit of confusion about TreeWalker. 
Let me weigh in with a few observations: Neither TreeWalker nor NodeIterator are ever invalidated, in the current design. 
TreeWalker is intended to have "pure current node" semantics. 
That is, a TreeWalker really does have a particular current node as part of its state. 
If the current node is moved, the TreeWalker is relocated with it. 
That's true even if the node's new location is outside the bounds of the TreeWalker's original root node. 
The TreeWalker has no memory of past navigation; each step is taken in terms of the current state of the tree. 
If you move the current node into a new parent, then the next getParent call to the tree walker will return its new parent, _not_ the parent the node had when you walked into it. 
(Unless, of course, the new parent is rejected by the filter or the whatToShow flags, in which case the TreeWalker will seek upward until it finds an ancestor which is not filtered out and so can be returned as the virtual parent, or it hits the root and/or the Document node and returns null to indicate that no parent was found.) Hence TreeWalker shouldn't have to track modifications to the DOM, in most implementations. 
As long as it knows its current node, it should be able to calculate everything else from that. 
The NodeIterator _does_ have to stay aware of alterations, primarily those which involve removing the last-reported node from the subtree of the Iterator's root node. 
We kept that requirement as lightweight as we could, consonant with providing a reasonable "robust iterator" behavior (as defined in Gamma et al). 
It should be no harder, and hopefully easier, to implement NodeIterator's updates in response to document changes than the similar notification used to implement "liveness" in NodeLists. 
Joe Kesselman / IBM Research to What is the correct behavior when the current node is deleted? 
Thanks, Tim Bryant Bryant, Tim scripsit: Nodes can't be *deleted* in the technical DOM sense, only removed from the document tree, either singly or as a result of removing some ancestor. 
In either case, TreeWalker just walks the fragment, either finding itself unable to move, or else able to move but not to reach the Document node. 
John Cowan cowan@ccil.org 
I am a member of a civilization. 
--David Brin The TreeWalker follows its current node. 
Asking for the parent returns its parent (or other ancestor, if the parent is filtered out, or null if none can be found) at the time you ask the question. 
Our shorthand term for this is "pure current-node semantics" -- all operations are performed in terms of the current state of the current node, and the current node doesn't change until you take an action that causes the TreeWalker to select another current node. 
It's almost like having a reference directly to that node, but with the TreeWalker's navigation methods. 
(John already said this, but: There's no such thing as "deletion" in the DOM. 
A node can be removed from its context, but continues to exist until/unless implementation-specific actions are taken to destroy it... and those actions are ouside the DOM's scope. 
Use the term "removal" to avoid confusion. 
Yes, early drafts of the Traversal chapter made the same mistake!) Joe Kesselman / IBM Research 
