I would propose that we create three rough competing proposals for a DOM XPath: 1) Ultra Minimal (e.g. Microsoft/Oracle selectNodes as they exist today). 
2) Minimal but with separate interface+namespace context support. 
3) Complete as makes sense (e.g. full context initialization, variable support, maybe matching, maybe compiled queries, etc.) Then we can vote on which one we want to converge on. 
If, as is probable, we decide on 1) or 2), we can use 3) as a potential long range plan, and try to see if there can be a continuum from at 1) or 2) to 3). 
I would be glad to work with someone on either 2) or 3) (preferably 3). 
-scott OK, how about an informal poll. 
a) Which of these are *necessary* for the first round of a DOM-compatible XPath API? b) Which are *sufficient* (i.e., we can stop when we get there)? 
I personally believe that 1 is necessary (backwards compatibility, make the simple cases simple) and 2 is sufficient. 
3 would be nice for the next iteration. 
I could live with any consensus, however. 
(i.e., be nice for the next iteration. 
I could live with any consensus, however. 
I don't think 1 can be done properly without addressing namespace context support (see my last post). 1 &amp; 2 are really a single option in my eyes. 
Hence, I think 1 + ns context is all that's absolutely necessary for the first iteration. 
And yes, 3 would be nice for the next iteration. 
-aaron 
