Hi I've frozen a snapshot of the RDF Schema spec WD that I'm working on: I'll use a new URL for any future versions of the text. 
Dan Dan Brickley danbri@w3.org 
: OK, this (and Dan C's comments on the model theory) prompts a larger question I have for everyone: how separate/separable are RDF and RDFS? 
Should we regard them as essentially one integrated language, or as two languages, one an extension of the other? 
Or is RDFS just one particular RDF vocabulary? 
More particularly, why are rdf:Property and rdf:type defined in the RDFS documentation? 
And why do Bag, Seq and Alt have an rdf: prefix but Container has an rdfs: prefix? 
Why is Literal prefixed with rdfs: but Statement with rdf: ? 
Pat Hayes (650)859 6569 w (650)494 3973 h (until September) phayes@ai.uwf.edu 
This is where the historians come in... ;-) The answer is partly historical accident, partly layered design. 
In 1997 we had two RDF groups. 
The first, Model and Syntax, gave us the basic triples / graph model, plus a syntax that used the XML and XML Namespaces specs (which were themselves still works in progress, taking input from RDF and other efforts). 
The second RDF WG began slightly later; the Schema WGs job was to build on the bare bones provided in M+S, providing additional machinery to support the specification/description/definition of vocabularies for use in RDF applications. 
RDFS, in turn, tried to be pretty minimalist, leaving fancier stuff to future work (aka "WebOnt" in recent terminology). 
The groups did their best to partition the work, but didn't really stand back collectively at any point any look at the complete RDFS + M+S design and consider a repartitioning. 
The M+S spec admits that resources fall into types (classes), since it needed this when describing various of the features in the core spec. 
It admits that properties are resources, named with URIs and hence describable in RDF. 
But it doesn't go into much detail about relations between classes and other classes; or properties and other properties. 
Or constraints relating classes and properties. 
RDFS does that, and not a lot else. 
Some of the earlier RDFS designs were a bit more complex than the current spec. 
Given the bare bones design we ended up with, some of us have wondered whether it might be folded into "the model spec". 
It is indeed odd to have rdf:type but rdfs:Class; rdf:Property but rdfs:domain. 
Uglier still, IMHO, is the M+S practice of having purely XML-syntactic constructs (rdf:resource, rdf:about) in the same namespace as the basic graph model concepts. 
My inclination for the next batch of Working Drafts is to punt on the problem, and stick with current practice, flagging this up as something the WG are considering. 
Dan (from web terminal in boston airport, again) OK, thanks. 
I'm kind of relieved to hear that there isn't some deep reason behind all this that I was missing. 
I agree about punting on it for now, just wanted to get my head clear and make sure I wasnt missing something important. 
Hope you had a good flight. 
Pat (650)859 6569 w (650)494 3973 h (until September) phayes@ai.uwf.edu 
