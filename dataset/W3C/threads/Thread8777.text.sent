Hi, 4.4.3 
The RetrievalMethod Element from the latest spec has a few outstanding issues: 1) sigantures misspelling ;} 2) specification of Type URIs for raw X.509 certificate (and others) 3) the result of processing the URI will now either be an octet stream or a node set. 
In particular, the URI "#foo" results in a node set (4.3.3.3). 
We need to clarify how this is utilized for the various referenced data. 
merlin The consensus on the call was that adding a RetrievalMethod Type for a binary X.509 certificate was a good idea. 
Right, it is describe in 4.4 1. limit it to absolute URIs? 
(If the keys are in the same document, why not use KeyInfo?) For example, to have a single occurence of a large X509Data and to then refer to it from multiple signatures. 
Ok. 2. Permit fragment identifiers and require the same processing model as Reference section? 
I believe this was the intent and I'll clarify that for the time being: RetrievalMethod uses the same syntax and dereferencing behaviour as Reference's URI (section 4.3.3.1) except that there is no DigestMethod or DigestValue child elements and presence of the URI is mandatory; Type is optional identifier for the type of data to be retrieved. 
Hrmm... I think I prefer to err on the side of making the RetrievalMethod author include a specific c14n in the transform. 
Ok, new text: 4.4 The KeyInfo Element .... 
The following list summarizes the KeyInfo types defined by this specification; these can be used within the RetrievalMethod Type attribute to describe the remote KeyInfo structure as represented as an octect stream. 
4.4.3 
The RetrievalMethod Element .... RetrievalMethod uses the same syntax and dereferencing behavior as Reference's URI (section 4.3.3.1) and The Reference Processing Model (section 4.3.3.2) except that there is no DigestMethod or DigestValue child elements and presence of the URI is mandatory. 
Note, if the result of dereferencing and transforming the specified URI is a node set, then it may need to be to be canonicalized.All of the KeyInfo types defined by this specification (section 4.4) require octets, consequently the Signature application is expected to attempt to canonicalize the nodeset via the The Reference Processing Model (section 4.3.3.2) Joseph Reagle Jr. W3C Policy Analyst mailto:reagle@w3.org 
IETF/W3C XML-Signature Co-Chair http://www.w3.org/People/Reagle/ r/reagle@w3.org/2000.10.10/14:39:42 
I guess it would help if I could read ;} If this language is open to my processor NOT performing the c14n, I'm fine with it. 
Specifically, I would typically expect to see: In this case, I can observe that this is a reference to a (comment-free) element with its children, and I can observe that there are no transforms, so I can efficiently parse the key info straight from the node set without performing a c14n/parse step. 
The important thing is that the effect is the same as if it were canonicalized and parsed out of the resulting octet stream which is what I was trying to say. 
Merlin 
