Hi All Anyone know whether standard Access Keys have yet emerged? 
I am tempted to go with UK government standards in the meantime - anyone got better ideas? 
Interesting review of existing access key 'standards' emerging here... Anything more recent? 
Thanks Carl Carl, There are no standard Access Keys. 
Though I would not follow the accesskeys of a certain country goverment, when I want my web site to have a global access! 
On the other hand, using letters for Access Keys could make your life difficult, while letter Access Keys are limited. 
Why? 
Have a look in my forum here: Kind regards, John got Carl, This has been hashed through many times on this and other lists. 
We suggest that attempting to implement AccessKeys is actually potentially harmful and really not that useful. 
See our article: Hope this helps, or at least causes you to really think through your idea... JF John Foliot foliot@wats.ca 
Web Accessibility Specialist / Co-founder of WATS.ca Web Accessibility Testing and Services Can anyone provide me some suggestions for writing an article on Accessibility related to Project Management practices? 
Amy Schneider, Certified Senior Project Manager, PMP Integrated Supply Chain Operations &amp; Strategy IBM 1133 Westchester Avenue-2N-514F White Plains, NY 10604 Mail Drop #243 Thanks for the input on this. 
I'm afraid I find it a bit outrageous that there is not a standard quickly emerging here. 
On most Windows Apps, and on the Mac too, there are well defined standards for the basic shortcuts that are pretty much always dependable (unless you use EMACS) ... F1 Ctrl+S Ctrl+N Ctrl+C Ctrl+V Ctrl+X Until we get to the stage where access keys for websites are this consistent, surely the access keys themselves are not going to help much. 
If a disabled user knows that 'Alt+S' will always be the key to skip navigation on a site that has access keys, this is effective. 
If they need to learn what the access keys are for each website - it would seem to be more in the way of accessibility than aiding it. 
I've adopted the UK government guidelines because they seem to be bedding in as a kind of standard (although the analysis here other standards). 
The UK government publishing folks are generally pretty sensitive to multi-cultural needs of our society so I am not worried about country specificness here. 
I don't personally think much of using numbers for access keys because they are not as meaningful as letters. 
It seems easier to me to remember Alt+S is for 'skip'. 
However, this is an English only view of the world, so numbers would seem to be more univeral. 
www.aquariusclub.net 
I'm not building a website for anyone with any particular needs. 
I want my design, and others, to be universal. 
So, I'm making my access keys visible on screen and accepting that it makes the design look slightly strange. 
Perhaps this is good strange - like buildings that once had grand steps to the door and now have a ramp. 
It might not look pretty but why exclude people when you don't really need to. 
I feel quite strongly about this - is there a formal way to elevate such issues to the WAI formerly? 
This would seem to need sorting out internationally. 
Carl There is a standard here, which is the rel attribute, as applied to the link or a element - it means that a user can expect their browser to provide a consistent way of navigating important links that is part of the browser. 
Accesskey provides a mechanism for extending that in a particular way - identifying the controls used on a particular page that are frequent navigation stops (login, current status, top of the page, find the nearest physical contact, cheapest option are all candidates in work I am currently doing, which is quite different to the ones I wanted to have a year ago). 
In situations where people are using different keyboards, and making millions of websites, it seems hard to pick the 40 or so most common keys and functions. 
When I use the arabic keyboard I don't have the unicode characters "0123456789" readily available, nor any of the letters "abcdefghijklmnopqrstuvwxyz", so anything that relies on those to make life easier doesn't work. 
(But I have control characters available, which means I can use system-standard shortcuts). 
If there is a convention compatible with what you need then using it is better than creating something different. 
But there are limits to what can be achieved... cheers Chaals On Thursday, Aug 28, 2003, at 21:00 Australia/Sydney, Charles McCathieNevile Fundaci?n Sidar charles@sidar.org http://www.sidar.org 
Carl, As Chaals points out, there *is* a standard already in place for providing a basic "uber-navigation" to any site, the relative link (http://www.w3.org/TR/REC-html40/types.html#type-links); "User agents, search engines, etc. may interpret these link types in a variety of ways. 
For example, user agents may provide access to linked documents through a navigation bar." 
The fact that not all browsers properly support the standard is too bad, but currently Opera 7 has some implementation, as does the latest builds from Mozilla (curiously it seems absent from Netscape 7), and the oft maligned but rock-steady Lynx browser, (to name 3 that I am aware of). 
We are currently employing this at our web site (www.wats.ca) 
But consider for a moment the *primary* (not exclusive) reason for providing keyboard based navigation through a web site. 
When queried, most developers will say that it assists visually impaired users, which is certainly true. 
Oh ya, others may benefit from it (mobile devices, mobility impaired users, etc.), but this seems to be the major reason for implementation. 
Thing is, for how many years now, most if not all web developers have essentially ignored the Accesskey attribute... heck there are still those out there ignoring CSS. 
And so, the developers of the screen reading software took it upon themselves to implement functionality above and beyond what the web page developers were implementing. 
Thus tools like JAWS, HomePageReader and WindowEyes have pre-assigned keyboard shortcuts which allow the user to achieve much if not all of the functionality that you are now seeking to implement with Accesskeys. 
But, (and this is the big but), because it is software based, the end user has a greater assurance that it will work consistently across all sites, not just those "crafted" with the developers idea of what the navigational scheme should be. 
For example, in JAWS (which most will concede is the "Coca-Cola" of screen readers), users can bring up lists of Headers in a page (INSERT + F6, *and* it implements a system where-by the Headers act essentially as named anchors, allowing inter-page navigation), a list of links in a page (INSERT + F7, ordered either alphabetically or chronologically), and so on. 
(A list of keyboard shortcuts associated to JAWS may be found at WindowEyes and Lynx keystrokes charts). 
Because of this, structurally valid (i.e. Semantically valid) code allows the users of these tools to seek out and access the information they are coming to your page for, with no extra effort or "magic" on your end. 
Don't get me wrong, the *idea* of Accesskeys, when added to the HTML spec, is/was a good one. 
However, due to it's lack of universal implementation, and the fact that there are differing keyboards out there (as Chaals points out), conflicting keystroke combinations which may or may not be over-ridden by other technologies/software, alternative means of achieving the desired result, etc., etc.,.... well, it reaches a point that attempting to add Accesskeys may in fact be detrimental to the end result. 
As you have pointed out: Unfortunately, methinks we have come and gone beyond this point. 
The jury is already out, and Accesskeys seems to be left by the wayside. 
I would argue that the Accessibility community should push instead for wider and more standard implementation of the other existing standard, the relative link, at both the development end (our jobs) and at the implementation end (the web browser's job). 
If the usage of the established link rel elements became more accepted and used, those adaptive technologies which take advantage of keystroke combinations could internally "standardize" their usage - remember, "User agents, search engines, etc. may interpret these link types in a variety of ways.". 
IMHO, it's still not too late to resurrect the link rel attribute, and lists and groups such as this should push for it instead of trying to put the Accesskey genie back into the bottle. 
JF John Foliot foliot@wats.ca 
Web Accessibility Specialist / Co-founder of WATS.ca Web Accessibility Testing and Services In which case I think people are doing the right thing for the wrong reason. 
I believe the number of people who have difficulties using a mouse is predominantly people other than those who are visually impaired. 
Accesskey is an important functionality for people who have difficulties with providing input. 
Lots of them aren't people with visual disability. 
It also provides a functionality to authors that the rel attribute doesn't give them. 
Both of these things are useful - it's worth recognising them both, and what they do... cheers Chaals On Friday, Aug 29, 2003, at 23:44 Australia/Sydney, John Foliot - Charles McCathieNevile Fundaci?n Sidar charles@sidar.org http://www.sidar.org 
Hang on a second... 
I specifically said "...the *primary* (not exclusive) reason for providing keyboard based navigation..." I concede the fact that others will also benefit from the concept of Accesskeys - in fact I always argue that universal accessibility is MORE than just serving the blind/visually impaired. 
The issue is more to do with the fact that every webmaster and his cousin has a different idea of what "intuitive" Accesskeys should be. 
Some use numbers, others letters, another a combination of the two. 
Couple this with the fact that the majority of viable keystroke combinations have already been usurped by other technologies and it's just too late. 
With millions of web sites out there (the majority without any Accesskeys at all) I think the train has already left the station. 
So my real point was - abandon Accesskeys. 
Look to another mechanism to provide the same basic functionality that Accesskeys delivers without the attendant mess and potential problems. 
The relative link scheme is already standardized, in that the following: Start, Next, Prev, Contents, Index, Glossary, Copyright, Chapter, Section, Subsection, Appendix, Help, Bookmark - have all been previously established. 
If developers (and perhaps WCAG v2?) adhered to these *existing* standards (nay - pushed for their better implementation/adoption - Jeffery Zeldman, do you read this list?), then various technologies (adaptive or otherwise) would be able to "map" themselves to those elements. 
It allows the user/software to standardize keystroke combinations rather than you, me and my great uncle Fred, all building web sites using different concepts of "intuitive" keystrokes, and/or alternative keyboards or operating systems. 
Consider the following: Currently, the US Section 508 requires a "skip nav" be place at the literal top of each web document. 
This is because, from a linear perspective, most web pages have their principle and often secondary navigation ahead of the actual content of the page. 
Thus, providing a mechanism to "skip over" these links makes sense from a usability/accessibility standpoint. 
However, with proper use of CSS, there really is no real reason to not place your navigation at the "end" of your linear document, but style the div to "appear" at the top or left side (as taste and design dictates). 
From the usability/accessibility perspective, once a user has "explored" the navigation scheme they really don't need it again until they want to move on; therefore serving up the "content" first makes better sense. 
The Link Rel scheme allows us to use: link rel="Contents" title="Site Navigation" href="#nav" / " (Contents "Refers to a document serving as a table of contents. 
Some user agents also support the synonym ToC (from "Table of Contents")" - Now if everybody used this element consistently ( link rel="contents"... ) how difficult would it be to start to map user agents to that unique element? 
Mapping a standardized stroke to this then would instantly put the navigational block ( div ?) into the "hands" of the end user. 
If his software is set up so that Ctrl+G *always* delivered him to the navigation, don't you think that this would be more useful. 
No need for "skip nav", no need for "skip to nav", just a mapped keystroke in useragent of choice . 
Sometimes things are just too broken to fix. 
I continue to maintain that Accesskeys are too broken. 
JF John Foliot foliot@wats.ca 
Web Accessibility Specialist / Co-founder of WATS.ca Web Accessibility Testing and Services From: WebSavvy [mailto:web.savvy@utoronto.ca] 
Sent: Friday, August 29, 2003 1:50 PM Subject: Re: Standard access keys? 
Chaals said: From a curbcut perspective, a well thought out set of accesskeys can make navigation through complex information more efficient than it would be if a mouse were used alone, appealing to expert keyboard users and a broader population without disabilities. 
greg OK, so we seem to disagree on a lot of things. 
I don't think blind users are the primary reason for requiring keyboard navigation, either in terms of need (there are plenty of people with disabilities that stop them using the mouse for all practical purposes, and blind people occasionally *do* use mice). 
Accessibility that is *only* for people with visual impairment is a pretty limited view, and certainly not what W3C promotes. 
Accesskey provides a flexible, adaptable mechanism that allows for every webmaster and their cousin to develop a new kind of page or service on the web and assign a quick mnemonic way of using it to help expert keyboard users, people who have to use the keyboard, etc. 
When combined with a visual rendering to explain what the keys are (like iCab does) it is an extremely powerful aid. 
When a list of available accesskeys is provided (as Opera does) the same is true, and it is more likely to help people with visual impairment. 
It is only when browsers provide patchy access to the keys that there is a problem. 
On Windows both Opera and Explorer reserve the alt-F key for the file menu, following the Windows platform standards. 
But one browser is intelligent enough to recognise that there needs to be a way of activating an accesskey, and that alt-F isn't the only possible activation for something where the mnemonic is 'F'. 
(iCab gets around this by making the entire keyboard available - something that Opera can't do. 
And to be fai to IE, they recognised before most others that accesskey is valuable, and implemented it 3 ways in 3 versions before settling on their idea of optimal). 
In some browsers it still has a shaky implementation. 
But it does work, does things that rel can't do, and is therefore valuable. 
(rel is for standard links, accesskey is for things that are standard to a page or site but not really standard or standardisable across the Web). 
On the other hand I am completely in agreement about the fact that a "skip nav" link is a wierd hack (like d-link) that there are sensible ways to render obsolete using existing technology and new practice. 
cheers chaals On Saturday, Aug 30, 2003, at 05:09 Australia/Sydney, John Foliot - link rel="Contents" title="Site Navigation" href="#nav" / " (Contents Charles McCathieNevile Fundaci?n Sidar charles@sidar.org http://www.sidar.org 
