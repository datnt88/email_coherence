In the DOM spec, many attributes are allowed to have a special value 'null', in addition to their normal values. 
This is an extension to normal OMG IDL, where values normally cannot be null. 
Many programming languages cannot properly represent readonly attribute long foo; // may be null An object possessing the attribute foo typically can have only integral numbers as values; the additional null value is not supported eg. in C, C++, or Java. 
It *is* supported in languages where numbers are objects (e.g. Python). 
The only exception in CORBA are object references: Attributes of a reference type may be null. 
Specifically, strings, or sequences, cannot be null. 
CORBA 2.3 adds the valuetype construct, which allows to wrap an object around any value (called valuebox); this gives a null value to any type. 
A string that may be null can be defined as valuetype DOMString sequence unsigned short ; In this type, the empty sequence (with zero elements) is different from the null sequence. 
I'd recommend that the DOM is carefully reviewed with that respect, and as many occurences of null values are eliminated, possibly suggesting use of empty strings instead. 
For the remaining places, you may find that they are null objects, which would be fine. 
Otherwise, the DOM should explicitly state the intent behind null values, and leaving it up to the target language to deal with it. 
Alternatively, value boxes may be used to indicate that a specific type includes null. 
If null values are allowed for string attributes, it should be stated explicitly in which cases empty strings and in which cases null strings are acceptable. 
Regards, Martin 
I believe the only places where the DOM uses null values are when an attribute is expected to be an object, so it should always be possible for each of the DOM's language bindings to provide a suitable "null object". 
And I believe we do provide an indication of how nulls and empty strings are interpreted; in general, they are NOT considered interchangable. 
If you can cite specific places where those practices have been violated, we should definitely take another look at them. 
Otherwise, I think this is implementable as it stands. 
The "abstract" IDL shown in the body of the DOM spec is not guaranteed to be fully compliant OMG IDL. 
We know there are some keyword clashes, for example. 
The OMG seems to be aware of this and has not complained; instead, their response has been to try to develop a separate IDL binding for the DOM, just as there are bindings for other languages. 
I believe that binding does attempt to take advantage of valuetypes. 
Joe Kesselman / IBM Research 
Hi Martin, 
Do you mean that something like this from the Node interface: attribute DOMString nodeValue; // may be null is a problem? 
Kim. 
Sr. Software Developer, SoftQuad Software Inc., http://www.softquad.com/ 
Exactly. 
In CORBA, a sequence unsigned short may not be null. 
It is, mathematically speaking, a union of - the empty sequence - Z (unsigned short) - Z x Z - Z x Z x Z null is not a possible value of a sequence. 
In the specific example, is there a need to distinguish between the empty string as a nodeValue, and a null nodeValue? 
Otherwise, saying 'may be empty' sounds better. 
Regards, Martin 
I'm not sure I'm following your question. 
Node.nodeValue may be either an empty string or null, depending on the node in question. 
For example, Element and Document nodes have no nodeValue, and return null. 
Text nodes may be empty, and hence may return an empty string. 
Similarly, a null Namespace URI is significantly different from a blank Namespace URI -- the latter is namespace-ill-formed, the former is just a node which has not been assigned to a namespace. 
If the language/binding conventions that you're working with don't intrinsically support null, it's the responsibility of whoever designs that set of bindings to come up with an equivalent. 
Whether that's a specific string value (presumably one that would otherwise be illlegal in XML), or a specific string object (if your system lets you compare objects for identity and treats strings as objects) seems to be their choice. 
I don't know a great deal about CORBA, but if sequence unsigned short doesn't support null, maybe it simply isn't the best datatype to directly bind as DOMString. 
Joe Kesselman / IBM Research 
Following your comment, the definition of DOMString in DOM Level 2 (and not in DOM Level 1) is now: valuetype DOMString sequence unsigned short ; The mapping to Java and ECMAScript didn't change. 
Thank you for your report, Philippe 
