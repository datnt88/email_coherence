At the level of RDF concrete syntax, using namespace prefixes (as in QNames) might be OK, but I think it would be problematic in an RDF graph where the concept of scoping is, at best, very weak. 
In this respect, the decision to use (just) full URIs as identifiers seems rather sound. 
Only superficially compelling. 
The only syntax that matters here is RDF/XML - we could do the qname to URI mapping bwteen RDF/XML and the graph. 
I don't think there are any killers here. 
In particularly I disagree with Patrick when he raises non-XSD types - simply out of scope as far as I am concerned. 
Jeremy 
snip 
I guess I don't understand this "out of scope" comment. 
You may not care about referring to non-XSD types (I do), but considering them was certainly "in scope" as far as making the "rdf:datatype" decision was concerned. 
If you'd like to revisit the "what datatypes we're prepared 
to reference" question, I suppose we can do that [Brian screams "NO" and 
pounds his head against the wall], but it ought not to be considered just a matter of syntax. 
Considering that all we're doing is indicating the name of the type the literal is supposed to be associated with, what difference does it really make? 
--Frank Frank Manola The MITRE Corporation 202 Burlington Road, MS A345 Bedford, MA 01730-1420 
Summary: 'out of scope' too strong - but I would prioritize XSD. 
Summary2: I support xsi:type Jeremy: 
Frank: 
No, you're right I wasn't trying to revisit any decisions here; it's more which is the tail and which is the dog. 
I believe that Patrick already has implementations that use non-XSD types. 
I certainly don't want to (maliciously) make those not compliant with RDF; but they are 'non-standard' in the sense that the overall datatype quadruple is one of Patrick's creation (not a standard's doc) using methods that do not appear in a standard's doc. 
I think the central usage that should motivate the main thrust of our design decisions should be a standard one, and the only standard we have considered (in any depth) is xsd. 
If we don't like the datatypes on offer there we should be working with the XML schema group to improve them. 
XSD provides a standard collection of built-in types and a standard way of creating user-derived types. 
It isn't perfect; and won't do everything. 
Hence providing a mechanism that permits Patrick's non XSD types seems OK to me, as long as it does not distort the XSD usage. 
My opinion is that the use of rdf:datatype as opposed to xsi:type will be (rightly) perceived by the XML world as (another) outbreak of NIH from the RDF world. 
If we were determined, we could choose to make xsi:type work - possibly we should, possibly we should defer to the tag who own the qname/uri issue. 
Making xsi:type work for RDF might create some problems when using RDF datatypes which are not XSD datatypes; for me it is more important to align with the needs of the (large) XML world, rather than those of the (small) RDF world. 
Jeremy 
[Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, patrick.stickler@nokia.com] 
One case in point, UAProf, where three of its four core datatypes are not equivalent to any XML Schema datatype and it is also unlikely that they will be defined in terms of XML Schema rather than by some other means. 
True, it is *possible* to define them with XML Schema, but using xsi:type would, I expect, be frequently misunderstood as meaning they *should* be defined somewhere by XML Schema. 
Also, what happens when one does XML Schema validation and the XML Schema validator cannot locate the definitions for xsi:type specified datatypes? 
Do we get errors? 
I see this as a huge can of worms, the depth of which we do not have time to probe. 
Patrick 
