I'm majorly busy from now until the end of the year, so I'm not going to be able to send out frequent updates. 
The usual disclaimers apply even more so: please check this over and see if it matches your understanding. 
- HTTP/1.1 &amp; digest: Expecting RFC Real Soon Now. 
Complaints, editorial advice, ambiguities welcome. 
I was assuming someone else was collecting these, but I shouldn't. 
- state (cookies): Some minor comments from IESG, resolution &amp; progress expected soon. 
- security draft-ietf-wts-shttp-03.txt 'bounced' as Proposed Standard. 
Most likely if it progresses at all it will go forward as Experimental, after editorial work happens (or a disclaimer gets added.) 
I think that the separation and lack of coordination between WTS and HTTP-WG was a serious problem, and that I should have done more to prevent this morass. 
I believe the Internet needs documented standards-track security mechanisms for HTTP &amp; distributed content. 
Perhaps we should re-charter a new group to work on standards for SSL and applet signing. 
- hit metering: draft-ietf-http-hit-metering-00.txt 
Jeff and Paul promised a new draft when I said we were going to drop this, but we've yet to see one. 
- PEP: draft-khare-http-pep-01.txt After I'd miscategorized the status the last time I sent this out, Rohit promised timely attention on PEP. 
However, I've yet to see any traffic on PEP. - transparent negotiation: draft-holtman-http-negotiation-03.txt - features registration: expecting 'discussion draft' soon - GET-with-body / Safe: yes Internet draft? 
- versioning &amp; distributed authoring This group meets in November, and has a workshop scheduled for the week before IETF. 
I suggest a BOF/Working group for review of specifications. 
- HTTP-NG I hope a joint HTTP/Transport meeting &amp; BOF for HTTP-NG - Nits: Content-disposition - 19.6.2 Mallery's mid:v03007808ae4bdef7de86@%5B128.52.39.15%5D MEETING IN DECEMBER Next IETF is already being scheduled. 
We have Monday &amp; Tuesday morning. 
There will likely be a HTTP-NG BOF, probably jointly with 'transport'. 
There is possibly a 'versioning' BOF, although to be determined. 
SCHEDULE AND MILESTONES # 12/96: submit negotiation draft(s) for Proposed Standard # 1/97: revised HTTP/1.x internet drafts (intended for Draft Standard) # 6/97: submit HTTP/1.x (suite) of documents for Draft (or Proposed) Standard, # superceding previous RFCs. 
WG closes, mailing list stays open. 
# Whether 1.x = 1.1 or 1.2 depends on whether any protocol changes need # a version number increment. 
Whether 6/97 submits for Draft or Proposed # depends on whether we decide to make any additions. 
I am not getting any pressure from anyone that we should move aggressively on 1.2, and some indication that we should push back our schedule so that we don't shut down before implementations of 1.1 are deployed and there's some clear experience with it. 
As for the original schedule I posted a month ago, it's pretty clear that 12/96 is too soon for negotiation, and likely that 1/97 is too soon for a revised HTTP/1.x. 
Note that I've not added back PEP or Hit Metering until there's more visible progress. 
And even though 'safe' is a separate draft, it's separate for discussion purposes, and should likely get pushed back into the main HTTP draft. 
Warnings are always cachable, because they never weaken the transparency of a response. 
This means that warnings can be passed to HTTP/1.0 caches without danger; such caches will simply pass the warning along as an entity-header in the response. 
This is not right. 
HTTP/1.0 cache will cache this header, and the Warning will remain in the cache file even if the entity is up-to-date checked later. 
So clients could e.g. see a warning saying that the response may be stale even if the proxy just did an up-to-date check and it was ok. 
What part is not right? 
"never weaken the transparency" is right. 
A warning that the thing is stale even if it's not, doesnt weaken transparency. 
"without danger" might not be right if you use an extremely liberal definition of danger. 
Perhaps we have different ideas of what "transparency" means, but it seems to me that receiving an entity with an erroneous header is not transparent. 
It could certainly lead to undesirable behaviour on the part of downstream 1.1 caches, such as periodically trying to refetch the "stale" entity (and, of course, getting another stale one). 
Cheers, Ben. 
A.L. Digital Ltd, URL: http://www.algroup.co.uk London, England. 
Apache Group member (http://www.apache.org) 
13.1.2 
Warnings says: 
Warnings are always cachable, because they never weaken the transparency of a response. 
This means that warnings can be passed to HTTP/1.0 caches without danger; such caches will simply pass the warning along as an entity-header in the response. 
This is not right. 
HTTP/1.0 cache will cache this header, and the Warning will remain in the cache file even if the entity is up-to-date checked later. 
So clients could e.g. see a warning saying that the response may be stale even if the proxy just did an up-to-date check and it was ok. 
Cheers, Ari Luotonen* * * Opinions my own, not Netscape's * * * Netscape Communications Corp.ari@netscape.com 
501 East Middlefield Roadhttp://home.netscape.com/people/ari/ 
Mountain View, CA 94043, USANetscape Proxy Server Development 
What part is not right? 
"never weaken the transparency" is right. 
A 
warning that the thing is stale even if it's not, doesnt weaken transparency. 
"without danger" might not be right if you use an extremely liberal definition of danger. 
Daniel DuBois I travel, I code, I'm a Traveling Coderman 
You've made a convincing case that the existing design for Warning can yield bogus Warnings when HTTP/1.0 and HTTP/1.1 caches are combined. 
(I believe we wrote the HTTP/1.1 caching rules so that an HTTP/1.1 cache in the position of your cache "B" would remove the Warning after doing a successful validation from cache "A", but of course it's too late to apply that to the HTTP/1.0 caches out there.) So please suggest a solution! 
I can see three options: (1) Live with it. 
This can only happen when an HTTP/1.0 cache is a client of an HTTP/1.1 cache, and presumably in somewhat unusual cases, so maybe it's a temporary problem. 
(2) Remove Warning: stale from the protocol, on the grounds that it's better to silently give many users stale pages, instead of bogusly warning a few users about non-stale pages. 
[I don't consider this option to be a wise choice.] 
(3) Fix the design so that it works with HTTP/1.0 caches. 
Perhaps, for example, this means that one can't send a "Warning" to an HTTP/1.0 client (but this would also cause a lack of Warning in cases where it would be apppropriate). 
One possibility: HTTP/1.1 clients (the only ones that could care about a Warning header anyway) should turn a Reload on a page with a "Warning: stale" into a "Pragma: no-cache". 
That would cause a few extra cache misses, but would break the infinite loop that you are worried about. 
-Jeff 
Agree with Ben. 
I think it's undesirable if I get a Warning header when there it's not suppose to be there. 
Say I hav document X, last-modified at Y. The document is cached in HTTP/1.1 cache A. An HTTP/1.0 cache B requests for this document X from the cache A. Cache A returns it directly from its cache without an up-to-date check, and attaches the Warning header of that fact. 
Cache B caches the Warning header. 
Later cache B receives another request for the document X and determines it's time to do an up-to-date check. 
Cache A has also reached the time to do an up-to-date check. 
So an up-to-date check is made, and the remote server reponds that X has not been modified since date Y, and is hence still up-to-date. 
Now, cache A responds to B saying B's copy is up-to-date. 
Unfortunately, the Warning header will (erroneously) remain in the cache of B and will be passed to the user, forever giving the perception that the returned copy may be stale, even though in this case it was guaranteed to be up-to-date. 
Cheers, Ari Luotonen* * * Opinions my own, not Netscape's * * * Netscape Communications Corp.ari@netscape.com 
501 East Middlefield Roadhttp://home.netscape.com/people/ari/ 
Mountain View, CA 94043, USANetscape Proxy Server Development 
Ummm, is there some reason why an HTTP/1.1 user agent cannot tell for itself whether or not a message is stale? 
After all, the 
same information that made the proxy decide to add the Warning header is still present in the cached message, and that information can be interpreted by the HTTP/1.1 user agent just as easily as the HTTP/1.1 proxy. 
BTW, that begs the question of why the client is being warned about something that should be obvious from the Date, Age, and Expires/max-age? 
As a separate issue, Warning is one of the headers that should be listed as MUST be sent in a 304 response, with the lack of such a header 
meaning remove any existing Warning messages from the cached entity. 
That would settle the problem entirely, I think. 
.....Roy 
Roy T. Fielding: 
Not as far as I can see. 
However, the warning code also gives potentially valuable information on _why_ the message is stale. 
This is why I prefer dealing with the problem when getting a warning out of a 1.0 proxy, not when sending one to it. 
The warning codes in the draft are: 10 Response is stale 11 Revalidation failed 12 Disconnected operation 13 Heuristic expiration 14 Transformation applied Note that warning 14 is not staleness-related, so whatever else we end up doing, we must not remove the 14 warnings when sending a response to a 1.0 proxy. 
I think you are right. 
I recall that we updated the rules for creating 304 (not modified) responses in a great hurry; we may have overlooked more than just the warning stuff. 
(Aside: I now suspect that the Alternates header caching rules I listed in the TCN draft are broken too because of similar 304 compatibility subtleties.) 
Koen. 
