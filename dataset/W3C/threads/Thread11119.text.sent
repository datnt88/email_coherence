In discussions with others over that last couple days, I've come to the conclusion we should consider added to xml-link the capability to address into data character content (aka dataloc). 
The requirement I see is that users will expect an interface that allows them to highlight some text in one document, highlight some text in a second document, and make a link from one to the other. 
If the target is a three word phrase in the middle of a very long paragraph element, making the entire paragraph the target is unacceptable. 
(Imagine if the application is one in which a reviewer of a document is pointer out misspelled words--targeting the entire paragraph is unacceptable.) 
I understand the difficulties in counting, and I understand the desire to avoid specifying a grove plan in the XML spec, but I think we need to try something. 
Considering the 970331 lang spec and the 970406 link spec, what follows is a concrete suggestion to start things off (numbers in brackets are production numbers in the indicated spec). 
In xml-link[13], add to the or group that defines "Element" something like "*CHAR" or "*ATOM" to indicate that the Instance indication [12] is referring to data content atoms such as characters. 
(I see no reason to worry about what it means to have Attr and Val on *CHAR since we didn't worry about it on *CDATA.) The meaning of the Instance indication when applied to *CHAR would be the obvious except for the specifics of what to count as a unit. 
In that regard, I'd suggest the following (production numbers below all refer to xml-lang). 
Each occurrence of each of the following shall be counted as one unit for the purposes of the *CHAR addressing: comment [17] PI [18] CDStart [20] CDEnd [22] CharRef [59] EntityRef [61] STag [31] ETag [34] EmptyElement [37] Char [2] Note that Char != byte, but if we can expect the XML processor to know what Char is when it's parsing an XML file, I figure we can expect it to know what a Char is when it's addressing into an XML file. 
I don't think the issue here is so much whether this is a desirable capability but whether it can be done robustly and whether it can be implemented easily. 
There are many things in addition to the char/byte distinction that can mess things up: - line terminators: you move your document from a Unix to a DOS system and suddenly all your links break because your lines now end with CR/LF rather than LF. - RS/RE ignoring rules: you parse with an SGML-based XML parser, which does its standard RS/RE ignoring thing - white space collapsing: consider an application that by default does white-space collapsing a la HTML I do not believe simple char counting is going to be robust. 
Counting just non-white space characters would be an improvement but still quite fragile. 
Counting words or tokens doesn't work for many Asian languages. 
One possibility would be something like: STRING ("making the entire paragraph the target is unacceptable" 1) ("the" 2) to find the second occurrence of the string "the" in the first occurrence of the string "making the...unacceptable" in the location source. 
However, I still think this would be too hard for XML. 
In particular I think you are asking a lot of a style sheet mechanism to be able to attach styles to arbitrary spans of character data that are not marked up as elements. 
James I like this, but how does *CHAR/*ATOM tally with the TEI EPN (I don't have my Green Bible beside me right now)? 
///Peter This is an extremely important area for me and will - I think - be critical if XML is to be used for non-textual data (as well as textual data). 
In this message I make a simple proposal which is easy to implement and I hope is in the spirit of XML. 
First, however, if XML does *NOT* specify addressing into data character content one of the following may happen: - people will simply walk away from XML. (This will happen in my own discipline because much of our dataloc is inherently structured). 
- people will write PIs, develop new Elements or whatever simply to address this problem. 
This is guaranteed to be out of XML's ontrol and therefore a mess. 
- people will make up new (illegal) syntax. 
This will be even worse. 
One difficulty seems to be that we cannot at this stage devise a single robust mechanism for this process. 
Even for textual pattern matching there will be great variety in the approaches including case-sensitivity and the variety of regular expressions used. 
Two non-numeric examples (both from the JUMBO demo): (a) Stock prices are held as a whitespace-separated array of numbers (i.e. record-ends are not differentiated from spaces or tabs and all are folded to a single space by the CML processor). 
This array is robust and could have 10000 elements. 
It's unnecessary overkill to have to encapsulate every number in tags. 
We need a mechanism for addressing individual points or ranges of points. 
(b) Proteins are a linear sequence of subunits and can be internally addressed. 
It's important to be able to send an XML document that says: '*these* are the amino acids which are mutated in HIV protease and give rise to resistance'. 
Alternatively we may wish to address 3-D regions of space "this is where the antibody binds". 
In addition we have discipline-specific search mechanism which are robust and which we'd like to be able to use for addressing. 
To find all the molecules which contain a benzene ring we need to write something like: ROOT DESCENDANT (ALL MOL) (...) (SMILESSEARCH) (c1ccccc1) It seems clear to me that we shall have to live with a multitude of mechanisms for adressing dataloc and therefore we should welcome this and provide something where this can be done as robustly and extensibly as possible without feature creep. 
I suggest that we recall the FOREIGN keyword to allow non-XML based searches. 
The syntax as I recall is that it is: (FOREIGN)(ANYTHING)(YOU)(LIKE) The immediate advantage is that it will allow authors of documents to write *something* that is not syntactically invalid. 
(At present there is nothing they can do.) 
A subsidiary proposal is that where addressing mechanisms are likely to be common or agreed within a subcommunity, that XML provides a way of identifying these mechanisms. 
That the token immediately after FOREIGN _may_ be an identifier (e.g. an FPI) identifying the precise mechanism to be used. 
If, for example, we need to identify a regex for searching, we could precisely define the regex used. 
This could point to a document, or even to a catalog containing various implementations. 
As an example caesar.xml#(ROOT,DESCENDANT,(ALL,LINE)(FOREIGN)(-//POSIX//REGEX)("the*") 
(the details are illustrative - I don't know if POSIX has an FPI) If we collect xml-friendly resources under XML-DEV, then we might wish to develop an identifying scheme which allows them to be located. 
In the fullness of time, they might even get formal XML FPIs. 
In summary, the advantage of this is that it does not committ the implementers to anything more than identifying the word FOREIGN. 
An XML-engine is under no obligation to provide a mechanism beyond that. 
If a small community such as moleculat science wishes to develop something like: DESCENDANT,(ALL,MOL)(FOREIGN)("-//Chemical Markup Language//SEARCH SMILES//") (c1ccccc1) they will be able to make it interoperate without bothering XML. 
If the wider community wishes to search text for components, then XML can provide formal robust pointers to a set of methods which most implementers would be prepared to provide. 
In cases where these use algorithms it may be possible to refer to (say) Java classes, thus providing guaranteed interoperability. 
P. Peter Murray-Rust, domestic net connection Virtual School of Molecular Sciences I had a conversation on this subject with Adam Bosworth, Microsoft IE VIP - runs the org that Jean works in. 
Adam: (waving XML-link) What do we have to do to get regular expressions added to the addressing here? 
Tim: Ask for it. 
But we're worried that we don't know how to do regular expressions in Unicode. 
Adam: Oh. (nods, looks looks worried) Tim: Somebody at Microsoft must know about this stuff. 
Adam: Yes; Notepad and so on in NT do Unicode; we'll check it out and get back to you. 
BTW, I, like James, am very dubious about character and token counting. 
Among other things, it's just hopelessly Eurocentric. 
If we could get regexps, that would solve a lot of problems; but I don't think it would solve Peter M-R's problems; he really seems to want to count molecules. 
Is there a regexp lib in Java that operates on their 16-bit chars? 
Hmmm... -Tim This is an "interesting" problem, but certainly not *hard*. 
This is *not* an argument for including dataloc. 
I, like James, think that this has many difficulties. 
