This email is confidential and may be protected by legal privilege. 
If you are not the intended recipient, please do not copy or disclose its content but delete the email and contact the sender immediately. 
Whilst we run antivirus software on all internet emails we are not liable for any loss or damage. 
The recipient is advised to run their own antivirus software. 
It is slightly garbled in places (refers to "WS-Transaction BPEL") but makes some interesting points. 
--Jon I think this and similar articles raise a very interesting point. 
One that is generally captured in a single sentence but is in fact the whole point of the article: so which language would it be? 
Look at it from the perspective of the customer for a second, a point of view that is not married to any particular specification. 
As a customer you see the need for a specification and products that support it and you don't really care what it's called. 
You just need something that meets your requirements. 
You get reassured by the fact that so many vendors are working to address that need by proposing specifications and providing their innovation to be incorporated by future products. 
But it does become confusing if you need to define an architecture based on one of these specifications which can only accomodate products using that one specification. 
Now that all these languages are out there and available on a roylaty free basis we have a pool of IP that we can leverage as we work to create standards in this space. 
But we need to start focusing on solving problems, not creating more problems. 
For me, one CSF is achieved if the customer no longer have to ask "so which language is it?", but instead "so how do I solve my business problem using my arsenal of tools?" 
As for as orchestration goes - and let me use the informal definition of the term - that's an easy decision to make. 
There's an ongoing track at OASIS to provide a solution and if we put our resources there we get one requirement and a lot of confusion out of the way. 
We have a short list of CSF for what a choreography language should support in one way or another. 
Most of them focus on the ability to describe how services interact with each other as part of the choreography and the way in which services can be discovered and existing definitions can be reused to compose new choreographies. 
Whether you define these interactions directly, derive them from some other definition, reference them, glue them on, etc is all good as long as you can use these definitions. 
To make it absolutely clear, in my opinion the choreography should at the minimum be able to express the WS interactions with the same capabilities presented in WSBPEL. 
Call them choreography-level MEPs if you like. 
It's not a fact, just my gut feeling, that a choreography language that lacks that ability is not going to be of much use. 
When I say that the choreography language must incorporate these capabilities, I'm talking about the what and not prescribing the how. 
We can create new and interesting languages for writing choreographies that can do the same thing. 
I'm not convienced that's doable considering the effort required and the narrow time frame. 
It's much better to start with something we already have, for example WSCI: refactor it to meet the minimum list of CSFs and to leverage WSDL 1.2 and then extend it with the other features we deem necessary. 
Or we may decide to focus on those other features we deem necessary and use WSBPEL as the language that describes choreography-level MEPs. 
Since I'm not in favor of duplication I would be more inclined to pursue a track that focuses on the additional capabilities required in choreography and reuses existing specifications for handling the three-level MEPs (protocol, operation and choreography). 
These additional capabilities should not be B2B specific but should be B2B supportive and cover the part of the choreography that is not related to the actual WS interaction. 
I'm curious to know if other vendors here share these feelings. 
arkin Does this entail duplicating what the "external" portion of WSBPEL does? 
(and if not what other things does it do)? 
WSCI does need to be considered at some point, although we may find it does not meet all identified requirements. 
--Jon Yep. 
Absolutely. 
This is just my opinion that it's close enough to what we need. 
arkin "Those who can, do; those who can't, make screenshots" Assaf Arkin arkin@intalio.com 
Intalio Inc. www.intalio.com 
The Business Process Management Company (650) 577 4700 This message is intended only for the use of the Addressee and may contain information that is PRIVILEGED and CONFIDENTIAL. 
If you are not the intended recipient, dissemination of this communication is prohibited. 
If you have received this communication in error, please erase all copies of the message and its attachments and notify us immediately. 
Two more points from the discussion. 
1) ultimately, I think that it will be possible to map the ws-chor metamodel to the pi-calculus metamodel (since pretty much all message exchange can be modeled with pi). 
As a result, one can view ws-chor metamodel as syntactic sugar as it was expressed in the call, but this sugar also helps reducing the need for PhD to write chor-definitions. 
2) Would it be a good time to start collecting ws-chor metamodel elements (e.g. role, MEPs, ...). 
I know we are not done yet through the requirements, that might help people formulate more requirements (e.g. if we have role, we need to define a binding one way or another, ...) I could volunteer for that task. 
Cheers, Jean-Jacques From: public-ws-chor-request@w3.org [mailto:public-ws-chor-request@w3.org] 
On Behalf Of Assaf Arkin Sent: Tuesday, May 06, 2003 4:14 PM Subject: Re: CSF's and choreography - at least it alludes to some..... at meet it it need. 
The WS-CHOR metamodel/XML-language is what we SHOULD define based on some formal model. 
Pi-c or a flavour of that, is a good candidate for the base of our work because it allows one with very few fundamental constructs to describe how programs can work together in parallel by just sending and receiving names (values &amp; references). 
These constructs are Interaction Channels, send operation, receive operation, compose operation, restrict operation, replicate operation, send/receive-guards continuations. 
As an example of why we have to define our own language above this core compuational model is functions, a construct very fundamental in todays computing. 
Pi-c does not have the notion of functions as part of the core fundemental constructs but it has being shown how one can code functions using the core pi-c very easily. 
So, function abstraction and function application should be part of our language in addition to the core fundamental constructs. 
Usage of the Interaction Channels (used only for sends or receives, only once, only fresh channels can be passed around, etc.), should also be part of our language. 
Roles, is another good candidate. 
With WSCI being one of our inputs, I would like to see the metamodel of WSCI first. 
Then, it would be nice to understand how we can bridge the gap between the WSCI global model and ebXML*BPSS and also how to restrict WSCI in a way that helps us make validations of implementations with their observable behavior contracts in a tractable way. 
From: public-ws-chor-request@w3.org On Behalf Of Assaf Arkin Sent: Tuesday, May 06, 2003 4:14 PM Subject: Re: CSF's and choreography - at least it alludes to some..... 
I'm not sure if the term meta-model is used here consistently. 
There's an abstract model of the language that is not married to any particular syntax. 
So the abstract model may have some component like an action and a component like a sequence which is a collection of activities. 
That E-R diagram is in my opinion part of the abstract model, but it only says how you build the information, not what it means. 
So it would say that a sequence may contain one or more activities, but that says nothing about what a sequence does. 
From the E-R I may conclude that these are "evil activities" that should never be executed. 
The abstract model also includes additional rules, some of which are not expressible in XML schema (the syntax). 
For example, the fact that the collection of activities in a sequence must be ordeded, but the one for a branch or parallel flow does not require ordering. 
So there needs to be more information in the abstract model than can be easily captured in an E-R diagram. 
The question I would like to be answered is, what is the meta-model? 
Is it the E-R diagram of the abstract model components? 
It is just another name for the abstract model? 
Is it something more inclusive then the abstract model, e.g? arkin From: public-ws-chor-request@w3.org On Behalf Of Assaf Arkin Sent: Tuesday, May 06, 2003 4:14 PM Subject: Re: CSF's and choreography - at least it alludes to some..... "Those who can, do; those who can't, make screenshots" Assaf Arkin arkin@intalio.com 
Intalio Inc. www.intalio.com 
The Business Process Management Company (650) 577 4700 This message is intended only for the use of the Addressee and may contain information that is PRIVILEGED and CONFIDENTIAL. 
If you are not the intended recipient, dissemination of this communication is prohibited. 
If you have received this communication in error, please erase all copies of the message and its attachments and notify us immediately. 
