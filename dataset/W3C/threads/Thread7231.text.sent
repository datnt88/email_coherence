I think it should be up-to the implementation whether the write lock prevents people from reading a resource. 
I can definitely see the requirements for both types of locks (although I think that the type which allows reading is more valid in a Web environment) but I think it overkill to require provision of both Cheers Dylan From: Judith Slein[SMTP:slein@wrc.xerox.com] 
Subject: Re: Access Control Preliminary Draft I agree with the requirements Judith has listed almost completely, with the following exceptions: slein@wrc.xerox.com: 5. At a minimum, WebDAV should provide for access control over listing the contents of a collection, reading resources [read locked / read unlocked -- I don't think we should make this distinction], modifying resources, deleting resources, and changing access control permissions on a resource. 
I've thought about this for quite a while, but I really wonder whether read locks are really very meaningful. 
There are some subtle areas in which they can provide the user with clearer or more information, but in general I find the idea somewhat meaningless. 
I believe simply the ability to access an object is of much greater importance. 
Because the ability to grant access to web based objects should extend to collections and listings thereof, I agree that access control should be provided for listing collection contents, modifying and deleting objects, and for changing access control permissions, but I just don't really think that the read lock idea is anywhere near as valuable, and I also tend to think that simplicity is generally the best policy wherever possible. 
I think to some extent you, Jon, and I are probably talking past each other here. 
I don't think anyone has proposed that we define read locks as part of WebDAV (although I personally think they would be useful -- if we understand a read lock as one that prevents anyone from putting a write lock on the resource). 
What I think Jon suggested was that there be two sorts of read access permission: One would let you read a resource only when it has no (write) locks on it. 
The other would let you read a resource even if it has (advisory write) locks on it. 
To me it seems that access rights should be completely independent of issues of locking. 
Either you have permission to read a given resource or you don't. 
The server can figure this out without knowing the lock state of the resource. 
Then it checks separately for the lock state to decide whether to let you read the resource now. 
We might need to look again at the types of locks we define. 
I have seen RDBMSs that distinguish between stronger and weaker types of write locks -- one that lets people read while the write lock is in place, and one that does not. 
--Judy Name:Judith A. Slein E-Mail:slein@wrc.xerox.com 
MailStop:128-29E I agree we should make a decision. 
The only time I can see it being necessary to disallow access to a resource is if its state is inconsistent due to dependent parts being out of sync (e.g. 
If an HTML page is edited and a reference to an image added and this image has not yet been posted to the server) the options for solving this are 1) The possibility to update a group of resources in an atomic operation 2) Supporting both types of lock with the ability to lock a collection of resources 3) The concept of a published version of a resource with the ability to publish the most recent version of a collection of resources in an atomic operation (i.e. the contents could then be posted out of sync and once everything is available the collection is published) I would vote for supporting both types of lock and supporting locks on a collection of resources. 
Cheers Dylan From: -=jack=-[SMTP:jack@twaxx.twaxx.com] 
Subject: Re: Access Control Preliminary Draft I think it should be up-to the implementation whether the write lock prevents people from reading a resource. 
I can definitely see the requirements for both types of locks (although I think that the type which allows reading is more valid in a Web environment) but I think it overkill to require provision of both I think it would be ok to allow the implementation and those doing it to decide whether or not they want to support either allowing the reading of resources which are write-locked, or to prevent people from reading a resource when it's write-locked, but I think we should decide whether or not we'll choose one or the other of these definitions, or support both. 
Perhaps I'm mistaken, but it's my feeling that part of what we're trying to do is to present the basic landscape of this technological area to the community at large, and to make reasonable judgments about how to negotiate this landscape... if this is true, it's my feeling that we should clearly examine the issue and make a decision. 
Either you can read write locked resources, or you can't, or there's infrastructure to support both, which may then be applied as necessary and/or desired. 
For what it's worth, I'm of the feeling that it's perhaps not necessary to prevent folks from reading a resource simply because a new revision is currently being created as there's usually no reason to be concerned or interested until that new revision is available, although I can imagine cases in which folks might not want to read a document when they know a new version is being created, and in this case, they might want to wait. 
It would seem that we need to decide how important this is. 
It it's very important that write locks be able to prevent the accessing of a resource, then we should probably support it. 
If it's also determined that this can be a nuisance (and it's my contention that it *will* be a nuisance if *all* write locks prevent the read access of the particular resource) then when it's not necessary in a given case, we should probably allow it to be optional to facilitate the proper treatment of resources, or in other words, we should probably support both. 
Are there critical cases in which preventing read access for resources which are currently write locked is critically important? 
If so, what are these cases? 
Is there compelling evidence to state that ALL write locks should prevent any read access? 
If there's need, then we should probably support both policies, but we should be fairly careful to make sure there really is reason to support both... any comments? 
-=jack=- (This text composed by voice) If the general consensus is that we should try to hammer-out the publish features then I agree that this would be the more elegant approach. 
Cheers Dylan From: -=jack=-[SMTP:jack@twaxx.twaxx.com] 
Subject: Re: Access Control Preliminary Draft The only time I can see it being necessary to disallow access to a resource is if its state is inconsistent due to dependent parts being out of sync (e.g. 
If an HTML page is edited and a reference to an image added and this image has not yet been posted to the server) This is a good example. 
I am fairly sure, however, that there are others which may impose more rigorous requirements, but this is a good descriptive case. 
Your assessment of the possible solutions is exactly what I was hoping to see in terms of perverse boundary cases that impose the most stringent requirements on our functionality. 
In my case, the solution I would most likely select for this scenario is the "published version" approach. 
For example, even if a document contains multiple sub parts, I would not consider it "checked in" until all of it was checked in, so until all of the new revision is consistent, I would continue to serve the existing revision (which should already be consistent). 
There are authoring scenarios and/or working styles (for authors) that would make this difficult, however, and this kind of operability is, IMHO, the kind of thing we need to hammer out. 
For what it's worth, I think it's more clearly important to be able to lock a collection of resources (whether inherently related or not) for a wide variety of reasons, so I believe that feature is important in its own right, but certainly poses a potential solution to your scenario. 
I think it's likely that authors will want to make new revisions (or brand new content) of documents and in particular sets of documents available at once, so the ability to manage groups of locks in concert as well as the ability to manage the "published" state of groups of documents is likely pretty important, both of which relate to this functionality. 
Once this functionality is accepted, it's possible to use it in a variety of scenarios to support revision management. 
Also, I'll stake my opinion on supporting both styles of locks (i.e. those that prevent a resource from being accessed while locked and those that don't) particularly since at this point I am more concerned with an infrastructure that will support future as well as current needs as best as possible, and I can imagine that what is considered sufficient to support a facile interface to this functionality may well evolve over time. 
I could also see a solution that involves separating access from locks entirely, and simply allows the author to choose whether they want to change the access attributes while the content is locked on their own, which would allow them to make this decision... Whether or not these attributes (access vs. presence of locks) are linked is one question, but it's clear that we need to both be able to lock resources and to edit their access attributes, so the question would seem to be, should these two be automatically linked or should they be separate operations which may or may not be used together? 
-=jack=- (This text composed by voice) 
