Hi, I am joining the discussion about keyboard navigation rather late, but in my view the way to resolve some of these problems is that the guidelines recommend the support for keyboard navigation and that the placing of the actual keystrokes is customisable by the user. 
Finally it should be possible to save some kind of file with the assigned keystrokes something I will call keystroke keyboard layout. 
so that it will be possible to distribute keystroke layouts made with a certain group of disabled in mind. 
In this way we do not need to spend a lot of time finding out wich keystrokes are not in use by the different operating systems. 
And by making it possible for the user to define what keys to use, we avoid the problems that can arise when one group wants to use keystrokes found on the numeric keypad while others e.g. screen reader users will protest to such a placement of keystrokes, because most screen readers rely on the use of the keypad for special screen reader commands. 
If all keystrokes can be assigned to keystrokes by the user, we also avoid the discussion concerning the privilidged position of operating system or application specific keystrokes. 
If everything can be configured the user can decide to overwrite operating system hotkeys, if the user finds other functions to be more valuable than preserving system wide hotkeys. 
System hotkeys is a good idea, but at least for screen reader users, you get used to very many application specific hotkeys, and therefore the thought of altering operating system hotkeys is not unthinkable, specially not when we is approaching a situation where we lack keys to assign to extra keyboard shortcuts. 
Regards Claus Th?gersen Response to Claus Th?gersen. 
We need to keep the mind the naive user. 
With a reconfigurable strategy or possible recommendation, we need also to address how this will impact user knowledge of the navigation features and default configurations. 
Jon Jon Gunderson, Ph.D., ATP Coordinator of Assistive Communication and Information Technology Division of Rehabilitation - Education Services University of Illinois at Urbana/Champaign 1207 S. Oak Street Champaign, IL 61820 Voice: 217-244-5870 E-mail: jongund@uiuc.edu 
WWW:http://www.staff.uiuc.edu/~jongund 
In article 199808141356.IAA20198@staff1.cso.uiuc.edu , Do you mean that the possibility of reconfiguring keys placement will be a threat to the naive user? 
If this is the case then you can simply make it hard to make these adjustments, e.g. require the user to use a special commandline swich to load an alternative configuration, and "hide" the help topics that discusses these possibilities under advanced settings. 
JG: With a reconfigurable strategy or Most users will never know about these posibilities because they do not need them. 
Users that want them e.g. because they are power users and do explore advanced user interface, or some disabled that know about these features because they are instructed from other disabled or special computer trainers. 
With the use of cascading stylesheets or advanced settings that turns changes browser behavior in regards to pictures, sound, scripts and many other things, you already have browsers that behaves differently with different settings. 
If we do not want to conform all users to a often low accessability standard, a standard that all other users and application developpers will reject, it seems as the only sollution is to make almost everything configurable. 
Good points Claus. 
We have CSS for adjusting presentation. 
Could we not have some type of style sheet for adjusting user input? 
Jon Jon Gunderson, Ph.D., ATP Coordinator of Assistive Communication and Information Technology Division of Rehabilitation - Education Services University of Illinois at Urbana/Champaign 1207 S. Oak Street Champaign, IL 61820 Voice: 217-244-5870 E-mail: jongund@uiuc.edu 
WWW:http://www.staff.uiuc.edu/~jongund 
CSS2 offers very little in the way of style sheet control over the user interface. 
Features include: - stylistic changes when certain mouse events occur (hover, focus) - Some control of cursor presentation - The ability to refer to system colors and fonts in property values. 
- Dynamic outlines (e.g., to show focus). 
See also a recent Submission to W3C that discusses "Action Sheets", which are like style sheets but for behavior. 
See [1]. 
- Ian [1] http://www.w3.org/TR/NOTE-AS Ian Jacobs (jacobs@w3.org) 
I don't think it would be part of CSS. 
But a separate specification could be developed that may need to be more plateform specific. 
Jon Jon Gunderson, Ph.D., ATP Coordinator of Assistive Communication and Information Technology Division of Rehabilitation - Education Services University of Illinois at Urbana/Champaign 1207 S. Oak Street Champaign, IL 61820 Voice: 217-244-5870 E-mail: jongund@uiuc.edu 
WWW:http://www.staff.uiuc.edu/~jongund 
It helps to think about universal access to commanding the computer as like key remapping but a little higher level. 
Daniel had experience in the X work with defining abstract commands and binding concrete device events to them. 
This is the general direction I hope we can use DOM to go in: display device objects with methods where you write the properties of the object, and command device objects where you listen to the events on the attached device. 
CSS migrates to something which provides abstract-to-concrete class bindings. 
And yes, for control as well as for display. 
In dual-display scenarios as when one is mirroring a graphic display in speech, one wants to put listeners on the displays as well, as Rich S. has pointed out. 
Neil Scott out at the Archimedes project has a rather highly developed system that we could learn a lot from. 
Their system uses an unmodified desktop workstation and emulates the mouse and keyboard signals of the "normal" user exactly at that interface. 
But there is a whole computer in the assistive device and they often expand composite nominal-interface actions from macros that are better adapted to voice or head-stick input. 
It's that library of macros that I expect contains best current practice in terms of universal command concepts. 
Al Reference for Archimedes Project: to follow up on what Jon Gunderson said: In my understanding of CSS, the author of the page uses it to define how the page should be displayed. 
But in the case of providing access, the *reader* of the page would be the one defining control. 
Is there an option for someone to have an overriding CSS document that replaces the one provided by the author of the page? 
Denis Anson, MS, OTR/L Computer Access Specialist Assistant Professor College Misericordia 301 Lake Street Dallas, PA 18612 Member of RESNA since 1989 Access to Technology Anyone, Anywhere! 
Of Al Gilman It helps to think about universal access to commanding the computer as like key remapping but a little higher level. 
Daniel had experience in the X work with defining abstract commands and binding concrete device events to them. 
This is the general direction I hope we can use DOM to go in: display device objects with methods where you write the properties of the object, and command device objects where you listen to the events on the attached device. 
CSS migrates to something which provides abstract-to-concrete class bindings. 
And yes, for control as well as for display. 
In dual-display scenarios as when one is mirroring a graphic display in speech, one wants to put listeners on the displays as well, as Rich S. has pointed out. 
Neil Scott out at the Archimedes project has a rather highly developed system that we could learn a lot from. 
Their system uses an unmodified desktop workstation and emulates the mouse and keyboard signals of the "normal" user exactly at that interface. 
But there is a whole computer in the assistive device and they often expand composite nominal-interface actions from macros that are better adapted to voice or head-stick input. 
It's that library of macros that I expect contains best current practice in terms of universal command concepts. 
Al Reference for Archimedes Project: to follow up on what Jon Gunderson said: In designing a style sheet, the author is determining how to best present information to the user, in the opinion of the author. 
Since the author already knows the content of the page, this is possible. 
On the other hand, the reader of a page doesn't have the information about what is on the page until after the page is displayed. 
Hence, any navigational tools would have to be generic rather than page specific. 
However, it would be a god idea to have some cross-platform method of specifying access setups. 
Consider that, for a significant portion of the world, web access is supplied by shared computers. 
The computer used to access the web might not even be the same one each time. 
It would therefore maximize accessibility if there were a way for the user to safe access preferences onto a floppy, and carry them from computer to computer. 
These preferences, when used from a floppy, should be temporary changes, so that a person with very non-standard needs would not make the computer unusable to others. 
Denis Anson, MS, OTR/L Computer Access Specialist Assistant Professor College Misericordia 301 Lake Street Dallas, PA 18612 Member of RESNA since 1989 Access to Technology Anyone, Anywhere! 
Of Ian Jacobs CSS2 offers very little in the way of style sheet control over the user interface. 
Features include: - stylistic changes when certain mouse events occur (hover, focus) - Some control of cursor presentation - The ability to refer to system colors and fonts in property values. 
- Dynamic outlines (e.g., to show focus). 
See also a recent Submission to W3C that discusses "Action Sheets", which are like style sheets but for behavior. 
See [1]. 
- Ian [1] http://www.w3.org/TR/NOTE-AS Ian Jacobs (jacobs@w3.org) 
In response to Denic Anson, Browsers that don't support CSS (Lynx for example) ignore style sheet information. 
Netscape 4.0 allows you to disable the use of style sheets. 
Explorer 4.0 is more complex. 
It allows for the provision of user style sheets. 
Items specified in the users style sheet will override author defined styles sheets. 
This can be a problem though if the authors uses style names or elements not included in the user styles sheets. 
Explorer does provide partial disabling of author style elements by checking ignore color, ignore font size and ignore font style in the accessibility options. 
It doesn't allow the disabling of all style elements in the author styles sheet, most importantly positioning attributes. 
Jon Jon Gunderson, Ph.D., ATP Coordinator of Assistive Communication and Information Technology Division of Rehabilitation - Education Services University of Illinois at Urbana/Champaign 1207 S. Oak Street Champaign, IL 61820 Voice: 217-244-5870 E-mail: jongund@uiuc.edu 
WWW:http://www.staff.uiuc.edu/~jongund 
Last I was told, but I didn't have time to check, and maybe if Chuck is reading that, he can tell us how to do it, this is possible in IE using some script (JavaScript, VB, I don't know, I don't even know how to plug it in). 
to follow up on what Denis Anson said: The CSS2 specification embraces the concept that ultimately, the end-user should have the upper hand in control over styling. 
This is implemented in two ways, by saying that a !important marking from the user overrides such a marking by the author, and by remarks about stylesheet management in the browser. 
It is still up to the user agent software to implement these provisions. 
Jon reviewed the current practices of various browsers. 
The Browser Guidelines document has the opportunity to clarify priorities for the browser implementation of style management functions. 
Hope this helps, Al Reference: We do have language in current draft related to making accessibility preferences portable. 
Jon Jon Gunderson, Ph.D., ATP Coordinator of Assistive Communication and Information Technology Division of Rehabilitation - Education Services University of Illinois at Urbana/Champaign 1207 S. Oak Street Champaign, IL 61820 Voice: 217-244-5870 E-mail: jongund@uiuc.edu 
WWW:http://www.staff.uiuc.edu/~jongund 
...although it's impractical to do what Denis wants, which is "cross-platform method of specifying access setups." 
The best place for that is in user style-sheets. 
Windows and Internet Explorer can share settings across local area networks, but not to other platforms such as Macintosh or UNIX systems running Internet Explorer, much less other browsers. 
We do have language in current draft related to making accessibility preferences portable. 
Jon hand, have therefore a Behalf Jon Gunderson, Ph.D., ATP Coordinator of Assistive Communication and Information Technology Division of Rehabilitation - Education Services University of Illinois at Urbana/Champaign 1207 S. Oak Street Champaign, IL 61820 Voice: 217-244-5870 E-mail: jongund@uiuc.edu 
WWW:http://www.staff.uiuc.edu/~jongund 
You could create a user style sheet that would set all the known CSS properties to a setting you choose, but there is no general user interface for disabling all author-side CSS properties. 
ngscott@arch.stanford.edu 
options. 
Last I was told, but I didn't have time to check, and maybe if Chuck is reading that, he can tell us how to do it, this is possible in IE using some script (JavaScript, VB, I don't know, I don't even know how to plug it in). 
