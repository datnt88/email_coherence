The idea of being able to start using foo/ right now, finessing it past 8879 with stupid NET tricks until WG8 applies the correct ETAGC machinery, is elegant and pleasing. 
But perhaps it's really dumb. 
Because to ignore the pervasive influence of the Web, in Anno Domini MCMXCVI, is to risk shuffling down the silent road to dusty death. 
And HTML of course has BR and HR and IMG and doubtless others as well that don't come instantly to mind. 
One reason that this constraint is serious is the following, which I am sure has drifted through more than one of the heads on this list: Microsoft IE already processes stylesheets. 
Netscape says that they will too in the next release. 
Suppose, just suppose, that either or both of them started recognizing and putting into effect stylesheet directives on tags that weren't part of that vendor's dialect of HTML? 
Well then, aside from the handy semantics of IMG and A and a couple of others, you could wrap your high-value data in your own tags before shipping it downstream, and still have it formatted nicely. 
So, there is a real chance that XML could smoothly and uncontroversially and with no requirement for filtering or downstream software changes, displace a significant proportion of the world's HTML. 
Which arguably would make the Web a more useful place. 
But, maybe not if we insist on saying IMG SRC="mypic.jpg"/ . 
[Plan B: convince MS &amp; NS to start recognizing our EMPTY syntax... not impossible, I guess] Taken at another level, more crassly sociological, XML has a greater chance of widespread adoption if it doesn't "look weird" to the world's several million HTML hacks. 
Someone, please, explain why this fear is unfounded. 
Because I would really like to have a syntactically-obvious EMPTY element in XML. 
Or (serious question) is invading HTML's turf a non-goal of XML? 
Cheers, Tim Bray tbray@textuality.com 
http://www.textuality.com/ 
+1-604-488-1167 (The substance of this comment was buried in a posting on another subject. 
Sorry for the duplication for those of you who've read it elsewhere.) 
We don't need to declare EMPTY elements. 
We can just declare (#pcdata) and use explicit end-tags in the instance. 
We lose the ability to validate emptiness, but that is minor compared to the benefit of simplifying DTD-less instance parsing without introducing syntactic constructs that would be unfamiliar to HTML users. 
Charles F. Goldfarb * Information Management Consulting * +1(408)867-5553 13075 Paramount Drive * Saratoga CA 95070 * USA International Standards Editor * ISO 8879 SGML * ISO/IEC 10744 HyTime Prentice-Hall Series Editor * CFG Series on Open Information Management I don't think it's unfounded at all. 
At this point after reading all the "cute trick with delimiters" postings that attempt to address the EMPTY element, I'm tempted to say that XML just represent empty elements as everyone knows them in RCS 8879, and we just have to include the "list of empty elements" information along with the XML document instance. 
If someone wants to have a corpus of XML data that can be parsed without reference to a DTD, then they can create a tag set that has no empty elements. 
When the receiving system notices there is no "list of empty elements," it'll know there are no empty elements. 
But if someone has a tag set that includes empty elements and they wish to use XML to represent those document instances and interchange them without the DTD, then they have to include the "list of empty elements" information with it. 
Understood, but img ... /img isn't valid HTML and--given the HTML DTD--isn't valid SGML either. 
If someone develops an XML tag set and corpus of document instances using the markup you show (i.e., where IMG is not an empty element), then that's fine. 
But to say that in XML there can be no such things as empty elements will mean the XML cannot be used for practically all existing wide-spread SGML applications. 
I realize this is not listed as a design goal, but it has to be a marketing consideration. 
paul Did we decide that the "don't worry be smart" proposal was too difficult? 
This was the proposal to force parsers to keep a stack and reparent content if the next end tag doesn't match the start tag. 
I would much rather add a couple of extra hours of work to the tasks of the hundred or so people that will implement generic XML parsers from scratch than add a couple of minutes per document on the hundreds of thousands of documents we hope that people will create with XML. 
Note also that any application that either a) reads a DTD or b) uses a fixed DTD will already know which elements are empty, so we are really talking about only a subset of XML processors: primarily browsers and search tools, not really Perl hacks and editors. 
Consider also backwards-compatibility with HTML (and other DTDs). 
If we require "extra" information about which tags are empty, then all existing HTML documents are invalid XML documents because they neither include this description-list nor point to it. 
On the other hand, XML isn't the first time people have discussed this empty=tag-recognition problem. 
Is "don't worry be smart" really harder to implement than I have estimated? 
Paul Prescod (Not important point) A simpler way is (if scanning can be done by a single DFA, and if end-tag ommision &amp; #CONREF are not allowed, etc.) to simply scan through for all end-tags: if an element has an end-tag it can be added to the list of non-empty elements. 
Then, the document can be parsed by a second pass with this knowledge: no trees and reparenting, or "list of empty elements" required. 
(Whether this is a good method for the kind of tasks XML is intended is another matter.) Rick Jelliffe http://www.allette.com.au/allette/ricko 
Allette Systems http://www.allette.com.au 
