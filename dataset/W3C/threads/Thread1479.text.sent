I'm confused about this paragraph in 15.1, section 2.2.1: "In order to remove a resource from version control, a client can COPY the version-controlled resource to a temporary location, DELETE the version-controlled resource, and then MOVE the copy from the temporary location back to the original URL. 
The versions created for that resource while it was under version control will continue to exist at their server-defined locations." 
I'd parse the first sentence to mean that when the COPY is done, only one version is created at the destination. 
Then when the MOVE back is done, only one version is available at the original location. 
This has the effect of replacing 'n' versions with 1 version, and replacing a VCR with a non-version-controlled (ordinary) resource. 
Then I read the second sentence, and I get confused. 
The versions all still exist? 
Why? 
What's the point? 
How can that be? lisa Interoperability is achieved by making server behavior predictable. 
If there are two different "reasonable" behaviors, one needs to chose one behavior as the defined behavior and ensure that the other behavior can be achieved by explicit client action. 
In this case, the two behaviors are: - automatically delete all versions from a version history when a version-controlled resource for that version history is deleted. 
- keep all versions when a version-controlled resource is deleted. 
If the defined behavior is to keep all versions, then the other behavior can be achieved by the client explicitly deleting the versions when deleting the version-controlled resource. 
But if the defined behavior is to delete all versions, the other behavior cannot be achieved by any explicit client action (the versions are deleted and cannot be brought back). 
Note that "explicit client action" does not mean "explicit user action". 
A client can expose a user to whatever default behavior it wishes (e.g. delete all versions), and can achieve that behavior interoperably against all (compliant) servers. 
Alternatively, one can just define every possible server default as a "server option", and leave it up to the client writer to discover what kind of server it is running against, and to modify every action it performs based upon "what kind of server" it is running against. 
But the result of this approach is that it is too hard to write an interoperable client, so you just write clients to run against a specific set of server options, and thus interoperability is not achieved. 
Cheers, Geoff If the server only supports the version control feature, then there is no version history resource visible in the URL namespace, so a client wouldn't know if it was deleted or not (:-). 
The key here is that the behavior of DELETE has to be consistent, whatever feature set is supported by the server, so you can't have DELETE do incompatible things depending on what versioning features are supported (not if you want to make it feasible to write interoperable clients). 
Then you need to explain in the draft what the interoperable behaviour is that allows our implementation to clean out version histories automatically, because that is what our customers want. 
lisa Normally I'd agree with what you're saying, but cleaning up old versions can be server policy. 
Server administrators can't force clients to do that, so it must be a possible server behaviour. 
I understand it can also be server policy to keep around all old versions and NEVER delete them. 
That's why DeltaV MUST support both. 
lisa If you were to use the model of an RDBMS; If a version is related to anything then you must archive everything at that point of time before removing the relation and the version. 
If something in the version control system depends on or is a child of the version that is to be deleted then that version can not be deleted. 
Do not allow the versioning standard to allow defined corruption... [mailto:ietf-dav-versioning-request@w3.org]On 
Behalf Of Lisa Dusseault Normally I'd agree with what you're saying, but cleaning up old versions can be server policy. 
Server administrators can't force clients to do that, so it must be a possible server behaviour. 
I understand it can also be server policy to keep around all old versions and NEVER delete them. 
That's why DeltaV MUST support both. 
lisa I'm not dissing the RDBMS-model or any other model that says "keep around versions that are referenced". 
In fact, what I'm proposing may be compatible with that model -- we weren't planning to delete versions that were still referenced by an existing VCR. 
I'm also not dissing the model that says "keep around all versions forever". 
That's fine. 
But there is also a model that requires servers to delete stuff. 
To conserve space, to enforce policy on not archiving stuff (e.g. like email servers), or for whatever reason. 
The rule might be to delete ANYTHING over 2 yrs old. 
The rule might be to cleanse (bitmask wipe) anything that's deleted in case your archives are requested for material in a trial. 
The spec needs to accomodate these models as well. 
Or consider the model on www.sharemation.com, 
where we support versioning through a Web UI (try it out) but we also have quota. 
A user is limited to 20 MB. THey reach that and clean out old files. 
How can they possibly reduce the amount of space used in their system? 
Remember, this person may be using current Web Folders or other existing clients. 
To rebut the earlier argument that clients need predictable behaviour -- well sometimes that goes by the wayside. 
After all, that's what 404 Not Found was invented for. 
Things disappear. 
lisa 
