Issue requests a standard way to represent boolean valued properties and suggests the definition of rdf:is and rdf:isNot properties to meet this need. 
Propose that as schema data types define a boolean data value, this issue be merged with: Brian another way to look at boolean-valued properties is ala one-place-predicates. 
I recommend representing HappyPerson(Fred) as ex:Fred rdf:type ex:HappyPerson. 
i.e. for rdf:is, we have rdf:type for rdf:isNot, we sort-of/will have rdf:type along with ont:complementOf so... ex:Bob rdf:type [ ont:complementOf ex:HappyPerson]. 
DebM in the WebOnt WG is maintaing a tips/tricks document; perhaps this idiom could go there, if not in our primer. 
- http://www.daml.org/listarchive/joint-committee/0881.html 
Dan Connolly, W3C http://www.w3.org/People/Connolly/ Neat. 
And closer to Aaron's original request. 
And is not tied up with datatypes issue. 
Aaron, would you be happy with that? 
Brian I don't oppose the proposal, but I'd like to note that there's an alternative approach, also not requiring any new vocabulary. 
A Boolean valued property could be regarded as equivalent to a monadic predicate; e.g. (IsLikeThis(SomeResource) == TRUE) = IsLikeThis(SomeResource) Treatments of typed logic that I have read (notably Sowa's book Knowledge Representation) suggest that a type is just a shorthand for a value that satisfies a monadic predicate: (FORALL (x:integer) (EXISTS (y:integer) y  x)) is equivalent to: (FORALL (x) integer(x) = (EXISTS (y) integer(y) AND y x)) Which leads to the idea that Boolean valued properties are simply monadic predicates which can be represented as types: X rdf:type integer . 
asserts the truth of: integer(X) #g Graham Klyne MIMEsweeper Group Strategic Research http://www.mimesweeper.com 
Hmm, not sure I agree. 
That is one way to do it, but another would be to say that a boolean-valued property should be identified with a class; the property is true of aaa iff aaa is in the class. 
The example of ChocolateLover certainly suggests this to me. 
Then rdf:is would be rdf:type. 
Pat IHMC(850)434 8903 home 40 South Alcaniz St.(850)202 4416 office phayes@ai.uwf.edu 
From: ext Pat Hayes [mailto:phayes@ai.uwf.edu] 
Sent: 15 November, 2001 04:25 Subject: Re: Issue rdfms-boolean-valued-properties roperties I think I also prefer this rdf:type approach, but the question arises, how does one express explicit negation? 
rdf:notType? 
;-) Patrick Actually, when I first saw this proposal to use "type", I thought of Pat's alternative as possibly being better. 
The question is, what significance do we attach to identifying something as a "type"? 
--Frank From: ext Pat Hayes [mailto:phayes@ai.uwf.edu] 
Sent: 15 November, 2001 04:25 Subject: Re: Issue rdfms-boolean-valued-properties roperties Frank Manola The MITRE Corporation 202 Burlington Road, MS A345 Bedford, MA 01730-1420 Basic RDF cannot express negation. 
#g Graham Klyne MIMEsweeper Group Strategic Research http://www.mimesweeper.com 
From: ext Pat Hayes [mailto:phayes@ai.uwf.edu] 
Sent: 15 November, 2001 04:25 Subject: Re: Issue rdfms-boolean-valued-properties roperties I sincerely hope that we cannot express negation in RDF. 
If we ever become able to, then I will need to re-write the MT. Pat IHMC(850)434 8903 home 40 South Alcaniz St.(850)202 4416 office phayes@ai.uwf.edu 
