This morning I set up a test harness so I could run the RDF Core test cases thru a couple of RDF parsers I had installed (currently ARP, CARA and RDFStore). 
It runs each test case thru a parser that can output N-Triples and then compares the N-Triples results with jena.rdfcompare. 
The results are formatted as simple text with three columns: parser name, result (1 means the results matched, 0 means they didn't, error means an error occurred), and the test name. 
Feel free to include these results in the Test Cases document, and let me know if you have any comments/suggestions to improve the process. 
Also, let me know if you have a parser that outputs N-Triples which you'd like me to test. 
In the end, 86 out of 120 parser-tests succeeded. 
Not bad, I'd say. 
Tests that no parser passed: rdf-containers-syntax-vs-schema/test006.rdf rdf-ns-prefix-confusion/test0002.rdf rdf-ns-prefix-confusion/test0007.rdf rdf-ns-prefix-confusion/test0008.rdf 
I'd appreciate it if the owners of these test cases could look over the tests to see if they made a mistake in the results. 
Let me know if you need more information. 
And without further ado, the full results: arp amp-in-url/test001.rdf 1 cara amp-in-url/test001.rdf 1 rdfstore amp-in-url/test001.rdf 1 arp rdf-containers-syntax-vs-schema/test001.rdf 1 cara rdf-containers-syntax-vs-schema/test001.rdf 1 rdfstore rdf-containers-syntax-vs-schema/test001.rdf 1 arp rdf-containers-syntax-vs-schema/test002.rdf 1 cara rdf-containers-syntax-vs-schema/test002.rdf 0 rdfstore rdf-containers-syntax-vs-schema/test002.rdf 0 arp rdf-containers-syntax-vs-schema/test003.rdf 1 cara rdf-containers-syntax-vs-schema/test003.rdf 0 rdfstore rdf-containers-syntax-vs-schema/test003.rdf 1 arp rdf-containers-syntax-vs-schema/test004.rdf 1 cara rdf-containers-syntax-vs-schema/test004.rdf 0 rdfstore rdf-containers-syntax-vs-schema/test004.rdf 0 arp rdf-containers-syntax-vs-schema/test005.rdf 1 cara rdf-containers-syntax-vs-schema/test005.rdf 0 rdfstore rdf-containers-syntax-vs-schema/test005.rdf 0 arp rdf-containers-syntax-vs-schema/test006.rdf 0 cara rdf-containers-syntax-vs-schema/test006.rdf 0 rdfstore rdf-containers-syntax-vs-schema/test006.rdf 0 arp rdf-containers-syntax-vs-schema/test007.rdf 1 cara rdf-containers-syntax-vs-schema/test007.rdf 0 rdfstore rdf-containers-syntax-vs-schema/test007.rdf 0 arp rdf-containers-syntax-vs-schema/test008.rdf 1 cara rdf-containers-syntax-vs-schema/test008.rdf 1 rdfstore rdf-containers-syntax-vs-schema/test008.rdf 1 arp rdf-ns-prefix-confusion/test0001.rdf 1 cara rdf-ns-prefix-confusion/test0001.rdf 1 rdfstore rdf-ns-prefix-confusion/test0001.rdf 1 arp rdf-ns-prefix-confusion/test0002.rdf 0 cara rdf-ns-prefix-confusion/test0002.rdf 0 rdfstore rdf-ns-prefix-confusion/test0002.rdf 0 arp rdf-ns-prefix-confusion/test0003.rdf 1 cara rdf-ns-prefix-confusion/test0003.rdf 1 rdfstore rdf-ns-prefix-confusion/test0003.rdf 1 arp rdf-ns-prefix-confusion/test0004.rdf 1 cara rdf-ns-prefix-confusion/test0004.rdf 1 rdfstore rdf-ns-prefix-confusion/test0004.rdf 1 arp rdf-ns-prefix-confusion/test0005.rdf 1 cara rdf-ns-prefix-confusion/test0005.rdf 0 rdfstore rdf-ns-prefix-confusion/test0005.rdf 1 arp rdf-ns-prefix-confusion/test0006.rdf 1 cara rdf-ns-prefix-confusion/test0006.rdf 1 rdfstore rdf-ns-prefix-confusion/test0006.rdf 1 arp rdf-ns-prefix-confusion/test0007.rdf 0 cara rdf-ns-prefix-confusion/test0007.rdf 0 rdfstore rdf-ns-prefix-confusion/test0007.rdf 0 arp rdf-ns-prefix-confusion/test0008.rdf 0 cara rdf-ns-prefix-confusion/test0008.rdf 0 rdfstore rdf-ns-prefix-confusion/test0008.rdf 0 arp rdf-ns-prefix-confusion/test0009.rdf 1 cara rdf-ns-prefix-confusion/test0009.rdf 1 rdfstore rdf-ns-prefix-confusion/test0009.rdf 1 arp rdf-ns-prefix-confusion/test0010.rdf 1 cara rdf-ns-prefix-confusion/test0010.rdf 1 rdfstore rdf-ns-prefix-confusion/test0010.rdf 1 arp rdf-ns-prefix-confusion/test0011.rdf 1 cara rdf-ns-prefix-confusion/test0011.rdf 1 rdfstore rdf-ns-prefix-confusion/test0011.rdf 1 arp rdf-ns-prefix-confusion/test0012.rdf 1 cara rdf-ns-prefix-confusion/test0012.rdf 1 rdfstore rdf-ns-prefix-confusion/test0012.rdf 1 arp rdf-ns-prefix-confusion/test0013.rdf 1 cara rdf-ns-prefix-confusion/test0013.rdf 1 rdfstore rdf-ns-prefix-confusion/test0013.rdf 1 arp rdf-ns-prefix-confusion/test0014.rdf 1 cara rdf-ns-prefix-confusion/test0014.rdf 1 rdfstore rdf-ns-prefix-confusion/test0014.rdf 1 arp rdfms-difference-between-ID-and-about/test1.rdf 1 cara rdfms-difference-between-ID-and-about/test1.rdf 1 rdfstore rdfms-difference-between-ID-and-about/test1.rdf 1 arp rdfms-difference-between-ID-and-about/test2.rdf 0 cara rdfms-difference-between-ID-and-about/test2.rdf 1 rdfstore rdfms-difference-between-ID-and-about/test2.rdf 1 arp rdfms-empty-property-elements/test001.rdf 1 cara rdfms-empty-property-elements/test001.rdf 1 rdfstore rdfms-empty-property-elements/test001.rdf 1 arp rdfms-empty-property-elements/test002.rdf 1 cara rdfms-empty-property-elements/test002.rdf 0 rdfstore rdfms-empty-property-elements/test002.rdf 1 arp rdfms-empty-property-elements/test003.rdf 1 cara rdfms-empty-property-elements/test003.rdf 1 rdfstore rdfms-empty-property-elements/test003.rdf 1 arp rdfms-empty-property-elements/test004.rdf 1 cara rdfms-empty-property-elements/test004.rdf 0 rdfstore rdfms-empty-property-elements/test004.rdf 1 arp rdfms-empty-property-elements/test005.rdf 1 cara rdfms-empty-property-elements/test005.rdf 0 rdfstore rdfms-empty-property-elements/test005.rdf 1 arp rdfms-empty-property-elements/test006.rdf 0 cara rdfms-empty-property-elements/test006.rdf 0 rdfstore rdfms-empty-property-elements/test006.rdf 1 arp rdfms-empty-property-elements/test007.rdf 1 cara rdfms-empty-property-elements/test007.rdf 1 rdfstore rdfms-empty-property-elements/test007.rdf 1 arp rdfms-empty-property-elements/test008.rdf 1 cara rdfms-empty-property-elements/test008.rdf 0 rdfstore rdfms-empty-property-elements/test008.rdf 1 arp rdfms-empty-property-elements/test009.rdf 1 cara rdfms-empty-property-elements/test009.rdf 1 rdfstore rdfms-empty-property-elements/test009.rdf 1 arp rdfms-empty-property-elements/test010.rdf 1 cara rdfms-empty-property-elements/test010.rdf 0 rdfstore rdfms-empty-property-elements/test010.rdf 1 arp rdfms-empty-property-elements/test011.rdf 1 cara rdfms-empty-property-elements/test011.rdf 0 rdfstore rdfms-empty-property-elements/test011.rdf 1 arp rdfms-empty-property-elements/test012.rdf 1 cara rdfms-empty-property-elements/test012.rdf 0 rdfstore rdfms-empty-property-elements/test012.rdf 1 arp rdfms-empty-property-elements/test013.rdf 1 cara rdfms-empty-property-elements/test013.rdf 1 rdfstore rdfms-empty-property-elements/test013.rdf 1 arp rdfms-empty-property-elements/test014.rdf 1 cara rdfms-empty-property-elements/test014.rdf 0 rdfstore rdfms-empty-property-elements/test014.rdf 1 arp rdfms-empty-property-elements/test015.rdf 1 cara rdfms-empty-property-elements/test015.rdf 0 rdfstore rdfms-empty-property-elements/test015.rdf 1 "Aaron Swartz" | The Semantic Web http://www.aaronsw.com/ 
| i'm working to make it happen I am checking ARP's results against the tests. 
So far, on the four Aaron highlighted: rdf-containers-syntax-vs-schema/test006.rdf rdf-ns-prefix-confusion/test0002.rdf rdf-ns-prefix-confusion/test0007.rdf rdf-ns-prefix-confusion/test0008.rdf my view is as follows. 
ARP 1.0.3 is incorrect, test looks OK to me. 
Will give further feedback once I've fixed ARP. Test has typo, last two lines of test0002.nt 
have subject: not the correct http://www.w3.org/2000/10/rdf-tests/rdf-ns-prefix-confusion/test0002.rdf#ba g Test file rdf-ns-prefix-confusion/test0007.nt missing triple: http://example.org/resource/ 
http://example.org/property 
"bar" . 
This is interesting. 
The URL is .rdf 
In http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2001Sep/0052.html 4. rdf-ns for 'any' namespace uri. 
Is that legal that rdf-ns is used for propertyElt or typedNode? 
?xml 
version="1.0"? 
x:foo xmlns:x="http://example.com/" rdf:foo xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/ /x:foo Does this RDF/XML generate no triples or generate triples below ? 
_:genid1 http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://example.com/foo . 
_:genid1 http://www.w3.org/1999/02/22-rdf-syntax-ns#foo _:genid2 . 
How about using rdf:Description instead of rdf:foo? 
The test has an rdf:aboutEachPrefix, which for ARP is similar to Satoshi's rdf:foo. 
ARP behaves in two ways, both different from Dave's test. 
In default mode, it generates triples like above; in strict mode it implements and skips the entire element. 
(I take the URI in that paragraph to be a typo!). 
In both cases it generates a message. 
I do not believe we have discussed in any depth correct behaviour when meeting unrecognised rdf attributes, and I have not seen any discussion complaining about Para 196 and so suggest that we retain it. 
(well not the words - just the meaning!). 
Thus I would like to see the test case modified to generate only one triple: http://example.org/resource/ 
http://example.org/property2 
"blah" . 
I am open to a rewriting of para 196 with different semantics, but do not see the need. 
Jeremy Jeremy Carroll said: This applies also to 0007.nt and possibly others too. 
All the .nt 
ntriples results files need to be edited to handle the new URLs. 
Yes, that is needs the above triple test 8 contains an rdf:aboutEachPrefix and is thus now not in the RDF/XML language. 
The file should be renamed as an error case or removed entirely (it does not test anything else that is not covered by other cases). 
4. rdf-ns for 'any' namespace uri. 
Is that legal that rdf-ns is used for propertyElt or typedNode? 
?xml 
version="1.0"? 
x:foo xmlns:x="http://example.com/" rdf:foo xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"/ /x:foo Does this RDF/XML generate no triples or generate triples below ? 
_:genid1 http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://example.com/foo . 
_:genid1 http://www.w3.org/1999/02/22-rdf-syntax-ns#foo _:genid2 . 
How about using rdf:Description instead of rdf:foo? 
We have discussed 'illegal' rdf: attributes, elements before. 
when I used similar words to describe what to do when such things were seen, the WG did not agree, so they were removed. 
So as far as I recall we no just considered such things as having no defined meaning. 
At present, since we do not describe what applications do with RDF/XML (processing model), we cannot give any requirements on what to do with unknown or undefined tokens. 
Since RDF systems are meant to deal with all sorts of things, they should be used to ignoring stuff they don't understand, which might be given a meaning by some system built with RDF. 
Thus Satoshi's example above is not disallowed. 
Just for fun, here is a wierder one: _:x http://www.w3.org/1999/02/22-rdf-syntax-ns#Description "literal" . 
_:x http://www.w3.org/1999/02/22-rdf-syntax-ns#resource http://example.org/object . 
_:x http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://www.w3.org/1999/02/22-rdf-syntax-ns#about . 
-- and ARP generated the above triples (along with a warning) The paragraph describes handling 'rdf' things seen from a *different* namespace URI i.e. not where all the commonly-prefixed rdf: things reside. 
I don't think any applications ever use anything from the first namespace so I think we should get rid of this case. 
Dave Oops following Dave's URLs I noticed I had made mistakes! 
http://www.w3.org/2000/10/rdf-tests/rdf-ns-prefix-confusion/test0002.rdf#ba 
The correct URI ref for the subject is .rdf#bag 
Jeremy I'll add fixing these paths and file names to my list of test case cleanup. 
[The .../rdfcore/... path is missing in a bunch of .nt 
files.] 
Based on the argument below, wouldn't rdf:aboutEachPrefix simply have no meaning and be ignored? 
.rdf 
[ ... snip ... ] I am happy with the proposal that we limit ourselves to describing legal RDF, and hence make test 8 an error. 
It is one of the many inconsistencies of the old spec that it (mis)specifies the processing of a particular type of error, but not of other types of error. 
If we are not specifying processing behaviour of bad input we do not specify what to do when meeting an attribute with "no meaning". 
The current version of ARP, in good faith, based its processing of rdf:aboutEachPrefix on a particularly reading of para 196 (mine not Dave's!); that processing was not simply ignoring the attribute. 
I suspect that trying to specify the processing of incorrect input is a never-ending task. 
(It seems hard enough to specify the processing of correct input and how to differentiate correct input from incorrect input.) I am not wedded to the current version of ARP, and only use it as an example, since I understand what it does and why! 
Jeremy 
