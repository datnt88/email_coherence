Hi, is it allowed to have a Workspace containing a File&amp;Folder Hierarchy (i.e. a copy of a subtree of the webdav resource tree) ? 
Thnx, Daniel Yes. 
I think a really nice thing about DeltaV is that it allows versioning of containers (directories). 
Its not mandatory, but certainly is supported. 
I would suggest having a bit of a read. 
To me the only special thing about a workspace is that it imposes additional constraints on that you are only allowed to check out one version of a resource under it. 
(Note, you could have multiple bindings of URLS to the same resource, but they would be the same version of that resource). 
Alan From: Alan Kent [mailto:ajk@mds.rmit.edu.au] 
Yes. 
I think a really nice thing about DeltaV is that it allows versioning of containers (directories). 
Its not mandatory, but certainly is supported. 
I would suggest having a bit of a read. 
To me the only special thing about a workspace is that it imposes additional constraints on that you are only allowed to check out one version of a resource under it. 
(Note, you could have multiple bindings of URLS to the same resource, but they would be the same version of that resource). 
Yes, as Alan says, a Workspace can have a File/Folder (WebDAV would call it a Resource/Collection) hierarchy below it (a Workspace is just a special kind of collection). 
Another special thing about a Workspace is that you can associate a "current-activity" with that workspace, to simplify activity-based checkouts. 
Also, you have an easy way to identify all checkouts in a workspace (without doing a depth propfind), and you can tell whether a resource is a member of a workspace by looking at its DAV:workspace property. 
But I agree with Alan that the most important thing about a workspace is that it has at most one versioned-controlled resource for a given version history. 
Cheers, Geoff Thanks so far! 
But what about this: But it is still possible to have a version tree (not a single line of descent of versions for the only VCR in the workspace)??? Well it would produce a ambiguity, wouldn't it? 
And then there is no unambigious merge or baselining can take place. 
So I would rather understand it that way, that you should have a checkin-fork forbidden behavior for the versions. 
With that it would be possible that more than one developer checks out a given version but at check in time they would be forced to do an explicit merge and the single line of descent and the unabiguity would be kept. 
(was that understandable???) regards Daniel A version controlled resource can have a tree of version resources. 
But I am not sure I understand what you mean by 'for the only VCR in the workspace' - I am missing something from a previous post maybe? 
Sorry, you have lost me here. 
Are you proposing something above then? 
Ummmm. 
Sorry, not to me (so I probably should not be replying! 
:-) Alan From: Kirmse, Daniel [mailto:daniel.kirmse@sap.com] 
But it is still possible to have a version tree (not a single line of descent of versions for the only VCR in the workspace)??? Remember that a workspace contains version-controlled resources, not versions or version histories. 
So I'm not sure what you mean by "having a version tree" in the workspace. 
Well it would produce a ambiguity, wouldn't it? 
And then there is no unambigious merge or baselining can take place. 
Remember that each version-controlled resource refers to exactly one version in its dav:checked-in or dav:checked-out property. 
So there is no ambiguity about what version is associated with a given version-controlled resource. 
So I would rather understand it that way, that you should have a checkin-fork forbidden behavior for the versions. 
With that it would be possible that more than one developer checks out a given version but at check in time they would be forced to do an explicit merge and the single line of descent and the unabiguity would be kept. 
Perhaps you are thinking that a version-controlled resource always refers to the "latest" version in a version history? 
This is definitely not the case. 
It refers to the last version checked-in to that working resource, or to an arbitrary version (of that version history) specified in an UPDATE request. 
So there is no ambiguity if there are forks and multiple lines of descent. 
Cheers, Geoff 
