I agree that if XML were to be used in the current single-purpse way that HTML is, i.e. exclusively for browsing, then error recovery would be desirable. 
But I do not, and so remain convinced that we have to make a strong statement in order to achieve a violent break with this one particularly pernicious cultural characteristic of the Web. 
I think that Rick's use of the term "sudden death" to describe what I'm asking for is perfectly appropriate. 
A request: could the product vendors and large-scale information providers on this group please put their hands up and say what they would like to see in this area? 
Reason I ask is, a lot of the arguments against sudden death have amounted to "oh, the vendors would never support it." 
I agree - if it is likely that the vendors would not support sudden death, then it is a bad idea and should be withdrawn. 
On further reflection, I would support lexical errors causing sudden death *if* the XML-link language were smart enough to be able to request the rest of a document after a lexical error. 
That would allow some resynching. 
Is it? 
Consider the following fragment: A  B !--* an error *-- A  B Is XML-link currently defined in such a way that if we died at the error in "p1", we could still then request "p2" et seq.? Maybe this just bifurcates the whole lexical thing into XML being strict for applications &amp; data but robust for navigation &amp; linking. 
Rick Jelliffe 
On Mon, 28 Apr 1997 05:14:15 -0400 Tim Bray said: 
Why does the strong statement have to take the form of *forbidding* error recovery? 
Why is prescribing an inappropriate error recovery all right in the application area (browsing) that is already well established and not all right in the application areas we have not yet widely implemented but think we want to? 
What is wrong with allowing applications and XML processors to decide for themselves whether it makes sense to attempt to recover from errors? 
I'll take this on faith; I haven't seen any such arguments. 
The only vendor-related arguments I've noticed are those implicit in the Draconian position. 
Tim seems to be assuming silently that vendors are too stupid to notice that some applications require failure on error detection, and too weak-kneed to implement it if it's not forced upon them and they're not guaranteed that their competitors can't attempt error recovery either. 
So I want to ask the implementors another question: is it enough that an XML processor be required to issue error messages, and allowed to treat errors as fatal errors? 
Or is it essential that XML processors be *required* by the spec to treat WF errors as fatal errors? 
If the latter, can you say why? 
-C. 
M. Sperberg-McQueen 
Michael, 
I've been trying to follow this thread, and it brings up a simple question: if error handling/recovery is entirely up to a vendor, what's stopping someone from making some minor changes to an existing HTML browser and calling it an XML browser? 
Requiring conforming processors to notify applications, and requiring conforming applications to notify their users seems hardly draconian. 
After notification, I think you are correct: it is then up to the developer to decide what is appropriate in the specific XML application. 
But the notification must be mandatory, otherwise we're back to the Web's current broken error handling behaviour. 
Murray Murray Altheim, SGML Grease Monkey altheim@eng.sun.com 
Member of Technical Staff, Tools Development &amp; Support Sun Microsystems, 2550 Garcia Ave., MS UMPK17-102, Menlo Park, CA 94043 USA "Give a monkey the tools and he'll build a typewriter." 
At the risk of being simplistic here are my views (as a small fry implementor) Q1: Must an XML parser report the first error it encounters? 
Yes. 
Q2: Must an XML parser stop providing data after an error? 
No. Q3: Can an XML parser stop dead at the first error if it so chooses. 
Yes. Q4. Can an XML parser continue after an error without informing the application of the error? 
No. Sean Mc Grath 
Q2a: Is it important to have interoperability defined for documents that have errors? 
Q2b: If so, how do we prevent implementation/market-share wars over emulating error behavior such that XML will not effectively become rewritten by the leading implementations? 
A2a: the argument seems to be, don't worry. 
Since most if not all XML documents will be machine generated they will all be well formed. 
I don't buy it! 
Programmers are human to and make as many errors as prose authors. 
A2b: ??? Dave Hollander 
Of course. 
What's draconian is to require that the parser *not* attempt any error recovery after finding the error. 
That seems to be what some people want. 
Dave Peterson SGMLWorks! 
davep@acm.org 
On Mon, 28 Apr 1997 16:41:16 -0400 Murray Altheim said: 
The only thing preventing it is the definition of conformance. 
All conforming processors are required to report all reportable errors under control of a user-settable option (i.e. the user may choose to suppress error reporting, and the implementation may choose to make that the default, but it must always be possible to run the processor with error reporting enabled). 
I think that's true; that's what is in the spec now (modulo the ability to turn messages off), and that's what I support. 
Tim is proposing a change that goes beyond this: the processor must not only notify the user and/or application, but must also stop performing any work other than error reporting. 
Yes. The notification must be mandatory. 
In the current spec, it already is mandatory. 
Tim's proposal is *not* a proposal to make the error report mandatory; it's a proposal to prohibit any attempt to recover from the error. 
As I understand it, the goal is (a) to ensure that document authors find out about the errors in the document, quickly and unequivocally, and (b) to motivate authors to make sure their documents are correct, or at least well formed, by the simple expedient of decreeing that XML processors are not allowed to perform any useful work with broken documents (with perhaps a special dispensation for editors and validators). 
I'm in favor of notifying authors when their documents are ill-formed, and of providing motivation to fix them. 
But I think requiring that a processor die when confronted with 
foo bar=baz ... /foo or with a b c ... /a , instead of allowing the user and the application together to decide whether these might be typos for foo bar='baz' and a b c ... /c /b /a seems a more moralistic attitude than is strictly necessary. 
-C. M. Sperberg-McQueen "Quote your attributes! 
It's good for you!" -Not Tim Bray 
No. It is important to have a universal definition of what is an error. 
I think it's also important, as Michael and others have noted, that there is a mandatory notification of syntactically malformed documents. 
I think even a little red flag in the browser window would suffice to make authors check -- because they know that it looks like they are careless if the flag shows up... 
1. Reprogram the brains of the entire industry. 
2. make sure the vendors must explain that they are interpreting _erroneous_ documents. 
It's a feature, but a very different feature from the current situation in HTML -- where the definition is essentially irrelevant for practical work. 
Sure, and the programmers, like the authors, will have to fix their incorrect output, to remove error displays from browsers and other processors. 
-- David David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ 
Neither foo bar=baz or a b /a are XML; XML is simple enough that there is a good probability that these, rather than author error, are the result of a broken communication link or output filter. 
The proper response to such breakage is prompt termination without extreme prejudice but with a clear error signal. 
I do not want us lurching over the slippery slope where every little formerly-lightweight piece of useful XML client code is loaded with bloated guess-what-the-author-really-meant heuristics. 
Empirical evidence would suggest that the danger of this is real. 
Someone a few messages back proposed a policy where a browser has to maintain a continuous this-document-is-dogshit display in the presence of non-well-formed instance. 
I can't at the moment see how to engineer the spec to achieve such a constraint; if we could, I suppose this would be tolerable. 
At a *very bare minimum*, we must remove the phrase "at user option" from the definition of "reportable error" in section 1.3. 
I can see no 
scenario in which it is ever desirable to suppress a well-formedness error message. 
We went to a lot of work to make well-formedness easy. 
It is a very low bar to get over... much easier than producing valid HTML. 
I 
cannot for the life of me see why so many people here are willing to tolerate gross error, and run the risk of another race-to-the-bottom a la HTML, when the standard required to achieve reliable interoperability is so easy to explain and to achieve. 
Cheers, Tim Bray tbray@textuality.com 
http://www.textuality.com/ 
+1-604-708-9592 
No - the proper response can often be to display what you have received, warts and all. 
Display it with all the tags in, as if it were a View Source window. 
The presence of the tags should immediately tell the user that this is an invalid XML file that cannot be formatted according to the associated style sheet. 
If the browser highlights the tag that gave the first error in bold, and follows this with an explanatory message indicating what type of error so much the better. 
Ideally the incorrect part of the file will be in the displayed area of the screen, rather than just displaying the start of the file. 
I for one don't want to wait until a correct file can be accurately transmitted over an overloaded network every time I ask for a bit of XML data that fails to transmit properly. 
If I can find what I was looking for in the warts and all version this may stop me needing to overload the network even further. 
Incidentally, remember that the error messages will be user-specific - they will need to be in the language of the system user rather than the parser writer. 
We therefore need a way of switching message sets within each browser on a language basis. 
Martin Bryan, The SGML Centre, Churchdown, Glos. 
GL3 2PU, UK 
Tim, Thanks for this key reminder: 
It's sufficiently compelling that I no longer have the same reservations that I did about your original "draconian" proposal. 
XML's ease of implementation and ease of use for hand-coders should be a significant plank in any positioning and marketing of XML. 
Certainly XML's ease of use should be more fundamental than "the customer is always right." 
-Todd. 
"Ease of use" or "ease of implementation"? 
"The customer" usually wants what he considers "easy to use", whether it's a good idea or not. 
When you argue for "ease of use" of XML, remember that the document creator as well as the document reader is a "user" of XML. 
OMITTAG (which is essentially an error-recovery mechanism embodied in SGML to the point where if you can use it to recover, the trigger is not considered an error after all) was, I believe, introduced for "ease of use for hand-coders". 
Are you asking for something like that? 
It sounds like you're arguing the other way. 
Which may be a good idea, but the user might argue that it's not making XML easier to use. 
Dave Peterson SGMLWorks! 
davep@acm.org 
I guess I mean that it's not only easy for application developers to implement XML but also for document creators to produce well-formed XML, even when they are coding by hand. 
It just isn't that hard. 
Earlier, Paul Prescod argued that the goal with XML should be correct documents, and I think that's right. 
And Tim's compelling point is that XML's well-formedness characteristics are easy to achieve. 
I'm not asking for anything like OMITTAG. 
You're right; I'm arguing the other way. 
OMITTAG makes sense in a setting where validation is a constant concern, but in XML validation is optional, and something like OMITTAG could be problematic without a DTD's context in which to interpret markup. 
If in XML you have neither a DTD nor reliable standards for well-formedness, you don't have much. 
I doubt that XML will lose much of its constituency if XML hand coders are required to enter closing tags. 
I think those customers will rely on parsers, "lint"-type tools or strength of character to insure well-formedness. 
If XML proliferates as much in the next 18 months as some people predict, there will be desirable markets for robust XML authoring tools. 
The other "ease of use"-seeking customers will probably not be unserved. 
Look at what GRIF has done already with their XML+CSS tool. 
It's just the beginning. 
-Todd. 
Thus making it *illegal* to develop something like CheckMark. 
Who benefits from the lack of such products? 
The user? 
I think not. 
When a user interrupts an XML page transfer. 
Is it necessary to inform the user in this case? 
When an XML processor interrupts a page transfer. 
Doesn't XML-Link allow "auto-linking"? 
If so, is it a *requirement* that an XML browser parse all XML pages in their entirety or is it acceptable to parse and display a portion of a page and follow an auto-link? 
If this is allowed, must the application report a well-formedness error or must it continue to parse the remainder of the "original" page to ensure well-formedness? 
These seem like times that *I* might not want to receive error messages. 
What has gone wrong in these circumstances that demands an error message? 
Nothing as far as I can tell. 
The user is experiencing exactly what is *intended* by a combination of the (possibly well-formed or valid) content and application. 
I don't see an error here - reportable or otherwise. 
I'm not advocating a race to the bottom. 
I'm advocating for the user and acceptance of XML. 
I'm not convinced that users benefit by error messages in all 
cases. 
Let the application vendors and the *users* decide. 
I don't think anyone is advocating tolerance for gross error, as we've all seen what that has done with HTML. 
I think some of us are simply trying to leave *exactly* what happens up to the vendors. 
Some sort of error notification is essential, but in certain applications the method of error "recovery" may require sending the XML source on through, others sudden death makes sense. 
In a financial application, it may be that the actual user does not receive the error message; it's sent on to central office where they send an error message to the ATM. 
And "sudden death" seems to indicate that the central office wouldn't receive the contents of the broken file even while the customer shouldn't. 
Point is, the wide variety of XML applications (some with UI, some without) makes specific requirements on error handling more a limiting factor in the specification than seems necessary. 
Error notification is a "must", but *how* it is done is application-specific. Error recovery is a "maybe", depending on the application. 
Murray Murray Altheim, SGML Grease Monkey altheim@eng.sun.com 
Member of Technical Staff, Tools Development &amp; Support Sun Microsystems, 2550 Garcia Ave., MS UMPK17-102, Menlo Park, CA 94043 USA "Give a monkey the tools and he'll build a typewriter." 
Absolutely not! 
If the XML spec mandates any kind of error recovery policy, then illegal documents containing errors detectable by that policy will in effect become legal XML. 
If a document is illegal according to the letter of the law, but all applications are required to interpret it in the same way, then it is for all practical purposes "legal" after all. 
A principal goal of XML is that it be easy to parse. 
Any mandated error recovery policy will make it harder to parse, with no real benefit to authors or users. 
Tim's proposal (paraphrased) that "an application _must_ barf if it sees an error" is perhaps too strict; I would argue that anything other than "an application _may_ barf if it sees an error" is also too strict. 
--Joe English jenglish@crl.com 
