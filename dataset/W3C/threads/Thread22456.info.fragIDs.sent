Hi! Duncan Grisby from ORL (the creators of omniORB), has warned me about using wstring in my IDL code for the reasons listed below. 
Please consider using sequences of unsigned short instead of wstring in the DOM spce: 
As for wchar and wstring support in omniORB, it's been done, and should be publicly available soon. 
However, I would advise sticking to a sequence of unsigned shorts for a couple of reasons. 
Firstly, sequences give you a length field, and bounds checking on member access, which you don't get with string or wstring. 
Secondly, the CORBA wchar spec is a complete mess -- the on-the-wire format is defined to be anything between 1 and 4 bytes per character, or variable bytes per character; the language mapping is system- specific -- on Solaris, wchar maps to a 4-byte character, but on Windows it's 2 bytes, so as to fit in with system libraries. 
I don't think Linux has sufficient support for such things for it to be defined at all. 
All in all, there's _lots_ of overhead to wchar, which I think is best avoided. 
The (non-)overhead of using a sequence of unsigned long: 
The overhead should be quite small, especially if the optimiser is good. 
If you think the overhead of the bounds checking is too much, you can get at the C++ array inside the sequence with the proprietary NP_data() function. 
(NP stands for non-portable. 
Look at omniORB2/seqtemplates.h.) The CORBA spec has no such function, but most ORBs allow you to do it. 
With a bit of macro cleverness, you could make the code portable between ORBs. 
Doing this, you still get the advantage that you know the length of your wstring without having to iterate over its members. 
The relevant bits of the spec are at: ftp://www.omg.org/pub/docs/formal/98-02-08.pdf page 25 and ftp://www.omg.org/pub/docs/formal/98-02-18.pdf pages 5, 6, 10, 11 
Cheers ANOQ of the Sun / Johnny Andersen E-Mail: anoq@vip.cybercity.dk or anoq@berlin-consortium.org Homepage: http://users.cybercity.dk/~ccc25861/ 
Or better yet, use the "wstring" type but stipulate that the characters encoded in it must just be regular UCS-4 characters, perhaps constrained by the XML or HTML specs as appropriate. 
Then we still don't get that length field etc. 
I vote for 2 typedefs domchar and domstring (perhaps other names but...) 
You'll note that a nonconventional mapping of IDL to Java is in use, and the same is true for IDL to JavaScript. 
Arrrgh! 
Is this supposed to be a standard or just Yet Another Non-Standard (tm)!? 
The advantage of defining APIs in IDL, is that it it possible to grap any stub compiler for 
generating an API in any programming language. 
Then you just use CORBA to use, say a C++ implementation of DOM from Smalltalk or whatever. 
I'm still waiting for an IDL- SML97 mapping, so that I can use a C++ implementation of DOM from SML97, but that's another story... 
I think it is very unattractive to use a Java API which "more or less" maps to the DOM IDL files. 
Dot y'all agree with this? 
Cheers ANOQ of the Sun / Johnny Andersen E-Mail: anoq@vip.cybercity.dk or anoq@berlin-consortium.org Homepage: http://users.cybercity.dk/~ccc25861/ 
Hello XML'ers I am new to both CORBA and XML so my question might be off target. 
This discussion of wchar/wstring in IDL worries me. 
If it is true that the various operating systems implement wide characters in various byte 
lengths and encodings, how does proposing that a sequence be used in the DOM IDL help anything? 
It seems to me that by using the sequence in the DOM IDL spec. 
you are then asking each implementor to handle the data 
marshaling/unmarshaling for wide characters to/from any other platform. 
Is this true? 
Many thanks. 
-- Bennett Bennett Smith 
It would seem to be that either a) one is calling a DOM function via CORBA,and the ORB will handle the marshalling/translation .. or b) one is calling DOM from the same platform, so whatever wstring maps to on that 
platform is the same on both the calling side and the DOM implementation side. 
So I don't see that this is a problem, but maybe I'm missing something. 
Mike Champion 
And I don't think there's an IDL-to-ECMA Script mapping yet either. 
The reason we did the handcrafted Java bindings was because we thought the DOM interfaces, in general, don't need all the CORBA overhead. 
Lauren 
The DOM abstractly assumes a Unicode implementation. 
It shouldn't give any overhead to use the correct language mapping. 
You don't need to use CORBA, just make sure that the API is the same as if you were using CORBA, so that you won't end up having multiple "standards" / APIs. 
You might need some CORBA::Long, CORBA::Short etc. types etc., but I think that it really. 
Cheers ANOQ of the Sun / Johnny Andersen E-Mail: anoq@vip.cybercity.dk or anoq@berlin-consortium.org Homepage: http://users.cybercity.dk/~ccc25861/ 
As I see it, you will only be converting text when reading input 
from somewhere (an XML-file or whatever) and building a DOM hierachy. 
You might need this conversion anyway, depending on the file format etc. 
Then there's a conversion when rendering 
text output from a DOM hierachy, but that might still be necessay, depending on how / where it is rendered. 
If at least the DOM spec. is consitent, you have rules to follow. 
Cheers ANOQ of the Sun / Johnny Andersen E-Mail: anoq@vip.cybercity.dk or anoq@berlin-consortium.org Homepage: http://users.cybercity.dk/~ccc25861/ 
A message I meant to send to the entire list... 
OK, I have seen this... 
I just thought it was temporary, because your compiler / whatever didn't have wstrings yet (omniORB doesn't either...) 
I was planning to have this automatically generated in the IDL binding (which I am in the process of cleaning up so that omniORB will handle the DOM IDL correctly). 
Perhaps we should define this as DOMString instead? 
At least not wstring, since this is a reserved IDL word... Should this also go to the DOM-list? 
:) Cheers ANOQ of the Sun / Johnny Andersen E-Mail: anoq@vip.cybercity.dk or anoq@berlin-consortium.org Homepage: http://users.cybercity.dk/~ccc25861/ 
