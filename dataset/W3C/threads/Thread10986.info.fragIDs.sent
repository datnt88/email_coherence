Questions about attribute declarations I'd like to see discussed while the voting booth is still open: * Should XML retain SGML's prohibition on multiple attribute-list declarations for the same element (11.3.1) or on multiple declarations for the same attribute (11.3.2)? 
* Should XML change the set of types available for attributes? 
E.g. by suppressing NAME(S), NUMBER(S), NMTOKEN(S), NUTOKEN(S) and adding constraints in the form of regular expressions, ISO dates, language-code, external-id, typed IDREF, ... (7.9.4, 11.3.3) 
* Should XML remove SGML's prohibition on multiple ID or NOTATION attributes on the same element (11.3.3)? 
* Should XML allow more than one enumerated type (name-group declared value) to contain the same possible value (11.3.3)? 
(Since XML seems unlikely to support SHORTTAG, this restriction seems pointless in XML. 
It does affect the translation of XML DTDs into SGML.) 
* Should XML define new specific methods of inferring values for attributes with no attribute-value specifications (11.3.4)? 
E.g. INHERITED, to signify that the value is taken from the attribute of the same name (and type) on the smallest enclosing element with such an attribute. 
(This is the method normally used for setting the default of language attributes, among others; currently it has no SGML keyword.) 
* When given an incomplete DTD, should XML parsers assume all attributes are implicity declared CDATA, or should some attribute names cause other assumptions (e.g. attributes with the same name as some type of declared value might be assumed to have that declared value)? 
Charles, didn't you once describe a bunch of impending changes to 8879 
in attribute definitions? 
Could you elaborate on the pertinent ones here? 
I'd suggest that we stick within whatever changes Charles feels will be in the revision to 8879. 
I'm comfortable with "jumping ahead" here as Tim put it. 
If anything additional is needed, then let's try to stick with a meta-DTD approach wherein some of the attribute names are significant. 
I would love to have more than one ID on an element for example, but we could also add "XML-id" as an attribute name. 
An SGML editor would have to understand the semantics of the XML meta-DTD to really validate the doc, but at least it wouldn't preclude the use of a stock SGML editor. 
bob Robert Streichstreich@slb.com Schlumbergervoice: 1 512 331 3318 
While I like having multiple attribute list declarations for the same element type, I think that we should not do it for XML, only because it removes one more thing that would have to be mangled to go from XML to SGML. 
I'm not sure what the value of suppressing the listed types is. 
I don't see that they add significant complexity and they are useful. 
The only way we could do lexical type constraints would be to do what HyTime does with Lextype, otherwise we break SGML. 
The HyTime lextype mechanism lets you use any expression language you want, but we'd still have to define one or pick one. 
Seems like a big can of worms that would only complicate validation. 
I could see an argument for having multiple IDs for a single element (different names used in different domains), although I'm hard pressed to see this as so compelling that we would accept the cost of incompatibility (when translating to SGML, which ID attribute would you use?). 
For notations, it normally seems meaningless to consider the content of an element to be in more than one notation at the same time, but I could see that there might be times where this is the case. 
But again, it doesn't seem compelling relative to the cost of incompatibility. 
These are certainly good issues for the SGML revision, though. 
If we don't allow shorttag, then I don't see a problem here because the attribute can always be redeclared as "NAMES" with a corresponding lexical model, so there's not a serious compatibility issue. 
No. There are too many possible variations in how you might want inheritance to work. 
To make this complete, you need a way to say, for each attribute of each element type, what the precise inheritance rules are, something like HyTime's default value list. 
Unless we want to accept default value list, I think such a mechanism is beyond the scope of XML. 
It's something we should definitely think about for the SGML revision, though. 
Given that DTD-less parsing means you don't know which attributes are #IMPLIED, it seems like the potential for unintended side effects is very high if you do define an inheritance rule or rules. 
Having said that, it might be useful to define some conventional attribute form names that have defined inheritance rules, e.g. "language". 
Having conventional attribute names would require some sort of renaming mechanism such as the "HyNames" mechanism used in HyTime and formalized as the "ArcNamrA" attribute in architectures (see architecture control attributes). 
While Martin Bryan doesn't like it, I think it's reasonable to define a set of conventional attribute names: ID, ENTITY, NOTATION, IDREF(S). 
Behaves the way most people would expect them to behave and removes the need to declare the attributes in these cases. 
Doesn't prevent declaring attributes with other names but does prevent using these attribute names for something other than their conventional interpretation. 
A renaming mechanism could be used to map your own names to these conventional names, e.g.: When there's a DTD, the XMLNames (the "architecture renaming attribute") could be fixed, but when there's no DTD, you'd have to specify it. 
(Which raises the posibility that a careless author could do something different on two different elements: Ugh. 
Would probably have to make it a reportable XML error to map the same conventional attribute name to different instance names in the same document.) 
Cheers, E. W. Eliot Kimber (kimber@passage.com) 
Senior SGML Consultant and HyTime Specialist Passage Systems, Inc., (512)339-1400 10596 N. Tantau Ave., Cupertino, CA 95014-3535 (408) 366-0300, (408) "If I never had existed, would you still remember me?..." --Austin Lounge Lizards, "1984 Blues" 
Should XML change the set of types available for attributes? 
I'd like to see NAME, NUMBER and NUTOKEN retained, but could live without NMTOKEN and the plural versions. 
(NAME is important as it is the only way to get over the problems of non-unique IDs!) 
As long as the names are remappable I have no problems. 
My objection is that id has a different meaning in some languages - is does not mean identifier. 
Similarly a German may prefer DING to ENTITY or ZIECHEN for NOTATION. 
Why force XML markup to be in English? 
(We are becoming xenophobic in our discussions!) Martin Bryan, The SGML Centre, Churchdown, Glos. 
GL3 2PU, UK 
A minor point, if we're serious about leaping ahead: How about exapnding the syntax of NUMBER a bit, so that at least negative numbers are OK, and arguably decimals as well. 
It's always seemed odd to me that these are not included, and it regularly gets in my way. 
ht 
Is this in scope? 
If so... * you would need to handle decimals like 30 000 000,512 or 30.000.000,512 or 30 000,000?512 (that's a raised dot) * is .3 allowed? 
How about -.2e-.1 (in FORTRAN-style EXP notation)? 
I'd rather see NUMBER left as it is in SGML, dropped from XML, and replaced with something like a simplified HyLex: !AttList Person Salary /^[$?][0-9]+(\.[0-9][0-9])?/ 
#REQUIRED (the 8-bit character is a pound-sterling, perhaps I should've used an entity!) This doesn't cover multilingual documents, but at least it doesn't wire a single number representation into a standard either. 
This could eaily be extended to content: !Element postCode - - (/^[A-Z][A-Z]+[0-9]?( [0-9]+[A-Z]+)?$/) !Element CAPITALS - - (/[:upper:]/|smalls)* Element smalls (/[:lower:]/|CAPITALS)* where /.../ is like PCDATA except matching the given regexp. 
For conversion to SGML, you'd replace /.../ with PCDATA for an element and with CDATA for an attribute. 
That's a down-conversion, of course, although you could also add HyLex expressions I suppose.... Lee 
This is something I've also wanted for a long time. 
Having this would make it easy to validate not only thr structure, but also validate the lexical structure of the data: great for database applications. 
The typical response to this is that "this is an application issue". 
I should not that the "doesn't cover multilingual" can be removed easily by fixing the coded character set, and then defining a set of standard character classes based on that (like DIGIT, NAMESTART etc). 
Differences in numeric formats and whatnot would make it somewhat complicated in the general case, but in cases where there would be a mixture (for example, HTML) it would be better to require a normalised form, as I proposed to HTML-WG a long time ago. 
Note, this is still just a DTD issue and application convention. 
One possible motivation for removing the restriction is to make it convenient for a document entity to include declarations for just those DEFAULT and FIXED attributes necessary for meaningful processing in the absence of (the rest of) the DTD. 
Am I wrong in thinking that the issue of how a parser is to obtain these values has not been properly explored? 
-Bill William D. Lindsey blindsey@bdmtech.com 
