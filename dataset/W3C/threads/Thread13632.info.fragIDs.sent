We have been working on a means of storing the accessibility evaluation of 
an HTML document. 
Our current approach is to store the evaluation in an XML 
document. 
The XML doc contains the original HTML with any accessibility problems marked with new XML elements. 
For example, the following snippet 
contains the evaluation of an IMG element that is missing the 'alt' 
attribute: 
The XML file that contains the above evaluation is attached to this message. 
Each accessibility problem is given a code number so it may be referenced. 
A report tool can take the XML document and prepare a report of 
accessibility problems. 
A repair tool can take the entire document, or pieces of the document, make 
repairs then update the original XML document. 
The original XML document can be easily converted back to HTML by XSLT or a 
simple program. 
If the group can agree on a set of specifications then all tool makers can 
generate and use the same XML evaluation document. 
Comments? 
Chris 
What do you propose to do when the sections of original-HTML hypertext that 
give rise to the problem assertions overlap? 
Did you consider using X-Path to mark ranges in the source, and leave the 
source in a separate file?? [You would have to first tidy the HTML into XHTML 
1.0 so the X-Paths are well posed, but that works, doesn't it (I mean tidy)?] 
Did you consider using RDF for the problem assertions? 
If we are going to interleave problems and original content in one XML 
document, why not use namespaces to distinguish them, as opposed to burying 
proper hypertext in PCDATA inlines? 
This is not sustainable.? Use URI references to AERT clauses, using an URL for 
the AERT which is specfic to a dated version thereof. 
The early points are aesthetic, questions of highest-and-best use of XML. 
The final point [URI-references for identification of the problem] is a must.? 
I would want three good reasons before I fought this one all the way to the 
Director's desk.? 
This is in Tim's eyes the capstone principle of the Web.? 
You 
don't take the dictionary of error cases private by using an opaque, private 
numbering scheme where there is a Web-compatible means to identify them by reference to the WAI utterance where they are authoritatively defined. 
Al 
Thanks for your comments. 
We're still developing the software so there is 
lots of room to change. 
I've heard from Tim Springer that SSB uses an XML doc in their evaluation 
process and he will post some details to the list. 
Maybe there will be some new ideas there too. 
Al asked: 
that 
We're thinking of using attributes for each problem type, like: (Note: this is different from my original example.) 
Al asked: 
XHTML 
tidy)?] 
No we haven't considered this. 
We wanted the evaluation and the original document in the same file so they wouldn't get out-of-sync with each other. 
(I'm not familiar with x-path. 
Can you give me a link to some info?) 
Al asked: 
We're thinking about it. 
There has been some work and discussion on using RDF for this purpose on the list. 
Creating attributes to define the problem was the easiest thing to get going. 
Al stated: 
referenced. 
for 
I think you have misunderstood the purpose of the code number. 
The code 
number is only relative to the particular document. 
It's used to refer to a particular problem. 
For example: A repair tool is fed problem "1234" from the evaluation document. 
The repair tool fixes the problem and returns some text and the problem number "1234". 
The evaluator knows to replace the text in problem "1234" with the new text. 
I think that you may be referring to our problem type attribute (example missing_alt_text="yes"). 
These directly map to the AERT document and we could use AERT technique numbers instead of text strings. 
Chris 
of 
XML 
that 
XHTML 
tidy)?] 
burying 
message. 
referenced. 
for 
must. 
the 
private 
make 
a 
can 
AG:: Yes 
AG:: I think it best you use xml:id attributes in this case. 
AG:: That's good, but we should have hard-code machine interpretable identification (i.e. exact and specific URI-references) for those things. 
Compare with the work on accounting conformance in RDF. 
Al 
Apologies all, I am in the midst of trying to ship a version 2.1 of our evaluation tool. 
I spent all week staring at the XML violation export code and thinking about how best to capture the data. 
I should be able to put together a decent post on this subject before the end of the week. 
TimS [mailto:w3c-wai-er-ig-request@w3.org]On 
Behalf Of Chris Ridpath I've heard from Tim Springer that SSB uses an XML doc in their evaluation process and he will post some details to the list. 
Maybe there will be some new ideas there too. 
Al asked: 
that 
We're thinking of using attributes for each problem type, like: (Note: this is different from my original example.) Al asked: 
XHTML 
tidy)?] No we haven't considered this. 
We wanted the evaluation and the original document in the same file so they wouldn't get out-of-sync with each other. 
(I'm not familiar with x-path. 
Can you give me a link to some info?) Al asked: 
We're thinking about it. 
There has been some work and discussion on using RDF for this purpose on the list. 
Creating attributes to define the problem was the easiest thing to get going. 
Al stated: 
referenced. 
for 
I think you have misunderstood the purpose of the code number. 
The code number is only relative to the particular document. 
It's used to refer to a particular problem. 
For example: A repair tool is fed problem "1234" from the evaluation document. 
The repair tool fixes the problem and returns some text and the problem number "1234". 
The evaluator knows to replace the text in problem "1234" with the new text. 
I think that you may be referring to our problem type attribute (example missing_alt_text="yes"). 
These directly map to the AERT document and we could use AERT technique numbers instead of text strings. 
Chris ----- Original Message ----- 
of 
XML 
that 
XHTML 
tidy)?] 
burying 
message. 
referenced. 
for 
must. 
the 
private 
make 
a 
can 
All- I have put together a short set of ideas for a what a possible XML evaluation document could look like. 
To begin the conversation here is a quick proposal of what such a document could look like: Primarily I would suggest initially limiting the scope of the evaluation document to capturing data relating solely to the violations for a particular page, rather than combining the page itself and violation data. 
This will limit the scope of the document, solely to evaluating the accessibility of a page. 
The reason I would give for this is that the response we [SSB Technologies] have been getting from the market is that developers seem to want evaluation independent of repair. 
For most sites that have dynamically produced content evaluation and repair are very distinct issues and data portability between the two has limited appeal. 
If we preserve the original document state we are assuming that doing so will allow us to create separate evaluation and repair tools that use XML to transport data between. 
My experience, however, has been that the vast majority of web developers consider evaluation and repair separately. 
Thus a schema that combines the two may well just add more unnecessary work. 
When evaluating a document the developer wants to know what the issues are. 
They want summary reports and information sorted by priority. 
Evaluation data should answer the questions: 1.What must I do? 
2.In what order must I do it in? 
To this end a document that orders violations linearly by way of the original HTML v. by priority weakens our ability to address these questions succinctly. 
Concretely assuming we create an XML evaluation file [XML of the form proposed by Chris] that maintains a version of the original HTML document. 
With that document one cannot produce priority ordered or summary reports via XSLT. 
This is due to the current constraints of XPath and XSLT. 
(I won't get into the why of this here but would be happy to discuss it off the list). 
Whereas if the evaluation document is focused on report production (which is what I think the demand is for) such a report can be produced. 
With that said I must admit that a solution that retains the original document would be the most elegant. 
While I think it may not be *totally* necessary it does seem to be the best solution. 
My only concern would be that in preserving the original document we retain a way to extract "reporting" information from the underlying XML doc via XSLT. 
The second issue I would like to address is the DTD / schema for the document. 
I believe that it is important that all evaluation tool makers should be able to extend the document to export custom data. 
To this end it is important that we maintain an unrestrictive document. 
I am not well versed in DTDs or XML schemas to know the technical language for this but my proposal is simple. 
Define a base set of required elements &amp; attributes but allow tool authors to add additional elements &amp; attributes while maintaining a valid document. 
The third issue is that of having a particular unique identifier for each possible violation. 
I am open to this however there are some important considerations. 
Primarily we currently divide the WCAG based on the underlying architecture of the program. 
To give an example our program flags "Images without alt attributes", "Images with null alt attributes" and "Images with suspicious alt attributes" all as different violations. 
We do this because it gives the most detail to our clients as well as mapping to our programmatic architecture. 
Is this division dictated by the W3C? 
No. Are we altering the WCAG in doing so? 
No, just being practical in our approach to dividing it. 
So what does this mean? 
It means that the division of violations can be subjective based on underlying programmatic architecture. 
Thus if we get into the business of assigning particular violation identifiers we have to be careful to either make them: 1. Map to the architecture of evaluation engines or 2. Independent of the architecture of evaluation engines Going the later route means that we will have to be less specific, obfuscating the nature of the problem. 
Going the former means that we are writing practical specifications and we may have to make tradeoffs based on current technical feasibility. 
Pursuant to the above, another question arises from defining specific divisions of the WCAG. 
Who should maintain the text that describes the violation? 
I envision these descriptions in the vein of those included with Bobby and A-prompt. 
I would prefer that the W3C maintain descriptions of violation problems. 
The idea being that if the W3C maintains the descriptions it will avoid re-writes of the guidelines that could "weaken" the accessibility violation. 
To give an example company eAccess (I have no idea if this is a real company. 
Hope note) builds an evaluation product that tests all of the WCAG. 
They profess to be compliant with the WAI but include their own descriptions of accessibility. 
For IMG alt violations their descriptive text mentions that "page authors should include alt tags only if they feel like it, or on every other Tuesday." 
Obviously an extreme example but I believe tinkering with the wording of the violations should be out of the hands of companies trying to evaluate accessibility. 
Finally (sorry this is so long) it makes sense to store the elements in the evaluation document (however that ends up) in XHTML. 
The arguments for this our fairly simple: 1. 
It is a more accurate representation than storing them as CDATA 2. It should be fairly easy to do with an evaluation engine that builds a DOM (Document Object Model) 3. It will speed adoption of XHTML Okay that's it! 
I have attached to this e-mail copies of the proposed XML file as well as a copy of the XML we currently produce with InSight (our evaluation engine). 
While by no means complete they should both be good food for thought. 
TimS [mailto:w3c-wai-er-ig-request@w3.org]On 
Behalf Of Chris Ridpath We have been working on a means of storing the accessibility evaluation of an HTML document. 
Our current approach is to store the evaluation in an XML document. 
The XML doc contains the original HTML with any accessibility problems marked with new XML elements. 
For example, the following snippet contains the evaluation of an IMG element that is missing the 'alt' attribute: The XML file that contains the above evaluation is attached to this message. 
Each accessibility problem is given a code number so it may be referenced. 
A report tool can take the XML document and prepare a report of accessibility problems. 
A repair tool can take the entire document, or pieces of the document, make repairs then update the original XML document. 
The original XML document can be easily converted back to HTML by XSLT or a simple program. 
If the group can agree on a set of specifications then all tool makers can generate and use the same XML evaluation document. 
Comments? 
Chris 
Hi all. 
I put together a sample XML file of conformance to specs as one of the form field values at http://www.w3.org/1999/11/11-WWWProposal/atagdemo in the form of RDF. 
The simple schema outlined there can be readily adapted (I have an action item from somewhere to do it, and there was a thread here on how to) and can already be used to specify a lot of the stuff required, by making the conformance statements refer to AERT URIs instead of ATAG checkpoints (as in my example) or just being XML statements (as in Chris') Because this stuff is metadata, and uses URIs as pointers it doesn't need to involve editing the document itself at all. 
Charles McCN All- I have put together a short set of ideas for a what a possible XML evaluation document could look like. 
To begin the conversation here is a quick proposal of what such a document could look like: Primarily I would suggest initially limiting the scope of the evaluation document to capturing data relating solely to the violations for a particular page, rather than combining the page itself and violation data. 
This will limit the scope of the document, solely to evaluating the accessibility of a page. 
The reason I would give for this is that the response we [SSB Technologies] have been getting from the market is that developers seem to want evaluation independent of repair. 
For most sites that have dynamically produced content evaluation and repair are very distinct issues and data portability between the two has limited appeal. 
If we preserve the original document state we are assuming that doing so will allow us to create separate evaluation and repair tools that use XML to transport data between. 
My experience, however, has been that the vast majority of web developers consider evaluation and repair separately. 
Thus a schema that combines the two may well just add more unnecessary work. 
When evaluating a document the developer wants to know what the issues are. 
They want summary reports and information sorted by priority. 
Evaluation data should answer the questions: 1.What must I do? 
2.In what order must I do it in? 
To this end a document that orders violations linearly by way of the original HTML v. by priority weakens our ability to address these questions succinctly. 
Concretely assuming we create an XML evaluation file [XML of the form proposed by Chris] that maintains a version of the original HTML document. 
With that document one cannot produce priority ordered or summary reports via XSLT. 
This is due to the current constraints of XPath and XSLT. 
(I won't get into the why of this here but would be happy to discuss it off the list). 
Whereas if the evaluation document is focused on report production (which is what I think the demand is for) such a report can be produced. 
With that said I must admit that a solution that retains the original document would be the most elegant. 
While I think it may not be *totally* necessary it does seem to be the best solution. 
My only concern would be that in preserving the original document we retain a way to extract "reporting" information from the underlying XML doc via XSLT. 
The second issue I would like to address is the DTD / schema for the document. 
I believe that it is important that all evaluation tool makers should be able to extend the document to export custom data. 
To this end it is important that we maintain an unrestrictive document. 
I am not well versed in DTDs or XML schemas to know the technical language for this but my proposal is simple. 
Define a base set of required elements &amp; attributes but allow tool authors to add additional elements &amp; attributes while maintaining a valid document. 
The third issue is that of having a particular unique identifier for each possible violation. 
I am open to this however there are some important considerations. 
Primarily we currently divide the WCAG based on the underlying architecture of the program. 
To give an example our program flags "Images without alt attributes", "Images with null alt attributes" and "Images with suspicious alt attributes" all as different violations. 
We do this because it gives the most detail to our clients as well as mapping to our programmatic architecture. 
Is this division dictated by the W3C? 
No. Are we altering the WCAG in doing so? 
No, just being practical in our approach to dividing it. 
So what does this mean? 
It means that the division of violations can be subjective based on underlying programmatic architecture. 
Thus if we get into the business of assigning particular violation identifiers we have to be careful to either make them: 1. Map to the architecture of evaluation engines or 2. Independent of the architecture of evaluation engines Going the later route means that we will have to be less specific, obfuscating the nature of the problem. 
Going the former means that we are writing practical specifications and we may have to make tradeoffs based on current technical feasibility. 
Pursuant to the above, another question arises from defining specific divisions of the WCAG. 
Who should maintain the text that describes the violation? 
I envision these descriptions in the vein of those included with Bobby and A-prompt. 
I would prefer that the W3C maintain descriptions of violation problems. 
The idea being that if the W3C maintains the descriptions it will avoid re-writes of the guidelines that could "weaken" the accessibility violation. 
To give an example company eAccess (I have no idea if this is a real company. 
Hope note) builds an evaluation product that tests all of the WCAG. 
They profess to be compliant with the WAI but include their own descriptions of accessibility. 
For IMG alt violations their descriptive text mentions that "page authors should include alt tags only if they feel like it, or on every other Tuesday." 
Obviously an extreme example but I believe tinkering with the wording of the violations should be out of the hands of companies trying to evaluate accessibility. 
Finally (sorry this is so long) it makes sense to store the elements in the evaluation document (however that ends up) in XHTML. 
The arguments for this our fairly simple: 1. 
It is a more accurate representation than storing them as CDATA 2. It should be fairly easy to do with an evaluation engine that builds a DOM (Document Object Model) 3. It will speed adoption of XHTML Okay that's it! 
I have attached to this e-mail copies of the proposed XML file as well as a copy of the XML we currently produce with InSight (our evaluation engine). 
While by no means complete they should both be good food for thought. 
TimS [mailto:w3c-wai-er-ig-request@w3.org]On 
Behalf Of Chris Ridpath We have been working on a means of storing the accessibility evaluation of an HTML document. 
Our current approach is to store the evaluation in an XML document. 
The XML doc contains the original HTML with any accessibility problems marked with new XML elements. 
For example, the following snippet contains the evaluation of an IMG element that is missing the 'alt' attribute: The XML file that contains the above evaluation is attached to this message. 
Each accessibility problem is given a code number so it may be referenced. 
A report tool can take the XML document and prepare a report of accessibility problems. 
A repair tool can take the entire document, or pieces of the document, make repairs then update the original XML document. 
The original XML document can be easily converted back to HTML by XSLT or a simple program. 
If the group can agree on a set of specifications then all tool makers can generate and use the same XML evaluation document. 
Comments? 
Chris W3C Web Accessibility Initiative http://www.w3.org/WAI Location: I-cubed, 110 Victoria Street, Carlton VIC 3053, Australia September - November 2000: W3C INRIA, 2004 Route des Lucioles, BP 93, 06902 Sophia Antipolis Cedex, France 
Tim, Thanks much for your proposal! 
Here's couple of intitial reactions First, a minor practical note: Would you resend the xml attachment with the suffix changed to .txt ? 
Otherwise, I get a browser error when I try to open it (browser insists on an XSL stylesheet). 
Very good point about difficulty of "repair" when the content is generated programmatically. 
As far as your note that combining the violations with the source creates problems of re-ordering, because of lack of functionality with XSLT and XPATH. 
Could that be handled with a separate filter (e.g. Perl using XML::Parser)? 
There's the other method of pointing into the source with XPATH, like Al mentioned. 
Would these be semantically equivalent, e.g. you could convert form one into another? 
Or are there some fundamental differences in capabilities from those schemes? 
Len Leonard R. Kasday, Ph.D. Institute on Disabilities/UAP and Dept. of Electrical Engineering at Temple University (215) 204-2247 (voice) (800) 750-7428 (TTY) Chair, W3C Web Accessibility Initiative Evaluation and Repair Tools Group The WAVE web page accessibility evaluation assistant: 
Leonard - I have inlined the two documents (see below). 
This should be a LCD (Lowest Common Denominator) for transmission. 
If you would like the originals I have put them up at the following URLS: The mime type will be set to text however IE will render them as XML. 
Hope that helps! 
----Proposed XML---- ----End Proposed XML---- ----Current SSB Output---- LONG_DESCRIPTION AREAs in image maps need to have an alt attribute briefly describing what the AREA points to. 
/LONG_DESCRIPTION ----End SSB Output---- [mailto:w3c-wai-er-ig-request@w3.org]On 
Behalf Of Leonard R. Kasday Tim, Thanks much for your proposal! 
Here's couple of intitial reactions Very good point about difficulty of "repair" when the content is generated programmatically. 
As far as your note that combining the violations with the source creates problems of re-ordering, because of lack of functionality with XSLT and XPATH. 
Could that be handled with a separate filter (e.g. Perl using XML::Parser)? 
There's the other method of pointing into the source with XPATH, like Al mentioned. 
Would these be semantically equivalent, e.g. you could convert form one into another? 
Or are there some fundamental differences in capabilities from those schemes? 
Len Leonard R. Kasday, Ph.D. Institute on Disabilities/UAP and Dept. of Electrical Engineering at Temple University (215) 204-2247 (voice) (800) 750-7428 (TTY) Chair, W3C Web Accessibility Initiative Evaluation and Repair Tools Group The WAVE web page accessibility evaluation assistant: 
