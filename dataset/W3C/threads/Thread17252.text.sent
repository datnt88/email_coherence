From: Kynn Bartlett [17]kynn@idyllmtn.com 
Subject: Can Browsers Attempt to Render Broken XHTML? 
Where's the requirement that SGML-based HTML should not display an invalid Strict document? 
You're right, there is no MUST NOT clause in the Conforming User Agents section of the HTML 4.01 spec.[1] 
Nor is there one in the XHTML 1 spec.[2] In fact, they're pretty much identical in terms of recovering from elements and attributes they don't understand. 
The XHTML spec says that it has to parse the document as XML, but doesn't say thou shalt not render if it fails. 
Tantek ?elik 
http://tantek.com/log/ graciously authorizes me to pass on his response: This is much ado about nothing. 
Or at least a lot more noise than signal. 
If a document is sent as text/html, no matter whether the insides look like, XHTML or not (e.g. XHTML1.0 document written to the Appendix C compatibility guidelines), the browser can be quite reasonably expected to render broken content. 
If a document is sent as text/xml or application/xml or application/xhtml+xml, then the browser can be expected to NOT "pretend as if it has a structured document" when it sees broken content. 
Of course most modern operating systems permit the user to change the type of a document file on their machine, thus it is reasonable for a browser to give that option to the user for documents received over the web as well. 
E.g. a browser could take a broken XML or XHTML document, and provide the user the option to change the type of the document to text/html and try again. 
I don't see anything in any W3C spec that would prevent a UA from having this kind of user feature. 
Tantek Joe Clark | joeclark@joeclark.org 
Accessibility http://joeclark.org/access/ 
Weblogs and articles http://joeclark.org/weblogs/ 
Automating the process that Tantek suggests is preferable, the dialogue is an unnecessary burden, life is short. 
The purpose of explicitly agreeing that invalid code is not to be rendered, may be to prevent embedded devices including mobile phones rendering content, where they don't have any code to cope with errors. 
Jonathan my previous email has a little more detail on this. 
My understanding was that it was simply to prevent XML structure being totally compromised because authors only used a browser to validate, as has happened to the structure of HTML. 
