TABINDEX is very useful when designing HTML dialogs and applications. 
For example, an "OK" button may appear towards the top of the HTML document, but the button needs to be near the end of the tab order. 
If you think of HTML as pages and forms, you are right - TABINDEX isn't used often. 
I too have had a difficult time coming up with a practical example for using TABINDEX in a FORM. 
I have to design a very complex and poorly ordered form to make TABINDEX useful, and it seems much easier to just design the form well from the start. 
However, I have started using TABINDEX to provide the user with a way of easily skipping over any NAVIGATION bar or advertising links that may lurk at the top of my pages. 
I generally assign TABINDEX=1 to what I feel is the most important link on the page (quite often the "Next Page" link), and go on from there as systematically as I can. 
Usually the last "n" tab stops correspond to the standard nav-bar (or nav-bar text alternative) links. 
Happy holiday season to all, Chuck Letourneau 
It seems to me that providing a tabindex which runs coutner to the flow of the page may be fairly disruptive. 
Thoughts? 
--Charles McCathieNevile - mailto:charles@w3.org 
Starling Access Services "Access A World Of Possibility" e-mail: info@starlingweb.com 
URL: http://www.starlingweb.com 
Chuck has raised this issue before. 
What should we be doing about HTML applications? 
Currently they are briefly covered in the Guidelines - if you create a User Interface, make it accessible. 
Do we need to go beyond that? 
Are there any checkpoints we should have but do not? 
Charles McCathieNevile TABINDEX is very useful when designing HTML dialogs and applications. 
For example, an "OK" button may appear towards the top of the HTML document, but the button needs to be near the end of the tab order. 
If you think of HTML as pages and forms, you are right - TABINDEX isn't used often. 

What is an HTML application ? 
A DHTML page ? 
Anything with a FORM ? 
The current Microsoft home page, http://www.microsoft.com has a menu-driven interface, written in DHTML. 
You'll only see it if running IE4 or greater. 
I defined a HTML application as dynamic HTML. 
Presents user interface, responds to user input and possibly reformats itself based on such. 
HTML applications are quite common place at Microsoft now. 
The Personal Web Server for Windows 95 and Windows 98 has had HTML based administration for 2 years, as does it's bigger brother, Internet Information Server. 
Outlook 98 has HTML based UI in several places - the Find and Organize features. 
(which I demo'd in Minneapolis) Internet Explorer's Find dialog is also implemented in HTML. 
The Windows 98 Internet Connection Wizard is also a HTML dialog. 
I think that it's important that the guidelines strongly address dynamic (small 'd') HTML with a refresher on Accessible Software Design - keyboard access, color, etc. Charles Oppermann Program Manager, Accessibility and Disabilities Group, Microsoft Corporation "A computer on every desk and in every home, usable by everyone!" 
What is an HTML application ? 
A DHTML page ? 
Anything with a FORM ? 
I can't find a definition in the guidelines or techniques. 
I'm not certain why the language of the script matters. 
The DOM is language independent, and is actually very mature, having released in a Level 1 specification already. 
It's not the language that matters, but the ability to convey information and present user interface. 
The issue of scripting languages has already been discussed at great length in the working group and I don't think there would be much value in simply repeating that analysis at this stage, given that the underlying standards and technologies have undergone no significant change in this regard during the past month. 
Basically, the recommendation that we settled upon is that, since there is no universal scripting language which is supported by every user agent, alternatives must be provided to every document that employs scripts at the client level. 
These alternatives should present the same content as the original, using forms and server-side scripts to accomplish this objective. 
It has also been proposed that documents involving scripts should be made directly accessible, though little can be said in this regard owning to the lack of standards in this area. 
Once the DOM matures further, it should become possible to offer more detailed advice; but at present I think the current guidelines are defensible as the best that can reasonably be achieved given the current state of the technology. 
Of course, additional advice can be inserted into the non-normative "techniques document" as it becomes available, and may also be included in subsequent versions of the guidelines. 
The Charles are of a like mind with regard to language - it is not especially important what language is used. 
I think that the document adequately covers the provision of user interfaces and notification of changes. 
(A2 and A13) Further detail in each field is outside the scope of the document. 
Charles McCathieNevile I'm not certain why the language of the script matters. 
The DOM is language independent, and is actually very mature, having released in a Level 1 specification already. 
It's not the language that matters, but the ability to convey information and present user interface. 
--Charles McCathieNevile - mailto:charles@w3.org 
W3C Web Accessibility Initiative - http://www.w3.org/WAI 545 Technology sq., Cambridge MA, USA 
If you don't know the language, how do you parse the script ? 
You don't parse the script - there is no way that anyone can figure out the meaning or end result of a stored program. 
All the accessibility aid can do is listen for events and then collect information from the data structures (DOM) as to the current state of the application. 
