Hello. 
I have a question about what DOM has to say about the validity of the documents represented using DOM. 
It seems to me that objects comprising DOM map isomorphically into the elements comprising an XML document. 
Given that validity is defined for an XML document, it should be possible to define validity for a DOM document through this mapping. 
Such a definition would likely be intuitive and directly derivable from the XML definition. 
The DOM (Core) Level 1 draft says that issues of document "validation" are being deferred to subsequent DOM levels. 
I'm wondering if anyone can answer the following questions for me: 
(1) Does the term "validation" in the Level 1 draft refer to ensuring document validity, where validity is defined by derivation as I have suggested above? 
If not I'm curious to know what it refers to or whether the whole notion is still being left open (and what it might entail). 
(2) If for purposes of this question we do define validity as I suggest above, what does DOM have to say about the validity of DOM documents? 
In particular, I'd like to know the degree to which DOM allows for the creation of invalid documents and what DOM interface operations require that validity be preserved. 
(An answer the the first question will probably also answer the second question.) Thanks for your help, and I apologize in advance if these concerns have been covered elsewhere. 
Joe Lapp (Java Apps Developer/Consultant) Unite for Java! - http://www.javalobby.org 
jlapp@acm.org 
Yes. It should be possible (once all the smoke has settled down) to write a fairly simple peice of software that will validate a DOM representation of a document using the instance and DTD representations. 
Note that the latter is only available in XML, so only XML document can be validated in this manner (not good, I think...). 
The problem for the DOM is that some of the reference applications (editors and scripts) will *often* create documents that are invalid according to the content model defined in the DTD. 
Which is why we have the comment in the documents. 
However, there are actually *two* levels of validity that are important for the DOM: 1) Validity of the DOM representation in terms of the model espoused by the DOM standards. 
For example, it should not be possible to have an Element appear in the content of an Attribute. 
2) Validity according to the DTD. 
I do not think we can call our work on level one complete until we have defined validity for (1), but we *can* move forward without defining validity for (2) (and indeed, (2) is very application specific, so the DOM might be better off *not* saying anything about it). 
% From: Joe Lapp jlapp@acm.org 
% Hello. 
I have a question about what DOM has to say about the % validity of the documents represented using DOM. % It seems to me that objects comprising DOM map isomorphically % into the elements comprising an XML document. 
Given that % validity is defined for an XML document, it should be possible % to define validity for a DOM document through this mapping. 
% Such a definition would likely be intuitive and directly % derivable from the XML definition. 
I assume you mean conforming to a given DTD, i.e. the XML spec sense of "validity" (we have to be careful here, there are different connotations depending on what sort of validity). 
% The DOM (Core) Level 1 draft says that issues of document % "validation" are being deferred to subsequent DOM levels. 
I'm % wondering if anyone can answer the following questions for me: % (1) Does the term "validation" in the Level 1 draft refer to % ensuring document validity, where validity is defined by % derivation as I have suggested above? 
If not I'm curious % to know what it refers to or whether the whole notion is % still being left open (and what it might entail). 
The term validation refers to validating with respect to the DTD. % (2) If for purposes of this question we do define validity as % I suggest above, what does DOM have to say about the % validity of DOM documents? 
In particular, I'd like to % know the degree to which DOM allows for the creation of % invalid documents and what DOM interface operations % require that validity be preserved. 
% (An answer the the first question will probably also answer % the second question.) We haven't yet decided this one. 
Given that XML does allow the creation of invalid (though well-formed) documents, the DOM will also have to allow this. 
So this means that any interface operations that act on XML documents will have to allow invalid (but well-formed) documents, but somehow give the user a chance to see whether the document is invalid after the operation. 
We know there is a concern here; we will be tackling the question after Level 1. cheers, Lauren 
Okay, this is helping to clarify the role that DOM is to play, but I think I'm going to need to ask a few more questions: 
(1) Will the DOM XML spec layer on top of the core (hiding the core), or will it live beside the core, leaving both core interfaces and DOM XML interfaces exposed? 
Or is some other role intended? 
(2) Will the DOM XML interfaces be expected to function with an underlying DOM document that is invalid with respect to its DTD? 
It seems that such a model would need to expose ways for the client to correct the document, which might require the client to force the document through a series of invalid states before ultimately arriving at a valid one. 
(3) Will the DOM XML interfaces be able to enforce XML-specific document rules so that a client generating (or modifying) an XML document through the interfaces cannot create an invalid document? 
(This might require layering DOM XML on top of the core XML so that the client cannot tweak the document directly.) 
(4) Will other "levels" of DOM interact directly with the core DOM and hence bypass constraints that might be specific to XML or HTML or some other type of document? 
I'm trying to get a picture of how the various pieces of DOM will fit together. 
I may be looking a little ahead of the WG's current focus, but I'm having trouble making sense of the core DOM without putting it into the perspective of an overriding architecture. 
Joe Lapp (Java Apps Developer/Consultant) Unite for Java! - http://www.javalobby.org 
jlapp@acm.org 
The XML spec could be regarded as supplemental. 
It will add objects for representing DTD's, and general entities. 
There should be few other significant differences. 
Yes. 
This is correct. 
In essense, all editors do this at some point in time or another. 
This is a point that is under debate. 
It would seem expensive to require validation after (potentially) every operation that modfied the tree in any way. 
Also, as I noted, this need is application specific. 
In general, I think the DOM is taking a "layered" approach, where both XML and HTML are "layered" on top of the core. 
As I noted above, the XML spec does little layering per se, but does provide additional constructs. 
The XML interfaces supplement, but do not hide the core. 
Yes. The DOM insists that the underlying document be well-formed, but makes no assertions about its validity vis a vis the DTD. 
One could (as a previous reply indicated) add validation functions built with the DOM methods, and we could imagine these being added to the DOM itself someday, but I can't imagine ever forcing the document to be DTD-valid in order for it to work with the DOM. 
I personally have no interest in enforcing such restrictions in the DOM itself; perhaps some vendor could write a DOM client (e.g., a JavaBean) that extends the DOM to provide these features. 
One could imagine a "VALIDXML" interface that supplements the XML interface in the DOM itself, but I'm pretty sure the WG won't get around to it for quite some time even if demand exists. 
I don't understand; is this still relevant in light of the other answers you've received? 
Again, anyone can write their own extensions to the DOM on top of the core API; the constraints of the XML or HTML interfaces are only relevant if you go thru those interfaces. 
Mike Champion 
