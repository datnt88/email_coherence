I am wondering whether GET requests are allowed to have an Entity-Body? 
I have read through the HTTP RFC several times and have not been able to find a specific prohibition of this, however several colleagues of mine feel very strongly that GET requests are not permitted to provide an Entity-Body. 
Thanks ... --ROb I can't see any reason why they would not. 
I have written a small http proxy, and I check for the "Content-Length" header to see if there is any entity body, and not the METHOD (except for HEAD :). 
Well, it doesn't make any sense for the GET to have a body, since all the information (both static and dynamic) are stored in the URL. 
So maybe there is an implementation of a proxy and/or server that gets all mixed up when there is a Body in a GET request. 
I guess this might be one of those times where you are forced to find out what the real world implementations do, by doing some testing...;) If you do find out, could you tell me, since I too would like to know, and am too lazy to work it out myself...;) Cheers, Kal. . 
Kalvinder Singh singh@ozy.dec.com _-_|\ Software Engineering Australia / \ -- Compaq This is probably a good time to remind people of the Robustness Principle, first stated (although not under that name) in RFC791, with respect to IP datagrams: In general, an implementation must be conservative in its sending behavior, and liberal in its receiving behavior. 
That is, it must be careful to send well-formed datagrams, but must accept any datagram that it can interpret (e.g., not object to technical errors where the meaning is still clear). 
Applying this to the current question: a client implementation should not send an entity-body with a GET request, because it has no specified meaning. 
BUT: a server ought to accept such a GET message (and ignore the entity-body), rather than reject such a message as erroneous. 
It's perhaps harder to use this principle to decide whether a proxy should forward the request intact ("be liberal in its receiving behavior") or with the body deleted ("be conservative in its sending behavior"). 
If the proxy is being used as part of a security firewall, I'd probably vote for the latter, so as to avoid the possibility of a covert channel ... but this is debatable, I'm sure. 
-Jeff Jeff is right about the Robustness Principle, but in addition, HTTP 1.1 rev 6 explicitly states the requirement in section 4.3 "Message Body": "The presence of a message-body in a request is signaled by the inclusion of a Content-Length or Transfer-Encoding header field in the request's message-headers. 
A message-body MUST NOT be included in a request if the specification of the request method (section 5.1.1) 
does not allow sending an entity-body in requests. 
A server SHOULD read and forward a message-body on any request; if the request method does not include defined semantics for an entity-body, then the message-body SHOULD be ignored when handling the request." 
Section 5.1.1 "Method" doesn't state an opinion on the validity of entity-bodies for any methods, so they appear to always be allowed. 
Section 9.3 "GET" doesn't define any semantics for entity-bodies, so unconditionally-compliant proxy servers should always forward them and unconditionally-compliant origin servers should always ignore them. 
N.B. "Ignore" means read-and-discard if you want to keep a persistent connection alive. 
Ross Patterson VM Software Division Sterling Software, Inc. 
