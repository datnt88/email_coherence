I suggest what I think are small changes: + including the term "graph pattern" as is in the suggested text for 3.1. 
+ tweaking the title + Be neutral to "optional triples" and "may-bind" variables. 
3.6 Optional Matching It must be possible to express a query graph pattern that does not fail to match when some nominated part of the graph pattern fails to match. 
Any such triples matched by this optional part, or variable bindings caused by this optional part, can be requested in the results. 
Andy For reference, the text in v1.39 is: 3.6 Optional Match It must be possible to express a query that does not fail when some nominated part of the query specifying "optional triples" fails to match. 
Any such triples matched by this optional part, or variable bindings caused by this optional part, can be returned in the results, if requested. 
I'm afraid I can't really support this as a requirement, although I think features which allow this result (albeit not necessary directly) would almost certainly be extremely useful. 
The thing is, "optional bindings" are really nothing more than unions between independent queries: union the results of the query with the binding with the results of the query without it. 
I'd say a more general-purpose "union" operator is quite a bit more important than this one particular form, and even then I'm not sure whether it rises to the level of requirement. 
Expressing it as "Optional Matching" makes it more user-centric. 
It covers features that are being requested by users (application writers). 
Getting AB? (where A and B are graph patterns, ? is 0 or 1) as union(A, AB) might be OK but as the choices grow we get: AB?C? = union(A, AB, AC, ABC) Andy maybe. 
i guess it depends on what is meant by union. 
regardless, our goal is not a *minimal* query language but a useful one. 
as andy noted, RDQL users have requested optional triples. 
and, implementing optional triples as multiple union queries could strain the capabilities of query optimizers. 
seems like it's more efficient to make optional triples explicit. 
SQL has both union and outer join, for example. 
kevin 
