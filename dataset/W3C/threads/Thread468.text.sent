I have recently successfully completed a conversion of tidy to C++. 
Is anyone interested? 
What was your motivation for this ? 
Regards, Doug Hi, Lee Did you create C++ classes, or did you just get the source to compile as C++? 
If classes, did you manage to eliminate all globals, so the classes can be used in a multithreaded environment? 
Did you separate out the parsing code so it can be used independently? 
If the answer to all these questions is 'yes', I'd be very interested! 
Thanks - rick cameron I have recently successfully completed a conversion of tidy to C++. 
Is anyone interested? 
Sure. 
Let us take a look! 
Is it based on the current CVS sources or the August 04 2000 release? 
As for the upcoming HTML Tidy library, we would make great use of some C++ wrapper for HTML Tidy. 
Bj?rn H?hrmann { mailto:bjoern@hoehrmann.de } http://www.bjoernsworld.de am Badedeich 7 } Telefon: +49(0)4667/981028 { http://bjoern.hoehrmann.de 
25899 Dageb?ll { PGP Pub. 
KeyID: 0xA4357E78 } http://www.learn.to/quote/ 
I have an application in mind that will require loading an HTML document into a DOM. 
The target platform will (eventually) be WinCE. 
The first rule of software development, IMO, is "don't reinvent the wheel". 
After looking around I decided that tidy would be the best source base for this because a.) it is highly tolerant of poorly-formed HTML, b.) it is relatively small (have you seen the source base for Amaya?), and c.) it is well supported in open source and has liberal licensing. 
At the outset, let me state that I am a devout believer in the church of C++, and can bear witness that it is the one, true and living programming language. 
For me, C++ is "obviously" the language best suited for general purpose programming libraries. 
One of the things I will need to do is separate the functionality of tidy into three groups -- parsing, cleaning, and printing -- and segregate the code into files according to these divisions, as I will only need the parsing functions (and maybe a little of the cleaning). 
Moving to C++ as I do this is not terribly difficult, and not only will it make my use of the resulting libraries easier, it has helped me to understand the code and how all the pieces interrelate. 
I am, of course, not trying to convert anyone else to my religion, I just figured if there were any kindred souls out there I would share what I have done. 
I actually created C++ classes. 
Interestingly, with all the structure pointers being passed around, it almost looked like tidy was originally written in C++ and then back-ported to C. In my first cut, some of the fundamental classes are Node, Attibute, AttVal (attribute/value pairs), Tag, Lexer, Style, and StreamIn/StreamOut. 
The global variable question is an interesting one; I made some changes to global variables, but I was not thinking about multi-threading at the time. 
As near as I can tell, there are two types of global variables in tidy: configuration boolean flags and default values (generally declared in config.c), and dictionary tables such as Tag and Attribute. 
Configuration variables are altered from their default values by command line options or by parsing a config file. 
This code I have not yet touched. 
Other global tables were initialized by explicit "init" calls (e.g., InitAttrs, InitTags). 
For these types of variables I created a class with a single global instance whose only role was to initialize static variables in the corresponding class (e.g. Attribute, Tag). 
Thus, construction and destruction of these global variables occurs automatically when the program begins (before main() is called) or ends, and then only once. 
Whether or not these changes satisfies the demands of a multi-threaded application or not is still an open question. 
Perhaps you can help me out there. 
As stated in an earlier message, my goal is to segregate the code (to the extent possible) into parsing, cleaning, and printing (or output) parts. 
This first pass did that to some extent, but much more detailed analysis will be required before I am comfortable claiming that the goal has been acheived. 
The first pass that I have completed is based on the 04 August 2000 release. 
It was primarily experimental and instructional, just to see what the task was like and to determine a strategy. 
I have since abandoned that code, and am starting over with the CVS sources from approximately mid-September. 
In any project like this, the problem arises of how to maintain synchronicity between two implementations of what is essentially the same project (I'm sure the JTidy guys deal with this every day). 
In this second cut I am being a little less radical in my approach to moving methods into different files; I am trying to maintain functions in files of the same name as their C counterparts, even when the functions end up as methods in different classes. 
When files should be split up to separate parsing and cleaning, for example, I have left the first part of the file name the same. 
For example, I have currently split tidy.c into tidy.cpp (main code), tidy_mem.cpp 
(memory allocation and string routines), and tidy_utf.cpp 
(UTF8/16 conversion fucntions). 
Hopefully this way I can diff my source with the CVS tree, identify changes that are made, and have a fairly straightforward way of finding where these changes belong in the C++ version. 
I finally have a place on the web where I can put stuff for public consumption. 
There seems to be at least a modicum of interest, so I will zip up what I have and put it up there this weekend. 
As soon as I do this I'll post the URL. 
Is it really necessary to recode yet another fork of Tidy in C++? 
I haven't had much time to look at it but one of the guys who worked for me did a C++ wrapper for Tidy based on the same forwarding model we used for our very successful expatpp wrapper for expat. 
When something is written in a clean OO design (as Tidy seems to be - NOT back-ported from C++) it's pretty easy to wrap in C++ and retain the original source to avoid compatibility problems. 
If you have really good reasons for forking off a separate C++ development, that's great and we may be interested in helping, otherwise I suggest the wrapper approach is superior and given inline method compilation, adds almost no overhead. 
Note: when polished, our wrapper will be contributed back to the Tidy community, it's just that I've been really really busy with other issues, mainly MacOS/X driven and I don't let any source out the door until I've OK'd what's in it. 
Andy Dent BSc MACS AACM OOFILE - Database, Reports, Graphs, GUI for c++ on Mac, Unix &amp; Windows PP2MFC - PowerPlant- MFC portability 
