I think we all agree that enriched hyperlink semantics are A Good Thing... the question is, what are the trade-offs? 
It is a basic requirement that anything we put into this be (a) tractable to implement and (b) easy to explain. 
It's not clear to me that a solution based on groves/grove-plans, or a query language, meets this requirement. 
It's also not clear that it doesn't, but this is a challenge that must be answered. 
One of the reasons that it must be answered is that a minimum solution, essentially just making a formalism for multi-way typed hyperlinks, is dramatically more than what the Web guys have, and can be put *instantly* to good use. 
Thus if we do a good job on that, we have a good chance of buying enough credibility to get some support to take us further down the path. 
On the other hand, if we produce something that is even one-tenth as difficult to understand as, for example, the current HyTime standard, and does not lend itself to instant implementations, nobody will notice or care. 
Hell, I want general transclusion a la Xanadu... 
Already, I think we've learned another chunk of Minimum Progress Required to Declare Victory: 5. Minimum Progress on Extensibility The chosen mechanisms should have the property that they not impede progress toward the addition of advanced hypermedia mechanisms up to and past general transclusion. 
Cheers, T. 
which is another linking behaviour that the Web already has, perhaps unfortunately. 
For years now (that's eons in Web time) I've been complaining that involuntary transclusion works against the interests of copyright holders and dramatically reduces their desire to make copyrighted material available inthe Web environment. 
IMG was bad enough (from this angle); FRAMEs are dreadful (from this angle). 
I don't see any simple solution, and maybe linking is not the arena in which a solution should be sought. 
But if this group can find a way to construct links such that the server of the transcluded object can detect that it's being fetched for the purpose of transclusion, that would be an immense win. 
Awesome, even. 
Xanadu evades this matter by assuming that everyone has already signed on to a copyright protection and micropayment scheme. 
The real world is, of course, different. 
Regards, Terry Allen Fujitsu Software Corp. tallen@fsc.fujitsu.com 
"In going on with these experiments, how many pretty systems do we build, which we soon find outselves obliged to destroy?" - Benjamin Franklin A Davenport Group Sponsor: http://www.ora.com/davenport/index.html 
Please bear with me to the end of this harangue, because it's relevant to several topics. 
I think Terry's remark highlights a key issue. 
A embryonic general solution to Terry's question, "Activity Policy Association," exists in HyTime. 
The fundamental idea is simple enough: you have a statement of the owner's policy -- a license statement -- which is unambiguously attached to the information. 
(In HyTime, the statement could be, in fact, an applet which enforces the policy, but I'm not proposing that XML endorse that refinement.) The licensed information serves as an anchor of what, in effect, is a special kind of link to an object that expresses the policy. 
And here is where we see a more fundamental issue that is relevant to 
the whole discussion of hyperlinking in XML. 
The question is: "Does an anchor know that it is an anchor?" 
The answers to lots of important questions depend on the answer to the above question, including: "Can an n-ended link be n-directional?" ( n  = 2, of course ) 
"Can a link appear elsewhere than any of its anchors?" 
"Can metadata (such as activity policies) be associated and re-associated with data without changing the data?" 
This question should not be easy for any voting member of the ERB to decide. 
Frankly, I don't know how I would vote; at this point I'd have to wait and see what came out of the discussion. 
On the one hand, if we say that anchors must be aware of their anchorishness even when the links that confer anchor status upon them are elsewhere, a many-headed Hydra monster arises. 
HyTime and the 
HyTime TC1, and DSSSL (especially with its grove notion) offer some cool answers for dealing with that monster that really work. 
But these concepts are hard to explain and hard to understand, and they scare implementers who haven't lived with the underlying ideas for awhile. 
For most people, they're extremely challenging ideas, frankly: as challenging as the object-oriented paradigm (which is mainly what it *is*, in fact). 
Even so, having lived intimately with the problem and discussion of anchor awareness and its implementation for years, I have this not-so-clever insight to share: Either we accept a basic paradigm change in the way we handle and think about pretty much every component of documents (i.e., we move to the grove paradigm), or we can't really implement anchor awareness. 
Sobering, isn't it? 
On the other hand, if (as in HTML) we say that all linking is unidirectional and all links have two ends, the starting end of which is where the link is, XML does not offer any functional improvement, in hyper terms, over HTML. 
That's OK, and we won't have to go on a 
Hydra-slaying mission, but I think there's a huge problem with this alternative, too. 
Will people switch from HTML to XML just because they get the totally intangible and abstract benefit of arbitrary structure and generic markup? 
I think, in most cases, not. 
It won't matter that XML is better for the long term if there's no compelling reason to switch over to it. 
A radical improvement in hyperfunctionality would, I think, certainly provide a compelling reason and turn the tide. 
I'm not sure what else, if anything, could do that as powerfully or certainly. 
God bless us, every one.  
-- Seasonal greeting doubly appropriate. 
--Steve Steven R. Newcomb President voice +1 716 271 0796 TechnoTeacher, Inc. Internet: srn@techno.com 
Rochester NY 14618) FTP: ftp.techno.com 
P.O. Box 23795 WWW: http://www.techno.com 
Rochester, NY 14692-3795 USA 
I think that Steve was making an important point, but I think that I didn't really get it. 
So this is a request for amplification, with some questions 
What does it mean for an anchor to know it's an anchor... and I guess, what exactly are you terming an anchor? 
Consider the following: Example 1: http://www.textuality.com/sgml-erb/mprdv.html not as an example, but in and of itself, embedded in the email you are now reading. 
I would assume this is not an anchor in the sense that you mean; 1-way www semantics make it a link-end but not an anchor. 
The person who placed mprdv.html at www.textuality.com and sent the URL out by email was consciously creating an anchor that in some sense knows it's an anchor since there is an httpd server that will give anyone a copy, no questions asked. 
On the other hand, when Example 2: A NAME="sec3.17" appears in an HTML document, I assume you would call this an anchor that knows it's an anchor? 
It exists only to provide addressing hooks. 
Some form of the same argument could be applied to any element with an attribute that has been declared to be of type ID? On the other hand, (Example 3: ) with some analogue of ilink, where you can point into a document from outside using locaddrs or some such, you clearly have a case that what's being pointed-at does not and cannot in principle know it's an anchor... or am I missing your point? 
Huh? It is not obvious to me why this depends on anchor-self-knowledge. 
This seems waaaaaaay outside our scope. 
Can we not have multiway ilink-style thingies and perhaps even a modest amount of locaddr and so on, without getting into major paradigm re-engineering? 
This is the key point - I had asserted that 
an ilink thing, particularly if you restrict to addressing by entity &amp; ID attribute, was a low-hanging fruit that was easy to understand, easy to implement, and clearly better than today's HTML. 
Are you saying that (a) this is a can of worms, or that (b) it is not in fact better, or (c) have I just missed the whole point? 
Cheers, Tim Bray tbray@textuality.com 
http://www.textuality.com/ 
+1-604-488-1167 
Point is that you can already do multi-ended links, and many other things, using clever servers: no special markup is needed, just special URL forms (in the area that is supposed to be opaque). 
It seems obvious to me, but if we really *are* going to specify some improved linking capabilities, we are going to end up specifying processing at almost every level of the WWW (markup, protocols, client &amp; server). 
