Section 2.1 To say that you don't mandate the use of any particular encoding, and then to recommend the use of UTF-8 for a certain case, could probably stand for some revision. 
Try to avoid the terms "glyph" and "character set", if not used in a manner consistent with UTR#17. 
Try to cite ISO/IEC 10646 with at least "ISO/IEC" rather than just "ISO". 
(And should this be linked as a reference?) Questionable grammar in the last sentence should be addressed ("We recommend that the data first be encoded, then escaping [certain octets]" reads a little awkwardly.) 
The text currently reads: "As described above, the URI syntax is defined in terms of characters by reference to the US-ASCII encoding of characters to octets. 
This specification does not mandate the use of any particular mapping between its character set and the octets used to store or transmit those characters." [...] "Most URI schemes represent data octets by the US-ASCII character corresponding to that octet, either directly in the form of the character's glyph or by use of an escape triplet (section 2.4)." "When a URI scheme defines a component that represents textual data consisting of characters from the Unicode (ISO 10646) character set, we recommend that the data be encoded first as octets according to the UTF-8 [RFC2279] character encoding, and then escaping only those octets that are not in the unreserved character set." 
I suggest changing it to: "As described above, the URI syntax is defined in terms of characters by reference to the US-ASCII encoding of characters to octets. 
This specification only mandates that URIs be composed of abstract characters, regardless of what mapping to octets, if any, is used to store or transmit those characters. 
[...] "Most URI schemes represent data octets by the US-ASCII character corresponding to that octet, either directly in the form of the actual character, or indirectly by use of an escape triplet (section 2.4)." "When a URI scheme defines a component that represents textual data consisting of characters from the Unicode / ISO/IEC 10646 character repertoire, we recommend first encoding the data as octets according to the UTF-8 [RFC2279] character encoding, and then escaping only those octets that are not in the unreserved character set." 
-Mike I want to revise my suggestion for rewording section 2.1. 
In the last paragraph, I didn't follow my own advice! 
Also, there are a couple of other details that I want to address. 
1. 
I missed a "character set". 
2. Prior to the adoption of RFCs 2277 and 2718, protocols and URI schemes were free to mandate the use of encodings other than UTF-8 as the basis for %-escaping, or to not speak to the issue at all (HTTP being the most notorious example). 
This should be acknowledged when recommending UTF-8. 
3. Link the first mention of escaping to section 2.4 (#escape). 
4. Even though the reader probably can figure out what is meant, the recommended action to encode-then-escape can be difficult to follow to the letter. 
If you escape an octet, then you have a triplet of characters. 
So far, so good. 
But if you don't escape an octet, then you've got ...an octet. 
You might say to just use characters represented by the unescaped octets, but then this makes me think the whole example is redundant, saying, in effect, "to escape certain characters, encode them all so you know how to escape them, but then just escape the ones you need to." 
What's the point? 
Just drop this entirely. 
So, the last paragraph should be sufficient if it reads like this: In accordance with the trend toward UTF-8 [RFC2279] (see also [RFC2277] and [RFC2718]), when a URI scheme defines a component that represents textual data consisting of characters from the Unicode / ISO/IEC 10646 repertoire and does not mandate the use of some other encoding, we recommend using UTF-8 [RFC2279] to determine the octets used to escape [#escape] characters that are not in the unreserved set. 
Hi Mike, Bunch of good and thougtful comments - thanks. 
Below, "trend toward UTF-8" is a little weak. 
You cited RFC 2277 "IETF Policy on Character Sets and Languages", with is also BCP 18, an IETF best practices document. 
RFC 2277 says on pages 2-3: "All protocols MUST identify, for all character data, which charset is in use. 
Protocols MUST be able to use the UTF-8 charset, which consists of the ISO 10646 coded character set combined with the UTF-8 character encoding scheme, as defined in [10646] Annex R (published in Amendment 2), for all text. 
Protocols MAY specify, in addition, how to use other charsets or other character encoding schemes for ISO 10646, such as UTF-16, but lack of an ability to use UTF-8 is a violation of this policy; such a violation would need a variance procedure ([BCP9] section 9) with clear and solid justification in the protocol specification document before being entered into or advanced upon the standards track." 
While a URI is not a protocol, it _is_ a protocol element, containing a (sort of) human-readable identifier, which is typically displayed to human users. 
As such, I believe that UTF-8 support in URI is mandated by RFC 2277. 
Cheers, - Ira McDonald High North Inc I want to revise my suggestion for rewording section 2.1. 
In the last paragraph, I didn't follow my own advice! 
Also, there are a couple of other details that I want to address. 
1. 
I missed a "character set". 
2. Prior to the adoption of RFCs 2277 and 2718, protocols and URI schemes were free to mandate the use of encodings other than UTF-8 as the basis for %-escaping, or to not speak to the issue at all (HTTP being the most notorious example). 
This should be acknowledged when recommending UTF-8. 
3. Link the first mention of escaping to section 2.4 (#escape). 
4. Even though the reader probably can figure out what is meant, the recommended action to encode-then-escape can be difficult to follow to the letter. 
If you escape an octet, then you have a triplet of characters. 
So far, so good. 
But if you don't escape an octet, then you've got ...an octet. 
You might say to just use characters represented by the unescaped octets, but then this makes me think the whole example is redundant, saying, in effect, "to escape certain characters, encode them all so you know how to escape them, but then just escape the ones you need to." 
What's the point? 
Just drop this entirely. 
So, the last paragraph should be sufficient if it reads like this: In accordance with the trend toward UTF-8 [RFC2279] (see also [RFC2277] and [RFC2718]), when a URI scheme defines a component that represents textual data consisting of characters from the Unicode / ISO/IEC 10646 repertoire and does not mandate the use of some other encoding, we recommend using UTF-8 [RFC2279] to determine the octets used to escape [#escape] characters that are not in the unreserved set. 
Please keep in mind that the URI technology predates UTF-8 by at least 5 years, and the IETF policies on identifying charset in use are even later than that. 
As such, they do not apply. 
We are way beyond the design phase. 
The hardest part of editing a spec towards standard status is recognizing what can be tweaked without breaking all of the deployed implementations that justify it being a standard. 
New ideas need to be proposed as separate specifications and deployed to the point where they attain equal status with the standard. 
That doesn't mean change is impossible -- it is simply slow and not always correct (some of the changes I made for RFC 2396 simply did not work out in practice and were not universally deployed). 
....Roy BTW, I have 56 stored requests for changes to the next draft, so please accept my apologies if I don't respond to all of the commentary. 
I read them all, but suggestions that include text get first dibs because they are simply easier to enact or respond to directly. 
Hi Roy, Actually, the IETF can and is enforcing that no document remains _on_ the standards track at all that doesn't support or mandate use of UTF-8 in all human readable protocol elements. 
See the highlighted line in the verbatim quote from RFC 2277 below. 
I assure you from personal experience that a waiver for a variance is _not_ likely. 
If RFC 2396 is revised and republished (as now underway), then RFC 2396 bis MUST conform to RFC 2277 or else get a waiver. 
"Protocols MAY specify, in addition, how to use other charsets or other character encoding schemes for ISO 10646, such as UTF-16, but lack of an ability to use UTF-8 is a violation of this policy; such a violation would need a variance procedure ([BCP9] section 9) with clear and solid justification in the protocol specification document For existing protocols or protocols that move data from existing datastores, support of other charsets, or even using a default other than UTF-8, may be a requirement. 
This is acceptable, but UTF-8 support MUST be possible." 
Sorry I can't propose the right wording. 
I just observe that the URI being pre-existing does not preclude applicability of RFC 2277. 
...and hope Martin (for example) will suggest the best wording... Cheers, - Ira McDonald High North Inc Please keep in mind that the URI technology predates UTF-8 by at least 5 years, and the IETF policies on identifying charset in use are even later than that. 
As such, they do not apply. 
We are way beyond the design phase. 
The hardest part of editing a spec towards standard status is recognizing what can be tweaked without breaking all of the deployed implementations that justify it being a standard. 
New ideas need to be proposed as separate specifications and deployed to the point where they attain equal status with the standard. 
That doesn't mean change is impossible -- it is simply slow and not always correct (some of the changes I made for RFC 2396 simply did not work out in practice and were not universally deployed). 
....Roy BTW, I have 56 stored requests for changes to the next draft, so please accept my apologies if I don't respond to all of the commentary. 
I read them all, but suggestions that include text get first dibs because they are simply easier to enact or respond to directly. 
Ira, you left out the important part of RFC 2277 where it talks about scope. 
Names are a problem, because people feel strongly about them, many of them are mostly for local usage, and all of them tend to leak out of the local context at times. 
RFC 1958 [RFC 1958] recommends US-ASCII for all globally visible names. 
This document does not mandate a policy on name internationalization, but requires that all protocols describe whether names are internationalized or US-ASCII. 
In the context of RFC 2277, URIs are "names". 
I don't think any waiver is necessary. 
Rather, there is separate work (http://www.w3.org/International/iri-edit/ ) to define a new protocol element (IRI) that is internationalized. 
a document other Hi Larry, You're right of course. 
URI (as names) are NOT subject to RFC 2277. 
I was unfortunately conflating them with (any other) _textual_ human-readable protocol elements, which certainly ARE subject to RFC 2277. 
Thanks for straightening me out. 
By the way, shouldn't RFC 2396bis (URI) at least informatively reference the IRI work? 
Cheers, - Ira McDonald High North Inc Ira, you left out the important part of RFC 2277 where it talks about scope. 
Names are a problem, because people feel strongly about them, many of them are mostly for local usage, and all of them tend to leak out of the local context at times. 
RFC 1958 [RFC 1958] recommends US-ASCII for all globally visible names. 
This document does not mandate a policy on name internationalization, but requires that all protocols describe whether names are internationalized or US-ASCII. 
In the context of RFC 2277, URIs are "names". 
I don't think any waiver is necessary. 
Rather, there is separate work (http://www.w3.org/International/iri-edit/ ) to define a new protocol element (IRI) that is internationalized. 
a document other Most of your comments were already made by Martin and have been fixed in the draft. 
The exception being The reference is to the UTF-8 RFC, which defines it as ISO. 
I'll have to check to see if an update has reached RFC status yet. 
....Roy Roy T. Fielding said: The current RFC on the topic is 3629, the abstract of which refers to "ISO/IEC 10646-1". 
Internet Expert | Home: clive@davros.org 
| *** NOTE CHANGE *** Thus plc | | Mobile: +44 7973 377646 Fixed. 
....Roy 
