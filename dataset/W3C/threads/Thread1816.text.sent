Since there have been no objections, I have taken Julian's suggested text, marked these two issues as closed, and posted a revised 3253 draft to the deltav web site. 
These were the last two open issues on the RFC-3253 issues list, so all current RFC-3253 issues are now resolved! 
If any new issues arise, please notify the working group via the mailing list. 
I will submit the revised 3253 draft as an internet draft later this week. 
Cheers, Geoff I agree with the proposed resolution. 
Unless someone disagrees, I will add this to the Errata sheet, and mark the issue as closed. 
Cheers, Geoff -----Original Message----- Proposed resolution: 1) Deprecate marshalling through OPTIONS. 
2) Add three new live properties: (Version histories) 5.2 Additional Resource Properties The version-history feature introduces the following REQUIRED property for resources that reside in a part of a server's namespace that supports version histories. 
5.1.1 
DAV:version-history-collection-set (protected) The DAV:version-history-collection-set property identifies collections that may contain version histories. 
An identified collection MAY be the root collection of a tree of collections, all of which may contain version histories. 
Since different servers can control different parts of the URL namespace, different resources on the same host MAY have different DAV:version-history-collection-set values. 
The identified collections MAY be located on different hosts from the resource. 
(Workspaces) 6.2.1 DAV:workspace-collection-set (protected) The DAV:workspace-collection-set property identifies collections that may contain workspaces. 
An identified collection MAY be the root collection of a tree of collections, all of which may contain workspaces. 
Since different servers can control different parts of the URL namespace, different resources on the same host MAY have different DAV:workspace-collection-set values. 
The identified collections MAY be located on different hosts from the resource. 
(Activities) 13.4 Additional Resource Properties The activity feature introduces the following REQUIRED property for resources that reside in a part of the server's namespace supporting activities. 
13.4.1 
DAV:activity-collection-set (protected) The DAV:activity-collection-set property identifies collections that may contain activities. 
An identified collection MAY be the root collection of a tree of collections, all of which may contain activities. 
Since different servers can control different parts of the URL namespace, different resources on the same host MAY have different DAV:activity-collection-set values. 
The identified collections MAY be located on different hosts from the resource. 
Hi. 
The VERSION-CONTROL method -- when applied to a versionable but not yet version-controlled resource, creates one or two new resources (being the checked-in version and optionall the version history resource). 
I'd like to see the definition in 3.5 extended to - allow a 201 to be returned when new resources were created (see [1]) - define that in this case, the Location header should point to the version being created - define an optional response body (DAV:version-control-response) that contains references to the resources being created, such as: (similar marshalling may also be needed for other methods that create new resources) [1] http://greenbytes.de/tech/webdav/rfc2616.html#rfc.section.10.2.2 Could you motivate why we would want to do this? 
(I'm not saying it's a bad idea, but it is additional text that would need to be added to the protocol definition, and we've got a lot of text already :-). 
In particular, this information is easily obtainable with a subsequent PROPFIND (and even a streaming PROPFIND, i.e. you can issue the PROPFIND without waiting for the VERSION-CONTROL to succeed). 
Cheers, Geoff Hi. 
The VERSION-CONTROL method -- when applied to a versionable but not yet version-controlled resource, creates one or two new resources (being the checked-in version and optionall the version history resource). 
I'd like to see the definition in 3.5 extended to - allow a 201 to be returned when new resources were created (see [1]) - define that in this case, the Location header should point to the version being created - define an optional response body (DAV:version-control-response) that contains references to the resources being created, such as: (similar marshalling may also be needed for other methods that create new resources) [1] http://greenbytes.de/tech/webdav/rfc2616.html#rfc.section.10.2.2 Sure. 1) Consistency with HTTP: requests that create new resources should return a 201. 
2) Consistence with deltaV (defining DAV:version-control-response as optional response body) 3) Performance: I've seen many cases where after a version-control, a client would like to access either the checked-in version or the VHR -- in which case it currently needs an additional PROPFIND. 
It's still an additional request and doesn't come for free. 
In general, a server will have to do another call to it's backend to get this information. 
To date, we've limited 3253 modifications to demonstrable semantic problems with the protocol (e.g. the Label header) or interoperability problems (the use of an OPTIONS body). 
I personally would not want to modify/extend the protocol simply for "consistency". 
This makes the protocol too much of a moving target for implementors. 
For the same reason, I would not want to modify/extend the protocol for optimizing certain requests, until it has been demonstrated that these performance issues are common and severe. 
But it certainly would be reasonable to define these extensions in a separate draft, and add that draft to the list of proposed DeltaV extensions on the DeltaV web site. 
That way implementors who encounter these performance issues can work around them in a common way, making that extension a likely candidate for inclusion in the next draft. 
Cheers, Geoff Hi. 
The VERSION-CONTROL method -- when applied to a versionable but not yet version-controlled resource, creates one or two new resources (being the checked-in version and optionall the version history resource). 
I'd like to see the definition in 3.5 extended to - allow a 201 to be returned when new resources were created (see [1]) - define that in this case, the Location header should point to the version being created - define an optional response body (DAV:version-control-response) that contains references to the resources being created, such as: (similar marshalling may also be needed for other methods that create new resources) [1] http://greenbytes.de/tech/webdav/rfc2616.html#rfc.section.10.2.2 I agree with this. 
However, I'm not sure about how intrusive this change is. 
- Right now the response code for VERSION-CONTROL conflicts with the recommendations from RFC2616. 
With the current wording, client writers can rely on getting a 200 on success. 
I think we should relax that so that 201 is allowed as well (yes, I think this needs to be mentioned as an erratum). 
- All the other changes then follow from standard RFC2616 semantics, and or similar definitions in DeltaV. 
Julian The intrusiveness occurs if we add these extensions as a MUST. 
If it is a MUST, a client should be able to count on them being there, which is where it is a burden on server writers (they have to go and rev all their servers to provide this new required information). 
On the other hand, if we define it in a separate spec, it effectively becomes a MAY, which gives clients and servers a way of starting to use these extensions without forcing existing servers to rev their implementations. 
In a couple of years, it would probably be reasonable to absorb a whole set of extensions that have proven to be useful in practice, at which point clients can count on them being implemented as a bundle. 
Cheers, Geoff I agree with this. 
However, I'm not sure about how intrusive this change is. 
- Right now the response code for VERSION-CONTROL conflicts with the recommendations from RFC2616. 
With the current wording, client writers can rely on getting a 200 on success. 
I think we should relax that so that 201 is allowed as well (yes, I think this needs to be mentioned as an erratum). 
- All the other changes then follow from standard RFC2616 semantics, and or similar definitions in DeltaV. 
Julian I wasn't saying that it should be a MUST. 
Well, we can also make it a MAY or a SHOULD and put it into RFC3253bis. 
Right now we have: - the response codes aren't specified, one example (plain V-C) says 200, the other (V-C in workspace) says 201. - the document element for the optional response body in fact *is* defined. 
So what's left? 
1) clarifying that the plain V-C *may* return 201 and optionally may provide the location of the checked-in version in the Location header 2) possibly allow marshalling of "both" locations (version and VHR) in the response body. 
I think 1) is an erratum, while 2) would be just a useful extension (although recommended in HTTP). 
Julian (I'd like to see this issue added to the issues list) From: Julian Reschke [mailto:julian.reschke@greenbytes.de] Sent: Friday, October 11, 2002 4:06 PM Subject: RE: 3.5: VERSION-CONTROL response codes I'll add the issues identified in (1) to the issues/errata list. 
I think clarifying that VERSION-CONTROL can return 201 is uncontroversial, so I'll just make that as an editorial change. 
Does anyone object to having VERSION-CONTROL be required to return a Location header with the newly created version, just as CHECKIN does? 
This does seem like a reasonable thing to require, to make sure that the client can get a reliable handle to the version it just created. 
As for the extension (marshalling the version and vhr info in the response body), since this is just an optimization of information that can currently be obtained via PROPFIND or the DAV:version-tree report, I'd prefer to see that written up in a draft that is referenced in the "proposed extensions" section of the deltav page, to keep the "issues and errata" document for errors and ambiguities in 3253. 
Cheers, Geoff (I'd like to see this issue added to the issues list) From: Julian Reschke [mailto:julian.reschke@greenbytes.de] Sent: Friday, October 11, 2002 4:06 PM Subject: RE: 3.5: VERSION-CONTROL response codes Note that this would only apply to VERSION-CONTROL when applied to a version controlled resource. 
When creating a working resource, it would return 201 but no Location header (because the resource at the request URI was created). 
OK. Would it make sense to start a draft that contains *all* proposed extensions the working group agrees on? 
Julian 
