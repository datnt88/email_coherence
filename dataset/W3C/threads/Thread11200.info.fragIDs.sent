I aggree. 
But I *do* wish we could stop referring to SGML files as "legacy". 
Surely SGML- XML is a "down-translation" not an "up-translation". 
Afraid not. 
You lose no information in going from SGML to XML, Actaully, there are a few exceptions: as far as I can tell, the only place where we lose information with the current draft is in some rare content model with mixed content, in SDATA, where a meaningful string must be hand-translated to a numeric code, and separately documented, and (hopefully not for long), with PUBLIC, where a location independent perpetually valid identifier must be replaced with a method that depends on a particular technical infrastructure for resolution. 
Also you lose information about external data entities: data attributes are lost along with the distinction between NDATA, SDATA and CDATA entities. 
James 
Yes XML isn't full SGML but that is by design not accident. 
While we have lost "expressive" power, like being able to omit tags, we have something that itself is far simpler to express and will make it possible for information delivered over the web to "express" itself. 
This is what we should focus on not bemoaning the fact that "information" is lost in a "down translation" from SGML. 
XML *is* SGML. 
No down translation required - as long as you stay within the lines. 
If you can't live without the great intricacies of SGML, tar, gzip, and ftp work quite well for delivering a wad of SGML over great distances. 
Unfortunately, full-up SGML isn't particularly amenable to the Web and that's why we're here. 
XML is designed to bring the benefits of SGML to the Web in a manner that can be understood by mere mortals. 
This will allow more information to be delivered in meaningful ways than is possible with current web practice. 
I don't view this as information loss, but rather information gain. 
We aren't down translating SGML, we're uptranslating the Web. 
Sorry to take up your time with this but I've been a bit frustratedby this topic. 
Thanks Bill! 
Please, keep things in perspective. 
Exaggerations like "XML is not SGML therefore it is no good" help no one. 
Lets not forget what, in my 
opinion is the real point, that XML is designed to increase the audience for SGML. 
The new audience has shown by their behavior that they are unwilling to make the commitment that full SGML requires. 
Yet, HTML has shown that an audience is there. 
Hopefully XML will help those whose "expressive" needs have outgrown HTML or any other fixed tag-set language. 
And because it is a proper sub-set of SGML, XML instances are instantly ISO-8879 compliant. 
All at a cost of *some* SGML users doing a relatively (relative to may of the translations they already do) simple transform. 
BTW, during the ERB meetings I often asked the question: what will this do to the expressive power? 
I was willing to give up a whole lot more that I had to. 
Dave PS. 
Here is Bill's text in 70 column format for those who do not have auto-wrap software. 
: Bill Smith Bill.Smith@eng.sun.com 
Umm... has anyone actually said "XML is not SGML" or is that an exaggeration? 
Peter MR expressed discomfort with the number and amount of changes he was making to CML to be XML compliant. 
Since he is one of the very first to try this, we should be cognizant of his reaction. 
He supports this XML, so consider that for those for whom a case has not been made, for whom benefits are hard to demonstrate, that reaction will occur often. 
Ignoring the reaction is exactly the same mistake as ignoring the behavior of the audience you cite. 
That is the customer base speaking. 
Being on the ERB should make you more aware of the problem, not less. 
Otherwise, why are you there? 
len 
I think this is the exaggeration. 
I don't remember writing or reading "therefore it is no good." 
The point was that information is lost going from SGML to XML. 
The point was made in the context of having information in SGML that did not fit "within the lines" of XML, i.e., where a down-translation was required. 
This is not a qualitative statement, just fact. 
Does the loss of information matter? 
Depends on the context doesn't it? 
I didn't qualify my statement as to the "goodness" or "badness" of XML. 
Please don't do so for me. 
bob 
We aren't down-translating SGML, we're up-translating the Web. 
Neat. Should I make that the subtitle of the FAQ? 
///Peter 
to discover 1000s of internal "homepages" that grew overnight like magic mushrooms on a rich motherlode of corporate horseshit. 
Copyright 1996, IBM. 
All Rights Reserved 
Len, That Peter MR is an early indicator of how XML will be received by the SGML audience, is a point well taken. 
Perhaps we should consider a "Guide to Moving from SGML to XML" to help prevent surprise and confusion. 
Befor we consider changing the design based on one person's reaction we should first understand the nature of the reaction which the wg list did. 
Then, we should consider if this case is compatible with the design goals. 
As I recall Peter's initial dismay/confusion, it was that he would have to make changes, not the nature of them. 
The design never assumed that existing SGML applications would be XML complient, just that it would be straight forward to make the application complient. 
Since Peter's case is not really what we were designing for, then we should consider how XML is described and what types of support various audiences will need. 
Here, Peter's case has really helped. 
Not only 
should the nature of the transform be described, there needs to be work with various vendors and standards bodies to address the issues with entities. 
Given the nature of the group, we must rely on the market to address these needs. 
Dave 
Yes. It should be printed and given out at the XML GCA Meeting. 
I think it is compatible. 
Again, something to be fixed with software. 
Where we should be stirring up interest is in the universities: iow, put those mythical CS/BS students to work making some applets and perl scripts. 
Hey, there is a fellow in the UK building a MIDWriter, so they must have time on their hands. 
:-) 
Right. 
But he is a great bellweather. 
Hmm. I think he is a good exemplar. 
He has an application for which he used SGML and TCL/TK as I recall. 
In fact, his interface is very similar to the kind of editors I advocate for SGML (wysiwyg and SGML are a tough marriage). 
So from my perspective at least, his application is ideal. 
It has a narrow domain of application, a well thought out interface, a good grasp of SGML, yet isn't hard over into the "SGML Way" which IMO, is what holds us back. 
We spend too much time being sheepdogs nipping at the heels of the developers. 
For good or evil, at least Andreesen et al had the good sense to tell us to go to hell over that. 
I disagree just a bit. 
A lot of us ARE the vendors, writers, marketeers. 
What we should note is the bellweather. 
How could the FAQ and addenda be improved to help someone making the transition? 
What are the cases where that transition would be desirable (e.g, want to use my SGML production tools but deliver in XML)? 
What pieces of software make that transition more productive? 
What is the effect of the crabwalk on the production cycle? 
I know it is still early, but with a conference coming up in San Diego, it's not too early to talk strategies for XML developers. 
Who are they? 
The mythical CS grad is too nebulous a target. 
Who is actually out there and what do they have to work with right now? 
Here is one: I think we will find that in many cases, the same people who use Visual Basic IV to develop applications, then use say, Active X Web components, may be the ideal candidates for XML developers if they just had the components. 
I say again, that tree object in VB IV looks a lot like the TCL/TK object Peter used. 
So, what is the case for an XML component that interfaces to the AddItem method? 
(providing they fix the security hole of course). 
These are just suggestions. 
The market may provide, but we can tell them a lot about ingenious cheap ways to do that. 
XML must be easy and cheap. 
Paoli wasn't wrong. 
len 
I think this is an excellent idea. 
(I'm not volunteering, because I don't know enough about the practice of SGML.) It's not as bad as perhaps came over. 
I can hack my own stuff easily enough. 
As is clear I represent the untested market which is (obviously) less well understood. 
That has to involve "Moving from HTML to XML", and I have started to try to address that. 
If it helps, the problem was not that I had to make changes to my own material - I'd expected that. 
(I had a little whinge about having to change all the PUBLIC ENTITYs since that was an issue at the time and it seemed (and still does) unnecessary to remove them.) 
The problem was that it suddenly dawned that the whole of the standard existing SGML components were incompatible, and I got the impression (wrongly) that this had not been thought about. 
This is the key point. 
It's perfectly possible for Jane and Joe Doe to hack ISO12083 or 12200 or whatever and use it in privacy. 
It's a different matter when someone uses components which belong to someone else and which cannot interoperate however had you try and code round. 
For example, my DTDs include HTML2.0, and I asked Dan Connolly's permission (as author) to distribute it, and it was (of course) willingly given. 
However Dan wasn't at that stage clear what the precise copyright position was on HTML2.0. 
I cannot imagine getting a speedy response back from any standards body to the question "please can I make some (apparently minor) adjustments to your DTD". 
I work with (chemical) standards bodies and I would not contemplate editing any DTD and redistributing it. 
So the suggestion was mainly to get round the legal position by using the standard components. 
[I would also suggest that thought be given as to how an XML file identifies itself. 
If you have (say) two HTML2.0 DTDs (one 'SGML' and the other 'XML'), how do you know which is which? 
(apart from grepping for asterisks). 
Are they going to have a PI something like ?XML? just to alert any software? 
And do they share the same FPI?] P. Peter Murray-Rust, domestic net connection Virtual School of Molecular Sciences 
