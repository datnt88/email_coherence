Hi, I am not sure what scope we have for change to the specification (now that it's completed last call), but here are various issues/observations on draft 18: Section 11.2, the MERGE method does not have pre or post conditions that define what should happen if the DAV:source and the target URL point to the same version of a 
resource. 
I am 
assuming that the MERGE would return a success but basically be a no-op. 
Section 11.2 the DAV:descendent-version postcondition is missing a full stop (period) at the end of the sentence. 
Section 11.3 should the DAV:ignored-preview set include resources that are the same in both the target and source (do not require merging) as well as resources that are not present in the target. 
It seems like identifying resources which are ignored because they are identical would be a useful thing for this report to return. 
Section 11.3.1 in this example it would be good to show a example DAV:ignored-preview element and to show a element which has multiple resources, eg multiple conflict-previews (more than one resource in the two workspaces that conflicts). 
The current example is very simple and MERGE is quite complex. 
Reading section 11 it implies that when DAV:source is a workspace (or collection) and the target URL is also a workspace (or collection) if a VCR is found in the source collection but not in the target it is ignored and not added, this seems odd. 
Why is this? 
Surely the file should be added to the target collection. 
The VERSION-CONTROL method can be used to create multiple VCRs pointing to the same version history (provided they are not in a workspace). 
How would this affect MERGE? 
Imagine a collection containing multiple VCRs (which DAV:checked-in pointing to potentially different versions) of the same VHR. 
What would happen when a MERGE request was carried out on the collection? 
Which VCR would be the target? 
Finally, section 10.2 defines a "Collection Version Resource" and this says that a collection version captures bindings to VCRs. 
But later in section 14 a version controlled collection is defined as having bindings to version histories (VHRs). 
I think section 
10 is misleading and section 14 is correct. 
Some of the issues regarding merging I had to explain to a group of MERANT staff so I drew some Powerpoint slides to help. 
Find these slides attached to the e-mail, they may help explain the scenarios I am talking about. 
Regards, Peter Raymond - MERANT Technical Architect (PVCS) WWW: http://www.merant.com 
From: Peter Raymond [mailto:Peter.Raymond@merant.com] 
I am not sure what scope we have for change to the specification (now that it's completed last call), but here are various issues/observations on draft 18: I will get one last swipe at the document when I get it back from the IETF editor (i.e. in the nroff format), so please keep sending me any errors/typos that you find in the document, and I'll fold them into that final editing pass. 
Section 11.2, the MERGE method does not have pre or post conditions that define what should happen if the DAV:source and the target URL point to the same version of a resource. 
I am assuming that the MERGE would return a success but basically be a no-op. 
I'll squeeze an "or is the same as" into the DAV:ancestor-version postcondition. 
Section 11.2 the DAV:descendent-version postcondition is missing a full stop (period) at the end of the sentence. 
Thanks for noticing! 
Will fix. 
Section 11.3 should the DAV:ignored-preview set include resources that are the same in both the target and source (do not require merging) as well as resources that are not present in the target. 
It seems like identifying resources which are ignored because they are identical would be a useful thing for this report to return. 
A client can determine this information by subyracting the various DAV:xxx-preview sets from the original source set. 
Section 11.3.1 in this example it would be good to show a example DAV:ignored-preview element and to show a element which has multiple resources, eg multiple conflict-previews (more than one resource in the two workspaces that conflicts). 
The current example is very simple and MERGE is quite complex. 
We are planning on creating a "scenarios" document which will have more realistic examples of all the methods, and this would be a good place for this information. 
Reading section 11 it implies that when DAV:source is a workspace (or collection) and the target URL is also a workspace (or collection) if a VCR is found in the source collection but not in the target it is ignored and not added, this seems odd. 
Why is this? 
Surely the file should be added to the target collection. 
It could be, but if the owner of the target workspace has just explicitly deleted the VCR that referenced the VHR of the version, to recreate that VCR as a result of the merge would be wrong. 
Similarly, if all of those VHR's were moved into a different baselined collection (not visible in the target workspace), to recreate them in the collection they were just moved from would be wrong. 
The VERSION-CONTROL method can be used to create multiple VCRs pointing to the same version history (provided they are not in a workspace). 
How would this affect MERGE? 
Imagine a collection containing multiple VCRs (which DAV:checked-in pointing to potentially different versions) of the same VHR. 
What would happen when a MERGE request was carried out on the collection? 
Which VCR would be the target? 
It would be ambiguous, and the result would be server defined. 
There is no "right" thing to do here (sometimes you might want just one, sometimes both, and sometimes just an error message). 
Finally, section 10.2 defines a "Collection Version Resource" and this says that a collection version captures bindings to VCRs. 
But later in section 14 a version controlled collection is defined as having bindings to version histories (VHRs). 
I think section 10 is misleading and section 14 is correct. 
Where in section 14 does it say that a version-controlled collection has bindings to version histories? 
A working collection has bindings to version histories, but a version-controlled collection has bindings to version-controlled resources, not version histories. 
Note that a collection version is very different from a version-controlled collection (just as a version is very different from a version-controlled resource). 
Cheers, Geoff 
From: Peter Raymond [mailto:Peter.Raymond@merant.com] 
Reading section 11 it implies that when DAV:source is a workspace (or collection) and the target URL is also a workspace (or collection) if a VCR is found in the source collection but not in the target it is ignored and not added, this seems odd. 
Why is this? 
Surely the file should be added to the target collection. 
From: Geoff Clemm It could be, but if the owner of the target workspace has just explicitly deleted the VCR that referenced the VHR of the version, to recreate that VCR as a result of the merge would be wrong. 
Similarly, if all of those VHR's were moved into a different baselined collection (not visible in the target workspace), to recreate them in the collection they were just moved from would be wrong. 
I should have added that if the inverse were true, i.e. the files were added in source workspace, it would be wrong *not* to add the files into the destination workspace. 
So it is ambiguous. 
Note that there is no problem when the server supports versioned collections, because the collection version would be merged first, and it would add the VCR to the destination that would then be the target of the merge for the new version. 
If the server does not support versioned collections, then the client should do a merge-preview first, and ask the user what should be done about "ignored" versions. 
If the user says "ignore", then just invoke MERGE. 
If the user says "add them", then the client would first add the appropriate VCR's to the destination, and then invoke merge. 
Cheers, Geoff 
Hi, 
[Geoff Responded:] 
Yes, what you said matches how I thought Version Controlled Collections work, but does not match the specification. 
A Version Controlled Collection DOES have bindings to Version Controlled Resources and this is fine, I understand this and it makes sense. 
A Collection Version (for example the DAV:checked-in version of the Version Controlled Collection) has bindings to Version Histories. 
But the issue I was reporting was that section 10.2 defines the bindings of a COLLECTION VERSION to be bindings to Version Controlled Resources. 
This is incorrect and does not match what you said in your reply. 
I propose we make two changes: 1. 
It takes some time to understand section 14, it would have helped if the diagram was complete and showed that /x is a Version Controlled Collection, and that V2 of VH14 is a Collection Version. 
2. The current text of 10.2 says: Collection Version Resource A "collection version resource", or simply "collection version", captures the content, dead properties, and version-controlled bindings of a version-controlled collection (see Section 14). 
A version-controlled binding is a binding to a version-controlled resource..... 
I propose we make this clearer and say: Collection Version Resource A "collection version resource", or simply "collection version", captures the content, dead properties, and bindings to the Version History Resources identified in the the version-controlled bindings of a version-controlled collection (see Section 14). 
A version-controlled binding is a binding to a version-controlled resource. 
A binding of a collection version is a binding to a version history resource. 
Regards, Peter Raymond - MERANT. 
From: Peter Raymond [mailto:Peter.Raymond@merant.com] 
It takes some time to understand section 14, it would have helped if the diagram was complete and showed that /x is a Version Controlled Collection, and that V2 of VH14 is a Collection Version. 
That is probably something that would be hard to do in the final editorial pass (the pagination would have to be changed since there is no good place to squeeze that info into the existing diagram). 
Since this is explicitly stated in the text describing the diagram, I think I'd prefer leaving it the way it is (ASCII art only lets you do so much before it overloads). 
The current text of 10.2 says: Collection Version Resource A "collection version resource", or simply "collection version", captures the content, dead properties, and version-controlled bindings of a version-controlled collection (see Section 14). 
A version-controlled binding is a binding to a version-controlled resource..... 
I propose we make this clearer and say: Collection Version Resource A "collection version resource", or simply "collection version", captures the content, dead properties, and bindings to the Version History Resources identified in the the version-controlled bindings of a version-controlled collection (see Section 14). 
A version-controlled binding is a binding to a version-controlled resource. 
A binding of a collection version is a binding to a version history resource. 
The word "captures" was intended to be the flag that this was a "fuzzy" definition, that will be firmed up in the referenced section (section 14). 
But I agree we could make this clearer. 
How about: A "collection version resource", or simply "collection version", captures the content, dead properties, and version-controlled bindings of a version-controlled collection (see Section 14). 
A version-controlled binding is a binding to the version history of a version-controlled resource..... 
There is one sentence in section 14 I will also have to adjust, but I think defining a "version-controlled binding" as a binding to a version history would then make things clearer. 
What do you think? 
(Also, this has the benefit of not requiring repagination :-). 
Cheers, Geoff 
Hi, One of the problems is that Section 10 does not define the term "Version-Controlled Collection". 
How about in section 10 defining the term "Version-Controlled Collection" then we can explicitly say that a VCC has bindings to VCRs and a Collection Version has version-controlled bindings to VHRs (using the text you suggested). 
Would this also cause re-pagination? 
I am worried that if we define the term version-controlled binding to be bindings to VHRs then it will become unclear if the VCC itself has bindings to VHRs or VCRs. 
Either way, the changes you have suggested are definitely an improvement. 
P.S. I will see what I can do about getting the powerpoint slides on a public web server and let you know the URL. 
Regards, Peter Raymond - MERANT Technical Architect (PVCS) WWW: http://www.merant.com 
It takes some time to understand section 14, it would have helped if the diagram was complete and showed that /x is a Version Controlled Collection, and that V2 of VH14 is a Collection Version. 
That is probably something that would be hard to do in the final editorial pass (the pagination would have to be changed since there is no good place to squeeze that info into the existing diagram). 
Since this is explicitly stated in the text describing the diagram, I think I'd prefer leaving it the way it is (ASCII art only lets you do so much before it overloads). 
The current text of 10.2 says: Collection Version Resource A "collection version resource", or simply "collection version", captures the content, dead properties, and version-controlled bindings of a version-controlled collection (see Section 14). 
A version-controlled binding is a binding to a version-controlled resource..... 
I propose we make this clearer and say: Collection Version Resource A "collection version resource", or simply "collection version", captures the content, dead properties, and bindings to the Version History Resources identified in the the version-controlled bindings of a version-controlled collection (see Section 14). 
A version-controlled binding is a binding to a version-controlled resource. 
A binding of a collection version is a binding to a version history resource. 
The word "captures" was intended to be the flag that this was a "fuzzy" definition, that will be firmed up in the referenced section (section 14). 
But I agree we could make this clearer. 
How about: A "collection version resource", or simply "collection version", captures the content, dead properties, and version-controlled bindings of a version-controlled collection (see Section 14). 
A version-controlled binding is a binding to the version history of a version-controlled resource..... 
There is one sentence in section 14 I will also have to adjust, but I think defining a "version-controlled binding" as a binding to a version history would then make things clearer. 
What do you think? 
(Also, this has the benefit of not requiring repagination :-). 
Cheers, Geoff 
Adding a word or two here or there is fine. 
Deleting stuff is fine. 
Adding a whole new term or sentence is harder. 
Errors will be corrected no matter how much rework is required, but at the moment I'm resisting any purely editorial changes that would cause pagination spillover. 
If we redefine VCB's to be bindings to version histories, it would no longer be the case that the bindings in VCR's are VCB's, but rather that they define VCB's. 
There's just one place in section 14 that would need to be adjusted because of this (since we don't use the term VCB much), so that should be OK. Cheers, Geoff Hi, One of the problems is that Section 10 does not define the term "Version-Controlled Collection". 
How about in section 10 defining the term "Version-Controlled Collection" then we can explicitly say that a VCC has bindings to VCRs and a Collection Version has version-controlled bindings to VHRs (using the text you suggested). 
Would this also cause re-pagination? 
I am worried that if we define the term version-controlled binding to be bindings to VHRs then it will become unclear if the VCC itself has bindings to VHRs or VCRs. 
Either way, the changes you have suggested are definitely an improvement. 
P.S. I will see what I can do about getting the powerpoint slides on a public web server and let you know the URL. 
-----Original Message----- How about: A "collection version resource", or simply "collection version", captures the content, dead properties, and version-controlled bindings of a version-controlled collection (see Section 14). 
A version-controlled binding is a binding to the version history of a version-controlled resource..... 
There is one sentence in section 14 I will also have to adjust, but I think defining a "version-controlled binding" as a binding to a version history would then make things clearer. 
What do you think? 
(Also, this has the benefit of not requiring repagination :-). 
Cheers, Geoff 
I have posted these slides on the webdav.org 
site, at: Using WebDAV, it was pretty easy to do this... - Jim 
