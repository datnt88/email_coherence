Having used JTidy to produce an xml file, I then use a SAX based XML parser on it and get the following exceptions: 'Whitespace required before attributes.' caused by the following line in a javascript function: for (i=0;i y;i++) OR 'The content begining " " is not legal markup. 
Perhaps the "" (&amp;#20;) character should be a letter.' caused by : for ( i = 0; i  y; i++) Can anyone tell me why this is happening and if there is a configuration setting that will change the way the XML parser treats the ' ' sign. 
Alternatively is there a way that I can tell JTidy to simply strip out all the information between the script and /script tags as it writes the xml file?? 
My thanks in advance for any assitance in this. 
Cateen Quayle " is not legal markup. 
Perhaps the "" (&amp;#20;) character When I looked into this I discovered a bug in tidy.c 
lines 1075 and 1093 which should be testing XmlOut and not XmlTags. 
This fix now causes  and &amp; in script element content to be escaped. 
This however doesn't solve the problem for XHTML. 
JavaScript uses and &amp; both of which need to be escaped in XML content unless you wrap the content in a CDATA marked section. 
Unfortunately, current HTML browsers don't recognize CDATA marked sections, and furthermore they expect script elements to have CDATA content, and hence expect  and &amp; to be unescaped. 
The XHTML 1.0 standard therefore recommends you move your scripts to external files. 
The onmouseover and other event attributes are however ok, as browsers will deal with entities in attribute values. 
In the future as true XHTML browsers are deployed this problem will go away, since when parsed as XML, you will be able to use script elements with  for  or with the use of an enclosing CDATA marked section. 
I am uncertain as what HTML Tidy should do about this problem. 
If it wraps the contents of a script element in a CDATA marked section, it will stop the pages working in existing browsers. 
Ditto if it escapes the problem characters. 
It could write the contents of the script element to a new file, but what file name should it use? 
One possibility is simply to warn if Tidy finds  and &amp; within script elements, placing the burden on the user to decide how to deal with the problem. 
What do people think about this? 
Regards, -- Dave Raggett dsr@w3.org 
http://www.w3.org/People/Raggett World Wide Web Consortium (on assignment from HP Labs) It would be great if Tidy gave an option to write JavaScript and CSS to an external file, but this would involve QUITE SOME additional work... Such a feature would not make much sense without the ability to parse (and tidy) entire directory trees (that is: to tidy an entire project at one run, putting JavaScript functions and CSS style rules into each one external file)... Lots of work, but certainly worth consideration! 
sebastian Sebastian Lange Maybe the first chat site that validates as HTML 4.0 even though user input may contain HTML codes. 
Courtesy to Dave Raggett's HTML Tidy: Tidy your documents ONLINE: Dave, For a partial solution, how about special-casing JavaScript and CSS, and wrapping the CDATA section markup in JavaScript or CSS comments? 
So far this seems to be working for me. 
This could be expanded to cover other common cases like maybe VB Script. 
The only flaw I know of is that an embedded occurrence of ]] will end the CDATA section prematurely. 
If it occurred in a JavaScript string, it could be broken up with a backslash, but I haven't attempted to do this. 
Here are the changes I'm using (tested in Java, translated to C). They're based on a patch posted earlier by Gary L. Peskin. 
--Randy *** pprint.c 
Fri Jul 28 17:57:56 2000 --- \temp\pprint.c 
Fri Sep 01 15:46:21 2000 *** 1244,1259 **** PCondFlushLine(fout, indent); indent = 0; - PCondFlushLine(fout, indent); PPrintTag(lexer, fout, mode, indent, node); PFlushLine(fout, indent); for (content = node- content; content != null; content = content- next) PPrintTree(fout, (mode | PREFORMATTED | NOWRAP |CDATA), indent, lexer, content); PCondFlushLine(fout, indent); PPrintEndTag(fout, mode, indent, node); PFlushLine(fout, indent); --- 1244,1337 ---- PCondFlushLine(fout, indent); indent = 0; PPrintTag(lexer, fout, mode, indent, node); PFlushLine(fout, indent); + Bool isJavaScript = no; + Bool isCSS = no; + AttVal *type = GetAttrByName(node, "type"); + if (type != null) + isJavaScript = wstrcmp(type- value, "text/javascript") == 0; + isCSS = wstrcmp(type- value, "text/css") == 0; + if (xHTML &amp;&amp; node- content != null) + /* start a CDATA section for style and script content */ + /* NOTE: This won't work if the content contains "]] " */ + /* disable wrapping */ + uint savewraplen = wraplen; + wraplen = 0xFFFFFF; /* a very large number */ + if (isJavaScript) + AddC('/', linelen++); + AddC('/', linelen++); + else if (isCSS) + AddC('/', linelen++); + AddC('*', linelen++); + AddC(' ', linelen++); + AddC('!', linelen++); + AddC('[', linelen++); + AddC('C', linelen++); + AddC('D', linelen++); + AddC('A', linelen++); + AddC('T', linelen++); + AddC('A', linelen++); + AddC('[', linelen++); + if (isCSS) + AddC('*', linelen++); + AddC('/', linelen++); + PCondFlushLine(fout, indent); + /* restore wrapping */ + wraplen = savewraplen; for (content = node- content; content != null; content = content- next) PPrintTree(fout, (mode | PREFORMATTED | NOWRAP |CDATA), indent, lexer, content); + if (xHTML &amp;&amp; node- content != null) + /* end the CDATA section for style and script content */ + /* disable wrapping */ + uint savewraplen = wraplen; + wraplen = 0xFFFFFF; /* a very large number */ + if (isJavaScript) + AddC('/', linelen++); + AddC('/', linelen++); + else if (isCSS) + AddC('/', linelen++); + AddC('*', linelen++); + AddC(']', linelen++); + AddC(']', linelen++); + AddC(' ', linelen++); + if (isCSS) + AddC('*', linelen++); + AddC('/', linelen++); + PCondFlushLine(fout, indent); + /* restore wrapping */ + wraplen = savewraplen; PCondFlushLine(fout, indent); PPrintEndTag(fout, mode, indent, node); PFlushLine(fout, indent); I, for one, am in favor of at least having an option for either 1) nesting script content into CDATA sections, 2) escaping  to  and &amp; to &amp;amp;, 3) always nesting script contents in a comment and escaping --. 
In short, I don't care how it's done, but well-formedness is well-formedness. 
One of the primary advantages of (and reasons for) XHTML is the ability to do further XML processing with languages such as XSLT. 
Perhaps my situation is unique, but I don't need Tidy's output to display correctly in a browser, because it's just serving as input to my XSLT processor. 
The XSLT processor can then worry about the HTML output method, allowing the result to work in current browsers. 
So, ultimately, that isn't much of a solution for those that want XHTML that will work in browsers as their final result, and, yes, it's a cop-out to the real XHTML problem. 
But my opinion is that if Tidy is to advertise the ability to output XHTML (or any kind of well-formed XML), it should do it (or at least try its best). 
As for instances of the literal string ]] in script content, that's easy. 
Simply escape it with the following string: ]]]] ![CDATA[ Okay, I didn't come up with that, but it certainly works (by breaking the CDATA section into two). 
Thanks for all the great work you've done so far!! Evan Lenz elenz@xyzfind.com 
XYZFind Corp. "Building Better Search" Behalf Of Dave Raggett When I looked into this I discovered a bug in tidy.c 
lines 1075 and 1093 which should be testing XmlOut and not XmlTags. 
This fix now causes  and &amp; in script element content to be escaped. 
This however doesn't solve the problem for XHTML. 
JavaScript uses and &amp; both of which need to be escaped in XML content unless you wrap the content in a CDATA marked section. 
Unfortunately, current HTML browsers don't recognize CDATA marked sections, and furthermore they expect script elements to have CDATA content, and hence expect  and &amp; to be unescaped. 
The XHTML 1.0 standard therefore recommends you move your scripts to external files. 
The onmouseover and other event attributes are however ok, as browsers will deal with entities in attribute values. 
In the future as true XHTML browsers are deployed this problem will go away, since when parsed as XML, you will be able to use script elements with  for  or with the use of an enclosing CDATA marked section. 
I am uncertain as what HTML Tidy should do about this problem. 
If it wraps the contents of a script element in a CDATA marked section, it will stop the pages working in existing browsers. 
Ditto if it escapes the problem characters. 
It could write the contents of the script element to a new file, but what file name should it use? 
One possibility is simply to warn if Tidy finds  and &amp; within script elements, placing the burden on the user to decide how to deal with the problem. 
What do people think about this? 
Regards, -- Dave Raggett dsr@w3.org 
http://www.w3.org/People/Raggett World Wide Web Consortium (on assignment from HP Labs) After further review, I dislike option #3. 
The W3C advises against continuing the practice of "hiding" scripts and stylesheets within comments. 
Plus, even though I'm using a comment-aware XML parser, not everyone will be. 
For XHTML, I think Tidy's best option would be to strip any open and close comment delimiters when they are right after the opening tag and before the closing tag, respectively, and then replacing them with CDATA section delimiters. 
Tidy can then issue a warning that the script may not work in current browsers and that perhaps the user should include the script from another file. 
Let's vote! 
:) Evan Lenz elenz@xyzfind.com 
XYZFind Corp. "Building Better Search" Behalf Of Evan Lenz I, for one, am in favor of at least having an option for either 1) nesting script content into CDATA sections, 2) escaping  to  and &amp; to &amp;amp;, 3) always nesting script contents in a comment and escaping --. 
In short, I don't care how it's done, but well-formedness is well-formedness. 
One of the primary advantages of (and reasons for) XHTML is the ability to do further XML processing with languages such as XSLT. 
Perhaps my situation is unique, but I don't need Tidy's output to display correctly in a browser, because it's just serving as input to my XSLT processor. 
The XSLT processor can then worry about the HTML output method, allowing the result to work in current browsers. 
So, ultimately, that isn't much of a solution for those that want XHTML that will work in browsers as their final result, and, yes, it's a cop-out to the real XHTML problem. 
But my opinion is that if Tidy is to advertise the ability to output XHTML (or any kind of well-formed XML), it should do it (or at least try its best). 
As for instances of the literal string ]] in script content, that's easy. 
Simply escape it with the following string: ]]]] ![CDATA[ Okay, I didn't come up with that, but it certainly works (by breaking the CDATA section into two). 
Thanks for all the great work you've done so far!! Evan Lenz elenz@xyzfind.com 
XYZFind Corp. "Building Better Search" -----Original Message----- Behalf Of Dave Raggett When I looked into this I discovered a bug in tidy.c 
lines 1075 and 1093 which should be testing XmlOut and not XmlTags. 
This fix now causes  and &amp; in script element content to be escaped. 
This however doesn't solve the problem for XHTML. 
JavaScript uses and &amp; both of which need to be escaped in XML content unless you wrap the content in a CDATA marked section. 
Unfortunately, current HTML browsers don't recognize CDATA marked sections, and furthermore they expect script elements to have CDATA content, and hence expect  and &amp; to be unescaped. 
The XHTML 1.0 standard therefore recommends you move your scripts to external files. 
The onmouseover and other event attributes are however ok, as browsers will deal with entities in attribute values. 
In the future as true XHTML browsers are deployed this problem will go away, since when parsed as XML, you will be able to use script elements with  for  or with the use of an enclosing CDATA marked section. 
I am uncertain as what HTML Tidy should do about this problem. 
If it wraps the contents of a script element in a CDATA marked section, it will stop the pages working in existing browsers. 
Ditto if it escapes the problem characters. 
It could write the contents of the script element to a new file, but what file name should it use? 
One possibility is simply to warn if Tidy finds  and &amp; within script elements, placing the burden on the user to decide how to deal with the problem. 
What do people think about this? 
Regards, -- Dave Raggett dsr@w3.org 
http://www.w3.org/People/Raggett World Wide Web Consortium (on assignment from HP Labs) This workaround should meet all possible needs: !-- -- ![CDATA[ / !-- document.write(" 
p foobar \/p "); // -- ! 
]] regards, Bj?rn H?hrmann ^ mailto:bjoern@hoehrmann.de ^ http://www.bjoernsworld.de am Badedeich 7 ? 
Telefon: +49(0)4667/981ASK ? 
http://bjoern.hoehrmann.de 
25899 Dageb?ll # PGP Pub. 
KeyID: 0xA4357E78 # http://learn.to/quote 
+{i} How about ... hide-scripts: none hide-scripts: comment hide-scripts: cdata hide-scripts: comment,cdata and escape-script-entities: yes escape-script-entities: no (where "escape-script-entities: yes" means "turn  and &amp; into  and &amp;amp;). 
This way it's entirely user-configurable and nobody gets *too* disgruntled /Jelks 
