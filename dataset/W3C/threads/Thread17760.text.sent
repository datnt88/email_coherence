I got cut off. 
Maybe the Leonid shower I have been looking out my window for (this is 4am to 5am for me) fially did something. 
If so I heard it but didn't see it! 
I am not really clear on what we mean by lineraisation - to me it means various ways of stringing tables out in a line. 
One of those, funnily enough, is provided by HTML, which is after all a serial medium (as unrendered code). 
I am hoping that Scott (I'm picking on you because you seem to be the biggest proponent at the moment) can give a more concise definition, or that we can start talking about smaller pieces of the process. 
I would also like to refloat Al Gilman's suggestion from last week about providing a way to walk the document tree. 
(navigate the DOM). 
Mostly because it sems an important part of a bunch of different things we want to do. 
Is it a difficult thing to implement? 
Charles McCathieNevile 

I would also like to refloat Al Gilman's suggestion from last week about providing a way to walk the document tree. 
(navigate the DOM). 
Mostly because it sems an important part of a bunch of different things we want to do. 
Is it a difficult thing to implement? 
Extremely easy to do. 
Here's a sample JavaScript to do display the name of the HTML tag for each element: for (var i = 0, i  document.all.length, i++) alert(document.all.item(i).tagName); 
This is taken from page 169 of the book "Dynamic HTML" by Scott Issacs. 
Charles Oppermann Program Manager, Accessibility and Disabilities Group, Microsoft Corporation "A computer on every desk and in every home, usable by everyone!" Good. 
So here is the sort of low-hanging fruit we are looking for, right? 
I suspect (and hope) that it is a fairly trivial extension of the approach to test for attributes, in the same way as CSS2 requires What I am thinking is that this approach can be applied to the very simplistic sort of table navigation (cell by cell or row by row, without context) that I discussed earlier. 
It could also solve (for example) the problem of the PAGL group about skipping over links which are in blocks. 
The nature of the element, and such attributes as TITLE or ALT could be used to provide some meaningful feedback about the structure which is being walked. 
It does not solve the problem of where the heck am I - for tables you need a special beastie to run the algorithm that is used by people looking at a table to provide that information, which is (I think) also important to navigating a table. 
Then I get into idler speculation - is this a technique for building configurable outlines, or does the process go the other way around? 
And so forth. 
Charles McCathieNevile I'm not certain what you are asking for here. 
All this information is currently exposed and can be used by adaptive aids to understand the structure of the document. 
Screen readers currently use this structure information to provide navigation and alternative rendering (speech, Braille) to the user. 
Table unrolling means that the browser not use the HTML 4.0 specified means of visually rendering the table, but to use a simpler means. 
Outside the rendering code, you can use a script to manipulate the objects, but in the rendering engine the code is much different. 
Good. 
So here is the sort of low-hanging fruit we are looking for, right? 
I suspect (and hope) that it is a fairly trivial extension of the approach to test for attributes, in the same way as CSS2 requires What I am thinking is that this approach can be applied to the very simplistic sort of table navigation (cell by cell or row by row, without context) that I discussed earlier. 
It could also solve (for example) the problem of the PAGL group about skipping over links which are in blocks. 
The nature of the element, and such attributes as TITLE or ALT could be used to provide some meaningful feedback about the structure which is being walked. 
It does not solve the problem of where the heck am I - for tables you need a special beastie to run the algorithm that is used by people looking at a table to provide that information, which is (I think) also important to navigating a table. 
Then I get into idler speculation - is this a technique for building configurable outlines, or does the process go the other way around? 
And so forth. 
Charles McCathieNevile of to follow up on what Charles said: In the editor application of the core code, linearisation is supported in writing out an HTML text. 
Somewhere among those myriad programmers, somebody already has the code to do this. 
Is it really that hard to anaesthetize the table rendering and follow the linear flow and still drive text to the screen? 
Raman was quite dismissive about what Lynx does. 
"Lynx doesn't do anything to linearize tables; what it produces is just a product of what it _doesn't_ do!" 
And this seems to work. 
Saying this should be done by post-processing in a script is questionable if what needs to be done can be done simply by eliminating steps in the prior processing. 
It sounds like you are saying that the DOM is just for show, for third-party consumption; the rendering engine doesn't use it. 
Otherwise it should be simple enough to down-class tables in a shim between the DOM and the existing rendering process. 
Al 
