* New public DOM Level 3 Events draft: 
1.2.2. 
Event capture "A capturing EventListener will not be triggered by events dispatched directly to the EventTarget upon which it is registered." 
Could you point me to the text that describes how you dispatch an event 
directly to the EventTarget? 
I can't find it by inspection, but it's probably staring me in the face. 
Thanks! Steven Pemberton Chair, HTML WG 
* New public DOM Level 3 Events draft: 
Well it's as simple as triggering the event listeners for that Node. 
The third sentance of 1.2.1. 
Basic event flow pretty much says this. 
So simple, there's not much to say about it I guess. 
Mike Wow a memory-mapped fork bomb! 
Now what on earth did you expect? 
- lkml 
Are you looking for EventTarget.dispatchEvent()? 
David Flanagan 
From: "Michael B. Allen" mballen@erols.com 
Well, it says there " If neither event capture or event bubbling are in use for that particular event,..." I can find text that says how you prevent bubbling for a particular event (you set 'bubbling' to false in the object that represents the event), but not how to prevent capture. 
Event *listeners* can choose not to capture, but I don't see how *events themselves* can choose not to be captured. 
Thanks! 
Steven 
Oh. I see what you mean. 
I don't think you can switch off capture. 
The text in 1.2.1 says "If neither event capture or event bubbling are in use for that particular event, the event flow process will complete after all listeners have been triggered. 
If event capture or event bubbling is in use, the event flow will be modified as described in the sections below." 
I can see how I say "event bubbling is not in use for this event". 
I can't see how I say that for event capture. 
I read this to mean "If there are no capturing event listeners registered for events of this type on ancestors of the target event, and if it is of a type that does not bubbble..." Maybe the section should be reworded for clarity in Level 3? David 
From: "David Flanagan" david@oreilly.com 
Well, I found that, but I couldn't find how you 'switched off ' capture for 
that dispatch. 
The text in 1.2.1 says "If neither event capture or event bubbling are in use for that particular event, the event flow process will complete after all listeners have been triggered. 
If event capture or event bubbling is in use, the event flow will be modified as described in the sections below." 
I can see how I say "event bubbling is not in use for this event". 
I can't see how I say that for event capture. 
Best wishes, Steven 
From: "David Flanagan" david@oreilly.com 
for 
That's what I thought, but the text "A capturing EventListener will not be triggered by events dispatched directly to the EventTarget upon which it is registered." made it sound if there was (I thought there was something special about 'direct dispatching' vs 'capture dispatching'.) But I understand now that I misread it. 
"A capturing EventListener will not be triggered by events dispatched directly to the EventTarget upon which it is registered." means that the 'capture phase' and the 'target phase' are distinct. 
I think that part of my confusion is generated by saying there is a basic flow, and then there is event capture, and then there is bubbling. 
In fact capture is part of the basic flow, not some extra that happens in special circumstances. 
"If neither event capture or event bubbling are in use for that particular event, the event flow process will complete after all listeners have been triggered. 
If event capture or event bubbling is in use, the event flow will be modified as described in the sections below." 
This text is plain misleading. 
Event bubbling *is* an option, but event capture is not. 
Since you can find text that shows how to make bubbling optional, it sends you searching for the equivalent method for capture. 
Basic event flow is *not* modified if event capture is in use; event capture is *always* in use. 
Thanks for clearing that up for me! 
Steven 
