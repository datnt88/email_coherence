Several of us were talking yesterday at the GCA XML conference about the fact that one of the biggest problems with SGML is still with what's supposed to be one of its key goals: interchange. 
It is still way too hard to hand off to someone all the various files associated with an SGML application in such a way that the recipient can easily reconstruct it. 
SDIF has existed for years, SGML Open's TR9401 made a simple stab at addressing this in its "Issue B: an interchange packaging scheme", and then the MIME-SGML work was another attempt to standardize this, but there appears to be no interoperably accepted solution. 
Some of us feel this is such an important issue that perhaps it should be the "fourth phase" of the XML effort. 
Notice that this issue goes way beyond associating a style sheet, and I think any XML effort to associate anything with anything will naturally get us into all these issues, so perhaps we should face them head on. 
From: Terry Allen tallen@sonic.net 
| There's been a fair bit of talk on xml-dev about how to associate a | stylesheet with a document (James Clark and Terry Allen, at least, | have been involved). 
It occurs to me that this is pretty simple with | one addition to the linking spec. 
| Right now, there are no predefined values for the role attribute of a | locator. 
If the predefined value "xml-style" or "xml-stylesheet" is | allowed, this indicates that the destination is a stylesheet. 
An | xlink can be used to associate multiple possible stylesheets with a | document. 
This method allows an XLG to associate stylesheets with | read-only documents. 
Works for me. 
This XLG would be in a document other than the read-only document. 
Extending this idea, this other document could also contain all the mappings between xmllink and the read-only document's GIs and attribute names (which means that the read-only document need not use the xmllink reserved names), and even a summary of all the GIs in the read-only document that are EMPTY. 
That would enable XML (or at least the read-only document) to do without the empty/ syntax, and potentially make many existing SGML documents valid XML documents. 
With the caveat that it is actually easy to interchange an SGML document; it is hard to interchange all the other pieces needed by the application that processes it. 
It isn't hard to package it; it's hard to know what goes in the package. 
In an of itself, XML 
doesn't change anything except having *enticed* the SGML community to sit down and make agreements about this without CALS telling us we have to. 
Keep the list alive. 
It has value waaaaay beyond this year. 
Make the agreements here. 
Even COM/OLE is only a contract; it is just backed up with running code. 
Violent agreement here. 
We have lived through ten years of CALS and we all know how much of that time was spent defining 1840 which was really just a way to package a nine-track tape. 
If we insist on the separation of process and data, if we insist that style is not part of content, but we know that presentation and document management are the selling pieces, then for pity's sake, yes, let's do this up front and head on. 
We know it is needed. 
That said, an obvious but sometimes confused issue: document management, document production, and document navigation aren't the same things. 
I say this because in IETMs, this has not always been clear and when we start managing link sets and named relationships, it becomes more blurry. 
/ len bullard lockheed martin 
Couldn't some parser author add an option to spit out a list of the filenames used in parsing an instance? 
Say nsgmls -Z produces teisgml.dec 
foo.sgml teifpi2.ent 
tei2.dtd teicore2.dtd 
isolat1.ent 
(complete paths where relevant) in a form you could pipe into tar or zip? 
Or a list of the FPIs instead/as well? 
///Peter 
Yes that is possible. 
That wasn't my point although it is an excellent suggestion. 
We could not say before what a stylesheet was. 
We could not guarantee what would be in a catalog. 
We could not get two experts to agree on what a hyperlink should have in it. 
(ok... the last bit is still a problem, but has boundaries now). 
The problem has not been a technical one but one in which there have been many competing and variant approaches to the stylesheets, the links, the catalogs, etc. 
We already have systems for SGML based on strongly typed links, automated stylesheets, well-formed content, etc. 
What we have never had before was agreements among ourselves that stayed in place long enough to establish common practice. 
XML is where the SGML community has been working these things out. 
Noisy, yes; productive, very much so. 
Certainly we have been an arbitrary lot at times, but the more compelling problem has been we have been driven by other strong forces. 
The remark by Paula Angerstein, "well, more charity work for DoD" always sticks in my mind. 
American SGML was hard driven by CALS for a long time. 
That was a very big bureaucracy. 
It resulted in some excellent work, but it tended toward standard DTDs and that wasn't enough. 
Further, it was driven by requirements that weren't always generalizable. 
The IETM standards are a good example. 
It was driven by overconcern for print and presentation, and sometimes, by a lack of concern for that. 
What is different here is that XML is happening because WE wish it to. 
Not customers, not the government, not academic requirements, not the Web, none of these: this WG is made up of committed SGML professionals: top dogs, creme de la creme. 
We are the ones who care, and we are doing this using a media that allows us to come together daily, hourly, sometimes minute to minute. 
Where it may be contentious, it is our contention. 
Where it may be successful, it is our success. 
Don't forget that. 
To paraphrase what the man says at the end of the X-Files episodes, "We made this." It isn't a revolution: it is an emergence. 
SGML has been like watching an elephant give birth: long pregnancy but a big baby. 
What Paul has suggested is very right. 
There is another piece of this that has to be done, so why we are under the house fixing the plumbing, let's go ahead and tighten up the pipes. 
Nice thing about internet lists; at the end of the week, no one goes home. 
len 
I did something like this as part of a prototype for the MIME-SGML proposal using catalogs (encat). 
