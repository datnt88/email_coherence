(S1 (S (ADVP (RB Hi)) (, ,) (NP (PRP I)) (VP (AUX 've) (VP (AUX been) (VP (VBG trying) (PP (IN in) (NP (JJ vain))) (S (VP (TO to) (VP (VB add) (NP (NNS constraints)) (PP (TO to) (NP (DT a) (NNS xforms))))))))) (. .)))
(S1 (S (SBAR (WHNP (WP What)) (S (NP (PRP I)) (VP (AUX am) (VP (VBG trying) (S (VP (TO to) (VP (AUX do)))))))) (VP (AUX is) (S (VP (TO to) (VP (VB make) (ADJP (JJ sure) (SBAR (S (NP (DT the) (NN user)) (VP (MD will) (VP (VB enter) (NP (DT an) (NN integer)) (PP (IN in) (NP (DT a) (JJ certain) (NN field)))))))))))) (. .)))
(S1 (S (S (NP (PRP I)) (VP (VBD found) (ADJP (JJ easy) (S (VP (TO to) (VP (VP (VB test) (NP (NP (DT the) (NN length)) (PP (IN of) (NP (DT a) (NN field))))) (CC or) (VP (NNS others) (NP (NNS things)) (S (VP (VBG using) (NP (JJ Xpath) (NNS functions))))))))))) (, ,) (CC but) (S (NP (PRP I)) (VP (VBP dont) (VP (VB see) (SBAR (SBAR (WHADVP (WRB how)) (S (NP (PRP I)) (VP (MD can) (VP (VB test) (NP (DT the) (NN type)))))) (CC or) (SBAR (WHADVP (WRB how)) (S (NP (PRP I)) (VP (MD can) (VP (VB use) (NP (JJ regular) (NNS expressions)))))))))) (. .)))
(S1 (S (PP (IN In) (NP (NP (DT the) (NN code)) (ADVP (RB below)))) (, ,) (NP (DT the) (NN user)) (VP (MD can) (VP (VB enter) (NP (DT a) (CD 2) (NNS characters) (NN string)) (, ,) (SBAR (RB even) (IN if) (S (NP (DT the) (NN type)) (VP (AUX is) (NP (DT an) (NN integer))))))) (. .)))
(S1 (SBARQ (WHADVP (WRB How)) (SQ (MD can) (NP (PRP I)) (VP (VB prevent) (NP (DT the) (NN user)) (PP (IN from) (S (VP (VBG entering) (NP (NP (NN anything) (RB else)) (PP (IN than) (NP (NNS numbers))))))))) (. ?)))
(S1 (SINV (VP (VBZ Regards)) (NP (NNP Pierre) (NNP Busnel) (NNP PS)) (: :) (S (PP (IN By) (NP (DT the) (NN way))) (, ,) (NP (PRP I)) (VP (VBP think) (SBAR (S (NP (NNP Xforms)) (VP (AUX is) (NP (DT the) (`` ``) (JJ next) (JJ big) (NN thing) ('' ''))))))) (. .)))
(S1 (S (S (CC Or) (NP (PRP I)) (VP (MD 'll) (VP (AUX be) (ADVP (RB damned)) (S (VP (TO to) (VP (VB try) (S (VP (TO to) (VP (VB understand) (SBAR (WHADVP (WRB how)) (S (NP (PRP it)) (VP (VBZ works) (PP (IN for) (NP (NN nothing))))) (. !)))))))))) (. !)) (NP (PRP ---)) (VP (VBZ controls.xforms))))
(S1 (NP (NN ---)))
(S1 (S (S (NP (NNP Pierre)) (, ,) (NP (PRP I)) (VP (AUX 'm) (RB not) (NP (DT an) (JJ XForms) (NN expert))) (: ...) (. .)) (CC But) (, ,) (S (NP (PRP I)) (VP (VBP think) (SBAR (S (NP (PRP I)) (VP (VBD noticed) (NP (NP (DT a) (JJ possible) (NN typo)) (PP (IN in) (NP (PRP$ your) (NN code) (NNS ..))))))))) (. .)))
(S1 (S (PP (IN In) (NP (JJ type=) (`` ``) (NNS xs))) (: :) (NP (NP (NN integer)) ('' '') (VP (VBG constraint=) (NP (`` ``) (NP (JJ string-length) (-LRB- -LRB-) (-RRB- -RRB-) (NN =2)) ('' '') (VP (VBG required=) (`` ``) (ADJP (ADJP (JJ true)) (-LRB- -LRB-) (-RRB- -RRB-)) ('' ''))))) (VP (VBD /) (SBAR (S (S (NP (PRP You)) (VP (AUX are) (VP (`` ``) (VBG typing) ('' '') (NP (PRP$ your) (NNP bing)) (PP (TO to) (NP (CD xs))) (: :) (NP (NN integer))))) (CC But) (S (NP (PRP I)) (VP (AUX do) (RB n't) (VP (VB see) (S (NP (DT the) (NNP XS) (NN name) (NN space)) (VP (VBN declared))))))))) (. .)))
(S1 (SQ (AUX Is) (NP (PRP it)) (ADJP (JJ possible)) (SBAR (WHNP (WDT that)) (S (VP (MD should) (VP (AUX be) (VP (VBN xsd) (: :) (ADVP (RB integer))))))) (. ?)))
(S1 (S (S (NP (PRP I)) (VP (AUX do) (RB n't) (VP (VB know) (SBAR (IN if) (S (NP (PRP it)) (VP (VBZ makes) (NP (DT a) (NN difference)) (PP (IN at) (NP (DT the) (NN instance) (NN level))))))))) (, ,) (CC but) (S (NP (PRP$ my) (NNS xforms) (NN code)) (VP (AUX has) (NP (NNS types)) (PP (IN in) (NP (PRP$ my) (NN instance) (NNS variables))) (SBAR (IN as) (S (ADVP (RB well)) (-LRB- -LRB-) (NP (NP (RB atleast) (DT those)) (SBAR (WHNP (WDT that)) (S (VP (AUX are) (ADVP (RB *) (RB not) (RB *)) (VP (VBN declared) (PP (IN in) (NP (DT a) (NN schema.)))))))) (-RRB- -RRB-) (VP (VBP Hope) (SBAR (S (NP (DT this)) (VP (VBZ helps))))))))) (. !)))
(S1 (NP (NNP Bob)))
(S1 (S (S (INTJ (UH Well)) (, ,) (NP (PRP I)) (VP (VBD found) (PRT (RP out)) (SBAR (S (NP (PRP I)) (VP (MD could) (VP (VB use) (NP (NP (DT the) (NN number)) (SBAR (S (-LRB- -LRB-) (-RRB- -RRB-) (VP (VBP function) (S (VP (TO to) (VP (AUX be) (ADJP (JJ sure) (SBAR (S (NP (DT the) (NN user)) (VP (VBP enter) (NP (DT an) (NN integer)) (ADVP (RB only)) (, ,) (S (VP (VBG doing) (PP (IN like) (NP (DT this)))))))))))))))))))))) (: :) (S (PP (IN On) (NP (DT the) (NNS others) (NN end))) (, ,) (NP (PRP I)) (VP (VBD tried) (S (VP (VP (VBG adding) (NP (DT the) (JJ xs) (NN name) (NN space))) (CC and) (VP (AUX did) (RB n't) (VP (VB notice) (NP (DT any) (NN change)))))))) (, ,) (CC but) (S (NP (PRP it)) (VP (VB make) (S (NP (DT the) (NNPS Xforms)) (ADJP (RBR more) (JJ coherent))))) (. .)))
(S1 (S (NP (PRP I)) (VP (AUX am) (ADVP (RB still)) (VP (VBG looking) (PP (IN for) (NP (NP (DT a) (NN way)) (SBAR (S (VP (TO to) (VP (VB use) (NP (JJ regular) (NNS expressions)) (SBAR (IN if) (S (NP (PRP you)) (VP (AUX have) (NP (DT any) (NN idea))))))))))))) (. .)))
(S1 (S (NP (NP (NNPS Thans)) (PP (IN for) (NP (PRP$ your) (NNS replies)))) (VP (ADVP (RB Best)) (VBZ regards) (NP (NNP Pierre) (NNP Pierre) (NNP Busnel)))))
