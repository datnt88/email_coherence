The Rec says (http://www.w3.org/TR/DOM-Level-2-Core/core.html#ID-FF21A306): "The DOM implementation may not put arbitrary limits on the amount of data that may be stored in a CharacterData node." 
The Java bindings specify that CharacterData.getLenght() return int. 
Is there an implicit assumption that in Java a CharacterData would not exceed 2Gb? 
K. Ari Krupnikov DBDOM - bridging XML and relational databases Yes, the standard Java bindings make that assumption. 
Other bindings may bind the IDL "int" to other datatypes, of course. 
We probably overstated the case slightly when we said no arbitrary limits were permitted; at some point, you must exceed the number of bits in the machine. 
What was intended was that the user should never run into whatever limit was imposed by the implementation when processing plausible documents. 
Frankly, if you've got a single CharacterData that contains more than 2GB, it is extremely unlikely that _any_ off-the-shelf XML software will handle it, and one can argue that you were foolish to embed that much unstructured data in an XML document in the first place. 
In that sense, one can argue that 2GB is _not_ arbitrary, nor -- in practical terms -- a limit. 
But if someone has a better way to phrase this, we can consider it as a purely editorial erratum and fix it at some point... or I can add it to the FAQ document, if folks think it really is going to be asked more than once a year. 
Joe Kesselman / IBM Research I certainly agree. 
The reason I asked is that I'm working on an SQL-based implementation with Java wrappers, and there 2 GB CharacterData _are_ possible, if ill-advised. 
I was wondering if I should limit the size of CharacterData to the maximum size of VARCHAR (or clob) field (1GB in PostgreSQL), or normalize CharacterData into a one-to-many with its parent. 
And then the int question came up. 
Would limiting CharacterData to 1GB be reasonable? 
What would you consider to be a 'practical' limit? 
K. Ari Krupnikov DBDOM - bridging XML and relational databases 
