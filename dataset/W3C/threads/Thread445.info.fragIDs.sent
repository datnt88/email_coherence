The default behavior of Tidy is to replace p /p with br / . 
I have some html files which contain the phrase p &amp;nbsp; p , and I expected that same behavior would hold for them. 
This is not the case. 
I got into the source code and discovered there are two reasons for this: (1) in TrimTrailingSpace(), a check is made for a character having the value of 160 (0xa0), which is the code for a non-breaking space. 
However, the code is encoded in the buffer in utf-8, which makes it a two-byte character. 
Interestingly, the second character of the sequence is 160! 
Thus, the routine thinks it has found a non-breaking space, which it has, but only removes the second character, leaving a roque 194 in the TextNode 
(2) in TrimSpaces(), no check is made for text nodes which have trimmed into oblivion. 
I presume newer versions of tidy should include these fixes, so I am including here the diffs from the 8-2000 version that I used to accomplish this. 
288a289 
/*! NOTE: &amp;nbsp; is utf-8 encoded as two bytes */ 
293a295,299 
if ( (unsigned char)lexer- lexbuf[last- end - 1] == 0xc2 &amp;&amp; c == 0xa0) last- end -= 1; 
297a304,308 
if ( (unsigned char) (lexer- lexbuf[ last- end - 1]) == 0xc2 &amp;&amp; c == 0xa0) last- end -= 1; 
378a390 379a392,394 
if (text- start == text- end) TrimEmptyElement( lexer, text ); 
383a399 384a401,403 
if (text- start == text- end) TrimEmptyElement( lexer, text ); 
Is it? 
It trims the empty paragraph, it doesn't replace it, not 04 August release nor current CVS version. 
Why should it? 
There were some bugs in the relevant passages, but without a small test case, that demonstrates the problem, it's hard to figure out what went wrong here and whether it was already fixed, so please provide such a test case, thanks. 
Bj?rn H?hrmann { mailto:bjoern@hoehrmann.de } http://www.bjoernsworld.de am Badedeich 7 } Telefon: +49(0)4667/981028 { http://bjoern.hoehrmann.de 
25899 Dageb?ll { PGP Pub. 
KeyID: 0xA4357E78 } http://www.learn.to/quote/ 
I made a slight mistake here; the 8-2000 version of tidy _does_ delete text nodes which have been trimmed into oblivion _if_ they are not attached to a td or th node. 
(I presume there are good reasons for maintaining zero length text nodes for those tags, although for the life of me I can't figure out what it would be). 
In any case, here are the revised diffs for parser.c 
which fix the mis-trimmed &amp;nbsp; entity. 
289d288 /*! NOTE: &amp;nbsp; is utf-8 encoded as two bytes */ 295,299d293 if ( (unsigned char)(lexer- lexbuf[last- end - 1]) == 0xc2 &amp;&amp; c == 0xa0) { last- end -= 1; } 304,308d297 if ( (unsigned char)(lexer- lexbuf[last- end - 1]) == 0xc2 &amp;&amp; c == 0xa0) { last- end -= 1; } 390d378 { 392,394d379 if (text- start == text- end) TrimEmptyElement( lexer, text ); } 399d383 { 401d384 } 
How else would you specify an empty table cell? 
You're right. 
I was confused because I had changed the default for DropEmptyParas to no for my testing. 
The behavior I was describing occurs when you set the parameter to no in your config file. 
"Should" is a religious question, which I tend to avoid whenever possible; I leave to wiser heads than mine the question of whether or not p &amp;nbsp; /p "should" be treated differently than p /p . 
I simply stated that I _expected_ them to be treated the same, and for my particular application I _want_ them to be treated the same. 
As I have already fixed my copy of the code the question is not relevant for me. 
On the other hand, if others desire the same behavior as I do, I have provided the fix. 
Attached. 
You will note that the file contains 3 cases: 
Assuming the default configuration (DropEmptyParas == yes), in the first case the line is returned unchanged, in the second case the spaces are trimmed, but the tags are returned (resulting in an empty paragraph on output), and in the third case the line is dropped from the output. 
I would expect the same behavior in all three cases. 
What is the rationale for three different treatments, if that is in fact what is desired? 
I'm going to embarrass myself by displaying my ignorance. 
Can't an empty 
table cell be specified by an empty pair of tags, with no enclosed text? 
(e.g. td /td as opposed to td /td ) 
Oops, forgot to attach the file for you. 
Re-reading my previous response I believe I could be a little more clear about my motivations. 
The problem is caused by (gasp!) Microsoft Word 2000! 
If I create a Word 2000 document that contains a double space between certain paragraphs, when creating its bloated and inappropriate HTML Word represents the empty line as a paragraph with a single non-breaking space. 
My goal is to tidy this to a break ( br / ) instead of an (almost) empty paragraph. 
What about putting it through sed? 
tidy ... | sed -e 's/ p &amp;nbsp; \/p / br \/ /g'  output.html 
Ignacio Vazquez-Abrams ignacio@openservices.net 
I'm going to embarrass myself by displaying my ignorance. 
Can't an empty 
table cell be specified by an empty pair of tags, with no enclosed text? 
(e.g. td /td as opposed to td /td ) From the HTML 4.01 DTD: Since bare text is allowed in a table cell, XHTML must also formally allow a table cell to be empty. 
I do remember having trouble with empty table cells, so I don't ever write them any more, but it was sufficiently long ago that I no longer recall why. 
Actually, the cell itself usually "collapses". 
Thus, there is no background fill rendered, and no border. 
Further, if all cells in a given row or column are empty, the table will render as if the row or column didn't exist at all. 
This is contrary to what most people think of when referring to an empty cell (namely, a reserved space which doesn't happen to have any text or graphic, but still takes up space as if it contained a line of text with the default formatting) and so &amp;nbsp; is used to provide that line of text without actually showing any text. 
This is very similar to the p &amp;nbsp; /p issue. 
Probably because most rendering engines don't display a cell border around an empty cell. 
Klaus Johannes Rusch KlausRusch@atmedia.net 
