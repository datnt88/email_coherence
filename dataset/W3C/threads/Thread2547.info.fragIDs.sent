Fact: some people hate cookies. 
They keep telling their browsers not to accept them. 
A simple-minded way to write some kinds of server-side applications is to make sure a browser has a cookie by re-issuing it under certain conditions, such as not receiving a cookie header in the request. 
It's annoying to have to have server side state to indicate whether 
you think you've already sent someone a cookie, in order to avoid annoying a user who may be deliberately rejecting cookies. 
Shouldn't there be something in the cookie-related part of the protocol so a client can tell a server not to send a certain cookie? 
It would be nice if it could specified at the level of a particular cookie, so a user could be particular about which ones to accept and reject. 
Then, if a user told a browser not to accept a cookie, the browser could include a header line on subsequent requests whose meaning would be something like "Hey! 
Remember that cookie you tried to send me? 
Well, don't!" 
I'm not proposing a specific implementation - just wondering if there's any reaction here to such a thought. 
Are repeated pop-up warnings a protocol problem? 
Seems to me they're a UI problem, not a protocol problem. 
The browser _could_ (though indications are the browser companies don't see the value in this) provide a better set of cookie-rejection options to, for instance, avoid bugging the user with repeated pop-ups. 
Point taken. 
Furthermore, if the browser people are not up to the task you suggest, chances are they will not be up to the task I suggested either! 
--Shel 
An alternative I proposed was that servers beable to stipulate that cookies are required for an application to function. 
I forget the details of what I suggested or the brief discussion thread. 
But one must ask why users hate cookies and wonder what UI and/or server and hence perhaps protocol support might change that situation. 
Larry Masinter recently 'suggested' that perhaps getting a better solution to state management warranted a new WG. 
If the UA vendors expected to provide a high percentage of the desk top UAs were interested, I believe there a number of avenues left untested in terms of providing better support from all perspectives for state management. 
As I recently noted in a post to the StateManagement sub-group list, it seems that the UA design point for cookies is to share then between all open browser windows. 
That really does make it hard to manage a session. 
Dave Morris 
Isn't this rather self-defeating? 
This mechanism could then be used instead of the cookie. 
Cheers, Ben. 
A.L. Digital Ltd, |http://www.algroup.co.uk/Apache-SSL London, England. 
|"Apache: TDG" http://www.ora.com/catalog/apache 
Users hate it because of _persistent_ cookies: Cookies that are requested to remain valid for literally YEARS. 
I routinely refuse *ANY* cookie that will not disappear when I shutdown the browser. 
You can solve the problem by giving the users the options to protect their privacy by allowing them to simply refuse persistent and third party cookies. 
To Netscape's credit they now have the option to silently turn off third party cookies. 
To Microsoft's discredit they still do not allow silent rejection of third party cookies and have implemented a mis-leading dialog that can result in people turning ON cookies by default when what they wanted to do was to turn them OFF silently. 
But the fundamental privacy invasion is cookie persistence since it allows profiles to be assembled over LONG periods of time without the informed consent of the user. 
UAs should be REQUIRED to provide ways for users to say 'never accept a persistent cookie' and 'never accept a third party cookie' with making the user get battered with 'Would you like to accept' dialogs. 
Better yet would be the ability to turn cookies permanently on or off on a site by site basis. 
I guess what I am trying to say is that cookie are easily abused in privacy violating ways while providing the users very little control. 
Add in NS's and Microsoft's public hostility to proposals for increasing user privacy and the creation of user paranoia about cookies is an obvious outcome. 
FYI: As an ISP we have blocked cookies in our HTTP proxies. 
I suspect more than a few other ISPs have also done this. 
This is really the ultimate response of ISPs to the browser makers' "we're not going to respect your users' privacy and you can't make us" attitude. 
We can _and have_ in effect removed *ALL* cookie functionality from their browsers. 
I could easily see European ISPs doing the same thing en mass to comply with Europe's personal data privacy laws. 
Wouldn't it be so much simpler for the browser makers' to simply do the _RIGHT_ thing and give users strong, detailed and informed control of cookies? 
A server (billionclick.com) different than the one currently | being browsed (myserver.com) 
has requested a cookie | (ssdflskdjfs=sdsdf) that will persist until 12 December, 2010. 
| The server states the following reason for the cookie request: | "This cookie is used for tracking advertising exposure of banner | advertisments and targeting banner ads to potential interest. 
| No personal identifying information is being accumulated nor | is the information being used in any other way." 
[More Info] | [x] Accept all future cookies from billionclick.com | [x] Allow cookies to persist after browser shutdown | [ ] Don't allow cookies to persist after browser shutdown | [ ] Ask for all future cookies from billionclick.com | [ ] Allow this cookie to persist after browser shutdown | [ ] Don't allow this cookie to persist after browser shutdown | [ ] Refuse all cookies from billionclick.com | 
Benjamin Franz 
Speaking only for myself, I don't like them because they're too often used only to track user behavior rather than provide me some service. 
In that case, I'd like to save cookies and replay them, only if my request URL can contain a small advertisement, ala' Yahoo, et al's pages. 
That way, I too can recover the cost of maintaining state for a _commercial_ entity, for _their_ benefit. 
Until then, I'll turn them off. 
Less state on both ends ought to make the processing response time faster, if nothing else. 
Joe Joe Touch - touch@isi.edu 
http://www.isi.edu/~touch/ 
ISI / Project Leader, ATOMIC-2, LSAM http://www.isi.edu/atomic2/ 
USC / Research Assistant Prof. http://www.isi.edu/lsam/ 
Yes, of course you're right, if it were per-cookie instead of per-server. 
If there were a generic "don't send cookies" command, that would not convey any state information. 
As Marc Hedlund pointed out, we don't need anything in the protocol for this at all -- the same UI mechanisms that would have to be built for that could entirely handle the problem. 
Sorry to waste time by bringing this up -- the dangers of "thinking out loud" in a group like this. 
--Shel 
