Recently, there've been a wave of criticism of the S proposal on the list. 
I'd like to address a central concern here. 
It seems that S is disliked by some because it seems to suggest a certain "idiom", or "data coding style", which deviates from many existing use cases. 
I've pointed out many times that this idiom is not the only way of using S, but this issue keeps being catcalled over and over again, sometimes using very unconstructive arguments. 
To remind, the essence of the S proposal is to denote datatype mappings using RDF properties. 
I believe this is easy enough to understand. 
Doing so enables two things: 1) referring to value space and lexical space of a datatype mapping explicitly 2) referring to individual elements of value spaces explicitly This is pretty much it. 
The document I've been working on illustrates one possible idiom of how elements of *value spaces* can be used and referred to by applications. 
Let me call it "Idiom A": Idiom A Range of a property like dc:date is defined as the *value space* of a datatype: dc:date --rdfs:range-- [] --rdfs:domain-- xsd:duration Therefore, to refer to individual elements of the value space we write: X --dc:date- [] --xsd:duration-- "2001-12-04" Idiom B Another way of using datatype mappings is to define the range of a property as the *lexical space* of a datatype: dc:date --rdfs:range-- [] --rdfs:range-- xsd:duration Therefore, we write: X --dc:date- "2001-12-04" In this case, the property values of dc:date are lexical tokens that belong to the lexical space of xsd:duration. 
However, since there is exactly one duration value that corresponds to each lexical token, applications may exploit this fact to determine what durations are meant. 
Epilogue Proposal S *does not* state that A, B or some other idiom is the best, normative way of modeling typed values (although the document I've been working on focuses on A so far). 
Most of the time, whether we use A or B is plain irrelevant given a scope of a specific application, as long as the one or the other idiom is used consistently. 
Complications arise when we start integrating different applications, or when more sophisticated datatype modeling is required (like union of types in XSD). 
My belief is that for such involved scenarios the Idiom A is superior. 
As part of that wave, I would like to acknowledge that idiom B is an interesting way forward that I had not appreciated before; sorry for not having read all the messages adequately. 
Jeremy "the range of a property" is an ill-formed definite description; a property can have lots different classes as ranges. 
Not to mention that a bnode can't be the object of two different statements in RDF/xml. 
We can use this idiom if, as Graham suggested[1], we pick names for "the lexical space of the xsd:duration datatype"; say, rdfd:durationLexicalSpace. Of course, once we pick it, we would say xsd:duration rdfs:range rdfd:durationLexicalSpace. I think Idiom B is much akin to PL[2]. 
I like the idea that - we give names to all three (lexical, value, mapping) parts of each of the primitive datatypes - we explain how to use them (PL/S-B, S-A) - we let users choose [1] http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2001Nov/0646.html mid:5.1.0.14.2.20011129192853.00a00250@joy.songbird.com 
[2] http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2001Dec/0003.html mid:3C0C100C.245969A7@w3.org 
Dan Connolly, W3C http://www.w3.org/People/Connolly/ Granted. 
Absolutely. 
BTW, thanks for a nice summary! 
I'm going to reorganize the DT document to reflect the new insights. 
I believe that's the way to proceed. 
I'm going to raise this point as an action item tomorrow. 
Great suggestion! 
Sergey 
