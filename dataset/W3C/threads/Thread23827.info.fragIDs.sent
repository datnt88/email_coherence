One way around this may be to adapt a technique from the computer virus "industry"; namely polymorphic code. 
Have the program which generates font applets (each with a limited scope) perform transformations on the code to perturb it. 
The trouble is that once someone has spent four months slaving away to produce FontBreaker, anyone can use it easily. 
I only know one mechnism that works at all well: random encodings. 
Unfortunately, this renders the text unintelligible for readers without the font, so won't do for us. 
It would work for printing, though. 
The idea is that you re-encode the font so that position 65 (say), instead of containing an A, might have an `e'. 
Now, this is a simple cypher, but the point is that the obvious way to reverse it and restore the original encoding involves going into a font editor and actually looking at each glyph &amp; deciding what it is. 
I.e. hand work, and too much trouble for most people to go to. 
Of course, once it's done, someone could post the `corrected' font. 
And if you can deduce the algorithm for randomising the encoding vector, you can immanentise the escutcheon, so to speak. 
Some TeX PS drivers used to do this, and so did SoftQuad's troff HPLJ driver, because the font was built up on the fly, so the characters were added to a font-built-on-the-fly in the order in which they were seen in the output. 
It really makes life hard for people who want to do text searching in Acrobat :-) So possibly if outline fonts were `lightly encrypted' between server and browser, e.g. with 40-bit public key or modified DES, and stored thus in the browser's cache, and even more lightly obfuscated on their way to the printer, and not actually installed into the system during use, but entirely internal to the browser, there would be many fewer difficulties. 
The `light encryption' between browser and server might involve the IP address of the server, for example, so that merely taking a copy of a font and putting it up on your server would give you an object that wouldn't `decrypt' to anything useful. 
I think it's important to remember (and most people on this list are very, very well aware of this) that Adobe is advertising PDF heavily (or was a few months ago) on the strength of its font embedding to preserve corporate identities. 
I'd rather see outline fonts used on the web than a move to PDF and away from HTML (and still further away from SGML). Lee 
Java applets should really be encrypted, so only users with a valid public keys could use them. 
They should also have fields saying whether they can be saved unencrypted or not. 
This requires VM changes (or perhaps just class loader). 
[Gavin Nicol] 
The problem is, for the protection to be effective, the specification has to be kept secret, otherwise there's nothing stopping someone from hacking their browser to save them unencrypted. 
And if the specification is kept a secret, that discriminates against free software, by not allowing free browsers (such as lynx and xmosaic) to have this functionality. 
Until someone cracks it, of course. 
And don't even mention US and other cryptography laws. 
acb@dev.null.org -- Mumbles 
Well, we all know that absolute security is a myth anyway. 
Let's look at it this way: would you like someone to walk in with one of the 3 decompilers (not disassemblers, decompilers) for JAVA, and reverse engineer your technology in half an hour, or would you like to cause them to spend *time* breaking your security? 
If you use public key technologies, and supply keys to only licensed communications), then the only people who will be *easily* able to crack your class are people who 1) have a valid license, or some other way of accessing a valid key. 
2) That have source to the VM, including source to the part that does the decryption etc. 
If we further restrict things so that only *binaries* (shared libraries) for the encryption technology are available, it makes it even harder. 
I think that's about as close to secure as you're likely to get in the environment we imagine such fonts in. 
This doesn't need to penalise free software. 
