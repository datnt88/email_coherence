As of the spec: The DOMBuilder section has this description: Asynchronous DOMBuilder objects are expected to also implement the events::EventTarget interface so that event listeners can be registered on asynchronous DOMBuilder objects. 
However, in order to implement the EventTarget interface, the DOMBuilder (which does NOT inherit from Node), needs the getFeature method. 
This will allow someone to go: DOMBuildermyBuilder; EventTargetmyTarget; myTarget = (EventTarget)myBuilder.getFeature("Events", 
"3.0"); myTarget.addEventListenerNS("http://www.w3.org/2002/DOMLS", "load", myListener, true, NULL); Michael Mansell, Senior Product Architect PureEdge Solutions Trusted Digital Relationships v: 250-708-8046 f: 250-708-8010 1-888-517-2675 http://www.PureEdge.com 
Just like all DOM specs prior to the Level 3 specs, it's fine to rely on binding specific casting to obtain the the interfaces that an object is stated to implement. 
And especially in this case, where the DOMBuilder itself will be the event target, it *must* be the same object (or an object that's castable from A- B- A) since once the event handler is called, the event's target will be the DOMBuilder, at which point you'll need to cast the EventTarget to a DOMBuilder (unless you want EventTarget to also have a getFeature() method?). 
IMO there's no need for this. 
The below code should do the right thing in all compliant implementations: DOMBuildermyBuilder; EventTargetmyTarget; myTarget = (EventTarget)myBuilder; myTarget.addEventListenerNS("http://www.w3.org/2002/DOMLS", "load", myListener, true, NULL); and then in myListener::HandleEvent(): DOMBuilder myBuilder = (DOMBuilder)event.target; 
jst While I agree with you in practice, my feeling is that whole point behind the getFeature() method was to allow for implementions to have the flexibility in delegating DOM functionality to third-party code (See section 1.1.12. 
Mixed DOM implementations in the core spec). 
I feel that the specifications from the W3C should "eat-their-own-dog-food" so to speak. 
Therefore, we should not assume that the object implementing DOMBuilder must implement EventTarget. 
Therefore, you need a getFeature on DOMBuilder. 
If you feel that DOMBuilder *MUST* implement EventTarget, then change the definition of DOMBuilder to actually extend EventTarget. 
And yes, I do think that EventTarget should have a getFeature() method. 
I'll be sending a separate email on that topic later. 
Cheers, Mike M There's nothing to assume here, it's stated in the spec that objects that implement DOMBuilder are expected to implement EventTarget as well (maybe the wording should be changed to say "must" in stead of "are expected to"?). getFeature() makes sense in places where extensibility matters, and where it's not feasable in all implementations to make the underlying objects implement all random interfaces, or "features", if you like, but in this case, none of the above matters. 
The size of a DOMBuilder hardly matters, so making it implement an additional interface is not an issue, and if you care about extending a DOMBuilder, you should look into supplying an additional DOMImplementationLS implementation that can create the extended DOMBuilder implementations for you. 
No, that's not how things are done in the DOM specs, look at all the other similar cases in the DOM specs, no other interfaces inherit EventTarget, though some probably could. 
And note that support for events is optional (here, as in all other cases), a DOMBuilder only needs to be an EventTarget if it's an asynchronous DOMBuilder, not if it's synchronous (and you can tell using DOMBuilder.async). 
I disagree with this too, as I'm sure you've understood by now :-) jst 
