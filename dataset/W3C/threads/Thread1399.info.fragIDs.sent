This doesn't feel right. 
Tim's point about supersets worries me. 
And clients that don't look at enough scope to be able to differentiate future/private types. 
We have specific types of resources in the spec. 
Semantic/conceptual 
types 
of resources. 
It seems better to state "this resource is of THIS 
type" 
than to let it be inferred by the property set. 
That inference step is rather brittle over time. 
I agree with Greg. 
I believe that all client implementors can correctly implement a simple string comparison against the value(s) in DAV:resourcetype. 
I do not have faith that *all* client implementors will (a) think about the issue long enough to realize that they can, in fact, infer the resource types from the supported live properties, 
Then this has to be spelled out in the spec in such a fashion that client implementors don't have to discover it. 
and (b) implement the inference logic uniformly and correctly. 
Clients and 
servers 
don't even support the "charset" MIME parameter uniformly, and this is relatively simple in comparison. 
We are asking clients to do far more than Set comparisons if they are to use Delta-V effectively. 
I don't think this is a matter of complex implementation. 
Therefore, I recommend that the DeltaV specification *keep* the DAV:activity, DAV:version-history, and DAV:baseline resourcetype values. 
It's worse than that; I was also suggesting extending the existing resource types as detailed in preious posts. 
Tim 
Therefore, I recommend that the DeltaV specification *keep* the DAV:activity, DAV:version-history, and DAV:baseline resourcetype 
values. 
What about "version-controlled-resource", "version" and "workspace"? 
It would also be nice to identify a version-controlled collection in some way that it's also recognizable as a collection (e.g. 
DAV:resourcetype DAV:collection/ DAV:version-controlled-collection/ /DAV 
:resourcetype 
(I'm just doing this so Geoff will change color -- too bad I shan't be there to see it g ) My view of the world... Here's the list of elements that could appear in a DAV:resourcetype. 
Some of these can be combined to provide a really meaningful experience for the client. 
Obviously, some combinations are invalid. 
So, /DAV:resourcetype would be good, that is, not surprisingly, an activity resource. 
would be good too, it is a checked-out, version-controlled resource for a workspace collection. 
And so on. 
Tim 
What is your rationale for checked-in/out in the type? 
I think I have missed something in the spec, since it feels like a property to me. 
