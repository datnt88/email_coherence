Hi everyone; just noticed an irritating conundrum in the XML spec, which can easily be solved in a couple of arbitrary ways, without apparent ill-effect; this note is just to run the problem past the group's eyes to make sure the obvious solution doesn't break anything. 
Suppose that you wanted to insert a reference to a Unicode character whose value is decimal 47,806 or hex 0xbabe. 
The XML spec as written would allow all of the following: &amp;u-babe; &amp;U-babe; &amp;u-BABE; &amp;u-bABe 
which is OK at one level, and no problem for a parser (mine anyhow), but probably not acceptable, if only for the cultural reason that SGML-folk expect strings between '&amp;' and ';' to be case-sensitive. 
So I think we should reword the spec to require one of: (a) &amp;u-babe; (b) &amp;U-BABE; (c) &amp;u-BABE; (d) &amp;U-babe; 
I cannot for the life of me see any significant advantage to any one over the others. 
If anyone sees anything worth shouting about, please do so (I really mean, please don't) - in the event of silence, we'll just do a quickie vote in the ERB and settle it. 
- Tim 
[Tim Bray] 
This was the reason for suggesting that function characters be used instead. 
a) Function characters are case-insensitive, unlike entities. 
b) These are really character references, and &amp;#u-babe; looks more 
like a character reference than &amp;u-babe;, so is easier for users. 
c) Since the syntax is fixed, using up the function character namespace is not a problem at all, unlike using up the entity namespace. 
-Chris Christopher R. Maden One Richmond Square DynaText SIT Technical Support Providence, RI 02906 USA Inso Corporation +1.401.421.9550 (voice) Electronic Publishing Solutions Division +1.401.521.2030 (facsimile) 
Vote. Settle. 
All lower or all upper is better than mixed. 
Take this as a vote (arbitrary) for all lower. 
-Debbie 6010 Executive Blvd. 
Suite 608 E-mail: dlapeyre@mulberrytech.com 
Rockville, MD USA 20852 
On &amp;u-babe; vs &amp;U-BABE; vs any other combination: I would prefer all lowercase like Debbie, but since the stock SGML approach to case-folding is to fold it to upper, would that not provide more consistency of practice? 
John Lavagnino Women Writers Project, Brown University 
But entities do not do case folding with the RCS, so this is not relevant. 
The huge majority of standard entities are lowercase, and lowercase doesn't require using the shift key. 
I'd prefer all lowercase. 
I'd sent a private message to Tim a little earlier with one point. 
I also prefer all lowercase to uppercase, but given that we may want to identify the &amp;U- as Unicode, I thought keeping the 'U' uppercase would help as in &amp;U-babe; Also, since Unicode is a trademarked name it seems to make a bit more sense to keep it uppercase, and it also differentiates the rest of the entity name ('babe') from the part that doesn't change ('&amp;U-'). 
Murray Murray Altheim, Program Manager Spyglass, Inc., Cambridge, Massachusetts "Give a monkey the tools and he'll eventually build a typewriter." 
But entities do not do case folding with the RCS, so this is not relevant. 
The huge majority of standard entities are lowercase, and lowercase doesn't require using the shift key. 
I'd prefer all lowercase. 
On the other hand, we have to worry about conflicting with existing entity names. 
&amp;u-grave; &amp;u-bar; and &amp;u-acute; can't be taken for hex numbers, I suppose, but I'd still be happier with &amp;U-DEAF; instead. 
Something like &amp;#0xDeaf; is even better, although this can't be represented in SGML today. 
&amp;#xDeaf; might actually work better for backward compatibility, I'm not sure. 
&amp;-xml-utf-babe; would work, and would follow the XML philosophy on namespace, but is slightly more verbose! Lee 
I'd still like to hear a counterargument to defining the reserved Unicode stuff as case-insensitive, non-namespace-eating, looking-like- charrefs, FUNCHARS (&amp;#U-bABe;). 
-Chris 
ditto. 
I'm amazed. 
The Unicode Standard 2.0 says on page 1-5 that the Unicode value of a character "is expressed as U+nnnn, where nnnn is a four digit number in hex, using the digits 0-9 and the letters A-F." Considering that we don't want non-SGML apps to have to do case folding, if we are to prefer one form, how can it not be all-caps? 
Regards, Terry Allen Fujitsu Software Corp. tallen@fsc.fujitsu.com 
"In going on with these experiments, how many pretty systems do we build, which we soon find outselves obliged to destroy?" - Benjamin Franklin A Davenport Group Sponsor: http://www.ora.com/davenport/index.html 
A character string is still recognized as a delimiter when its first character is entered using a named character reference. 
Also the SGML declaration that would be required for an SGML parser to handle this syntax would not be very practical. 
The only really satisfactory solution is an SGML extension (which I hope that the SGML TC currently under discussion will provide). 
James 
( Oops extra  by courtesy my idiot fingers.) 
I don't have a problem with allowing any of those forms. 
If you only allow one, probably (b). 
It should be &amp;UBABE; because * The U stands for Unicode, and imitates the Unicode people's preferred form of U+BABE. 
* The - should be missing, because it adds a few extra K to any large series of declarations, for no real benifit I can see. 
* The BABE should be upper case because human typists have already stuck their shift key down to get the &amp;U * For compatibility with the currrent SPREAD entities, available The "u-" form is taken from a very old draft of SPREAD. 
After various discussions, I changed it to the simpler "U" form, which is what found its way into ISO/IEC 14755, 'Input Methods to Enter Characters from the Repertoire of ISO/IEC 1-646 with a Keyboard or Other Input Device', which has just been accepted, if my memory serves me well. 
To quote from that DIS: "In this standard, identification of specific character of the UCS repertoire will be by means of symbols in the form Uxxxxxxxx." The xx is hex. 
In that standard the hex is all uppercased, though it urges case insensitivity. 
That standard also allows you to elide leading 0s. 
That standard basically gives several methods for input, including a chord entry method: shift + control being held down, while the other hand types in the hex number I think. 
I wish that something like &amp;#0xbabe; could be allowed, though -- a relatively straight forward backward compatible extension to 8879 -- as per C, C++, Java, etc. 
I hope some system for Hex numbers finds its way into ISO 8879. 
Decimal numbers are quite good for computers, but not very convenient for humans :-) -ricko 
Regards Level 10, 91 York Street www: http://www.allette.com.au 
On Wed, 15 Jan 1997 17:45:39 -0500 Christopher R. Maden said: 
The note describing the ERB's decision on this question (23 Oct 1996) says the following: C.5 if XML uses ISO 10646, should there be a special form of character reference using hexadecimal, not decimal, numbers, since most references to ISO 10646 and Unicode use hex, not decimal (9.5)? 
Agreed (Clark dissenting) to specify that XML documents may refer to characters in ISO 10646 using the form '&amp;u-' or '&amp;U-' followed by four hexadecimal digits, followed by semicolon. 
Rationale: Unicode and ISO 10646 documentation is in hexadecimal, not decimal, so this constitutes a small but important convenience and aid to reliability. 
The proposal to use '&amp;u' was preferred to the '&amp;#u' proposal since it is believed to allow SGML systems to handle these references (which appear to an SGML parser to be general entity references) using a default entity declaration. 
(Consult James Clark for details.) So much for the official version; what follows is my own thinking, for which the other members of the ERB are not responsible. 
I don't know how many current systems are in a position to set up a way of handling default entities that would allow them to handle these hex references correctly, but it appears at least possible within the framework of 8879. 
That's long-term solution no. 1: SGML parsers get Clever Default Entity Handling (motivated primarily, I assume, by XML and a public-spirited desire to be part of the Great Spread of SGML Across the Globe). 
Long-term solution no. 2: SGML97 gets hex character references. 
This has been proposed (it's in a U.S. position paper on the WG8 web site, for which I cannot now remember the URL), though there are some hitches finding a syntax which everyone agrees on and which doesn't involve re-interpreting some pathological cases in hypothetically existent current documents. 
If I understand the current state of play correctly, many think there is no alternative but the introduction of yet another delimiter, for hex/octal character reference open. 
If this works, it's much the best solution, and I hope you will ALL WRITE YOUR NATIONAL BODIES AND SAY YOU WANT IT. And what should we do in the short term? 
For SGML systems that cannot handle hex references using clever default-entity tricks, we seem to have the choice of (a) providing a standard set of entity declarations including all such characters, to be included in the DTD, (b) providing an SGML declaration defining all the possible hex references as names, (c) providing entity declarations or character-name declarations just for the characters actually present in the document, or (d) eliminating all such hex references by replacing them with decimal character references. 
All of these have disadvantages and (presumably) advantages; we just have to pick. 
Choices (a) and (b) seem likely to strain the symbol-table space of most parsers (I know that when writing code *I* for one often make simplistic assumptions like "The symbol table will fit within the address space of an IBM 3090" -- or even of a DOS machine). 
Choice (c) would seem to involve doing a one-off SGML prolog for each XML document, or for each set of XML documents, to be processed with a full-SGML system, which gives some people hives. 
Choice (d) requires running an preprocessor on XML before submitting it to a Full-SGML system, or at least to a sufficiently dim full-SGML system, and our goals seem to suggest it should not be the *required* or *recommended* solution: our goals say XML document instances should be legal SGML document instances, as they stand, without filtering, as long as they are provided with a suitable prolog. 
As I say, the thought that the required prolog might vary from instance to instance bothers some people a lot, but (c) seems the most plausible method of handling this in the short run, or even in the long run if SGML 97 doesn't have hex references and we are stuck with legacy parsers lacking Clever Default Entity Handling. 
In choice (c), I'm not sure it really matters whether the hex references are declared as entities or as character names (are they really all FUNCHARS? 
I don't have the standard handy) in theory, but in practice it seems easier to me if I can have a standard unchanging SGML declaration for XML documents, and confine my instance-specific tweaks to adding some declarations to the internal subset. 
Not a conclusive argument, but it does seem to me to outweight the advantage -- if it is one -- of case-insensitive hex references. 
If we do have case-sensitive references, here's my vote for uppercase. 
Uppercase is more visible, and lowercase hex looks funny. 
-C. 
M. Sperberg-McQueen 
