There's an issue with namespace normalisation in the reference algo (B.1) in PR which I hadn't noticed until DOM-TS started testing for it: if ( Element's localName is null ) // DOM Level 1 node Otherwise, report an error I believe this behaviour to be undesirable. 
It would mean you'd be unable to serialise any document containing Level 1 Elements (or Attrs) without deliberately setting the DOMConfiguration parameter 'namespaces' to false. 
Previously Core has only warned that "mixing both sets of methods can lead to unpredictable results"; this is the first time it has been made an actual error. 
Though there are indeed cases where mixing levels causes problems, there are also common trivial cases which are unambiguous. 
In my opinion, raising a warning may be appropriate, but making it an error (so that by default processing stops altogether) seems excessively harsh and likely to bite application authors a lot. 
There are still times where it is useful for a function to, for example, add an unprefixed attribute to an element without caring whether the element is a Level 1 or 2 node. 
I'm not sure namespace normalisation should be touching Level 1 nodes at all; perhaps it would make sense to raise an error only for clearly namespace-ill-formed names (eg. 
'blob::'). 
Don't know if such a change is even possible at this late stage, but I thought I should bring it up. 
Oh, and on a completely unrelated issue, the resolution to issue CR-andrew2 should be applied to setIdAttributeNode as well as setIdAttribute and setIdAttributeNS. 
And finally a typo in UserDataHandler.handle: "DOM applications must not raised exceptions..." These are the only problems I've been able to find so far. 
Looking forward to Rec! Andrew Clover I added this in our issues list: Fixed. 
Philippe, typo maker since the 1980s. 
I'd also suggest that a non-namespace aware parse would result in a document where setParameter("namespaces") returns false. 
If you don't do something like this then any existing code that did a non-namespace aware parse would silently fail on any attempt of normalization. 
I mocked up a test that checks that the value of the namespaces parameter follows the parser settings and currently it doesn't for Xerces-J. 
This is correct. 
DOM Level 1 applications need to be careful about this before invoking a load, parse, or normalizeDocument methods. 
We still believe that it is dangerous to mix non-namespaces and namespaces aware nodes in the same tree. 
This reflects a design problem in the DOM application. 
The default processing may not cause the processing to stop if the error can be recovered (cf [1]). 
Continuing the processing if the mistake cannot be recovered would be harmful if the document is being serialized for example. 
As mentioned in the section regarding XML Namespaces (1.3.3), this behavior should be avoided. 
If the processor believes that the error can be recovered, it is free to continue the processing. 
Regards, Philippe [1] 
