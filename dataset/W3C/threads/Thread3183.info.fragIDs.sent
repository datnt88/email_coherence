-----BEGIN PGP SIGNED MESSAGE----- 
Ooh. He's right, isn't he? 
I believe it, but is there an RFC one can quote to reference these guidelines? 
So the common denominator among (the tls doc) and (the common exportable Netscape) and (the common exportable MS Internet Explorer) would end up being MD5 or SHA-1 digesting, and 40-bit DES. 
This is valid, and this is supported by N. and MS., correct? 
It seems to me that it would be worth making sure we don't write a draft that isn't irrelevant to the (ahem) 'best current practice'... 
From: dpkemp@missi.ncsc.mil 
(David P. Kemp) Subject: CipherSuites for unpublished algorithms IETF guidelines are that unpublished algorithms are not to be included in Standards-Track documents, but they may be specified in accompanying Informational RFCs. 
-----BEGIN PGP SIGNATURE----- Version: 4.0 Business Edition Comment: PGP by ViaCrypt iQCVAgUBMrXV7cKmlvJNktGxAQGAHQP+PFtwMFkNMs2HMRG1vW36H7C8KdzPjgKZ HWdzG+PWamSfSwh7z2I57iD8OFvtfMTAlVw71WSX9EGaTdkhh9L88kih9qJxIq/F Ai8TNFeK8jTUPtgh65OeEtRgmrcRZjfTVgLKMHl6T+7TIQ9cwzozHL4QTSVDYvgF Qm41lgNcv5c= =IYI1 -----END PGP SIGNATURE----- Rodney Thayer rodney@sabletech.com 
+1 617 332 7292 Sable Technology Corp, 246 Walnut St., Newton MA 02160 USA "Developers of communications software" 
From: dpkemp@missi.ncsc.mil 
(David P. Kemp) 
IETF guidelines are that unpublished algorithms are not to be included in Standards-Track documents, but they may be specified in accompanying Informational RFCs. 
I don't know. 
I was previously advised that RC2 and RC4 were OK, as long as there were alternatives, but that Fortezza was right out. 
I'm going to go and check with Jeff Schiller. 
Actually, as far as I know, neither Netscape nor Microsoft support 40 bit DES. 
My belief is that the intersection of the set of publically described algorithms, the set of exportable algorithms, and the algorithms used my Netscape or Microsoft is the empty set. 
I believe this is a problem, although not an insurmountable one. 
If one doesn't restrict to exportability, I know that Netscape supports RSA-DES-SHA and RSA-3DES-SHA. 
I don't have a Microsoft Explorer 3.0 that runs in my office, and 2.0 doesn't tell me what ciphers it supports. 
Tim Dierks - timd@consensus.com - www.consensus.com 
Software Haruspex - Consensus Development Developer of SSL Plus: SSL 3.0 Integration Suite 
RFC 2026 is the current description of the Internet Standards Process. 
The POISSON working group also plans to have new drafts out sometime around Memphis. 
One applicable paragraph from RFC 2026: 10.2 Confidentiality Obligations No contribution that is subject to any requirement of confidentiality or any restriction on its dissemination may be considered in any part of the Internet Standards Process, and there must be no assumption of any confidentiality obligation with respect to any such contribution. 
As far as I know, RSA still claims that RC2 and RC4 are trade secrets. 
The TLS draft states that there is no published reference for the algorithms. 
I disagree that it's OK for a standards track document to include algorithms for which one has to purchase a sole source implementation, but it certainly seems OK to document how to use them with TLS, as long as it's done in a separate non-standards-track document. 
It would be ideal to have documentation of additional algorithms for use with TLS, both publicly available (Blowfish, SAFER SK-128, etc) and proprietary, patented, unpublished, or otherwise encumbered (IDEA, RC2, RC4, Fortezza, etc) and let market demand, performance, quality of protection, and cost decide what gets implemented in Netscape, MSIE, and SSLeay-based products. 
But the standard, mandatory-to-implement, universally-interoperable algorithm cannot be proprietary. 
It's always helpful to remember 
that this working group is not rubber-stamping an existing implementation, it's defining a specification based on both best existing practice and new requirements. 
dpk 
Unfortunately, operations in the real world mean that there will never be a universally-interoperable algorithm, even within the domain of 
supporting a single protocol, say HTTP. 
For instance, some implementations will only contain support for FORTEZZA and others will contain no support for FORTEZZA. 
There are some CipherSpecs that are only useful where MITM attacks are unlikely, say anonymous Diffie-Hellman supporting telnet on a single subnet. 
We shouldn't say "That's not TLS." since it doesn't support the 'mandatory aglorithm'. 
I'm not arguing against the goal, but the spec needs to deal (carefully) with how TLS will be actually used. 
PK Philip L. Karltonkarlton@netscape.com Principal Curmudgeonhttp://www.netscape.com/people/karlton 
Netscape Communications Corporation Everything should be made as simple as possible, but not simpler. 
-- Albert Einstein 
Although your logic is sound it doesn't seem IETF-compliant. 
Is there some way we can handle this? 
For example, if there were a TLS document, and a second document containing ("the SSL profile of TLS")? 
Rodney Thayer rodney@sabletech.com 
+1 617 332 7292 Sable Technology Corp, 246 Walnut St., Newton MA 02160 USA "Developers of communications software" 
There is at least one published description of an algorithm which interoperates with RC4; see the 2nd edition of Schneier's Applied Cryptography. 
I suspect that this may be "good enough" for RFC2026's purposes. 
The first edition is already cited as [SCH] in the bibliography (though there's a formatting glitch which makes both it and [TCP] hard to spot). 
RC2 is more problematic, but does anyone actually use it? 
Deleting it might make sense if nobody actually uses it.. - Bill 
The IETF requirement levels apply to implementations of a standard, and mandatory just means that the product must be capable of using a particular algorithm. 
The goal is to encourage interoperability by ensuring that anyone who wishes to use the baseline capability will have it available if they have a TLS-compliant product. 
Determining whether the baseline capability is enabled or not is a policy matter to be decided by the user/sysadmin/SSO, and the IETF is explicitly silent on policy. 
The actual level of interoperability in the real world will be determined by those configuration/policy decisions. 
In theory, the working group could decide to have no mandatory algorithms and make all of them optional, but it might have trouble convincing the IESG to approve a document that did not define a required (lowest common denominator?) baseline capability. 
Given that some set of CipherSuites is designated as mandatory, that set should not include proprietary algorithms when acceptable non-proprietaty alternatives exist. 
How ever I got your service,it was a mistake. 
Please remove it I'm not reading it and I don't want to read it's only messing up my email. 
Thank you and I hope this is goodby. 
