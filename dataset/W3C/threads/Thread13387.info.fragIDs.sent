We're going to be updating folks at the CSUN conference and I wanted to tell them the status of altifier. 
I have the url of the paper at 
That's correct. 
It will remain there "forever" as it's my own server. 
Is the code also available from you? 
Either as binary or source? 
The FILTER is freely available as Win32 console binary. 
I can make it downloadable from the website if you want me to/think it is usefull. 
The UNIX (Linux) port of the filter is under way by Silas and will be 
integrated in his gateway. 
Silas, how is it going? 
I am willing and open to share the source code of the ALTifier filter with anybody interested upon request by e-mail. 
The filter will remain free. 
I think it would be interesting to integrate it in Lynx or an Apache module. 
Contacts welcome. 
Notice that the interactive Win GUI REPAIR tool for authors (see screen snapshot in the report) is not yet fully working, but I plan to work on it in the coming weeks, if university time permits etc. 
The idea is to market it later as a Shareware tool for a (very low) fee. 
Anybody interested in this should contact me. 
Regards, Michael // Michael Vorburger mike@vorburger.ch 
&amp; michael.vorburger@epfl.ch 
// Student of Computer Science at EPFL, Consultant at alpha ware. 
// HOMEPAGE: http://www.vorburger.ch/ 
Not too well I'm afraid. 
I've been having a rather nasty fever and generally haven't got much done, and I've got coursework etc building up. 
I might not be able to do it until I go home. 
It is a fairly hefty thing because I have to learn your source. 
BTW I'm not trying to port it to Unix or Linux in particular, but standard C++ in general. 
Although if possible I'd like to change as little as possible of it 
For integration with the gateway, I really think it would be better if the gateway called your database directly, rather than your parser. 
This is because the gateway also has its parser, and there is absolutely no point in parsing the HTML four times when it could be done twice. 
Regards -- Silas S Brown, St John's College Cambridge UK http://epona.ucam.org/~ssb22/ 
"You may prove anything by figures" - Anonymous salesman 
DOM, da DOM DOM - Al PS: long description: This is an attempt to evoke the Dragnet radio program theme, ususally pronounced "dum da dum dum." 
The cliche connotes "the plot thickens." 
The perturbation suggests "this calls for a DOM." long explanation: The point of the Document Object Model is to be a repository where the parse results are kept and manipulated. 
code. 
Just if we were using a parser and API that conform to the W3C DOM, it helps in turning selected functions into things that can be applied in the browser, it helps in communicating the results to the vendors of mass market products, etc. 
Thanks for the suggestion. 
Well I wrote my own parser partly because I was originally doing this in my bedroom in a little village in the depths of West Dorset, with little knowledge of what the W3C was or what it did. 
But I had to make lots of changes to my parser to make sure it can cope with the various cases of non-standardness that are out there, and I have a feeling that the sample code stuff is probably rather more picky about its standards than I am. 
This probably limits its use somewhat. 
Two passes, by the way, are needed for doing things like checking what character encoding the document is in (and bearing in mind that headers can lie), and whether it's using old or new style comments, and so on. 
Well I've incorporated a kind-of extension model of my own that can probably just about be used to bolt things together as long as they're dependent on tags only. 
Once I have parsed a tag, it goes into an object with a few useful methods, and I use those methods to manipulate it in the gateway. 
If you can get extra code to use the same object, you can incorporate it with a couple of #define lines in platform.h, 
link it in, and it will appear under the Extensions button (this is what you call being messy with the preprocessor but it's supposed to make sure the extensions aren't coupled too tightly). 
Since Michael is essentially parsing a file and passing various tags to his database, I thought I could probably skip his parser and pass the tags myself, if I could figure out exactly what his database wants (slightly awkward as the code might be buggy) and hack out an interface between my tag objects and his. 
OK an extra interface is a slight inefficency, but not half as inefficent as re-reading the file a couple more times and on the other hand I don't want the coupling to be too tight. 
Regards -- Silas S Brown, St John's College Cambridge UK http://epona.ucam.org/~ssb22/ 
"Better is it that you vow not than that you vow and do not pay" - Ecclesiastes 5:5 
