Hi, 
there are two tiny questions burning under my fingernails: 1. 
Does anyone has a definition at hand about what to return if DOMImplementationSource.getDOMImplementation was called with an empty (or just whitespaces containing) "features" argument? 
2. It is still unclear to me if an error (and which) should be raised if parsing a DOMString with the LSParser, and the encoding declaration states something different than "UTF-16", or not. 
If not: should xmlEncoding be set to this declared encoding? 
Greetings, Kasimier 
I would propose null as a return value. 
I don't think it should be an error, at most a warning. 
HTTP is allowed to overwrite the encoding of the XML declaration already. 
I would treat it the same for this case: the information in the XML declaration is overwritten by the encoding of DOMString, and is therefore simply ignored. 
Philippe 
Hi, 
Ok, although if no feature was specified one could tend to misinterpret this in the form of: "no features required, so it will give me any implementation". 
A tiny hint in the specs would be helpful here. 
Great, all that I wanted to hear; so I'll just set Document.xmlDeclaration to "UTF-16". 
Thanks, Kasimier 
Currently, Xerces-J will interpret an empty features list as "no features required" and will return the first available implementation 
for getDOMImplementation and every available implementation for getDOMImplementationList. 
I believe that behavior is consistent with the spec. 
If you start out with a long features list on a call to getDOMImplementationList and start removing features, you will always get the same or larger set of implementations. 
It would be inconsistent that removing the last feature would clear the list. 
I've got two tests on tap (one each for getDOMImplementation and getDOMImplementationList) that I'll commit to the test suite unless there are any objections. 
Document.inputEncoding should be "UTF-16". 
Document.xmlEncoding should be whatever was in the XML declaration if any. 
Philippe 
Hi, 
I see. 
Thanks, Kasimier 
Hi, 
This was incorrect: there is no Document.xmlDeclaration; 
I meant Document.xmlEncoding. 
Ah, I see; so "ignored" in the way of "ignored as parsing information", but not as declared encoding. 
Thanks, Kasimier 
