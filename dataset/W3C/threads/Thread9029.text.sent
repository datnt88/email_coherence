Dear XML Working Group, I have to solve the following problem with the Enveloped Signature Transform. 
According to the definition of the here() function and XPATH predicate defined in subchapter, it is clear that enveloped signature signs/verifies "all" but not self. 
Is it also possible to sign/verify the same XML document by using more than one enveloped signatures? 
Example: Both of these signatures contain enveloped transform and refer to the same "test:a" element. 
According to the specification the first signature should sign the second one and the second one should sign the first. 
The same problem arise during verification phase. 
Is there any reccomendation for this case? 
Regards Pavel Pavel Zavora Software Developer, Systinet (formerly Idoox) --On Freitag, 1. Februar 2002 04:51 -0500 Pavel Zavora When you add sig1 to the document, you sign the document (which does include sig1 and the data) and exclude sig1. 
Then you add sig2 which signs the document (data + sig1 + sig2) and then exclude sig2; Verification of sig2 will work ok, but verification of sig1 fails: You verify the document (data + sig1 + sig2) and exclude sig1. 
So you verify (data + sig2) which was not signed (only data was signed). 
Solution: Use an XPath which omits all Signature, not only the current one. 
Regards, Christian Or if you can flexibly place the Signatures, the easiest solution is make them siblings of the signed content (detached) instead of descendents. 
Joseph Reagle Jr. http://www.w3.org/People/Reagle/ W3C Policy Analyst mailto:reagle@w3.org 
IETF/W3C XML-Signature Co-Chair http://www.w3.org/Signature/ W3C XML Encryption Chair http://www.w3.org/Encryption/2001/ Example: The XPath is only for the first ds:Signature??. 
If yes, there are no problem for verification of the first ds:Signature, after adding other ds:Signature, but for the second ds:Signature? 
The second ds:Signature signs also the first, but after adding other ds:Signature, the verification fails Solution: For each ds:Signature use an XPath omits all ds:Signature added after. 
But it really exists an XPath for this problem?? Mauro Arcolini, GapXse --On Donnerstag, 7. Februar 2002 11:48 +0100 Mauro Arcolini Sorry, I don't understand why the second signature has a problem? 
By adding the second signature to the content which is signed by the first signature, you break signature 1. 
The second signature covers the data _and_ the first signature. 
Christian Mauro, The XPath filter "not (ancestor-or-self::ds:Signature)" will remove _all_ signatures from the document, so signatures can be added at will without breaking validity. 
An alternative filter could be constructed using: here()/ancestor::ds:Signature[1]/following-sibling::ds:Signature This would be slow, and would simply remove Signatures added _following_ this signature. 
This would constrain the placement of signatures, but might be more interesting. 
Alternatively, with the enveloped signature transform, new signatures could be added as ds:Object elements within the first signature itself without XPath and without breaking validity. 
Merlin r/arcolini@sec.di.unipi.it/2002.02.07/11:48:36 Baltimore Technologies plc will not be liable for direct, special, indirect or consequential damages arising from alteration of the contents of this message by a third party or as a result of any virus being passed on. 
This footnote confirms that this email message has been swept by Baltimore MIMEsweeper for Content Security threats, including computer viruses. 
merlin wrotes: Yes its'a solution. 
It seems a very good solution, but do you repeat this behaviour if you want add other ds:Signature?, 
i.e. if you want sign the first and the second ds:Signature, without breaking the second, do you add the third ds:Signature as ds:Object element of the second e so on?? Mauro Arcolini, GapXse 
