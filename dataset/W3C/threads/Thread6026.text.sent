I'd like to try to summarize some of the recent discussion as it relates to requirements. 
I have at least seen some clear preferences emerge, although all of them may not be shared universally .. in fact I'd be surprised if they were. 
But it may help to try to write down some of the expressed positions, especially those that appear to have wide support. 
N.b. 
I'm not going to define all my terms: that's another thread. 
1. External vs. internal: as Martin mentioned at the end of the F2F, at least participants seem to agree that modelling an "external" view of interactions is necessary. 
Whether an "internal" view is also needed is TBD. 2. Multi-party vs. bilateral choreography: there is some skepticism that modelling bilateral interactions is sufficient. 
3. There also seemed to be agreement that dynamic participation is a required feature (i.e., not all participants in a choreography may be known in advance). 
4. There is an expressed preference not to require a dependency on WSDL (although as Martin noted there is a requirement in the charter that WSDL 1.2 be supported). 
(Maybe abstract WSDL is ok?) 5. Declarative vs. executable model. 
Related to point 1, and also to the discussion re context-free vs Turing-complete models at the F2F. 
This is an area where I see continued disagreement. 
However, I think this is not so much a requirements issue as a decision that will result out of other requirements. 
I.e. other requirements and use cases will drive the group to take one or another approach, when it comes to the specification phase. 
--Jon Hi Jon, Good summary. 
My comments below. 
Regards, D- "Jon Dart" Sent by: cc: public-ws-chor-req Subject: requirements summary uest@w3.org 
03/24/2003 03:32 PM Please respond to jdart I'd like to try to summarize some of the recent discussion as it relates to requirements. 
I have at least seen some clear preferences emerge, although all of them may not be shared universally .. in fact I'd be surprised if they were. 
But it may help to try to write down some of the expressed positions, especially those that appear to have wide support. 
N.b. 
I'm not going to define all my terms: that's another thread. 
1. External vs. internal: as Martin mentioned at the end of the F2F, at least participants seem to agree that modelling an "external" view of interactions is necessary. 
Whether an "internal" view is also needed is TBD. 2. Multi-party vs. bilateral choreography: there is some skepticism that modelling bilateral interactions is sufficient. 
I certainly don't think that is it sufficient to model only bilateral transactions. 
Many business transactions have multiple actors, and we want to build standards that will work for common service transaction models. 
3. There also seemed to be agreement that dynamic participation is a required feature (i.e., not all participants in a choreography may be known in advance). 
This is a must-have - limiting ourselves to predetermined transaction sequences will not work; this is inconsistent with the WS architecture model and with the needs of the users of WS technology. 
4. There is an expressed preference not to require a dependency on WSDL (although as Martin noted there is a requirement in the charter that WSDL 1.2 be supported). 
(Maybe abstract WSDL is ok?) Dependency and support are two different animals - we can support WSDL, without requiring it. 
This is probably the best approach, IMHO. 5. Declarative vs. executable model. 
Related to point 1, and also to the discussion re context-free vs Turing-complete models at the F2F. 
This is an area where I see continued disagreement. 
However, I think this is not so much a requirements issue as a decision that will result out of other requirements. 
I.e. other requirements and use cases will drive the group to take one or another approach, when it comes to the specification phase. 
I agree - this is a "how" question, not a "what". 
Let's establish our ends, and then argue over the means. 
:) Note that it is not exactly all or nothing here. 
BPSS for example supports "MultiParty Collaborations", but does so by composing them out of "Binary Collaborations". 
--Jon I was originally thinking that a multi-party choreography can always be broken down into multiple "inter-dependent" bi-party choreography. 
But I am convinced that this is NOT always possible. 
See http://lists.w3.org/Archives/Public/public-ws-chor/2003Mar/0052.html 
So I think bi-party choreography is a special case of multi-party choreography. 
Bi-party choreography has some interesting properties that can simplify the modeling. 
(e.g. Bi-Party choreography doesn't need to worry about dynamic participation because any change of a binding can simply terminate the choreography). 
I think we should covered multi-party choreography. 
In additional, we may also need to investigate this special subset called bi-party choreography. 
Best regards, Ricky Ricky: It is also interesting to introduce the perspective of why a multi-party can be used for? 
Both a multi-party and binary can be used to represent what is going to happen (see Assaf's presentation on causality). 
A binary collaboration can easily be used as part of an agreement, as well as to configure run-time engine that "monitor" the choreography (firewall concept). 
In the case of a multi-party, we might want to ask whether the goal is simply to represent what is going to happen such that each party can infer what they need to do. 
Hence decompose the multi-party into bilateral behavior (which will itself be decomposed in unilateral behavior). 
Is there a need to establish multi-party agreements based on a multi-party choreography definition? 
At the run-time engine level, things gets far more complicated because unless there is a party that touches all the "bilateral choreographies", it is impossible without special run-time to "monitor" the multi-party choreography. 
So the question arise, is the goal of a multi-party choreography specification to allow configuration of run-time engines? 
In think in the light of this, we should not conclude that binary is a special case of multi-party. 
They may well have both distinct features (control flow?) and applications. 
I am also wondering if the group wants to keep as a requirement that says that in the choreography specification there is no distinction between the choreography involving "internal" services as opposed to external services. 
A separate layer of the specification should allow for annotating that this particular message exchange is external and may have more qualifiers. 
However, at the pure choreography specification level, the choreographies should not be distinguished. 
Cheers, Jean-Jacques From: public-ws-chor-request@w3.org [mailto:public-ws-chor-request@w3.org] be But I that to may choreography. 
we models. 
"MultiParty Collaborations", but does so by composing them out of "Binary JJ, comments inline I think the "monitor" doesn't restricted to binary collaboration. 
It applies to multi-party as well. 
Decomposing multi-party into bi-party may lost some information about dependencies (see the doctor/patient use case) and is not always possible. 
I'm not sure I understand "unilateral behavior", sounds like it is a private implementation. 
I guess a multi-party choreography is only useful when all defined roles agree to conform to. 
So this is a multi-party agreement. 
I think it is possible to monitoring all traffic pattern of a single party conforms to a multi-party choreography. 
(you still need to have multi-party definition to do that). 
If every party agrees to put a monitor, then you certainly can get the whole picture. 
But even monitor one party can provide high value. 
Does multi-party covers the case when N = 2 ? 
Is so, then bi-party is a special case of multi-party. 
But I agree that bi-party may have some extra properties (such as a simpler role binding model) that we should take a serious look at. 
If choreography is only meaningful to specify a contract between multiple "domain of control", then it should only focus in the message exchange across the boundary, which means external services ? 
Right ? 
Rgds, Ricky 
