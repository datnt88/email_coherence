I tested the 4 test cases we discussed during todays telecon and I did those on 3 platforms (but am using n3 triples as we do in owl full). 
1/ /2000/10/rdf-tests/rdfcore/datatypes/Manifest.rdf#language-and-xml-literal eg:foo eg:bar "chat"@en^^rdf:XMLLiteral. eg:foo eg:bar "chat"@fr^^rdf:XMLLiteral. so that one should become a test:PositiveEntailmentTest. 
(while at it, we also did find that eg:foo eg:bar "chat"@en^^rdf:XMLLiteral. eg:baz owl:sameAs rdf:XMLLiteral. 
eg:foo eg:bar "chat"@fr^^eg:baz. 
but that one is using owl:sameAs) 2/ eg:a eg:prop "3"^^xsd:int. 
eg:a eg:prop " 3 "^^xsd:int. 
OK on (ECMA 334 compliant) MS .NET and DotGNU PNET but Xerces2 fails here for the java implementation (and I would follow the standardized results so believe the entailment holds) 3/ eg:a eg:prop " 3 "^^xsd:int. 
eg:a eg:prop "3"^^xsd:int. 
OK on (ECMA 334 compliant) MS .NET and DotGNU PNET but Xerces2 fails here for the java implementation (and I would follow the standardized results so believe the entailment holds) 4/ eg:aaa eg:ppp "333"^^xsd:int. 
eg:aaa eg:ppp _:x. 
_:x rdf:type rdfs:Literal. 
and here we found (*). 
Let's see if that is making sense, and then Jan/Dave as testdoc editors could finish ;-) Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ ). 
http://www.w3.org/2000/10/swap/log#conjunction = @prefix str: http://www.w3.org/2000/10/swap/string# . 
@prefix ns: http://www.agfa.com/w3c/euler/xsd-rules# . 
@prefix xsd: http://www.w3.org/2001/XMLSchema# . 
@prefix : file:/temp/test# . 
@prefix eg: http://example.org/# . 
@prefix log: http://www.w3.org/2000/10/swap/log# . 
@prefix rdfs: http://www.w3.org/2000/01/rdf-schema# . 
@prefix test: http://www.w3.org/2000/10/rdf-tests/rdfcore/testSchema# . 
@prefix math: http://www.w3.org/2000/10/swap/math# . 
@prefix nsns: http://www.agfa.com/w3c/euler/rdfs-rules# . 
@prefix owl: http://www.w3.org/2002/07/owl# . 
@prefix neg: http://www.agfa.com/w3c/euler/owl-rules# . 
@prefix iw: http://www.ksl.stanford.edu/software/IW/spec/iw# . 
@prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# . 
{[ iw:Variable "_:x_6"] = "333"^^xsd:int. 
eg:aaa eg:ppp [ iw:Variable " _:x_6"]} = {eg:aaa eg:ppp "333"^^xsd:int}. 
nsns: rdfs:fyi nsns:rdfs9. 
nsns: rdfs:fyi nsns:rdfs8. 
nsns: rdfs:fyi nsns:rdfs11. 
{[ iw:Variable "?X"] = xsd:decimal. 
[ iw:Variable "?X"] a rdfs:Datatype} = {xsd:decimal a rdfs:Datatype}. 
[ iw:Variable "?B"] = xsd:decimal. 
[ iw:Variable "?C"] = rdfs:Literal. 
[ iw:Variable "?B"] rdfs:subClassOf [ iw:Variable "?C"]} = {xsd:decimal rdfs:subClassOf rdfs:Literal}. 
{[ iw:Variable "?A"] = xsd:integer. 
[ iw:Variable "?B"] = xsd:decimal. 
[ iw:Variable "?A"] rdfs:subClassOf [ iw:Variable "?B"]} = {xsd:integer rdfs:subClassOf xsd:decimal}. 
[ iw:Variable "?A"] = xsd:integer. 
[ iw:Variable "?B"] = rdfs:Literal. 
[ iw:Variable "?A"] rdfs:subClassOf [ iw:Variable "?B"]} = {xsd:integer rdfs:subClassOf rdfs:Literal}. 
nsns: rdfs:fyi nsns:rdfs9. 
{[ iw:Variable "?A"] = xsd:long. 
[ iw:Variable "?B"] = xsd:integer. 
[ iw:Variable "?A"] rdfs:subClassOf [ iw:Variable "?B"]} = {xsd:long rdfs:subClassOf xsd:integer}. 
nsns: rdfs:fyi nsns:rdfs9. 
{[ iw:Variable "?A"] = xsd:int. 
[ iw:Variable "?B"] = xsd:long. 
[ iw:Variable "?A"] rdfs:subClassOf [ iw:Variable "?B"]} = {xsd:int rdfs:subClassOf xsd:long}. 
{[ iw:Variable "?S"] = "333"^^xsd:int. 
[ iw:Variable "?A"] = xsd:int. 
[ iw:Variable "?S"] a [ iw:Variable "?A"]} = {"333"^^xsd:int a xsd:int}. 
[ iw:Variable "?S"] = "333"^^xsd:int. 
[ iw:Variable "?A"] = xsd:long. 
[ iw:Variable "?S"] a [ iw:Variable "?A"]} = {"333"^^xsd:int a xsd:long}. 
[ iw:Variable "?S"] = "333"^^xsd:int. 
[ iw:Variable "?A"] = xsd:integer. 
[ iw:Variable "?S"] a [ iw:Variable "?A"]} = {"333"^^xsd:int a xsd:integer}. 
[ iw:Variable "_:x_6"] = "333"^^xsd:int. 
[ iw:Variable "_:x_6"] rdf:type rdfs:Literal} = {"333"^^xsd:int rdf:type rdfs:Literal}. 
# Proof found for file:/temp/testC.n3 in 4511 steps (20503 steps/sec) using 1 engine 
3/-- , Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
Jos De_Roo 2003-05-09 cc: 10:25 PM Subject: TEST: the 4 test cases we discussed during 2003-05-09 telecon I tested the 4 test cases we discussed during todays telecon and I did those on 3 platforms (but am using n3 triples as we do in owl full). 
1/ /2000/10/rdf-tests/rdfcore/datatypes/Manifest.rdf#language-and-xml-literal eg:foo eg:bar "chat"@en^^rdf:XMLLiteral. eg:foo eg:bar "chat"@fr^^rdf:XMLLiteral. so that one should become a test:PositiveEntailmentTest. 
(while at it, we also did find that eg:foo eg:bar "chat"@en^^rdf:XMLLiteral. eg:baz owl:sameAs rdf:XMLLiteral. 
eg:foo eg:bar "chat"@fr^^eg:baz. 
but that one is using owl:sameAs) 2/ eg:a eg:prop "3"^^xsd:int. 
eg:a eg:prop " 3 "^^xsd:int. 
OK on (ECMA 334 compliant) MS .NET and DotGNU PNET but Xerces2 fails here for the java implementation (and I would follow the standardized results so believe the entailment holds) 3/ eg:a eg:prop " 3 "^^xsd:int. 
eg:a eg:prop "3"^^xsd:int. 
OK on (ECMA 334 compliant) MS .NET and DotGNU PNET but Xerces2 fails here for the java implementation (and I would follow the standardized results so believe the entailment holds) 4/ eg:aaa eg:ppp "333"^^xsd:int. 
eg:aaa eg:ppp _:x. 
_:x rdf:type rdfs:Literal. 
and here we found (*). 
Let's see if that is making sense, and then Jan/Dave as testdoc editors could finish ;-) Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
http://www.agfa.com/w3c/euler/xsd-rules.n3 . 
http://www.agfa.com/w3c/euler/rdfs-rules.n3 . 
). http://www.w3.org/2000/10/swap/log#conjunction = @prefix str: http://www.w3.org/2000/10/swap/string# . 
@prefix ns: http://www.agfa.com/w3c/euler/xsd-rules# . 
@prefix xsd: http://www.w3.org/2001/XMLSchema# . 
@prefix : file:/temp/test# . 
@prefix eg: http://example.org/# . 
@prefix log: http://www.w3.org/2000/10/swap/log# . 
@prefix rdfs: http://www.w3.org/2000/01/rdf-schema# . 
@prefix test: http://www.w3.org/2000/10/rdf-tests/rdfcore/testSchema# . 
@prefix math: http://www.w3.org/2000/10/swap/math# . 
@prefix nsns: http://www.agfa.com/w3c/euler/rdfs-rules# . 
@prefix owl: http://www.w3.org/2002/07/owl# . 
@prefix neg: http://www.agfa.com/w3c/euler/owl-rules# . 
@prefix iw: http://www.ksl.stanford.edu/software/IW/spec/iw# . 
@prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# . 
{[ iw:Variable "_:x_6"] = "333"^^xsd:int. 
eg:aaa eg:ppp [ iw:Variable " _:x_6"]} = {eg:aaa eg:ppp "333"^^xsd:int}. 
nsns: rdfs:fyi nsns:rdfs9. 
nsns: rdfs:fyi nsns:rdfs8. 
nsns: rdfs:fyi nsns:rdfs11. 
{[ iw:Variable "?X"] = xsd:decimal. 
[ iw:Variable "?X"] a rdfs:Datatype} = {xsd:decimal a rdfs:Datatype}. 
[ iw:Variable "?B"] = xsd:decimal. 
[ iw:Variable "?C"] = rdfs:Literal. 
[ iw:Variable "?B"] rdfs:subClassOf [ iw:Variable "?C"]} = {xsd:decimal rdfs:subClassOf rdfs:Literal}. 
{[ iw:Variable "?A"] = xsd:integer. 
[ iw:Variable "?B"] = xsd:decimal. 
[ iw:Variable "?A"] rdfs:subClassOf [ iw:Variable "?B"]} = {xsd:integer rdfs:subClassOf xsd:decimal}. 
[ iw:Variable "?A"] = xsd:integer. 
[ iw:Variable "?B"] = rdfs:Literal. 
[ iw:Variable "?A"] rdfs:subClassOf [ iw:Variable "?B"]} = {xsd:integer rdfs:subClassOf rdfs:Literal}. 
nsns: rdfs:fyi nsns:rdfs9. 
{[ iw:Variable "?A"] = xsd:long. 
[ iw:Variable "?B"] = xsd:integer. 
[ iw:Variable "?A"] rdfs:subClassOf [ iw:Variable "?B"]} = {xsd:long rdfs:subClassOf xsd:integer}. 
nsns: rdfs:fyi nsns:rdfs9. 
{[ iw:Variable "?A"] = xsd:int. 
[ iw:Variable "?B"] = xsd:long. 
[ iw:Variable "?A"] rdfs:subClassOf [ iw:Variable "?B"]} = {xsd:int rdfs:subClassOf xsd:long}. 
{[ iw:Variable "?S"] = "333"^^xsd:int. 
[ iw:Variable "?A"] = xsd:int. 
[ iw:Variable "?S"] a [ iw:Variable "?A"]} = {"333"^^xsd:int a xsd:int}. 
[ iw:Variable "?S"] = "333"^^xsd:int. 
[ iw:Variable "?A"] = xsd:long. 
[ iw:Variable "?S"] a [ iw:Variable "?A"]} = {"333"^^xsd:int a xsd:long}. 
[ iw:Variable "?S"] = "333"^^xsd:int. 
[ iw:Variable "?A"] = xsd:integer. 
[ iw:Variable "?S"] a [ iw:Variable "?A"]} = {"333"^^xsd:int a xsd:integer}. 
[ iw:Variable "_:x_6"] = "333"^^xsd:int. 
[ iw:Variable "_:x_6"] rdf:type rdfs:Literal} = {"333"^^xsd:int rdf:type rdfs:Literal}. 
# Proof found for file:/temp/testC.n3 in 4511 steps (20503 steps/sec) using 1 engine 
sorry for the previous message, but it was suddenly sent while typing 2/ and 3/ are (after a small correction) also working for java I could live with non entailment if it means "not necessarily entailing" tex-01 is also checked and OK (also after a small correction) Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
PS I think I never mentioned the positive results we got with "unquoted numerals" denoting numbers eg eg:jenny eg:age 12. and also 12 a rdfs:Literal. 
Jos De_Roo 2003-05-09 cc: 10:25 PM Subject: TEST: the 4 test cases we discussed during 2003-05-09 telecon I tested the 4 test cases we discussed during todays telecon and I did those on 3 platforms (but am using n3 triples as we do in owl full). 
1/ /2000/10/rdf-tests/rdfcore/datatypes/Manifest.rdf#language-and-xml-literal eg:foo eg:bar "chat"@en^^rdf:XMLLiteral. eg:foo eg:bar "chat"@fr^^rdf:XMLLiteral. so that one should become a test:PositiveEntailmentTest. 
(while at it, we also did find that eg:foo eg:bar "chat"@en^^rdf:XMLLiteral. eg:baz owl:sameAs rdf:XMLLiteral. 
eg:foo eg:bar "chat"@fr^^eg:baz. 
but that one is using owl:sameAs) 2/ eg:a eg:prop "3"^^xsd:int. 
eg:a eg:prop " 3 "^^xsd:int. 
OK on (ECMA 334 compliant) MS .NET and DotGNU PNET but Xerces2 fails here for the java implementation (and I would follow the standardized results so believe the entailment holds) 3/ eg:a eg:prop " 3 "^^xsd:int. 
eg:a eg:prop "3"^^xsd:int. 
OK on (ECMA 334 compliant) MS .NET and DotGNU PNET but Xerces2 fails here for the java implementation (and I would follow the standardized results so believe the entailment holds) 4/ eg:aaa eg:ppp "333"^^xsd:int. 
eg:aaa eg:ppp _:x. 
_:x rdf:type rdfs:Literal. 
and here we found (*). 
Let's see if that is making sense, and then Jan/Dave as testdoc editors could finish ;-) Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
http://www.agfa.com/w3c/euler/xsd-rules.n3 . 
http://www.agfa.com/w3c/euler/rdfs-rules.n3 . 
). http://www.w3.org/2000/10/swap/log#conjunction = @prefix str: http://www.w3.org/2000/10/swap/string# . 
@prefix ns: http://www.agfa.com/w3c/euler/xsd-rules# . 
@prefix xsd: http://www.w3.org/2001/XMLSchema# . 
@prefix : file:/temp/test# . 
@prefix eg: http://example.org/# . 
@prefix log: http://www.w3.org/2000/10/swap/log# . 
@prefix rdfs: http://www.w3.org/2000/01/rdf-schema# . 
@prefix test: http://www.w3.org/2000/10/rdf-tests/rdfcore/testSchema# . 
@prefix math: http://www.w3.org/2000/10/swap/math# . 
@prefix nsns: http://www.agfa.com/w3c/euler/rdfs-rules# . 
@prefix owl: http://www.w3.org/2002/07/owl# . 
@prefix neg: http://www.agfa.com/w3c/euler/owl-rules# . 
@prefix iw: http://www.ksl.stanford.edu/software/IW/spec/iw# . 
@prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# . 
{[ iw:Variable "_:x_6"] = "333"^^xsd:int. 
eg:aaa eg:ppp [ iw:Variable " _:x_6"]} = {eg:aaa eg:ppp "333"^^xsd:int}. 
nsns: rdfs:fyi nsns:rdfs9. 
nsns: rdfs:fyi nsns:rdfs8. 
nsns: rdfs:fyi nsns:rdfs11. 
{[ iw:Variable "?X"] = xsd:decimal. 
[ iw:Variable "?X"] a rdfs:Datatype} = {xsd:decimal a rdfs:Datatype}. 
[ iw:Variable "?B"] = xsd:decimal. 
[ iw:Variable "?C"] = rdfs:Literal. 
[ iw:Variable "?B"] rdfs:subClassOf [ iw:Variable "?C"]} = {xsd:decimal rdfs:subClassOf rdfs:Literal}. 
{[ iw:Variable "?A"] = xsd:integer. 
[ iw:Variable "?B"] = xsd:decimal. 
[ iw:Variable "?A"] rdfs:subClassOf [ iw:Variable "?B"]} = {xsd:integer rdfs:subClassOf xsd:decimal}. 
[ iw:Variable "?A"] = xsd:integer. 
[ iw:Variable "?B"] = rdfs:Literal. 
[ iw:Variable "?A"] rdfs:subClassOf [ iw:Variable "?B"]} = {xsd:integer rdfs:subClassOf rdfs:Literal}. 
nsns: rdfs:fyi nsns:rdfs9. 
{[ iw:Variable "?A"] = xsd:long. 
[ iw:Variable "?B"] = xsd:integer. 
[ iw:Variable "?A"] rdfs:subClassOf [ iw:Variable "?B"]} = {xsd:long rdfs:subClassOf xsd:integer}. 
nsns: rdfs:fyi nsns:rdfs9. 
{[ iw:Variable "?A"] = xsd:int. 
[ iw:Variable "?B"] = xsd:long. 
[ iw:Variable "?A"] rdfs:subClassOf [ iw:Variable "?B"]} = {xsd:int rdfs:subClassOf xsd:long}. 
{[ iw:Variable "?S"] = "333"^^xsd:int. 
[ iw:Variable "?A"] = xsd:int. 
[ iw:Variable "?S"] a [ iw:Variable "?A"]} = {"333"^^xsd:int a xsd:int}. 
[ iw:Variable "?S"] = "333"^^xsd:int. 
[ iw:Variable "?A"] = xsd:long. 
[ iw:Variable "?S"] a [ iw:Variable "?A"]} = {"333"^^xsd:int a xsd:long}. 
[ iw:Variable "?S"] = "333"^^xsd:int. 
[ iw:Variable "?A"] = xsd:integer. 
[ iw:Variable "?S"] a [ iw:Variable "?A"]} = {"333"^^xsd:int a xsd:integer}. 
[ iw:Variable "_:x_6"] = "333"^^xsd:int. 
[ iw:Variable "_:x_6"] rdf:type rdfs:Literal} = {"333"^^xsd:int rdf:type rdfs:Literal}. 
# Proof found for file:/temp/testC.n3 in 4511 steps (20503 steps/sec) using 1 engine 
