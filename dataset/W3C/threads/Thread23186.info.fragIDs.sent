Node::normalize can reduce the number of Text nodes present in a document. 
What is supposed to happen with these text nodes? 
Would a DOM implementation be comformant if it removed all adjacent Text nodes as with removeChild, and inserted a new Text node with the combined content in their place? 
By the way, what should happen with registered event listeners or DOM 
level 3 user data on the original individual text nodes? 
Bye, Tobias 
I believe this is explained clearly enough in the W3C recommendation: In short the character data of adjacent Text nodes is merged into a single node. 
I believe so. 
As long as the operation does what is described in the recommendation. 
In DOMC I did DOM_CharacterData_insertData followed by DOM_Node_removeChild recursively on adjacent Text nodes. 
The effect is the same. 
I don't know about DOM level 3 user data but event listeners must not be triggered after a node is removed. 
I suppose if the character data of one node is inserted into the other (as I describe DOMC does) a listener registered on the remaining node would survive and therefore continue to have the potential to be triggered. 
But I'm not sure what sort of events would be triggered by a Text node considering they do not have children and are rather benign. 
Also, normalize would typically be called before or after processing of the DOM and not on the middle of Events being fired. 
But you never know. 
Mike 
I believe event listeners should see mutation events reporting nodes removed, modified, and/or added, just as if the equivalent of the normalize () had been performed manually via individual DOM calls. 
If you want to keep the listeners associated with the text, it's your responsibility to use these events to move the listeners to the one resulting text node. 
Note that there's no promise about exactly which sequence of operations is performed, so there's no guarantee about what mutation events will be produced. 
(The DOM really can't move the listeners for you, because it doesn't know whether that's really what you want to do or not or what non-DOM information associated with your listeners might need to be updated.) Note that one way to dodge this issue, in some cases, may be to register your listeners on the element instead. 
or DOM level 3 user data on the original individual text nodes? 
Last time I looked, a similar answer applied. 
Joe Kesselman / IBM Research 
