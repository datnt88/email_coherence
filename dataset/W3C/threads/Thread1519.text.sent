HI, its getting complicated! 
First of all many thanks to everyone anwsering my questions so far! 
It helped me a lot. 
So next question: Scenario: Suppose a development environment where the development codeline is kept in a workspace. 
Within this Workspace there is a VCR /DEV/a.c the checked-in property points to version V1. 
Now there is a checkout of the checked-in version of /DEV/a.c 
into a working-resource WR1. 
In my understanding of DeltaV the checked-in property of the VCR is not changed by this action. 
Now another checkout of the checked-in version into a working-resource WR2 is done (i.e. two developer working parallel on the same source). 
Rigth so far? 
If not, is there a way in DeltaV to get done the behavior described below? 
Now WR1 is checked in. 
WR1 disappears the version history (VH) of /DEV/a.c 
contains a new version V2 that is a descendant of V1. 
In my understanding the checked-in property of the VCR is set to V2 during this checkin. 
Still right? 
Now WR2 is checked in. 
Checkin fork is forbidden. 
Because there is a descendent to V1 allready and the checkin fork is forbidden. 
So a merge must be forced (how?). 
After that done the checked-in property of the VCR points to the merged version of V2 and the checked in version of WR2. 
Right? 
Background: I have a development codeline. 
A file to edit is a VCR. 
I want the possibility of two (or more) developers working parallel with this file. 
But I want them to do a merge of their work at the second checkin (the checkin of the first developer causes no problems). 
And I want the VCR point to the most current checked-in version of its VH automatically. 
Is this achieveable? 
I think it must be, since this is what can be done using Perforce. 
Regards, Daniel Ok, so there are two distinct resources, a version-controlled resource at /DAV/a.c and a version resource at some server-generated URL, let's say, /versions/vh1/r23 The checked-in property of the version-controlled resource has a value that is the URL of the version. 
This means, "the version-controlled resource is checked-in (i.e. `immutable`) and it has identical (i.e. a true copy of) content and dead properties as the version whose URL is in the DAV:checked-in property" Note that the version-controlled resource may have different live properties to the version resource. 
Just to be pedantic, a version is not checked-in (or checked-out for that matter), but applying CHECKOUT to a version creates a new working resource with the same content and dead properties as the version. 
Correct, the version-controlled resource is unaffected by the creation of the working resource. 
It remains a checked-in version-controlled resource. 
Sure (assuming liberal fork control) you can create more working resources by applying CHECKOUT to the version resource. 
Correct. 
In my understanding the checked-in property of the VCR is set to V2 during this checkin. 
Still right? 
Nope (we were doing so well up to this point :-) The version-controlled resource is not updated since there is no tie between the working resource created by checking out the version, and the version-controlled resource. 
So in this scenario, the version-controlled resource would still have the same content and dead properties as the version V1. If you did want to update the version-controlled resource there are two ways to do this. 
(1) Rather than check-out the version to create a working resource you could have just checked-out the version-controlled resource 'in-place'. 
You would then modify the version-controlled resource (PUT, PROPPATCH, etc.) and check-in the version-controlled resource to create a new version. 
However, modifying the resource in-place obviously means that other clients would see your work in progress. 
In the trivial case this is state that you didn't want to version because it was incomplete; but more seriously it could be a state that is inconsistent because there is no way to modify the properties and content simultaneously (imagine a "FOOBAR:last-modified-by" property). 
So the alternative way is... (2) send CHECKOUT to the version-controlled resource _with_ a DAV:apply-to-version flag. 
Now you have a (hidden) working resource that is coupled to the version-controlled resource, as evidenced by it's DAV:auto-update property. 
Since the working resource is effectively hidden from other clients, you can modify the content and properties, numerous times, and finally CHECKIN the working resource. 
This check-in will create the new version, delete the working resource, *and* update the version-controlled resource identified by the DAV:auto-update property. 
So now, hopefully, you see that you can't get into this mess g . 
So you would have the DAV:checkin-fork property set to DAV:forbidden for each version to force the second checking to fail, and force a merge. 
Again, by checking out the version 'through' the version-controlled resource, i.e. by using DAV:apply-to-version/ you can get the DAV:auto-update behaviour described above. 
Regards, Tim From: Kirmse, Daniel [mailto:daniel.kirmse@sap.com] 
Suppose a development environment where the development codeline is kept in a workspace. 
Within this Workspace there is a VCR /DEV/a.c the checked-in property points to version V1. 
Now there is a checkout of the checked-in version of /DEV/a.c 
into a working-resource WR1. 
I will assume this CHECKOUT was done by applying a CHECKOUT to /DEV/a.c, with the DAV:apply-to-version flag. 
(As Tim points out, this has slightly different behavior from explicitly applying the CHECKOUT to a version resource). 
In my understanding of DeltaV the checked-in property of the VCR is not changed by this action. 
Correct. 
Now another checkout of the checked-in version into a working-resource WR2 is done (i.e. two developer working parallel on the same source). 
Rigth so far? 
Yes. 
Again, I will assume that this was a CHECKOUT of /DEV/a.c with the DAV:apply-to-version flag. 
Now WR1 is checked in. 
WR1 disappears the version history (VH) of /DEV/a.c 
contains a new version V2 that is a descendant of V1. 
In my understanding the checked-in property of the VCR is set to V2 during this checkin. 
Still right? 
Yes, if WR1 resulted from checking out /DEV/a.c with the DAV:apply-to-version flag. 
Now WR2 is checked in. 
Checkin fork is forbidden. 
Because there is a descendent to V1 allready and the checkin fork is forbidden. 
Actually, there is no need to have Checkin-fork to be forbidden (although it doesn't hurt to have it set to be that). 
The DAV:no-overwrite-by-auto-update postcondition of CHECKIN will force the CHECKIN to fail. 
So a merge must be forced (how?). 
I'm not sure if you are asking "how is it forced" or "how do you do the merge"? 
It is forced, because every time you try to CHECKIN, it will fail with the postcondition identified above. 
The client does the merge by downloading the current content of /DEV/a.c, 
merging that into the content of WR2, and then adding the DAV:checked-in version to the DAV:predecessor set of WR2. 
Then the CHECKIN will succeed, because the DAV:overwrite-by-auto-update condition is no longer true. 
After that done the checked-in property of the VCR points to the merged version of V2 and the checked in version of WR2. 
Right? 
Actually, the checked-in property of the VCR points to the version that resulted from checking in WR2, where the content of WR2 is the merge of the previous state of WR2 with the state of the checked-in version of /DEV/a.c. 
Background: I have a development codeline. 
A file to edit is a VCR. 
I want the possibility of two (or more) developers working parallel with this file. 
But I want them to do a merge of their work at the second checkin (the checkin of the first developer causes no problems). 
And I want the VCR point to the most current checked-in version of its VH automatically. 
Is this achieveable? 
I think it must be, since this is what can be done using Perforce. 
Yes, it is. 
Just have the developers client apply CHECKOUT with DAV:apply-to-version to a version-controlled resource. 
Cheers, Geoff Hi, i've got this (at least I think so ;o) ). 
Now we advance a step further: Suppose this situation: VCR1 | | VH1 | | VCR2 | CIN V2-+------+ | V1 | +--------+-CIN V2 | +--------+- V2 -+------+ The checked-in (CIN) versions of VCR1 and VCR2 are located in the very same VH and they are even the same version. 
Now same problem to checkouts on the same version via the VCR's. 
To be precise there is a checkout on VCR1 with DAV:apply-to-version flag which creates WR1 with DAV:auto-update = VCR1. 
And there is a checkout on VCR2 with DAV:apply-to-version flag which creates WR2 with DAV:auto-update = VCR2. 
Performing a checkin on both WR's would cause no failed checkin but produces this situation: +--------+ V3 V4 +------+ Am I right with this? 
Please let me be! 
Otherwise I should give up trying to understand this (at least for this week) ! 
;o) P.S.: Obviously there MUST NOT be any DAV:checkin-fork forbidden property at V2. Regards, Daniel Right on! 
Your description is correct. 
Regards, Tim "Kirmse, Daniel" daniel.kirmse@sap.com 
Sent by: ietf-dav-versioning-request@w3.org 2001-12-14 11:39 AM Subject: RE: Parallel Development Hi, i've got this (at least I think so ;o) ). 
Now we advance a step further: Suppose this situation: VCR1 | | VH1 | | VCR2 | CIN V2-+------+ | V1 | +--------+-CIN V2 | +--------+- V2 -+------+ The checked-in (CIN) versions of VCR1 and VCR2 are located in the very same VH and they are even the same version. 
Now same problem to checkouts on the same version via the VCR's. 
To be precise there is a checkout on VCR1 with DAV:apply-to-version flag which creates WR1 with DAV:auto-update = VCR1. 
And there is a checkout on VCR2 with DAV:apply-to-version flag which creates WR2 with DAV:auto-update = VCR2. 
Performing a checkin on both WR's would cause no failed checkin but produces this situation: +--------+ V3 V4 +------+ Am I right with this? 
Please let me be! 
Otherwise I should give up trying to understand this (at least for this week) ! 
;o) P.S.: Obviously there MUST NOT be any DAV:checkin-fork forbidden property at V2. Regards, Daniel 
