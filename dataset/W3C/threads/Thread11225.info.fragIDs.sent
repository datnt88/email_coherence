The ERB, in its meeting yesterday, discussed the issue of parameter entities in XML. 
We are *strongly* leaning towards voting to remove parameter entities entirely *from V1.0* as long as GI name groups are reinstated in ELEMENT and ATTLIST declarations: We plan to vote on this at next Wednesday's meeting; your input is welcome. 
The reasons to prefer GI name groups: o Many of the uses of parameter entities that new DTD writers and simple DTDs are likely to want can be replaced by GI name groups: synchronizing the content models or attribute lists of elements o GI name groups add extremely little complexity to XML processors o Now that we have multiple ATTLISTs, GI name groups have quite a bit more power than they used to (e.g., you can add a set of attributes to "all the list elements," and then add a unique attribute to only one of the elements) o GI name groups give us the syntax (if not the semantics) to do a kind of element subclassing, where all the elements in a "class" have the same characteristics One consequence: o Existing DTDs and any new complex DTDs that need parameter entities would have to be transformed to resolve parameter entities before XML delivery (note that several existing tools, such as NormDTD, do this) Eve 
It seems to me that is really a political question, or perhaps a theological one. 
Except for this sentence, I agree with the rest of Tommie's posting. 
I want to lose PE's and am willing to accept that for people who need to live in a complex-DTD world, they'll probably have to use Full SGML. 
But Eve is correct, I think, in saying that namegroups in declarations do replace one or two common PE usages. 
My willingness to make the the trade-off is because despite really a lot of work by myself and (even more) Michael, the PE section of the XML-lang spec is blatantly hideous compared to the rest of it. 
It is hard to explain, hard to understand, and hard to implement. 
It needs a supporting section in an appendix to try to "explain" it (always a bad sign). 
It is a psychological barrier to the acceptance of descriptive markup. 
Partly because this because the current PE reference replacement rules are arguably B.A.D. (broken as designed) - Michael and I came up, I think, with a significant innovation in specification tactics in the use of the %-operator, and the result is still very very complicated. 
- Tim 
It seems odd to me that we are going to add complexity to help people who need to publish databases but remove complexity required by people who need to publish large, complex documents adhering to large, complex DTDs. 
Aren' t large, complex documents with large, complex DTDs the reason we are *here*? 
I am concerned about this shift in focus from publishing large documents to solving the world's problems. 
Paul Prescod 
For authoring large complex documents, we already have an excellent solution: SGML. 
For delivering them on the Web, XML does just fine; it will be trivial to generate documents in an SGML system just dripping with inclusions and PEs and &amp;-groups and whatnot, and pump out the instances, which will be well formed. 
The fact that this document delivery format is being embraced by some unforeseen application groups is a pleasant surprise and not one of the things we set out to achieve. 
And Berners-Lee was just trying to support collaborative Physics research. 
And yes, it seems to quite a lot of us that we should indeed go to some trouble if as a result we get to capture the world's metadata in a relatively sane format. 
Metadata *definitely* looks like a nail to me. 
-T. 
Where in that equation do XML DTDs fit in? 
Why have them at all? 
BTW, you *do* lose instance functionality when you lose DTDs. 
In particular you lose defaulted attributes and fixed attributes -- two features I depend upon. 
It is astonishing to me that we cannot require people who have written HTML parsers that handle a reasonable percentage of the crap out there to parse a simple internal subset restricted to attribute defaulting definitions, and require people who have written tools that they call "validators" to do CPP-style macro expansion. 
Parsing ATTLISTs is not brain surgery for someone smart enough to write an XML parser and resolving PEs is not hard for someone who can figure out how to validate a partial grove against a content model. 
If XML were a relatively sane format, we wouldn't need so many "fixes" to it, some of which involve stripping out useful features and some of which involve adding a bunch that relate only peripherally to documents. 
"One metalanguage for everything" is one step up the meta-ladder from "one DTD for everything." 
Paul Prescod 
