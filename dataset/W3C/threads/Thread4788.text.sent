Peeps, The latest version of our doc is 1.56. 
Some of the changes I made since the telcon: * added intra-doc links between UCs and Reqs/DesObjs; this needs to be fleshed out but EricP gave me a good start. 
* some wordsmithing changes in a few spots * I changed 4.6 (from RDFS Query to RDFS/OWL Query) a bit to more accurately express what my users (and my AC) really want. 
As with most of the Design Objectives, this one is meant to describe an *optional* feature, so adding OWL to RDFS imposes no extra burdens on anyone necessarily. 
* I added a status line to each Req and DO. -- Someone please check to make sure I've got the right ones marked approved? 
I did it from memory. 
Some interesting technical discussion today, but I didn't see anything that would shift consensus. 
Best, Kendall Could you (or your AC rep :-) say how this differs from the charter requriment "1.8 Derived Graphs"? 
The working group must recognize that RDF graphs are often constructed by aggregation from multiple sources and through logical inference, and that sometimes the graphs are never materialized. 
Such graphs may be arbitrarily large or infinite. 
I *think* the req is saying that it can be possible to query the non-iferred relationships explicitly. 
Does this have to happen in one query expression? 
That is, some parts of the query are affected by inference where other parts are explicitly not. 
C.f. serql:directSubClassOf and Users who use this include people writing editors and browsers. 
Andy (I was expecting you to say "the inferred relationships explicitly"...?) No, it doesn't have to happen in one query expression, but I think that's ideal; er, as long as by 'query expression' you mean 'one query'. 
Err, hmm, what do you mean? 
What we'd like is to make it as easy as possible (where easy may mean something like 'concise' and 'obvious') to do queries for subclassof, subpropertyof relations and to get at the class tree, because we have lots of... Exactly! 
That's what our lab does more of than anything else. 
I'm not sure we really care too much about how the *req* is worded; or, better put: we care far more about the ultimate design than how than req is worded. 
But a language that didn't help our users with this kind of query would be *very* much less than ideal for them. 
Best, Kendall 
