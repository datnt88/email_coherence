Because when it's time to do a real query API, this may well confuse matters. 
It's better to not do an API, rather than do an API completely wrong. 
(I'm actually not taking a position on this yet... just asking the question.) 
Well, it is true that the Query WG has released only it's requirements document, and it's not completely clear what the API for Query should look like. 
On the other hands, we do know, from the requirements, that a query will be able to return at least one of the following: DOM Nodes or Iterators or TreeWalkers. 
Here's a quote from the requirements: DOM The XML Query Language must be able to return results in a form that can be used in DOM programs, such as DOM Nodes or the Iterators and TreeWalkers defined in the Traversal specification (W3C members only). 
I would suggest that we coordinate the effort here with the Query WG. 
I'm on that WG, and I'd be glad to serve as a go-between. 
How about something like the following? 
[SNIP!] 
There's a lot of good stuff here. 
I agree that the method should not be defined on Node. 
A few issues: 1. Input. 
I think that the context of a query should be able to be a Node or a NodeList, and should be able to use nodes from multiple documents. 
2. Return type. 
We can't assume that every query returns a NodeList, but I think that it's reasonable to assume that the person who issues a query knows what it returns, and can call the function with the proper return type. 
If not, raise an exception. 
3. Query Objects. 
You are right, the ability to create a query object allows a query to be built and optimized, then reused many times. 
Many queries, of course, are one-offs, so it's not clear to me that a Query Object is *always* needed. 
I think that having methods that take query strings as arguments is a Good Thing, and is probably the more common case, but Query Objects are also good. 
I'd probably like to see both. 
My big point is, I don't think that all new API in the W3C should become part of the DOM. 
There is also the matter of the XML Transformation API (please see http://trax.openxml.org/), 
which maybe should become a W3C API, but should not a DOM API. 
Also, remember that XPath can call extensions, so now you need an Extensions API. 
Then there's the little matter of Schemas. 
Etc. 
The DOM Pandora's Box should be closed, and the W3C should be thinking in terms of modules. 
I would also like to see some of these APIs include SAX stuff. 
There's an important coordination issue here - perhaps the API should belong to the Query WG eventually, perhaps to the DOM WG....I'm not sure where this fits best. 
I'd like to see it somewhere in the W3C. 
Jonathan Aha! 
I think we all agree on this ... and the main reason the DOM WG had little interest in the XPath extensions is because most think it really should be someone else's baby. 
BUT the Query WG is at least a year or so away from a Recommendation, and no WG is currently working on XPath (that I know of), so the choices now are a) nothing happens for a year and we all hope that the Query WG does what we want; b) the DOM defines an XPath extension; or c) some ad-hoc group proposes an interim "standard" (a la SAX, perhaps) and encourages vendors to support it. 
I think this mailing list is considering b) vs c) ... and a) is the default, I guess. 
I think I agree with your analysis. 
And unfortunately, the default will result in dozens of proprietary interfaces that all do the same thing. 
Jonathan Jonathan Robie Here's a quote from the requirements: DOM [SNIP!] 
There's a lot of good stuff here. 
I agree that the method should not be defined on Node. 
A few issues: 1. Input. 
I think that the context of a query should be able to be a Node or a NodeList, and should be able to use nodes from multiple documents. 
Damn document() is xslt! 
But If needed, I can parse and build dom's for n documents surely? 
No problem there. 
Working with xslt+xpath I have a full context, is it reasonable to expect the same, e.g. namespace etc? 
I think that is needed. 
2. Return type. 
We can't assume that every query returns a NodeList, but I think that it's reasonable to assume that the person who issues a query knows what it returns, and can call the function with the proper return type. 
If not, raise an exception. 
Definate improvement on enumerator. 
What would an emulation of xpath 4(or 5) object types look like in Java? 3. Query Objects. 
You are right, the ability to create a query object allows a query to be built and optimized, then reused many times. 
Many queries, of course, are one-offs, so it's not clear to me that a Query Object is *always* needed. 
I think that having methods that take query strings as arguments is a Good Thing, and is probably the more common case, but Query Objects are also good. 
I'd probably like to see both. 
Whats the use case for this efficiency? 
I noted Scotts reply its good if I need to run the query 2000 times. 
My question is under what circs would anyone need to do that? 
DaveP 
