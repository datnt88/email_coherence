Hello, I know it's not Monday, but I've been reading as much as I can in between work and life, and my mind keeps going back to this bit in the SMIL 2.0 specification: "Allow reusing of SMIL syntax and semantics in other XML-based languages, in particular those who need to represent timing and synchronization." 
I've been wondering if it would be possible to come up with a better or simpler (but not /too/ simple) timing model than the folks who worked on SMIL 1.0 and 2.0, and who've probably put decades of collective man-years into thinking about this particular problem. 
I've nearly decided that it would be difficult (and possibly not the best use of our time) to effectively reinvent the timing wheel. 
What would using SMIL's well-defined timing model for TT look like? 
Maybe something like: "One" displays immediately, at the start of the sequence, and ends 5 seconds later. 
(Specifying a begin time of 0 seconds is optional, since the default begin offset is always 0 seconds.) "Two" displays 0 seconds (the default) after "First" -- i.e. 5 seconds into the sequence. 
It ends 10 seconds later, at 15 seconds into the sequence. 
"Third" has a begin offset of 1 second, so it begins 1 second after "Two", and has a duration of 5 seconds, so it ends at 21 seconds into the sequence. 
Visually, it is displayed in the "important" style. 
(If people have scenarios that they'd like me to whip up solutions for using this timing model, please let me know!) -- Charles Wiltgen (Sorry, I didn't proofread well enough. 
Here's the real example.) "One" displays immediately, at the start of the sequence, and ends 5 seconds later. 
(Specifying a begin time of 0 seconds is optional, since the default begin offset is always 0 seconds.) "Two" displays 0 seconds (the default) after "One" -- i.e. 5 seconds into the sequence. 
It ends 10 seconds later, at 15 seconds into the sequence. 
Three" has a begin offset of 1 second, so it begins 1 second after "Two", and has a duration of 5 seconds, so it ends at 21 seconds into the sequence. 
Visually, it is displayed using the "important" style. 
OK, I'll bite: TCIn 01:03:28:18TCOut 01:03:30:00 "Jack, je tenais ? 
vous pr?venir." 
TCIn 01:03:32:05 TCOut 01:03:35:10 "Elle va mal. 
Son ?tat 
s&amp;apos;est beaucoup aggrav?. TCIn 01:03:35:24 TCOut 01:03:38:04"Je lui ai donn? 
des calmants." 
Now an advert break occurs at 01:03:30:00 and lasts for five minutes. 
This must be catered for. 
I.e. the TT must be able to refer to absolute external timestamps (not 1 sec per sec 'real times'). 
Simlarly off times need to be expressed wrt the program material, so even if specified as durations they would be re-calculated by adding the duration to the TCIn value. 
regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
Between subtitles two and three, above, there's a pause of 14 frames. 
For such a short pause, I don't see a need to require an out time to erase the display . 
Instead, simply let the third subtitle replace the second. 
That's how many captioning agencies do it today, and it's a good model. 
Captions that are sequenced with tiny pauses between them cause the viewer to blink, and that's annoying. 
If you need to pause between captions-- e.g., if there's nobody speaking-- *then* erase the display with an out time. 
Otherwise it would be best to simply let the captions appear smoothly one after the other with no pause. 
Geoff Freed WGBH/NCAM Snipped SMIL example such a short pause, I don't see a need to require an out time to erase the display. 
Instead, simply let the third subtitle replace the second. 
Captions that are that's annoying. 
simply let the captions appear smoothly one after the other with no pause. 
I'm not going to argue the case either way for timing between subtitles / captions. 
It's entirely a matter for the author and intended audience to resolve. 
I've seen it done all ways :-). 
In the European market subtitles tend to be spaced. 
For add-on and snake subtitling, sub second intervals for subtitling would be required. 
Regardless, for TT to be universally useful, restrictions on duration or timing accuracy should be avoided. 
regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
Right-- sorry, I didn't intend to argue that point. 
I was using style as an illustration only. 
Agreed! 
Geoff Freed WGBH/NCAM need to require an out time to erase the display. 
Instead, simply let the smoothly one after the other with no pause. 
John, Great, this is an even simpler example. 
A couple of the more serious issues: -- You're using SMPTE time code, which uses an hours:minutes:seconds:frames format. 
Since "frame" isn't an agreed-upon unit of measurement (are we talking NTSC? 
PAL/SECAM? 
Film? 
Drop frame or non-drop frame?), that doesn't work. 
-- You've invented a new file format, which means that you have to invent everything around that. 
You have to evangelize tool vendors to adopt Yet Another File Format which, unlike XML, there's no OS-level support for. 
You have to invent methods for verifying legal files. 
It doesn't play well with other standards. 
Etc. 
Here's your example recast as Proposal 0.0. 
Since you used French, I'm assuming SECAM and that your frame units were intended to be 1/25th of a second. 
I've made everything relative except for the start so that it will still work appended to something else (such as an ad). 
I don't promise that all of the frame-to-time math is perfect. 
Jack, je tenais ? 
vous pr?venir Elle va mal. 
Son ?tats&amp;apos;est 
beaucoup aggrav?. Je lui ai donn? 
des calmants. 
-- Charles Wiltgen John Birch wrote... Sorry it appears that you have taken my example as a proposed format - I should have been clearer.... you asked for a scenario... Oops, sorry about that. 
Hey - where did I ever say appended - the ad is inserted! 
not appended - this is the point! 
That works too. 
I just used relative times so that only the beginning time of the sequence would have to be changed if one needed to move the sequence forward or backward in time. 
Absolute times would work fine, and I imagine that different authors (and different authoring tools) will have their own preferences. 
-- Charles Wiltgen Johnb@screen.subtitling.com 
wrote... 
The point I am trying to make wrt to SMIL timing models is: How do you synchronise the 'presentation' of the text with an external often discontinuous timebase. 
It's pretty trivial. 
Let's say you want to show the word "foo" for 5 seconds, 10 seconds from the start of a commercial. 
Still assuming Proposal 0.0, it would look something like: If the commercial is played at 01:03:28.720 
(we don't need to know this time a priori), then the text appears at 01:03:38.720 and ends at 01:03:43.720. 
SMIL has wallclock timebase - but that's no use. 
Time is the /only/ thing that's of use, believe me. 
You may believe that God's Atomic Unit of Time is 1/29.97th of a second, but George Lucas' is 1/24th of a second, and someone encoding PAL source for the web might consider it to be 1/12.5th of a second. 
In subtitling - the ~timed text~ is kept separate from the media it relates to. 
Right, and Proposal 0.0 does that to your satisfaction? -- Charles Wiltgen I wrote... 
The point I am trying to make wrt to SMIL timing models is: How do you synchronise the 'presentation' of the text with an external often discontinuous timebase. 
time OK, I can see that you're not getting what I'm trying to explain :-( For the purposes of the following we'll assume that a 'tape' is used for video storage. 
Forgive me if this appears to be a dumbed down explanation. 
Currently subtitling works as follows. 
Broadcaster decides to show a program X - he prepares a master 'tape' TapeX. 
TapeX is sent to an external subtitling agency who prepare a subtitle 'file' FileX. 
FileX is indexed against the timecode that is stored as VBI data on TapeX. 
So unlike SMIL - the media are separate - subtitles in one - video and audio on another. 
Broadcaster plays TapeX on a tape machine on a number of different occasions (i.e at different wall clock times). 
On each occassion the tape is played - the timecode off the tape will be identical in sequence. 
The subtitle inserter (having had the correct FileX selected by an automation system) continuously reads the timecode from the input video signal generated by the tape machine playing tapeX. 
When an input timecode matches a timecode in fileX it starts inserting the matching subtitle, by modifying the video signal. 
When the timecode on the input matches the end time for that subtitle - it stops showing the subtitle. 
The inserter is not playing the video media - it is watching it and responding to it. 
In SMIL, the UA is orchestrating all the components of the presentation. 
Ok - so far you could get away with duration based subtitling - but it is much more convenient to have the absolute off air time in the subtitle file, since that is what you are matching against. 
In practice, the broadcaster will want to show adverts. 
These can occur at **any time** during the broadcast, and may differ from showing to showing, but when they occur they can be detected by the subtitle inserter by a change in the timecode it is reading (by convention adverts are timed with a different start time to programs....[typically programs are 10 hours+, ads are 1 hours+]. 
The program may or may not be created with specific ad insert points in mind, regardless - the broadcaster often goes to air with an advert while a subtitle is still on screen (i.e. it is part way through its duration). 
This can occur because advert insert points are often timed to occur literally just after a significant burst of dialogue (subtitles generally have a longer duration for presentation than the corresponding audio). 
So you need to be able to off air the subtitle **early**. 
In your above example you say : "Let's say you want to show the word "foo" for 5 seconds, 10 seconds from the start of a commercial." 
But the point is that, when the program restarts after an advert, I want to show the subtitles at the correct point with respect to the timecode on the program material. 
Subtitles are frame accurate for lip synching. 
I can't use 10 seconds after the commercial - how does that relate to where I am in the program? 
What if TapeX has been advanced half a second or two while the commercial break occurred? 
This is what timecode on video is for - synchronisation. 
By using absolute tape times in the subtitle file - the subtitle inserter has a simple task. 
Match timecodes and insert. 
It doesn't need to be informed when a commercial occurs - it is resilient to changes in the timecode in the input signal. 
I fear this still doesn't explain adequately why a duration based, relative timing model is inappropriate for broadcast subtitling... but perhaps we are getting hung up on broadcast. 
I can conceive of other situations where the assumption of 1 sec per sec is invalid. 
Timed text implies duration - but in practice I believe timed text is better supported by an event driven model. 
SMIL already adequately covers duration based text presentation. 
SMIL has wallclock timebase - but that's no use. 
Sarcasm aside, timebases can always be converted into a single format. 
The issue is the resolution of the timebase. 
Anyway, in practice the standards you mention above are actually event driven. 
A film may be designed to be played at 1/25th of a second - but when played at 1/30th it is faster, but still self consistent, so is a stopped frame. 
What would happen with a subtitle under proposal 0.0 if the tape was stopped? 
In 'real life' the subtitle should remain until the tape restarts and moves past the off air time. 
In broadcast the frame is king - not the time ;-) regards John Birch The views and opinions expressed are the author's own and do not necessarily reflect the views and opinions of Screen Subtitling Systems Limited. 
The point I am trying to make wrt to SMIL timing models is: How do you synchronise the 'presentation' of the text with an external often Not true : SMIL is only a container with *references* to the media. 
SMIL contains no actual content data (images, video, audio *or* streaming text). 
Though it can have text segments if its constructed badly (or very brief !) Additionally, about the size of SMIL files, they are often under 1k. 
Streamed text (eg realtext) is usually minimal in size compared to even static images used as slides in a presentation (let alone audio or video content). 
Even better, this text can be compressed - most internet user agents (quicktime 4+, media player6.4+, real player 5+) will send an accept gzip header. 
Looking for this on the server and sending gzip deflate-encoded data will reduce the file size to well under 50% (more with an XML based format because of compression of repeated tag names). 
I frequently see XML zip compression to 15-25% of the original file size. 
So I don't think we need to be too concerned about the verbosity of XML as a wire format. 
Even without server side compression, most modems do a good enough job of compressing text for non-web applications. 
Cheers, Neil. 
I Overruled. 
There is no "point of order" in this discussion context. 
As I have previously said, the *primary* format defined by this group *will* be an XML format. 
Others may be defined as well (or may not). 
Discussion closed. 
G. Glenn, I am very happy with that. 
In my view, TT is something like : - a concatenation of text strings; - each text string has a start and end time; - each text string may have some dynamic behavior in time, such as scrolling, colour changes (Karaoke), etc. 
So what I think is needed, is to express the above in XML, while using a notion of time that needs further discussion. 
Best regards, Jan public-tt@w3.org 
Sent by: public-tt-request@w3.org 2003-02-12 09:07 PM Subject: RE: SMIL [Point of order] was : Proposal 0.0 Classification: Overruled. 
There is no "point of order" in this discussion context. 
As I have previously said, the *primary* format defined by this group *will* be an XML format. 
Others may be defined as well (or may not). 
Discussion closed. 
G. 
