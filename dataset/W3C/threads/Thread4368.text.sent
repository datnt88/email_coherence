In the current 'XQuery and XPath Full-Text Requirements' draft, section 6.1 Functionaltity, stopwords are labeled as MUST. 
I would propose this being changed to MAY. 
The existence of stop words arose mainly from the inability of older generation full-text engines to be able to handle those terms which were extremely common in the source text due to inefficient indexing algorithms. 
Stop words were typically NOT a feature -- they were a band-aid. 
It seems unnatural to say that an engine which does not have stop words is less powerful than an engine with stop words, assuming both can perform. 
Consider a phrase such as "to be or not to be." 
If a student is researching the works of Shakespeare, would that student consider a full-text engine more powerful if that engine labeled all of these terms as stop words, and therefore reduced the query to nothing, or, as some of the use-cases imply, a search for ANY 6-word phrase? 
If someone can develop a full-text search engine without stop words which can perform on-par, or faster than, another engine which has stop words turned on, should that first vendor be required to add stop word support? 
As the former Director of Professional Services for AltaVista Software, I speak from experience. 
My customers routinely replaced existing engines which mandated stop words with the AltaVista engine, which does not natively support stop words nor require such support to perform. 
Searching an index of 10 million documents for the word 'the' is possible with extremely modest hardware. 
A great percentage of real-world scenarios involving Full-Text will likely involve less than millions of XML nodes -- not having stop word support would be completely appropriate in the vast majority of uses of the technology. 
Therefore, I argue that MAY is a better extent to which stopword support with the AltaVista Company, nor am I selling their software. 
This is not an advertisement for the AltaVista software, but rather a real-world example showing the value of NOT mandating stopword support.] 
Thank you for your consideration. 
-Todd Mancini Dear Todd Thanks for your comment. 
The requirement document does not say that the fulltext system has to always do stopword elimination. 
What the requirement says is that the full text language component of XQuery must have the ability to provide support for stopword elimination. 
Does this clarify this requirement? 
Best regards Michael Michael, No, that's what I thought it meant - that the system MUST supply support for stopword elimination. 
But why? 
I fail to see a good reason to mandate stopword support, but I understand that certain implementations MAY want/need to have stopword support (because they need it to perform). 
I don't believe the majority of users want stopwords (although many believe they need them, because they have been using engines which require them). 
My personal experiences indicate that having stopwords is not regarded as nice functionality, just necessary functionality for the 'older technology' full-text engines. 
I'd be more inclined to agree that stopwords should be a MUST if you could give me an example of a query which is more powerful to the user due to the existence of stopword support (but not ignoring other technologies, such as stemming, spelling, thesaurus, phrase detection, etc.). 
The use-cases for stopwords, in my opinion, highlight why stopwords are bad and why a user would want to use an engine without them. 
To be clear, my point is this: if I can create a fantastic full-text search engine that can handle queries which include common words such as 'the', it seems a little silly for me to then do extra development to add stopword support simply so I can be compliant with the specification. 
This extra development does not make my engine any more powerful, and I argue provides no benefit to my users. 
Just my $0.02. 
Regards, -Todd Tim Bray used to say, on comp.text 
I think, that "stop words are a bug, not a feature". 
My own text retrieval system implemented them to save disk space, but recorded with each posting the fact that one or more stopwords had been skipped, to improve accuracy. 
(I won't say "precision", as that metric doesn't necessarily increase with more accurate retrieval!) In some areas of research, it's common to use a restricted vocabulary for searching, and stop words may make sense there, especially if they can be applied selectively, e.g. on a per-docuemnt or per-repository basis. 
When I spoke about lq-text at Usenix [1], someone in the audience gave an anecdote about IBM's "STAIRS", the first published text retrieval system. 
It was used to help support a legal case, but during the trial it turned out that one of the parties involved had a name like "What if, Inc", made of stopwords, and they were unable to search for it. 
Some of the older information retrieval systems may have severe performance degradations without stop words, unfortunately, so it's probably wise to allow them. 
Requiring them is another matter. 
Try a search for "to be or not to be", and see how many systems (1) take it as a boolean search on "OR NOT" and return all documents (2) ignore 2-letter words and common words and return nothing (3) fail because this doesn't exactly occur in Shakespeare -- there's a comma and and upper case letter. 
Liam [1] http://www.holoweb.net/~liam/papers/1994-usenix-boston-textretrieval/ 
Liam Quin, W3C XML Activity Lead, liam@w3.org, 
http://www.w3.org/People/Quin/ Ankh's list of IRC clients: http://www.valinor.sorcery.net/clients/ 
