Is it not strange that something as fundamental as the correctness of XML parse trees is not part of the base spec? 
No, I don't think so. 
It's also not part of the ANSI C spec, nor that of C++, Pascal, IEEE SCHEME, etc. 
A parser should be free to construct whatever data structure is most suitable for its intended application. 
I have a simple XMLish browser that doesn't use a tree at all. 
Old versions of Mosaic used a flat linked list, and although I wouldn't recommend that approach, it certainly worked, at least until they tried to support tables :-) We already have a lexical representation of XML -- XML itself. 
There might be some mileage in an XML version of ESIS++, I suppose, for testing: Since XML is _designed_ to be easy to parse, the advantage of an ESIS form is considerably reduced. 
Lee Is it not strange that something as fundamental as the correctness of XML parse trees is not part of the base spec? 
[Lee Quin] C++, Pascal, IEEE SCHEME, etc. 
I agree that there are things that are "not there" in any language spec. 
I.e. from C x = foo (++x,x--); Is syntactically valid but has a number of possible interpretations that the core C spec (i.e. BNF) does not try to iron out - The order of evaluation of the paramaters is "implemention specific". 
But at least the spec. 
enumerates things that are implementation specific. 
I agree. 
However, the correct separation of markup from content is required irrespective of the underlying data structures used to represent it. 
A Turing Machine cannot call itself XML compliant unless it gets this much right. 
Right? 
Yes. 
What about those Life Support/nuclear powerstation /financial XML apps. 
that were discussed some time ago in the context of error handling? 
Is it not a bit disconcerting that two XML parsers might interpret the same XML doc in two different ways without the XML standard having an opinion on which is correct? 
What is the correct interpretation of torture.xml? 
How would a developer build a test suite to prove s/he's got it right? 
of an ESIS form is considerably reduced. 
I agree it it less useful that with full 8879 but I think it would be very useful in entity/marked section parsing for example, which is not trivial in XML IMHO. 
Also I think it would give developers something to aim at during development. 
If I am writing a C compiler I aim to get print ("%d",1+2); to yield "3". 
What does an XML parser developer aim at? 
Sean Sean Mc Grath sean@digitome.com 
Digitome Electronic Publishing [Lee Quin] This is not correct. 
Not only is it implementation specific, but it is explicitly defined as being implementation specific and therefore not portable. 
In what sense is what I have said here "not correct". 
Your comment about portability is precisely the point I am making. 
The next paragraph of my posting (which you do not quote) went on to say:- Just seeking clarification:-) Sean Sean Mc Grath sean@digitome.com 
Digitome Electronic Publishing 
