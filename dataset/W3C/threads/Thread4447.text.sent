The WGs considered your request in the meeting on 9/16/2003 and decided not to change the semantics of fn:distinct-values to return values in order of first appearance. 
The feeling was that such a constraint would inhibit optimization of this function. 
All the best, Ashok From: public-qt-comments-request@w3.org [mailto:public-qt-comments- request@w3.org] 
On Behalf Of Dimitre Novatchev Sent: Monday, August 04, 2003 9:00 AM Subject: RE: FW: DN-FO-09: 15.1.11 fn:distinct-values As usual, Mike expressed the problem in the most precise manner. 
Please, just note that exactly the same argumentation applies to any other function returning a sequence, the order of results of which is "implementation defined". 
Please, therefore modify these to return a sequence in "order of first appearance". 
Thank you! 
Dimitre Novatchev. 
For the record, I am in favour of distinct-values being defined to retain the first occurrence of each set of duplicates, and for the result to be in "order of first appearance". 
I think that making this implementation-defined will lead to interoperability problems. 
People will discover that their favourite implementation returns results in a predictable order, and they will come to rely on it, which will give them problems moving to a different product. 
Our data model provides sequences of values, not sets of values, and we should therefore assume that by default, the order of the values is significant. 
They can always wrap the result in a call to fn:unordered() if they want a higher-performance implementation that doesn't retain order. 
Michael Kay -----Original Message----- From: Dimitre Novatchev [mailto:dnovatchev@yahoo.com] Sent: 25 July 2003 22:34 Subject: Re: FW: DN-FO-09: 15.1.11 fn:distinct-values We have clarified the text to indicate that order of the output sequence if implementation dependent. 
We have also changed the wording of the example as you suggested. 
Thank you. 
If the user wants the output in a particular order, he can sort the values by document order by using $x/. 
or in any other order by using the order-by clause. 
Please let us know if this is satisfactory. 
Document order is defined for nodes. 
We may want to preserve the *sequence order* between the distinct elements that would be returned. 
The example I gave before: I have the following sequence of random numbers: 3, 5, 2, 8, 6, 4, 9, 7, 1, 5, 2, 10, 9, 3 I want to get only the (first occuring) distinct numbers with their ordering preserved: 3, 5, 2, 8, 6, 4, 9, 7, 1, 10 This could be possible if the distinct-values() function was defined with an additional argument "preserve-order" (possibly with default value of false). 
fn:distinct-values($srcval as xs:anyAtomicType*, $preserve-order as xs:boolean? ) as xs:anyAtomicType* 8  Cheers, Dimitre Novatchev. 
Do you Yahoo!? Yahoo! 
SiteBuilder - Free, easy-to-use web site design software http://sitebuilder.yahoo.com 
Cheers, Dimitre Novatchev. 
Do you Yahoo!? Yahoo! 
SiteBuilder - Free, easy-to-use web site design software Thank you very much for considering this request. 
I am very much concerned about the way the WG seems to take its decisions: 1. 
Based on "feeling". 
2. Is the above reply a statement that there do not exist efficient algorithms for returning the distinct values of a sequence in order of first appearance or is this an expression of a belief or feeling or lack of information? 
3. What are the facts about the computational complexity of the algorithms for the implementation of the two discussed variants of the function that support the decision of the WG? 
In my personal experience I have worked with an efficient implementation of the EXSLT set:distinct() function. 
Another observation is that the definition of fn:distinct-values() in the current WD is overspecified, which unnecessarily narrows the types of the first argument of the function. 
The unnecessary condition is the requirement that "The type must have a total order". 
A total order relation is in fact not necessary condition for solving the problem of finding unique values of a sequence. 
A necessary and sufficient condition is just that the type of the elements of the sequence has an equality relation defined on it. 
The fact that total order is required in the specification narrows unnecessarily the type of sequences on which the function is defined. 
This fact also shows that the authors have a pre-determined solution (most probably involving a sort operation), for which the existence of a total order is required. 
As the above analysis shows, having total order is not required in order to define the fn:distinct-values(). 
Therefore, I propose to remove this unnecessary condition from the definition of the function and to leave as requirement only that the type of the elements of the sequence must have equality defined. 
Best regards, Dimitre Novatchev. 
Do you Yahoo!? Yahoo! 
SiteBuilder - Free, easy-to-use web site design software Hey, go easy, Dimitre! 
When a vote is taken at a meeting, many people might be voting the same way for different reasons. 
Ashok has the unenviable task of trying to sum up the sense of the meeting that made the decision, and all he's saying is that most of the arguments by people who won the day were based on optimization considerations. 
I think it has more to do with the fact that a significant number of members of the Query working group are producing implementations that store their data in relational databases, and relational databases have storage structures that are optimized for producing unordered results. 
You may not like that reasoning, but these guys pay their subs and get a vote. 
We did in fact change the spec so that there is no longer a rule that all the items must be comparable (non-comparable items are now treated as distinct). 
I'm not sure off-hand if the total ordering rule has gone too, but it certainly should go. 
Michael Kay 
