Hi All, I broached this during today's discussion of techniques for in-page expansion of detail in the "Implementation Plan for Web Accessibility" document. 
I have provided slightly more than the one or two lines of explanation that Judy requested. 
Sorry about this grin . 
Many of us believe that server-side scripting makes dynamic or interactive pages more accessible than pages using corresponding client-side techniques. 
Oft-heard excuses for the "requirement" for client-side processing - e.g. for form validation, dynamic layout and content, etc. - instead of server-side processing are that "our server can't handle the transaction load" or that "the response time for clients would be unreasonable". 
Since it is sometimes difficult to create the equivalent functionality of client-side features in non-scripted HTML I suggest the following "solution": 
Why not design the scripted functionality with client-side techniques that 
will be used by the vast majority of visitors to the site (i.e. those whose 
user agents do support and who can access client-side services). 
Then, instead of making the accessible "fall-back" a non-scripted alternative, make it a call to an equivalent server-side script. 
This means that the 
majority of users will process the service locally - putting no further strain on the server - and only the relative few who won't or can't support scripting will cause a further transaction on the server. 
I don't have any statistics handy, but for sake of argument I'll guess that 5% of the browsing public can't or won't support client-side scripting. 
If a page gets 100000 hits per day, 95000 would be processed on client-side and only 5000 would issue another hit on the server. 
I would be surprised that anyone expecting a high transaction volume would not have at least 5% extra capacity on their server. 
For the end-user who needs the server-side version there might be some slight reduction in transaction speed but I suspect that the slight speed drop would be mitigated by the fact that the functionality is available at all. 
Turned the other way, the organization benefits from making the page or service accessible to users of more types of user agents. 
By the way, please don't ask me to provide you with a real example of this 
suggestion. 
I don't have one. 
I would be really happy if someone who is 
knowledgeable in both server- and client-side programming techniques could 
try this and report back to us (and probably the WCAG group). 
Maybe one of 
you knows of a live example and could point us to it. 
I have based this suggestion on the word of some technical folk who thought that "this should be possible". 
Regards, Chuck Letourneau 
This is a good technique for WCAG, and I hope it does / soon will appear in the techniques for scripting that Jonathan Chetwynd has been working on for that group. 
I have used live examples on real sites, but I can never recall where - form validation is one function for which it is relatively common, and I have also seen it applied to making expanding menus. 
Chaals Hi All, I broached this during today's discussion of techniques for in-page expansion of detail in the "Implementation Plan for Web Accessibility" document. 
I have provided slightly more than the one or two lines of explanation that Judy requested. 
Sorry about this grin . 
[two (or so) lines snipped] 
I agree with Chuck's solution. 
Defaulting to client processing but providing "slide-ability" of that functionality up to the server when necessary 
can (depending on the script) often be as simple as combining browser sniffing 
with the addition of a single directive within the script tag. 
To use an Active 
Server Page (ASP)example: SCRIPT RUNAT="Server" will run the script on the server, where Script will 
default to the client. 
An "if" statement based on the result of a browser sniffing test can add/don't add the additional attribute. 
Of course, the script itself will need to be written with the consideration that it could run in either environments. 
As an example requested, the Microsoft site provides this type of functionality 
in its toolbar (or at least use to, I haven't checked it out lately). 
Bill Shackleton Access Empowers People... ...Barriers Disable Them www.eramp.com 
Behalf Of Chuck Letourneau 
Hi All, I broached this during today's discussion of techniques for in-page expansion of detail in the "Implementation Plan for Web Accessibility" document. 
I have provided slightly more than the one or two lines of explanation that Judy requested. 
Sorry about this grin . 
Many of us believe that server-side scripting makes dynamic or interactive pages more accessible than pages using corresponding client-side techniques. 
Oft-heard excuses for the "requirement" for client-side processing - e.g. for form validation, dynamic layout and content, etc. - instead of server-side processing are that "our server can't handle the transaction load" or that "the response time for clients would be unreasonable". 
Since it is sometimes difficult to create the equivalent functionality of client-side features in non-scripted HTML I suggest the following "solution": 
Why not design the scripted functionality with client-side techniques that 
will be used by the vast majority of visitors to the site (i.e. those whose 
user agents do support and who can access client-side services). 
Then, instead of making the accessible "fall-back" a non-scripted alternative, make it a call to an equivalent server-side script. 
This means that the 
majority of users will process the service locally - putting no further strain on the server - and only the relative few who won't or can't support scripting will cause a further transaction on the server. 
I don't have any statistics handy, but for sake of argument I'll guess that 5% of the browsing public can't or won't support client-side scripting. 
If a page gets 100000 hits per day, 95000 would be processed on client-side and only 5000 would issue another hit on the server. 
I would be surprised that anyone expecting a high transaction volume would not have at least 5% extra capacity on their server. 
For the end-user who needs the server-side version there might be some slight reduction in transaction speed but I suspect that the slight speed drop would be mitigated by the fact that the functionality is available at all. 
Turned the other way, the organization benefits from making the page or service accessible to users of more types of user agents. 
By the way, please don't ask me to provide you with a real example of this 
suggestion. 
I don't have one. 
I would be really happy if someone who is 
knowledgeable in both server- and client-side programming techniques could 
try this and report back to us (and probably the WCAG group). 
Maybe one of 
you knows of a live example and could point us to it. 
I have based this suggestion on the word of some technical folk who thought that "this should be possible". 
Regards, Chuck Letourneau 
necessary 
sniffing Browser Sniffing? 
this is an impossibility, there are no mechanisms (until (if) CC/PP becomes available) the HTTP_USERAGENT is not appropriate for this. 
As you seem to be suggesting ASP, then hopefully by now the relevant Microsoft Knowledge Base Articles have added a disclaimer that this doesn't work even for "standard" browsers, let alone issues like browser configuration (no images, no script etc. etc.) or Accessibility technology based on top of them. 
For example Jaws for Windows, makes IE5.5's capabilities radically different. 
that 
whose 
The majority of uses for client-side scripting either already have server duplication (form validation), or are not duplicatable in the server (popup menus, rollovers, etc. etc.) 
this 
is 
could 
Just about every form, on any page has form validation with server side validation aswell as client (if it doesn't then the server has a problem...) Jim. 
Hi Chuck, all, First, another argument for those that complain about server load when using server-side scripting: client-side scripting also requires to serve bigger pages, because you must send a few Kbs of JavaScript to the client (and I have seen pages with more than a few Kbs, but close to 50kbs of extra JavaScript code due to complex validation form techniques). 
As already said, browser sniffing will not work, because you are not able to determine from the HTTP request whether the user has JavaScript activated. 
Therefore, the only "reasonable" technique, also from an accessibility standpoint, is server-side scripting. 
If you are receiving 100,000 requests a day, you better have a good server with load balancing, otherwise you are in big trouble. 
In regard to the solution that Judy wants to implement for the document we were discussing, the solution we use is X(HT)ML+XSLT (Apache + Cocoon). 
But I do not know which server is W3C using. 
But I am sure, Charles does grin / Regards, carlos 
Dr Carlos A Velasco Fraunhofer-Institut f?r Angewandte Informationstechnik (FIT.HEB) [Fraunhofer Institute for Applied Information Technology (FIT.HEB)] 
Schloss Birlinghoven, D53757 Sankt Augustin (Germany) 
I responded once to this post on GL. 
The basic idea is "yes, there should be some diversity in where things get done, and it is necessary to get this instilled in the DI principles to make it W3C dogma, because it is generic DI stuff and not peculiar to disability access. 
In particular, In that post I briefly mention a scenario dealing with "how PWDs oughta be able to use the Web of Web Services soon." 
This one revolves around the Mike May GPS-enabled BrailleNote personal digital assistant. 
The scenario is that the BrailleNote uses its GPS accessory to know where the user is in the city and they use the built in browser and radio internet access to access a commodity restaurant guide site. 
First off, there is a machine shortcut by which "here" becomes something out of the GPS service that the user can inject into the query against the restaurant guide where it asks "near where?" 
[This can be done if the restaurant site uses XForms, so that there is a defined (and accessible?) model of the user-input fields by which it asks about map locations.] 
Secondly, the route-planning function in the BrailleNote knows through user customization that it cares about sidewalk closings and bad intersections with short lights or inadequate crosswalk marking. 
The restaurant guide doesn't understand this level of stuff and doesn't need to. 
It just includes a street address, and the GPS route-planner goes from there. 
There is an interoperation standard for plugins that means the GPS route-planner as shipped didn't know about the DPW (that's Department of Public Works for international readers) sidewalk-closing service, but the user can install knowledge which tells the route planner how to access the DPW service. 
This may all be discoverable. 
The user on web-browsing to the DPW site could be able to pick up WSDL for the sidewalk-closings service and the browser knows how to disclose this to the pedestrian-route-planning GPS plugin service and we are off on a route that avoids the construction horses across the sidewalk. 
This is client-side combination of information from un-cooperating servers, for which we need access to metadata from each un-cooperating server to build the metdata bridge so we can join the information from the several formats used by the several servers. 
This is the radical step. 
It doesn't require RDF. 
RDF can be instrumental in making it easy. 
It requires that all the sites accept an "only document" level of metadata standard. 
Then third-party WebServices can do the connecting from there to make composite data [see Grossman] available as a resource to client-hosted methods. 
Al [Grossman] See Bob Grossman's entertaining pitch including "W's law" about "data is interesting in proportion to the square of the column count in the joined table." 
Alliance All-Hands PowerPoint Presentations http://fantasia.ncsa.uiuc.edu/media/2001Meeting 
http://fantasia.ncsa.uiuc 
.edu/media/2001Meeting/ 
Google for "Mike May GPS BrailleNote" for more on the device development program. 
necessary 
sniffing 
Active 
will 
functionality 
[ mailto:w3c-wai-eo-request@w3.org%5DOn mailto:w3c-wai-eo-request@w3.org]On 
