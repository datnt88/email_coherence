Maybe this should better read "If the version is null (or undefined) or empty string..." because in ECMAScript the most common way to not supplying an argument is leaving that argument "undefined" 
A few thoughts: 
I'd say that's a binding issue -- "what does null mean in this binding" -- 
since the main spec is supposed to be language independent and many languages do not permit optional/implied arguments or method overloading. 
There's a consistancy question. 
If we declare that undefined shall be taken as null here, we should probably do so throughout the API. 
Purely personal reaction: it strikes me as a bit late to be making that sort of large-scale change in the bindings. 
I admit it's likely to be backward-compatable, because nobody should have been issuing the truncated form of these calls... but forcing every implementation to update itself in order to support what is, at most, a minor coding convenience seems hard to justify. 
So I'd tend to put this one in the category of "Might have been nice if we'd thought of it, but we missed our opportunity." 
Of course I'm not an ECMAScript developer, so my opinion isn't highly significant and I'm perfectly willing to be outvoted on this one. 
Joe Kesselman / IBM Research 
Just to refresh on the back ground for those who tuned in. 
The impetus for the initial question was that the NIST tests had code like: boolean hasFeature = impl.hasFeature("XML",""); 
but didn't test: boolean hasFeature = impl.hasFeature("XML",null); 
I can't justify that the first as a valid test based on the original text, "" isn't unspecified, it is an empty string. 
I think that the majority of Java developers would look at the second form and the spec and say it should return true if the processor supports any version of XML. 
However, I believe at least one processor threw an exception when passed a null. 
If the NIST test form and only the NIST test form is correct, then "unspecified" should be "empty string" MSXML 3.0's documentation for IXMLDOMImplement.hasFeature ( m/xmmthhasfeature.asp) and System.Xml.XmlImplementation (http://msdn.microsoft.com/library/default.asp?url=/library/en-us/cpref/html /frlrfsystemxmlxmlimplementationclasshasfeaturetopic.asp) interpreted unspecified == null 
Version number to test, or, if Null, tests for implementation of the 
feature 
in any version. 
In Level 1, "1.0" is the only valid version value. 
I think an errata is necessary because different people have looked at that statement and come up with different interpretations. 
So the options are: 1. Change "unspecified" to "empty string". 
The NIST test stands, and the behavior using null is unspecified. 
2. Change "unspecified" to "null". 
Behavior using empty string is unspecified. 
3. Change "unspecified" to "null or empty string". 
The NIST test stands (but an additional test should be added) and the behavior using null is specified. 
4. Change "unspecified" to "undefined, null or empty string" or "undefined or null" This would definitely be the most desireable from a usage standpoint and might possibly reflect the behavior of deployed ECMAScript implementations. 
I will try to check the MSXML behavior when I finally get to the office. 
If someone could quickly check Netscape 6/Mozilla, I'd be grateful. 
Basically, you would want to results of: impl.hasFeature("XML","1.0"); impl.hasFeature("XML",""); impl.hasFeature("XML",null); impl.hasFeature("XML",undefined); impl.hasFeature("XML"); 
If both browsers return true for all the cases, or for all the cases except "", then I'd change it to "undefined, null, or empty string". 
If Microsoft fails the last two, then "undefined" would not be acceptible. 
The hasFeature method is defined as a BSTR which doesn't have a distinct value for "undefined". 
JScript will either coerce undefined to a null BSTR or throws an exception before it invokes the implementation. 
If it throws an exception on the coercsion, then it would require a change of their version parameter to a VARIANT to prevent to coercsion and that would be unacceptibly distruptive. 
I'll try to get the results for at least the MSXML tests within the hour. 
am 12.07.2001 18:35 Uhr schrieb Curt Arnold unter carnold@houston.rr.com: 
(I checked Mac browsers only) MSIE5:mac is not yet fully ECMA262-3 compatible, so the last but one line won't run as "undefined" is not exposed (as it should be). 
Replace "undefined" by "void 0" (which yields undefined), and MSIE5:mac returns true on all five cases. 
Netscape6/Mozilla do not allow less than two parameters, they throw an exception on the last line. 
If you only run the first four lines, both Netscape6 and Mozilla return true/true/false/false. 
bye, Thomas 
am 12.07.2001 14:48 Uhr schrieb Joseph Kesselman unter keshlam@us.ibm.com: 
null and undefined are two different values in ECMAScript, so this could be somewhat dangerous (both values evaluate to boolean false, but if an 
ECMAScript implementation checks against null, it will fail when undefined is passed). 
Unspecified function parameters are always treated as undefined whereas the null value has to be passed explicitely. 
I would *not* recommend this for all places where null is mentioned. 
If a return value can be null (e.g. from document.getElementById), 
don't extend it to undefined to avoid ambiguity - let the script programmer definitely know what return value can be expected. 
But if null is an input parameter and it is not used to specify an empty reference but an unspecified value, an ECMAScript programmer should be allowed to pass undefined as well, because "undefined" is in ECMAScript 
terms the common unspecified value. 
bye, Thomas 
This is a matter of the binding. 
It sounds to me like the only reasonable way to do this is to bind the IDL null value to the ECMAScript null value; undefined is a different concept. 
Since the issue doesn't appear to be the value assigned to parameters omitted by the caller, since the DOM doesn't describe any optional parameters, there's no clear need to accept the undefined value. 
But there are no unspecified values in the DOM specifications, except where the specs are still being written. 
Or at least I haven't noticed that situation. 
-Fred Fred L. Drake, Jr. fdrake at acm.org PythonLabs at Digital Creations 
In order to hopefuly clear up this issue I would like to explain the ECMAScript values. 
undefined mean that the variable has not been initialized with a value. 
null means that the variable has been initialized to nothing. 
When the DOM methods allow you to send a value, either an object, string, or no value at all, it is still wanting something sent. 
You cannot send a undefined value because undefined in not an initialized value. 
Jeff Yates 
This is a matter of the binding. 
It sounds to me like the only reasonable way to do this is to bind the IDL null value to the ECMAScript null value; undefined is a different concept. 
Since the issue doesn't appear to be the value assigned to parameters omitted by the caller, since the DOM doesn't describe any optional parameters, there's no clear need to accept the undefined value. 
But there are no unspecified values in the DOM specifications, except where the specs are still being written. 
Or at least I haven't noticed that situation. 
-Fred Fred L. Drake, Jr. fdrake at acm.org PythonLabs at Digital Creations Jeff Yates e-mail: PBWiz@PBWizard.com 
Homepage: http://www.PBWizard.com 
