Let's say you have a simple nested tag like: I'm having a hard time understanding how one can use any combination of DOM functionality to reconstruct a document with nested tags. 
In my primitive understanding, the nested tag element is a child object and as far as I can tell you can query the parent for WHAT the child is, and in what order the child appears among other children, but not WHERE it is in the text of the parent. 
Please enlighten me. 
Do You Yahoo!? Talk to your friends online with Yahoo! 
Messenger. 
The DOM doesn't yet provide a function which does this, but there are _MANY_ examples of such programs -- one such is the DOMWriter example included with XML4J and Xerces (IBM and Apache, respectively). 
Basically, you have to walk the DOM tree and print each node using the appropriate syntax. 
DOM Level 3's Load/Save module will provide a standardized version of this. 
I'm not sure what question you're asking here. 
If you know what the type of the node is, then you know where its children appear -- for example, if you have an Element node, you know that you have to retrieve its name and its attributes to generate and print the start-tag, then print out its children (they appear in document order, so this is easy), then print the end-tag. 
Doing this recursively is pretty trivial; doing it nonrecursively is a trifle harder but more efficient. 
If that doesn't answer your question, I think I need a more specific example so I can see what's confusing you... Joe Kesselman / IBM Research Bernard, The DOM in script would look something like this: var oStrong = document.createElement('STRONG') 
var oText1 = document.createTextNode('Hello, 
') var oI = document.createElement('I') 
var oText2 = document.createTextNode('I\'m 
') var oText3 = document.createTextNode('doing 
fine') oI.appendChild(oText2) oStrong.appendChild(oText1) 
oStrong.appendChild(oI) 
oStrong.appendChild(oText3) 
As you can see, the STRONG element has three childNodes, a text node, an I node(which contains a text node), and another text node. 
I think the part you are missing is that the text in the STRONG element are nodes themselves. 
Hope this helps. 
Regards, -Tom if In the example given of: I think the confusion is in how many children the STRONG element has. 
From my understanding it would have three children. 
1. 
A text node containing "Hello, " 2. An element node with name "I" with a child text node of "I'm " 3. A text node containing "doing fine" I believe the question was based on the assumption that there are two children. 
1. 
A text node containing "Hello, doing fine". 
2. An element node with name "I" with a child text node of "I'm ". 
If that is the case then the point of not being able to identify the location of the embedded node within the children of STRONG. 
Darren Clark Product Architect 415-551-1510 ext. 
228 OpenTable.com, Inc. Restaurant Reservations. 
Right this way. 
From If the document is in normalized form (as delivered by a parser), that's correct. 
Element node named "STRONG" +---- Text node containing "Hello, " +---- Element node named "I" +---- Text node containing "I'm " +---- Text node containing "doing fine" If you've been manipulating the document before you reach this point, it's possible that one of the blocks of text may be made up of several successive Text nodes. 
In that case, your code can check for and deal with this possibility, or can use the normalize() operation to request that adjacent text node be merged before you begin processing. 
Joe Kesselman / IBM Research 
