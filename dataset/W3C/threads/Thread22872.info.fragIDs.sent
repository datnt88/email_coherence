Hi w3c dom people, 
As a result of a conversation between Philippe Le Hegaret, Tim Janik, and myself yesterday, I am sending this mail to propose a change in the semantics of removeEventHandler. 
Briefly, the current semantics call for the handler to be invoked in some cases after it is removed. 
I propose that it should not be. 
Let me start by outlining a concrete example. 
Suppose the document contains an "X" button that is intended to hide one of the elements of the document. 
Further suppose that there is a Model/View/Controller architecture with the DOM as the Model, and separate View and Controller modules that are connected via the DOM event mechanism. 
Thus, both the Controller and the View have listeners on the button. 
The Controller listener implements the semantics of removing the object, while the View listener keeps the display up to date, including (in this example) visualizing mouse events. 
Then, the following sequence is at least plausible: The user clicks on the "X". 
The Controller event listener is invoked first, which performs the operations needed to hide the object. 
In particular, it detaches the View from the element, changing the View state so that the element is no longer shown, and invoking removeEventListener on the View's handlers. 
Finally, the Controller's event handler completes, and the DOM invokes the event listener of the View. 
However, the View's state is no longer consistent with the element being shown. 
Thus, unless the View takes special care to detect the fact that the event should no longer be handled, unexpected behavior is likely. 
Note that this unexpected behavior is quite dependent on the order 
of invocation of the handlers on an element. 
If the View's handler is 
invoked first, nothing bad will happen. 
The Gtk+ signal mechanism is quite analogous to DOM2 Events, and is extensively used for plumbing UI events, as might be expected from advanced usage of the DOM. 
Tim Janik, a long time co-maintainer of Gtk+, has collected quite a bit of experience in this area, particularly in dealing with re-entrant invocations and similar interactions. 
His experience is that invoking a handler after removal nearly always contains the possibility of unexpected behavior, and is rarely (if ever) actually useful. 
Gtk+'s signal mechanism currently enforces the invariant that a handler is never invoked after removal, and these semantics work quite well in practice. 
For more information on Gtk+, please refer to the Gtk+ webpage at After discussing the issues with Tim and Philippe, I believe that the current DOM semantics may well cause real problems in Gill, as I expect that quite a lot of functionality might be invoked from event listeners, including modifications to the relationship between the Model and the View. 
Gill is the Gnome implementation of SVG, a spec in preparation by the W3C for advanced graphics. 
Gill is based on a strict Model/View/Controller architecture based on the DOM, and the consistency between Model and View is maintained entirely from DOM2 Events. 
The Gill webpage is at http://www.levien.com/svg/ 
Thus, I propose the following modification to the specification. 
The current language in the description of removeEventListener reads: "If an EventListener is removed from an EventTarget which is currently processing an event the removed listener will still be triggered by the current event." 
This should be changed to read "will not be triggered by the current event". 
Further, the statement, "an event listener will never be invoked after it is removed" should be added as a global invariant. 
I believe that the pain of making this change now is insignificant to that of changing the semantics in a later DOM level. 
I advocate making the change now, before the status advances past Candidate Recommendation. 
Thanks in advance for considering this issue. 
Raph 
Understood, and quite reasonable. 
Are you sure you like not knowing whether the removal will occur before or after invocation better than you like knowing that it won't? 
I don't understand this. 
I prefer knowing that the removal suppresses subsequent invocation of the handler being removed, even if there is an event pending for that handler. 
I'm not sure that corresponds exactly to either of your preferences. 
(_I_ prefer the uncertainty because it may simplify my DOM implementation. 
I'm not sure that folks who are actually trying to use the DOM will agree.) 
Is your DOM implementation Xerces-J? 
Timj, Philippe, and I looked at this code at the time we discussed the change, and believe that the change can be implemented with a dozen line patch. 
To do it roughly 
analogously to Gtk+, you keep a reference counter in the data structure you use to hold the listener (not having the source in front of me at the moment, the name escapes me). 
It is initially 1, incremented before invoking the listeners on an EventTarget, and decremented afterwards. 
To implement removeEventListener, you invalidate the listener (for example, by setting the "type" to null) and decrement the reference count. 
At the time the reference count becomes zero, it is removed from the list. 
This technique may add a small bit of complexity, but I don't see it as being decisive. 
2) You've only proposed a change to removeEventHandler. 
What about addEventHandler on the active EventTarget -- does that also become unspecified in its timing, rather than taking effect only after this phase ends? 
I would expect so, for symmetry. 
Actually, I like the existing semantics. 
You generally add an event handler when creating a new View. 
Usually, the state of the View is initialized to be consistent. 
So, as long as the Controller creates the new Views after updating the state of the Model, you're fine. 
What about the opposite order. 
The View's listener fires, doesn't know that the event should no longer be shown, delivers your "unexpected behavior"... and only then does the Controller's listener fire and realize that the element can be hidden. 
I disagree here. 
For the View's listener to fire while the View is still in the state of showing the element should be fine. 
It should be pretty much the same behavior as if you had two events in sequence - the first event updates the View (for example, by unhighlighting a clicked button), while the second removes it. 
A little more drawing than strictly necessary, perhaps, but not "unexpected behavior". 
And you may not realize that this requirement exists until you ship your code and someone runs it on a different DOM. 
Well, this is my concern. 
Since the order is unspecified, we should be careful not to create the situation where "it works for me" but displays subtle and nasty bugs when ported. 
I took a quick look at this. 
It's not very clear, but if I'm reading it correctly, Gtk+'s event listeners are ordered. 
"As stated above, you may have as many callbacks per signal and per object as you need, and each will be executed in turn, in the order they were attached." 
(With some issues of adding them before/after the default handler; there are two separate calls to access those two spaces.) 
In that scenario, the scenario described above makes more sense; you can talk about one listener reliably preceeding another, and thus ordered cancellation or removal. 
Well, Gtk+ is more deterministic than DOM in this way, but that's not really the issue. 
I am talking about making it easier to write code that does the right thing with any ordering. 
If that's the goal, it may be a reasonable one... but it's a much larger change than simply changing removeEventListener in isolation. 
I am not proposing to change the nondeterminism of invoking event listeners. 
Our current design says that if you care about the ordering of listeners, it's your responsibility to build and register a listener which dispatches to other listeners in the desired order, and register your order-sensitive listeners with that rather than directly on the DOM. 
Understood. 
But my motivations here are strictly to make it easier to write code which does _not_ care about the ordering of listeners. 
I hope this clears up my position. 
Please feel free to ask if not. 
Raph 
Well, I always found its current specification to be a bit strange, in part because it was unmotivated. 
Before changing it I'd like to hear the rationale: why was it originally specified that way? 
Use cases motivating the current behavior would be a good start. 
There's also the "add a listener" case too ... basically it's now set up so that event delivery should snapshot the listeners that will be called for targets at each level of event dispatch. 
If the spec were to change (not something I tend to want in this area) then the "add a listener" case needs to be addressed too. 
- Dave 
I believe that the intent was to make the set of Event listeners invoked be independent of the order that the events are delivered. 
The order of delivery is left undefined by the specification. 
-- Andy 
Quoth Raph, responding to me: 
Are you sure you like not knowing whether the removal will occur before 
or 
after invocation better than you like knowing that it won't? 
My point was that while this orders the operations of removal and invocation, you still have no way to control the order of event handlers, and so the question of whether the handler is or isn't invoked is still indeterminate. 
I see your point about synchronizing the removal (whenever it does occur) with other work related to that removal, and why you'd like the DOM to handle that for you rather than your having to maintain a flag of some sort. 
As I said: Changing the DOM implementation to handle this might be too bad. 
I'm still not sure it's a better behavior for the average DOM-based application; that's my main point of concern. 
Introducing asymmetry between the add and remove behaviors bothers me somewhat. 
(I'm not sure I'm following your reference-count proposal for implementation; I don't quite see why the count is necessary. 
I assume I'm missing something obvious.) Joe Kesselman / IBM Research 
