Providing Syntax for SWOL The syntax for the Semantic Web Ontology Language (SWOL) may be more contentious than its semantics. 
In particular, there may be several syntaxes, to support several modes of interaction. 
I think that is would be a good idea to get the details of one syntax ironed down. 
I've picked on an XML syntax for SWOL. 
The Basic Problem: SWOL is supposed to be an extension of RDF. 
As such, the semantics of SWOL should be upward compatible with the semantics of RDF. 
That is, that SWOL entailment reduces to RDF entailment on RDF knowledge bases. 
However, if 
the syntax of SWOL is just RDF triples, then there will be RDF knowledge bases where this is not true, namely RDF knowledge bases that contain triples that encode SWOL syntax. 
Therefore, I have developed a draft syntax that distinguishes between the RDF and non-RDF parts of SWOL. 
The Approach: I have tried to develop a syntax that allows SWOL syntax processing to use standard XML tools as much as possible. 
To that end I have specified SWOL syntax in terms of the XQuery 1.0 and XPath 2.0 Data Model. 
This makes the syntax harder to develop and harder to read, but should have important benefits for implementers. 
An initial stab at the syntax specification is given in an attachment. 
Examples of the syntax are given in another attachment. 
Note: The syntax is much less developed than the semantics. 
I welcome any help in determining better ways of doing this. 
In particular the syntactic names are taken from DAML+OIL and there are undoubtably better ones available. 
Action Items for the Clean-Up Task Force: [Again, relevant comments from other WG members are welcome.] 
1/ Review the attachment. 
2/ Determine if you disagree with the following: - Upward semantic compatibility with RDF is important. 
- The proposed solution allows this upward semantic compatability. 
- The proposed solution does not introduce other problems. 
3/ Make suggestions to improve the syntax or fill in holes in the syntax. 
Schedule: morning of 20 December 2001: comments on the approach back to me 7 January 2002: draft document for face-to-face discussion 
Why do you say that? 
I'd say SWOL entailment reduces to FOL entailment (less the excluded middle). 
p.s. this mailer doesn't seem to be doing The Right Thing with reply-to. 
Sorry. 
Dan Connolly, W3C http://www.w3.org/People/Connolly/ 
From: Dan Connolly connolly@w3.org 
Subject: Re: UPDATE: initial message concerning syntax Date: 14 Dec 2001 11:32:48 -0600 
Because that is how it should work. 
Do you really want SWOL entailment to be different from RDF entailment on RDF documents? 
SWOL entailment does exclude the middle. 
You could hand-edit the headers. 
peter 
Yes; I expect the SWOL semantics to make more conclusions valid. 
Er... argument by assertion. 
I can do that too: No, it does not. 
Dan Connolly, W3C http://www.w3.org/People/Connolly/ 
From: Dan Connolly connolly@w3.org 
Subject: Re: UPDATE: initial message concerning syntax Date: 14 Dec 2001 11:57:47 -0600 
Name some. 
I'm not making an argument by assertion, just stating a simple fact that can easily be determined from a quick perusal of the appropriate documents. 
peter 
C intersectionOf L L first A L rest L2 L2 first B L2 rest nil x type C SWOL-entails x type A 
The word "middle" doesn't occur in I assume that's the the document you were talking about. 
The text of that document is sufficiently dense that I don't get much out of a quick perusal. 
I'd appreciate if you'd point out where it says that DAML+OIL excludes the middle. 
Dan Connolly, W3C http://www.w3.org/People/Connolly/ 
From: Dan Connolly connolly@w3.org 
Subject: Re: UPDATE: initial message concerning syntax Date: 14 Dec 2001 12:43:13 -0600 
I see now what you are getting at. 
Pat and I have been having a discussion with Jim over this point, which for some reason Jim took off the wg mailing list. 
However, the problem here is that I was using a term ``RDF document'' 
without giving it a precise definition. 
What I meant was: If D1 and D2 are two RDF documents that do not use any non-RDF DAML+OIL (or SWOL) constructs then D1 RDF-entails D2 precisely when D2 DAML+OIL- (or SWOL-) entails D2. 
Sorry for not being sufficiently precise. 
If you are going to argue about logic and semantics please try to understand what you are arguing about. 
The entire model theory uses constructs that assign exactly one of two situations to ``facts''. 
For example, a pair is either in the extension of a property or it is not in the extension of the propery. 
It is not possible for a pair to be neither in nor not in the extension of the property. 
As another example, the extension of the complement of a class is precisely the set of resources that are not in the extension of the 
class. 
This is the law of the excluded middle. 
peter 
Well, I was in the process of composing a message suggesting that we should not necessarily be assuming that the semantics of SWOL was compatible with those of RDF(S), when I had to go teach class, and by the time I got back, Peter seems to have come to the same conclusion. 
Since my email is now obsolete, I will go read Peter's new one and hope he doesn't change his mind again before I have an opportunity to respond. 
:o) Lynn 
OK, yes. 
But it's kinda hard to say when an RDf document doens't use DAML+OIL stuff... via some chaing of subproperties etc. 
Ah... now an ad hominem attack. 
Also unconvincing. 
Dan Connolly, W3C http://www.w3.org/People/Connolly/ 
I have certainly *not* abandoned the idea that the semantics of SWOL should be compatible with the semantics of RDFS. 
In fact, I've spent a lot of time trying to make DAML+OIL (and, now, SWOL) as compatible as possible with RDFS. 
It is certainly not *necessary* that a web ontology language be at all compatible with RDFS in either syntax or semantics, I've just been trying to make it so as much as possible. 
The unfortunate fact is that complete compatibility is impossible, so what should go? 
I've been operating under the assumption that form is not as important as function, and so now that RDFS has a semantics I've been trying to make the semantics line up first, and only thereafter worry about the (surface) syntax. 
If any of you would prefer not to have compatibility between RDF and a web ontology language, just let me know, I'm sure that that can be arranged. 
:-) 
peter From: "Lynn Andrea Stein" lynn.stein@olin.edu 
Subject: Re: UPDATE: initial message concerning syntax Date: Fri, 14 Dec 2001 16:28:47 -0500 
Hi Peter, 
I think SWOL is really nice. 
In the RDF/RDFS MT we have, among other things, a bunch of entailment rules. 
I think SWOL should just extend that idea via additional SWOL entailment rules. 
So using SWOL vocabulary brings extra SWOL entailment rules. 
Let's start with a simple example: :Person a swol:Class; swol:disjointUnionOf ( :Man :Woman ) . 
where the range of swol:disjointUnionOf a list of classes (and it is always a list, even when it is a singleton) Now we can entail stuff via following entailment rule for all :C, :D, :L, :x { :C swol:disjointUnionOf :L . 
:L :member :D . 
:x a :D } log:implies { :x a :C } . 
(maybe we should also add { :L a swol:List } to the LHS) and for :member one has also entailment rules for all :x, :a, :b ( :x / :b ) :member :x . 
{ :b :member :x } log:implies { ( :a / :b) :member :x } . 
where ( :x / :y ) is syntactic sugar for [ a swol:List; swol:first :x; swol:rest :y ] I think if we can do that for all SWOL vocabulary there should be no trouble for SWOL entailment and actually for ANY entailment. 
It is also interesting to use SWOL vocabulary for RDFS entailment rules e.g. rdfs:subPropertyOf a swol:TransitiveProperty . 
rdfs:subClassOf a swol:TransitiveProperty . 
instead of the RDF/RDFS MT rules rdfs5 and rdfs8. 
(just as we already use log:implies) so it's 
not hierarchically layered, but wild web like :-) 
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
Your proposed syntax get's closer to what I really would like in SWOL, namely a more frame-based look and feel. 
The users that I talk to (and they are still of the sophisticated variety, in comparison to the Web community at large), simply want to say that "the slot Property SSN for the class Person is restricted to integer values". 
The statement get's pretty close to that. 
What still feels very unnatural to these people is having to state this as a subclass relationship (ie stating that Person is a subclass of all things with an integral SSN-property. 
People simply don't think of abstract constructions like "the class of all things with an integral SSN-property", and can't get their head around having to model slot restrictions in this way. 
Clearly, I have no problem with the fact that slot-restrictions will be "compiled out" into subclass relationships in the semantics. 
The question is to what extend we can hide this in the syntax. 
Your current proposal still makes this construction explicit in the syntax. 
And the usual argument that "tools will hide this" only works partially, since (a) it is actually tool builders that get confused by this, and (b) experience tells us that people will end up looking at this stuff a fair amount anyway (at least in the early stages, which are in a way the most critical). 
So ideally, I would like a more radical departure from the DL-based constructions in the syntax, but I understand that this interferes heavily with your attempts to glue this on top of RDF Schema. 
In particular, a naive suggestion would be to replace: 
with something like: But I guess this introduces exactly the problems on top of RDF that you were trying to get rid of? 
Frank. 
Enrico, As you might guess, I disagree with what you wrote. 
Of course, surface syntax should not give false impressions, but I don't think this will be the case here: Some of the typical DAML+OIL idiom corresonds  *exactly*  with the usual frame-based constructions. 
(for example the locally defined range-striction on a slot, which I used as example in my msg; same for cardinality constraints; same for "defined"-classes; etc). 
Your point about behaviour requires more thinking, I agree: 
Even when dressed as a frame system a DL will always behave as a DL (with anonymous classes and automatic re-classification) 
I know that Stefan Decker has been thinking about a restricted semantics of DAML+OIL which would indeed only deal with named classes (for instance to classify instances). 
So, in my view, there are two issues, one easy, one hard, both important: - (easy): define frame-based modelling-idiom as syntactic constructions for DAML+OIL - (hard): try to think what DAML+OIL would look like if it only dealt with named classes Frank. 
Frank, I agree with your point that some of daml+oil corresponds exactly to standard frame-based representation. 
However, if this frame-based subset is part of a larger dl-like representation, then I think that misconceptions can still arise on the part of non-dl-aware users (i.e., my point is not about formal semantics is about the relation between the story presented to the user and the underlying behaviour of the system). 
Enrico 
Even when dressed as a frame system a DL will always behave as a DL (with anonymous classes and automatic re-classification) 
From: jos.deroo.jd@belgium.agfa.com 
Subject: Re: UPDATE: initial message concerning syntax Date: Sat, 15 Dec 2001 14:43:29 +0100 
Unfortunately, as I have already indicated in several places, this approach does not work, or, at best, only works with a lot of difficulty and fiddling. 
To make it work correctly you have to include a full theory of lists and other syntactic constructions in your theory. 
Once this is done, semantic paradoxes, or, if you prefer, the ability to derive a contradiction from the empty knowledge base, are very hard to avoid. 
Even if the whole formalism does not fail, there are quite a number of related issues that affect interpretations and inference. 
It is precisely this absence of layering that opens up the possiblity of semantic problems. 
peter 
I'm trying to agree with you, and it is indeed a possible concern or, if you prefer, a challenge. 
We are currently looking into "a theory of con-sequents in the presence of inconsistencies" and I believe it could be engineered. 
Anyhow, for the case of lists, I would be very interested 
to see evidence for the problems that you mention, I mean 
a test case or so. 
Our current entailment rules are for all :x, :a, :b, :c ( :x / :b ) ont:item :x . 
{ :b ont:item :x } log:implies { ( :a / :b) ont:item :x } . 
( ( ) :x ) :append :x . 
{ ( :a :b ) :append :c } log:implies { ( ( :x / :a ) :b ) :append ( :x / :c ) } . 
but we still think about the entailment rules for a :schemaInconsistency 
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
One place to see the problem is in KIF. 
The KIF definition gives an example where a truth predicate can cause problems. 
In the DAML+OIL area, if you require the presence of all syntax-like constructs in the semantics you can easily end up with structures like :_x complementOf :_x . 
in all interpretations. 
Now consider whether :_x is an instance of :_x. 
peter 
I see 
I think that complementOf is an irreflexive property How could we express that in SWOL? 
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
From: jos.deroo.jd@belgium.agfa.com 
Subject: Re: UPDATE: initial message concerning syntax Date: Fri, 21 Dec 2001 01:00:33 +0100 
SWOL has no such construct. 
Even if it did, you could construct a three-element loop which has the same problem. 
There are also lots of other constructs that cause similar problems. 
peter 
