Hello, Jason White took an action item during last Thursday's call to draft a note to add to A.14.4 regarding server content negotiation. 
After a bit of discussion, we conclude that there are two separate checkpoints. 
Our discussion follows: JW:: 
"Also, when providing multiple versions of the same information in different file formats, configure your server to take advantage of HTTP content negotiation mechanisms; this will enable a browser to retrieve files of the preferred type automatically." 
Can you improve this? 
::JW WC:: hmm, after rereading A.14.4 I have a few concerns. 
Here is A.14.4: When linking to resources that are not W3C technologies, indicate what type of resource you are linking to. 
For example, to link to a PDF file from an HTML document, set the "type" attribute to "application/pdf" on the A 
element. 
[Priority 3] 
Should we be limiting this only to technologies that are not W3C recommendations? 
It doesn't feel right. 
Also, I really think these are two separate issues and therefore we ought to have the following two checkpoints: When linking to resources, indicate what type of resource you are linking to, espcially for non-W3C technologies. 
For example, to link to a PDF file from an HTML document, set the "type" attribute to "application/pdf" on the A element. 
[Priority 3] When providing multiple versions of the same information in different file formats, configure your server to take advantage of HTTP content negotiation mechanisms. 
This will enable a browser to retrieve files of the preferred type automatically. 
For example, if linking to both a PDF and HTML version of the same document, [do what?] [Priority 3] Does this fit best in A.14? ::WC thoughts? 
--wendy 
Content negotiation and the type attribute are distinct topics. 
I would say: 1. Serve your documents with the correct Content-Type HTTP header. 
Include a charset parameter whenever might be ambiguity the encoding. 
[Priority 1] 
2. When refrering from an HTML document to a document with a MIME type which is not natively undertood to many user agents, specify the type attribute. 
[Priority 3] 
The rationale for this is that this may save the user agent work, and reduce internet traffic (I am not sure that this has to do with accessibility). 
E.g., if the type of an OBJECT is not supported by a browser it can avoid making an HTTP request for it. 
Or save indexing robots retrieving documents that they can't analize. 
Content negotiation. 
3. If a resource is served in various formats or languages use content negotiation to determine the format/language preferred to the user. 
[priority 3] 
Also provide a "manual option" (e.g., a link) to switch from one version to another. 
[priority 1] 
The last one is not only for backward compatibility. 
Sometimes a user may like to check out more than one format. 
(e.g., HTMl to read online, and then if I like it PDF to make a printed version) Nir Dagan Assistant Professor of Economics Universidad Pompeu Fabra Ramon Trias Fargas 25 08005 Barcelona Spain "There is nothing quite so practical as a good theory." -- A. Einstein 
Distinct but related. 
If we keep them, I'd rather split the checkpoints along the line author's job/webmaster jobs. 
This is mixed as "serving" the document is a matter of server conf, while including a charset can be done in HTML. 
Adding a type attribute to an A is just a more formal way to indicate the type of the target otherwise done thru the url file extension. 
I wonder how many agents use that and how useful it will prove to be in the field, compare to asking author to indicate the type of the resource inline, in the text, as in Click here for the A HREF=foo.pdf Foo spec in PDF (200K) /A . 
Of course, both can be done. 
They usually do a HEAD to get the content-type, losing a round-trip but not retrieving the entire document. 
This is a webmaster job, or a combination of webmaster/author (adding a .conf 
file locally to indicate binding can be done by the author if the webmaster allows for it). 
Yes, this is useful, and there is nothing in HTTP today that let you do that transparently. 
Saying it's a P1 now is a little too much I think. 
Overall, I question the accessibility relevance of all this, and I think it's more usability than anything else. 
We started with browser sniffing where some servers just reply "Go get a real browser" when they see lynx in the User Agent field, but we seem to have lost this track (I don't see any mention of that anymore). 
Even as P3, these sounds like very HTML/HTTP generic practices and I'm not sure we should pursue them. 
[Daniel Dardailler] 
just sends a null document to Lynx users. 
This is, by far, the worst offender I've seen. 
-Chris 
Not quite so. 
charset is a paremeter of the content type header. 
All http headers can be HTMLized with META. 
E.g., Regards, Nir Dagan Assistant Professor of Economics Universidad Pompeu Fabra Ramon Trias Fargas 25 08005 Barcelona Spain "There is nothing quite so practical as a good theory." -- A. Einstein 
