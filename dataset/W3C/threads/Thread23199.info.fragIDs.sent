I have a question about computed style property values. 
For a non-positioned, non-replaced element that does not have explicit dimensions set and is laid out according to normal flow, what should be returned for the value of 'top', 'right', 'bottom', or 'left' by the getPropertyValue() method of the DOM CSS 'CSSStyleDeclaration' interface (e.g. getComputedStyle( document.getElementById( 
'homeLink' ), null ). 
getPropertyValue( 'left' ) I'd like to think that it would return an actual value that specifies the element's offset with respect to the containing block, but from reading the specs I'm not sure what I should expect to get back. 
I'm currently experimenting with this in Netscape 6.1, and in the scenario 
I've described, Netscape returns an actual value in pixels for 'left', ... though I don't know on what basis it is determining the point of reference for the offset... 
Please see my example page for reference at (as far as I know this will only work in Netscape 6, it definitely does not work in IE 5 PC). 
As you can see, the purple element is absolutely positioned and the yellow element is absolutely positioned within that. 
Within the yellow element there are green inline elements with varying amounts of text content, laid out according to normal flow (the text is just filler lifted from the ever popular MSN.com). 
The idea in this scenario is to have an arbitrary number of green elements, each with a corresponding menu of links that will be left aligned with and below the green element and can appear and disappear. 
The only way that I can see to set up a system like this is if you can retrieve an actual value for 'left', ... in pixels for the green elements, then use absolute positioning to place the corresponding menus below them -- which is what I've done. 
For the green elements, Netscape returns the offset in pixels from the border edge of the purple element (which is not the containing block for the green elements) to the border edge of the green element. 
Mouseover the green elements to see a menu appear below (currently only "MSN Home" and "Search"). 
So there are a couple of questions here: 1) See the second paragraph -- "For a non-positioned...". 
In the CSS 2 spec it says the properties 'left', ... apply to positioned elements, and these (the green elements) aren't positioned -- I just want to find out where they end up. 
2) If a value should be returned, how should that value be determined (e.g., with respect to the containing block)? 
3) It's really covered by the answers to the first two questions, but just to put it in perspective, should Netscape's implementation be considered conforming, and if so, should the behavior exhibited by Netscape be relied upon, that is can it be considered the definitive conforming behavior in this 
scenario (I doubt it)? 
I think perhaps this is something Netscape cooked up and is not conforming to the DOM CSS spec, but is perhaps more useful: see this bugzilla bug that was mentioned in another thread: http://bugzilla.mozilla.org/show_bug.cgi? 
id=32169 , especially Additional Comment #8 From Johnny Stenback. 
As mentioned in the bugzilla thread, the 'ViewCSS' interface part of the DOM CSS spec says that "The CSSStyleDeclaration is read-only and contains only absolute values." 
Absolute values does not include pixel values, so I doubt that that statment really means what it says because that would be a very useless method where you would expect to find a useful method, and there is no mention of "only absolute values" in the 'CSSStyleDeclaration' interface part of the spec. 
And of course, as also mentioned in the bugzilla thread, you wouldn't want the computed value anyway, you would want the actual value (at least, I would), but 'CSSStyleDeclaration' is defined as providing access to the computed value (really a moot point if it's returning a pixel value though). 
P.S. A few things you should know about the example: Never mind the flickering of the menus, it seems to be some Netscape bug. 
I only calculate the value to use for the absolute positioning of the menu once when the document loads, so if the canvas is resized the menu may not be aligned with its green element anymore. 
The routine isn't quite worked out -- the menus are a little sticky, but I ask you to concentrate on the question at hand. 
Thanks, Jesse 
Trust me, you don't want to know... :) 
No. That behavior has been removed as of early November. 
So the next Netscape release (and the 0.9.7 Mozilla milestone) will in fact behave quite differently. 
The values it returns will be based on the specified style, not the actual position on the page. 
I too would be interested in a clarification of the spec here (possibly an official one, to be placed in the errata?) 
Boris 617-864-9910 A computer lets you make more mistakes faster than any invention in human history, with the possible exceptions of handguns and tequila. 
"Boris Zbarsky" bzbarsky@MIT.EDU 
wrote on 12/9/01 4:34:23 PM: 
You're probably right. 
That's good to know. 
Yes, some clarification is definitely necessary. 
And, as discussed in the bugzilla thread, there definitely needs to be a mechanism for retrieving the specified values as well as the computed or, better yet, actual values. 
But, the question remains if there would be any value to retrieve in my scenario, and I'm not sure if it's a DOM or CSS question. 
Being able to retrive actual values for certain properties of non-positioned elements -- top, right, bottom, left, width, height, etc. -- after they have been laid out according to normal flow would be necessary to accomplish a lot of useful things, as demonstrated in my example page, but as of now, that capability does not _seem_ to be defined, and I notice not incidentally that no one from W3C is saying anything. 
You do the math. 
Jesse 
Microsoft (MSDN site) claims that the submit method of a form does not invoke the onsubmit event handler. 
Microsoft goes on to claim on the same page that this method (submit method) is defined in the W3C DOM Level 1. 
The reference I find for the HTMLFormElement in the DOM is section 2.5.5. 
Object Definitions. 
Here it defines the submit method as performing the same action as a submit button which implies invoking the onsubmit event. 
I cannot find any specific reference here for whether or not the onsubmit event should or should not be included. 
Can you clarify this please because I believe not calling an onsubmit method if one is defined for a form would be a violation of the W3C L1 DOM? 
Thanks. Steven Elliott 
I am not sure to what you are referring to as *differences between implementations*. 
In any case I am not satisfied. 
Any means which permits the client to circumvent conditions placed upon the form submit method invalidates the purpose of having an onsubmit method (particullarly in light of the fact that it is used in 99% of cases as a validation tool). 
To my mind this is (permits) a grave abuse of an implied contract and the onsubmit method should be removed from the FORM object. 
At the very least it should be boldly stated in any and all documentation that the onsubmit event IS NOT GUARANTEED to be called by the submit method. 
It should be defined to not fire onSubmit. 
No JavaScript functions fire events that I know of (at least in forms). 
onChange doesn't happen when you change .value or .checked. 
It is not the user who is calling JS .submit(). 
It is the page designer. 
We presume that the designer knows enough about his app that when he calls submit() without validating he's *deliberately* circumventing his stuff for whatever reason. 
This gives the prog IE, NS4.x, NS6.x, and Konqueror work this way. 
What widely-used implementations *do* fire onSubmit() that make it impossible to define it this way in the DOM? 
I am not satisfied either. 
I think we should define this behavior the way current implementations do it, as it has a strong effect on Web application development. 
No more if(browserType) ! 
--John Keiser 
Unfortunately, given the differences between implementations, it was not possible to find a common ground on this issue. 
No changes were in the specification. 
You cannot rely on having an event when invoking the submit() method. 
Please, let us know if you are (or are not) satisfy with this decision, Philippe, for the DOM WG. 
I am not sure to what you are referring to as *differences between implementations*. 
In any case I am not satisfied. 
Any means which permits the client to circumvent conditions placed upon the form submit method invalidates the purpose of having an onsubmit method (particullarly in light of the fact that it is used in 99% of cases as a validation tool). 
To my mind this is (permits) a grave abuse of an implied contract and the onsubmit method should be removed from the FORM object. 
At the very least it should be boldly stated in any and all documentation that the onsubmit event IS NOT GUARANTEED to be called by the submit method. 
Thank you for your consideration. 
Steven Elliott elliott@mail.cibertribe.pt 
Systems Integrator Interactive Tecnologia, Lda. 
Lisbon Portugal 
As reported by Glenn Adams: "In DM3, the invocation of the submit() method causes the firing of the ONSUBMIT event prior to performing its intended semantics, and, if the event returns a value that is equivalent (coercable) to FALSE, then those intended semantics (form submission) are ignored." 
So you do have implementation that are firing the event. 
This is why we were not able to take one direction on an other. 
Now, regarding Steven's message, i don't have anything against some wording in the specification saying the onsubmit event is not guaranteed to be called. 
Philippe 
As mentioned in the previous messages, there are differences between implementations regarding the HTMLFormElement.submit method. 
In Spyglass Device Mosaic 3, the invocation of the submit() method causes the firing of the ONSUBMIT event prior to performing its intended semantics, and, if the event returns a value that is equivalent (coercable) to FALSE, then those intended semantics (form submission) are ignored. 
We cannot change this implementation even if NS and IE are consistent on this issue, therefore we reiterate our position: you cannot rely on having an event when invoking the submit() method. 
Philippe 
