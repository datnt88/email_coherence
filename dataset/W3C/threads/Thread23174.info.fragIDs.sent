Hi, I am new to this mailing list............. 
I am working with building a parser and implementing DOM Level 1 and level 2 methods ............ 
I am facing some initial difficulties while using name spaces........ Kindly help me on this... Basically,these are questions on how to implement the following functions.(using 
C++)(and not usage of existing parser). 
setNamedItemNS setAttributeNS An attribute node has the following properties. 
1.Node.nodeName--(qualifiedName 
which contains localName optionally preceded by colon and namespace prefix.) 2.Node.namespaceURI--(namespaceURI) 
3.Node.prefix--(prefix 
extracted from qualifiedName) 4.Node.localName--(local 
name,extracted from qualifiedName) 5.Node.nodeValue--(attibute's 
value) Now,in DOM Level 2 specification,it is given that, setNamedItemNS adds node using its namespaceURI and localName.In the NamedNodeMap,I maintain the key as string and value as pointer to attribute node.I want to know ,in the name-value pair of map whether the key should be qualifiedName(prefix:localName) or we have to concatenate localName,some delimiter(say,colon) and namespaceURI and make it as key. 
In the first case,while implementing setNamedItemNs,to check if a node with that namespaceURI and localName is already present in this map,we have to check the namespaceURI and localName properties of each attribute node in the map(since key is qualifiedName,we can't check directly by the key). 
But as said in the second case,if we make the key of the NamedNodeMap by concatenating localName,: and namespaceURI ,then the properties namespaceURI and localName of the argument Node can be concatenated in the same way and checked directly whether it matches with the key. 
Sameway,if the key of NamedNodeMap is going to be qualifiedName, in setAttributeNS(namespaceURI,qualifiedName,value) if an attribute with the same localName and namespaceURI is already present on the element ,its prefix has to be changed to the prefix part of the qualifiedName,the nodeName has to be changed to argument qualifiedName and also the prefix part of the key of NamedNodeMap has to be changed.Another thing is ,if we have qualifiedName as key of namedNodeMap,then it's possible for attribute node entries with the same local name and namespaceURI but different prefix to be present in the NamedNodeMap which may be misleading because even if the prefix is different ,the attibutes are not unique .(since 
their localName and namespaceURI are same). 
If the key of NamedNodeMap is formed by concatenating localName,: and namespaceURI,then in the implementation of setAttributeNS ,if an attribute with the same localName and namepsaceURI is already present on the element ,is prefix has to be changed to the prefix part of the qualifiedName,its nodeName has to be changed to the qualifiedName argument and also its value.in this case,we'll not have multiple entries for attributes with different prefix but same localName and namespaceURI. 
So,please tell me,according to DOM specification what should be the key of NamedNodeMap?Is it qualifiedName(two-part name containing prefix and localName) or two-part name containing localName and namespaceURI? 
thanks and regards anusha Do You Yahoo!? Make a great connection at Yahoo! Personals. 
There are several open-source implementations (Xerces-C, Xerces-J, Crimson, Mozilla, DOM4J, libxml, etc) that you can examine for implementation patterns, asking the list for an narrative when you can see through running 
code from several independent (but conforming) implementations seems to be a poor use of time. 
In Xerces-C's implementation (http://cvs.apache.org/viewcvs.cgi/xml-xerces/c/src/dom/NamedNodeMapImpl.cpp , a linked list of attributes was walked to implement getAttributeNS et al. 
Since the number of attributes on an element are typically small, an more complicated algorithm could be slower than just a simple walk through the elements. 
NamedNodeMapImpl.java appears to be similar. 
Crimson also appears to use a simple linear search tributeSet.java 
DOM4J also uses a linear search (attribute method around line 315) j/dom/DOMElement.java 
It seems like most implementators thought that using a hash map algorithm is overkill for attribute lists. 
The DOM specification doesn't tell you how you have to implement it, not what the results have to be. 
Per the previous patterns, you can definitely implement NamedNodeMap without using something like an std::map. 
However, if you were going to use std::map's and were trying to achieve the prescribed behavior, your NamedNodeMap would have to have two independent maps, one keyed by the "full" name and one keyed by {namespaceURI, local-name}. 
If you were trying to use an existing map class that used a string key, you could create a concatentate the namespaceURI, a space (which is not legal in a URI or a local-name), and the local name. 
If the namespaceURI was null, you could just use the local name as a key. 
However, given the relative small size of most attribute lists, the cost of maintaining two distinct hash-maps is probably not justified. 
You seem intent on writing your own DOM implementation, though you haven't explained your motivation. 
Since there are several implementations that have very generous licensing terms, it would seem that you could take one of those and then apply any performance tweaks you need for your specific application. 
At least, you should have a fairly good understanding of the existing public implementations (and their performance characteristics) before you start. 
Ditto the GNUJAXP version of DOM (evolved from what seems to have been the first generally available implementation of DOM Level 2 in Java). 
In DomAttr and DomNamedNodeMap classes ... also linear searches, on the grounds that most XML documents don't use very many attributes. 
Results compatible with both views are needed at the same time, another reason to stick to simpler data structures. 
- Dave 
