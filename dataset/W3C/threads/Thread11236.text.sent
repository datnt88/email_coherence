The following issues need to be decided by the ERB - most of them have been sufficiently discussed I think, but it can't hurt to lay them out. 
Assuming that some or all of this proposal is adopted by the ERB key points that I would like them to consider are: - all of this should be transparent to the parser (i.e. the parser simply transfers attributes, values and content as at present.) - if the ERB define a validation procedure for the XML-SQLTYPEs (and I'm not sure they should) it should be after parsing and before the application. 
- XML only deals in strings and should not be concerned with the internal representation of these strings as other types. 
XML should not require that an application carry out any operation on these types (other than transmitting them without corruption). 
- if all the recommendations are adopted, and an application is required to do meaningful operations on these types including conversions, there is quite a lot of work involved. 
P. Peter Murray-Rust, domestic net connection Virtual School of Molecular Sciences I have revised my paper on data typing at [1] http://www.textuality.com/xml/typing.html 
DT-1. 
Should we propose a data typing mechanism as part of the XML work? 
I vote against it unless it is a general solution. 
DT-2. 
Should the data typing mechanism be a separate paper in the WD-xml series rather than part of XML-lang? 
Keep it out of XML-lang. 
This is an application issue, not a syntax issue. 
DT-3. 
Should the data typing be a universal/extensible regexp-based thing, (as proposed by Gavin Nicol and others) rather than a simple subset of of the SQL types as proposed in [1]? 
DT-4. 
Should data typing be provided for attribute values, not just content as proposed in [1]? 
Yes. 
DT-5. 
Should data typing for the content of elements be applicable to mixed content as proposed in [2], as well as pure character data content as proposed in [1]? 
No data typeing for mixed content, unless the XML content model rules are extended so that one can bind the data format to the content model (could break SGML compatability). 
As I said before, I feel this is an application issue. 
DT-6. 
Should the primary attribute name be XML-TYPE as proposed in [2] rather than XML-SQLTYPE as proposed in [1]? 
Yes. 
DT-7. 
Should the typing proposal include data value ranges as proposed in [1] (omitted in [2])? 
Yes. 
DT-9. 
Should the numeric data types DECIMAL, INTEGER, and FLOAT use parameters designed to control the maximum datum size as in [2]'s XML-DIGITS, XML-DIGITS-R (both for DECIMAL and INTEGER) and XML-BITS (for FLOAT) ([1] provides only SCALE, for DECIMAL, and nothing else). 
Yes. 
Some definition of data size needs to be included. 
I have revised my paper on data typing at [1] http://www.textuality.com/xml/typing.html 
I don't feel data typing needs to be part of XML--it is not within the "minimum needed to declare victory." 
Therefore, I would vote against any proposal regarding data typing that puts a necessary burden on XML implementors or users or that extends the time frame for getting out the XML spec. 
However, I do believe data typing would be useful, and I would therefore be in favor of putting our assembled intelligence to the task of addressing this issue provided it is done as a separate "module" of the larger "XML-inspired" work. 
So, on DT-1, I am ambivalent, but finally come down saying we should consider data typing as part of the XML work. 
On DT-2, data typing should be a separate module in the XML series, and its support must not be a requirement of an XML system. 
On DT-4 and DT-5, I think data typing should work on attribute values and content (both character and mixed if feasible). 
I would favor making any necessary simplification (e.g., for mixed content, ignore subelements) to allow even an "80% solution." 
On the other points, I have no strong feelings at this time. 
paul DT-2. 
Should the data typing mechanism be a separate paper in the WD-xml series rather than part of XML-lang? 
Pro: Keep XML-lang simple. 
SGML (&amp; maybe HTML) can use it too. 
Con: The usefulness of XML-lang may be impaired if it doesn't have the typing guaranteed to be built-in. 
I think we should do data types in a fourth deliverable. 
I don't see how XML-Lang is impaired if it isn't built-in. 
Applications that need it will specify that both parts of XML are required. 
Is XML-Lang impaired because it doesn't have "built-in" linking or stylesheets? 
DT-3. 
Should the data typing be a universal/extensible regexp-based thing, (as proposed by Gavin Nicol and others) rather than a simple subset of of the SQL types as proposed in [1]? 
Pro: extensibility is good - the usages of SGML and XML are unpredictable; SQL types were designed for boring COBOL applications. 
Con: we already have extensibility with SGML extended facilities lextypes; the SQL types are proven in commercial practice, and are presented at the right level for the people who build real applications. 
Say no to COBOL!!! I want to be able to use XML for complex numbers and strings in a variety of "special" formats. 
We should make it extensible from the start. 
This is another reason to make it a fourth deliverable: those that aren't willing to make the commitment to extensibility should just treat them all like strings. 
DT-4. 
Should data typing be provided for attribute values, not just content as proposed in [1]? 
Pro: the minimal typing provided by SGML is for attributes; they are typically a good place to put atomic values any way. 
Con: for element content, you can do it with just one or two typing attributes - if you want to do attributes, the mapping machinery gets bigger and more complicated. 
Once again, less is more - if we have it for elements, do we really need it for attributes? 
I think that we should start to unify and rationalize element content and attributes. 
SGML/XML has enough special cases and un-unified concepts as it is. 
I personally feel uncomfortable with the notion that attribute are only in the language because they are "convenient". 
If that were the case then why do we treat them so differnt from content in the grove model, in our stylesheet languages, in our query languages, in our SGML editors, etc. 
In my mind, attributes are *named data roles*, like "members" in an OOP language, or "properties" in the grove model. 
As in the grove model, content is a special attribute, the attribute that describes the spanning tree that we call the "document hierarchy". 
Thus I consider moves to make attributes and elements even more different a step backwards. 
DT-6. 
Should the primary attribute name be XML-TYPE as proposed in [2] rather than XML-SQLTYPE as proposed in [1]? 
Pro: Shorter is better; having all these attributes with SQL in front of them makes them much less readable. 
Con: These are not pulled out of the air, but rely heavily on SQL; it may be desirable to have other typing mechanisms introduced later; they would mostly be predeclared in internal subsets; terseness is not supposed to be a big deal per our design goals. 
If the mechanism is extensible then XML-TYPE is appropriate. 
If the mechanism is tied to SQL, then XML-SQLTYPE is appropriate. 
Maybe types should live in namespaces in which case the answer to this will depend on what we do with namespaces. 
Paul Prescod I have revised my paper on data typing at [1] http://www.textuality.com/xml/typing.html to take into account some of the issues raised here. 
The following changes have been made: 1. scientific notation is supported for FLOAT data types 2. the DATE/TIME/TIMESTAMP types conform to ISO 8601:1988 (thanks to Peter M-R for digging this up) 3. rather than overload everything on XML-SQLSIZE, there are several independent data type parameterization attributes 4. used the nice explanatory technique from [2] below of providing element-like declarations for each type, to illustrate the use of the various parameterizing attributes 5. more examples Another note that is relevant is [2] Jon Bosak's legible version of Jon Paoli's posting, dated 16/05/97, embodying a Microsoft proposal, entitled "SD3 - Data Types [fmt]" The following issues need to be decided by the ERB - most of them have been sufficiently discussed I think, but it can't hurt to lay them out. 
DT-1. 
Should we propose a data typing mechanism as part of the XML work? 
Pro: the whole SGML world has been screaming for this for years, and XML needs it even more. 
Con: less is more - the world, despite its screams, has limped along without it all this time. 
Also we have other important work to do. 
DT-2. 
Should the data typing mechanism be a separate paper in the WD-xml series rather than part of XML-lang? 
Pro: Keep XML-lang simple. 
SGML (&amp; maybe HTML) can use it too. 
Con: The usefulness of XML-lang may be impaired if it doesn't have the typing guaranteed to be built-in. 
DT-3. 
Should the data typing be a universal/extensible regexp-based thing, (as proposed by Gavin Nicol and others) rather than a simple subset of of the SQL types as proposed in [1]? 
Pro: extensibility is good - the usages of SGML and XML are unpredictable; SQL types were designed for boring COBOL applications. 
Con: we already have extensibility with SGML extended facilities lextypes; the SQL types are proven in commercial practice, and are presented at the right level for the people who build real applications. 
DT-4. 
Should data typing be provided for attribute values, not just content as proposed in [1]? 
Pro: the minimal typing provided by SGML is for attributes; they are typically a good place to put atomic values any way. 
Con: for element content, you can do it with just one or two typing attributes - if you want to do attributes, the mapping machinery gets bigger and more complicated. 
Once again, less is more - if we have it for elements, do we really need it for attributes? 
DT-5. 
Should data typing for the content of elements be applicable to mixed content as proposed in [2], as well as pure character data content as proposed in [1]? 
Pro: There's no real architectural problem with doing mixed content, you just pretend the child elements aren't there. 
Con: With mixed content you can get into whitespace problems; also, it "feels like" the data typing should apply to atomic items, and mixed content doesn't "feel" atomic. 
DT-6. 
Should the primary attribute name be XML-TYPE as proposed in [2] rather than XML-SQLTYPE as proposed in [1]? 
Pro: Shorter is better; having all these attributes with SQL in front of them makes them much less readable. 
Con: These are not pulled out of the air, but rely heavily on SQL; it may be desirable to have other typing mechanisms introduced later; they would mostly be predeclared in internal subsets; terseness is not supposed to be a big deal per our design goals. 
DT-7. 
Should the typing proposal include data value ranges as proposed in [1] (omitted in [2])? 
Pro: Databases use them; this will make it pretty easy to construct an input/authoring system that will produce examples that are loadable into a database with somewhat higher confidence. 
Con: This really amounts to validation rather than typing, which is another domain; the approach in [1] is violently incompatible with SQL, which does it with real SQL queries, that can also be extended to involve the values of other queries - in fact, anything that an SQL query can do. 
DT-8. 
Should the CHAR datatype use both SIZE and MAXSIZE parameters as in [2] (in [1], it only had SIZE and was conceived of as a fixed-size field)? 
Pro/Con: I don't understand [2] in this regard - I was following SQL in assuming that CHAR fields are fixed-size and thus need only one parm. 
DT-9. 
Should the numeric data types DECIMAL, INTEGER, and FLOAT use parameters designed to control the maximum datum size as in [2]'s XML-DIGITS, XML-DIGITS-R (both for DECIMAL and INTEGER) and XML-BITS (for FLOAT) ([1] provides only SCALE, for DECIMAL, and nothing else). 
Question: what is DIGITS-R, anyhow? 
It doesn't show up in the example and is not otherwise explained. 
Pro: Better control over the storage requirements, and another useful validation step. 
Con: More machinery - perhaps beyond XML's complexity cost/benefit ratio. 
DT-10. 
For the FLOAT datatype, should we prescribe that these internally correspond to IEEE floats (as proposed by someone I forget who)? 
Pro: This would make comparison and sorting deterministic, and ensure that the string representation corresponds to a particular bit pattern. 
Con: Overspecification - comparison/sorting of the strings is deterministic anyhow, also presumably of the underlying bit patterns, anybody who compares a string against a bit pattern has rocks in their head anyhow. 
- Tim "I think that we should start to unify and rationalize element content and attributes. 
SGML/XML has enough special cases and un-unified concepts as it is. 
"I personally feel uncomfortable with the notion that attribute are only in the language because they are "convenient". 
If that were the case then why do we treat them so differnt from content in the grove model, in our stylesheet languages, in our query languages, in our SGML editors, etc. 
In my mind, attributes are *named data roles*, like "members" in an OOP language, or "properties" in the grove model. 
As in the grove model, content is a special attribute, the attribute that describes the spanning tree that we call the "document hierarchy". 
Thus I consider moves to make attributes and elements even more different a step backwards." 
I agree completely. 
Similarly, I agree with your point that our thinking about datatypes is dependent on what we do with namespaces. 
Datatypes live within some namespace. 
