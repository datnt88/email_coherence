Hi, Here is a proposed mission statement for our working group. 
This is intended as a device to initiate discussion within the group. 
Our mission statement is the first step toward our CSF analysis. 
Please keep in mind that this statement is subject to change based on your input - it is by no means final or even close to what we will end up with. 
It's only Daniel's $0.02. 
Let's start this conversation by looking at your Charter [1]. 
The most relevant text I could find was this: The Web Services Choreography Working Group...is chartered to create the definition of a choreography, language(s) for describing a choreography, as well as the rules for composition of, and interaction among, such choreographed Web services. 
At first blush, we might think that this is a good candidate for a mission statement. 
Modify the working a little and go...right? 
Unfortunately, I don't think so, for these three reasons: a) The text above makes a serious mistake in its direction to the group. 
The problem is what I call "presupposing the solution" and it's very common. 
Instead of posing a problem to be solved and saying "go forth and solve this problem" the text doesn't bother to explain the problem in any detail, but it tells us what the solution is already! 
This artifact- and deliverable-centric approach isn't likely to produce a good solution. 
b) It's begging the question - do we really need Yet Another Markup Language (YAML)? 
Sez who? 
To do what? 
What is the problem we want YAML to solve? 
The world doesn't necessarily need YAML; it needs a solution to the choreography problem, and while that may or may not result in YAML, we don't need to constrain ourselves by thinking about the problem in these terms. 
Not yet anyhow. 
c) It's circular - apparently we need a choreography language to choreograph Web Services. 
The logic isn't exactly clear. 
Based on this thinking, I decided that I'd like our mission statement for this group to have the following features: 1) It must clearly set forth the problem to be solved, including an indication of the overall scope of the problem. 
2) It must not presuppose any solution in advance of the problem analysis. 
3) It must be clear and in the imperative case, so that a reader can easily tell if the problem they have falls under our area of effort. 
4) It must be contextually-driven, taking into account the current state of affairs as we know it. 
When the charter was originally written, we didn't know about the OASIS fiasco, for example, and our mission certainly has to take these things into account if we intend to accomplish our goals. 
5) It has to be reasonable - the problem to be solved has to be scoped in a way that allows us to actually have a fighting chance of success. 
Let's ask ourselves "What problem is it that we are trying to solve?" 
If I had to put it simply, I would say that we want to solve the problem of interoperability among Web Services and other systems. 
We want all our Web Services to come home with report cards that say "plays well with others". 
That's it. 
But that's a huge issue...and we cannot (and aren't charged with) solving the whole problem, just a part of it. 
Which part? 
The part that concerns interactions between one or more Web Services and any external systems. 
More specifically, we are concerned with the rules and constraints that a Web Service has to follow in order to interoperate reliably with the rest of the world. 
We can exclude the definitions of the interface of any given Web Service - WSDL group is doing that. 
We can also exclude questions of underlying low-level protocols, because we want to leave this deliberately unspecified. 
The content and packaging of Web Services messages are largely being handled by the SOAP WG. 
That leaves us with a set of constraints on the sequencing (the ordering of events in time) and composition (the patterns of message and response among one or more Web Services and one or more external systems, which may or may not be other Web Services, human beings, non-Web Service services, or something else altogether. 
So...after saying that, here is what I've come up with. 
YMMV. 
The mission of the Web Services Choreography Working Group at W3C is to specify the means by which Web Services may collaborate with external systems, specifically in the composition of multiple services and the sequencing of messages among them. 
Regards, D- Dr. Daniel Austin Sr. Technical Architect / Architecture Team Lead daniel_austin@notes.grainger.com 
----- Note change! 
847 793 5044 Visit http://www.grainger.com 
"If I get a little money, I buy books. 
If there is anything left over, I buy clothing and food." 
-Erasmus I find myself agreeing with JJ again when he says ... [JJ] yes, one of the value of the spec could be to offer a binding to WSDL but remain open to other bindings. 
I think this is an important principle if only because, as bindings evolve, which they surely will to support security, reliability etc, then only our binding will need to change, the main spec, hopefull, should not need to change. 
My $0.02c David I don't necessarily buy the argument that we are only talking about the interactions between one WSDL-ized object and another. 
WSDL is just WSDL interface, IMHO. 
[JJ] yes, one of the value of the spec could be to offer a binding to WSDL but remain open to other bindings. 
JJ- I with respect to that attribute. 
There seem to be an important concept missing: "Long Running Interactions" There also seem to miss some goals such as: being able to enforce message sequences and detect exceptions, ... My two centimes (of Euro that is). 
JJ- the over, My take on this: In reviewing other specifications in this space including security (the WS-Security stack, SAML, etc), coordination (WS-TX and BTP), reliable messaging (WS-RM(1) and WS-RM(2)) and even not yet discussed specifications such as WS-Policy, WS-Addressing, management specs, etc, they all seem to be recommend that we write choreographies using WSDL operations. 
These specification will either add additional dimensions by referencing the same WSDL operation we reference, or by being part of the protocol binding used by that WSDL operation (in effect also referencing them) when it comes time to actually exchange messages. 
So clearly the way to go is to write a choroegraphy definition by referencing WSDL operations. 
Then you get everything else that works with WSDL for free, including stuff that's available now and specs we anticipate will be standardized in the near future. 
Of course this only works with that list of specifications and relates specifications that are part of the WS stack. 
The question then becomes, are there other specifications we want to support that work in different ways indicating that we need to keep our options open? 
arkin I don't necessarily buy the argument that we are only talking the interactions between one WSDL-ized object and another. 
WSDL is "Those who can, do; those who can't, make screenshots" Assaf Arkin arkin@intalio.com 
Intalio Inc. www.intalio.com 
The Business Process Management Company (650) 577 4700 This message is intended only for the use of the Addressee and may contain information that is PRIVILEGED and CONFIDENTIAL. 
If you are not the intended recipient, dissemination of this communication is prohibited. 
If you have received this communication in error, please erase all copies of the message and its attachments and notify us immediately. 
I don't understand your argument, why won't you get everything for free as long as you have a binding to WSDL whether it is direct or let's say indirect for the lack of a better word. 
The advantage of the later is that in addition of getting everything the ws-arch has to offer, you can also re-use the formalism of ws-chor for other technologies. 
Having a "binding" framework that relates ws-chor to WSDL garanties that the design of ws-chor is now decoupled from the evolution of WSDL, we would only change the binding not the core choreography language. 
We can clearly see the limitations of a tight coupling between BPML or BPEL and web services, now that WSDL is shifting from operations to MEPs, one has to adjust the corresponding specs. 
Jean-Jacques Dubray____________________ Chief Architect Eigner Precision Lifecycle Management 200 Fifth Avenue Waltham, MA 02451 781-472-6317 jjd@eigner.com 
www.eigner.com 
(the etc, referencing becomes, different only to I don't necessarily buy the argument that we are only talking the interactions between one WSDL-ized object and another. 
WSDL is I just don't see those other technologies as being interesting that's all. 
My personal opinion. 
In a W3C working group I would prefer to pick all the relevant technologies that the W3C maps out as interesting as part of the WSA. 
So far I've only heard of WSDL. 
If it boils down to one technology and that makes my life easier, all the better. 
What other technologies do you suggest we look into? 
Here is how I understand it. 
Correct me if I'm wrong. 
Option 1: based on WSDL Can't use other technologies. 
Need to be updated when WSDL gets updated. 
Option 2: abstacted with binding to WSDL Can use other technologies. 
Needs to be updated when WSDL gets updated. 
Extra level of indirection. 
I think it's obvious why I would prefer no#1, but just for the sake of being verbose. 
Either way if I use some normative specification and that specification evolves I would want to use the new version, be it WSDL, XSDL, XPath, whatever. 
So either way we need to update the specification. 
It may affect language section 4 or it may affect binding appendix A, but that's all the same. 
I don't see a real big differentiaor between 1 and 2 to suggest one is better than the other. 
And as you guess I've already planned for it so I know what it entails and it doesn't seem like a big issue to me. 
Option 2 is simply more complicated to support and require invention of an abstract layer and invention of a binding layer which makes the specification, implementations, interoperability, RI, etc more complicated. 
That's good if it actually buys you anything. 
What does it buy you? 
I've heard before the argument that if we only wrote the spec to not so directly rely on WSDL we could also use IDL. 
Well, by the time we go to finish the spec the problem was already taken care of and you have IDL-WSDL mapping that's well defined and readily available. 
It was in my opinion - then and now - a waste of time to consider anything other than WSDL. 
We've talked about simplifying the language which as I read it means do less features now, do the rest later on. 
I'm going to buy a hat. 
If we're going to have to change the specification because using WSDL is no longer the only interesting option before we get around to writing a new version of the specification anyway, I'm going to eat it. 
Wish me luck ;-) arkin abstraction. 
The only way to 'abstract' away dependency on something is to completely re-invent the thing being depended on and then define how your re-invention maps to the original. 
This is an extremely expensive process that causes significant harm to interoperability and should only be undertaken when there is no other choice. 
The 'abstractions' introduced between WSDL and SOAP have caused so much interoperability pain that two different organizations had to be formed to sort out the resulting mess. 
What we need is a little less abstraction and a lot more interoperability. 
Yaron From: public-ws-chor-request@w3.org [mailto:public-ws-chor-request@w3.org]On 
Behalf Of Assaf Arkin Sent: Monday, May 12, 2003 9:30 PM Subject: Re: Straw-man Proposal for our mission statement The cost of abstraction is way overestimated here. 
The abstraction is already built, it is called a message and a message exchange pattern. 
Now we have the choice to directly use the WSDL message definition or rather define something like: BPSS URI=http://oasis.org/bunchOfStandardsCollabs/aPOCollaboration" so please, let's reasonable on our assertions. 
I am currently on travel in beautiful Berlin, with limited email and web access. 
So I will respond more thoroughly to the emails this week-end. 
Cheers, JJ- From: Yaron Y. Goland [mailto:ygoland@bea.com] Sent: Montag, 19. 
Mai 2003 18:50 public-ws-chor@w3.org is to your process introduced two mess. 
interoperability. 
-----Original Message----- From: public-ws-chor-request@w3.org [mailto:public-ws-chor-request@w3.org]On 
Behalf Of Assaf Arkin Sent: Monday, May 12, 2003 9:30 PM public-ws-chor@w3.org 
Subject: Re: Straw-man Proposal for our mission statement free say is you that's pick as one we or updated. 
updated. 
of specification XPath, and already big of it so to in my than do is no new What about the alternative of binding the BPSS to WSDL, like: You already have the binding framework which is used with a variety of protocols including SOAP, HTTP, IIOP, etc, with a variety of componet access (see WSIF), and so forth. 
So instead of reinventing all these bindings in WS Choreo, how about we just add another binding to WSDL to address BPSS transactions? 
arkin 
