A Revised Internet-Draft is available from the on-line Internet-Drafts directories. 
This draft is a work item of the HyperText Transfer Protocol Working Group of the IETF. 
Title : Hypertext Transfer Protocol -- HTTP/1.0 Author(s) : T. Berners-Lee, R. Fielding, H. Nielsen Filename : draft-ietf-http-v10-spec-01.txt, .ps 
Pages : 58 Date : 08/07/1995 The Hypertext Transfer Protocol (HTTP) is an application-level protocol with the lightness and speed necessary for distributed, collaborative, hypermedia information systems. 
It is a generic, stateless, object-oriented protocol which can be used for many tasks, such as name servers and distributed object management systems, through extension of its request methods (commands). 
A feature of HTTP is the typing and negotiation of data representation, allowing systems to be built independently of the data being transferred. 
HTTP has been in use by the World-Wide Web global information initiative since 1990. 
This specification reflects preferred usage of the protocol referred to as "HTTP/1.0". 
Internet-Drafts are available by anonymous FTP. 
Login with the username "anonymous" and a password of your e-mail address. 
After logging in, type "cd internet-drafts" and then "get draft-ietf-http-v10-spec-01.txt". 
Or "get draft-ietf-http-v10-spec-01.ps". 
A URL for the Internet-Draft is: ftp://ds.internic.net/internet-drafts/draft-ietf-http-v10-spec-01.txt 
Internet-Drafts directories are located at: o Africa Address: ftp.is.co.za (196.4.160.8) o Europe Address: nic.nordu.net 
(192.36.148.17) 
Address: ftp.nis.garr.it 
(192.12.192.10) o Pacific Rim Address: munnari.oz.au (128.250.1.21) o US East Coast Address: ds.internic.net 
(198.49.45.10) o US West Coast Address: ftp.isi.edu (128.9.0.32) Internet-Drafts are also available by mail. 
Send a message to: mailserv@ds.internic.net. 
In the body type: "FILE /internet-drafts/draft-ietf-http-v10-spec-01.txt". 
Or "FILE /internet-drafts/draft-ietf-http-v10-spec-01.ps". 
NOTE: The mail server at ds.internic.net 
can return the document in MIME-encoded form by using the "mpack" utility. 
To use this feature, insert the command "ENCODING mime" before the "FILE" command. 
To decode the response(s), you will need "munpack" or a MIME-compliant mail reader. 
Different MIME-compliant mail readers exhibit different behavior, especially when dealing with "multipart" MIME messages (i.e., documents which have been split up into multiple messages), so check your local documentation on how to manipulate these messages. 
For questions, please mail to Internet-Drafts@cnri.reston.va.us. 
Below is the data which will enable a MIME compliant mail reader implementation to automatically retrieve the ASCII version of the Internet-Draft. 
--NextPart Content-Type: Multipart/Alternative; Boundary="OtherAccess" --OtherAccess Content-Type: Message/External-body; access-type="mail-server"; server="mailserv@ds.internic.net" 
Content-Type: text/plain Content-ID: 19950807134042.I-D@CNRI.Reston.VA.US ENCODING mime FILE /internet-drafts/draft-ietf-http-v10-spec-01.txt --OtherAccess Content-Type: Message/External-body; site="ds.internic.net"; 
access-type="anon-ftp"; directory="internet-drafts" Content-Type: text/plain Content-ID: 19950807134042.I-D@CNRI.Reston.VA.US --OtherAccess-- --NextPart-- Hi all, I try to summarise the impact of the results of current draft and the discussion on the caching proxies. 
(O, yeah, caching proxies is my favorite topic for now). 
The draft states: a Pragma: no-cache included in the server resposes simply forbids cacheing of the response. 
It's quite straighforward, and makes it possible to mark web documents, which are in their own nature unappropriate for cacheing. 
On the other hand, the draft doesn't state, that absence of this pragma means that the document contained in the response is appropriate for cahceing. 
Unfortunately! 
If we used the Pragma: no-cache consistently, e.g. applying it to every non-cacheable response, the life of cache implementors and administrators would be much easier. 
Why not act that way?! Upgrading a cache software is a costly process - a cache running significant time can accomodate gigabytes of cached information. 
If we have no handy way to convert the whole cache into format of the new software, we will lose those gigabytes, and will have to pump through the net the whole again. 
Any guesswork made on the future internet traffic says, that the dominant part of the traffic will be HTTP. 
The bandwith of the long-distance links won't keep up with that growth, unless caches will be widely employed. 
Currently we have not too much experience with caches, especially with cascaded ones. 
The future clearly belongs to cascaded caches. 
Having good standard, which helps implementing good and stable caches will decrease the probability of such situations. 
The possible ongoing Proxy-Authetication feature will not prevent running cache software to be useful, and will not force the costly upgrade process, unless there will be some (wich is not too probable in the foreseeable future) safe, stable and standard authentication scheme, which will give enough benefits to compensate the costs. 
When the standard, safe authentication scheme arrives, (but recently PGP, the nearly only candidate was removed from shttp proposal) that time can be a good point to re-standardise the caching again, but that shouldn't happen too often. 
Both the referred proposals, e.g. Dave Kristols state-ids (URL http://www.research.att.com/~dmk/session.html ) and Koen Holtmans Non-Persistent Cookie proposal want additional rules for proxies and caches. 
If this trend continues, cache/proxie implementors will be lost unless the no-cache pragma is used according to my proposal. 
Here comes the proposal itself: I want to add the following two sentences to section 8.22 of the draft: All compliant implementations MUST include the no-cache pragma in responses which are unappropriate to cacheing for any reason. 
If the reason is political (non-technical), server administrators should ensure that. 
Andrew. 
(Endre Balint Nagy) bne@bne.ind.eunet.hu 
I think this is partly because, up until last week, Pragma: no-cache was only a request header. 
....Roy T. Fielding Department of ICS, University of California, Irvine USA Visiting Scholar, MIT/LCS + World-Wide Web Consortium (fielding@w3.org) 
(fielding@ics.uci.edu) 
Roy Fielding: Another reason is that Pragma only affects caches in proxies, not caches in browsers (user agents). 
The Expires header affects all caches: expires: yesterday is, as far as proxies are converned, equivalent to Pragma: no-cache. 
Authors of dynamic services that want to prevent _all_ caching should thus send an Expires header, not a Pragma, if they want to minimize number of response headers sent. 
So decisions not to cache must involve checking at least two headers. 
But checking two headers for deciding not to cache is the easy thing: the thing that makes the life of cache administrators hard is to come up with good replacement heuristics for things that _are_ cached, heuristics that can be based on a great number of headers. 
Of course, if cache administrators want to be transparent for NetScape cookies and other non-standard html extensions any one browser author feels like introducing, they will have lots of trouble keeping up with browser releases. 
However, as a service author, I would never use a non-standard extension that needs transparent caches *without* also including Pragma: no-cache or Expires: yesterday . 
Both Dave Kristol's and my stateful dialog support proposals add extra work for cache implementors, but the difference with NetScape cookies is that, this time, the specification of the work to be done can be found in the HTTP standard document. 
The main reason why my stateful dialog support proposal complicates caching decisions is that it wants to introduce a distinction between frivolous requests to disable caching (which a cache admininstator may want to ignore, even if this means not confirming to the standard anymore), and serious requests. 
Koen. 
