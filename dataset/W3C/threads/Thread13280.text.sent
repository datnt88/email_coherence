Two Wishes for Bobby (or any accessibility checker) 1. Condition Bobby approval on validation. 
A document that is invalid should not be accessibility-approved. 
In order for this to work, different accessibility criteria should be applied to different HTML versions. 
a. 
The base criteria include using HTML4.0 accessibility features. 
b. Documents which are in HTML3.2 or HTML2.0 will have a reduced criteria consistent with their limitations. 
(a tip to upgrade may be included) c. Documents in HTML4.0 or higher (voyager) and documents with SYSTEM DTDs must follow the base guidelines. 
This allows to include non-standards features, under validation constraints and the stricter accessibility criteria. 
When using a non-standard DTD Bobby should list all elements that are not in HTML4.0 and warn the user that Bobby can't assess their accessibility features. 
2. Spell check. 
(This now in the guidelines) Bobby can spellcheck documents (this will make it more popular, and compensate for the loss of users due to validation requirements) Spell checking should be done by parsing the lang attribute(s) and checking against the corresponding dictionary. 
If the HTML element has no lang attribute, Bobby should use the Content-Language HTTP header. 
If this too is absent, Bobby should report that it can't spell check the document since it does not recognize the language of the document. 
(Content-Language header may include several languages; in this case one must rely on the lang attributes when spell checking). 
Note that HTML3.2 documents without a Content-Language HTTP header will not be spell-checked. 
No ifs, no buts. 
Nir Dagan, Ph.D. "There is nothing quite so practical as a good theory." -- A. Einstein Bobby presently has a "trivial" validator which only looks at element/attribute names, but not content model I think. 
It could reuse the W3C HTML validator at http://validator.w3.org, either by downloading it (source is open) and running it local or by calling it remotely thru the cgi syntax (we'd need to work together some kind of stable output syntax for the validator, as it's now only meant to be parsed by human). 
Given the downloadable nature of Bobby, maybe integrating the W3C validator locally is better (the drawback being that everytime the validator is updated, Bobby needs to update its bits). 
That's a tough one, spell checking in an international environment (the web) is already hard, but an international techie one is really tricky. 
Bobby presently has a "trivial" validator which only looks at element/attribute names, but not content model I think. 
DC: The reason why Bobby is a "trivial" validator is because it never claimed to be a validator, it is a browser compatibility checker, meaning it only looks at at the tags, attributes, and values. 
It does no analysis at the structural/syntax level. 
It could reuse the W3C HTML validator at http://validator.w3.org, either by downloading it (source is open) and running it local or by calling it remotely thru the cgi syntax (we'd need to work together some kind of stable output syntax for the validator, as it's now only meant to be parsed by human). 
Given the downloadable nature of Bobby, maybe integrating the W3C validator locally is better (the drawback being that everytime the validator is updated, Bobby needs to update its bits). 
That's a tough one, spell checking in an international environment (the web) is already hard, but an international techie one is really tricky. 
DC: Good point. 
Also, to my knowledge, there are few (if any) spell checkers in the public domain. 
David Clark CAST, Inc. 
Another wish: Another thing which should not be rocket science is that the W3C validator and Bobby can render the HTTP response headers to the user (for online documents). 
I had hard time finding a way to see what my server sends. 
This is pardoxical as every browser has this info, but most hide it well for some reason. 
(An exception is Cello, that gives the headers in its "view source" option; but I can't recommend installing Cello just for that; Netscape gives the Content-Type in a non-trivial way in its "view info" option; Opera seems to hide the headers from the user.) headers for GET requests. 
It also has the option of choosing a user-agent string to check for discrimination on this basis. 
Lynx will show you the headers in either of two ways. 
It has a keystroke to issue an HTTP HEAD request and it shows you the headers returned. 
Also you can use trace mode to get the back and forth dialog. 
Al This is true. 
But I am afraid that many authors don't realize the difference. 
Also, you can get Bobby approved even if Bobby finds unknown elements (or whatever it checks for), as they appear as "browser compatibility" which seems to be classified as independent of accessibility. 
There is another thing that can be implemented independetly: Have in the W3 validator an option to run also in Bobby. 
Now it is implemented for weblint, a good yet somewhat outdated program. 
An option without spell checking, would be that Bobby reports what languages are used in the document and warns about non-marked (language-wise) text. 
Clearly, without spell checking Bobby can't tell (or hint) on incorrect marking. 
Another wish: Another thing which should not be rocket science is that the W3C validator and Bobby can render the HTTP response headers to the user (for online documents). 
I had hard time finding a way to see what my server sends. 
This is pardoxical as every browser has this info, but most hide it well for some reason. 
(An exception is Cello, that gives the headers in its "view source" option; but I can't recommend installing Cello just for that; Netscape gives the Content-Type in a non-trivial way in its "view info" option; Opera seems to hide the headers from the user.) headers for GET requests. 
It also has the option of choosing a user-agent string to check for discrimination on this basis. 
Regards, Nir. 
Nir Dagan, Ph.D. "There is nothing quite so practical as a good theory." -- A. Einstein I can't tell from where I sit how open is this service, but w3.org runs a simple cgi that returns your user agent info. 
