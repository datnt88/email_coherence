I have a question: I want to state a fact like this: A person is learning a subject. 
The subject have some homeworks to be done. 
So the person have these homeworks to do. 
(I think the reasoner will give this statement.) 
When the subject assert some new homeworks, the reasoner will know that the person also have these new homework. 
How do I implement this using OWL and reasoner? 
Or it can not do this? 
I think it's very easy to implement this using Rule language, but when we use OWL and when we use other Rule language? 
I know some differences between the closed and open world, but is there something that OWL can not state and only Rule language can state? 
Thanks in advance! 
Best regards, Zhu Bin 
Seems to me that there is something wrong, or at least misleading with the 
example of "TexasThings" 
First it would certainly be better to have the singular "TexasThing" rather 
than plural "TexasThings" :) "TexasThings are exactly those things located in the Texas region ..." This is obviously wrong. 
There is an allValuesFrom, but not a someValuesFrom here. 
As defined, it means : If TexasThings are located somewhere, they are located in Texas region. 
An further on 
... The difference between using owl:equivalentClass here and using 
rdfs:subClassOf is the difference between a necessary condition and a necessary and sufficient condition. 
With subClassOf, things that are located in Texas are not necessarily TexasThings. 
But, using 
owl:equivalentClass, if something is located in Texas, then it must be in 
the class of TexasThings." ... but not the other way round, unfortunately. 
In fact under this definition any thing located nowhere is a Texas Thing. 
Thinking about it, maybe it makes sense after all. 
Nowhere is indeed in Texas, and especially its middle ... :)) Bernard Vatant Senior Consultant 
Knowledge Engineering Mondeca - www.mondeca.com 
bernard.vatant@mondeca.com 
Bernard, Good points. 
Hopefully this can be fixed by the Guide editors. 
Ian 
... The difference between using owl:equivalentClass here and using 
Bernard, I meant to respond last week but was swamped. 
Of course you are correct. 
This will be corrected in next version. 
- Mike Michael K. Smith (+1-512-404-6683) Bernard, Good points. 
Hopefully this can be fixed by the Guide editors. 
Ian 
rather 
Mike, Ian Thanks for picking up the issue. 
Better late that never :)) BTW my suggestion would be to give up the Texas Thingies altogether, and maybe take the same examples than in the Reference document (Mozart's operas). 
The point for it is a very simple and generic pedagogic principle: any introductory example should offer as small as possible space for interpretation and discussion. 
Which means that the reader should instantly be provided with a clear notion of what is an instance and what is not. 
In that regard, Texas Thing, even with a someValuesFrom restriction, is still confusing. 
Take the following examples. 
There is no indication of cardinality for "locatedIn". 
Is a company with several offices, some located in Texas and some not, a Texas Thing? 
There is now indication of time extension. 
The Texan boots I bought 23 years ago in San Angelo (authentic) have been located in France ever since. 
They've been Texas Things at a time at least, but are they still now? 
And so on. 
Trying to figure out the extension of the class, the reader is led astray to such irrelevant paths by too open definition, and misses the point of "equivalentClass". 
See my "BlueThing" example in rdf-logic ... OTOH, providing a non-ambiguous definition of Texas Thing would be very arbitrary and controversial, and would need more restrictions, which would make the example confusing by its complexity. 
It figures. 
Finding good examples is difficult but important. 
99% of users will build their understanding from examples, not from abstract syntax. 
Bernard Bernard Vatant Senior Consultant Knowledge Engineering Mondeca - www.mondeca.com 
bernard.vatant@mondeca.com 
