Oh, come now. 
Were the authors of that statement thinking "GET vs. any possible arbitrary verb that might every be added to HTTP" or "GET vs. POST"?! Actually it was probably "GET vs. any possible arbitrary verb that might ever be added to SOAP." 
The point is that the Web has a _single_ namespace. 
Every URI identifies one resource. 
If you put an MGET there, then you've got two resources at the same URI: "X" and "metadata about X". What if I want to refer to "metadata about X" as its own first-class resource, do I need a whole new URI scheme? 
I'm going to be hard to convince that it was the former. 
And this argument is not even applicable against MGET because with MGET documents *are* identified by URI! HTTP GET {URI} - resource HTTP MGET {URI} - description Look, if I want to say that {URI} is wrong, then I can express that {URI} full:of shit Now what if I want to say that the URI's metadata is wrong? 
If I don't have a URI for that metadata, I can't do it. 
What if I want to say that the document is authored by one person but the metadata is authored by another? 
You've said that "sometimes" the metdadata could have its own URI. 
This implies that the person owning the metadata can choose whether other people can make statements about it. 
But that's not the way the Web works. 
If the thing is on the Web, people should be able to make statements about it, whether the owner wants them to or not. 
Paul Prescod I'm tryign to keep this off of www-archive. 
I'm very serious. 
And I've not been the only one to make this point. 
It seems to me that your proposal makes SW applications second class citizens of the web since it takes twice the work to get their native content, metadata rather than representations. 
That's not true. 
It takes exactly one dereference of a URI to get the REPRESENTATION of the metadata of URI X. Sometimes, you need a previous URI dereference to know _what_ URI identifies the metadata of URI X, but heck, you very seldom care about the metadata of URI X without caring about URI X itself, so you are going to do two network transactions anyhow. 
Furthermore, there is a big problem with the MGET proposal. 
It does not provide a way for a browser to be told that there is metadata available with a particular URI. 
This implies you need a header that says "MGET-available: true". 
The URIs don't have any overhead on eth server, as the resources are virtual documents generated in response to a get in just the same way as you would generate a response to your MGET. 
Fair enough. 
But there still is the need to have some means of autogenerating those metadata denoting URIs and if one can simply not need to, that is simpler. 
This "autogeneration" is what thousands of marginally skilled CGI programmers do every day. 
Furthermore, the data that comprises the metadata lives somewhere. 
Unless we presume some complicated metadata management system, I think that that metadata will live in hand-authored text files with names (.metadata.xml) that the HTTP server knows is magic (alongside .htaccess and /index.html). 
Therefore the "autogenerated" URI is merely uri/.metadata.xml 
The quote doesn't apply to MGET! MGET denotes resources using URIs. 
The quote was about GET being perferred to POST because POST didn't specify a URI in the request. 
It's no more relevant than arguing MGET is bad because 2 out of 3 dentists recommend a toothpaste with flouride... 
You are incorrect. 
POST _does_ specify a URI in the request. 
The problem is that POST-abuses use the same URI to "tunnel" requests to various resources. 
When SOAP is used to abuse HTTP, you look at the SOAP method and one or more parameters to figure out what the "real" object is. 
Similarly, with MGET, you must look at the method to know whether the data you see going across the wire is the representation of the resource or the representation of the metadata of the resource. 
Paul Prescod [moved to www-archive because I'm sick of www-tag] And why, instead of adding a new HTTP method or header, why not simply use content-negotiation? the meta-info will have its own ETag (provided ETages are consistent in the server), its own URI. 
Even if it is automatically generated (see XMP extraction of a JPEG or whatever format). 
How would that work? 
"Accept: application/meta-html" or something? 
- sandro Thanks. 
I was about to do the same. 
And why, instead of adding a new HTTP method or header, why not simply use content-negotiation? the meta-info will have its own ETag (provided ETages are consistent in the server), its own URI. 
Even if it is automatically generated (see XMP extraction of a JPEG or whatever format). 
Exactly. 
"meta-html" is still HTML, so should be using the text/html media type. 
Conneg is for handling variability in representations, not variability in resources. 
The latter is what URIs are for. 
To Yves; Re OPTIONS, that's a good example, but it appears to me (as I've used it quite extensively), that it falls on the other side of the equation that evaluates the trade offs with respect to latency. 
In the uses I made of it, an extra round trip was a non-starter. 
Re PROPFIND/PATCH, *YES*, GET and PUT should have been used instead. 
See; MB Mark Baker. 
Ottawa, Ontario, CANADA. 
http://www.markbaker.ca 
Web architecture consulting, technical reports, evaluation &amp; analysis I use Accept: application/rdf+xml for now, even it we can't restrict semantic to a single mime type. 
(I don't want to open the issue about what mime type is _really_ ok for a resource, also ;) ) Well OPTIONS is intended to be extensible, may have a body both in request and reply (even if it is undefined right now) and is mainly about cummunication options on either the esrver or a specific resource. 
But what is communication option? 
In the light of a HTTP URI, which is to me an HTTP view of a more generic object, it is metadata of this particular HTTP view of the resource. 
Also when you get a representation of the metadata of a resource you only get a facet of it. 
How the metadata of the HTTP view and the HTTP view of the metadata of this object collide? 
If they are _clearly_ distinct, then OPTIONS has its use as being part of a subset specific only to HTTP and accessible only via HTTP means. 
Yves Lafon - W3C "Baroula que barouleras, au ti?u toujou t'entourneras." 8-) But "Accept: application/rdf+xml" says "Send me an RDF representation of this resource", which is different than "Send me an RDF representation of the metadata about this resource". 
You wouldn't expect that if "Accept: text/plain" gave you "I'm Dan's car", and "Accept: image/gif" gave you a picture of the car, that "Accept: application/rdf+xml" would give you some RDF about the metadata about the car; you'd expect RDF about *the car* (or more technically, the state of the car), such as its colour, its location, its mileage, etc.. RDF gets a bum rap as a "metadata" solution, when it's a perfectly good data solution. 
Some aspect of the protocol in use. 
They collide by not being representations of the same resource. 
For one, it makes assertions with the URI ambiguous; are they about the data or the metadata? 
(as has been discussed ad nauseum) OPTIONS isn't about resource metadata, it's about communication options, like which methods are implemented. 
It could be extended to communicate WSDL-like stuff, like the acceptable/supported data formats, or other supported protocols, protocol upgradeability, etc.. None of those have anything to do with resource metadata, AFAICT. 
MB Mark Baker. 
Ottawa, Ontario, CANADA. 
http://www.markbaker.ca 
Web architecture consulting, technical reports, evaluation &amp; analysis Well... As I said earlier, I consider that http:// points to an HTTP view of a resource, which is already a protocol view of this resource. 
So information about the methods supported are indeed part of the same set of metadata you may expect from this particular view. 
So it's not "this car" vs "the car" but what we be retreived is the particular HTTP view of this instance of a car. 
For an HTTP view, it would just be a part of the metadata of this particular view, even if it is not part of the metadata of the general resource that will be viewed through this HTTP filter. 
Yves Lafon - W3C "Baroula que barouleras, au ti?u toujou t'entourneras." 
