The problem with firstChild was due to firstChild being both a method (of TreeWalker) and an attribute (of Node), the transform didn't like that too much. 
I've also cleaned up indenting and a long term problem with the spurious /* undefined */ comments. 
Have not made the corresponding changes to test-to-ecmascript.xsl 
I removed the setNodeValue() tests that I recently added to some of the documentCreate* tests and created distinct tests (nullnodevalue01-09) that create or access each of the node types that have nodeValue permanently set to null. 
staffNS.xml was not present, so most all the test fail. 
Several of the tests create a list of responses to unrelated evaluations, append the results of the evaluations to a list and then compare the lists. 
That is undesirable since it unnecessarily complicates the tests. 
List comparisons should only be used when there is an iteration involved. 
Most of these look like they are badly formulated anyway. 
isSupported12 looks pretty weird, it appears to be testing if the parser under test supports all know DOM modules (Core, Events, HTML) and both level 1 and level 3!!!!. 
No parser in existance would pass this test. 
I did rewrite it to eliminate the nested foreach since I haven't supported nested foreach in the code generation. 
Several tests had unnecessary while statements and were depending on plus to do string concatenation. 
I simplified these by adding the concatentated string to the literals in the array members and removing the whiles. 
All the tests seemed to have spurious line feeds which I have cleaned up. 
All committed to the CVS. 
Comments inlined. 
--Mary The problem with firstChild was due to firstChild being both a method (of TreeWalker) and an attribute (of Node), the transform didn't like that too much. 
I've also cleaned up indenting and a long term problem with the spurious /* undefined */ comments. 
Have not made the corresponding changes to test-to-ecmascript.xsl [mb] Okay -- will give it a try. 
I removed the setNodeValue() tests that I recently added to some of the documentCreate* tests and created distinct tests (nullnodevalue01-09) that create or access each of the node types that have nodeValue permanently set to null. 
[mb] Good idea. 
I think in general you want to make the tests as atomic as possible. 
staffNS.xml was not present, so most all the test fail. 
[mb] Should be there now. 
Several of the tests create a list of responses to unrelated evaluations, append the results of the evaluations to a list and then compare the lists. 
That is undesirable since it unnecessarily complicates the tests. 
List comparisons should only be used when there is an iteration involved. 
Most of these look like they are badly formulated anyway. 
[mb] Would be more informative if you actually identified the tests. 
The tests have been written by a couple of different folks, and then 
translated into XML, primarily by a guest researcher who is no longer with us. 
On our side, we have to track from original source, through 
the translation to XML, and then the test suite translation. 
This is much easier if you can identify which tests you are having problems with in 
addition to the actual problem (problem definition above is okay, but which tests?) 
isSupported12 looks pretty weird, it appears to be testing if the parser under test supports all know DOM modules (Core, Events, HTML) and both level 1 and level 3!!!!. 
No parser in existance would pass this test. 
I did rewrite it to eliminate the nested foreach since I haven't supported nested foreach in the code generation. 
[mb] I agree that level 3 should not be tested, but I would suspect level 1 and 2 should be supported. 
We went back and forth with this type of test. 
One 
method would be to break it out into different combinations, supporting the atomic method of testing. 
Any thoughts on whether multiple assertions 
within a test would be better than many tests, where different combinations are tested. 
Several tests had unnecessary while statements and were depending on plus to do string concatenation. 
I simplified these by adding the concatentated string to the literals in the array members and removing the whiles. 
[mb] I'm not finding any documentation trails indicating what you changed and what you didn't. 
I thought we agreed early on that e-mail was not 
the way to track this type of info. 
Isn't there a metadata tag available for modified by? Or, perhaps better documentation when the files are committed 
to CVS -- the one comment applied to all files isn't very informative, and with so much going on, it's difficult to follow the e-mail trail. 
All the tests seemed to have spurious line feeds which I have cleaned up. 
All committed to the CVS. 
[mb] Would be more informative if you actually identified the tests. 
The tests have been written by a couple of different folks, and then 
translated into XML, primarily by a guest researcher who is no longer with us. 
On our side, we have to track from original source, through 
the translation to XML, and then the test suite translation. 
This is much easier if you can identify which tests you are having problems with in 
addition to the actual problem (problem definition above is okay, but which tests?) 
[ca] If you do a multifile search for member in your editor, you'll see all the tests that populate an collection. 
The ones where the values don't seem to have any commonality, one value "FALSE", one 
value "#document" are typically using list comparison when separate comparisons would be better. 
If you notice the time, it was getting seriously late when I got the tests to build. 
[mb] I agree that level 3 should not be tested, but I would suspect level 1 and 2 should be supported. 
We went back and forth with this type of test. 
One 
method would be to break it out into different combinations, supporting the atomic method of testing. 
Any thoughts on whether multiple assertions 
within a test would be better than many tests, where different combinations are tested. 
[ca] Unless I misunderstand the test, the whole premise is wrong. 
The only feature that an implementation needs to return true from hasFeature or isSupported is "Core". 
What isSupported("HTML","1.0") 
returns is irrelevant. 
[mb] I'm not finding any documentation trails indicating what you changed and what you didn't. 
I thought we agreed early on that e-mail was not 
the way to track this type of info. 
Isn't there a metadata tag available for modified by? Or, perhaps better documentation when the files are committed 
to CVS -- the one comment applied to all files isn't very informative, and with so much going on, it's difficult to follow the e-mail trail. 
[ca] I definitely took liberties in the bulk modifications to get the files to compile which would not be good practice after an initial build succeeds. 
I did try to preserve the intent of the original 
test. 
If you want a line by line change summary, that can obtained from the CVS and if really important to you, I can pull a copy and annotate it. 
tests have been written by a couple of different folks, and then 
us. On our side, we have to track from original source, through 
easier if you can identify which tests you are having problems with in 
which tests?) 
the tests that populate an collection. 
The ones where the values don't seem to have any commonality, one value "FALSE", one 
comparisons would be better. 
If you notice the time, it was getting seriously late when I got the tests to build. 
[mb] Yes, we are all putting in long hours getting this to work -- all the more reason for giving each other better clues for picking up where the other left off... 
1 and 2 should be supported. 
We went back and forth with this type of test. 
One 
the atomic method of testing. 
Any thoughts on whether multiple assertions 
combinations are tested. 
feature that an implementation needs to return true from hasFeature or isSupported is "Core". 
What isSupported("HTML","1.0") 
[mb] See additional e-mail for more details. 
and what you didn't. 
I thought we agreed early on that e-mail was not 
for modified by? Or, perhaps better documentation when the files are committed 
with so much going on, it's difficult to follow the e-mail trail. 
compile which would not be good practice after an initial build succeeds. 
I did try to preserve the intent of the original 
the CVS and if really important to you, I can pull a copy and annotate it. 
[mb] There shouldn't be any difference between now and after an initial build succeeds. 
There are good reasons for using CVS -- let's try to make it work for us. 
--Mary 
The problem with firstChild was due to firstChild being both a method (of TreeWalker) and an attribute (of Node), the transform didn't like that too much. 
I've also cleaned up indenting and a long term problem with the spurious /* undefined */ comments. 
Have not made the corresponding changes to test-to-ecmascript.xsl [mb] Noticed that the test-to-java has level1 specified for package and target-uri-base, but that the interfaces document was changed to dom2-interfaces.xml. 
It appears from build.xml that you defined parameters to be passed in, but then don't use them inside of the transformation. 
Did you have problems passing them in, or still to be done? 
--Mary 
