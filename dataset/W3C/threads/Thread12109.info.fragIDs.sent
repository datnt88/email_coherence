Hello all, Here are some ideas for subtext: 5.1 Ensure that all functionality (prompts, checkers, information icons, etc.) related to accessible authoring practices is naturally integrated into the overall look and feel of the tool. 
[Priority 2] This checkpoint requires developers to integrate accessibility-related functionality as seamlessly as possible. 
At minimum, the accessibility features should not stand in contrast to the normal operation of the tool. 
Accessibility features should operate with approximately the same number of mouse clicks or keystrokes, the same amount of reading, and the same degree of flexibility as the other features of the product. 
For example, if the tool includes a floating element properties toolbar that is always visible, the accessibility-related prompts should be added to this toolbar, rather than implemented as intrusive pop-up boxes. 
More advanced implementations might see more complex accessibility-related features, such as checking, integrated to the same level as analogous feature that are not related to accessibility. 
For example, if underlining or color changes are used to notify the author, while they work, of syntax and spelling errors, accessibility problems should be similarly flagged. 
5.2 Ensure that accessible authoring practices supporting Web Content Accessibility Guidelines 1.0 [WCAG10] Priority 1 checkpoints are among the most obvious and easily initiated by the author. 
[Priority 2] This checkpoint requires authoring tools to have user interfaces that increase the probability that authors will use accessible authoring practices, even when less accessible alternatives are provided by the tool for reasons of completeness. 
At minimum, when there is an accessible and a less accessible means for performing an action, the user interface of the tool should be organized so that the accessible means is more visible in the user interface and easier to activate in terms of mouse clicks and keystrokes than the less accessible means. 
More advanced solutions might purposefully impede the visibility and use of the less accessible means. 
Cheers, Jan Jan Richards Adaptive Technology Resource Centre (ATRC) University of Toronto jan.richards@utoronto.ca 
Hi all, 
I think that the first one is too long, but I am not sure how to shorten it. 
For the second one, I think that the minimum requirement is onyl that it is as easy toget to the accessible techniques for doing things, not more so. 
Otherwise, I like these and propose that we incorporate them. 
Chaals Hello all, Here are some ideas for subtext: 5.1 Ensure that all functionality (prompts, checkers, information icons, etc.) related to accessible authoring practices is naturally integrated into the overall look and feel of the tool. 
[Priority 2] This checkpoint requires developers to integrate accessibility-related functionality as seamlessly as possible. 
At minimum, the accessibility features should not stand in contrast to the normal operation of the tool. 
Accessibility features should operate with approximately the same number of mouse clicks or keystrokes, the same amount of reading, and the same degree of flexibility as the other features of the product. 
For example, if the tool includes a floating element properties toolbar that is always visible, the accessibility-related prompts should be added to this toolbar, rather than implemented as intrusive pop-up boxes. 
More advanced implementations might see more complex accessibility-related features, such as checking, integrated to the same level as analogous feature that are not related to accessibility. 
For example, if underlining or color changes are used to notify the author, while they work, of syntax and spelling errors, accessibility problems should be similarly flagged. 
5.2 Ensure that accessible authoring practices supporting Web Content Accessibility Guidelines 1.0 [WCAG10] Priority 1 checkpoints are among the most obvious and easily initiated by the author. 
[Priority 2] This checkpoint requires authoring tools to have user interfaces that increase the probability that authors will use accessible authoring practices, even when less accessible alternatives are provided by the tool for reasons of completeness. 
At minimum, when there is an accessible and a less accessible means for performing an action, the user interface of the tool should be organized so that the accessible means is more visible in the user interface and easier to activate in terms of mouse clicks and keystrokes than the less accessible means. 
More advanced solutions might purposefully impede the visibility and use of the less accessible means. 
Location: 21 Mitchell street FOOTSCRAY Vic 3011, Australia (or W3C INRIA, Route des Lucioles, BP 93, 06902 Sophia Antipolis Cedex, France) 
Revised Subtext idea for 5.1: This checkpoint requires that accessibility-related functionality be integrated as seamlessly as possible. 
At minimum, the accessibility features should not contrast with the normal operation of the tool. 
This means that they should be operable with approximately the same number of mouse clicks or keystrokes, the same amount of instruction , and the same degree of flexibility as other features. 
For example, if an element's properties are displayed in a floating toolbar, accessibility-related prompts should be added to this toolbar, not implemented as intrusive pop-up boxes. 
More advanced implementations might see accessibility features such as checking, integrated to the same level as analogous features unrelated to accessibility. 
For example, if underlining or color changes are used to notify the author, while they work, of syntax and spelling errors, accessibility problems should be similarly flagged. 
Revised Subtext idea for 5.2: This checkpoint requires authoring tools to have user interfaces that increase the probability that authors will use accessible authoring practices, even when less accessible alternatives are provided by the tool for reasons of completeness. 
At minimum, when there is an accessible and a less accessible means for performing an action, the user interface of the tool should be organized so that the accessible means is at least as visible in the user interface and at least as easy to activate in terms of mouse clicks and keystrokes than the less accessible means. 
More advanced solutions might purposefully impede the visibility and use of the less accessible means. 
Cheers, Jan Jan Richards Adaptive Technology Resource Centre (ATRC) University of Toronto jan.richards@utoronto.ca 
