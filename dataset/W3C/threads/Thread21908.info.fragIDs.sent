Would it be a good idea to combine multiple tests into one class, instead of 
using a separate class for each test? 
This would reduce the huge number of 
classes that are generated at the moment, making the test suite more manageable and improving performance as well. 
The original NIST test suite 
has 15 classes (one for each interface), which is a lot easier than the 250+ 
classes we have now. 
In tests characterdataappenddatanomodificationallowederr.xml, 
characterdatadeletedatanomodificationallowederr.xml, characterdatainsertdatanomodificationallowederr.xml, and characterdatareplacedatanomodificationallowederr.xml the tagname in the 
following statement should probably be "gender": getElementsByTagName interface="Document" obj="doc" 
For tests characterdataappenddatanomodificationallowederr.xml, characterdatadeletedatanomodificationallowederr.xml, characterdatainsertdatanomodificationallowederr.xml, characterdatareplacedatanomodificationallowederr.xml, and characterdatasetdatanomodificationallowederr.xml the comment tells that the 
third gender element should contain an entity reference, but this is not the case in the older version of the staff.xml 
document. 
In documentcreateentityreferenceknown.xml, the type of newEntRefNode should 
probably be EntityReference (instead of Element): 
Several tests seem to test equivalence of two lists where one list contains 
a String and the other contains an Integer. 
Some tests also try to assert null values of nodes with a String value of "null" in a list, maybe it's better to use assertNull. 
Since I don't have access to the cvs server (but who has ;-), could somebody fix these issues? 
- Test characterdatadeletedatagetlengthanddata.xml (fixed String/Integer, removed lists): getElementsByTagName interface="Document" obj="doc" assertEquals actual="childData" expected="1230 North Ave. 
Dallas, ignoreCase="false"/ assertEquals actual="childLength" expected="30" - Test documentcreateattribute.xml (fixed String/Integer, removed lists): ignoreCase="false"/ assertEquals actual="attrName" expected="district" - Test documentcreatecomment.xml 
(fixed String/Integer, removed lists): createComment obj="doc" var="newCommentNode" data="This is a new Comment node"/ assertEquals actual="newCommentValue" expected="This is a new Comment assertEquals actual="newCommentName" expected="#comment" - Test documentcreatedocumentfragment (fixed String/Integer, assertNull for nodeValue, removed lists): assertEquals actual="newDocFragmentName" - Test documentcreateelement (fixed String/Integer, assertNull for nodeValue, removed lists): assertEquals actual="newElementName" expected="address" - Test documentcreateentityreference (fixed String/Integer, assertNull for nodeValue, removed lists): createEntityReference obj="doc" var="newEntRefNode" ignoreCase="false"/ - Test documentcreateprocessinginstruction (fixed String/Integer, removed lists): createProcessingInstruction obj="doc" var="newPINode" target="XML" data="This is a new PI node"/ assertEquals actual="piValue" expected="This is a new PI node" ignoreCase="false"/ - Test documentcreatetextnode (fixed String/Integer, removed lists): createTextNode obj="doc" var="newTextNode" data="This is a new Text node"/ assertEquals actual="newTextValue" expected="This is a new Text assertEquals actual="newTextName" expected="#text" Freek 
of using a 
that are 
generated at the moment, making the test suite more manageable and 
improving 
have now. 
I think that we want to maintain the definition of one test == one XML document since that gives us a revision history of each test instead of a revision history of all tests for a particular interface. 
In addition, hopefully we will have tests from different sources and trying to have different authors working in the same file is just not a pleasant thing. 
The one test == one Java file/class flows out of that since it is most natural to do a case by case conversion using XSLT. 
If it class bloat is 
really a significant issue, we could address it. 
But I can't see performance being a crucial factor in running the suite as long as a run is less than a few seconds. 
following statement  should probably be "gender": Did a global change of "geneder" to "gender" 
third gender  element should contain an entity reference, but this is not the case in the older version of the  staff.xml 
document. 
I held off on this one till we can get a clarification about the resource files from NIST. 
probably be  EntityReference (instead of Element): Changed 
a String and the other  contains an Integer. 
Some tests also try to assert null values of nodes with a String value of  "null" in a list, maybe it's better to use assertNull. 
Since I don't have access to the cvs server 
(but who has ;-), could somebody fix these issues? 
Changed those you mentioned plus one more (nodeclonenodefalse). 
I did take some editoral liberty with documentcreateprocessinginstruction. 
There was a discussion on the www-dom-ts mailing list much earlier inappropriateness of testing createProcessingInstruction with a target ("XML") that is an illegal value per the XML spec. 
I have changed the target to an innocuous value "TESTPI". 
Most DOM implementations will create a PI with an "XML" target, but MSXML will reasonably raise an exception. 
Joe Kesselman's suggestion (http://lists.w3.org/Archives/Public/www-dom-ts/2001Apr/0020.html ) was to change the target and but not to add a negative test for an "XML" target until the Level 3 effort where the appropriate behavior will be prescribed. 
Many-to-one isn't all that much harder, using XSLT's document() function. 
You'd want a top-level document which said which tests were to be built 
into each class, but that's easy enough. 
I have no opinion right now re which approach is better. 
This may depend on what the surrounding test framework looks like, and what your plans are for releasing deltas as the tests improve. 
Some compilers, in some languages, have trouble with long symbol names, even when the language permits them. 
I've seen some which simply ignore any 
characters beyond the first (or last) 32. 
We may want to consider adopting a set of standard abbreviations to avoid that risk. 
" chardataappendnomoderr" would cut the length by about 50%, though I grant that it's less readable for a novice. 
(Of course, readability of those names is rather marginal anyway. 
I presume 
people have already considered camelCasedNames...?) 
Joe Kesselman / IBM Research 
But I've definitely followed the path of least resistance. 
Obviously, I would avoid lots of tiny classes in an generic Java application, but I like the current one test- one class approach from an production and organizational perspective. 
Currently, in the ECMAScript transform, I'm creating one .js 
file per test. 
I know that that would not be tolerable for deployment, so will look at some means to combine them all at the end. 
It's not that it couldn't be done, but I'm not convinced that it would be beneficial in the long term and it is not beneficial in the very short term. 
any 
presume 
Unfortunately, I had to lose the camel case names that were in the test 
definitions since the .ZIP 
file names were all lower case. 
I've only had 
nightmares trying the change the capitalization of filenames once they were 
in CVS (note the screwy capitalization in the source for domunit). 
I don't think it is essential that we try to summarize the case in the file name, we should have enough test matrixes and other navigational tools that 
test names can be more generic, like "characterdataappendnode3". 
So for future tests, I'd try to avoid the huge names. 
I definitely got tired typing "textsplittextnomodificationallowederr.xml" from the command line, though I have now committed it to muscle memory. 
On another style point, the id's on asserts within a test could also be shorter. 
It is only necessary that they uniquely identify the assert within the test, so that if a test fails, you know which assert failed and so that we can associate metadata with an arbitrary assert. 
I would recommend something short, for example, "value", "type" or "throw". 
Adding a optional shortName atttibute on the test element would allow us 
to specify a shorter name if the monster names cause problems in code production. 
were 
Actually wouldn't we prefer UpperCasedNames instead of camelCasesNames? 
If a CVS god can repair the file names (I can produce a list of the original intended names from the NIST zip file), I could readily get the content back in synch with the new file names. 
However, from my limited experience with CVS, trying to work with files that only differ in case is prone to catastrophy. 
I think the only approach that would work is renaming 
the repository files. 
I would recommend that Mary try to preserve the capitalization on their DOM 
L2 submission or we can fix it up before committing it to the CVS. 
I only realized the problem once I got to the java compile process which occurred after the files were in the CVS and a substantial amount of changes to the test sources had occurred. 
Agreed. 
The XSLT test suite we're using in Xalan uses names like "namespace05", and trusts that people will look at the testcase and/or other documentation to find out what it actually tests... 
Interesting approach. 
name Joe Kesselman / IBM Research 
Yes, I think this may be a result of running samba in a unix-w2000 environment where file systems are shared. 
I think the default may be lowercase when going between systems... --Mary 
had 
renaming 
DOM 
