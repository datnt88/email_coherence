Dan I read your web page. 
But I think your missing the real problem Its not Javasoft. 
The problem is fonts are proprietary. 
Plus there is a strong precedence for control of font readers creators and where and how they display there glyphs. 
Downloaded fonts being a big problem. 
Javasoft for convince want's to use Adobe and MS fonts that are available on each machine unfortunately they cannot allow uninhibited redistribution via java because of copyright. 
I would be extremely hesitant to build the technology that would allow trivial transmission and use of fonts with todays copyrights. 
As you know the browsers are barley able to use downloaded fonts in a crippled way. 
This is not sufficient for a real program. 
With the new "web" old style proprietary fonts are as crippling as Microsoft controlling all web browsers. 
The only answer in my opinion is to develop a new free font technology in Java. 
With "fonts" represented by serialized objects. 
The creation of a "Font" object is font file/Tool dependent but after that it is trivial to simply serialize the font objects. 
One simply has to use freely available fonts. 
Bitmap fonts are easy. 
I have not yet worked on "outline" fonts but they are also quit doable. 
You just have to come up with a serialization scheme. 
And since the object knows how to recreate itself this scheme need not be standard. 
There are tons of free fonts out there so there is nothing preventing you from creating enough to satisfy basic programing needs. 
These serialized objects can be read by "c" programs if you had too. 
Its actually fairly trivial the only real problem is in the beginning you will have to avoid all the copywrited fonts until they become irrelevant. 
Adobe won't change its copyright policy until consumers demand it. 
This is the way to break the "Font" monopoly IMHO. 
Just do it : ) Mike mike@jmaca.com 
Mike, I think *you* are missing the real problem. 
It's not proprietary technology, it's protection of intellectual property (an issue not specific to fonts, but exacerbated for fonts by the murky copyright status granted to font programs). 
Both Type 1 and TrueType, the industry standard font formats, have specifications that are public. 
Type 1 has even achieved ISO "PAS" (Publicly Available Specification) status - i.e., it's further along the standardization road than Java. 
There is an ongoing effort to unify and further standardize these formats, with enabling Web typography an important goal, see: OpenType (Type 1 and TrueType) are as "free" as anything gets in this industry - i.e., you can create and/or interpret a font object without owing anyone money. 
This is not true of all font solutions (e.g. Bitstream's TrueDoc) but it means that adding yet another font format (YAFF) based on serialized Java bytecodes wouldn't improve anything for the industry - in fact, it would make things worse, given that we're trying to make things simpler by unifying the existing formats. 
Conversely, a new Java-based format as per your proposal wouldn't solve the *real* IP issue for fonts - protection of property. 
This is the same issue for all web-based intellectual property, and I believe will be solved via a uniform crypto mechanism. 
OpenType and the W3C font work puts in place a framework to enable IP protection - this doesn't by itself solve the problem, but neither would a Java format. 
--Bill P.S. IMHO if the industry *did* need yet another font format there would be strong motivation to make it XML based not Java... 
Why is it murky. 
I believe computer fonts have been around for at least 20-30 years. 
That's a long time to not have the law clarified. 
I would think Adobe would /could push Congress for a standard set of laws. 
I would have done it during Reagan's second term : ) If the laws are still murky this is due to some failing on Adobe , Sun, Apple, Microsoft, IBM etc. 
There is no reason the computer industry could not get congress to pass well understood laws for computer fonts. 
The fact that this has not happened long ago reflects on the computer industry. 
It should have been before I was born (1968) If man made to the moon by then you would think he would have also been able to solve *murky* copyright problems in a multi-billion dollar industry. 
I won't say any more on that topic. 
I have a implementation in C called freetype they reported some problems with doing a clean room implementation based on the standard. 
Except for backwards compatibility there is no reason for a java specific standard to follow such a format. 
Java object serialization allows the programmer to control the format of the serialized object It could be in any standard format or XML all that is required is that both parties have the classes for deserilization. 
I see no reason what the standard serialization mechanism to a [encrypted] zip output stream is not sufficient for a java specific font format. 
Other "standard" formats would simply be options. 
To me the whole concept of standard file formats make little or no sense in java. 
There a relic of c programming. 
And c relic in another area. 
In my main work server programing I use only RMI and socket based protocol's are relegated to backward compatibility modules. 
In a distributed object model they no longer make any sense. 
Java standards are at the class/interface level. 
Rather than copy his entire message, let me paraphrase the case that Mike made in his message. 
Mike, you can correct anything I get wrong. 
Mike's premise is that using Type 1 or TrueType fonts in Java is a bad thing because they are proprietary (copyrighted or patented by various font foundries). 
Mike concludes that this makes uninhibited distribution impossible. 
There seems to be a hidden implication that this also makes them expensive. 
Specifically, Mike rails against Adobe, its pricing, and its protection of its intellectual property. 
In my work at the printer divisions of Hewlett-Packard, I've been involved with type, and type distribution for years. 
I've learned several lessons about type and the type industry. 
For one, good type takes a great deal of time and effort to develop. 
Companies charge what they do because they have to recover their development costs in a ('gasp') profitable manner. 
Nobody that I know of is getting rich off of the sales of type. 
The margins can be surprisingly low. 
I will concede that Adobe's pricing is higher than most others, but I have to say that their quality is second to none, and that many of the fonts are unique and innovative. 
[I also rankle at Adobe's prices, but one does pay more for a Mercedes than a Huyndai]. 
Anyone can produce a TrueType or Type 1 font using relatively inexpensive font tools. 
Most fonts designed for font companies start out being designed using a relatively inexpensive tool called Fontographer. 
Fontographer produces good fonts. 
Font companies go further in that they extensively test the fonts, and hand tune the hinting to produce a superior product. 
There is nothing terribly wrong with the TrueType or Type 1 font formats. 
They have their differences, advantages and disadvantages, but both produce good font output. 
Both formats have wide support on the most popular computing platforms. 
Font rasterizing engines that can handle bitmaps, TrueType and Type 1 are available. 
Sun can license its choice for unlimited distribution with Java. 
Sun can also license a set of default fonts for unlimited distribution (or pay to have a set designed, but why reinvint the wheel)? 
As to the creating of a serializable font object; it sounds good to me. 
I see no advantage in not designing the font object to support both TrueType and Type 1 formats. 
I also fail to see much advantage in having it support a new propriatary format for rich there are no design tools, and no existing set of fonts. 
So, I've argued that there is nothing inhertly wrong with the TrueType or Type 1 font formats. 
In fact, they have the advantage of being natively supported on many computing platforms. 
Secondly, that Sun can aquire a font engine and TrueType and Type 1 fonts for free distribution at a reasonalbe cost to them. 
Third, anyone can produce their own TrueType or Type 1 fonts for relatively low cost. 
And fourth, that a new font format would require the development of production tools, and would have few fonts unless there was a financial reason for people to create them. 
Mike, if you still think that a new font format is a good idea, I suggest that you spend some time in understanding why font formats, such as, TEX, Hershey and TrueType GX didn't catch on. 
Carl Peterson Well, TrueType GX didn't catch on because GX itself didn't -- that's not a font issue, it's a system software issue. 
But that's neither here nor there... ;) Michael Emmel wrote at 09/02/98 7:09 pm It's murky because of US copyright laws, and because the US Copyright Office chose to make conflicting and confusing policy statements about the copyright status of font programs. 
However, Adobe has just pursued a case through the courts, which it emerged from victorious. 
Precedent has now been set that font programs are now offered the same protection as any other software. 
You can find the judgement in this case at: My understanding is this decision is binding on any other US court until or unless it is appealed against successfully. 
Typeface design is covered by design patent in the US, font programs and type designs are covered by copyright elsewhere. 
-- Clive No I rail agianst the font's industry protection of the "pencil" Modern computers require a decent set of fonts for operation. 
They also require a font rendering engine. 
I dont care about specialty fonts just for example Courier Roman Helvitica etc The 10 - 12 fonts that are used in 99% of computer applications. 
Plus a basic rendering engine. 
I'm talking about a few fonts for the poor Linux user. 
Every man has the right to ten fonts : ) Because there is no free wheel . 
Umm not the ones I'm intrested in mainly because I'm writing the platform.Javux 
: ) You are not working on writing a font rendering engine I am. 
I have asked bitstream and am working on adobe to see if they are willing to release a basic java font rendering engine so far no go. 
So I have to reinvent the wheel. 
Why should I follow the standards ?? What you failed to understand is that Java does not require a "standard" font file format the standardization is done at the class/interface level. 
YOU DONT NEED OPENTYPE, TYPE 1, TRUETYPE, ETC FILE FORMATS!!!!! whew : ( If you wish to serialize classes the you must have the same classes to create new instances. 
The file format does not matter. 
It can acutally be the "standard" ones if required. 
I have no plans to write a Opentype font handler too much work but it is trival for me to serialize objects created from and opentype file or ANY font file. 
Give me a week with the sources to the renderer and the font files. 
These serialized objects represent a real cross platform format for saving fonts in java IMH0. 
Any idiot (me ) could do it. 
With about 5 lines of code. 
I don't need to distribute or understand any other format. 
If it becomes popular then any java enabled font engine can trivally support the format they dont even have to write "any" code just use the same classes. 
I am quite willing to give up the "standard" file formats and become simply java dependent. 
Mike mike@jmaca.com 
Michael Emmel wrote at 09/02/98 9:40 pm The "type" industry doesn't protect the pencil, that's a process enshrined in copyright and/or patent law, if you mean they protect their designs. 
You're free to design whatever you like, as long as you don't copy something that belongs to someone else. 
Just like any other form of intellectual property. 
I think you're saying you just want this for basic fonts, yes? 
I think pretty much every OS that can display fonts has it's own core set, so what do you think you'll achieve by putting that set into another format? 
-- Clive If you are writing a platform with that attitude, I'm not sure whether I'm looking forward to it. 
Louder, louder! 
Of course you don't *need* those. 
It's just that: - it's very hard to write a good font scaler - it's very hard to define your font format so that it is going to be efficient (compact) - it's very hard to make fonts for any new format (ie. 
writing a font editor is hard too) - it's not going to change anything regarding the "Freedom for Fonts" Other than that, Java implementations of TT and T1 scalers should be interesting. 
A new java based font system should be *very* interesting since you could make fonts do things that other fonts can't(tm). 
I just hope it will be implemented by someone who can spell Helvetica. 
Just new email address: just@letterror.com 
