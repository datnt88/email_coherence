DH -----BEGIN PGP SIGNED MESSAGE----- It would also be worth noting and/or commenting on this draft: DH Yuch. 
This is overcomplicated and not sufficiently useful to justify the DH risk of security flaws in parsing regular expressions. 
There's a good DH case for supporting a simple "# line-number " syntax for text/plain, but DH nothing more IMHO. 
Depends what you want it for. 
For Ted Nelson-style standoff markup, you would need character addressing and ranges, too. 
Matching on text patterns is handy to make more robust links if the document is being edited (and would be even more handy if combinations, such as "the seven lines after 'Non-ASCII Characters in Regular Expressions'" were possible) (although, there are still problems if a revision takes that to eight lines, or a 'page break' intervenes as here). 
The draft does usefully distinguish between characters and bytes, and counts the former, minus (normalized) line endings,and wisely stays away from attempting to count words, sentences, or paragraphs (though the latter would be tractable). 
There are some unresolved questions of detail - what does #char(6) point to in the text file containing "Hi World" encoded in UTF-16, for example - "o" or "W" (is the BOM two characters, or a thing before the first character). 
It also distinguishes between point and range references, which is vital (particularly since fragments in HTML and, less commonly, in XML are often incorrectly assumed to be point references. 
It might be worth mentioning that the encoding of the text in a match string might well be different to the encoding of the text document containing the string to be matched. 
The pointer to the (recently expired but still there) was valuable. 
text-scheme = ( char-scheme / line-scheme / regex-scheme ) should presumably be text-scheme = ( char-scheme / line-scheme / match-scheme ) I thought the draft a little cautious regarding IRI although given the content of perhaps this is wise. 
I hope that gets republished soon. 
For non-normative reference to BRE, the following might be useful: An Introduction to Posix Regexps Regular Expressions The latter includes a BRE grammar. 
Chris mailto:chris@w3.org 
CL I thought the draft a little cautious regarding IRI although given the CL content of CL http://www.ietf.org/internet-drafts/draft-masinter-url-i18n-09.txt 
CL perhaps this is wise. 
I hope that CL http://www.w3.org/International/2001/draft-masinter-url-i18n-08.txt 
CL gets republished soon. 
The reason that -09 is expired is that the authorship changed. 
The most current draft is thus draft-duerst-iri-01.txt "available at, for example", Chris mailto:chris@w3.org 
hi there. 
sure there is a trade-off between simplicity and complexity. 
and fragment identifiers can always break. 
so why bother? 
i am nor sure that the regex stuff is necessary, but it would be nice to have in some cases, and this is why i included it in the draft. 
unfortunately, people are so busy doing all kinds of xml-stuff, so the feedback so far has been minimal. 
most people seem to like the regex approach. 
thanks! 
good point. 
applications must be able to transcode characters. 
however, i have received feedback that the parentheses-syntax is too complicated and should be replaced with a more ascii-ish syntax such as #char=2-4;char=7-3335, and i kind of liked the idea. 
i have no idea where the borden draft ist going, but i think that it will disappear. 
does anybody have news about this? 
yup. 
thanks. 
so, apart from the minor fixes, does anybody have an opinion about the prantheses vs. equals syntax issue? 
i also thought about adding a checksum facility (md5 or something along these lines), so that fragment identifiers could recognize a particular version of a resource. 
any opinions about this feature (it would be optional, so that applications would be allowed to ignore the checksum)? 
cheers, computer engineering and networks laboratory swiss federal institute of technology (eth) * try not. 
do, or do not. 
there is no try. 
* [ trimmed distribution ] my .02 - Equals syntax is more URI-ish; it's easier to write a parser for correctly, and it's more likely that current code can be reused. 
The fragment identifier doesn't seem like a good place to put this functionality, IMHO. 
If people want to version their docs, they should have different URIs for them. 
well, writing parsers for both syntaxes is not too hard. 
so it is more a question of policy (good old syntax or fashionable new schemes) and personal taste. 
i would object to that. 
one of the most important use cases for fragment identifiers is creating them for documents over which i do not have control, so i cannot mandate a way of how versioning of the resource should be done. 
but maybe i still would like to have some robustness built into my fragment identifiers, and a checksum would be ideal for that. 
cheers, computer engineering and networks laboratory swiss federal institute of technology (eth) * try not. 
do, or do not. 
there is no try. 
* Is there any chance of defining what #name syntax might mean for text/plain? 
Or defining a text/plain fragment identifier such that text/plain and application/xhtml alternative content could share fragments? 
Search for first occurrence of 'label:' or '\n [0-9.A-Za-z]*\ ' + label hello. 
having a #name syntax would certainly be a nice thing, but in my opinion there is no evidence that there is a pattern that could be reliably searched for that clearly dominates other patterns. 
i would therefore rather omit the #name syntax, but if consensus can be reached which pattern should be used, then i have no problem with integrating it into the draft. 
cheers, computer engineering and networks laboratory swiss federal institute of technology (eth) * try not. 
do, or do not. 
there is no try. 
* 
