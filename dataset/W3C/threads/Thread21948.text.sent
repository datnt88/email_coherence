I've updated the schema generating transform formerly known as dom2xsd.xsl 
(now dom-to-xsd.xsl to avoid confusion with DOM Level 2). 
The files available are: Schema in October 2000 Schema The significant changes are: 1. W3C Software License assertion Just to make it legal. 
Declaration of Curt Arnold Curt Arnold hereby grants to the W3C, a perpetual, nonexclusive, royalty-free, world-wide right and license under any Curt Arnold copyrights in this contribution to copy, publish and distribute the contribution, as well as a right and license of the same scope to any derivative works prepared by the W3C and based on, or incorporating all or part of the contribution. 
Curt Arnold further agrees that any derivative works of this contribution prepared by the W3C shall be solely owned by the W3C. 2. Dynamically generated namespace The previous schemas have all had a namespace starting with http://xmlconf.sourceforge.net. 
I now generate the namespace by appending "#test-definition" to the name of the spec. 
For example, http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001#test-definition is the namespace generated from the DOM Level 1 spec. 
Definitely open for suggestions on the proper form of the namespace URI. 
It is required to manually remove an underscore ( _ ) from the _xmlns attribute in the generated xsd:schema element since XSLT 1.0 doesn't provide a mechanism for introducing an arbitrary namespace into the target document. 
3. Dublin Core-esque metadata elements I've added into the test namespace elements title , creator , subject , description , contributor , date , source , and relation that are strongly patterned after Dublin Core elements (http://www.dublincore.org/documents/dces/) 
expressed in RDF. 
These would not be recognized by an RDF processor, but it should be very easy to extract Dublin Core metadata when desired. 
Hopefully, it mostly self-explanatory. 
Most elements have optional resource and type attributes that are absolute URI's. 
The resource URI can provide an unambiguous identifier to the creator, source, etc. type could be used to distinguish, for example, between individual and corporate contributors. 
The element content can be a label for the resource (such as the name of the person). 
source is a base work, so for example, the NIST submitted tests could identify the prior NIST tests by some URI schema. 
subject could identify a specific point in a DOM spec that the test addresses. 
One of my next tasks is to create a transform to create a catalog of URI's for subjects (aka purposes) So for example, a test could look like this: 4. Conformance to the XML Schema recommendation The generated schema now conforms to the XML Schema recommendation instead of the Oct 2000 draft. 
However, all that is necessary to use the schema with Oct 2000 tools is to change the namespace declaration and to replace occurences of xsd:anyURI with xsd:uriReference 5. www-dom-ts module in http://xmlconf.sourceforge.net 
CVS I've created a www-dom-ts module within the xmlconf CVS for www-dom-ts related work. 
I'll be adding more things to that module as I clean things up. 
a couple of remarks regarding the schema declare: A declare element has an optional interface attribute, I guess this should be mandatory dom methods: Every dom method has an optional interface attribute. 
Variables are already declared and have therefore already a type. 
The interface attribute is redundant here. 
A stylesheet can easily pick up the type from the declare element. 
method parameters. 
Methods parameters are currently passed through named attributes of a "method" element. 
I might be incorrect but it seems to that you than need to specify every method in the xml2java stylesheet. 
If this can be automated than it's fine with me, If we on the otherhand need to code every method by hand in this stylesheet than I suggest something like: In such a setup we can create the stylesheet easily for every method. 
Jeroen Jeroen van Rotterdam jeroen@x-hive.com 
I've updated the schema generating transform formerly known as dom2xsd.xsl 
(now dom-to-xsd.xsl to avoid confusion with DOM Level 2). 
The files available are: Schema in October 2000 Schema The significant changes are: 1. W3C Software License assertion Just to make it legal. 
Declaration of Curt Arnold Curt Arnold hereby grants to the W3C, a perpetual, nonexclusive, royalty-free, world-wide right and license under any Curt Arnold copyrights in this contribution to copy, publish and distribute the contribution, as well as a right and license of the same scope to any derivative works prepared by the W3C and based on, or incorporating all or part of the contribution. 
Curt Arnold further agrees that any derivative works of this contribution prepared by the W3C shall be solely owned by the W3C. 2. Dynamically generated namespace The previous schemas have all had a namespace starting with http://xmlconf.sourceforge.net. 
I now generate the namespace by appending "#test-definition" to the name of the spec. 
For example, http://www.w3.org/TR/1998/REC-DOM-Level-1-19981001#test-definition is the namespace generated from the DOM Level 1 spec. 
Definitely open for suggestions on the proper form of the namespace URI. 
It is required to manually remove an underscore ( _ ) from the _xmlns attribute in the generated xsd:schema element since XSLT 1.0 doesn't provide a mechanism for introducing an arbitrary namespace into the target document. 
3. Dublin Core-esque metadata elements I've added into the test namespace elements title , creator , subject , description , contributor , date , source , and relation that are strongly patterned after Dublin Core elements (http://www.dublincore.org/documents/dces/) 
expressed in RDF. 
These would not be recognized by an RDF processor, but it should be very easy to extract Dublin Core metadata when desired. 
Hopefully, it mostly self-explanatory. 
Most elements have optional resource and type attributes that are absolute URI's. 
The resource URI can provide an unambiguous identifier to the creator, source, etc. type could be used to distinguish, for example, between individual and corporate contributors. 
The element content can be a label for the resource (such as the name of the person). 
source is a base work, so for example, the NIST submitted tests could identify the prior NIST tests by some URI schema. 
subject could identify a specific point in a DOM spec that the test addresses. 
One of my next tasks is to create a transform to create a catalog of URI's for subjects (aka purposes) So for example, a test could look like this: 4. Conformance to the XML Schema recommendation The generated schema now conforms to the XML Schema recommendation instead of the Oct 2000 draft. 
However, all that is necessary to use the schema with Oct 2000 tools is to change the namespace declaration and to replace occurences of xsd:anyURI with xsd:uriReference 5. www-dom-ts module in http://xmlconf.sourceforge.net 
CVS I've created a www-dom-ts module within the xmlconf CVS for www-dom-ts related work. 
I'll be adding more things to that module as I clean things up. 
In an earlier version, I had used the declare element to indicate a variable declaration. 
However, later I realized that this conflicted with the element generated for the declare attribute of the HTMLObjectElement interface. 
Subsequent schemas have used var for variable declaration and the type attribute is required. 
The interface attribute is unnecessary (and optional) for the vast majority of methods and properties. 
The only time it is required is when the same method or property is independently introduced in multiple interfaces, for example, Event.target and ProcessingInstruction.target or ProcessingInstruction.data and CharacterData.data. 
In these cases, the interface attribute allows you to disambiguate between the two forms, which in this case have substantially different signatures. 
You can't depend on the type of obj since casts are automatically generated by the transform and if the obj type is Node and the property was data, you couldn't determine if ProcessingInstruction.data or CharacterData.data was intended. 
I produced an optional interface attribute for instances where you are writing a test for a particular DOM level but you anticipate that there might be a name conflict in a later DOM level. 
That is you could do: However, if allowing that future-proofing is confusing it can easily be removed from the schema generator. 
It is only necessary to introduce explicit templates for the language constructs like if , for-while , etc. DOM methods and properties are generated by generic templates that compare the element in the test with the interface definitions in the DOM spec and properly generate the appropriate code. 
ok I understand that but the obj attribute refers to a "var" element that contains the type information. 
You therefore don't need to add the optional interface attribute. 
In the example given: eventTarget = evt.target(); 
-- you know evt is of type "Event" targetStr = pi.target(); -- you know pi is of type ProcessingInstruction I guess you can, the cast can be retrieved from the "var" ELEMENT specified in the "var" ATTRIBUTE from the method element NOT the "obj" attribute from the method. 
So: Has every info you need to do: String eventTarget; Event evt; eventTarget = (String)evt.target(); 
Without the optional interface attribute. 
Is there an updated xml2java.xsl 
? 
I'd like to see this. 
Regards, Jeroen 
