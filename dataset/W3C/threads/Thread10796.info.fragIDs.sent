If the defined method of resolution is "resolve as URNs", which various systems may do variously but with the same results (unless some succeed and some fail), does that suffice for you? 
For me it doesn't, because (1) an FPI isn't (last time a checked) a full valid URN (e.g. lacks the urn: prefix) 
(2) you can use URNs in the SYSTEM identifiers if you like. 
There is obviously a lot of emotional attachment to formal public identifiers. 
In some cases perhaps it's because people think that resolving an FPI always 
gets you the same data, It doesn't. 
There isn't even a resolution mechanism 
defined apart from Write a letter to ISO or the GCA. 
The CATALOG mechanism 
only helps you tie together an FPI and some data once you have already used some other mechanism to fetch the data -- e.g. typed it in probably mostly OK from the SGML Handbook or the Annex or the JoanSmithPinkThing. 
It is true that a way to refer to commonly available files (DTDs, entity sets, the SunSoft logo :-), notation definitions perhaps) in a way that would allow a lookaside cache is useful. 
We include a number of common entity sets and DTDs with SoftQuad Panorama, so that if you put something on the web with one of those DTDs, the user doesn't need to download it... and the software knows that. 
That's useful for SGML and Panorama. 
Would it be useful for XML? 
If so, we need to consider a mechanism to do that in XML. 
It could be with FPIs. 
It could be with URNs. 
It could be something entirely different. 
First we have to understand what we are trying to achieve,and only then consider how to do it. 
Other people use FPIs as a kind of indirection, so that filenames are not wired in, e.g. in case the installation in VOL4 EUROPE SGML SW.DIR;3 (Is that a valid PR1MOS networth path?) is moved. 
This is a different purpose, and although the same mechanism might solve both needs, it might also be appropriate to use two mechanisms. 
It's done in C, for example, with a file inclusion path: #include stdio.h 
looks in a per-installation standard place (or places) for the file "stdio.h"; 
you can add more directories to the list, e.g. with -I on most C compilers, or in a dialogue box for preferences on some systems. 
#include "stdio.h" 
looks (by default) in the same place as the file containing that line, like a relative/partial URL. 
I am not here proposing C's semantics (or syntax!) for XML, but only pointing out that there are other mechanisms. 
We have focussed in very closely on FPIs, but I don't think we've talked enough about what problems we are trying to solve. 
For those of you who think it's a fought-and-won battle, I can only say that there mere fact that everyone didn't immediately say yes indicates that this isn't so. 
Hence, I suggest that we need the following: * a list of required functionality 
* discussion of possible approaches to providing that functionality 
* final choice of mechanism(s) 
* discussion on syntax, if needed 
* final shoice of syntax 
Lee 
If the defined method of resolution is "resolve as URNs", which various systems may do variously but with the same results (unless some succeed and some fail), does that suffice for you? 
Correction: use URN resolution in conjunction with the URN FPI grandfathering rules. 
Now objection 1 is moot. 
I don't think that this is true -- if it is true, we've got at least a start on something resonable: we just need to get the URN people moving on a namespace ID for FPIs, and we can use FPIs. 
However, and this is pretty important: we lose tha bility to have an FPI _and_ a URL. 
So by insisting on inappropriate resolution stategies, we make FPIs harder to use for those already using them, and more likely to break the software of those not using them. 
Seems like a lose-lose proposition, unless we allow multiple URIs in the SYSTEM id. 
There's a lot more than emotional attachment, but unfortunately some people just have a glitch about names: they don't understand resolution-protocol independent resolution. 
Looking something up in a book or writing a letter are _valid_, _useful_, perhaps even _necessary_ resolution methods, just as is the use of some TCP/IP protocol. 
FPIs do always get you the same data, if they are used correctly. 
That's the definition of them, and the contract, that you commit to when you assign an FPI. 
As you say. 
This is the point -- the resolution method you use in unique, but that's OK, because a name is a name is a name is a name. 
No, we can consider whether FPIs, which are good on their own merits, support this mechanism. 
And, surprise! 
-- they do. 
This is one perfectly valid way to use FPIs. 
FPIs are a social discipline for naming, independent of mechanisms. 
Your "c" syntax is also an acceptable mechanism for FPIs. 
FPIS are _NOT_ about mechanism. 
Persistent, globally-unique, resolution mechanism-independent identifiers for internet resources, for use in XML documents. 
It shows that some people don't understand the difference between names and locations, nothing more. 
Read the URN group logs. 
There is no solution to this argument, either you agree to let the "namers" have their "harmless games" or they lose capabilities that they depend on and you don't believe in. 
I'm sorry, but there's not much more to it, once we have agreed to forswear philosophy. 
Persistent, globally-unique, resolution mechanism-independent identifiers for internet resources, for use in XML documents. 
A way to assign strings to resources that will not be reused to identify other resources, in the next 500 years (assuming the continuance of people who care about such things). 
Why not FPIs? they meet the reqwuirements, and are already part of SGML (and soon to be part of the URN facilities) 
hierarchical authority-based name assignment (like FPIs) is the easiest name-assignment discipline to implement. 
Why not FPIs, they already exist, and are compatible, etc.?? -- David, who cannot believe he is having this same discussion again. 
I am not a number. 
I am an undefined character. 
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://dynamicDiagrams.com/ MAPA: mapping for the WWW \__________________________ 
Hear hear! 
[lee@sq.com] 
A mechanism is required for authors to create system- and 
location-independent specification of entities. 
Users of system- and location-independent identifiers can create read-only XML files with entities whose resolution can be specified (or modified) outside of the XML file. 
Allow users to specify a system-independent identifier either in conjunction with, or in place of, a system-dependent identifier. 
Where an entity is defined by both a system-independent identifier and a system-dependent identifer, an attempt is first made to satisfy the system-independent identifier, and when that is not successful, an attempt is then made to satisfy the system-dependent identifier. 
(This behaviour is implied in SGML Clause 10.1.6 "The system identifier can be omitted if the system can generate it from the public identifier and/or other information available to it"). 
Not my place to decide; I vote for the above. 
Coming in another post (real soon now!). 
Not my place to decide; I vote for my pending straw man (modified, as required, by those more practiced in XML functional specification than me). 
......... Ken Microstar Software Ltd. WATS: 1 800 267-9975 /\ /\ Aided 3775 Richmond Road Mail: gkholman@microstar.com 
\/ \/ Document Nepean Ontario Info: cade@microstar.com 
/\ /\ Engineering CANADA K2H-5B7 Web: http://www.microstar.com 
\/ \/ Kars, Ontario CANADA K0A-2E0 E-mail: gkholman@CanadaMail.com -----BEGIN PGP PUBLIC KEY BLOCK----- Version: 2.6 mQCNAjHOimAAAAEEAK47HbDtZZB8hJBk+r9Zh7m7QxdFHTaz/m200QQ7J9XX4QYs h6hsuP6ZqBJXyLdmIVMEwR6Ry6oxjKMd6BRJ8OGScD89eIghgbrpMX+900NxM0x2 v3yWO9ki2gKRPrn4vlCXznnmcmsyke0G02T2LefXbgZHyVSqDSOLy8nwuN7dAAUR tClHLiBLZW4gSG9sbWFuIDxhYjk0NUBmcmVlbmV0LmNhcmxldG9uLmNhPg== =IN3T -----END PGP PUBLIC KEY BLOCK----- 
If the defined method of resolution is "resolve as URNs", which various systems may do variously but with the same results (unless some succeed and some fail), does that suffice for you? 
This isn't a problem. 
Just prepend urn:fpi: to the front. 
We may want to consider how we are going to address *full* urn:'s in the future, though. 
We should reserve an urn: prefix in the PublicID syntax now. 
We've discussed the downside of this already. 
* First, the spec. 
doesn't allow it. 
* Second, if we change "URL" to "URI" then we have no transition mechanism. 
We must wait until our readers all have name-enabled browsers to use them *at all*. 
* Third, all of our name-enabled SGML tools break, for no good reason. 
No. There is a lot of technical attachment to names, and FPIs are a naming mechanism that work, that we can continue to use with only a small change to the standard. 
We are just asking you not to break our working systems because you haven't personally found a need for a feature. 
**WHO CARES?** 
There isn't a well defined resolution mechanism for "Lee Quin" but I find it useful to refer to you anyways. 
Only I want is the *right* to name things in addition to pointing to them. 
Why not? 
Have we come to the end of DTDs? or entity sets? 
As David said: "Persistent, globally-unique, resolution mechanism-independent identifiers for internet resources, for use in XML documents." 
Okay. 
I have 10 000 students around the world. 
We all have the same DTD. 
We all have a common set of entities defined. 
We may be using common XML software, we may not be. 
I need a way to send them XML documents that refer to those DTDs and entities in a way that is not dependant on the network, because they will use it off of the network. 
FPIs solve this problem. 
URLs *cannot*, because I cannot know where on their machine their DTDs and entities are. 
I also cannot require them to edit a text file (either a catalog file or a .sgm) to fix it. 
This is a real problem I have (100 students, not 10 000). 
Let's say, instead, that we are on an Intranet. 
FPIs are stored in a relational database and translated to URLs by the database. 
URLs cannot work, because they are not names, and are bound to particular network protocols. 
David has provided that. 
"Persistent, globally-unique, resolution mechanism-independent identifiers for internet resources, for use in XML documents." 
I think we've already discussed three: "URL or URN, pick one", "as many URLs or URNs as you want" and "FPIs and URLs". 
URLs are not persistent, or resolution mechanism independent. 
Paul Prescod 
Correct. 
Another way to say it is, naming depends on policy for process and enforcement of process. 
That is, play by the rules, it works. 
Else, results are error or undefined. 
Hmm, and other sources. 
The local disk is where most action takes place. 
However, should the XML system know the difference? 
NOTE, as soon as we start talking system, we are talking mechanism, and resolution mechanisms are always, system. 
A good aspect of the HyTime work on locators was in classifying the types of resolvers by the information they need. 
Quite so. 
Besides, those "harmless games" are the way they organize indexes. 
Reference designators are spatially organized "names" (morphologies), but if you take them away, the airplane falls out of the sky because they are used to locate parts/components, and the writers are trained to apply them. 
So game or no, everyone plays. 
And best matches the way humans work. 
Remember them? 
It is had every time someone sits down to organize or design a hypermedia language. 
It is fundamental. 
(I think I learned that from a book with your name on it, David.) The reason is, James Clark says it is too hard to implement. 
Given this discussion, does he still hold to that opinion as technical lead of the ERB which must draft language and vote on this? 
We need to get to independent links and locator types. 
The work I do in technical manuals suggests to me we need these badly and will implement them anyway in some form because they make it much simpler to express and maintain relationships external to the document about the use of a multimedia aggregate. 
We have to talk about HyTime: The Concepts. 
Regardless of the IETF drafts, that is the ISO standard for linking and locating. 
I don't say we have to accept it as is, but at this juncture we have to talk about it. 
len bullard 
This is a plea for: Persistent, globally-unique, resolution mechanism-independent identifiers for internet resources, for use in XML documents. 
(Thank you David) --Debbie 6010 Executive Blvd. 
Suite 608 E-mail: dlapeyre@mulberrytech.com 
Rockville, MD USA 20852 
