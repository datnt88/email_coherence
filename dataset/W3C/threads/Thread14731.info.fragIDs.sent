In checkpoint 1.3 we refer to data models. 
What exactly do we mean by this? 
My guess is we mean "any method by which structure is defined other than markup." 
So "data model" is a catch-all, or, as I mentioned in the telecon, an "equivalent." 
We could use "equivalent" instead: 1. the hierarchical structure of the content is unambiguously represented in the markup or equivalent. 
But that's a bit too general for my taste. 
So do we have any examples of instances where structure is encoded in something other than markup? 
One obvious one (to me) is when content is stored in a database. 
Some user agents might be able to pull this content out without any associated markup. 
In this instance, the data model of the database would provide the structure for the data. 
But this is a long way off from what we think of when we talk about structure in a Web page. 
What about content in XML? 
If I am creating not only the content, but an XML-based grammar for markup, then it is important that my XML-based grammar reflect the structure inherent in the content. 
So am I referring to a schema when I say "data model"? 
Schema can also be used WRT databases. 
If the above example were written: 1. the hierarchical structure of the content is unambiguously represented in the markup or schema. 
Would this better reflect what we're trying to say? 
Is it possible to encode content structure into a script? 
How would this be 
addressed? 
I like data model because I have a pretty good feel for what we mean (though I obviously can't articulate it). 
But I doubt that others are going to have the same feel for it. 
We need something a bit clearer. 
Thoughts anyone? 
Chas. Munat 
PDF is such an example. 
The structure is encoded in the logical structure tree, an internal data structure in the PDF file. 
Loretta 
So should we use "data structure" instead of "data model"? 
Thus: 1. the hierarchical structure of the content is represented unambiguously in the markup or data structure. 
Or is this redundant? 
It seems to me that what we are getting at here is this: 1. 
The content has some intrinsic structure to it. 
2. This structure must be reflected in the structure applied to it, either through markup or some other process. 
So in the example above, "the hierarchicial structure of the content" refers to the intrinsic structure of the content, and "the markup or data model/structure" refers to a structure imposed on the content from outside. 
And we are saying that these must match. 
Am I getting warmer? 
Chas. 
Munat 
The PF working group has been giving this a lot of thought and is on the verge of asking you all to look at what we have come up with. 
But don't get your hopes up too far. 
We don't get much more precise than saying 'data model.' 
For example, we went around long and hard on little-s schemas vs. captal-S Schema, the latter being XML Schema from W3C. 
It turns out that different schema languages can be better for different things, and the simplicity of schemata that one can write in TREX, for example, may be critical for assitive applications. 
So we backed off from saying "use W3C brand schemas" at least for now. 
Not that many people shouldn't use the W3C language, but there is insufficient cause to say conclusively that Schema should be used _exclusively_ to schematize XML applications. 
Enough technical drivel. 
Please review and discuss with PF (there will be a public discussion mechanism) the XML Guidelines that are about to be floated for wider comment before going down this path. 
A data model as used here, is a more formal meaning than "markup or equivalent" even though markup _is_ used to bind content into a data model. 
But there is some resizual fuzziness [not a 100% crisp and unique formal sense to 'data model' as used here] because different ways of composing or recording such a data model have [formally recognizable] different characteristics and capabilities. 
But 'data model' as used here means some way of defining structural and categorical generics, categories and structures that one can use to classify and organize their web content. 
To be effective, these purported generic qualities do have to be bound somehow to the specifics of your content, and in ways that user agents [both mainstream and as augmented with assistive technology] can key off to implement graceful transformation. 
But that's what the XMLGL is all about. 
Read it and let's think about where to go next. 
[coming soon to a website near you...] Al what you document in a schema. 
The model is a grammar that generates data structures as instances of that model. 
The web is a graph of resources connected by URI-references embedded in the resources. 
The model only knows from resources, URIs and URI-references. 
The structure is all the growing expanse of site-full Internet. 
Not the same thing. 
And if you look carefully at Gregory's proposed changes to 1.5, you will see the same distinction. 
The model means you can recognize structure in the data. 
A data structure says you present the data in the structure. 
In HTML tables, there is a tree structure in which the data is presented, and a matrix structure in which it is to be interpreted. 
Maybe that's a clearer example. 
Columns are implicit structure in HTML tables, they are not part of the data structure until you know the model. 
Al 
