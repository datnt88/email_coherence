This is a use case concerning xml literals which we identified during our discussions this week, and a little analysis of it. 
The use case may need some refining to fully capture i18n concerns. 
Consider an application which is building an RDF store of metadata about web pages. 
It crawls the web extracting title information from web pages and storing then represents this data as RDF. 
Lets say it is searching for title elements, which may contain arbritary markup. 
Trying for example: Hmm, checking Amaya behaves oddly in this situation, and Mozilla gets it wrong. 
And the validator objects - says you ain't allowed em in titles. 
This is XHTML 1.1. 
Lets try span. 
No, that doesn't seem to be legal either. 
Doesn't validate. 
Checking, the content model for the title element is PCDATA. 
Ok, lets suppose its: That validates. 
But I note that XHTML 1.1 does not allow markup in titles! 
How does the application represent this in RDF? 
Since you can't use markup in a title element, use a plain literal :) But lets assume we are far sighted and assume that markup will be allowed in titles in the future. 
Well, in that case, you could use an rdf:XMLLiteral and include a span element to hold the lang tag. 
Objection: But then you couldn't use that literal with XHTML 1.1. 
Response: Record that information separately in the graph e.g. /... Objection: You've changed the title. 
You can't recover the exact markup that was there in the first place because you can't tell whether the span was added by the crawler or was there in the first place. 
Response: Most of the time, you won't care. 
If you do care, you can record the extra information in the graph. 
Objection: span is html specific. 
you might want to use the literal in another context. 
Response: Really need to refine the use case here, but in general if you are not prepared to commit to a specific markup language, you can use the graph to represent the underlying structure. 
Brian I believe it will be allowed in XHTML 2. Until now the fact that only PCDATA has been allowed in the title element of XHTML/HTML has caused some problems, such as markup of bidirectional text for eg. 
Arabic / Hebrew users, and markup of language change (eg. 
For WAI voice browsers that need to detect the changes). 
RI Richard Ishida W3C See the W3C Internationalization FAQ page Hello Brian, Many thanks for writing this up. 
Some comments below: And this application may scrape data from other things than (HTML) Web pages. 
And two independent applications may scrape the same data. 
Yes. 
As I mentioned in one of my mails, we are working with the HTML WG to fix this in XHTML 2.0. 
An application may also scrape h1 elements. 
h1 can contain markup, and although often misused just to control font size, its semantics are close to title . 
Yes. 
This is called markup integrity (or violation of markup integrity). 
We can always record any kind of information in the graph. 
But the problem there is that different people/applications will do this differently. 
So now we got from the problem of not knowing what kind of dummy markup to use (or what has been used) to the problem of not knowing what kind of graph structure to use (or what has been used). 
[or even worse, not to know what kind of dummy markup or graph structure has been used]: For example, in a recent discussion, Tim was proposing to do something like: /... (i.e. making languages properties). 
There is also Patrick's proposal about reification (see This is quite contrary to what we need; xml:lang was defined in XML, and not elsewhere, so that a wide range of applications could make use of it in an uniform way. 
The handling of language information in RDF M&amp;S was also designed with the goal of allowing applications to make use of it in a uniform way. 
Same problems as above, I guess. 
Regards, Martin. 
I don't think that's a problem in this use case, as it is defined. 
Do you want to have a go at refining the use case to illustrate the problem you see? 
Brian Hello Brian, I think this discussion about use cases is very useful, and is helping us a lot advancing our common understanding. 
Rather than refining the use case, let me extend it. 
Assume that the RDF created by scraping all kinds of title -like elements from all kinds of document formats is viewed in some kind of RDF tool. 
This tool may use language information to disambiguate glyph shapes, or it may use language information to appropriately speak the texts to users with disabilities. 
If there is a clearly defined and uniform way to have language information for XML literals, then that can easily be done. 
Otherwise, this informations is most probably just ignored. 
Please note that for my extension of the use case, it would be enough to have xml:lang on a dummy element internal to the XML Literal. 
But that, as we have discussed, does not work for the original part of the use case, where we were concerned with markup integrity. 
We can solve half of the use case with one solution, and the other half with the other solution, but the solutions are different and so don't work together. 
Regards, Martin. 
In that case it must be doing you more good than me. 
I'm still at the point of looking for a use case to demonstrate that markup integrity is a real problem. 
You suggested that your issue has to do with multiple users doing the same thing differently and I asked you to refine the use case we have been discussing to better illustrate your issue. 
I don't see how this use case illustrates a problem with markup integrity; rather it assumes that problem. 
Brian Hello Brian, For some people, it is important. 
For others, it may not be important. 
For the RDF Core WG, the graph is obviously very important, and the triples. 
If somebody created a new language to serialize RDF, and this new language would mess up graphs, I guess you would not be happy. 
If this currently happened with RDF/XML, or if some XML group changed XML so that it could happen, I guess you would not be happy. 
So I guess you should be able to understand that other people will not be happy at all if their markup is arbitrarily changed. 
It's not necessarily the people in the I18N WG who are most concerned with markup integrity (although I think we actually are). 
But assume some third party wants to use RDF to scrape metadata from XML documents, and this third party is concerned about markup integrity, either because s/he is just convinced that markup is crucial, or because of concerns for various round trip scenarios. 
After all, any user can scrape plain text literals (with language information), put them into RDF, and get them back unchanged. 
Do you (the RDF Core WG) or we (the I18N WG) have a detailled use case for this? 
Or do we all just agree, even without ever really talking about it, that it would be a very bad idea if plain literals suddenly got changed, e.g. if RDF suddenly upper-cased all plain literals? 
So let's assume that people in the XML community are concerned in a similar way about markup integrity as people in the RDF community are concerned about triple and graph integrity. 
So a person who is concerned about markup integrity does some scraping or something similar. 
They are faced with the following alternatives: 1) Preserve the markup, ignore the language information 2) Change the markup, squeeze in an additional element to attach language information. 
4) Put the language information somewhere else 3) does not work because then language information is lost for purposes such as glyph disambiguation and text-to-speech. 
So the user is faced with the question: Do I preserve markup, or do I preserve language information? 
Seen from an I18N viewpoint, if we get to this point, we already have lost. 
From our experience, we know that the users unfortunately in most cases will just take the easy way out, even if they don't explicitly weight the alternatives. 
That means choosing 1), and thus loosing language information, the wrong thing from an i18n perspective. 
The fact that the users not only have to change the markup, but that they have to think about how to change it (which element to use) and that this may depend on circumstances (e.g. div vs. span in a very simple HTML case), which may significantly complicate the extraction logic, doesn't at all help pushing people towards conserving language information. 
Bad for i18n. 
There is a fourth alternative that users may take in some case, which is to strip all the markup so that they can maybe use some language info (or maybe not). 
Of course, loosing markup is also bad for i18n. 
Yes, to some extent, we have to assume it as a problem because we know that others see it as a problem. 
Hope this helps. 
Regards, Martin. 
[sorry, Brian, for jumping in here, but...] Martin, I appreciate the position you present in the post below, but I must stress the point that the problem you present is a general problem relating to working with XML fragments, no matter what the context, and *not* a problem with RDF, nor a problem for RDF to fix. 
By saying this, I do not mean to suggest that the problem is not important to solve. 
It is. 
But not by RDF, and while we have bent over backwards to try to figure out some way to lessen the problem insofar as RDF is concerned, we have not come up with any solution that, all things considered, is better than what is now on the table and reflected in the latest editors drafts. 
Anytime an XML user wishes to deal with anything smaller than a complete XML instance, they will encounter these sorts of issues. 
RDF is not creating this problem. 
If RDF were to provide one solution, then that would simply be inconsistent with another solution provided for some other context. 
You seem to be big on having consistent treatment, so it puzzles me that you would seek so specialized a solution by RDF specifically. 
You appear to be asking us to make RDF inferior for SW purposes in order to address this problem, just a little bit, insofar as RDF alone is concerned, for the sake of some indeterminable number of XML users. 
Let's not try to treat the symptoms rather than find a cure. 
Let the XML folks tell XML users how to deal with this problem in a *general* way when dealing with XML fragments irregardless of the language of encapsulation. 
E.g., have someone dust off the XML Fragment Interchange [1] spec, make sure it does the right things, and then tell folks use it *everywhere* they deal with XML fragments, including with RDF. 
RDF is not going to be able to solve this general XML problem. 
Certainly not at this point, given the fact that we should have been finished with all this stuff well over a *year* ago! 
Can we *please* stop spinning our wheels on this and move one? 
Thank you. 
Regards, Patrick [1] http://www.w3.org/TR/xml-fragment Hello Brian, For some people, it is important. 
For others, it may not be important. 
For the RDF Core WG, the graph is obviously very important, and the triples. 
If somebody created a new language to serialize RDF, and this new language would mess up graphs, I guess you would not be happy. 
If this currently happened with RDF/XML, or if some XML group changed XML so that it could happen, I guess you would not be happy. 
So I guess you should be able to understand that other people will not be happy at all if their markup is arbitrarily changed. 
It's not necessarily the people in the I18N WG who are most concerned with markup integrity (although I think we actually are). 
But assume some third party wants to use RDF to scrape metadata from XML documents, and this third party is concerned about markup integrity, either because s/he is just convinced that markup is crucial, or because of concerns for various round trip scenarios. 
After all, any user can scrape plain text literals (with language information), put them into RDF, and get them back unchanged. 
Do you (the RDF Core WG) or we (the I18N WG) have a detailled use case for this? 
Or do we all just agree, even without ever really talking about it, that it would be a very bad idea if plain literals suddenly got changed, e.g. if RDF suddenly upper-cased all plain literals? 
So let's assume that people in the XML community are concerned in a similar way about markup integrity as people in the RDF community are concerned about triple and graph integrity. 
So a person who is concerned about markup integrity does some scraping or something similar. 
They are faced with the following alternatives: 1) Preserve the markup, ignore the language information 2) Change the markup, squeeze in an additional element to attach language information. 
4) Put the language information somewhere else 3) does not work because then language information is lost for purposes such as glyph disambiguation and text-to-speech. 
So the user is faced with the question: Do I preserve markup, or do I preserve language information? 
Seen from an I18N viewpoint, if we get to this point, we already have lost. 
From our experience, we know that the users unfortunately in most cases will just take the easy way out, even if they don't explicitly weight the alternatives. 
That means choosing 1), and thus loosing language information, the wrong thing from an i18n perspective. 
The fact that the users not only have to change the markup, but that they have to think about how to change it (which element to use) and that this may depend on circumstances (e.g. div vs. span in a very simple HTML case), which may significantly complicate the extraction logic, doesn't at all help pushing people towards conserving language information. 
Bad for i18n. 
There is a fourth alternative that users may take in some case, which is to strip all the markup so that they can maybe use some language info (or maybe not). 
Of course, loosing markup is also bad for i18n. 
Yes, to some extent, we have to assume it as a problem because we know that others see it as a problem. 
Hope this helps. 
Regards, Martin. 
I wasn't aware of this, or if I was had forgotten. 
This is a real 'find'. 
Thank you very much. 
Brian I wasn't aware of this, or if I was had forgotten. 
This is a real 'find'. 
Thank you very much. 
You're welcome. 
And to make a point before any possible suggestion might appear, XML Fragment is *not* suitable for use *by* RDF in creating lexical forms of XML literals embedded in RDF/XML, because XML Literals are not (semantically) fragments of the RDF/XML insofar as the interpretation of the RDF/XML is concerned when generating the graph. 
The use of xmlns: and xml:base definitions in surrounding XML context is simply something unavoidable, given the lack of distinction XML makes between encapsulating and encapsulated markup, but the semantics of the encapsulating RDF/XML and the encapsulated XML literal remain distinct. 
Where XML Fragment *would* be very useful, is by applications scraping XML off the web, where they would create XML literals corresponding to XML Fragment instances of the source XML instance in question, including all semantically relevant context markup, including xml:lang, and then canonicalized as an rdfs:XMLLiteral lexical form. 
Cheers, Patrick Hello Patrick, RDF has a custom solution for plain literals. 
The same solution would work for XML Literals, and was in the last call document. 
There is a difference between asking to keep some consistency in the current (up to Last Call) design, and bringing in new consistency requirements at this late stage. 
I18N doesn't want to require RDF to solve all XML problems. 
But we obviously care about a good solution for language information. 
If we had a cure, that would be fine. 
Currently, we don't. 
And we don't want the patient to feel pain (or loose a limb), so we prefer treating the symptoms to doing nothing. 
I'm sure if you were the patient, you would want to do the same. 
We wouldn't mind if that happened. 
When we met originally with RDF Core, we were told about the problem that is now solved by xml:lang=''. 
We carefully did our homework and solved this problem. 
If we had been told 1.5 years ago that RDF needs a complete solution for XML fragments, then we could have tried to contribute to that solution. 
Now it's too late for this, I guess. 
I would definitely like to. 
Of course, one easy solution would be to move back to the Last Call stage, or choose a solution that is closer to Last Call than the one we currently have. 
Regards, Martin. 
Well, that's not surprising, given that there is no standard that addresses language qualification of arbitrary unicode strings. 
No, it would *not*, if XML Literals are modelled using typed literals. 
This has been sufficiently stated more than enough times. 
Yes. 
And was found to be a significant problem. 
And when significant problems are found in last call drafts, they are addressed. 
I appreciate your desire for consistency. 
I share it. 
But I think we have more than sufficiently justified the minor lack of consistency in this case. 
You're free to continue to disagree, but I will not exert further energy re-re-re-stating our justifications. 
So do we, but not at the expense of the *primary* purpose for RDF, which *does* after all take precidence over such markup issues. 
Again, do not take this comment to imply that language markup issues are not important. 
They are. 
But they are not the *primary* purpose for RDF and *do* not take precidence over the primary requirements that must be addressed by RDF. 
This entire discussion feels to me like the tail wagging the dog. 
Nothing against tails, but that's not right. 
Not if the side effects of the treatment were as bad as the illness and not if efforts put towards treating the symptoms distract from work towards finding a cure. 
Actually, we ended up hard-coding an implicit xml:lang='' for every property element having a typed literal value, which was IMO the right way to handle it. 
The existence of a mechanism such as xml:lang='' is still quite valuable, and efforts to create it were certainly not wasted. 
I'm sure the XML community will make good use of it. 
The point is that we *don't* want xml:lang to apply to XML literals. 
XML literals are XML fragments that have intepretation *independent from* the RDF/XML instance and the semantics of the RDF/XML instance not affect those literals. 
It's not enough to *allow* folks to use xml:lang='' with XML literals. 
We want and need to *ensure* that they do. 
The problem of language qualification for XML literals only exists for cases of XML fragments with mixed content where some form of markup must surround the mixed content to bear the language qualification. 
RDF should not be used for that encapsulation. 
If users are extracting XML fragments from complete documents, then they are responsible for capturing all semantically relevant contextual information *in* the fragment, and can use something like XML Fragment to do so. 
If they are creating new XML fragments to be inserted into other, yet to be created documents, then they should insert all semantically relevant information about the fragment *in* the fragment, either using markup language specific mechanisms such as span or XML Fragment with an unspecified root element. 
In the end, it is neither the business of RDF to care, nor require, nor affect how such language qualification is made to XML fragments that are encoded in RDF/XML as XML literals. 
The only mechanisms expressed in the RDF/XML that apply to XML literals are *syntactic* mechanisms, such as namespace declarations, etc. and not *semantic* mechanisms such as xml:lang. 
The fact that RDF does allow xml:lang to infect plain literals is IMO a legacy inherited bug, and asking for us to extend that bug to XML literals is hardly motivating. 
Does *RDF Core* need to tell the I18N that a complete solution for language qualification of XML fragments is needed?! Surely the I18N is, and has been, aware of this glaring problem for far longer than that, and has been working on such a solution. 
If not, then, well... no comment. 
(a) It's too late to expect RDF to provide any complete solution (b) It's not too late to work on a complete solution for all XML users (and I hope you folks do) (c) When a complete solution is available for all XML users, RDF will **automatically* support it -- because it does not interfere with the semantics of XML literals That is *hardly* "easy". 
If you haven't come to appreciate that by now, then these lengthy discussions have not been very effective. 
The inclusion of lang tags for XML literals as defined in the last call specs was found to cause substantial problems both for the MT and for clarity and usability. 
I'm quite confident to bet that the WG will *not* be putting them back in. 
We tried to do that. 
I expended numerous hours towards that end (even though I did not myself consider there to be any problem). 
We could not see any option that was superior to the present solution as specified in the latest editors drafts, nor were many WG members confortable with changes that might not be sufficiently understood at this late stage. 
*No* significant technical problem with the present design was recognized by the WG. 
It would be nice to keep on tinkering with this issue, and I hope that work continues in this area, but the present WG has provided a solid, well understood, and tested solution, and we are more than out of time. 
I'm sorry you consider RDF to be suboptimal in this matter. 
I, and others, do not agree (many of which are more than sufficiently qualified in the area of multilingual markup issues). 
This matter can be noted as a possible area of study for a future WG. 
I see no point in addressing it further within the context of the present RDF Core WG. Patrick As the member of the WG who recorded an abstention at the vote on the crucial proposal that Martin objects to, I note that I am now convinced that the WG has made the right decision. 
Jeremy Hello Jeremy, Many thanks for your clarification. 
We understand that. 
But this does not mean that the I18N WG is convinced. 
Regards, Martin. 
