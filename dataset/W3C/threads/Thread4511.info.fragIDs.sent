Appendix A.1 EBNF Technical It looks like that we cannot parse an expression of the form: "1" cast as xs:integer = "1.0" cast as xs:integer. 
Which is semantically the same as xs:integer("1") = xs:integer("1.0"). 
Based on the precedence table, I would assume that cast as binds stronger than =, and from a composability point of view, I would also expect to be able to write the above. 
However, when following the grammar, it looks like the grammar pops out without consuming the =. 
Here is the parse process: "1" is consumed by Expr- SingleExpr- OrExpr- AndExpr- InstanceOfExpr- TreatExpr- CastableEx pr- CastExpr- ComparisonExpr- RangeExpr- AdditiveExpr- MiltiplicativeExp r- UnaryExpr- UnionExpr- IntersectExpr- ValueExpr- PathExpr- RelativePat hExpr- StepExpr- FilterStep- PrimaryExpr- Literal- StringLiteral Which then pops back to CastExpr that consumes "cast as xs:integer" Then we pop back to the top and realize that we have left overs and raise a parse error. 
This is also a problem for the related treat as, castable as etc. 
Hi Michael. 
Paul wanted me to give high priority to answering this particular issue (original mail at [1]). 
Since the November document, the WG has agreed to change the precedence of 
instance-of, treat, castable, and case (in response to a previous issue 
raised [2] by you). 
The precedence table is now looking more like: 1 (comma) 2 FLWORExpr, some, every, TypeswitchExpr, IfExpr 3 or 4 and 5 eq, ne, lt, le, gt, ge, =, !=, , =,  ,  =, is,  , 6 to 7 +, - 8 *, div, idiv, mod 9 unary -, unary + 10 union, | 11 intersect, except 12 instance of 13 treat 14 castable 15 cast 16 ValidateExpr, /, // 17 [ ], ( ) so that these operators bind much more tightly. 
In the most recent test parser, your expression parses fine: Type Expression: "1" cast as xs:integer = "1.0" cast as xs:integer |QueryList 
Please let me know if this previously decided issue resolves MS-XQ-LC1-146 
in your view. 
Thanks! 
-scott [1] [XQuery] MS-XQ-LC1-146 [2] Grammar issue: cast as 
Yes. This seems to resolve the issue. 
Thanks Michael 
precedence of 
issue 
MS-XQ-LC1-146 
