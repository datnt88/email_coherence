The DOM2 draft prescribes to raise an INUSE_ATTRIBUTE_ERR on the setNamedItem an setNamedItemNS methods if "arg is an Attr that is already an attribute of another Element object". 
This probably suggests, not to raise such an exception, if Attr is already an attribute of the "same" Element object. 
But the question here is, how a NamedNodeMap can "know" that it is attached to an Element (and to which Element), so that it makes sense to use here any possessive pronoun at all. 
Conclusion: One should either modify the directions of raising an INUSE_ATTRIBUTE_ERR into "Raised if arg is an Attr that is already an attribute of an Element object. 
..." and (depending what the desired behavior should be) add to the description of the function "Adds a node using its nodeName attribute. 
If arg is already present in the map nothing is done and the method returns null.", or introduce an ownerNode attribute on the NamedNodeMap interface which can be used to determine to which Element the NamedNodeMap belongs or whether it is used by an application for some other purpose. 
The last suggestion fixes also a problem that arises on setting the ownerElement attribute of an attribute node: If one uses the setAttribute method of the element interface the value of the ownerElement can easily determined, because it is the object which calls the method. 
But if one uses NamedNodeMap.setNamedItem(MyAttribute) the information to which Element the NamedNodeMap possibly belongs is not available (unless it has an ownerNode attribute), and so MyAttribute.ownerElement cannot be set correctly. 
BTW: Should not the createElementNS method of the Document interface raise an NAMESPACE_ERR if the qualifiedName has a prefix that is "xmlns" but the namespaceURI is neither null nor an empty string? 
Dieter Koehler, M. A. - dieter.koehler@ppp.uni-bamberg.de 
Mittlere Kaulberg 22, D-96049 Bamberg, +49(0)951-5190726 "http://www.philo.de/Philosophie-Seiten/": 
1000+ Philosophie-Links "http://www.philo.de/VirtualLibrary/14.de.htm": Deutsche Philo-Links "http://www.philo.de/xml/": 
Open XML - XML-Komponenten fuer Delphi A supplement to my last posting: NamedNodeMap.setNamedItem and setNamedItemNS: What happens if the node which is specified by arg is already in use in another NamedNodeMap or part of a DOM tree? 
It seems likely that the DOM wants it to be silently removed and than being added to the NamedNodeMap, isn't it? 
NamedNodeMap.removeNamedItemNS, 
NOT_FOUND_ERR: The text should read: "Raised if there is no node with such a local name and namespaceURI in the map." Dieter Koehler, M. A. - dieter.koehler@ppp.uni-bamberg.de 
Mittlere Kaulberg 22, D-96049 Bamberg, +49(0)951-5190726 "http://www.philo.de/Philosophie-Seiten/": 
1000+ Philosophie-Links "http://www.philo.de/VirtualLibrary/14.de.htm": Deutsche Philo-Links "http://www.philo.de/xml/": 
Open XML - XML-Komponenten fuer Delphi At the time, the DOM only uses NamedNodeMaps for Attr's, Entities, and Notations. 
The entities and eotations lists are officially read-only. 
"The DOM Level 2 does not support editing entities, therefore entities cannot be altered in any way." (And similar wording for notations.) 
As noted previously, the Attr lists are associated with a specific element, and should have only Attr's inserted in them. 
Note that the definition of NamedNodeMap says that it throws INUSE_ATTRIBUTE_ERR if you attempt to insert an Attr without removing it from its previous context. 
If your code reuses the NamedNodeMap inteface for some other purpose, we don't specify how it interacts with the standard DOM. 
I'm not sure we need to do so... Joe Kesselman / IBM Research So it seems the passages about the "live" behavior of NamedNodeMaps in ?1.1. 
are superfluous, since there is no intension to use it in a way a NodeList is e.g. used in Elements.getElementsByTagName. 
Dieter Koehler, M. A. - dieter.koehler@ppp.uni-bamberg.de 
Mittlere Kaulberg 22, D-96049 Bamberg, +49(0)951-5190726 "http://www.philo.de/Philosophie-Seiten/": 
1000+ Philosophie-Links "http://www.philo.de/VirtualLibrary/14.de.htm": Deutsche Philo-Links "http://www.philo.de/xml/": 
Open XML - XML-Komponenten fuer Delphi No current intention to do so, anyway... and I think it's much more likely that NodeIterator or TreeWalker would be used as a return type for future query operations. 
(That's what they were originally designed for, but we decided that we needed to wait for the XML Query Working Group to tell us how querying ought to behave.) Joe Kesselman / IBM Research 
