In other words, to say that XML is to be creatable (not just readable) without reference to a DTD is to say that there is no single non-trivial DTD that can a priori be known to be able to represent the potential output of an XML editing session even given a DTD that represented the document at the start of the editing session. 
Is this, in fact, the crux of the goal of this XML effort: that an XML content provider or editor can create new elements/attributes on the fly and insert them however they wish in the document (with about the only constraint being that the basic synchronicity of element hierarchy be maintained)? 
This expresses my concern. 
Yes, some of us who have only recently joined this party have a considerable reading effort to absorb the proposals prepared and accepted in advance of the working group formation. 
That said, my own use of SGML in enterprise environments, and a principal objection to the application of HTML in some enterprises is the ability of a user community in a specific domain to create a DTD that controls an authoring/edting session and ensures conformance of content through validation. 
Process design typically applies validation tests where the test itself is the standard agreement that a process closes correctly. 
In large distributed concurrent production environments, this is the main advantage, sometimes the only advantage, of SGML. 
In short form, if XML does not enable me to provide a DTD to which all parties to a process can contractually obligate themselves to, then all the efficient parsing, network transmission, and other programmer conveniences are moot. 
The recommendations for applying XML to intranets will be the same as for HTML: Don't. 
len bullard lockheed-martin I. Which of the following statements comes closest (1) the majority of existing SGML editors can create XML; (2) in theory, an ideal SGML editor could create XML; (3) new tools will have to be created or existing tools modified to enable the creation of XML. (1) - no doubt. 
Although since XML abandons useful SGML features in a trade-off for simplicity and network delivery, one might ask: "If you're willing to use a real SGML editor, why don't you use real SGML?" 
There are some interim problems if we do things like NET tricks to emulate EMPTY, (because the SGML editor will want to write it out differently) but with luck these will go away assuming WG8 makes a distinct EMPTY syntax. 
(a) given that the editing tool has access to an SGML declaration and DTD that exists (or is generated) above and beyond that which is part of the XML definition itself This has to be the way it is. 
Some have envisioned an XML processor writing out an SGML Declaration and DTD based on the XML markup declaration, and in fact I have software that does this for MGML. 
You can't ask for help from an SGML editor without this stuff. 
II. 
Under the category of (b) above, assuming we continue down the road of defining XML in such a fashion that it does not include a complete DTD No. This is also the crux of what's bothering Len, and I think it's really a non-issue. 
I,and I think most people involved in this, absolutely definitely do envision having the equivalent of an SGML Markup Declaration. 
(Although since XML markup syntax is frozen, the term "Markup Declaration" is a bit misleading - I prefer Schema Declaration or Grammar Definition or some such.) However, there is some sentiment in favor of a couple of differences between SGML and XML markup declaration, specifically: a) XML MD might have a different syntax, specifically that of an XML (SGML) document, and b) XML MD might be defined in such a way that it useful only when partially present. 
(e.g. for definining entities, #FIXing attributes, and so on - think of a DTD subset without a DTD) But your questions highlight a point that I don't think has been carefully enough considered. 
Namely, our design goals say XML shall be designed such that it can be used in the absence of a DTD. 
But with incomplete or absent markup declarations, is it "really" XML? 
Probably the standard has to have, formally, two flavors of XML compliance. 
For example, you could say "Valid XML" is an instance for which a markup declaration is available and that meets the structure constraints of that MD; and that "Unvalidated XML" has proper markup syntax throughout but that in fact either no MD is available or that validation has not been accomplished. 
Cheers, Tim Bray tbray@textuality.com 
http://www.textuality.com/ 
+1-604-488-1167 I. Which of the following statements comes closest (1) the majority of existing SGML editors can create XML; (2) in theory, an ideal SGML editor could create XML; (3) new tools will have to be created or existing tools modified to enable the creation of XML. (1) seems fine to me, but I presume we needn't do a formal survey to get 50%; we just need to make reasonable accommodation to the current state of editor technology. 
Of course any editor which tried to apply a lot of minimization when saving files, is out of bounds. 
Someone could even write an SGML editor that calculates what combination of SHORREF, DATATAG, and LINK will lead to the bare minimum number of bytes in the saved form, and write that. 
Obviously such an editor won't write XML-parsable document instances. 
At a less obvious level, the same holds with respect to any minimization we eschew (like unquoted attributes!). 
Fortunately most SGML editors seem to never use minimization in their output (any known exceptions, *please* raise them!). 
If we were to require that any SGML form any conceivable editor chose to write out be valid XML, then we would have asserted that SGML is a subset of XML. 
If at the same time we maintained our current hope that XML be a subset of SGML, then they're mutual subsets, so they're equal and we couldn't remove anything. 
II. 
Under the category of (b) above, assuming we continue down the road of defining XML in such a fashion that it does not include a complete DTD [snipped for brevity] Yes. 
I am understanding better, but after the VRML experience in which Sony took a body blow by assuming too much, I am trying to be very sure. 
IOW, Trust But Verify. 
It is good to get past this early, so a little patience while the chickens figure out what the roosters have been doing. 
We have been working with the model for some years in our products that simplifying the features and using a stylesheet allowed us to accept an SGML instance for processing without requiring the DTD. 
That is why in IDE/AS, the validation is via batch use of SGMLS. 
We always envisioned that a validating editor was involved in the process. 
The practical truth is, we note, the users typically revert to text editors once they know the DTD, and batch validate ad hoc because the stylesheet processor catches most of their mistakes. 
A clipboard is a powerful tool. 
Our design intent is to allow the user to decide just how tightly their processes run. 
There are other issues which will come up in later phases in which the DTD plays a role in hyperlinking, but under the proviso that a DTD can be written and can be sent, these issues do not concern me yet. 
len bullard lockheed martin I believe that this point has already been addressed in earlier exchanges that can be found in the archive. 
The bottom line is that we want to be able to ship a DTD along with the instance when the receiver needs to validate the data (before dropping it into a database, for example), but we also want the option of omitting the DTD in cases where the receiver simply needs to display the instance (for example) and the instance doesn't contain problematic stuff like EMPTY elements that may require a DTD or a partial DTD to keep the receiving parser on track. 
Jon 
