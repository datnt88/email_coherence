OK, I officially recuse myself from this issue. 
Every time I read a post from one side or the other, I find myself agreeing with whoever posted last (which means I currently agree with John, but I'm sure it won't take much to switch me back again :-). 
So the only thing I am against is "MAY". 
Either we keep it in the protocol as a MUST (i.e. MUST be set on COPY), or we delete it. 
Other than that, just tell me which side won (:-). 
Cheers, Geoff I disagree. 
I see no difference between creating a new version from scratch and copying data from somewhere else to create a new version from scratch. 
If I open file1 and then do a save-as on file2, the server doesn't know and precussor isn't set in any case. 
So why is it so important to know that someone grabbed a copy of file1's current version and copied it to file2 without editing it first? 
If you really want the version history, use MOVE not COPY. 
Do you have a 'for example' use case where that origin information is valuable? 
And would it still remain valuable after a few more edits were done? 
-----Original Message----- From: ietf-dav-versioning-request@w3.org [mailto:ietf-dav-versioning-request@w3.org] 
On Behalf Of Rick Rupp Sent: Monday, June 18, 2001 5:39 PM Subject: [ietf-dav-versioning] none The precursor-set property seems to be an important concept of a versions history. 
Without it there is no indication that a version has a relationship to another version history. 
I don't think it will be unusual for a client to create a new version by copying from a different version history. 
Will it be important to know the new version came from a different version history? 
I think the answer is yes and the precursor-set facilitates this. 
2) the difficulty clients will have in determining the type of the resource - they have to know the property semantics instead of relying on the server to hide these semantics, 
No, they just need to look and see if the properties and/or methods are supported to correctly type the resource. 
The latest draft of the spec has an appendix that spells this out. 
and 3) perhaps reducing future protocol flexibility because we've allow too much semantics into clients that will restrict protocol evolution. 
Again, no semantics is required to correctly 'type' a resource. 
In response to Tim: 
The "semantics" I referred to above is checking for the existence of some 
set of properties. 
What if changes in the protocol necessitate changes in these properties at some time in the future? 
This also leads down the slippery slope of using properties with particular values to determine type - that is, confusing state with dynamic type. 
Most modern computer languages in common use do use named types and do not require clients to look inside to figure out what they are. 
Smalltalk, C++, and Java (at least by default) don't even let clients see in. 
Encapsulation is a good thing. 
I think it would be nice if WebDAV could use it too. 
From: Tim Ellison No, they just need to look and see if the properties and/or methods are supported to correctly type the resource. 
The latest draft of the spec has an appendix that spells this out. 
From: Jim Amsden 
The "semantics" I referred to above is checking for the existence 
of some set of properties. 
Just to be precise, the check is for whether the properties are supported, not whether or not they exist (i.e. a resource can support a property even if the property does not currently exist on that resource). 
What if changes in the protocol necessitate changes in these properties at some time in the future? 
A change in the protocol must be backward compatible. 
Just as we cannot say "COPY no longer accepts a Depth header", we will not be able to say "an activity no longer supports a DAV:subactivity property". 
In addition, any future extensions to the semantics of DAV:subactivity will have to be compatible with its current semantics. 
This also leads down the slippery slope of using properties with particular values to determine type - that is, confusing state with dynamic type. 
This is not an issue because we do not check for the existence of a property (much less it having a particular value), but rather just "is that property supported". 
(But for the record, we're already at the bottom of that slippery slope, because the distinction between state and dynamic type is a fuzzy one at best.) Most modern computer languages in common use do use named types and do not require clients to look inside to figure out what they are. 
Smalltalk, C++, and Java (at least by default) don't even let clients see in. 
Encapsulation is a good thing. 
I think it would be nice if WebDAV could use it too. 
Encapsulation is preventing you from seeing the implementation. 
That is exactly what an IETF protocol does ... you can only see and use the public parts (which are the methods and properties defined by the protocol). 
A public property is as much a part of the type signature as a public method. 
All we are saying is that we should be using type signature equivalence, rather than type name equivalence, since HTTP does not provide a "subtype declaration" mechanism, but the versioning protocol has defined a type signature exposure mechanism (DAV:supported-method-set and DAV:supported-live-property-set). 
Cheers, Geoff 
Geoff says: Encapsulation is preventing you from seeing the implementation. 
That is exactly what an IETF protocol does ... you can only see and use the public parts (which are the methods and properties defined by the protocol). 
A public property is as much a part of the type signature as a public method. 
All we are saying is that we should be using type signature equivalence, rather than type name equivalence, since HTTP does not provide a "subtype declaration" mechanism, but the versioning protocol has defined a type signature exposure mechanism (DAV:supported-method-set and DAV:supported-live-property-set). 
Encapsulation can also be used to suppress detail and provide higher level abstractions to reduce complexity for some client classes. 
I agree a protocol does present an encapsulation of a server's services in a standard way. 
What we're talking about here is encapsulating the details of the protocol itself - we're up a meta-level. 
HTTP doesn't provide a subtype declaration mechanism, but WebDAV does - DAV:resourcetype. 
I think some of us would just like to be able to use it to hide the details and name the things in the protocol the way we name them in the specification. 
This, ideally, shouldn't have to be discovered through introspection as it requires the introspector to know protocol details that might better be handled by the server. 
Its a many-to-one thing for complexity management. 
You have one server doing the work instead of many clients. 
[mailto:ietf-dav-versioning-request@w3.org]Im Auftrag von Clemm, Geoff 
I knew I had not fully understood this. 
:( The spec is silent about what a "supported" property is compared to an "existing" property. 
Geoff, could you define exectly when a property is part of the supported-live-property-set? 
Is there a newer working draft than 15.1? 
Where can I get it? 
Stefan 
