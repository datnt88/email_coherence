Since this has very little to do with implementation of a particulaur variant of annotation software, and more to do with my opinions on what is the right (or wrong) way to implment WWW annotations, I'm moving this discussion back to the list. 
I hope you don't mind, Jon. 
:-) 
Also, since I'm saying all sorts of (nice) things about Crit, I feel Ping should have a chance to correct me if I make any mistakes. 
All we've got is the 3V protocol. 
I'd like to have an OpenSource clone to work with the 3V protocols. 
Standardizing on the 3V protocol would be a very bad move, IMHO. 
In fact, I think use of 3V should be discouraged... 
I say this, because from what I've read and seen (screenshots), 3V 
seems to have some major problems. 
Most of them stem from what looks like a genuine wish to emulate "Post-Its". 
One of the values of WWW-annotation would be facilitating critical discussions - but you can't have a real discussion using "Post-Its". 
They're just too small to write well structured arguments, and they 
have that stupid glue strip on the back which makes handling them akward. 
:-) 
Time for a disclaimer. 
I'm basing my judgements of 3V on something I read: The 3V protocol involves sending the annotation itself (not just an URL) as a reply when the client requests annotations for a given web page. 
If this is incorrect, then please substitute "3V" with "Theoretical Annotation System" for the rest of this message. 
:) 
Anyway, this implies that 3V servers either store or directly manipulate the content of all annotations. 
If a 3V server admin doesn't like the word "potato" then you [the client] might /never/ see that word in an annotation coming from a 3V server. 
They can 
remove it from all annotations you are sent, no matter what the annotation's author meant to say. 
This demonstrates the problem with having the annotation server send you the annotation itself: the annotation server can filter what you see, and neither the client nor the author have any control over what gets filtered. 
This is one reason why all mediators should be local. 
3V appears to be even worse than that though. 
The 3V server doesn't just send you the annotation content, it also stores the annotations locally. 
Censorship on 3V is therefore not limited to irritating "potato-filters" - the admins can just delete or edit stuff they don't like! 
That, in short, is why I don't like 3V. 
That and the fact that it is a closed-source proprietary windows-only technology... :-) I think reverse-engineering the 3V protocol is only useful as a method to provide a painless "upgrade path" from 3V to a "real" WWW annotation system. 
OTOH, I do like the Crit model, because it doesn't really have these problems. 
Crit currently consists of 3 parts: 1) A database of annotations (which are just web pages). 
2) A database of links between web pages, including but not limited to 1). 3) A mediator which inserts information from 2) into the web page which is requested by the client. 
2) can link together any two web pages - not just annotations stored by the Crit server. 
Thus different Crit server link databases, instances of 2), can contain links to annotations stored anywhere online - including annotations stored by other Crit servers. 
Currently Crit implements all these features in one integrated system, but that isn't required by the architecture - each item on the list could be implemented &amp; run seperately. 
Also, the client is responsible for fetching each annotation itself. 
The mediator, 3), only provides information about where the annotations are, not what they actually say. 
"Potato-filtering" is impossible, because the client fetches the annotations' content directly from the source. 
The client's experience, 3), can trivially be migrated to a local, user-run process, such as the the browser or the "local proxy" I proposed in an earlier message. 
It depends only on communication with 2). 
So a Crit-based system doesn't have 3V's flaws: the server admin can only censor pages stored locally, in 1), or limit which annotations the server points to, in 2). 
Both problems can be avoided by: - hosting your annotations on your own personal web site - telling multiple Crit servers about them - asking multiple Crit servers for links when browsing 
Also, this crit-based model for annotations leverages the current WWW 
infrastructure as much as possible. 
The only new standards we really need would describe how the client communicates with the link server. 
This involves defining a file format (XML based?), selecting a transport/request method (HTTP/CGI?) and a fine-grained link format (Xpointers?). 
As Jon pointed out in an earlier message, Crit as software isn't something we should focus on. 
But if we want to aim for standardization on a useful method to annotate the WWW, I think we should definately make use of the exellent ideas it demonstrates. 
Especially since it appears to only be a matter of writing down a spec for a file-format... 
Finally, in spite of all the flaws I've mentioned, a standard should allow (not require) the server to send the annotation text along with the link information. 
This would be a valuable optimization for 
glossary- and dictionary-style services (*). 
But I do think the standard should require a link to the "source" of the annotation in all cases where it isn't actually stored by the link server itself, so the user can independantly verify the integrity of the data it receives. 
(*) Imagine just hitting a button in your browser to transform each and every word on the current page into a specially selected link to the corrosponding entry in one of many online dictionaries... 
Bjarni R. Einarsson PGP: 02764305, B7A3AB89 bre@netverjar.is - - http://www.mmedia.is/~bre/ 
Netverjar gegn ruslp?sti: 
http://www.netverjar.is/baratta/ruslpostur/ 
Correct on all counts. 
Again correct. 
Sorry, could you explain what you mean by "potato-filtering"? 
Yes, correct again. 
It seems you've perfectly understood everything about how Crit works! 
This is good news to me. 
Indeed, these three things had to be designed into Crit. 
File format: Crit has a file format -- an extremely simple one. 
Transport: Crit currently provides a simple CGI transport which is used by the "CritMap" application for making link maps. 
Fine-grained link format: Crit has one that was designed to be robust despite editing and backward-compatible with existing HTML links; see the draft RFC on the site. 
To see all of these things in concert, try lynx -source 'http://crit.org/links.cgi/http://www.mozilla.org/?backward=1' 
I should add one more thing about the fine-grained link format -- something that i wish i didn't have to say. 
Unfortunately, the XPointer specification, though at one point it seemed simple and perhaps comprehensible, has only grown increasingly complicated over the past year. 
It seems to be a moving target -- every time i go back and check on it, it seems to be based on a different language. 
It appears to have been thrown out and rewritten several 
times -- and it still seems to be in flux. 
The current draft is nearly 90 kilobytes in length, and appears to depend on another entity, the XPath, whose specification is over 100 kilobytes long. 
Crit was designed and implemented before XLink and XPointer existed. 
The draft RFC for its syntax is only about 13 kilobytes. 
The syntax is so simple that you could look at a URL and guess what it means. 
Yet, the last time i checked, the enormous XPointer syntax was still incapable of doing the simple and essential thing that the Crit syntax does: word-by-word string comparisons. 
Wayne Gramlich and i have repeatedly requested that the string match operator disregard whitespace and/or punctuation and we have been ignored. 
Until it can do this very simple and straightforward task, i am skeptical of XPointer's suitability for annotations. 
I really hope that this gets fixed in XPointer, and that somehow, somewhere, someone takes a minimalist's perspective on the XPointer standard and whittles it down so that ordinary people can grasp the whole thing and actually use it effectively. 
I am *not* claiming that Crit's link syntax is the ideal design. 
I'm sure one could do better. 
But it works, and it's been doing the job fine for two years while people have been arguing academic issues about XPointer behind closed doors! 
Nothing will ever happen until people get out of the meeting room and get off their butts and write code -- and i'm afraid we won't see open implementations for it in browsers if it stays that complicated. 
-- ?!ng "Happiness isn't something you experience; it's something you remember." -- Oscar Levant 
I can report that the basic 3V annotation encoding format uses *some* XML. 
While the poster, title, and content are wrapped in XML tags, the other fields are wrapped using the '|' as a delimiter. 
I have been able to decode most of these unnamed fields. 
Pointer-reference uses an XPointer-inspired system for navigating through tags. 
I just don't understand. 
Why waste all this tremendous effort trying to deconstruct the secret 3V protocol when Crit provides a simple and clearly-documented protocol and complete source code? 
-- ?!ng "Happiness isn't something you experience; it's something you remember." -- Oscar Levant 
JG All we've got is the 3V protocol. 
JG [...] JG I'd like to have an OpenSource clone to work with the 3V protocols. 
Ok. FTR, Bjarni &amp; I were going into the details about my rev-eng'ing the ThirdVoice protocol. 
I got a good head start on the project, but the brash sunny weather for the last weekend in August drew me outside enough to preclude me from getting the time to nicely format my notes. 
Give me a few more days... I can report that the basic 3V annotation encoding format uses *some* XML. 
While the poster, title, and content are wrapped in XML tags, the other fields are wrapped using the '|' as a delimiter. 
I have been able to decode most of these unnamed fields. 
Pointer-reference uses an XPointer-inspired system for navigating through tags. 
Anyway, I set ThirdVoice another friendly note to see if they could release their protocol specifications. 
The protocol exists, there must be more than one brand of client and more than one brand of server which supports it! 
A protocol, once out-ed, must not be tied to particular clients! 
If there is any lesson that the Internet has brought to me, that is it, and I will not rest! 
This is the 3V client, not the protocol. 
The client alternately can present the threaded posts with the help of a collapsible-outline GUI. 
Correct. 
You have just described the "fascist-server scenario," which is not inherent to ThirdVoice; it is possible with *any* Internet service. 
What defeats the Fascist Server is Comparative Trust. 
If I no longer trust my current webserver/mailserver/newsserver, I can simply use the free market to switch to a server I trust more. 
What defeats Comparative Trust are Fascist States, and to some extent media oligarchies, but that's outside our purview. 
That's my plan. 
If you can translate the "Annotator" from the CritLink Mediator, to a client plug-in or local proxy, I'd like to see that. 
Yes, much agreement in that. 
(Though it is more accurate to say "mime-type" and "encoding format" than "file format".) 
Ok. Comparative trust: I don't think I'm going to trust Ann's annotation server any less than I do the integrity of the user account of Noah (who posted the note) on Webster's web hosting service. 
If I need better trust, give me Noah's note signed with his DSig. 
Back on May 20th, Steve Epstein of Sentius announced a product which can do just this. 
I pointed out that it didn't fit in well with WWW standards, to which he acknowledged, and to which I took it upon myself to write a standards-based prototype. 
And yes, my immediate career goals are to get a staff to help me write all this code. 
:-) Jon Jon Garfunkel ............................... Software Engineer ................................. GTE Internetworking /Powered By BBN/ ...... Burlington, Mass ........... 
Does anyone know how to UNSUBSCRIBE from www-annotation list? 
Thanks, and sorry for mailing this to everyone. 
== Luka Pensa - Pensa Ltd. =========== luka@pensa.hr - http://www.pensa.hr 
== ============ carving the future(tm) == 
I defined this term earlier in the message - I meant on-the-fly filtering and censorship of the annotation text itself, performed by the remote mediator or annotation server. 
The example I took was a mediator admin who didn't like the word "potato", so he had it filtered from all annotations. 
The Crit architecture doesn't have this problem (although the current implementation does), since the "mediator" functionality could easily be local, and thus under complete user control. 
[... about XPointers ...] 
Ugh. That sounds terrible, and does not inspire confidence. 
I would tend to agree that something minimalistic would be more appropriate. 
Nobody talks about the problems involved with a proxy (local, remote or like Crit "mediator"). 
They all have one problem in common : they may not work with Web pages containing Java applets which need to read/write data from/to their original server. 
I don't know if this can be fixed, but I don't see how. 
Any comments would be appreciated. 
If the normal HTTP proxy syntax is used, you will have the exact same level of functionality as people stuck behind a "traditional" firewall/proxy implementation. 
If applets don't work in such an environment then I'd venture that they were broken by design already, considering how pervasive proxies are - especially where people are doing Real Work and not just surfing... 
Also, please note that Crit doens't work with FRAMES. 
A last problem which Crit is that it MODIFIES THE URL. 
You don't have this problem with other proxy-based programs. 
This is true - but it's an implementation issue, not an architectural one. 
The current Crit implementation is a balanced trade-off between creating a "flawless" system and one that works with the WWW today. 
Tighter integration with the user's browser would eliminate this problem - but that doesn't mean we can't take advantage of the rest of Crit's current functionality. 
I think Crit would make a really good annotation server, but we should agree on a standard for client - annotation-server communication as soon as possible so better clients can be written that work with Crit, and will also work with any new servers people come up with. 
I really think that the client-side architecture is the best one. 
Of course, it may not work with all existing browsers, since it requires a different implementation in each one. 
But look at the advantages : - you don't have to update your parser to handle annotations on new formats (HTML... , XML, others ?) 
Why not? 
I don't understand how putting the code in the browser suddenly makes it irresistant to change... ? 
[... about 3V ...] 
But the biggest problem is that it works with a central, CONTROLLED server 
Agreed! 
Someone wrote that Crit doens't have this problem : of course it does. 
Your annotations are stored on the Crit Server, 
No, that's not mandatory. 
Check again - the mediator allows you to reference documents anywhere online, not just on Crit's local web site. 
Crit nicely provides unguaranteed storage to make using the system easier, but it isn't required. 
There is already a way to annotate the Web : you just write a web page with links to the pages you want to annotate. 
Exactly - we agree again, and so does Ping. 
Isn't that nice? 
:-) Someone here (sorry, I forgot the name) was going to draft an XML specification for client - annotation-server communication. 
I'm looking forward to seeing it. 
:) Bjarni R. Einarsson PGP: 02764305, B7A3AB89 bre@netverjar.is - - http://www.mmedia.is/~bre/ 
This statement is false. 
(courtesy of POEE) 
