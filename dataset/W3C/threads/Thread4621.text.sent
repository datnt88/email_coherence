There appears to be an inconsistancy between the use of implementation-defined and same, without the hyphenation. 
I think the functions document uses it without hyphenation, others are more consistant. 
Rather more worryingly, a v.quick count of that string produces: In serialisation - 9 In data model -2 In functions - 20 In xpath 19 in xslt 50+ instances of one or the other. 
Is it really that fluid/up to the implementor. 
Regards DaveP. 
**** snip here ***** NOTICE: The information contained in this email and any attachments is confidential and may be legally privileged. 
If you are not the intended recipient you are hereby notified that you must not use, disclose, distribute, copy, print or rely on this email's content. 
If you are not the intended recipient, please notify the sender immediately and then delete the email and any attachments from your system. 
RNIB has made strenuous efforts to ensure that emails and any attachments generated by its staff are free from viruses. 
However, it cannot accept any responsibility for any viruses which are transmitted. 
We therefore recommend you scan all attachments. 
Please note that the statements and views expressed in this email and any attachments are those of the author and do not necessarily represent those of RNIB. 
RNIB Registered Charity Number: 226227 Website: http://www.rnib.org.uk 
Appendix E of the XSLT 2.0 specification lists 34 implementation-defined features, each individually numbered, so it's not clear how you did your counting. 
Looking through the list of 34 items, they all look reasonable to me. 
Most of them are things that were implementation-defined in XSLT 1.0, or are similar to things that were implementation-defined in XSLT 1.0. 
Broadly speaking, the implementation-defined features in XSLT fall into five categories: (a) the API for invoking the XSLT transformation and accessing its results (b) facilities deliberately provided for extensibility - the experience of XSLT 1.0 has shown that such facilities, provided in a controlled way, can greatly assist the adoption of the technology (c) error handling (d) interaction between the XSLT processor and its environment (e.g. interpretation of URIs) (e) localisation (e.g. collating sequences and date formats) In some other specs, there is an additional category, (f) arithmetic precision All these features have been left implementation-defined for a good reason, namely because we think it is warranted by variability in the user requirements or in implementation platforms. 
If you can identify specific things that you think should not be implementation-defined, then we can review the decision. 
It's hard to see what you expect us to do with a general observation that the number of implementation-defined features is too high. 
Michael Kay -----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1 / David.Pawson@rnib.org.uk was heard to say: I have made this consistent (without hyphenation) in the 12 Nov draft. 
Be seeing you, norm Norman.Walsh@Sun.COM / XML Standards Architect / Sun Microsystems, Inc. NOTICE: This email message is for the sole use of the intended recipient(s) and may contain confidential and privileged information. 
Any unauthorized review, use, disclosure or distribution is prohibited. 
If you are not the intended recipient, please contact the sender by -----BEGIN PGP SIGNATURE----- Version: GnuPG v1.2.3 (GNU/Linux) Comment: Processed by Mailcrypt 3.5.8 
http://mailcrypt.sourceforge.net/ 
iD8DBQE/skQXOyltUcwYWjsRAsUVAJ9PgrQAjnZcGxwwhY7Bo8ILQ1NokwCfaHfO /t+TA2jRPTx1ekOcpX0Fizc= =v4cM -----END PGP SIGNATURE----- 
