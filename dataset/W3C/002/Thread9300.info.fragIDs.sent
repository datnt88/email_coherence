I took an action at the last teleconference to write up alternative ways of resolving this issue. 
Option 1: No Change xml:lang attributes are considered to be 'part of' a literal. 
This is an issue that has caused some confusion amongst developers so we would need to write up a clarification of the specifications to explain more clearly what is going on. 
We would also need to modify n-triple to be able to represent the languague component of a literal. 
Advantages: This is the simplest resolution. 
It makes significant change to M&amp;S and existing RDF processors which implemented the spec will be unaffected. 
It requires only one triple to represent a property with a literal value. 
Disadvantages: Does not represent language as a triple so requires special purpose processing to support, for example query. 
Option 2: Anonymous resource An xml:lang attribute would trigger the creation of an anonymous resource with two properties, one to indicate the language and the other the value of the literal, e.g. becomes (please forgive the shorthand): 
_:a foo:bar _:b . 
_:b xml:lang "en" . 
_:b rdf:value "foobar" . 
Advantages: Uses standard triple representation so needs no special handling for query or model processing. 
Disadvantages 
Properties with a language attribute are represented by a different triple structure from those without (though those without could be represented in a similar structure with the xml:lang property omitted). 
Requires three triples to represent a literal property value instead of 1. 
Is a change to what M&amp;S currently specifies. 
Interacts with the interpretation of rdf:ID, e.g. 
The rdf:ID attribute doesn't seem to identify quite the same thing it did as specified in M&amp;S. 
Option 3: Encode the language in the property Define a mapping from URI X language - URI which given the URI of a property and a language will generate the URI of a sub-property which encodes the language attribute, e.g: becomes: _:a foo:bar-en "foobar" . 
Disadvantages This doesn't work. 
We don't own the namespaces in which properties are defined so have no right to go reserving sections of them. 
This solution also relies on the schema concept of subPropertyOf. 
ITS JUST HORRIBLE! 
Option 4: Language Specific SubProperties Encode the language attribute in the property, but require the user to define the language specific sub-properties. 
Disadvantages: Relies on an RDF Schema concept. 
No easy way to query for all properties with an English value. 
Option 5: Interpretation Properties Define a standard modeling technique and set of properties, so that instead of writing: This option can be combined with option 1, or alternatively the current processing of xml:lang may be withdrawn and this option recommended in its place. 
Advantages less overhead than option 2 does not rely on RDF Schema concepts straightforward can query for all properties with an English value. 
no special handling required Disadvantages This is a change to what is described in M&amp;S. 
Option 6 Automatic Interpretation Properties Interpret xml:lang attributes to generate the structure of option 5. becomes: _:a foo:bar _:b . 
_:b lang:en "cat" . 
_:b lang:fr "chat" . 
We could define this behaviour, however there is no guarantee this is what the author meant to express, e.g.: Here the author means to express that there are two different guests, one called Aaron and the other called Pierre. 
So ruled out because it does not work. 
Option 7 Do nothing for now and Reconsider along with Type's We are chartered to consider how to use XML Schema data types in RDF models. 
This issue might best be considered at the same time. 
Brian 
I think this is really another option -- I'll call it 2b: _:a foo:bar _:b . 
_:b rdf:value "foobar" . 
Can we have a straw poll on what people want to go with? 
My vote (in order of preference): 2 (anonnode w/ xml:lang), 2b (anonnode always), 5 (remove it and recommend something else). 
I just liked this comment... it's definitely how I feel sometimes. 
:-) 
[ "Aaron Swartz" ; mailto:me@aaronsw.com ; http://www.aaronsw.com/ 
] 
Yup. 
Its not as easy as that. 
Remember the charter. 
We are not allowed to change things just because we would have done it differently. 
We have estblished (I claim) that the use of xml:lang in M&amp;S is not broken (there are several implemenations). 
We have also established that it is useful (Jan's use case). 
That makes it a bit tricky to justify changing it. 
On what grounds are you proposing to justify a change. 
I'd rather see further analysis of pros and cons before we get to that. 
Hardly rational and scientific. 
My excuse is it was getting late after a long day. 
Brian 
Another possible disadvantage?: not all literals are in some language. 
It doesn't really make sense to specify a language for, say, a decimal number or a MIME type string. 
Thus, we have some literals whose interpretation is 
dependent on an associated language attribute, and others whose interpretation may depend on other factors. 
#g Graham Klyne Baltimore Technologies Strategic Research Content Security Group 
Why not say that the language for those things is RDF? 
Pat Hayes (650)859 6569 w (650)494 3973 h (until September) phayes@ai.uwf.edu 
attribution's broken, but... 
this is not a disadvantage (from the POV of query languages) - in my opinion it means you get to express more clearly what you're looking for. 
One can envisage a number of properties of literals that you might wish to express constraints on in a query language (eg, "  4") that you don't necessarily wish to write out with triples; certainly even if you _did_ write them out, you'd need special processing to deal with them. 
jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ 
On modesty: whoever said "it's hard being perfect" obviously wasn't me. 
Because the definition of xml:lang (which is the defined syntax whose meaning we are trying to capture) is that the language code used is as defined by RFC 1766, now obsoleted by RFC 3066, which says: 2.4 Meaning of the language tag The language tag always defines a language as spoken (or written, signed or otherwise signaled) by human beings for communication of information to other human beings. 
Computer languages such as programming languages are explicitly excluded. 
There is no guaranteed relationship between languages whose tags begin with the same series of subtags; specifically, they are NOT guaranteed to be mutually intelligible, although it will sometimes be the case that they are. 
#g 
Graham Klyne Baltimore Technologies Strategic Research Content Security Group 
Christ Almighty. 
That is so unbelievably stupid that we should ignore it deliberately, I suggest. 
Whoever wrote that must have a humanities degree and is probably waging a private war against the dehumanisation of postmodernism. 
It presumes that programming languages are incomprehensible to humans; it presumes that there is a clear conceptual distinction between information exchange between humans and between other information processors; it presumes that 'intelligibility' is meaningful without explanation, and it presumes that XML has no utility beyond human text markup. 
It is an intellectual fossil. 
If anyone objects to RDF as a tag on these grounds, just tell them that you know at least two people who use it for communication between themselves (I volunteer to be one of them), and cite De Sassure, Wittgenstein and Quine as authorities to justify this as sufficient to qualify it as a human language. 
Or tell them that RDF is actually a sublanguage of Math, which has been used for communication between humans numbering in the millions for about 400 years. 
Pat PS. 
After writing the above, I checked out RFC1766, and it is clear that that document is entirely concerned with XML's use as a text markup language, where 'text' means text aimed at direct human use. 
It uses as guiding examples problems of maintaining a coherent international user interface, eg - In markup languages, such as HTML and XML, language information can be added to each part of the document identified by the markup structure (including the whole document itself). 
For example, one could write span lang="FR" C'est la vie. 
/span inside a Norwegian document; the Norwegian-speaking user could then access a French- Norwegian dictionary to find out what the marked section meant. 
If the user were listening to that document through a speech synthesis interface, this formation could be used to signal the synthesizer to appropriately apply French text-to-speech pronunciation rules to that span of text, instead of misapplying the Norwegian rules. 
However, XML has many other uses now, and many of them are incompatiable with the limited suite of uses contemplated in RFC1766 (eg formal specification of syntax; RDF). 
In particular, RDF is not intended to be read by human users, but by software agents, a fact which by itself seems to render RFC1766 irrelevant. 
I would suggest therefore in all seriousness that we consider simply rejecting RFC1766 as inappropriate to our intended domain of use. 
Pat Hayes (650)859 6569 w (650)494 3973 h (until September) phayes@ai.uwf.edu 
Pat, The original RFC 1766 was not written with XML in mind. 
Indeed, it pre-dates the original XML recommendation by 3 years, and was designed for a different environment. 
Many Internet protocols have some elements that exist for machine-to-machine communication, and other elements that exist headers carry addresses are there to get the mail delivered to the right mailbox. 
Other fields such as Subject: carry information for human consumption. 
The intent is that fields intended for human consumption have language tags so they can possibly be translated for different audiences, or presented through speech synthesis, or handled in some other sender- or recipient-language-dependent way. 
The distinction is similar to that between XML element names and XML (PCDATA) element content. 
That said, I do appreciate your point that it is arbitrary to exclude RDF, and the language might have been softened in RFC 3066, which does acknowledge XML. 
I also expect that the authors didn't anticipate situations where the content could be either human- or machine language. 
That would be very unusual in a lower-level network protocol. 
BTW, the likely tag, if registered with IANA, would be 'i-RDF'. 
Three-letter tags are reserved for those approved by one of the other international standard bodies. 
I'll see if I can get some more background on the thinking when I'm at the IETF meeting in a couple of weeks. 
You also say: 
I would suggest that this is an argument to not use xml:lang as the primary indicator of the language of a literal. 
If there were no xml:lang attribute, I suspect the "obvious" way to indicate language would be with RDF properties (e.g. per TimBL's interpretation properties [1]). 
Surely, the "Web Way" to designate a language should use a URI? #g [1] http://www.w3.org/DesignIssues/InterpretationProperties.html 
Graham Klyne Baltimore Technologies Strategic Research Content Security Group 
