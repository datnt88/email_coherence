The last paragraph of section 4 currently reads: Since a redirect reference resource is a resource, it can have its own properties and body, and methods can be applied to the reference resource as well as to its target resource. 
The Apply-To-Redirect-Ref request header (defined in Section 11.2 below) is provided so that referencing-aware clients can control whether an operation is applied to the redirect reference resource or to its target resource. 
The Apply- To-Redirect-Ref header can be used with most requests to redirect reference resources. 
This header is particularly useful with PROPFIND, to retrieve the reference resource's own properties. 
Given the numerous changes I request in my comments the previous description 
is no longer accurate. 
I also felt that it didn't provide a sufficiently 
broad overview of the total functionality provided by redirect resources. 
Below I provide several paragraphs that I suggest replace the previous one: 
Redirect resources are resources and thus have their own state. 
However the default response of a redirect resource to all methods is a 302 (Found). 
A mechanism is needed that instructs the redirect resource to handle a method directly rather than blindly responding to it with a 302 (Found). 
The Apply-To-Redirect-Ref request header (defined in Section 11.2 below) provides such a mechanism. 
For example, if a user issues a PUT request without the Apply-To-Redirect-Ref request header then the redirect resource will respond with a 302 (Found). 
However, if the redirect resource supports PUT and if the requestor is properly authorized then a PUT issued to a redirect resource with a Apply-To-Redirect-Ref header will result in the body of the PUT request being stored for future response to a GET request, assuming the GET has a Apply-To-Redirect-Ref header. 
Please note that it is perfectly legal for the response to a request to a redirect reference resource with the Apply-To-Redirect-Ref header to result in a 302 (Found). 
In this case the 302 (Found) will not be a blind response but rather will be the correct result of the method. 
Also note that such a response would not include a redirect-ref header. 
Yaron, wouldn't it be easier to just write your own version of the reference spec and propose that in its entirety? 
There is a point beyond which many small deltas are less efficient than a complete entity, and you passed that a few messages ago. 
....Roy [I am agreeing with most of your comments] 
In a number of your comments, you suggest that we use the expression "blind response" to characterize the 302 that you get back from a redirect reference resource. 
Can you say more about what you are trying to convey with "blind"? 
In this message, it looks as if it is supposed to contrast with the 302 you would get back from a non-redirect-reference-resource. 
How is one of these responses more blind than the other? 
Or perhaps I'm just off on the wrong track altogether. 
Thanks. 
--Judy The last paragraph of section 4 currently reads: Since a redirect reference resource is a resource, it can have its own properties and body, and methods can be applied to the reference resource as well as to its target resource. 
The Apply-To-Redirect-Ref request header (defined in Section 11.2 below) is provided so that referencing-aware clients can control whether an operation is applied to the redirect reference resource or to its target resource. 
The Apply- To-Redirect-Ref header can be used with most requests to redirect reference resources. 
This header is particularly useful with PROPFIND, to retrieve the reference resource's own properties. 
Given the numerous changes I request in my comments the previous description 
is no longer accurate. 
I also felt that it didn't provide a sufficiently 
broad overview of the total functionality provided by redirect resources. 
Below I provide several paragraphs that I suggest replace the previous one: 
Redirect resources are resources and thus have their own state. 
However the default response of a redirect resource to all methods is a 302 (Found). 
A mechanism is needed that instructs the redirect resource to handle a method directly rather than blindly responding to it with a 302 (Found). 
The Apply-To-Redirect-Ref request header (defined in Section 11.2 below) provides such a mechanism. 
For example, if a user issues a PUT request without the Apply-To-Redirect-Ref request header then the redirect resource will respond with a 302 (Found). 
However, if the redirect resource supports PUT and if the requestor is properly authorized then a PUT issued to a redirect resource with a Apply-To-Redirect-Ref header will result in the body of the PUT request being stored for future response to a GET request, assuming the GET has a Apply-To-Redirect-Ref header. 
Please note that it is perfectly legal for the response to a request to a redirect reference resource with the Apply-To-Redirect-Ref header to result in a 302 (Found). 
In this case the 302 (Found) will not be a blind response but rather will be the correct result of the method. 
Also note that such a response would not include a redirect-ref header. 
Ideally I would have just rewritten the draft and included comments explaining why I changed from the original draft. 
I just didn't have the time. 
=( BTW, I talked with Jim and Geoff and told them that I was leaving MS (yes, they knew before the mailing list =) and that I would have zero time. 
I indicated that the best I could do with the drafts is dive bomb in a bunch of comments and I probably wouldn't even have time to respond to comments on my comments. 
I asked them if they preferred if I just said nothing. 
They asked me to post the comments, so I did so. 
I am trying now to find a little time to respond to comments but closing up my job at MS and moving to a start up is eating all my time. 
Yaron 
From: Roy T. Fielding [mailto:fielding@kiwi.ICS.UCI.EDU] Sent: Sat, February 12, 2000 6:01 PM Subject: Re: Yaron.Redirect.Sec4LastPar 
The term "blind response" is meant to convey the idea that the redirect resource, once it determined that there isn't a pass-through header, blindly, without any thought, responds with a 302. 
I introduce the "blind response" phrase to pull away from the "automatic response" phrase because the "automatic response" phrase gives me the idea that rather than return a 302 the resource will actually act as a sort of proxy for the request and forward it itself to the target and return the response. 
I'm just trying to avoid confusing the reader. 
