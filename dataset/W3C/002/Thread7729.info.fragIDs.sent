Here is my feedback on the latest goals document for WebDAV Versioning. 
Definition #2 - Versioned Resource - We don't specify that this is an actual object, but later in the goals we refer to it having a URL. 
Also, is it or is it not intended that this resource would have specific properties that represent the entire set of revisions? 
For instance, in our DMS we allow a document owner to specify an "Official" revision, which may or may not be the latest. 
A label could be used, but I would like to get such a property from a central place (the Versioned Resource) rather than have to search for the label across all revisions. 
Definition #4 - Working Resource - It says a "working resource can become a new..." The meaning of 'can' isn't clear to me. 
Is this a may-or-may-not? 
Definition #8 - Label - The definition isn't clear on the uniqueness. 
I believe the uniqueness applies only within a single versioned resource, not across any larger namespace. 
One of the goals makes this clearer by stating that a given label may be used on revisions of multiple versioned resources, so the definition ought to clarify "uniqueness." 
Goal #1 - Right near the end it states "a non-versioning aware client should be able to PUT to a versioned resource and have a new revision be automatically created." 
I agree with this, but want to make sure that somewhere we clarify what this really implies, or simply state that the server can deal with this however it desires. 
If a server supports this, how does that interact with what others may be doing with that resource? 
The non-versioning aware client is blind to the intricacies of activities and configurations, and it seems this will present some problems we may need to consider. 
Goal #1 (again) - The last sentence says a subsequent GET on the same versioned resource by this client should return the new version. 
How can this be guaranteed? 
What if the PUT forced a branch? 
How does a GET know what branch if the client is non-versioning aware? 
Goal #11 - This should not specify HTML, but rather indicate any document that contains URL links should be able to use relative URLs. 
Goal #13 - This sounds too much like we are setting a DASL goal/requirement. 
Can we word this such that it is clear that Versioning needs to make these properties conform to DASL such that a DASL query automatically has access to this info. 
Or does our requirement truly require something to be added or changed in DASL? 
Goal #14 - Let's get rid of the "DM / CM" distinction and just go with "Level 1" and "Level 2" versioning. 
Then I would reword this goal to something like, "It must be possible to implement Level 1 versioning without having to implement any part of Level 2 versioning." 
Goal #15 - Immutable Properties are never defined. 
Goal #15 (again) - The last sentence of the goal portion, "It must be possible to determine...", sounds like a separate goal. 
Goal #15 (again) - Is there an important reason why mutability is being defined at the revision level? 
Why not greatly simplify and declare this at the collection level? 
I think it is very confusing to mix within a collection, and having to check this on every resource I access seems cumbersome. 
Goal #17 - I don't agree with this. 
Why can I not delete a given revision while leaving the rest intact? 
For CM there are probably valid reasons, but 1) in the DMS world this is done frequently, and 2) what if I just want to clean up some old, non-important part of the set? 
I frequently delete older revisions but rarely delete newer ones. 
Goal #23.1 - Some systems, if they support versioning, have no concept of an unversioned resource and a versioned resource. 
When a new document is created it is, from its inception, a versioned resource with a single revision. 
The goals &amp; protocol need to support this type of environment. 
Here's more feedback... [Note that I reference Bruce's comments and Jim's replies] - Jim: Excellent work pulling this together - Thanks! - It would be great if the scenarios were numbered - In "Creating a Versioned Resource": we talked about not using CHECKIN as the way this occurs. 
I would like to re-iterate that I think we should have a separate method. 
- I'm worried that the scenarios and goals assume that there are workspaces and activities. 
We have had some mail exchanges on the subject and I thought I would mention here that I don't believe either should be visible to a Level 1 client. 
- I think we need a scenario for getting a specific revision. 
Joe lists the history and decides that the revision whose revision id is 32345 is the desired version. 
Joe's client directly obtains this revision from the server. 
- The "Parallel Development with Activities" section leaves one with the impression that you can only do parallel checkouts via activities. 
I believe that Level 1 must support parallel checkouts and shouldn't require activities. 
- The last paragraph of "Parallel Development with Activities" confused me. 
If one person wants to prevent checkouts, they would lock the versioned resource not the working resource. 
?? - I believe that the merge stuff is interesting but more complex than we need to address in the first draft of versioning. 
I think that we will find it difficult to agree on how you express the differences, the rules, communication, etc. 
I would rather address this stuff in a subsequent draft/effort after we get some of the simple concepts handled. 
- Same comment for the last paragraph of "Creating a Configuration" -- this walks into the merge path. 
- I don't understand how the "Changing a Revision" section is different from "Editing a Mutable Revision". 
Aren't they saying essentially the same thing? 
Or did I just miss it? 
:-) - The "Accessing Resources by Non-Versioning Aware Clients" assumes there is always a workspace notion. 
If we are describing this as a model, OK, but if the client or server have to know about this for Level 1, I think this is an issue. 
See previous mail. 
- Several times the revision "label" is used. 
I think people will often want to use the revision "id". 
- The last paragraph of "Updating Resources by Non-versioning Aware Clients" goes into a discussion of workspaces and activities. 
I assume that a down-level client knows neither. 
- Can we add a scenario about configurations related to other configuration? 
Alice is using the Beta1 configuration and finds a bug. 
She fixes the bug and checks it in. 
She creates a new configuration, Beta1a which consists of the "Beta1" configuration plus the changes in the "Bug1223" activity. 
- Goal 1: I agree with Bruce that a down-level PUT could result in the server automatically branching. 
- Goal 5: I believe this is needed. 
We see several usage scenarios where different revisions are checked out simultaneously. 
- Goal 15: In response to Jim's update to this goal -- I believe that both live and dead properties can be mutable (or immutable). 
- Goal 17: I agree with Bruce that you should be able to delete a revision without deleting its successors. 
However, I'm fine with saying that a server MAY refuse the request. 
- I think we need a Goal 22.5 that states that simple parallel development must be possible without activities. 
- Goal 23.1, bullet 2: I should be able to use a revision id as well - Goal 23.1, bullet 3: I should be able to checkout and create a working resource without using activities. 
- Goal 23.2, bullet 3: I think this should be "revision labels" since there can only be a single revision id and this section is all about labels. 
- Goal 23.3, bullet 3: I don't think we should be addressing merge at this point. 
We should constrain the problem so that we can generate a protocol. 
We can then layer merge semantics on top in a separate draft. 
- Goal 23.4, bullet 3: I should be able to access a revision using the URL of the versioned resource and a configuration name since a configuration uniquely selects a single revision. 
- Goal 23.4, bullet 5: I would like to add into this that is must be possible for a client to determine this. 
My point is that the protocol doesn't need to support this exact operation if a client, using other mechanisms, can determine this information. 
- Goal 31: This should be true inside or outside of an activity. 
Thanks for all the hard work Jim, this is starting to come together. 
Chris 
I just signed up to this forum, thus I'm not up to speed as to the discussion at hand. 
We at DaimlerChrysler are very much interested in versioning of web content. 
Currently there is no consistent and automated process to promote and control versioning of web content from multiple suppliers (outside the firewall) and internal content creators. 
Web page templates are maintained by IS, however, site content is maintained, in many cases, by the customer community. 
We've estimated that manageability of Web content becomes extremely difficult after the site reaches 2000 pages. 
Some of our Intranet and Internet sites either have reached or are close to reaching that maximum. 
As a result of our recent merger, we have common web sites updated and administered, 7x24, on both sides of the Atlantic. 
All this has posed some interesting problems. 
I have read that the current release of WebDAV does not contain versioning. 
Are there any estimates/targets for when versioning can be expected? 
Please give me the URL for the document you are discussing. 
We have obvious versioning and authoring requirement. 
I'll match them up with what you've published so far. 
Then I'll respond to this forum with my comments. 
Fred Appel DaimlerChrysler ITM/Version Management E-mail: mga@daimlerchrysler.com Pager: mga-page@is.chrysler.com 
Chris Kaler ckaler@microsoft.com on 02/18/99 08:07:32 PM BCragun.ORM2-1.OREM2@GW.Novell.com , w3c-dist-auth@w3.org 
Subject: RE: Versioning Goals feedback Here's more feedback... [Note that I reference Bruce's comments and Jim's replies] - Jim: Excellent work pulling this together - Thanks! - It would be great if the scenarios were numbered - In "Creating a Versioned Resource": we talked about not using CHECKIN as the way this occurs. 
I would like to re-iterate that I think we should have a separate method. 
- I'm worried that the scenarios and goals assume that there are workspaces and activities. 
We have had some mail exchanges on the subject and I thought I would mention here that I don't believe either should be visible to a Level 1 client. 
- I think we need a scenario for getting a specific revision. 
Joe lists the history and decides that the revision whose revision id is 32345 is the desired version. 
Joe's client directly obtains this revision from the server. 
- The "Parallel Development with Activities" section leaves one with the impression that you can only do parallel checkouts via activities. 
I believe that Level 1 must support parallel checkouts and shouldn't require activities. 
- The last paragraph of "Parallel Development with Activities" confused me. 
If one person wants to prevent checkouts, they would lock the versioned resource not the working resource. 
?? - I believe that the merge stuff is interesting but more complex than we need to address in the first draft of versioning. 
I think that we will find it difficult to agree on how you express the differences, the rules, communication, etc. 
I would rather address this stuff in a subsequent draft/effort after we get some of the simple concepts handled. 
- Same comment for the last paragraph of "Creating a Configuration" -- this walks into the merge path. 
- I don't understand how the "Changing a Revision" section is different from "Editing a Mutable Revision". 
Aren't they saying essentially the same thing? 
Or did I just miss it? 
:-) - The "Accessing Resources by Non-Versioning Aware Clients" assumes there is always a workspace notion. 
If we are describing this as a model, OK, but if the client or server have to know about this for Level 1, I think this is an issue. 
See previous mail. 
- Several times the revision "label" is used. 
I think people will often want to use the revision "id". 
- The last paragraph of "Updating Resources by Non-versioning Aware Clients" goes into a discussion of workspaces and activities. 
I assume that a down-level client knows neither. 
- Can we add a scenario about configurations related to other configuration? 
Alice is using the Beta1 configuration and finds a bug. 
She fixes the bug and checks it in. 
She creates a new configuration, Beta1a which consists of the "Beta1" configuration plus the changes in the "Bug1223" activity. 
- Goal 1: I agree with Bruce that a down-level PUT could result in the server automatically branching. 
- Goal 5: I believe this is needed. 
We see several usage scenarios where different revisions are checked out simultaneously. 
- Goal 15: In response to Jim's update to this goal -- I believe that both live and dead properties can be mutable (or immutable). 
- Goal 17: I agree with Bruce that you should be able to delete a revision without deleting its successors. 
However, I'm fine with saying that a server MAY refuse the request. 
- I think we need a Goal 22.5 that states that simple parallel development must be possible without activities. 
- Goal 23.1, bullet 2: I should be able to use a revision id as well - Goal 23.1, bullet 3: I should be able to checkout and create a working resource without using activities. 
- Goal 23.2, bullet 3: I think this should be "revision labels" since there can only be a single revision id and this section is all about labels. 
- Goal 23.3, bullet 3: I don't think we should be addressing merge at this point. 
We should constrain the problem so that we can generate a protocol. 
We can then layer merge semantics on top in a separate draft. 
- Goal 23.4, bullet 3: I should be able to access a revision using the URL of the versioned resource and a configuration name since a configuration uniquely selects a single revision. 
- Goal 23.4, bullet 5: I would like to add into this that is must be possible for a client to determine this. 
My point is that the protocol doesn't need to support this exact operation if a client, using other mechanisms, can determine this information. 
- Goal 31: This should be true inside or outside of an activity. 
Thanks for all the hard work Jim, this is starting to come together. 
Chris 
