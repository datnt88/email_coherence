Accidentally caught by the spam filter. 
- Jim Hi, First how do i join the list, just came accross it. 
Second i have a java implementation of a webdav server running on resin (webserver). 
Resin allows one to specify character encoding in the conf file. 
However when used with other webservers or OS ( using windows just now) it isnt possible to set the character encoding. 
Therefore when my windows explorer client sends the encoded request the server doesnt recognise it and spits out a bad request 400. 
DO i now have to go and implement the character encoding too? 
Is this even the correct list to ask this question. 
Cheers Andy 
Hi. 
I assume you're having a problem with charset encoding in HTTP request-line and HTTP header. 
I don't know if this encoding issue has been discussed in the past, but I believe the general consensus is to use UTF-8 in any case. 
I think there's some notes on this issue in rfc2396 and rfc2277 (can anyone correct me?). 
As there is no way to transmit encoding information for HTTP request-line and HTTP header, this seems to be the only solution. 
Of course, the problem is that not all clients/servers actually follow this scheme - older implementation tends to transmit (or expects to receive) whatever the encoding it uses locally. 
This obviously causes interoperability problem when non-ASCII named resource is used. 
I currently get around the problem by plugging an encoding detection/conversion filter in the server I'm running. 
This problem was not apparent (or critical) before WebDAV, because 
it was not a common practice to give non-ASCII URL to web browsers. 
Only after the WebDAV, the Web become writable as "filesystem", and people started to use non-ASCII filenames. 
Taisuke Yamada tai@iij.ad.jp Internet Initiative Japan Inc., Technical Planning Division 
Hi. Regarding the use of WebDAV in i18n environment, I am assuming that WebDAV spec will be updated (hopefully soon) to refer IRI and CHARMOD. 
IRI defines i18n-ized format of URI and CHARMOD defines how you can define/implement a spec so it can be inter- nationally deployed. 
Am I correct, or is this not a decided issue yet? 
My current concern is that these specs are taking longer than expected (no surprise as they're tackling complex problem). 
So by the time they arrive, it could turn out that existing implementations (with glitches in i18n) reached a critical mass and simply don't go away after all. 
Number of implementations supporting UTF-8 is growing, but even some of them are still not interoperable as Unicode has its own issues also (see CHARMOD). 
It's probably just a matter of time, but the need for a updated WebDAV spec is really wanted. 
I believe delay in IRI and CHARMOD would impact WebDAV heavily as people frequently use i18n URI. 
How does it sound to go ahead and clarify support of at least part of the IRI spec in advance, so actual implementation wouldn't be so far away from CHARMOD/IRI when set? 
I think clarifying URI (and its partial representation) to be %HH encoded form of normalized UTF-8 is a key issue here. 
References: [IRI] http://www.w3.org/International/O-URL-and-ident [CHARMOD] http://www.w3.org/TR/charmod/ Regards, Taisuke Yamada tai@iij.ad.jp Internet Initiative Japan Inc., Technical Planning Division 
I think that it would be great if the WebDAV spec could be clear about encodings in URIs, and the relationship between the HTTP URIs used in the protocol and the XML strings used in enumerations of collections. 
I'm not sure you need to make a normative reference to either the IRI spec or CHARMOD to do so, if you're concerned about establishing an unnecesary schedule dependency. 
This is because the IRI spec doesn't actually say the things that WebDAV needs to say in order to get interoperable implementations -- what is the expected behavior of WebDAV user agents when showing strings to the users? 
This has been an issue in interops already, not just for I18N, but also for simple URL encoding, e.g., of file names with spaces in them. 
Larry 
OK, what do we need to specify: 1) display of member names in collections: take the last URI segment, then URL-unescape, then UTF-8-decode 2) creation of new resources: 2a) all URI segments MUST be UTF-8-decodable after URL-unescaping 2b) if the "local display name" (for instance document name when typing into file selector box) contains non-ASCII characters, it MUST be UTF-8 encoded then URL-escaped. 
3) Forbid member names in collections that aren't Unicode-normalized after URL-de-escaping and UTF-8-decoding. 
Opinions? Julian 
Yes, these should cover most of the requirements. 
But rather than specifying each case separately, it might be easier to say all strings derived from, or related to resource URI to fullfill following requirements: - All URI segments MUST be URL-escaped after converted into "normalized form" of UTF-8 string. 
- Each implementation MUST do the necessary conversion between above form and "local representation" of the resource (name typed in selector box, name stored on client/server filesystem, etc.). 
For 2b, you don't need to handle ASCII/non-ASCII cases separately since UTF-8 covers ASCII. 
Also, adding notes on several HTTP headers such as Destination: and Status-URI: might be needed as they seem to be protocol-specific headers. 
Regards, Taisuke Yamada tai@iij.ad.jp Internet Initiative Japan Inc., Technical Planning Division 
