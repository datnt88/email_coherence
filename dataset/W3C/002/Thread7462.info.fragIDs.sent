This is a proposal to modify WebDAV to include support for ordered collections. 
I have already stated the case for this feature elsewhere, and Jim Whitehead has neatly summarized it. 
Moreover, I believe I have refuted all objections thus far raised to it without being (as yet) further rebutted. 
I agreed to define the proposal more formally, and here I do so, although the credit for this definition more properly goes to Judy Slein, who did all the work, but as she was too busy to write it up, I am submitting it. 
Of course she should not be blamed for the errors I introduce here. 
The idea in a nutshell is to allow servers to optionally support collection resources whose stats includes not only the list of members but also the which order of members in the list. 
It also includes headers that specify the position of a newly added member in an ordered collection. 
The proposed modifications are in order of textual occurrence in draft V5. Change 4.1 (Collection Resources) as follows: Replace the first sentence: A collection is a resource whose state consists of an unordered list of internal members, an unordered list of external members, and a set of properties. 
with: A collection is a resource whose state consists of a list of members and a set of properties. 
Members MAY be internal or external. 
Servers MAY also extend the state to include the order of the members in the list. 
Such collections are known as "ordered" collections. 
and add after the next two paragraphs: Servers MAY support ordered collections. 
If they do, they MAY allow both ordered and unordered collections. 
8.1 PROPFIND Modify this paragraph by adding the sentence marked with change bars The response is a text/xml message body that contains a multistatus XML element that describes the results of the attempts to retrieve the various properties. 
If a property was successfully retrieved then its value MUST be returned in a prop XML element. 
If the scope of PROPFIND covers more than a single resource, as is the case with Depth values of "1" and "infinity", each response XML element MUST contain an href XML element which identifies the resource on which the properties in the prop XML element are defined. 
If the resource is a collection, and if the collection is ordered, then the response XML elements must be returned in the order in which they appear in the collection. 
In the case of allprop and propname, if a principal does not have the right to know if a particular property exists, an error MUST NOT be returned. 
The results of this method SHOULD NOT be cached. 
8.3 MKCOL Add after the third paragraph of 8.3.1 
If the Is-Ordered header is present, then if the server supports ordered collections, then the value of the is-ordered property of the newly created collection MUST be the same as the value in the header. 
If the server does not support ordered collections, then if the value in the header is T, then the request should fail with a 501 Not Implemented status code. 
If the Is-Ordered header is not present, then if the server supported ordered collections, it MAY create an ordered collection. 
8.4.1 (INDEX) modify the paragraph, adding the sentence: Collections that respond to an INDEX method with a text/xml entity MUST contain a single multistatus XML element which contains a response XML element for each member. 
If the collection is ordered, then the elements must occur in the same order they occur in the collection. 
8.5.1 ADDREF Add after paragraph two: If the collection is ordered, then if an Insert-Position header is provided, then it specifies the position of the new member. 
The Insert-Position header is defined below. 
If no such header is provided, it is RECOMMENDED that the member be added last. 
If the member can not be inserted at the specified position then the ADDREF method MUST fail with a 412 Precondition Failed status code. 
If the collection is not ordered and an Insert-Position header is provided, the ADDREF method MUST fail with a 412 Precondition Failed status code. 
8.10.1 
PUT for Non-Collection Resources Add after the second paragraph If the resource is being added to an ordered collection, then if an Insert-Position header is provided, then it specifies the position of the new member. 
The Insert-Position header is defined below. 
If no such header is provided, it is RECOMMENDED that the member be added last. 
If the member can not be inserted at the specified position then the ADDREF method MUST fail with a 412 Precondition Failed status code. 
If the collection is not ordered and an Insert-Position header is provided, the ADDREF method MUST fail with a 412 Precondition Failed status code. 
[Perhaps this paragraph should also be added after the second paragraph in 8.11.1.1 COPY for HTTP/1.1 resources. 
I don't think I need it for MOVE since it is a COPY plus a DELETE.] Add to section 9 (HTTP Headers) 9.9 Insert-Position Header InsertPosition = "Insert-Position" ":" AbsPosition | RelPosition AbsPosition = "First" | "Last" RelPosition = ("Before" | "After") URI ; URI is defined in section 3.2.1 of [Fielding et al., 1997] The Insert-Position header is used with methods that add resources to collections. 
It specifies the position of the resource being 
added, either absolutely or relative to an already existing member. 
If the relative form is used, then the resource named by the URI MUST already exist as a member of the collection. 
If not, the method MUST fail with a 412 Precondition Failed status code, except that if the client does not have sufficient access to obtain a list of the members of the collection, a different status code MAY be returned. 
[Perhaps the syntax should reserve some means for future extension? 
Or the writeup should have some language about what the server does if it does not understand the content of the header? 
] 9.10 Is-Ordered Header IsOrdered = "Is-Ordered" ":" T | F The Is-Ordered header is used with MKCOL, and causes the is-ordered property of the newly created collection to be set to the same value as the header. 
Add to section 13 (DAV Properties) 13.X is-ordered property Name: is-ordered Namespace: http://www.ietf.org/standards/dav/ 
Purpose: Tells whether the collection supports ordering Value: T | F Description: This is a live property. 
All collections MUST have this property. 
On servers that do not support ordering, its value MUST always be F. 
Jim, Thank you for posting this proposal for ordered collection support in the WebDAV protocol. 
While at first read, this proposal appears to adequately provide for ordered collections, I wonder about its hidden assumption: that one ordering for a collection is all you need. 
I wonder whether it might be desirable to support multiple simultaneous orderings instead. 
A brief sketch of how this could be accomplished is to have a predefined "ordering" property defined on a collection. 
This property could then have multiple orderings defined within it. 
A client which was interested in the ordering could read the "ordering" property, and then make use of one of the orderings in the property. 
Each ordering could be supported by a different schema. 
Modifying the ordering is accomplished by modifying the property. 
An example "ordering" property is: This could also be accomplished using the RDF data model and XML representation. 
- Jim On Wednesday, December 03, 1997 11:05 PM, Jim Davis 
For the applications that I am aware of, one ordering is indeed all that is needed. 
One example is scanning, where the page images of a document have a natural order. 
The WebDAV protocol would be more useful to a scanner if it could guarantee that the server would preserve the order of page images within a document. 
I can imagine that there are other applications that could use multiple orderings, although they don't come to mind now. 
On the other hand, I would be wary of introducing multiple orderings into WebDAV, for fear that it would lead down a slippery slope, because the next logical thing to ask for is sorting (by name, size, etc) and then after that, sortings that are induced by invoking an arbitrary sorting predicate (specified by Java). 
As for your specific proposal, it's cool. 
It has the advantage that since it relies completely on the client, no modification to DAV protocol is needed at all. 
(One might want to register some well-known orderings in the namespace, but that's it.) But this is also its weakness. 
It places the burden for the ordering on clients, who would presumably have to do discovery to discover the set of all currently available orderings, and would have to insert into all of them. 
While my proposal *allows* a client to be aware of ordering, it does not *require* it, in that it RECOMMENDS that the server support a default ordering (by order added). 
So if a naive client adds or removes a member of a collection, nothing breaks, whereas in your scheme, it would cause some problems. 
An ordering-aware client would fetch the ordering property, and discover that it was not corresponding to the actual list of members. 
Your proposal also places on each client the burden of doing the sorted insertion for each ordering in the list. 
For these reasons, I believe that ordered collections should support a single ordering, maintained by the server, as in the original proposal. 
Best regards Jim 650-812-4301 
I think that we need to consider what (if anything) differentiates a collection from a non-collection resource. 
As far as I can tell, that would be o A collection can be unordered All the other features could be accomplished as a normal resource. 
That is, in fact, how Hyper-G implemented collections [1], and why they do not support unordered collections. 
After all, an unordered collection is simply an ordered collection with the ordering defined by the server. 
There are advantages to treating a collection differently than a normal resource. 
o The new method names allow the default presentation of a collection resource to be separate from its collection structure. 
[This could also be accomplished by a property on the collection resource, which is how "index.html" works on most servers.] 
o It is unnecessary to require a single exchange media type for manipulating the collection membership via PUT/POST/PATCH. 
On the other hand, the current draft already requires text/xml (which itself is a problem, see below) and a recent proposal said that INDEX would be eliminated. 
There are also disadvantages to treating a collection differently than a normal resource. 
o Ordering relationships have to be made by indirection to an ordering type or a separate DAG resource. 
o Clutter. 
I don't buy Jim Davis' argument that multiple ordering relationships are unnecessary. 
If ordering is needed at all, then it should be represented in its most abstract form; otherwise, we'll have to come up with a new exchange syntax to satisfy other ordering needs. 
If you want to maintain simplicity, use a general syntax (such as the ordering type being expressed as a property containing a URI that defines either one of the standard orderings or a DAG resource), and only require support for "none" and a single "dav:as-added" ordering URI. 
However, this all leads to a perplexing question: we (or perhaps I should say, whoever decided text/xml was a universal exchange format) have already eliminated all the advantages of distinguishing between collection and non-collection resources, so why haven't we eliminated the disadvantages as well? 
Have I missed something? 
In other words, if we are already requiring text/xml, then require a form of XML that represents a DAG and manipulate the DAG client-side in the same way that the server-side DAG would be manipulated by the individual methods, and then PUT/PATCH/POST the result. 
That allows a much friendlier UI as well. 
BTW, the problem with text/xml is that there is no fixed definition which the IESG would consider acceptable for a normative reference. 
That is something the XML folks will have to get a move on, and fast, if WebDAV is ever to be a proposed standard. 
Harald knows what a "fixed definition" entails [I don't know what the current understanding is between IETF and W3C]. 
....Roy [1] H. Maurer. 
"Hyper-G, now Hyperwave: The Next Generation Web Solution", Addison Wesley, 1996, section 9.2. 
On 12/04/97 Jim Davis wrote in part: For the applications that I am aware of, one ordering is indeed all that is needed. 
One example is scanning, where the page images of a document have a natural order. 
The WebDAV protocol would be more useful to a scanner if it could guarantee that the server would preserve the order of page images within a document. 
I can imagine that there are other applications that could use multiple orderings, although they don't come to mind now. 
On the other hand, I would be wary of introducing multiple orderings into WebDAV, for fear that it would lead down a slippery slope, because the next logical thing to ask for is sorting (by name, size, etc) and then after that, sortings that are induced by invoking an arbitrary sorting predicate (specified by Java). 
I agree with Jim that this may be a "slippery slope." 
However, examples handily come to mind. 
For example, consider a collection of images, where one might wish to establish metrics in both the spatial and frequency domains. 
Some of these metrics might be highly idiosyncratic, perhaps based on different human perceptual models, and it could be very important that one use the "foo" metric as opposed to the "bar" metric according to circumstance. 
Del 
I hope we don't arbitrarily limit collections (such as the ordered collection proposal under consideration does). 
Just as Xerox needs ordered collections for compound documents we need a different type of ordered collections for configurations and for alternates. 
I like Jim's proposal (atleast conceptually) in this regard. 
Another way to support ordering (and other desirable features as well) is to allow a specified set of properties to be associated with all members of a particular collection. 
One such property could be an index value which could be used to determine the "order" of the collection. 
(though, admittedly, inserting or deleting members would be more cumbersome without special support) Multiple properties allow multiple orderings. 
Member properties would also add considerable value to external references. 
In particular, a name property in conjunction with external references would yield the equivalent of Unix (soft) links. 
-- Ellis 
My current understanding is that an agreement has been reached between the IESG and the W3C allowing for XML to be directly referenced in IETF standards track documents. 
My further understanding is that the official reference for XML will be released by the W3C this month. 
As for the use of DAGs. 
Let us separate the purpose of collections from capabilities the syntax we are using may have. 
The purpose of collections was to provide a mechanism for managing the hierarchical relationship implicit in HTTP URLs. 
Until now that relationship was not formalized however this working group felt that a formalization was needed and banded together for the purpose of providing that formalization. 
An arbitrary DAG goes beyond the simple hierarchical relationship that collections were meant to encompass. 
However this issue will be directly addressed in our versioning work as the current consensus is that the relationships amongst different versions of documents will be described as a DAG. 
Yaron 
The XML standard is slated for release today (Monday). 
Check the W3C main page for a link to the "proposed recommendation"'s public release. 
-- David David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com 
Boston University Computer Science \ Sr. Analyst --------------------------------------------\ http://www.dynamicDiagrams.com/ 
MAPA: mapping for the WWW \__________________________ 
I agree with Jim's proposal for ordered collections but would like to suggest a couple of modifications. 
1. 
The addition to the Insert-Position header of a third type of argument, an index which is a token that specifies the place in the collection where the document should be inserted. 
This index should be opaque to the protocol but will have meaning to both the client and the serverd. 
An example being the version number of a revision being added to an archive. 
i.e 1.5. 
If the server refuses to insert the member at the specified position it may choose to insert it at a different location. 
2. The server should return a header after a member has been inserted into a collection that indicates it's position (the index mentioned above). 
3. It should not be mandated that the server always insert members at the end of a collection if no position is specified, but instead it is left to the server to insert the member where it wants and return the position using the header mentioned in 2. This is because the ordering of the collection may be based on some aspect of the member being inserted. 
Such as alphebetically by file name. 
On the matter of multiple orderings, I feel that while there are no doubt applications where this would be needed, my guess is that having one default order to collections will cover the vast majority of the cases. 
Multiple orderings may cause more complexity than they are worth. 
Someone suggested that an unordered collection is really just a special case of an ordered collection where the server picks the order. 
I agree with this but it must be pointed out that the server would either have to refuse any attempts to insert members in a specific place in an "unordered" collection, or it would always have to respond by saying "this is where i put the member instead". 
Steve Stephen Martin _ _ | /_ \ MORTICE KERN SYSTEMS INC. smartin@mks.com 
,/ \ / \ | / |( | 185 Columbia Street West (519)883-3215 | | | |/ | \ / Waterloo, Ontario 
