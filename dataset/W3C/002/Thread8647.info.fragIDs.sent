There is currently a dummy section 4.3 in the draft on processing instructions. 
I suggest it be changed to "4.3 Processing Instructions No use is made by this specification of XML Processing Instructions. 
Note that Processing Instructions inside SignedInfo will be signed unless a customized CanonicalizationMethod is used that discards them. 
They are retain after any CanonicalizationMethod (including none) specified herein has been applied. 
The same is true of Processing Intructions appearing in any other signed XML unless a canonicalization or Transform is used which drops them out. 
When signed, changes to Processing Instructions inside SignedInfo will cause signature failure." 
Originally, I had thought that one pass processing info would be best represetend by a processing instruction. 
However, the content of a PI is just a string and is not parsed as XML, so to put the information you want inside one might require an extra explicit call to your XML parsr. 
Using a PI might still be an advantage if we had a standard canonicalization that was like the W3C XML canonicalization but which dropped PIs. 
In addition, PIs can be inserted into valid documents without having explicity DTD provision... 
In any case, below is the simple element form of my current ideas in this area with the Processing Instruction changes indicated by deleting materila in curly braces {} and adding material in square braces []. "{4.5 
One Pass Processing} [4.3.1 
One Pass Processing Instruction] For some applications it would be useful to be able to stream through data in a single pass remembering only relatively small amounts of extracted or calculated information. 
If this data is to be digested, the digest processing must be known in advance so that it can be performed as the data streams by. 
Otherwise, it would be necessary to store all of the data and go back if/when it is determined that all or part of it needs digesting. 
The syntax for the OnePass {element}[Processing Instruction] is shown below. 
It hints that the signature application should, starting right after the end of the OnePass {element}[Processing Instruction], apply theindicated DigestMethod to the XML data following. 
If Transforms are present, the data must be first modified according to those Transforms before digesting. 
If an area of XML needs to be digested in several ways for different signatures, this is indicated by including multiple Processing elements. 
OnePass disgesting stops just before an empty OnePass {element}[Processing Instruction]. 
{ OnePass }[ ?OnePass] (DigestMethod) (Transforms)? 
/Processing * { /OnePass }[? ] [Note that no DTD or Schema provisions need be made for Processing Instructions even if a validatig parser is used; however, an explicit XML parser call on the content of the Processing Instruction may be needed to implement OnePass.]{Note that DTD and/or Schema provision for OnePass elements will be needed if a validating parser is even going to be used.} 
The one pass feature is a purely optional to use and optional to implement hint. 
It can be ignore by applications, can indicate 
the wrong DigestMethod, or the like, without causing any formal error or error reporting to the user. 
Of course, under those circumstances, an application that needs to do one pass processing to avoid having to retain bulky data will be unable to verify a signtature which requires that data to be digested the way that application wanted. 
OnePass can be partially implemented. 
For example, a simple OnePass implementation might ingore OnePass {elements}[Processing Instructions] that have a Transforms element present or the like. 
No provision is made for one pass processing of data which includes OnePass {elements}[Processing Instructions] that are to be considered data rather than one pass feature invocations." 
Thanks, Donald Donald E. Eastlake, 3rd IBM, 17 Skyline Drive, Hawthorne, NY 10532 USA home: 65 Shindegan Hill Road, RR#1, Carmel, NY 10512 USA 
I'm not too keen on this because: 1. 
I don't know how important a requirement [1] it is nor how likely it is that it will be implemented. 
2. I generally prefer not to have these sort of optional features (bloat). 
3. PIs are a bit of a black sheep in the XML world from what I understand, they are generally discouraged. 
[1] It isn't listed in: Joseph Reagle Jr. Policy Analyst mailto:reagle@w3.org 
XML-Signature Co-Chair http://www.w3.org/People/Reagle/ 
See at @@@ Donald E. Eastlake, 3rd IBM, 17 Skyline Drive, Hawthorne, NY 10532 USA home: 65 Shindegan Hill Road, RR#1, Carmel, NY 10512 USA "Joseph M. Reagle Jr." reagle@w3.org 
on 12/20/99 07:32:34 PM Subject: Re: Processing Instructions Section / One pass processing 
I'm not too keen on this because: 1. 
I don't know how important a requirement [1] it is nor how likely it is that it will be implemented. 
@@@ I'm not sure either but it seems to me there will be people that want to sign huge things in XML. 
While they can always handle this in an application specific way, it's reasonable to include a general mechanism. 
2. I generally prefer not to have these sort of optional features (bloat). 
@@@ I tend to reserve the word bloat for things that are useless or things best provided by a separate orthogonal mechanism which are being combined into a package for marketing purposes. 
I think that all recent versions of Netscape and Internet Explorer are bloatware. 
But I don't see an orthogonal separate way to provide one pass signature processing of XML data. 
3. PIs are a bit of a black sheep in the XML world from what I understand, they are generally discouraged. 
@@@ But I carefully wrote it so it could be an ordinary element or a PI, depending on which way we want to go. 
If it's an element, you need to provide for it in your DTD/Schema but that's not so bad. 
Using a PI has advantages and disadvantages. 
But we can just take the mundane course and use an element. 
[1] It isn't listed in: Joseph Reagle Jr. Policy Analyst mailto:reagle@w3.org 
XML-Signature Co-Chair http://www.w3.org/People/Reagle/ @@@ Thanks, @@@ Donald 
