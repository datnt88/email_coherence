The datatyping document I'm working on it available at It is still very rough, but I'm posting the link so you can ensure that I'm still on track (I'll be on a Thanksgiving trip Thu-Sun, so I wanted to have something out before that). 
Looking forward to your comments, 
Sergey 
All in all, it looks to me to be a great start. 
The definitions in the section "Type System" of value space, lexical space, and canonical space are very clear, and the graphic showing the mapping with the canonical mapping as a smaller arrow in the lexical mapping arrow is very nice. 
Some comments on the "Type System" section: 1. 
I think it should somehow address the fact that (a) RDF provides no explicit (lexical) representation for the actual value in a given data type value space, and (b) the denotation of a value in a given value space is based on a pairing of lexical form (literal) with data type identifier (URI). 
2. We may wish to put in a footnote pointing out that while XML Schema also provides a similar definition of canonical lexical space, it allows for some exceptions to the absolute 1:1 mapping between canonical lexical space and value space. 
E.g. the "canonical" lexical space for xsd:decimal is not canonical according to our definition (the XML Schema spec admits this) -- and our definition is, I believe, correct and no such exceptions should be made (XML Schema should actually IMO used fixed point notation for the canonical lexical space of decimals to fix that "bug"). 
3. In the context of two types X and Y where X is a subClassOf Y: a) The value space of X is a proper subset of the value space of Y. b) The canonical lexical space of X is a proper subset of the lexical space of X. c) The lexical space of X is NOT necessarily a proper subset of the lexical space of Y. These are IMO fundamental properties of the rdfs:subClassOf relation when defined between two data type classes. 
4. We may wish to provide some discussion about the which XML Schema type definition mechanisms correspond to a subClassOf relation. 
E.g. by restriction does, but by list does not, etc. 
It may in fact be possible to parse a set of XML Schemata to automatically extract all subClassOf relations and generate an RDF Schema containing that knowledge. 
5. It may be useful to give some examples of possible Facets, even though they would be non-normative, to make clearer their intended purpose. 
One question about "naming" a mapping by property: A property presently defines an attribute or quality of the subject, yet a "data type property" defines an attribute or quality of the object (possibly in addition to an attribute of the subject), and that seems counter-intuitive to common usage and perception of RDF semantics. 
E.g. given x eg:age "10" . 
eg:age rdfs:subPropertyOf xsd:integer . the property eg:age is attributive explicitly to 'x' and implicitly to "10". 
Is this really a good thing? 
Cheers, Patrick 
Sergey, I think this is a great basis for discussion. 
My comments on the document: + General: it might be easier to discuss if we had section numbers. 
+ Deliverables: I'm not sure that we should regard a framework for *defining* datatypes as a deliverable. 
That seems to be beyond our charter. 
A framework for *using* seems enough (for now). 
+ Desiderata: I'd like to add the following: - Compatibility with existing usage of RDF. + Datatype mapping: I would view XSD "facets" as part of the XSD mechanism for defining datatypes. 
I think it's enough that we focus on the value space, the lexical space and the mapping. 
+ Datatype mapping, definition, second item: do we really need to specify that each element of the value space has a lexical representation? 
I'm not violently opposed, but I'm not sure what purpose it serves, and it seems to make the task of defining a value space more difficult (e.g. how does one define a data type whose lexical space is of the form 0.dddddE+ee (using decimal digits), plus a couple of oddities, and whose value space is some flavour of IEEE floating point numbers. 
Defining an exact correspondence seems to me like it could be rather hard work). 
+ Facets: I agree with the thrust of this, and would go further. 
I'd not even talk about facets being the subject of further RDF work. 
+ Representation of datatype mappings and values: this is clearly a point I'd previously misunderstood, so I'll raise the question for discussion explicitly. 
What should the URI of an XSD datatype actually denote? 
The value space, the lexical space, the mapping or something else? 
And should we allow/encourage/require the introduction of "parallel" URIs to name the parts not thus named? 
(My previous comments have been to the effect that if the XSD URI is regarded as denoting the lexical space, existing usage can retain its expected interpretation.) + xsd:base64Binary, etc, @@@ comment: doesn't the xsd:base64Binary value, as you have defined it, bridge the gap between octets and characters, thus: [Some octet sequence] xsd:base64Binary [some character sequence] . 
+ Unit System: I tend to think this is out of scope, to the extent that the basic mechanisms you present can handle measure-space as a kind of value space. 
For applications that wish to do the kind of measure distinction that you describe, then the measure space and number space can be treated like ordinary RDF. 
In your diagram, weight, age, inKg, inYears, inMonths are just ordinary RDF properties. 
The remaining properties are what this note is about. 
I think this part is fine as an example, but that we shouldn't even start to get caught up in defining unit system vocabularies. 
I think each such vocabulary should have a working group in its own right. 
+ FAQs: Here are some suggested answers. 
- we don't explicitly distinguish a datatype property from non-datatype property. 
Why bother? 
(Isn't this a strength of this approach?) - How do we refer to value spaces/lexical spaces? 
Additional vocabulary defined as required. 
(c.f. my suggestions of "parallel" namepsaces for XSD.) - Attach two datatype properties to a node? 
Yes. 
Why not? 
(Especially if they're just like other properties.) 
I think the existence or otherwise of a model can handle any issues of consistency that might arise. 
- Can write (X age "12")? 
Of course! 
Whether or not it is useful to write depends on the definition (interpretation) of "age". 
- Refer to datatype values without using datatype properties? 
I see no reason why not. 
They are just denoted values, right? 
Whether one can know that the value "belongs" to a datatype may be trickier. 
I am thinking of saying things like "the mass of X is the same as the mass of Y". 
I think the issue of defining URI scheme w/semantics is out of scope for us. 
+ TODO, how datatypes are defined (described?) in MT: are they not just properties with a relational extension defined according to some datatype value space/lexical space/mapping? 
+ TODO, how to define datatypes in RDF: I think this is out of scope. 
#g Graham Klyne MIMEsweeper Group Strategic Research http://www.mimesweeper.com 
