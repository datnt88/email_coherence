I would like to submit the following use cases and requirements for 
consideration by the working group - 
Besides providing what I personally believe to be critical requirements for 
the success of the working group I also think they help to outline what I 
believe to be the fundamental differences between what I think the W3C 
Choreography WG should be doing and what the BPEL OASIS TC is doing. 
Of 
course all opinions on such differences are mine and mine alone, your mileage may vary, objects in mirror are closer than they appear. 
Yaron 
Yaron: 
Thanks for taking the time to write this paper, I think it makes a very important and clear distinction between CPL and CDL, which fit well with 
Martin's definition of orchestration. 
I agree pretty much with everything you say, except for one point: you are talking about "prose" and "non-executable logic". 
I strongly disagree with that point. 
If it is true that as a global view, a CDL does not have an engine to ensure its execution, one of the value of a machine processable CDL is 
that each party can validate the choreography of messages based on rules 
defined in a CDL. 
So for me it is a requirement that the "prose" you are talking about be machine processable. 
Again, if you are a big organization, you are going to receive in the order of 100,000 to 1,000,000 messages per day. 
Having a CDL that help you validate whether or not you are supposed to receive any of these messages before you start processing them is going to save a lot of code 
within each application (not too mention that a given choreography could 
involve multiple of your applications, which would compound the problem). 
However there is catch when expressing this business logic. 
In order for 
each participant to "know" the state of the choreography, this business 
logic can only be expressed on the information being exchanged by any two parties. 
For instance we could not have a transition "if I approved your order" because the buyer has no way to know this information from the supplier unless you specifically exchange a message containing this information. 
This type of information becomes "prose". 
Interestingly enough, the business logic of CPL is the prose of CDL. 
Cheers, Jean-Jacques Dubray____________________ Chief Architect Eigner Precision Lifecycle Management 200 Fifth Avenue Waltham, MA 02451 781-472-6317 jjd@eigner.com 
www.eigner.com 
From: public-ws-chor-request@w3.org 
[mailto:public-ws-chor-request@w3.org] 
htm. 
requirements 
what I 
Of 
If I read your letter correctly then the validation you discuss is the same as the "Run Time Validation" requirement I include in my paper. 
This requirement means that one can confirm in an automated fashion that the 
message choreography visible to a particular participant [1] is allowable by 
the definition of the cDl. 
The non-executable requirement [2] is intended to specify that the logic used to decide between two mutually exclusive paths in the cDL will be written in prose not in an executable form. 
As discussed at length in 
section 4.3 of the paper and also touched upon in sections 4.1 and 4.2, the 
removal of executable decision logic massively simplifies the cDL and allows 
it to focus on the choreography and thus enhance interoperability. 
Those 
seeking executable decision logic need to solve a number of difficult problems, including defining a programming language and execution 
environment, a problem the BPEL TC has already taken on. 
By way of comparison [3] a pair of cPls might say something like: Participant A's cPl: Receive(B, Order) If (Order.amount  10000) 
OrderResponse.Status = "Wait 24 hours for approval" Send(B, OrderReponse) 
Receive(B, ACK) Else OrderResponse.Status = "Approved" Participant B's cPl: If (items  30) Order.amount = 15934; else Order.amount = 20; Send(A, Order) Receive(A, OrderResponse) If (OrderResponse.Status = "Wait 24 hours for approval") 
Send(A, Ack) A visual representation of the cDl might look something like: [Start State/B] Order [Received Order/A] OrderResponse [Received Order Response/B] *--- [END] ACK (B sends Acks to confirm A's request to delay approval) [Received Ack/A] [END] Notice that upon entering the Received Order Response state there are two mutually exclusive paths that can be selected. 
Either the message 
choreography can end or an Ack message can be sent to participant A. The 
cPls explain exactly how this choice is made while the cDl only shows that a choice must be made but doesn't specify how beyond a text note. 
Yaron 
[1] I assume that by default any choreography is distributed such that each 
participant can only validate their own behavior. 
E.g. they know what messages they have sent and received and can validate those messages against 
the choreography. 
This doesn't preclude the existence of a central 
coordinator who could, in real time, detect every message sent by every participant and so validate the entire global system's state but the existence of this central coordinator is neither assumed nor required. 
[2] Originally the 'non-executable' requirement was called the 'declarative' requirement. 
Neither term particularly works. 
Hopefully in the official 
requirements we will find a better phrase. 
[3] Much thanks to Ricky Ho who pointed out to me that we really needed to write up the sort of cPl/cDl combined example I use here. 
The examples used here are inspired by his private communications with me. 
-----Original Message----- From: public-ws-chor-request@w3.org 
Yaron deserves thanks for producing this detailed writeup. 
A couple of first-pass comments: 
1. It is stated that in a cDl (Choregraphy description language), "the logic that controls a particular transition is given in prose rather than in an executable form" (p.1). 
The issue I see with this is that it's unenforceable. 
Also there's no guarantee that implementation stays in sync with the description. 
2. The notion of an abstract process is introduced in the 2nd use case, as a point intermediate in complexity and specificity between a 
choreography description and an executable choreography. 
This is 
interesting. 
Actually if you take the whole document, there are 4 possible levels discussed: a. Choreography description subset that allows round-tripping 
b. Full choreography description 
c. Abstract business process d. Executable business process. 
The implications of these various levels for the spec are not fully clear to me. 
I wonder if Yaron had something like the "external" portion of BPEL in 
mind at the abstract business process level. 
--Jon 
What you call non-executable I actually call executable. 
Different from 
an implementation, since a service can't execute a choreography on its 
own, it takes two to tango, and even all services involved can't execute 
the choreography based strictly on the choreography definition, they 
need more information than that (the implementation details). 
But at the 
end of the day, given the choreography they participate in and the 
implementation that acts on it, they end up executing the choreography. 
Prose is not on of my favorite terms. 
It seems to suggest that perhaps XHTML might be a better starting point then say WSDL ;-) 
arkin 
-----Original Message----- From: public-ws-chor-request@w3.org 
"Those who can, do; those who can't, make screenshots" Assaf Arkin arkin@intalio.com 
Intalio Inc. www.intalio.com 
The Business Process Management Company (650) 577 4700 
This message is intended only for the use of the Addressee and may contain information that is PRIVILEGED and CONFIDENTIAL. 
If you are not the intended recipient, dissemination of this communication is prohibited. 
If you have received this communication in error, please erase all copies of the message and its attachments and notify us immediately. 
Here's my $0.02c on Yaron's paper which I find expresses thoughts generally 
similar to my own. 
1. Introduction: CDl is a set of rules that can be used to validate the 
correct execution of a choreography instance raising errors if the rules are 
not followed 2. Requirements: 
a) a CDl should also be extensible, for example there are multiple different ways of placing an order where each one is gradually more complex 
than an earlier version [1] b) Components such as reliability and security should be in a separate 
layer otherwise the choreography is not reusable 
3.2 Use Case: Equal Partners a) I can envisage a situation where the same business process could sometimes be implemented reliably and sometimes not. 
This suggests that identification of reliability to use with a choreography should be contained in a binding of the the base CDl to an implementation. 
Other things that 
need to be bound in the same way include: message content, message 
packaging, use of security and things like business timeouts. 
4.5 Segmentation a) If you are hiding part of a choreography, then really the choreography is not a public choreography but is really a private choreography. 
In this case isn't the CDl really more of a template CPl as the complete definition is under the control of just one participant. 
b) Similarly if you have segmentation, then it can tend to inhibit reuse as the part of the choreography that is being segmented out could actually be a common choreography that could have been reused elsewhere c) There is also a difference between C, for example, knowing the complete choreography without knowing which organization is B. This would probably be OK from the privacy of information perspective. 
In fact there can often be multiple different organizations who can be a "B". 
d) Bottom line, I would view each of the interactions described as probably separate choreographies with their own choreography definitions that have then been assembled for use in a business process owned by A defined using a CPl. 
4.7 Annotations a) I agree that signal messages could be useful. 
However, this really is 
treading into application territory so needs to be treated with care and it would be wise to leave it to later. 
So, how about this as the layers that are required: 1. Template Choroegraphy Definition. 
This is written in a CDl and is something that an organization like RosettaNet could develop, but is not specific on detailed message content 
(as it varies), or the service instances that are used 2. (Actual) Choreography Definition. 
This is optionally based (by reference) on a Template Choreography 
Definition but includes the specific message formats, services, etc that are 
used. 
An open question is whether this is single document or, alternatively 
a Template Choreography Definition with a binding to an instance 3. Segmented Choreography Definition 
This is a single roles view of a Template (?) Choreography Definition and 
could be used as the starting point for a business process to support the 
choreography 
I would like to submit the following use cases and requirements for 
consideration by the working group - 
Besides providing what I personally believe to be critical requirements for 
the success of the working group I also think they help to outline what I 
believe to be the fundamental differences between what I think the W3C 
Choreography WG should be doing and what the BPEL OASIS TC is doing. 
Of 
course all opinions on such differences are mine and mine alone, your mileage may vary, objects in mirror are closer than they appear. 
Yaron 
I think that to make run-time validation work you need three identifiers in the headers of any message that is received which are: 1. 
The Choreography Definition identifier 2. The Interaction (i.e. message exchange) within the Choreography 
Definition, and 
3. A Choreography Instance identifier You can then: 1. Map the Interaction to a specific Message format although in reality you are more likely to say that a particular Message format can support various interactions in various choreographies 
2. Map states and conditions in the choreography to data in specific Message 
Formats. 
As a result you could automatically validate that an individual message 
received conformed to the rules of the choreography. 
Thoughts? David If I read your letter correctly then the validation you discuss is the same as the "Run Time Validation" requirement I include in my paper. 
This requirement means that one can confirm in an automated fashion that the 
message choreography visible to a particular participant [1] is allowable by 
the definition of the cDl. 
The non-executable requirement [2] is intended to specify that the logic used to decide between two mutually exclusive paths in the cDL will be written in prose not in an executable form. 
As discussed at length in 
section 4.3 of the paper and also touched upon in sections 4.1 and 4.2, the 
removal of executable decision logic massively simplifies the cDL and allows 
it to focus on the choreography and thus enhance interoperability. 
Those 
seeking executable decision logic need to solve a number of difficult problems, including defining a programming language and execution environment, a problem the BPEL TC has already taken on. 
By way of comparison [3] a pair of cPls might say something like: Participant A's cPl: Receive(B, Order) If (Order.amount  10000) OrderResponse.Status = "Wait 24 hours for approval" Send(B, OrderReponse) Receive(B, ACK) Else OrderResponse.Status = "Approved" Participant B's cPl: If (items  30) Order.amount = 15934; else Order.amount = 20; Send(A, Order) Receive(A, OrderResponse) If (OrderResponse.Status = "Wait 24 hours for approval") Send(A, Ack) A visual representation of the cDl might look something like: [Start State/B] Order [Received Order/A] OrderResponse [Received Order Response/B] *--- [END] ACK (B sends Acks to confirm A's request to delay approval) [Received Ack/A] [END] Notice that upon entering the Received Order Response state there are two mutually exclusive paths that can be selected. 
Either the message 
choreography can end or an Ack message can be sent to participant A. The 
cPls explain exactly how this choice is made while the cDl only shows that a choice must be made but doesn't specify how beyond a text note. 
Yaron 
[1] I assume that by default any choreography is distributed such that each participant can only validate their own behavior. 
E.g. they know what messages they have sent and received and can validate those messages against the choreography. 
This doesn't preclude the existence of a central coordinator who could, in real time, detect every message sent by every participant and so validate the entire global system's state but the existence of this central coordinator is neither assumed nor required. 
[2] Originally the 'non-executable' requirement was called the 'declarative' requirement. 
Neither term particularly works. 
Hopefully in the official requirements we will find a better phrase. 
[3] Much thanks to Ricky Ho who pointed out to me that we really needed to write up the sort of cPl/cDl combined example I use here. 
The examples used here are inspired by his private communications with me. 
-----Original Message----- From: public-ws-chor-request@w3.org 
From what I recall RosettaNet has a finite set of patterns (four that I can recall) and a lot of different PIPs. 
Each PIP is defined individually because it relates to different set of operations. 
Each operation defines which messages are being used, hopefully generically enough to allow some variety. 
But you won't be plugging an RFQ message into a cancel PO PIP, even if the pattern of interaction is the same (request/response). 
To me this seems to tie well to the recommended use of WSDL for abstraction, but I'm beating the same drum over and over ;-) The question I have is what is exactly suggested by the use case. 
The term prose as I read it means a cDl that is not necessarily machine processable, just an artifact that you can use to build machine processable definitions. 
In that case you can get as much abstraction as you want, either by binding things to it or simply by not specifying them. 
We can imagine a language where you just write templates and there's no need for binding. 
Since a lot of people like to see that, that's an option for us to discuss. 
But if that's the case, can't we just ignore WSDL? 
Let other languages or standards deal with how to use WSDL for choreographies and let's focus on those abstract templates. 
Use a cDl language not based on WSDL to write choreographies, and a language based on WSDL to write actual 
choreography MEPs. 
Yaron, if that's what you intended than I need one clarification 
regarding your statement that our deliverables should be based on WSDL 
1.2. 
Do you mean that we should identify some non-prose cPl language 
that is based on WSDL and adopt it? 
Develop both the prose cDl and 
non-prose cPl and the later should use WSDL 1.2? 
Provide mapping between 
the cDl and some cPl language that does use WSDL and incorporate 
appropriate rules into that mapping? 
In short, where does WSDL come into play with respect to the cDl and cPl? 
arkin 
The purpose of the cDl is to describe the message choreography. 
WSDL 1.2's 
role is to specify the exact messages and MEPs being used in the choreography. 
So the choreography would say something like: "Foo sends message BLAH to Bar" where 'message BLAH' would be a reference to a WSDL service/porttype/operation (or whatever the hell they call it now in WSDL 1.2). 
Yaron 
From: Assaf Arkin [mailto:arkin@intalio.com] 
Sent: Tuesday, May 20, 2003 11:19 AM Subject: Re: Use Cases &amp; Requirements 
The way I read some of the e-mails in this discussion they seemed to assume that the cDl may do other things by being even more abstract. 
That's why I asked for the clarification. 
The term prose is also confusing. 
Let's say I have a choreography which 
defines that I send you some message X, get some business activity to occur at your end, and receive a response Y (let's say it's a single operation). 
That definition is not executable in the sense that it's insufficient to get the activity to occur on your side. 
Without the business logic nothing will happen. 
I prefer to think of it as simply being "not an implementation". 
You will still need an implementation of that operation on your side, which is the subject of other specifications (BPEL, Java, etc). 
On the other hand, if I want the activity to be executed all I need to do is perform that operation by sending you message X. 
So as far as I am concerned the operation definition is "executable". 
If I know your end-point I can get it to execute. 
But this is a different part of execution than an implementation, I still need an implementation on my side to invoke it and one on your side to perform it. 
The term prose implies that even this kind of execution is not possible. 
(And I know the term execution is controversial, for some people execution=implementation and for others implementation is an expansion of execution) 
In that case, what is the issue with languages like WSCI and BPEL? 
I know you can define implementations using BPEL which is out of scope, but can't you just use abstracts in this case to get a definition of the message choreography? 
What is missing? 
Similarly with WSCI. 
Perhaps it treads into the possible use as an implementation language (the cPl), but can't we just ignore these capabilities for now and simply exclude them from any resulting specification? 
So far the only thing I understood needs to be changed is removing XPaths. 
arkin 
From: Assaf Arkin [mailto:arkin@intalio.com] 
Sent: Tuesday, May 20, 2003 11:19 AM Subject: Re: Use Cases &amp; Requirements 
The term prose is only used to describe information provided about how choices are made between mutually exclusive paths within the message choreography. 
Rather than use the term 'executable' in the manner you do below I use the term 'validation'. 
I use that term because it is likely to avoid confusion with those looking at BPEL and so make it clearer to observers where the differences are. 
Yaron 
From: Assaf Arkin [mailto:arkin@intalio.com] 
Sent: Friday, May 23, 2003 2:41 PM Subject: Re: Use Cases &amp; Requirements 
-----Original Message----- From: Assaf Arkin [mailto:arkin@intalio.com] 
Sent: Tuesday, May 20, 2003 11:19 AM Subject: Re: Use Cases &amp; Requirements 
