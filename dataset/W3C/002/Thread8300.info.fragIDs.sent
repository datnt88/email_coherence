Hi, RFC2518, section 8.10.10 
( http://greenbytes.de/tech/webdav/rfc2518.html#rfc.section.8.10.10 ) currently shows an example where the multistatus response body contains a DAV:lockdiscovery property...: 
HTTP/1.1 207 Multi-Status Content-Length: xxxx The text then goes on...: "Note also that the lockdiscovery property for the Request-URI has been included as required." 
This seems to address a requirement from 8.10.1: 
"The response MUST contain the value of the lockdiscovery property in a prop XML element." 
(RFC2518bis-05 contains the same language). 
Questions: 
1) What's the benefit to get the DAV:lockdiscovery property in case the request fails? 
Shouldn't we just say that it MUST be returned on 
successful method execution and leave it at that? 
2) Is anybody actually implementing this? 
Are there clients relying on it? 
(I don't think so, but I'll check). 
If nobody is actually doing this, we should remove that. 
3) *If* we want to keep this, we'll have to think about that example: After all, the "424" status is on the resource itself, not the DAV:lockdiscovery property. 
So it really would need to be....: ...and then we'd need a way to put in the DAV:lockdiscovery property in a way that doesn't break the DTD for the response element. 
Feedback appreciated, 
Julian 
I don't think anything needs to be changed here. 
I'm not sure what you had in mind by saying "it MUST be returned on successful execution", since the whole point is to indicate what existing 
lock caused the LOCK request to fail, i.e. this 
property is returned only for the failure case. 
WRT the marshalling, I agree that this is not a consistent way of using the propstat syntax (i.e. the status is not about the property, but that was just a convenient place to put it). 
So if nobody implements this, we certainly could define a cleaner marshalling, but if any client/server does implement it, then we should leave it alone. 
Cheers, Geoff Julian wrote on 06/04/2004 09:47:56 AM: 
In RFC2518, the requirement is independant from the success of the LOCK 
request: "The response MUST contain the value of the lockdiscovery property in a prop XML element." 
( http://greenbytes.de/tech/webdav/rfc2518.html#rfc.section.8.10.1.p.2 ). 
1) For a successful LOCK creation, returning the element makes a lot of sense, because the client can check the actual state of the lock (did the server accept my Timeout header? 
what did it persist in the DAV:owner property?). 
I think that part is widely implemented and if fact used by popular clients such as MS Office (it checks the response body to decide whether the created lock is really what it wanted). 
Therefore we should keep that part, and this is why I was saying "MUST be returned on success". 
2) For a failed LOCK request, there are (at least) two scenarios: 
2a) The resource at the request URI can not be locked, for instance 
because it already has a conflicting lock. 
In that case, I'd expect a 
4xx status code, and RFC2518 does not define a way to send back 
DAV:lockdiscovery. 
If we require the server to send back a 207 with 
response body in this case, this really needs to be stated explicitly 
because it's far from obvious. 
2b) The client tries a deep lock, and some of the descendants of the resource identified by the request URI can not be locked. 
In that case 
( http://greenbytes.de/tech/webdav/rfc2518.html#rfc.section.8.10.4.p.3 ), 
the text requires a 409 and a multistatus body (this is a bug in both RFC2518 and RFC2518bis, it should be 207, 
see...: http://greenbytes.de/tech/webdav/rfc2518.html#rfc.section.8.10.4.p.3 ). 
In that case, the DAV:lockdiscovery property for the resource at the request URI will usually be empty, and it escapes me why anybody would want to send that back to the client. 
Let's find out. 
Best regards, Julian 
Julian Reschke julian.reschke@gmx.de 
wrote on 06/05/2004 06:36:11 AM: 
By "this property", I meant the property on the nested resource that returned 424 because that nested resource was already locked. 
I agree that a lockdiscovery property for the resource identified by the request-URL must always be returned, whether or not the request succeeded. 
Yes, I agree. 
Well, it is stated in section 8.10.4, but I agree that it is not clearly stated, since the only way to guess how to marshall it is by extrapolation from example 8.10.10. 
( http://greenbytes.de/tech/webdav/rfc2518.html#rfc.section.8.10.4.p.3 ), 
see...: http://greenbytes.de/tech/webdav/rfc2518.html#rfc.section.8.10.4.p.3 Yes, that inconsistency in the spec doesn't contribute much in the way of clarity (:-). 
It might not be empty because there might already be a shallow lock on that collection. 
So returning the lockdiscovery property tells the client definitively whether or not there already is a lock on the request URL resource, which is useful information when 
dealing with the failure. 
Yup. 
Cheers, Geoff 
Well, the 424 is returned for the request resource (because it has a failed dependancy). 
The non-424 status (in the RFC2518 example http://greenbytes.de/tech/webdav/rfc2518.html#rfc.section.8.10.10 it's a 403) comes without the DAV:lockdiscovery property (and I do agree that it may be useful here, but that's not what the spec says). 
...but the multistatus response body is only mentioned for marshalling failures due to depth:infinity... 
In the meantime I found out that at least Apache/moddav and Sharemation indeed use this format. 
What we should do...: 1) Find out whether there are clients that actually process this information. 
As far as I can tell, it will only be useful if and only if you're trying to get an deep, exclusive lock on a resource that already has a shared lock. 
I'm only aware of two clients using shared locks. 
The first one being our own (and I know it doesn't use that information), the other being Adobe GoLive (for which I'll check). 
2) If the answer is "yes" *and* we agree not to break them, we'll need to figure out how to precisely define that response format (a single example is not good enough). 
3) On the other hand, if the answer is "no" let's define what we *like* 
the protocol to do and come up with a cleaner design (precondition code 
with nested content as in http://greenbytes.de/tech/webdav/rfc3744.html#rfc.section.7.1.1 ? 
Best regards, Julian 
Hello client implementors! 
-- please respond on this thread and let us know if you use the 'lockdiscovery' property value, which is returned in failed LOCK requests. 
(If no clients use the property value as returned in failed LOCK 
requests -- maybe they all do another round-trip to get the value -- then we might as well simplify, rather than optimize for this failure case) Lisa 
The Mac OS X WebDAV file system client uses exclusive locks. 
The lockdiscovery property is only used if LOCK is successful. 
- Jim 
OK, I just tested Adobe Golive (the client besides our own I'm aware of using shared locks) with Apache/moddav, trying to get an exclusive lock on a resource that already has a shared lock. 
The response from Apache/moddav is a 423 Locked, so no Multistatus. 
Unless I'm missing something this means that the marshalling shown in section 8.10.10 of RFC2518 ( http://greenbytes.de/tech/webdav/rfc2518.html#rfc.section.8.10.10 ) indeed won't help any clients at all; and as it is underspecified we should just get rid of it. 
Proposed changes: 1) Change section 8.10.2 ( http://greenbytes.de/tech/webdav/rfc2518.html#rfc.section.8.10.1.p.2 ) to say: "The response for a successful LOCK creation request MUST contain the value of the lockdiscovery property in a prop XML element." 
2) When we define named preconditions, define a content model for the precondition that will reveal the lockdiscovery property. 
Jason, could you please add this to the issues list? 
(I'm adding this to my list as http://greenbytes.de/tech/webdav/draft-reschke-webdav-locking-latest.html#rfc.issue.8.10.1_lockdiscovery_on_failure , please let me know if should rephrase it). 
Best regards, Julian 
