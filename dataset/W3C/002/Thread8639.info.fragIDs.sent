Please see below... 
From: rhimes@nmcourt.fed.us[SMTP:rhimes@nmcourt.fed.us] 
Sent: Monday, November 29, 1999 3:27 PM Subject: Re[2]: The real crux... [ snip ] 
...(the ability to 
move a document internal to/from external and external to external without breaking the signature). 
Actually, this sounds like it should have been a basic requirement, not just for me but for the generic world of applications. 
I agree. 
Have we missed something or have I missed something? 
;-) Here's our situation. 
We will likely have signed documents where the content and the signature reside in the same file, initially. 
Later, we may want to store the documents in a bulk archive (some of these files are HUGE), and keep only a striped down "shell" in a secure repository for long-term storage (life of the airplane = 40+ years). 
This "shell" might contain only a reference to the file in bulk storage and the original signature. 
(The need for a manifest may not be apparent at the time the original document is signed.) How? 
I'm not sure, but for us it will be a requirement that the signature not break just because we chose to later separate (or reassemble) the document content and its signature. 
Thots? 
Larry Bugbee, Digital Signatures, Boeing 
Thanks, Larry. 
I'm dealing with huge documents in court filings, and face the same problem. 
The only thing I'd like to add is that we need this capability to be part of core behavior (it isn't now). 
Rich 
From: rhimes@nmcourt.fed.us[SMTP:rhimes@nmcourt.fed.us] 
Sent: Monday, November 29, 1999 3:27 PM Subject: Re[2]: The real crux... [ snip ] 
move a document internal to/from external and external to external without breaking the signature). 
Actually, this sounds like it should have been a 
basic 
requirement, not just for me but for the generic world of applications. 
This is an important requirement for the system, I do not however accept that this automatically leads to this being a DigSig requirement Being able to process a document to detach/re-attach a signature sound to me useful and reasonable. 
I am not clear as to what the signatures would be doing wrt the records archive system proposed. 
Unless the signature is prepared in a manner that is archive friendly (signing a manifest of content + abstract) I don't see what can be usefully done with it. 
You have to have the content for the signature to tell you anything. 
A digital signature only has meaning if it has been verified. 
What you could do in an archive situation is to create a signature on an archive manifest covering the original document, an abstract and the original signature. 
Such a signature would be a second order statement (a signature attesting to the fact a signature once existed). 
But in the circumstance proposed that is the best that can be done. 
Phill 
From: rhimes@nmcourt.fed.us[SMTP:rhimes@nmcourt.fed.us] 
Sent: Monday, November 29, 1999 3:27 PM Subject: Re[2]: The real crux... [ snip ] 
move a document internal to/from external and external to 
external without 
breaking the signature). 
Actually, this sounds like it should 
have been a basic 
requirement, not just for me but for the generic world of applications. 
Phill, 
What you could do in an archive situation is to create a signature on an archive manifest covering the original document, an abstract and the original signature. 
Such a signature would be a second order statement (a signature attesting to the fact a signature once existed). 
But in the circumstance proposed that is the best that can be done. 
Firstly, I don't see how your proposed solution solves the problem. 
To have a signature S2 *prove* that a signature S1 used to exist doesn't seem to help the verifier, who must produce a signature that validates with the *signer's* public key in order to be taken seriously. 
A signature S2 created by the verifier is self-serving and hence inadmissible. 
Larry suggests that it may not be known at the time of signature creation that a 'manifest' is required. 
This was probably an allusion to an earlier manifest-based solution I presented earlier in this thread, which appears again below. 
For starters, it is absurd to suggest that a manifest would not be required given the storage strategy he described. 
However, on the supposition that this constraint did exist, the solution really is as simple as having the application take the 'shell' document with the signature, use 
it to dig up the archive data, put the two back together, THEN call upon 
core signature behavior to validate. 
Since it is quite likely that the application designer will know about the archive before the signature element is defined, it is possible to create a manifest M that contains an objectreference O_1 indicating an element X's base64 decoded text. 
The objectreference to X in M MUST use an xpath of string(child::text()) followed by a base64 decode (Rich must uses these transforms whether he acknowledges it or not). 
The objectreference O_2 in the signature that indicates the manifest M can use transforms that omit the specific xpath and base64 decode describe above, as well as the Location or IDref that indicates X. 
This allows him to move the data from within X to an archive and to make the necessary modifications to objectreference O_1 (the one appearing in M). 
Thus, the signer's signature can be preserved despite the desired changes. 
This is the notion of document closure. 
Certain specific changes can be allowed by a signer since it can be proven that the specified changes pose no security risk. 
Rich indicated that he did not like the manifest idea and wanted core behavior to do the work. 
The stated reason was so that he could get off-the-shelf software to do the work. 
Yet, it is quite likely that vendors will implement the manifest part of the spec, making API calls available to applications like CoreValidate() and ManifestValidate(). 
One extra function call is not a lot to ask! 
It does seem unlikely that core behavior will be modified to solve this problem since it REQUIRES the ability to transform the ObjectReferences in SignedInfo. 
To the extent that this is an unpopular idea is the same extent to which it is decided that scenarios like those described by Rich and Larry are application-specific. 
However, I can agree that it is not absolutely necessary to address these problems in core behavior since these applications can simply reconstruct the document signed before passing them to other applications that only understand core signature validation. 
My main point in mentioning these 
scenarios is that they came to me from others, I see how to modify core behavior to solve them by transforming SignedInfo, there really is no alternative that can be secure, so the WG has to decide whether to 1) Make the modification to transform SignedInfo 2) Decide that the scenarios are application specific So far, there have been no other viable options, except those that I have demonstrated result in an appalling security breach. 
Since the majority WG opinion is against option 1, it seems that our chairs should bring about a decision process so the WG can close this issue. 
John Boyer Software Development Manager UWI.Com -- The Internet Forms Company 
I oppose 2) since I think the sceanrios presented so far show that signing and validating moving resources is a very general need. 
To phrase it abstractly, it stems from the web being dynamically changing. 
So, there is not only a distinction between internal and external resources in (information) space but also an analogouos between fixed and movable ones in time direction. 
this affects not only XML-DSig but any sufficiently general web application. 
Especially for XML-Signatures, one is lead to the conclusion that the location of the signed resource has to be omitted from the digesting chain that produces the (input for the) digital signature. 
If one accepts that this issue is indeed so basic, this speaks for including this ability in core signature behaviour. 
The two solutions proposed so far are 1) and transforms over a manifest described above. 
I see no technical arguments against both.What makes me feel uneasy about them is that they are not explicit, that is, directly human-understandable. Again, if the orthogonal discriminations internal vs. external and fixed vs. movable are accepted as basic, what speaks against having special syntactic provisions in XML-DSig for _both_, like an additional RelocatableObjectRef element? 
Andreas Dr. Andreas U. Schmidt, Dept. 
SIT | mailto:aschmidt@darmstadt.gmd.de 
GMD German National Research | phone :+49-6151-869-712 
I'll repeat the court filing example. 
An attorney now creates a PDF document, a pleading to be filed. 
These PDF documents can be huge. 
The PDF is base64-encoded and packaged in an XML document. 
The XML document has identifying information needed to index the document (such as case number and brief description). 
In addition, we would like to carry a digital signature in the XML document computed over the original PDF format. 
This XML document with the enclosed PDF can then be transported from a law firm to the court, court to court, and so on, and be validated before it is accepted. 
At the court, we want to separate the PDF from the XML document and store the PDF in a file system. 
The XML documents can be stored separately (perhaps in an object database) and used to reference the PDF document (now thru a URI in the XML document). 
Note that the XML document has useful information independent of the PDF. 
We might just want to know what documents are in a case, by short description. 
If we 
need to access or validate a particular PDF, we can use the signature in the XML document, otherwise it is just part of the identifying information. 
One reason for separating the two is that we have found that giant BLOBS in a 
database cause a big penalty in access time. 
The other reason is that current automated indexing systems work on native formats (for example, scan the file directories for all PDFs that contain the word "abuse" within three words of the word "child"). 
Larry seems to have a similar situation at Boeing, and maybe he would like to elaborate. 
Well, sort of. 
My take is that checking the signature is optional (see above). 
It's there when you need it. 
A good example of a detached signature is a time 
stamp system. 
You send a signature and get it officially time stamped to, for example, help prove that you came up with an idea first. 
The idea can remain undisclosed until the "proof" is needed. 
Knowing that a signature "once existed" sounds pretty useless to me. 
I don't buy that this is the best that can be done. 
Thanks, 
Rich 
If we 
I am still unclear as to the issue here. 
Either we have a manifest that breaks down the huge document into components or we have one huge blob. 
Case A) We have a Manifest. 
We can validate any component in the manifest that is available to us. 
This is already supported. 
Case B)We have a huge chunk of data signed as a single unit. 
We might as well store the signature with the BLOB in the archive. 
The signature is of zero utility without the accompanying data. 
Clearly a document management system should be able to track two related documents (the BLOB and its signature) in the archive. 
I still don't see how that this creates any new requirements. 
Document management systems should support meta-data. 
That is a document management system requirement, not a dig sig requirement. 
signatures are only one of hundreds of types of Meta-data that the DMS should be able to manage. 
If you don't check the signature it tells you nothing. 
The timestamp is a signature on a document. 
To give meaning to the timestamp you need to read that document. 
That document also happens to be a signature on yet a third document. 
You are right in pointing out that to give meaning to a timestamp you don't have to derefference the entire chain of authenticated data. 
All this points to is that signatures have to be first class objects which is already a requirement. 
Actually this is what your timestamp is. 
Phill 
I agree that the signature is of zero utility without the accompanying data in the end. 
That doesn't mean the document and signature must be co-located. 
Are you saying they must be co-located, or am I misunderstanding your point? 
Are you implying that nobody will ever by interested in developing an XML-based DMS? 
If they are developed, isn't it possible that they would require this dsig support? 
It's there if you need it. 
Just because it is there, it doesn't mean we must check it (dereference it) every time. 
Digital signature is just one of the pieces of information about the document. 
You are allowing these signatures to not be co-located with the content signed, which indicates that I may be misunderstanding your point of view. 
Also, the application has the option of dereferencing and validating, but it doesn't have to which seems to counter your argument that "If you don't check the signature it tells you nothing." 
OK, I think we are in different contexts here. 
If you are arguing that there is no reason for detached signatures or detached documents, I suggest we agree to disagree. 
If I misunderstood, let me know. 
Thanks, Rich 
