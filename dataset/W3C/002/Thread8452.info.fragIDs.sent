This is not a typical specification Last Call, but a requirements document Last Call. 
Where the specification Last Call requires commitment for review, this Last Call solicits/prompts those commitments. 
Since this WG is not formally part of any CG, procedurally it is unclear which CG I should coordinate with in order to procure review commitments; substantively, the XML-CG is an obvious choice. 
Over the next few weeks I will be attempting to 
procure commitments for review from members of the following groups identified in the Requirements Document. 
1. 
The XML Signature specification should meet the requirements of the following applications: 1. Internet Open Trading Protocol v1.0 [IOTP] 2. Financial Services Mark Up Language v2.0 [Charter] 3. At least one forms application [XFA, XFDL] 2. To ensure that all requirements within this document are adequately addressed, the XML Signature specification must be reviewed by a designated member of the following communities: 1. XML Syntax Working Group: canonicalization dependencies. 
[Charter] 2. XML Linking Working Group: signature referants. 
[Charter] 3. XML Schema Working Group: signature schema design. 
[Charter] 4. Metadata Coordination Group: data model design. 
[Charter] 5. W3C Internationalization Interest Group: [AC Review] 6. XML Package Working Group: signed content in/over packages. 
7. XML Fragement Working Group: signing portions of XML content. 
XML-Signature Requirements W3C Working Draft 1999-August-20 Joseph Reagle Jr. reagle@w3.org 
Last Call Ends 1 October 1999 W3C Status of this Document This is a Last Call XML Signature Requirements public Working Draft. 
This report is not expected to be advanced to Recommendation. 
Instead, this Last Call designation is (1) a representation of WG consensus, (2) an invitation for comments that will affect the future course of the technical specification, and (3) an opportunity to identify and obtain commitments regarding WG dependencies. 
This document will be referred to at least the W3C XML Plenary Interest Group and W3C Chairs Working Group. 
Last Call period ends when dependencies between WGs have been acknowledged and the Signature Chairs have procured commitments of review. 
This is expected to take six weeks from the date of publication. 
This document attempts to capture the Working Group's consensus though it contains points which are still uncertain or not well specified. 
Issues which are still being actively discussed during the publication of this document are of class="discuss" and rendered in navy by style sheet compliant applications. 
Please send comments to the editor reagle@w3.org 
and cc: the list w3c-ietf-xmldsig@w3.org . 
Publication as a Working Draft does not imply endorsement by the W3C membership. 
This is a draft document and may be updated, replaced or obsoleted by other documents at any time. 
It is inappropriate to cite W3C Drafts as other than "work in progress". 
A list of current W3C working drafts can be found at http://www.w3.org/TR Abstract This document lists the design principles, scope, and requirements for the XML Digital Signature specification. 
It includes requirements as they relate to the signature syntax, data model, format, cryptographic processing, and external requirements and coordination. 
Joseph Reagle Jr. Policy Analyst mailto:reagle@w3.org 
XML-Signature Co-Chair http://w3.org/People/Reagle/ 
I object to the following requirement: 3.2 The specification must specify at least one mandatory to implement signature canonicalization, content canonicalization, hash, and signature algorithm. 
No justification is provided for requirng mandatory implementation of a canonicalization algorithm. 
A canonicalization algorithm is not required to create a signature. 
The simplest implementation of a signature verifier is to validate the hash of the bits on the wire. 
The simplest implementation is desired because it is the least likely to have errors. 
A canonicalization algorithm introduces potential ambiguity into the bit-stream presented and is therefore a security risk. 
If an application is presented with a bit stream which does not validate it MUST be permitted to reject the signature. 
It MUST NOT be required to manipulate the data to make the signature verify. 
I propose the following replacement: 3.2 The specification must specify at least one mandatory to implement hash, and signature algorithm. 
Dovetailing on Phill's point, it was my understanding that 'null' c14n would be one of the possibilities. 
It is necessary that the null c14n be mandatory due to the vast number of people who will want to create signatures of level 0 compliance while also sticking to the original format of the data being signed (the bits on the wire, as Phill puts it). 
If this is true, then choosing the null c14n as the required c14n would seem to solve the problem. 
If this is not what you meant, then you should probably change the requirement to say "two c14n algorithms" (null and whatever else you had in mind). 
John Boyer Software Development Manager UWI.Com -- The Internet Forms Company [mailto:w3c-ietf-xmldsig-request@w3.org]On 
Behalf Of Phillip M Hallam-Baker 3rd; Jon Bosak 
I object to the following requirement: 3.2 The specification must specify at least one mandatory to implement signature canonicalization, content canonicalization, hash, and signature algorithm. 
No justification is provided for requirng mandatory implementation of a canonicalization algorithm. 
A canonicalization algorithm is not required to create a signature. 
The simplest implementation of a signature verifier is to validate the hash of the bits on the wire. 
The simplest implementation is desired because it is the least likely to have errors. 
A canonicalization algorithm introduces potential ambiguity into the bit-stream presented and is therefore a security risk. 
If an application is presented with a bit stream which does not validate it MUST be permitted to reject the signature. 
It MUST NOT be required to manipulate the data to make the signature verify. 
I propose the following replacement: 3.2 The specification must specify at least one mandatory to implement hash, and signature algorithm. 
If we're counting noses, I agree with Phill. 
I'm not comfortable that any of the canonicalization algorithms hitherto proposed definitely do not damage the data in ways that are security relevant. 
-Ekr [Eric Rescorla ekr@rtfm.com] 
PureTLS - free SSLv3/TLS software for Java 
At this point, I think that it is becoming more clear that there will be different "levels" of conformance with the XNLDSIG standard. 
The null canonicalization algorithm has long been required and should serve the purpose of those who need only perform the primitive operation of signing immutable binary hunks. 
There are vast areas of signing XML objects which will require something like the canonicalization being produced by the W3C XML Syntax WG or the canonicalization aspects of the DOM-HASH algorithm. 
(And this XML canonicalization will be required whether the signature is in XML syntax or CMS or whatever.) See other comments below. 
From: "John Boyer" jboyer@uwi.com 
Date: Fri, 20 Aug 1999 14:22:15 -0700 Message-ID: NDBBLAOMJKOFPMBCHJOIMENFCAAA.jboyer@uwi.com 
It probably should have said "XML content canonicalization" to be clearer. 
Justification has been given elsewhere of the requirement for the availability of XML canonicalization. 
Mandatory implementation is required for interoperability. 
Justification is indeed not provided in the requirements document but it isn't for other requirements either. 
Availability of only primitive immutable binary hunk signatures will result, for a vast range of cases, is some combination of two outcomes: (1) systems were signature rarely verify due to changes in the signed object which are insignificant for that application leading to a choice of non-operation or insecure-operation and (2) ad hoc application based canonicalization resulting is substantial burdens on applciation implementers and lack of interoperability. 
While some application specific transformation will be necessary in some cases, I believe that most of the canonicalization requirements of most applications can be handled by a tiny number of standard canonicalization algorithms (including the null algorithm). 
I reject your attempt to mandate by pure assertion the highly secure and useless signatures for the vast range of applications that require non-null canonicalization. 
I have posted the IOTP scenario which this WG is required by its charter to support. 
The IOTP specification is available on line. 
Plese prove that practice implementation of IOTP is possible without canonicalization. 
At this point, since we have only one requirements document that does not distinugish "levels" of conformance to a resulting XMLDSIG standard, it is probably best to go with vaguer, more general requirements so we can get this requirements document out and what we decide later will meet it. 
So I do not object to this wording change. 
However, I consider it a forgone conclusion that, in order to produce a usable and interoperable system for signing XML objects for a variety of applications, we will specify XML canonicalization algorithms and most likley mandate the implementation of one or two of them for those that claim conformance to that level of the standard. 
Donald 
I have a few comments as chair of the XML Fragment WG (and proposed co-chair of the proposed future XML Packaging WG): 
Under 3. Requirements, 2. Format, point 4 reads (in part): 4. ...This WG must specify a simple method of packaging and encapsulation if no W3C Recommendation is available. 
Though the XML Activity Phase III [1] proposal includes an XML Packaging WG, it is not scheduled to start for some time, so it is fairly likely that the XML Sig WG will not have a W3C Rec for packaging in time. 
I 
certainly sympathize, as this is the same situation in which the XML Fragment WG found itself. 
The XML Fragment WG attempted to develop as minimal a "packaging" mechanism as possible in the hopes that it would be a subset of whatever future packaging scheme is developed. 
I would 
hope the XML Sig WG could do likewise, perhaps using something as similar as possible to what the XML Frag WG did normatively and/or demonstrated non-normatively in its spec [2]. 
[1] http://www.w3.org/1999/05/xml5436 [2] http://www.w3.org/TR/WD-xml-fragment and, more specifically, 
Under 3. Requirements, 4. Coordination, there is the phrase: XML Fragement Working Group: signing portions of XML content [side-note: "Fragement" - "Fragment" in the above] and the Comment: Members of the WG are very interested in signing and processing XML fragments and packaged components. 
Boyer asserts that [XML-fragment] does not "identify non-contiguous portions of a document in such a way that the relative positions of the connected components is preserved." 
Packaging is a capability critical to XML-Signature applications, but it is clearly dependent on clear trust/semantic definitions, package application requirements, and even cache-like application requirements. 
It is not clear how this work will be addressed. 
These comments raise some concerns for me that some folks may either misunderstand XML Fragments or expect them to be doing more than they are. 
In short, packaging was deemed--insofar as possible--to be outside the scope of the XML Fragment work. 
As an important aside, it turns out that everyone tends to mean something different when they say "fragment," and careful terminology is very important. 
Please see the terminology section of the XML Fragment Interchange spec [3] for the terms the XML Fragment WG came up with. 
[3] http://www.w3.org/TR/WD-xml-fragment#terminology 
The XML Fragment Interchange spec (1) defines what can be a fragment body, (2) describes a way to specify context information about it, and (3) suggests a very simple (for lack of a better term) "packaging" method only because there was no existing work on XML packaging, but the XML Fragment WG would be loath to go any further in the direction of packaging in light of the expected XML Packaging WG. 
As far as "signing and processing XML fragments," since an XML fragment package (and a fragment context specification document) is a well-formed XML document, signing it should be no different than signing any XML document (though I could be missing something about signing, that not being something on which I've got expertise). 
Currently, the very simplistic "packaging" only allows one fragment body per fragment package. 
Therefore, it is true that "[XML-fragment] does not 'identify non-contiguous portions of a document in such a way that the relative positions of the connected components is preserved'." 
The goal of XML Fragment was to provide enough context for a single fragment body to allow it to be parsed and processed, not to represent relationships among parts of documents or to package multiple parts together. 
Also note that the XML Fragment spec puts constraints on what "portions of a document" can be considered fragments; basically, a fragment must be "well-balanced" (similar to what XML allows as the content of a "well-formed external parsed entity"). 
It sounds to me like there are several important requirements coming out of XML Sig that need to feed into the XML Packaging WG. 
I 
think these requirements need to be stated clearly in terms of reqs for the XML Packaging WG, not the XML Fragment WG. While it is likely that the XML Sig will need to make progress in advance of the start of the XML Packaging WG, I think specifying the requirements now would still be beneficial. 
The scope of the XML Fragment WG is pretty much limited to interchanging information about the context (in the XML parsing sense) of a single fragment body. 
Though I could be missing something, I suspect the existing XML Fragment Interchange spec covers all the needs of XML Sig in this area, and most of the XML Sig requirements will be more properly in the scope of an XML Packaging WG. I'll be glad to give my input to the XML Sig WG to help sort out which requirements are which. 
paul 
Paul, thank you for your comments. 
Others from the Signature WG should feel free to comment since they most likely understand the application requirements better than me, but a couple of quick responses below: 
Understood. 
We hope to have a stable and mostly implemented spec by end of year. 
Our packaging requirements are likely to be focused more on the meaning of the relationship of an included document and the ref it allegedly came from. 
Or to put it in f: terms, between the f:parentref and f:fragbody/ as an assertion of a relationship vouched by some party at some time, given the context of fetching or processing the content. 
Ok. 
Well, if you define the work as fragment as a single fragment in relation to its context, you are quite right. 
But we know our applications need more than that, and were hunting for a home for that issue. 
smile 
Signatures simply sign some octets. 
There are innumerable applications semantics that might be represented in that pile of octets. 
XML Signatures wants to keep it as simple and formal as possible while including a minimal set of the XML stuff out there (like fragments) such that we have a critical mass of functionality. 
So if we sign an XML fragment as a bunch of bytes, I agree. 
If Signed XML is a XML fragment application itself and using it to do some application/trust functionality (even if only minimally) things get hairy. 
This also applies to transformation or XLink. 
Particularly, the latter if XML Signature uses XLink to reference the things it signs, does that mean it has to know XPtr too (it'd be nice, but then all applications have to know it show they have shared semantics), but then there are many complexities involved that would take a great deal of time to think through. 
Here are a couple that I've identified: Dependency: logical/assertion semantics of package must be explicit. 
Dependency: expectations regarding the processing/c14n (e.g., white space) 
of content within a package must not violate signature or XML content semantics. 
Dependency: signed content in/over packages. 
how to combine element IDs such that they do not collide but also do not get changed? 
Dependency: how to show the relative relationships of package parts. 
For example, how to include XML content with stylesheets and related resources used for rendering. 
Dependency: signing non-contigous portions of XML content in a way that retains their relative positions/context. 
Joseph Reagle Jr. Policy Analyst mailto:reagle@w3.org 
XML-Signature Co-Chair http://w3.org/People/Reagle/ 
I think it may be important to be clear about your non-contiguous portions. 
Specifically, will they be restricted to what the XML Fragment spec calls well-balanced regions, or do they need to be able to be un-well-balanced? 
If the latter, that will probably raise a lot more issues and require a lot more coordination, say, with the XML Infoset and DOM and Fragments and XPointer and such (since most XML processes work on a tree or node model of XML element structure which wouldn't allow un-well-balanced regions). 
paul 
John Boyer has been the advocate for this requirement, so perhaps he can speak more authoritatively. 
My understanding is that one needs ways of signing portions of XML. 
I suspect Xlink/Ptrs could be abused in that I could have a series of locators referencing elements with given IDs and change the relative order of those resources within the document and the signature would still pass -- their relative order wasn't captured by listing the Xlinks as signature references. 
Excluding portions of a complete XML document from the signature, or selecting those portions and maintaining the context and their relative positions seem to be the two feasible options. 
Regardless, I expect well-balanced regions [1] are sufficient for the applications I know of. 
To that end, the content production [2:43] rule might even cover most of what people would want to do. 
[1] http://www.w3.org/TR/WD-xml-fragment#terminology 
Joseph Reagle Jr. Policy Analyst mailto:reagle@w3.org 
XML-Signature Co-Chair http://w3.org/People/Reagle/ 
Have a look at Section C.1 of the fragment spec. 
Note that in the FCS, the attribute of the transaction element is missing. 
Is this a mistake? 
I hope so. 
My understanding was that the FCS would be 
able to capture the entire body of ancestor information, which should include the attributes leading up to the document root. 
Regarding well-balanced regions, you've almost got it. 
We need the ability to specify a well-balanced region minus a set of well-balanced subregions (possibly given by some sort of XPointer exclusion list). 
The result still conforms to rule 43, but the fragment element may have fewer descendant elements than it had in the original document. 
As long as the possible mistake mentioned above is in fact a mistake, then what you have right now is the ability to give me a single element from a document along with the ancestor information that adds context to that element. 
Your section C.1 is a great example, actually, so I hope you don't mind if it ends up in the scenarios document! 
However, suppose you have an element consisting of three subelements, of which the first and last must appear in a signature, and the middle one must be omitted from the signature. 
For that, I seem to need to specify two fragments in my manifest. 
So when you verify a signature, it can tell the 
order that the fragments are specified in the manifest, and it can tell that neither the first nor the last item has changed, but the signature cannot tell you which element was first and which element was last. 
Now, if one were creating a hash algorithm for use in digital signature technology, and one were able to feed it S1 = AB and S2 = BA, and the same hash value came out for both, one would begin work on a new hash algorithm. 
But creating a hash is really just an attempt to decrease the cryptographic work. 
Digital signature technology requires that whatever it is signing should not be changeable in meaningful ways, and changing the order of elements can radically change the meaning of a piece of XML. 
John Boyer Software Development Manager UWI.Com -- The Internet Forms Company [mailto:w3c-ietf-xmldsig-request@w3.org]On 
Behalf Of Joseph M. Reagle Jr. John Boyer has been the advocate for this requirement, so perhaps he can speak more authoritatively. 
My understanding is that one needs ways of signing portions of XML. 
I suspect Xlink/Ptrs could be abused in that I could have a series of locators referencing elements with given IDs and change the relative order of those resources within the document and the signature would still pass -- their relative order wasn't captured by listing the Xlinks as signature references. 
Excluding portions of a complete XML document from the signature, or selecting those portions and maintaining the context and their relative positions seem to be the two feasible options. 
Regardless, I expect well-balanced regions [1] are sufficient for the applications I know of. 
To that end, the content production [2:43] rule might even cover most of what people would want to do. 
[1] http://www.w3.org/TR/WD-xml-fragment#terminology 
Joseph Reagle Jr. Policy Analyst mailto:reagle@w3.org 
XML-Signature Co-Chair http://w3.org/People/Reagle/ 
For the sake of others, see [1]. 
No, it's not a mistake. 
The entire FCS is optional as are all parts of it. 
Your understanding is correct. 
The FCS is *able* to capture all ancestor info, but none of it is required. 
The attribute of the transaction element could have been included in the FCS, it just wasn't in this example. 
I've never heard the phrase "XPointer exclusion list" before. 
It's not anything we've discussed in the XLink WG. 
I'm not positive what you mean by "fragment element" since that isn't a term used in the Fragment spec. 
But I think I can guess what you're getting at, and I have two comments: 1. 
What I think you're talking about would still be something that is well-balanced, and I think lots of people will be glad to know you aren't talking about something that is not well-balanced. 
I think we've dodged a big can of worms here (to mix metaphors). 
2. But what I think you're talking about isn't something covered in the XML Fragment spec. 
That spec only considers a fragment body to be a well-balanced consecutive sequence of characters of an XML document; that is, a single "subtree" of the original document tree. 
The definition of a fragment body does not include subtrees with holes. 
It's not a mistake, but an option. 
You do have the ability to send a single element with any amount of ancestor info you choose to include. 
In fact, you can have more than a single element--you can have several consecutive siblings (as shown in section 5.4 [2] and C.2 [1]) and even mixed content as a fragment body. 
You are welcome to use the C.1 example as is or with more context info (e.g., transaction's attribute) provided you don't imply that the XML Fragment spec requires any part of the FCS. 
XML Sig may put additional requirements on top of those in the XML Fragment spec for signing applications, but XML Fragment will have other users, and for maximum flexibility, no part of the FCS is required. 
I understand, but the only way to do that with the current XML Frag spec would be to have two separate fragment packages (specifically, FCS documents). 
These could be packaged together somehow, and perhaps the package signed. 
I understand this is suboptimal. 
The XML Frag WG even considered allowing multiple fragment bodies per FCS document, but decided not to do that in our version 1.0, and we got no comments to the contrary during last call. 
Since we have not yet gone to PR, we could review our decision and go through last call again, but that would hold up our work. 
Currently, the XML Frag WG is effectively closed and any further XML Frag work is scheduled to be handled by the XML Core WG being proposed as part of the XML Activity III Proposal [3]. 
We have to date had no input that we need to do more, but a strong statement from XML Sig at this time might lead the XML Core WG to consider re-opening this issue before sending the XML Frag spec on to PR. Please provide your input to [3], as that is the current vehicle for this. 
Note that, even if accepted as a new requirement at this date, the XML Frag work would only *allow* an FCS document to consist of multiple fragment bodies. 
It would not address how one would specify "a well-balanced region with holes." 
That would have to be a requirement on XPointer or something else (I'm not sure what). 
paul [1] URI ref http://www.w3.org/TR/WD-xml-fragment#examples [2] http://www.w3.org/TR/WD-xml-fragment#fcs-example [3] http://www.w3.org/1999/05/xml5436 
