When I'm trying to perform a directory browsing, that I'm going to present to a user. 
Should I then present the Displayname info or should I pars the href to get the name of the resource, from the Propfind request? 
If I should use the Displayname info, can I rely on that it only contains the name of the resource and not the complete path? 
( this seems to be the case for IIS, Xythos, Zope. 
But not for CyberTeams server ) 
/Rickard 
When I'm trying to perform a directory browsing, that I'm going to present to a user. 
Should I then present the Displayname info or should I pars the href to get the name of the resource, from the Propfind request? 
If I should use the Displayname info, can I rely on that it only contains the name of the resource and not the complete path? 
( this seems to be the case for IIS, Xythos, Zope. 
But not for CyberTeams server ) 
Noone has answered, so I will take a stab. 
I don't think you can count on it containing anything and even that it exists. 
If it does exist, it does seem like the thing you'd want to display. 
Note: I don't think it's even technically required to correspond to the URI at all. 
Note: in the presence of multiple bindings, if the server initializes it to the URI and treats it as a dead property, that URI might be different from the URI from which it was accessed. 
This unexpected behavior is even 
possible (but less likely) if the value is only initialized to the last segment of the URI. 
That's only the technical answer. 
If you were asking for a consensus answer, you can add DAV4J to the list. 
It currently treats it as a dead property that gets initialized to the full URI. 
It also allows the client 
to change the displayname to anything they wish. 
As another point of reference: mod_dav treats it as a dead property and does *not* initialize the value to anything. 
In other words, it (typically) does not exist on a resource. 
If it does, then it only contains whatever somebody happened to shove into it -- that could be a JPEG image for all mod_dav cares. 
Cheers, -g Greg Stein, http://www.lyra.org/ 
client 
Well, the intent of the displayname property was to provide a mechanism by which a user could assign a more meaningful name to a resource other than just the URL. 
In particular I was thinking about non-latin character sets (like Kanji), which are currently poorly handled by existing URLs. 
However, this thread is certainly showing that there is an interoperability problem here. 
There are two choices: 1) Have the server make it a dead property, initialized to be empty. 
Clients would display the last path segment from the href URL preferentially, but would display the displayname property if set. 
2) Have the sever make it a dead property, initialized to the last path segment of the href URL. 
The client would always use the displayname value. 
Since client behavior is currently closer to case (1), this might be the best plan for moving forward. 
- Jim 
Hmm, since properties are part of the state of the resource, in the presence 
of bindings it is more than possible for there to be multiple URI names for 
the same "display name". 
This removes the value of the displayname property. 
Some solutions: 1) move displayname to the collection, and have the collection maintain displayname/binding pairs (this solution seems icky to me) 
2) deprecate displayname, and only use URIs for display to the user, and concentrate on i18n support for URIs. 
- Jim 
I vote for choice 2, since choice 1 is so egregiously bad. 
Cheers, Geoff From: Jim Whitehead ejw@ics.uci.edu 
Date: Fri, 21 Jan 2000 09:49:46 -0800 Content-Length: 708 
Hmm, since properties are part of the state of the resource, in the presence 
of bindings it is more than possible for there to be multiple URI names for 
the same "display name". 
This removes the value of the displayname property. 
Some solutions: 1) move displayname to the collection, and have the collection maintain displayname/binding pairs (this solution seems icky to me) 
2) deprecate displayname, and only use URIs for display to the user, and concentrate on i18n support for URIs. 
- Jim 
I don't understand what the problem is. 
The client can use the displayname to store some user-interpretable name for a resource that is independent of the binding, so that the user can tell that these two URLs apply to the same resource (they probably won't look at resourceID). 
For example, the client could parse the title out of an HTML document and store it there. 
If you default the display name to the last segment of the URL, then things can get confusing as you point out. 
It's up to the client to do something useful here. 
--Eric 
presence 
for 
Rickard, The CyberTeams server will soon provide the displayname property, which will represent whatever is recommended for displaying to the user. 
We haven't been returning it before since most of our earlier testing has been against Web Folders, which calmly ignores any values in displayname. 
I would not rely on the href containing a meaningful resource name, especially when you are looking at something other than a file system. 
Cheers....... Randall Randall Severy severy@cyberteams.com 
http://www.cyberteams.com/severy 
CyberTeams, Inc. info@cyberteams.com http://www.cyberteams.com 
Mt. Airy, MD (301) 829-6144 "Building effective teams in cyberspace" 1-888-832-5575 
Jim, It's also a big issue when you're dealing with resources from something other than a simple filesystem. 
It's very risky to assume that the URL always refers to a filename that is meaningful to the user. 
For example, our WebSite Director DAV interface supports DAV access to our workflow processing. 
The URL for an update request in a workflow stage would be something like "/WSD/Editing/requestB18894", which of course would be virtually meaningless to users. 
The displayname property however, will be set to something like "ADD /mydir/myfile.html" or "MOVE /mydir/myfile.html 
TO /otherdir/myfile.html", which *will* be meaningful to users. 
Because of the fact that Web Folders ignores the displayname property, we're having to do some seriously ugly URL mangling to make our DAV interface even modestly useable. 
I think it should be an option for servers to initialize the property to something meaningful to users, as in the example given above. 
Also, clients should display the displayname property if set and only display the last part of the URL if there is no displayname property, again based on the example given above. 
This assumes that the last path segment of the href URL has any meaning to the user, which is often not the case when dealing with document repositories and other non-filesystem servers. 
Cheers....... Randall Randall Severy severy@cyberteams.com 
http://www.cyberteams.com/severy 
CyberTeams, Inc. info@cyberteams.com http://www.cyberteams.com 
Mt. Airy, MD (301) 829-6144 "Building effective teams in cyberspace" 1-888-832-5575 
Jim, As I just mentioned in an earlier response, this assumes that the URIs represent something meaningful to the user. 
If WebDAV is going to be used for anything other than simple file systems, I think this would be a seriously limiting solution. 
Cheers....... Randall Randall Severy severy@cyberteams.com 
http://www.cyberteams.com/severy 
CyberTeams, Inc. info@cyberteams.com http://www.cyberteams.com 
Mt. Airy, MD (301) 829-6144 "Building effective teams in cyberspace" 1-888-832-5575 
From: Randall Severy severy@cyberteams.com 
It's also a big issue when you're dealing with resources from something other than a simple filesystem. 
It's very risky to assume that the URL always refers to a filename that is meaningful to the user. 
I don't think anyone is assuming that the URL always refers to a filename. 
The real question is under what circumstances the URL cannot be made meaningful to the user. 
In a common authoring scenario, the author selects a collection, and then does a PUT, COPY, MOVE, MKCOL, MKRESOURCE, or whatever, to create a new member of that collection. 
It doesn't matter whether the resource is implemented as a file, a database record, or whatever. 
For example, our WebSite Director DAV interface supports DAV access to our workflow processing. 
The URL for an update request in a workflow stage would be something like "/WSD/Editing/requestB18894", which of course would be virtually meaningless to users. 
What WebDAV protocol do you use to create a new update request? 
There currently is no "create a resource and assign it whatever name you want" request. 
The versioning protocol has introduced a couple of methods like that to create specific versioning metadata resources, but normally resources contain the URL assigned to them by the user. 
The displayname property however, will be set to something like "ADD /mydir/myfile.html" or "MOVE /mydir/myfile.html 
TO /otherdir/myfile.html", which *will* be meaningful to users. 
Because of the fact that Web Folders ignores the displayname property, we're having to do some seriously ugly URL mangling to make our DAV interface even modestly useable. 
By ugly URL mangling, do you mean making the last segment of the URL be the displayname? 
Why is this a problem (other than the internationalization issues that Jim mentioned, and perhaps concern about the length of the URL)? 
Cheers, Geoff 
Geoff, My mistake. 
As you picked up on, the key word I was referring to was "meaningful", not "filename". 
What I should have asked is "isn't it risky to assume that the URL always represents something meaningful to the user?". 
I would argue that the answer is Yes, in that the DAV server should be able to choose to use URLs that mean something to the internal representation of the objects but that are complete gibberish to the users. 
Forcing the server to generate URLs that are meaningful to the user puts a severe limitation on server design, IMHO. 
WebSite Director is a workflow/approval-based authoring system. 
When you send PUT, MOVE, COPY, or DELETE methods to WebSite Director, the change is not immediately made to the filesystem, which would defeat the purpose of an approval system. 
Instead, WebSite Director automatically creates an update request in the workflow system that matches the original DAV request. 
Following the necessary approvals of that update request, the actual update to the web site takes place. 
It is functionally equivalent to an FTP "incoming" directory, where a system administrator has to take some action to make an uploaded document visible and available to users by moving it out of the "incoming" directory. 
Consequently, WebSite Director assigns each new update request an internal identifier, which is used in the URL to refer to that pending update request (there's no point in using the original URL provided by the user since the update hasn't been published yet). 
That URL is in the form mentioned previously, "/WSD/Editing/requestB18894", for example. 
To be able to use Web Folders effectively with our workflow processing (since Web Folders doesn't do anything with the displayname property), we are adding functionality to mangle the URLs of update requests so that the above mentioned request would instead have a URL of: /WSD/Editing/MOVE |mydir|myfile.html 
TO |otherdir|myfile.html 
To be able to handle DAV methods against the above object, WebSite Director has to convert that mangled URL back into the internal identifier to figure out what to do. 
Just the simple fact that you can't include "/" characters in the "filename" component of a URL makes the above mangling very ugly. 
We settled on the vertical bar ("|") character as the closest approximation that we can get away with, but it's still very ugly. 
If, on the other hand, Web Folders (or any other DAV client) were to check for a displayname property, containing "MOVE /mydir/myfile.html 
TO /otherdir/myfile.html", for example, and display that to the user if it was found, it would work very smoothly for the client, the server, and the user. 
Cheers...... Randall Randall Severy severy@cyberteams.com 
http://www.cyberteams.com/severy 
CyberTeams, Inc. info@cyberteams.com http://www.cyberteams.com 
Mt. Airy, MD (301) 829-6144 "Building effective teams in cyberspace" 1-888-832-5575 
It seems to me the key issue here is whether the displayname property is a unique description for the resource (invariant of URL used to access it), or depends on its location in the namespace (and hence could depend on the URL used to access it). 
I like the idea of having the displayname property be a quality of the resource, essentially a short, URL-invariant description of the resource. 
If a resource was accessible via multiple URLs, the displayname would remain the same. 
The displayname also might very well not bear much correlation to the URL, and hence it probably makes sense to have its default value be blank, rather than the last path segment of the URL used to create it (or the last path segment of any URL used to access it). 
Also, since I don't appear to have done this already, I've added this issue to the issues list. 
- Jim 
