Hi, I've been running into some issues with XMLDSIG (specifically, portability of signatures) which make it difficult to use in a few situations. 
XPath states that an element's namespace axis includes all non-overridden namespace declarations from all ancestors. 
C14N then states that we must write these out during canonicalization, whether or not they are used. 
This means, as we know, that signatures cannot be successfully moved into documents which have other namespaces in force. 
I have an application that generates signed contracts: 
I then ship the contract off for remote processing: SOAP-ENV:Envelope xmlns:SOAP-ENV="http://schemas.xmlsoap.org/soap/envelope/" 
The contract signature is now invalid. 
The signer has no knowledge of the enveloping that will be used during transport, if any, so it can't generate a signature that will be valid in this context. 
According to XPath and (I think) the XML info set, when the recipient reads in this SOAP document, every element will receive a namespace axis consisting of all inherited namespace attributes. 
So, my fundamental question is: Is it sufficient for me to de-parent the Contract in DOM for it to lose these inherited namespaces? 
In practice, it is (using one particular parser). 
It is not clear to me whether this is strictly correct according to all the relevant specs. 
Even if it is sufficient for me to do this, is it acceptable that the XML document on the wire isn't signatorially valid, and that the recipient 
must know where to deparent the document for things to become valid? 
I think that this might be worth a paragraph in the spec because I believe it will be a common problem as XMLDSIG becomes more widely adopted. 
Merlin Baltimore Technologies plc will not be liable for direct, special, indirect or consequential damages arising from alteration of the contents of this message by a third party or as a result of any virus being passed on. 
In addition, certain Marketing collateral may be added from time to time to promote Baltimore Technologies products, services, Global e-Security or appearance at trade shows and conferences. 
This footnote confirms that this email message has been swept by Baltimore MIMEsweeper for Content Security threats, including computer viruses. 
Hi Joseph, If we expect interopability over such ported signatures, should we amend the spec with any text to this end? 
A lot of applications won't need to remove a signature from its original location, but it could be useful to add an editors' note to say that moving such signatures to a different context can break a signature due to a change of namespace context, and perhaps that this is necessary due to the impossibility of assessing the namespaces in use by the signed content. 
John Boyer 
Senior Product Architect, Software Development Internet Commerce System (ICS) Team PureEdge Solutions Inc. Trusted Digital Relationships v: 250-708-8047 f: 250-708-8010 1-888-517-2675 http://www.PureEdge.com 
http://www.pureedge.com/ 
Hi, 
While it may be true that many apps will not need to move signatures from context to context, many may (unwittingly) do so. 
For example, when transporting signed documents over SOAP to remote Web services. 
I think an editors' note should explicitly state that, in situations like this, signatures must either be computed in their final context, or they must be separated from any new context before verification. 
I'd also like to establish whether the latter is even possible. 
Because if it is not, then the editors' note should recommend that signatures _must_ be computed in their final context. 
I know this is just pedantic and is abundantly clear to us, but I've already encountered interop problems as a result of this, so I'd like to see it made explicit in our spec. 
Take the following signature containing an embedded SOAP envelope: ... soap:Envelope xmlns:soap="&amp;soap;" ... /soap:Envelope ... Embed it in a SOAP envelope for transport to a Web service: ... Signature xmlns="&amp;dsig;" ... soap:Envelope xmlns:soap="&amp;soap;" ... /soap:Envelope ... /Signature ... According to XPath, this is identical to: ... Signature xmlns="&amp;dsig;" ... soap:Envelope ... /soap:Envelope ... /Signature ... 
I'm not sure that an XML parser is required to distinguish between these two documents. 
If it is not, then there is no way to extract this signature from its new context. 
In this case, we should make this clear to potential users of dsig. 
Merlin r/JBoyer@PureEdge.com/2001.05.17/09:03:01 
Baltimore Technologies plc will not be liable for direct, special, indirect or consequential damages arising from alteration of the contents of this message by a third party or as a result of any virus being passed on. 
In addition, certain Marketing collateral may be added from time to time to promote Baltimore Technologies products, services, Global e-Security or appearance at trade shows and conferences. 
This footnote confirms that this email message has been swept by Baltimore MIMEsweeper for Content Security threats, including computer viruses. 
This is definitely an important application scenario. 
Do you mean via specs, or in your implementation? 
(Or do you mean your implementation doesn't distinguish between the two examples you give and you are wondering if others' don't/do?) Regardless, if we expect this to interoperate, I think we have to specify the behavior one way or the other -- and John seems to be advocating that the desired behavior results from the present processing? 
I presume this would be part of the processing in section 3.2.2? 
3.2.2 Signature Validation 1. Obtain the keying information from KeyInfo or from an external source. 
2. Obtain the canonical form of the SignatureMethod using the CanonicalizationMethod and use the result (and previously obtained KeyInfo) to validate the SignatureValue over the SignedInfo element. 
/+Note, if the Signature is not the root element of the document, ancestor namespace context, which may change if the Signature is intended to be portable (e.g., transported in an XML message), may affect the canonicalized form of the SignedInfo and consequently its signature validity. 
+/ /+Signatures that are intended to be portable portable signatures must/?/should: 1. be processed in their final context. 
(What exactly is the final context, is this equivalent to the document subset with Signature at it's root?) 2. the Signature should be generated in a particular portable form. 
(Rob's solution wasn't general? 
-- and using the same prefix is rather constraining/hackish?) Joseph Reagle Jr. http://www.w3.org/People/Reagle/ W3C Policy Analyst mailto:reagle@w3.org 
IETF/W3C XML-Signature Co-Chair http://www.w3.org/Signature W3C XML Encryption Chair http://www.w3.org/Encryption/2001/ 
Joseph, 
CoreValidation 3.2.2 Signature Validation 1. Obtain the keying information from KeyInfo or from an external source. 
2. Obtain the canonical form of the SignatureMethod using the CanonicalizationMethod and use the result (and previously obtained KeyInfo) to validate the SignatureValue over the SignedInfo element. 
/+Note, if the Signature is not the root element of the document, ancestor namespace context, which may change if the Signature is intended to be portable (e.g., transported in an XML message), may affect the canonicalized form of the SignedInfo and consequently its signature validity. 
+/ /+Signatures that are intended to be portable portable signatures must/?/should: 1. be processed in their final context. 
(What exactly is the final context, is this equivalent to the document subset with Signature at it's root?) I have not thought a lot about the consequences of the following idea, but anyway: Should we add an additional rule both to the processing rules for signature generation and validation, that the SignedInfo element should be isolated from its context prior to computing the canonicalized representation? 
2. the Signature should be generated in a particular portable form. 
(Rob's solution wasn't general? 
-- and using the same prefix is rather constraining/hackish?) Liebe Gruesse/Regards, DI Gregor Karlinger Phone +43 316 873 5541 Institute for Applied Information Processing and Communications Austria 
Hi Gregor and Donald, Obviously, I would be an advocate for adding an XPath transform to the C14N transform. 
I proposed this at our third FtF, but it made some people nervous at the time (and I can understand that; better safe than 
sorry). 
However, I think we all know now that the procedure is quite safe provided the following additional step is taken: after a c14n transform's xpath transform, add an implicit transform that ensures the signature element and all of its descendant elements, attributes, and at least the xmldsig namespace are in the resultant node-set. 
W.r.t. the 
problem you are trying to solve, this limits the scope of the XPath to namespace filtering, but with same document signatures, it eliminates the need to have a separate Reference, do a double hash calculation, etc. Cheers, John Boyer 
John, 
I cannot follow here. 
Could you please explain more detailed? 
Thanks, Gregor 
