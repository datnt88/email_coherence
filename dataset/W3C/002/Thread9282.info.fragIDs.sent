All, With reference to my previous message: there's not been an overwhelming response concerning the key question raised, but some muted agreement with the suggestion that this is really a syntactic issue. 
By way of a reminder, the key question was: 
1. Are anonymous resources allowed in the abstract graph syntax? 
In order to either (a) declare a quick victory, or (b) flush out the objections, I'm going to assume the answer is "no" and make a proposal for resolution of this issue. 
PROPOSAL: Anonymous resources may appear in the XML serialization of an RDF graph, but they have no distinguished representation in the abstract syntax of RDF. 
It is the responsibility of an RDF/XML parser to assign a unique URI for 
any resource that is not explicitly named. 
The essential property of a 
unique URI is that the same URI is not used as the explicitly given or automatically generated identifier of any other element in any graph that contains the uniquely generated URI. 
No specific mechanism for generating such URIs is mandated, but the following options might be considered: 
(a) relative URI forms in the generated graph. 
(b) uuid URIs. 
(c) URIs containing identification of the RDF parser. 
(d) URIs containing large random values. 
#g 
Not explicitly... 
I mean, I'm fine with triples stating 
anonymity, but not with a special type of "anonymous" resource. 
This is the problem I have. 
I think all parsers should spit out equivalent genids for the same document -- the spec should mandate the genid to use. 
"Aaron Swartz" | The Semantic Web http://www.aaronsw.com/ 
| i'm working to make it happen 
I agree with Aaron. 
Otherwise, testing parsers for compliance is tricky. 
Sergey 
PROPOSAL: Anonymous resources may appear in the XML serialization of an RDF graph, but they have no distinguished representation in the abstract syntax of RDF. 
I think that anononymous nodes have NO name (they are drawn as kind of *empty* circles) and the N-Triples _:label is not their name Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
[I forgot to  Graham's message] 
I think that anononymous nodes have NO name (they are drawn as kind of *empty* circles) and the N-Triples _:label is not their name Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
Aaron said: 
I completely agree. 
This seems to be very common in implementations, we should make it clear. 
I sort of agree. 
It would be nice, but I don't think it is mandatory. 
If we assume that the serialization of RDF is intended to move models between systems, the capability is already there to provide the URIs of all items deemed important. 
Forcing generated IDs to follow a particular scheme would make comparing models much easier, but there are some thorny issues around identity that we would have to tackle. 
I'd be happy with a non-normative convention suggesting how the IDs should be generated. 
I don't want it to be a MUST in the clarified spec. 
Ron 
I'm perhaps a bit out of the loop, but on this issue, please don't let my silence go as agreement. 
On the contrary: I consider it essential that the 
abstract syntax has a distinguished representation 
for anonymous nodes, and that the interpretation of these anonymous nodes in the abstract syntax works like existentially quantified variables in FOPL. 
I've given test cases and running code (n-triples2kif.pl) 
to support this position; I believe Pat H and somebody else agreed with me. 
Absolutely, yes. 
I can't support any such proposal. 
As to arguments in favor of such a proposal: from aaron: |I think all parsers should spit out 
|equivalent genids for the same document -- the spec should |mandate the genid to use. 
I'm pretty sure there is no algorithm for coming up with genids that works; i.e. there's no algorithm for sorting the triples in a graph: you can't treat a graph as if the edges didn't (sometimes) cross. 
From Sergey: 
|I agree with Aaron. 
Otherwise, testing parsers for compliance is 
tricky. 
We have two or three independent implementations of the test for whether two n-triples files match, using the existing n-triples syntax which *does* represent anonymous nodes in a distinguished fashion. 
Clearly it's preferable to complicate compliance testing to some extent -- an extent that is evidently tolerable, to at least 3 implementors -- than to complicate parsing with a consistent-genid algorithm, especially when no such algorithm has been implemented or even designed. 
Er.. I guess there's a hash based algorithm that's been designed and implemented, but it doesn't work, as I explained earlier. 
I suppose I should re-iterate in detail. 
But I don't have the details assembled just now. 
Dan Connolly, W3C http://www.w3.org/People/Connolly/ 
No! because multiple XML documents represent the same RDF; you'd get different URIs generated for "equivalent" anonymous nodes. 
If you're going to go down this route, the URIs should be UUIDs of some form. 
As it is, I'm opposed to dropping them from the model jan PS. unfortunatly, I'm in bed with something like the 'flu at the moment so an eloquent defence will have to wait until I feel better :-/ jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ Lambda calculus? 
I hardly know 'er! 
Not that tricky: Jena now includes support for this; I knocked up a C++ graph-equivalence thing in under a day. 
jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ 
I don't. 
Dan, I think you've made a strong case for variables in query expressions. 
I also think that Pat has argued fairly convincingly that this is logically equivalent to Skolemization -- i.e. substitution of a unique genId. 
I think these are important issues, but... My main concern is that this is not a clarification of RDF 1.0, but a significant extension of it. 
Therefore, I ask: (a) is there any respect in which my proposal contradicts M&amp;S 1.0? 
and/or 
(b) can you point to ways in which M&amp;S 1.0 supports your proposal to have special treatment of anonymous resources in the RDF model? 
and/or (c) do you think you have a compelling case for *changing* RDF 1.0 now rather than leaving this issue to be addressed in RDF 2.0? 
#g Graham Klyne Baltimore Technologies Strategic Research Content Security Group 
based on what we have testcased at I completely agree with you and I really wonder how else we could model/infer 
(which are not yet equivalent, but that's another challenge) 
yep Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
A quick note to bookmark a point: 
emitting the 'same' invented-URIs for un-named resource mentions is 
risky: if we make the generated ID purely a function of the bag-of-bytes XML document we could get situations where relative URIs are used to mention _different_ resources, but result in a parser emitting the same generated ID. 
I don't have time to cook up an example right here, but for eg. foo rdf:resource="../index.html"/ in different contexts means 
something different, so an rdf/xml doc including that might be mentioning a different pair of resources. 
Dan 
Ignoring any FOL and just taking the point of view "rdf is a data model", I wrote this a long time ago, but it indicates special treatment of anonymous resources is required: jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ Usenet: The separation of content AND presentation - simultaneously. 
?? That reads like an oxymoron to me. 
How can one state anonymity without referring to the thing in question, thereby rendering it not anonymous? 
Than it's not a genid. 
The global uniqueness of the token (not type) is part of what makes the genid idea work, seems to me. 
If my parser has to use the same id as your parser, then why not just include that id in the syntax? 
Pat Hayes (650)859 6569 w (650)494 3973 h (until September) phayes@ai.uwf.edu 
The answer is that in RDF, you *can't* infer this stuff. 
You use N3, which is way more expressive than RDF; it has negation and universal quantifiers, just for a start. 
Pat Hayes (650)859 6569 w (650)494 3973 h (until September) phayes@ai.uwf.edu 
OK, perhaps not anonymity then... more something along the lines of the various properties people are interested in assigning to anonymous nodes. 
Well, I wish they would have, but people are lazy sometimes and 
they don't like typing in lots of genids. 
So I see the syntax as 
an abbreviation more than anything else. 
"Aaron Swartz" | Blogspace http://www.aaronsw.com/ 
| weaving the two-way web 
Fine, but per http://www.w3.org/2000/10/swap/log# and e.g. http://www.w3.org/2000/10/swap/model.n3# one *can* produce/consume regular N-Triples, no? 
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
Yes and no. 
They do produce triples, but how are those triples interpreted? 
If they are interpreted using the meanings suggested by the M&amp;S (I refrain from saying 'semantics') then you can't validly infer this stuff. 
Cwm infers it by imposing some extra interpretations on the triples, ie in effect treating them as triple-encodings of expressions in some other language, which as far as I know has never been precisely defined anywhere, though it seems to be something close to prolog with a nonstandard negation (? 
A guess, as the only way to know for sure is to inspect the Cwm code and reverse-engineer the intended semantics.). 
log:N3Document a rdfs:Class; rdfs:comment """A document which, which parsed as Notation3 as defined in general by http://www.w3.org/DesignIssues/Notation3.html 
and this schema, conveys the intent of the author by the semantics defined on those specifications, and the semantics defined by the specifications of any identifiers used in the document. 
log:implies a rdfs:Property; rdfs:comment "Logical implication. 
Understood natively by cwm."; 
rdfs:range log:Formula; rdfs:range log:Formula. 
log:resolvesTo a rdf:Property; rdfs:domain doc:Work; rdfs:range log:Formula; rdfs:label "forumla"; rdfs:comment """This connects a document and the formula it parses to. 
Cwm knows how to go get a document and parse it in order to evaluate this.""". 
Notice in the last two cases the explicit reference to Cwm's 'native' ability to interpret something that is not defined in RDF. 
Pat Hayes (650)859 6569 w (650)494 3973 h (until September) phayes@ai.uwf.edu 
I think this point is made more concrete by the concern that DanBri raised at: #g Graham Klyne Baltimore Technologies Strategic Research Content Security Group The information contained in this message is confidential and is intended for the addressee(s) only. 
If you have received this message in error or there are any problems please notify the originator immediately. 
The unauthorized use, disclosure, copying or alteration of this message is strictly forbidden. 
Baltimore Technologies plc will not be liable for direct, special, indirect or consequential damages arising from alteration of the contents of this message by a third party or as a result of any virus being passed on. 
This footnote confirms that this email message has been swept by Baltimore MIMEsweeper for Content Security threats, including computer viruses. 
Well, obviously the URI generated would have to be based upon the base URI of the document -- otherwise it wouldn't work, as you point out. 
Does that solve the issue? 
If not, can you provide more specifics? 
[ "Aaron Swartz" ; mailto:me@aaronsw.com ; http://www.aaronsw.com/ 
] 
Consider the same bag-of-bytes document on different days (years). 
Nothing 
licenses the inference that the anonymously mentioned resource in 1999 
and 2001 publications of the document are the same. 
I don't see any reason for us to presume that the anonymously-mentioned instance of wn:Person in two occurances of this document must be identical when the rdf/xml bytes are identical and the base URIs are identical. 
Actually since i've used 'foaf:mbox'[1] (which is a daml unique 
property) one could find evidence to support this, but nothing at the vanilla RDF level does). 
--danbri [1] http://xmlns.com/foaf/0.1/ 
This isn't necessary -- you only need to say something like they're numbered based on the location of the XML element that defined them, or that they random UUIDs or something. 
[ "Aaron Swartz" ; mailto:me@aaronsw.com ; http://www.aaronsw.com/ 
] 
Random uuids won't meet the requirement I understand you're after, which is that different parsers would compute the same URI for anonymous nodes given the same RDF input. 
Random uuids are, effectively, skolem constants, which see other thread about whether reducing existentially quantified variables to skolem constants is OK or not. 
(my position: not). 
I've noodled on the approach of naming things based on their XML element position, and I've convinced myself that won't work either. 
I don't have a proof that there's no such algorithm, but I'm not likely to spend more time thinking about it until somebody makes a concrete suggestion (i.e. running code) of an algorithm that works. 
I'm pretty sure that, at a minimum, it requires the sort of tricks involved in putting a signature inside a signed document. 
Dan Connolly, W3C http://www.w3.org/People/Connolly/ mobile: mailto:connolly+pager@w3.org?subject=pls%20call%20+1-... 
That is indeed true. 
We actually have to do a lot of effort to achieve the right interpretation. 
I think it can never be achieved in ONE component. 
We have almost no interpretation capability in e.g. proof engines but their results can be interpreted by other components which can cycle back new matter. 
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/ 
Umm, what about the one built in to SiRPAC and most other RDF parsers. 
It will reliably generate the same numbered anonymous nodes for the same RDF/XML input. 
"Aaron Swartz" | ...schoolyard subversion... http://www.aaronsw.com/ 
| because school makes kids dumb 
But that algorithm generates the same identifier for lots of different inputs. 
consider doc1, which says: I'm thinking of something. 
[sirpac generates: doc1#_g1 ] It's greater than 5.[ sirpac spits out: doc1#g1 math:greaterThanNumeral "5" ]. then I edit doc 1 and feed it to SIRPAC again: I'm thinking of something. 
[sirpac generates: doc1#_g1 ] 
It's less than 5.[ sirpac spits out: doc1#g1 math:lessThan "5" ]. 
the documents I wrote down didn't conflict with each other: I was thinking of different somethings. 
But the triples that sirpac generates when parsing them do conflict: they say that the very same something is both less than 5 and greater than 5. The identifier has to carry all the information that was said about it in order to "work", no? p.s. if you don't like my informal "I'm thinking of something" syntax, it's mnemonic for: and Dan Connolly, W3C http://www.w3.org/People/Connolly/ 
DanC makes concrete a fundamental philosophical point: An RDF processor can never know enough about the real world to decide that two anonymous descriptions were intended to describe the same resource. 
Thus, if an RDF processor is ever to generate a URI for an anonymous resource, it must never use the same URI twice, otherwise it risks asserting that two different resources are in fact the same. 
The only algorithms that it can use therefore are those that generate (probably) unique identifiers each time they are called such as uuidgen. 
Brian 
Brian, 
I agree. 
This is the complication of requiring unique URIs mentioned previously. 
I think it's a choice we are coming close to making (one way or the other). 
#g Graham Klyne Baltimore Technologies Strategic Research Content Security Group 
True; but it may be worth remarking that this is partly because of the limited expressiveness of RDF, and might change in RDFn for n 1.0. 
For example if one could express uniqueness of a property, then knowing that two nodes had the same value of the property would be enough, whether the nodes were anonymous or not. 
Right, which is exactly the correct logical rule for generating a skolem constant from an existential assertion: the skolem name has be new, ie not used anywhere else in the logical theory. 
In our case the 'logical theory' has to be taken to be the entire Web in order to be safe. 
(Which does not mean that the entire Web is part of the theory, but that the processor has no way to know where the edges of its theory are.) 
Right, I agree. 
(650)859 6569 w (650)494 3973 h (until September) phayes@ai.uwf.edu 
