As mentioned in [1] and expected in [2] I'd like to move this document forward. 
If I request Proposed REC I might be able to make a case for advancement on the basis of [0], but the more documentation I have, the better. 
In particular I'd like to: 1. Fill in the row for the "#default" token and adequate performance for the empty cells. 
2. Have a report that someone tested it (even informally) in some application context (e.g., SOAP) and it did what they needed it to do. 
3. Have someone else try Gregor's examples. 
If you can contribute on any of these fronts, please do so -- if you can't immediately but hope to do so soon, feel free to email me off list. 
Also, if you know you have concerns or problems with exc-c14n, speak now or forever hold your peace! 
smile/ [0 http://www.w3.org/Signature/2002/02/01-exc-c14n-interop [1] http://lists.w3.org/Archives/Public/w3c-ietf-xmldsig/2002AprJun/0043 2. Exclusive Canonicalization I feel like the work on this specification is done and we're pretty much ready to move forward. 
I'd like to hear a few more people report success with Gregor's tests [1] and that you're satisfied with its operation in an application context. 
(Even if you've already sent in a report, if your column isn't complete or haven't interop'd with Gregor's tests, please do so.) If I get this feedback soon, I'll stage it for publication as a 
Proposed REC at the end of this month! 
[2] http://www.w3.org/TR/2002/CR-xml-exc-c14n-20020212 
We expect to meet all requirements of that report within the two month Candidate Recommendation period 
(closing April 16). 
Specific areas where we would appreciate further implementation experience are: 1. Speed of canonicalziation relative to Canonical XML; [23]it should be no slower, is it faster? 
2. Use in application contexts. 
Does the specified behaviour meet application requirements for flexibly canonicalizing document subsets if they are moved out of their context? 
For example, [24]does your application scenario lead to any difficulties in which a subset (e.g., payload) require the use of an ancestor base that is not easily remedied by including xml:base in the apex of the subset? 
Joseph Reagle Jr. http://www.w3.org/People/Reagle/ W3C Policy Analyst mailto:reagle@w3.org 
IETF/W3C XML-Signature Co-Chair http://www.w3.org/Signature/ W3C XML Encryption Chair http://www.w3.org/Encryption/2001/ 
Hi Joseph, 1. #default is in the examples, so yes. 
Performance is marginally better than regular c14n, depending on the input. 
2. We've used it informally in SOAP-based situtations and it solves lots of problems; particularly helps in the separation of some application layers. 
3. I've tried Gregor's examples and, with one exception (example 4, regular c14n, GrandChild, xml:fool should not be there?), 
I think everything works. 
For other folks' 
convenience I attach a signature that represents these examples (hope you don't mind, Gregor), along with the raw c14n output. 
I know you want non-signature-based examples but, for the sake of this thread, it's a lot easier to run a signature verify than to check these by hand. 
Merlin 
r/reagle@w3.org/2002.04.17/17:08:48 
The information contained in this message is confidential and is intended for the addressee(s) only. 
If you have received this message in error or there are any problems please notify the originator immediately. 
The unauthorised use, disclosure, copying or alteration of this message is strictly forbidden. 
Baltimore Technologies plc will not be liable for direct, special, indirect or consequential damages arising from alteration of the contents of this message by a third party or as a result of any virus being passed on. 
This footnote confirms that this email message has been swept for Content Security threats, including computer viruses. 
Merlin, 
I guess that you mean example 1 since this is the only one bearing an xml:fool attribute. 
According to the second paragraph of [1], section 2.4 I think the appearance of xml:fool as attribute of element GrandChild is correct: The processing of an element node E MUST be modified slightly when an XPath node-set is given as input and the element's parent is omitted from the node-set. 
The method for processing the attribute axis of an element E in the node-set is enhanced. 
All element nodes along E's ancestor axis are examined for nearest occurrences of attributes in the xml namespace, such as xml:lang and xml:space (whether or not they are in the node-set). 
For "GrandChild", this results in the list - xml:foo (barbarossa) - xml:lang (ge) - xml:fool (barbar) 
- xml:space (default) From this list of attributes, remove any that are in E's attribute axis (whether or not they are in the node-set). 
After this step, the following list remains: - xml:foo (barbarossa) - xml:lang (ge) - xml:fool (barbar) Then, lexicographically merge this attribute list with the nodes of E's attribute axis that are in the node-set. 
This step results in 
- xml:foo (barbarossa) - xml:lang (ge) - xml:fool (barbar) - xml:space (preserve) The result of visiting the attribute axis is computed by processing the attribute nodes in this merged attribute list. 
Am I missing something here? 
/Gregor [1] http://www.w3.org/TR/2001/REC-xml-c14n-20010315.html 
Yesterday, I was able to confirm all of my examples with Gregor's except for normal c14n in example 1. 
Yes, this is the problem I had, and I think Gregor is (unfortunately grin/ ) right: However, I also discovered a bug from Gregor's example 1 [a]. 
Presently, c14n.py does the following: 1. takes any xml_attrs (e.g., xml:lang) from previous recursions not rendered and adds them to local xml_attrs. 
2. if the element we are processing is in the subset, it renders the accumulated xml_attrs as part of that element and and resets xml_attrs=[] 3. it recurses. 
This has the effect of rendering all XML attributes that are "in affect" since the last ancestor was rendered. 
Sounds sensible, but it's not correct according to the the spec [b]. 
To fix this, I think we'd have to test whether the immediate parent was in the nodeset and keep a dictionary (instead of a list) of *all* ancestors' xml:foo attributes (not just since the nearest rendered one), with the *nearest* value. 
(Moving from a list to a dictionary is akin to what I did for the namespace bug.) This bug exists on in c14n, not exc-c14n. 
Hi Joseph, 
It is marginally faster depending on the size of the doc. 
Our code is still fresh and full of debugging code. 
Hopefully after code review and clean-up exc-c14n will be faster. 
I am finishing the conversion of our now deprecated SOAP-SEC handlers for Axis and HP-SOAP into new WS-security ones. 
Since WS-security 'strongly RECOMMENDS' the use of exc-c14n, I am using it to C9ze the SignedInfo of SOAP messages signatures. 
Yes, they seem to work. 
We have not try the signed version that Merlin 
has just sent but we will. 
I'll send you HP's entry for the interop matrix as soon as I have a better feel for the performances. 
Nicolas 
Hi, Joseph, My C14N and ExcC14N implementations included in LibXML passed all Gregor's 
examples. 
I have some problems with Merlin's signature test but I think 
it's a mistake 
in the test (see bellow). 
Also I have few comments to Gregor's examples Aleksey. 
Issues: 1) There are extra space in the "Result EC14N" (line 34) in the iaikTests.example3.xml 
file. 
I believe it's copy/paste problem :) 
2) In all iaikTests.example*.xml 
files there are extra spaces at the end of all results (after /Parent ). 
I assume that there are no more characters after /Parent . 
3) (Merlin's "signature" test") The Merlin's c14n-0.txt 
file is different from the 
result in iaikTests.example1.xml. 
From my point of view the last is correct: c14n-0.txt 
GrandChild xml:foo="barbarossa" xml:lang="ge" xml:space="preserve" /GrandChild iaikTests.example1.xml 
!-- Result C14N GrandChild xml:foo="barbarossa" xml:fool="barbar" xml:lang="ge" xml:space="preserve" /GrandChild -- 
Gregor, you are absolutely right. 
I'm not sure the spec actually intended it, but it sure says it. 
So, I agree with all your samples and attached is a corresponding signature over them. 
Merlin 
r/gregor.karlinger@iaik.at/2002.04.18/13:03:32 
The information contained in this message is confidential and is intended for the addressee(s) only. 
If you have received this message in error or there are any problems please notify the originator immediately. 
The unauthorised use, disclosure, copying or alteration of this message is strictly forbidden. 
Baltimore Technologies plc will not be liable for direct, special, indirect or consequential damages arising from alteration of the contents of this message by a third party or as a result of any virus being passed on. 
This footnote confirms that this email message has been swept for Content Security threats, including computer viruses. 
Thanks, Merlin! 
This version is much better :) LibXML (and XML Security Library) successfully verified this signature. 
Aleksey. 
Yes: The Phaos implementation supports the "#default" token, and performance appears, informally, to be at least as good for exc-c14n as for c14n. 
Not yet, sorry. 
Yes: The Phaos implementation successfully verifies all of Gregor's examples, as bundled in the 2nd version of Merlin's signature. 
(The 1st version fails, as expected.) Ari Kermaier arik@phaos.com 
Senior Software Engineer Phaos Technology Corp. http://www.phaos.com/ 
Aleksey, 
Yes, the single space at the end of line 34 should not be there. 
Correct. 
Please see Merlin's response to the list [1]. 
[1] l /Gregor 
Thanks, Gregor! 
I already tried second Merlin's example and everything worked just fine :) Aleksey 
