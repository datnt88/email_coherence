DELETE, as specified by HTTP/1.1 deletes a resource. 
Therefore if http://a/b and http://c are the same resource then deleting one MUST delete the other. 
If it does not, then they are not the same resource. 
DAV does not provide a mechanism to discover this connection. 
Given that we can create useful clients without it (witness the file explorer in Windows) and that it can be added later, there is no need to modify the DAV standard to provide this functionality. 
Yaron 
From: Larry Masinter [mailto:masinter@parc.xerox.com] 
Sent: Monday, August 31, 1998 11:42 PM Subject: RE: 'last call' comment on draft-ietf-webdav-protocol-07.txt-- resource:URL 1:1? 
Independent of future work on advanced collections, which would include the ability to set up equivalences and indirections and the like, what I'm worried about is the basic operability of the core protocol and the use of simple clients in the face of such (pre-existing) facilities. 
It is false reasoning to assert "the base standard does not provide any way of creating multiple-URL-per-resource, so therefore the base standard need not be clear about what happens when authoring against such a service", since the typical aliasing is _common_ in web servers. 
To give the simple case: Let us suppose that I have a webdav that does 'case folding' and treats two _different_ URLs, but they are the 'same' resource. 
Jim, are you saying that these represent two different resources, which happen to map to the same 'persistent chunk of state'? 
What I'm worried about is that in the current protocol, the client has to KNOW about the server's case folding rule (does "?" case fold to "?"?) in order to perform simple operations such as determining whether deleting http://host/A%d6 will delete http://a%f6/b. 
Under the paradigm that 'one URL, one resource', http://host/AB is a different resource than 
....I believe there is no way for an HTTP client to 
tell the difference between the following cases: Assume: URL A and URL B both retrieve entity E on an HTTP GET: A) Both A and B are identifiers for the same resource. 
B) Both A and B are identifiers for different resources 
which happen to 
return the same entity. 
Since it is impossible for a client to tell the difference 
between these two 
cases, it makes sense to me that there is a 1-to-1 
correspondence between 
URI and resource. 
There is no way for a client to tell whether a server does case folding. 
In practice, there are many other kinds of aliasing too, and one kind in particular (aliasing long paths http://a/b/c/d/e to short ones 
The concern is that protocol-07, as written, doesn't allow interoperable implementation with a server that employs aliasing, and makes some requirements 
on servers that wind up being (false) assumptions that clients will make. 
I think that it's simple to fix the protocol by adding a "parent" property, 
and removing the language that requires clients to munge 'the' URL for a resource in order to find the parent. 
With this fix, the 1-1 relationship between 'resource' and 'resource locator' wouldn't be mandated for all implementations (although it would be allowed). 
Larry 
requirements 
I'm not sure I agree there's a problem that needs fixing. 
For one thing, since no one ever wrote a 'requirements document' for any Web server that does aliasing, we don't know what the intended abstraction is, and hence can't tell whether WebDAV is breaking it. 
I can think of at least four possible intentions: 1 - a resource has one "true" URL, and may have additional synonyms. 
Deletion using the true name deletes the resource. 
Future references using the synonyms return an error. 
An attempt to delete using a synonym has no effect. 
(since there's no means in the protocol to create a synonym, why should there be one to remove it?) 2 - Same as 1, except that deletion of a synonym removes that name from the namespace but has no effect on other names. 
This is like the semantics of a Unix symbolic link. 
3 - All names are equally valid. 
Deleting a resource under any of its names deletes it for all of them. 
4 - All names are equally valid, but the resource only disappears when the last name is deleted. 
This is like Unix hard links. 
Does anyone have any insight as to which was the intended purpose of aliasing? 
Were the others considered and rejected for some reason? 
I'm not so sure it's simple. 
I suggest you try it yourself, then send the appropriate language to the list. 
For one thing, should it be parent, singular, or parent, plural? 
If you want it to be singular, then you are introducing some concept of a "true" URL with the others being second-class. 
For another, I would claim that if you wanted this at all, what you'd want would be a property whose value was the set of all names by which the resource could be located (ie. the synonyms). 
Given this you can find the 
set of parents trivially (by chopping the last component off). 
But given the parents only, you can't easily find the names. 
This property is in fact _exactly_ what I proposed as the "references" property in recent mail apropos ACR. 
It must of course be optional, as some servers will be disinclined to support it. 
As for the four semantics above, the ACR proposal provides semantics #2. 
Why? 
Because it does all that #1 does, plus more. 
#3 is dreadful, as it allows anyone who can link to a resource to also delete it. 
#4 is not as bad as #3, but I think many people like the idea of having full control over resources (they want to be sure they can really delete something and have it be gone.). 
regards Jim 
Consider two possibilities: "case insensitivity" and "host name aliasing", and then allow for other aliasing which has similar semantics. 
With "case insensitivity", you might treat "http://host.dom/PATH/x" the same as "http://host.dom/Path/x" and "http://host.dom/PaTh/x". 
With "host name aliasing", you might treat "http://server.dom/path/x" the same as "http://252.14.2.12/path/x" using the server's IP address instead of the server name, or even "http://big.server2.dom/path/x" 
where big.server2.dom is an alias for server.dom. 
There are many other forms of aliasing, but surely you will acknowledge that for "case insensitivity", aliasing is widespread. 
1 and 3 are similar, but I believe only "3" is consistent with the common case above. 
There may be other forms of aliasing with other motivations, so it's not clear that this question is relevant. 
No, only if you expect it to be determinable. 
Perhaps it could merely return "a" parent. 
That would be unwieldy in the case of case sensitivity, since there are 2^N synonyms for each URL, where N = number of instances of letters A-Z. 
I don't think 'references' is appropriate for case sensitivity or host name equivalence. 
I don't think there were any changes between -07 and -08 which affect this discussion, but just to make sure we're all talking about the same rev. 
of the spec., the latest revision of the WebDAV Distributed Authoring Protocol specification is -08. 
The Web page is a bit confusing, since it has a "click here for changes from -07" link, but doesn't state that the current rev is -08 quite as prominently -- I should change this. 
Well, if performing string manipulations to discover a parent of a resource is a "munge", then it is no worse a munge than those perpetrated by relative URLs. 
Section 3 of RFC 2396 ("Uniform Resource Identifiers (URI): Generic Syntax") discusses hierarchical URI schemes, and explicitly notes that the slash character is used to separate hierarchical components. 
In Section 5 of this document, there is discussion of the meaning of ".." as it appears within a relative URI. 
So, there seems to be significant, Draft Standard precedent for performing string manipulations on a URI to find its parent. 
True. 
Although seems to me that if there is some interoperability problem lurking here, HTTP/1.1 DELETE and PUT share it. 
How was this issue resolved during discussion of the semantics of these methods? 
How is it that the current definitions in HTTP/1.1 don't lead to interoperability problems? 
(Lack of widespread use?) 
Let us suppose that I have a webdav that does 'case folding' and treats 
_different_ 
URLs, but they are the 'same' resource. 
Jim, are you saying that these represent two different resources, which 
happen 
to map to the same 'persistent chunk of state'? 
Yes. So, if I perform a DELETE on http://host/AB, then according to the HTTP/1.1 specification, the server won't return a 2xx unless it intends to either delete the resource or make it unavailable. 
At this point, it is server policy whether the operation on resource http://host/AB has side effects for other resources. 
In this example, it seems to make sense for the server to have a policy to remove http://host/ab when it removes (i.e., standardizing one of Jim Davis' four cases) doesn't make sense for these multiple-mapping cases. 
Notes that in the 1-many interpretation, it should be made clearer that properties are associated with resources rather than with their URLs (e.g., that a PROPPATCH on one URL associated with a resource will affect the PROPFIND returned by the other URL). 
Note that PROPPATCH borrowed its language from the HTTP/1.1 specification, stating in section 7.2 that, "The PROPPATCH method processes instructions specified in the request body to set and/or remove properties defined on the resource identified by the Request-URI." 
So, here at least it's clear that the properties are being set on the resource, not on the URI. 
But, it's left just an ambiguous as DELETE and PUT whether there is a many-to-1, or 1-to-1 relationship between URI and resource. 
Since it is impossible for a client to tell the difference between these 
two 
cases, it makes sense to me that there is a 1-to-1 correspondence between URI and resource. 
There is no way for a client to tell whether a server does case folding. 
This suggests it might be difficult to falsify the 1-to-1, URI to resource interpretation. 
- Jim 
