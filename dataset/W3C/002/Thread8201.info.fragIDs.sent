A New Internet-Draft is available from the on-line Internet-Drafts directories. 
This draft is a work item of the WWW Distributed Authoring and Versioning Working Group of the IETF. 
Title: HTTP Extensions for Distributed Authoring ? 
WebDAV RFC2518 bis Author(s): Y. Goland et al. Filename: draft-ietf-webdav-rfc2518bis-01.txt 
Pages: 89 Date: 01-Jul-02 WebDAV consists of a set of methods, headers, and content-types ancillary to HTTP/1.1 for the management of resource properties, creation and management of resource collections, namespace manipulation, and resource locking (collision avoidance). 
RFC2518 was published in February 1998, and this draft makes only minor revisions mostly due to interoperability experience. 
A URL for this Internet-Draft is: To remove yourself from the IETF Announcement list, send a message to ietf-announce-request with the word unsubscribe in the body of the message. 
Internet-Drafts are also available by anonymous FTP. 
Login with the username "anonymous" and a password of your e-mail address. 
After logging in, type "cd internet-drafts" and then "get draft-ietf-webdav-rfc2518bis-01.txt". 
A list of Internet-Drafts directories can be found in or ftp://ftp.ietf.org/ietf/1shadow-sites.txt Internet-Drafts can also be obtained by e-mail. 
Send a message to: mailserv@ietf.org. 
In the body type: "FILE /internet-drafts/draft-ietf-webdav-rfc2518bis-01.txt". 
NOTE:The mail server at ietf.org can return the document in MIME-encoded form by using the "mpack" utility. 
To use this feature, insert the command "ENCODING mime" before the "FILE" command. 
To decode the response(s), you will need "munpack" or a MIME-compliant mail reader. 
Different MIME-compliant mail readers exhibit different behavior, especially when dealing with "multipart" MIME messages (i.e. documents which have been split up into multiple messages), so check your local documentation on how to manipulate these messages. 
Below is the data which will enable a MIME compliant mail reader implementation to automatically retrieve the ASCII version of the Internet-Draft. 
Hi, Is there a simple example of how I can lock/unlock (using java preferably) a resource on a server? 
Explantion: I have an app (content management for client sites) that has its own locking system which needs to tell the webdav whether a file is locked or not. 
It also needs to read whether a resource is locked or unlocked. 
I also want to explain the file-system/apache structure for the app to see if there are any problems. 
All 3 views work off the same directory. 
The app has 3 views: 1. authoring or development - this is the main app accessed by https://myappco.com/appname/ -- using the servlet container's config to set the approot to: /sites/myapp 2. certification - a generated version of the site accessed by: https://clientsite.myappco.com/ 
-- using the apache httpd.conf to set a DocumentRoot /sites/myapp/clientsite require group clientsite_qa 3. webdav - set to give authorized webdav access: https://myappco.com/appname/clientsite/ -- using the apache httpd.conf to set a #directives require group clientsite_webdav Thanks for any help/advice, -Rob 
Arrrgghhh... I found what I need in rfc2518.html, 
sorry for the bother. 
