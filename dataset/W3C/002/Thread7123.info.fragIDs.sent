Please add a link for the httpsy URL scheme to: The specification for the httpsy URL scheme is: Excerpt: 
Waterken(TM) YURL Authentication of TLS Upgrade Within HTTP/1.1 
This specification defines a mechanism for authenticating an HTTP server based on the hash of its public key, instead of a trusted certificate from a certificate authority. 
Abstract Before sending a request to a resource identified by an httpsy URL, a client MUST complete a mandatory upgrade to TLS/1.0. 
The client authenticates the server by constructing a valid certificate path to a certificate that is signed using a public key whose hash matches that given in the httpsy URL. 
If you would like to learn more about the purpose of the httpsy URL scheme, start with the documentation tree rooted at: Thank you, Tyler 
The union of REST and capability-based security: 
This specification doesn't make a lot of sense to me. 
Why again isn't this an extension to 
https? 
Why does it need its own scheme? 
You write "When interpreted by an HTTPSY-unaware client, etc. etc." but how can you give rules for what a client should do, if the client doesn't pay attention to the rules in this document? 
The specification for the httpsy URL scheme is: Excerpt: 
Waterken(TM) YURL Authentication of TLS Upgrade Within HTTP/1.1 
This specification defines a mechanism for authenticating an HTTP server based on the hash of its public key, instead of a trusted certificate from a certificate authority. 
Abstract Before sending a request to a resource identified by an httpsy URL, a client MUST complete a mandatory upgrade to TLS/1.0. 
The client authenticates the server by constructing a valid certificate path to a certificate that is signed using a public key whose hash matches that given in the httpsy URL. 
If you would like to learn more about the purpose of the httpsy URL scheme, start with the documentation tree rooted at: Thank you, Tyler 
The union of REST and capability-based security: 
Why again isn't this an extension to https? 
It is. 
See: 
For fail-safe use of the authentication protocol. 
The specification defines an authentication protocol and two URI schemes: one for fail-open use and one for fail-safe use. 
The fail-open URI scheme, the https *-subset, preserves connectivity with old client software, but does not guarantee that the security properties provided by the HTTPSY protocol are in effect. 
The 
fail-safe URI scheme, httpsy, does make this guarantee, but at the 
cost of breaking connectivity with old client software. 
The https *-subset is only provided as a temporary bridge to enable deployment of HTTPSY server applications during the rollout of HTTPSY client applications. 
A gradual migration to httpsy URLs is expected. 
The full text of this constraint is: "When interpreted by an HTTPSY-unaware client, the semantics for this scheme are the same as for the https scheme. 
The *key_id@ portion of the URL MUST be ignored." 
As you can see, the specified behaviour is exactly the behaviour of existing https clients. 
The constraint does not place any new requirements on existing https clients. 
The purpose of the constraint is only to specify the https client behaviour that the https *-subset specification relies upon. 
Tyler 
The union of REST and capability-based security: 
Let me try to be more direct. 
The interesting policy document here is RFC 3205, section 4: Note that the convention of appending an "s" to the URL scheme to mean "use TLS or SSL" (as in "http:" vs "https:") is nonstandard and of limited value. 
For most applications, a single "use TLS or SSL" bit is not sufficient to adequately convey the information that a client needs to authenticate itself to a server, even if it has the proper credentials. 
For instance, in order to ensure that adequate security is provided with TLS an application may need to be configured with a list of acceptable ciphersuites, or with the client certificate to be used to authenticate to a particular server. 
When it is necessary to specify authentication or other connection setup information in a URL these should be communicated in URL parameters, rather than in the URL prefix. 
Why is httpsy different? 
Larry 
I suspect you have misunderstood the purpose of the HTTPSY protocol. 
The HTTPSY protocol is not aimed at providing client authentication, nor at providing additional connection setup information. 
The purpose of the HTTPSY protocol is to use a public key fingerprint as the URL authority *instead of* a domain name. 
The HTTPSY spec says: "The semantics are that the identified resource is located at the server possessing the private key corresponding to the public key whose hash is provided in the URL. 
The host is merely a hint as to how the server may be contacted." 
See: http://www.waterken.com/dev/YURL/httpsy/#The_httpsy_scheme 
Your quoted section of RFC 3205 is targeted at protocols that make further use of the PKI. 
The HTTPSY protocol aims to replace the PKI, not to specify additional parameters for using it. 
Thus, the quoted section does not apply to HTTPSY. 
A more relevant section of RFC 3205 is section 2.3 on Security. 
In this section, RFC 3205 says the following about the PKI: This scheme does not work as well to authenticate millions of potential clients to servers. 
It would take a much larger number of CAs to do the job, each of which would need to be widely trusted by servers. 
Those CAs would also have a more difficult time verifying the identities of (large numbers of) ordinary users than they do in verifying the identities of (a smaller number of) commercial and other enterprises that need to run secure web servers. 
The same argument also applies to authenticating millions of potential servers to clients. 
The HTTPSY protocol solves this problem by providing a model that does not require CAs. 
Tyler 
I think I get the idea, but there are some confusing parts 
of your draft. 
You say that 'the host is merely a hint', but it isn't optional, and there's no way to locate the resource without the host. 
So this isn't consistent with the ordinary technical definition of a 'hint'. 
The draft, as written, looks like it is modifying the https scheme, taking over all uses of https with a '*' in the 'userinfo' field. 
With HTTPS, you say 
'The *key_id@ portion of the URL MUST be ignored', but this sounds like you're making normative change to how the https URL is supposed to work. 
I'm not sure why you need to do that. 
Suppose you do intend to take over a chunk of the 'userinfo' space. 
Consider using something more distinctive than '*', like '*waterken: key *' 
I think you need to work out the deployment and upgrade steps more clearly. 
Why do you ever need 
'httpsy'? 
Anyone starting deployment would never use a 'httpsy' URI because so few clients would know what to do with it. 
So web sites might start using the compatible form (using http: or https:), but, since that works well enough, why would anyone ever deploy something that understands 'httpsy'? 
In general, the uses of MUST and SHOULD in your document aren't conventional; e.g., when you say 'The address of a nameserver SHOULD be much more constant than that of a server', it's hard to know for whom this language should be normative. 
Larry 
Great. 
but there are some confusing parts of your draft. 
That's certainly possible. 
You have more experience writing specifications. 
I appreciate your assistance in making the httpsy specification conform to expectations. 
The host isn't optional for the URI producer, but it is optional for the URI consumer. 
The URI consumer is free to ignore the host hint. 
For example, the java.net.URL implementation that I have provided will ignore the host hint if it already has an open connection with a succesfully authenticated server. 
The resource request will be sent to the already authenticated server, instead of using the host hint to again locate the server. 
If you wish to propose alternate text for specifying this behaviour, or any other in the specification, please do so. 
Your input is welcome. 
For a 'userinfo' field that starts with a '*', and only for software that implements the HTTPSY protocol. 
Other software is of course unaffected. 
I don't anticipate this causing any problems. 
Do you know of any potential problems? 
I am not intending to make a normative change to the https URL syntax. 
I am specifying the conditions required to make the https *-subset work. 
The MUST means that the specification of the https *-subset is broken if an https client assigns a conflicting meaning to the *key_id@ portion of the URL. 
According to RFC 1738, an https client cannot do this. 
The https client MUST treat the *key_id as a username. 
For an https *-subset URL, this username will never get used. 
Therefore, the MUST in the https *-subset specification is compatible with the constraints of RFC 1738 that govern existing https URLs. 
Again, please feel free to suggest alternate text. 
Why? The '*' is already very distinctive. 
I am not aware of any conflicts. 
Your suggested syntax does not seem realistic for a widely deployed URL technology. 
Ok. Is this something that belongs in the protocol spec though? 
Wouldn't a supporting document be more appropriate? 
Why do you ever need 'httpsy'? 
The https *-subset URL scheme allows you to run the HTTPSY authentication protocol in tandem with the existing PKI. 
This helps with deployment of the new protocol, but does not eliminate any costs. 
The point of the HTTPSY protocol is to eliminate the costs associated with using the PKI. 
When you stop using the PKI, you have to switch to the httpsy URL scheme so that clients know that they must not rely on the PKI authentication protocol. 
For example, a future resource may be accessible through the URL: httpsy://*asdfjklqweorugnasdfasduifw@yurl.net/ 
The identified resource is using yurl.net as a redirection service. 
The resource host does not trust the owner of the yurl.net 
domain name to *be* the identified resource, only to help locate the identified resource. 
Were a client to use the PKI to authenticate the server, the client would be authenticating the wrong server. 
The client would be authenticating the yurl.net 
server, not the server identified by the URL producer. 
In short the httpsy scheme is needed to create the MUST constraint for using the HTTPSY protocol. 
It is not possible to create this MUST constraint if the specification is only an add-on to an existing URL scheme. 
Notice that the only difference between supporting the https *-subset and httpsy, is the change in URL scheme name. 
Everything else is identical. 
I doubt anyone would implement the first and choose to not recognize the second. 
The motivation for adding the httpsy hook is to realize the cost savings that come from eliminating use of the PKI. 
This constraint is normative for the URL producer. 
Implementors of client software must be able to rely on using the host hint to locate the identified server. 
The URL producer SHOULD therefore ensure that the host hint remains useful. 
I hope you will find the time to help clarify the httpsy specification. 
Tyler 
The union of REST and capability-based security: 
Is the "Index of WWW Addressing Schemes" still being maintained? 
If so, is there anything else I need to do to get the link made? 
Thank you for your time. 
Tyler 
Waterken(TM) YURL Authentication of TLS Upgrade Within HTTP/1.1 
This specification defines a mechanism for authenticating an HTTP server based on the hash of its public key, instead of a trusted certificate from a certificate authority. 
Abstract Before sending a request to a resource identified by an httpsy URL, a client MUST complete a mandatory upgrade to TLS/1.0. 
The client authenticates the server by constructing a valid certificate path to a certificate that is signed using a public key whose hash matches that given in the httpsy URL. 
The union of REST and capability-based security: 
