Dan asked me to send this on-list. 
Mostly niggles. 
The RDF Schema class and property system is similar to the type systems of object-oriented programming languages such as Java. 
I think this is disingenuous. 
It's not very like it at all, _particularly_ not like Java. 
Practices in schema and ontology creation (eg, making new superclasses when old subclasses are already inexistence; general frivolous attitude towards cycles) aren't common in most OO languages. 
rdfs:Resource The class Resource. 
Say more? 
rdfs:Class The concept of Class rdf:Property The concept of a property. 
rdfs:Literal This represents the set of atomic values, eg. textual strings. 
rdf:Statement The class of RDF statements. 
rdfs:Container This represents the set Containers. 
rdf:Bag An unordered collection. 
rdf:Seq An ordered collection. 
rdf:Alt A collection of alternatives. 
rdfs:ContainerMembershipProperty The container membership properties, rdf_1, ... rdf_n, all of which are sub-properties of 'member'. 
We've got concepts, classes and sets here. 
I know it's really tedious to repeat the same phrase over and over, but people might ask: "do RDF statements form a class? 
why not a set? 
What's this set Containers? etc." rdfs:ClassThe class of all _rdfs:Class_es rdf:propertyetc. 
Literal: don't say "atomic". 
Atomic means "indivisible"; literals (even the simple ones we're working with) have structure. 
That structure might not be expanded in terms of nodes and arcs, but it's wrong to say "the structure doesn't appear in the graph". 
It _does_ appear, but it's bundled up into a literal node. 
Call it "The Class of literal values" and point to the MT for a definition. 
The only other thing is that I'd avoid rdf:_n unless you can italicise or otherwise show that "rdf:_n" isn't one of these. 
I'd also (I know it's late in the game) be inclined to float the suggestion of "fixing" the rdfs:subClassOf &amp; co. properties, deprecating these in favour of names that are the right way around according to M+S, and including entailment rules to show that they're the same thing. 
(just make them circularly subproperties of their renamed versions) - particularly if we're switching namespace. 
jan grant, ILRT, University of Bristol. 
http://www.ilrt.bris.ac.uk/ Whose kung-fu is the best? 
I agree with most what you say. 
Likening RDF classes to OO classes has, in my view, caused more confusion than clarification. 
I'd be inclined to defer this to RDF 2 (unless there is a decision to change namespaces now). 
#g Graham Klyne 
I disagree somewhat on this issue. 
I don't think the problem is in the initial statement that RDF classes are something like OO classes (which they are). 
The problem is in failing to go on and clarify what the difference is (which none of the Schema specs ever really did very well). 
I've tried to do a bit of that in the latest Primer version (you might want to look at what's said about this in the Primer, and see if it's clear enough for you). 
I'm not sure it's appropriate to rely on the Primer for all this explanatory material (but if we're going to do it, you guys better look at the Primer too, because if that's the only place explanatory material is going to be, that's where people will take their explanations from). 
--Frank Frank Manola The MITRE Corporation 202 Burlington Road, MS A345 Bedford, MA 01730-1420 
