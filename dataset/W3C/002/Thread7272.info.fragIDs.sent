Well, in the constant triage of life, the revised text is going to the group now. 
The IETF submission will have to wait until Fridaym or after the meeting. 
Feel free to critique again. 
It's not even proofed yet, so detection of howlers is great even if you agree w/ everything said within. 
The follwoing is also available at: The HTML is somewhat cleaned up for non-Netscape browsers. 
-- David David Durand dgd@cs.bu.edu | david@dynamicDiagrams.com 
Boston University Computer Science | Dynamic Diagrams 
I would like to see 'browser' changed to 'client' everywhere in the document. 
This is because 'versioning' is useful for authors who are interacting with remote repositories even if they're not using a 'browser'. 
I think also that most (if not all) of the instances of 'user agent' could also be 'client'. 
While all 'user agents' are clients, the converse is not true: some clients, and clients of version-enabled repositories in particular, might not be 'user agents' but other applications. 
There are places where you say 'versioning-aware', but I think that 'aware' is not strong enough. 
For interoperability to be useful, the participants need to actually support versioning, and not just be 'aware' of it. 
I think the word 'Style' in 'Style-free Versioning' is confusing; we're not talking about style sheets. 
And in some ways, it is impossible to be 'free' of style. 
Mainly what you want is 'Support for many different versioning paradigms'. 
It would be useful to elaborate more fully on what those different paradigms might be, or at least give references. 
In 'Legacy Resource Support', it is misleading to call 'non-versioning' servers 'legacy', since we might expect many future repositories to not support versioning. 
It's not 'legacy' in that you don't expect them to be obsolete. 
Perhaps you mean 'Interoperability with non-versioning systems' or some such. 
When you talk about 'named versions', it would be useful to explain that a version 'name' is often a number. 
What does 'Some versions of a resource are special.' mean? 
I would suggest _not_ prejudicing the design choice by avoiding capitalizing LOCK, UNLOCK, NOPS, RESERVE, UNRESERVE, etc. etc. which makes it seem like you want a new HTTP operation for each conceptual operation. 
Regards, Larry 
David, I'm not sure if this has been discussed on the group before as I only joined last week, but do you think we need to add an awareness capability to the protocol? 
Specifically, I'm thinking of adding something into section 4 along the lines of: 18. 
A way for a client to request identification of another client which has either requested exclusive access to a version of a resource (lock) or which has declared an intention to modify a resource (reserve). 
The idea is that in a colloborative environment one user would be able to see in some way who else was working on the same resource as him/herself. 
I also include the following spelling corrections as some of these won't be picked up by a spell checker: 
In section 2: 
H2 2. Rationale /H2 ol LI It provides infrastructure for efficient and controlled management of large evolving web sites. 
br br Modern configuration management systems are built on some form of repository that can track the revision history of individual resources, and provide the higher-levelools to manage those saved versions. 
Basic 
^^^^^^^^^ add " t" 
versions. 
Many also provide merge support to ease the revers operation. 
/LI 
^^^^^^ add "e" In section 3: 
H2 3. Global requirements /H2 P This section covers the overarching contraints that must 
^^^^ add "s" In section 4: 
H2 4. Functional requirements /H2 p The following functional reqirements are intended to satisfy the global 
^^^^ add "u" 
li EM Some way to determine a version identification and a resource identification for a versioned resource, given its URL /EM br This requirement describe the ability to take the URL of a version of a 
^^^^^^^^ add "s" 
resource and determine: ul li a URL for the resource /li li a version identifier for the resource. 
/li /ul Note that this kind of facility supports only some comparison operations: It enables the determination that two version-containing URLs designate versions of the same resource. 
However, given the phenomenon of URL aliasing, it is insufficient to determine that they are EM not /EM versions of the same resource. 
br br This is sort of a minimal "browsing through time" requirement. 
Tthis requirement allows a browser to tell that a 
^^^^^ remove "t" 
That's all ... Paul. 
[] extension 3262 [] Lancaster University, [] [] WWW: http://www.comp.lancs.ac.uk/computing/users/paul/ [] 
Thanks. 
I _meant_ to be consistent. 
Will global search to make sure I am. 
This seems correct to me. 
I thought that some level of support should be possible for completely dumb clients (at least). 
This might involve extra server work to perform automatic merges or some other workaround for client non-versioning. 
The term versioning style comes from a recent Hypertext paper. 
I will add references to a few of the significant methods, and call them "versioning policies." 
Interoperability with non-versioning systems it is. 
Sure. 
I tried to use version identifier consistently not to imply either user-assigned strings, ro automatically-defined version numbers. 
I will change this to read "these versions of a resource are special" so that the reference to the preceding bulleted list is more clear. 
True, my predjudices are showing there. 
I will try quoting them and see if that's clear enough. 
Thanks for the comments, especially given how late this is... -- David David Durand dgd@cs.bu.edu | david@dynamicDiagrams.com 
Boston University Computer Science | Dynamic Diagrams 
I agree that this is critical, but would prefer to see it as a CM requirement (where it has already been floated by Yaron and Chris in slightly differing forms). 
This means we can get basic versioning standardized befopre we start arguing about locking policies 
Thanks a ton! 
David Durand dgd@cs.bu.edu | david@dynamicDiagrams.com 
Boston University Computer Science | Dynamic Diagrams 
