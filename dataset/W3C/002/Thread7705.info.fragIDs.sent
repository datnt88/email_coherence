This one isn't easy. 
As I discussed previously (http://lists.w3.org/Archives/Public/w3c-dist-auth/1998OctDec/0303.html), it is my personal opinion that the reasons for live properties have to do with performance issues with HTTP. 
It made us do something that I now believe has very serious ramifications on the ability of people to innovate using HTTP and upon the future extensibility of the protocol. 
So how does one make the trade off? 
Until we fix HTTP I guess the answer is fairly obvious. 
Who cares if you have a perfect protocol if no one can efficiently implement it? 
Maybe we will fix this next time. 
In the meantime, if I was designing a WebDAV extension I would do my best to stay away from using properties. 
If you can't, you can't. 
But I bet in most cases, you can. 
Yaron 
From: Larry Masinter [mailto:masinter@parc.xerox.com] 
Sent: Thursday, December 31, 1998 6:31 PM Subject: RE: Don't copy live properties I think the way out of the live property quandary is not to try to overspecify server behavior, but rather, to reduce client dependence on server behavior. 
Despite the useful goal of wanting server predictability, you might not always accomplish it, and it's not a goal that requires you to be uncompromising about it. 
I don't think it is possible to specify server behavior on COPY when applied to live properties. 
So I think the standard should say that it is unspecified. 
It's not required, it's not outlawed, it's just unspecified. 
Clients shouldn't depend on it. 
Similarly, for all of the reasons given for inventing live properties in the first place, don't think it is a good idea to "outlaw" live properties. 
However, interoperable clients shouldn't depend on them. 
Larry 
I don't think it is possible to specify server behavior on COPY when applied to live properties. 
So I think the standard should say that it is unspecified. 
It's not required, it's not outlawed, it's just unspecified. 
Clients shouldn't depend on it. 
This suggests to me that the behavior of a live property on COPY is a quality of the property, rather than a quality of the server. 
Hence, the COPY behavior of a live property should be specified on a per-property basis. 
The discussion so far has effectively shown the COPY behavior for all live properties is not a quality of the server. 
Similarly, for all of the reasons given for inventing live properties in the first place, don't think it is a good idea to "outlaw" live properties. 
However, interoperable clients shouldn't depend on them. 
The discussion has assumed there are two kinds of live properties, "standard" and "non-standard". 
There is a third class: those which are registered (via an, as-yet unspecified, registration process) with a concrete description of their syntax and semantics. 
Lisa Lippert's presentation in Orlando on a class of new live properties suggests to me that such a registration process is necessary. 
Registered properties will allow for interoperation, since client/server pairs can implement the property according to the same semantics, yet not require the effort required to create community consensus around a set of properties. 
However, interoperable clients shouldn't depend on them. 
Agreed. 
Finally, I doubt the distinction between descriptive and operational can 
be 
formallized well enough that we could standardize it. 
I agree. 
Is the "DAV:getetag" property descriptive or operational? 
Furthermore, many of the properties that Lisa Lippert described are qualities of the collection's contents (the list of its children) such as hassubs and childcount. 
I'm suggesting that we declare client dependence on non-standard 
operational 
live properties as "bad design" and declare such dependence as non-conformant. 
This seems too restrictive to me. 
HTTP had a similar danger -- you could be 100% compliant, yet dependent on non-standard HTTP methods. 
This was not a major operational problem in practice. 
- Jim 
Uhhhhh.... If this wasn't a major operational problem, why didn't we just close the working group and use FrontPage extensions? 
