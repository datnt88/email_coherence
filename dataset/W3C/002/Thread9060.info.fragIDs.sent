Joseph, please find attached four additional test cases for C14N and EC14N. 
Each test file is XML and contains: - The XML to be filtered with an XPath Transform according to XMLDSIG - The XPath to be applied to the XML - The intended output of canonicalizing the result of the XPath transform with C14N, together with annotations what the test case should show - The intended output of canonicalizing the result of the XPath transform with EXC-C14N, together with annotations what the test case should show So, the following steps are necessary to use the test cases: 1. Get the bytes of the test case file 
2. Apply a XPath Transform with the appropriate XPath (specified in a comment in the test case file) 
3. Apply C14N and EXC-C14N respectively to the result of the XPath Transform. 
4. Compare the result of C14N and EXC-C14N respectively with the intended result shown as comment in the test case file. 
Liebe Gruesse/Regards, DI Gregor Karlinger Institute for Applied Information Processing and Communications Austria 
Hi Gregor, 
I'm a little confused on this note. 
When I pass your xpath expression 
test_c14n.py -i iaikTests.example1.xml 
-x "self::Parent or (parent::Parent and not(self::Child)) or self::GrandChild or parent::GrandChild" I get a (not very useful) error [1]. 
But I'd still expect and error because I'm not sure which BNF productions you are expecting this XPath expression to match? 
However, the following does work and agrees with your result for test 1: test_c14n.py 
-e -i iaikTests.example1.xml 
-x "(//. 
| //@* | //namespace::*)[self::Parent or (parent::Parent and not(self::Child)) or self::GrandChild or parent::GrandChild]" [1] _in_subset = lambda subset, node: subset is None or node in subset TypeError: 'in' or 'not in' needs sequence right argument 
Joseph, the XPaths I have provided for my examples are node tests in the sense of the XPath Transform specified in XMLDSIG. 
So, if you take the well-known ;-) "//. 
| //@ | //namespace::*" and add 
my XPath expression as its node test, you should get the right results. 
/Gregor 
From: w3c-ietf-xmldsig-request@w3.org [mailto:w3c-ietf-xmldsig-request@w3.org] 
On Behalf Of Joseph Reagle Sent: Friday, March 29, 2002 11:02 PM Subject: Re: Additional test cases for Exclusive XML Canonicalization 
This is probably a newbie question. 
In the examples 2, 3 and 4 there's an 
additionalNSPrefixes value next to the xpath expression. 
Where shd this be 
used, and how? 
Is it supposed to be passed to the XPath evaluator? 
(I don't see an API to pass multiple namespace nodes in the Xalan XPath implementation...) 
regards, Palani Joseph, the XPaths I have provided for my examples are node tests in the sense of the XPath Transform specified in XMLDSIG. 
So, if you take the well-known ;-) "//. 
| //@ | //namespace::*" and add my XPath expression as its node test, you should get the right results. 
/Gregor 
-----Original Message----- From: w3c-ietf-xmldsig-request@w3.org [mailto:w3c-ietf-xmldsig-request@w3.org] 
On Behalf Of Joseph Reagle Sent: Friday, March 29, 2002 11:02 PM Subject: Re: Additional test cases for Exclusive XML Canonicalization 
Palani, the additionalNSPrefixes tell you which namespaces the prefixes used in the XPath expression are bound to. 
Where to use it depends on how you evaluate the XPath expression: In the default case, Xalan uses the context node to resolve prefixes in the XPath epression: The namespace declarations in scope for the context nodes are used to determine the namespace a prefix is bound to. 
If this is not sufficient for your scenario, you have to provide your 
own implementation of the interface org.apache.xml.utils.PrefixResolver; 
best is to derive from class org.apache.xml.utils.PrefixResolverDefault, which is the default resolver Xalan uses. 
You can tell Xalan to use your prefix resolver by using constructor org.apache.xpath.XPath(String, 
SourceLocator, PrefixResolver, int). 
HTH, Gregor 
-----Original Message----- From: w3c-ietf-xmldsig-request@w3.org [mailto:w3c-ietf-xmldsig-request@w3.org] 
On Behalf Of Joseph Reagle Sent: Friday, March 29, 2002 11:02 PM Subject: Re: Additional test cases for Exclusive XML 
Canonicalization 
On Tuesday 02 April 2002 18:39, NACHIMUTHU,PALANIAPPAN (HP-Cupertino,ex1) 
Not a newbie question as I asked the same question earlier for pyXML [1]! 
smile/ c14n.py has a means of taking additional prefixes, and I just added an option for the xpath/test command line and test harness. 
However, I'm still not sure how to pass the default ns to the python xml libraries -- that' s something I need to dig more on. 
In terms of API for our own (thtis WG's) tests, I'd prefer that the parameter be a string of white space delimited series of prefix:values and '#default' be the key word, but whomever sends the tests dictates their form. 
smile/ [1] http://mail.python.org/pipermail/xml-sig/2002-April/007527.html 
