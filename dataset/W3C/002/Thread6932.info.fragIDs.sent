From: ext Andy Powell [mailto:a.powell@ukoln.ac.uk] Sent: 14 November, 2001 01:49 Subject: Re: What is at the end of the namespace? 
Hi Patrick, I would suggest that perhaps uri@w3.org 
would be an even more appropriate forum for this debate? 
Whatever the case, I'll send this to www-talk, BCC'ing uri, and you can decide where to follow-up to. 
To define e.g. an 'http:' URL which is never intended to resolve to anything is IMO contrary to the defined semantics for such URLs and thus bad practice. 
No; you are implying that there is a default base of semantics for HTTP identifiers, that they are intended to resolve to a set of documents, or somesuch. 
HTTP makes no such assumption; 
If the http URI is defined by RFC 2616 (as indicated by section 2.1.1 of of the RFC seems pretty clear --- cut --- 3.2.2 http URL The "http" scheme is used to locate network resources via the HTTP protocol. 
This section defines the scheme-specific syntax and semantics for http URLs. 
http_URL = "http:" "//" host [ ":" port ] [ abs_path [ "?" query ]] If the port is empty or not given, port 80 is assumed. 
The semantics are that the identified resource is located at the server listening for TCP connections on that port of that host, and the Request-URI for the resource is abs_path (section 5.1.2). --- cut --- I.e. there are some defined semantics that http URIs resolve to something located on a server? 
Is the RFC wrong, or am I mis-interpretting it? 
Having said that, I accept that current http URI usage goes well beyond this, i.e. people are assigning http URIs to all sort of things, 
This is my assertion. 
and that we've probably got past the stage where it is worth having the argument. 
Well, it'll take awhile to turn the boat around, but I think it's worth trying... 
A question... If I make an RDF statement about statement about a conceptual namespace, or about the RDFS resource that is at that URI? 
In either case, how do I make a statement about the other one? 
I'm about to submit a number of I-D's to the IETF for several URI schemes, including the following two, which address your question: Web Resource: = the web resource (if any ;-) URI Reification: 
uri:http://www.w3.org/1999/02/22-rdf-syntax-ns# = the reified URI of the web resource 
e.g. in which case, Bob created the resource but the URI itself was minted by the DOI agency DOI's-R-Us Namespace Reification and Prefixation: xmlns:rdf:http://www.w3.org/1999/02/22-rdf-syntax-ns# = the namespace, with associated namespace prefix xmlns::http://www.w3.org/1999/02/22-rdf-syntax-ns# = the namespace, with no namespace prefix I intend to proactively support the URI registration process, taking account of all comments, suggestions, criticisms, etc. with the goal of seeing the above URI schemes registered (along with some others ;-) These two URI schemes belong to the class of URIs called Uniform Resource Primitives (URP) as defined in section 1.1.2 of which is also being revised and expanded as an I-D. 
Regards, Patrick 
The HTTP specification can only talk about those aspects of the protocol that 
are relevant to 
HTTP. 
You've just summed up, IMO, the whole issue in a nutshell. 
The HTTP URI is relevant only to the semantics of the HTTP protocol. 
And the HTTP protocol is for *access* of concrete web resources. 
Thus HTTP URIs are only intended to be meaningful to processes based on the HTTP protocol, which expect to *return* something. 
Therefore HTTP URIs are not intended to denote abstract concepts. 
SOAP Web Service endpoints can be named with http:* URIs, and communicated with via XML representations shipped over HTTP. 
But you can't download the service itself; that wouldn't make sense. 
I would argue that the HTTP URI in that case does not denote the service, but a description of the service, if dereferencing the URI provides the SOAP instance. 
Of course, there's a gray zone there. 
Does a CGI HTTP URI denote the service provided by the CGI application or the application itself, or just one access portal to that application (or service). 
Still, its a web-resource, and so it is reasonable to denote it with an HTTP URI. 
When you think of HTTP as a way of talking to some (possibly authoritative) service about URI-named resources, this whole URI thing makes a bit more sense. 
If you think of it as a glorified form of file-sharing (like NFS, Samba etc) URIs for abstractions seem odd. 
Exactly. HTTP URIs for abstractions seem odd. 
HTTP defines, like you say, a global filesystem of sorts. 
HTTP URIs denote real and accessible resources stored in that global filesystem. 
To use an HTTP URI to denote an abstract concept, such as "LOVE" or an ontological term, or a non-web resource such 
such as "The city of Paris" is quite odd. 
I fully agree. 
Patrick 
[ distribution trimmed as an act of mercy ] 
SOAP Web Service endpoints can be named with http:* URIs, and communicated with via XML representations shipped over HTTP. 
But you can't download the service itself; that wouldn't make sense. 
I'm not following. 
SOAP probably isn't the best example, as it has some odd properties, but its use of URIs to identify endpoints clearly identifies services; service descriptions (e.g., IDLs like WSDL) have separate identifiers. 
Both SOAP endpoints and URIs that point at service descriptions will, when dereferenced, return a representation of the resource in a format that the client is presumed to be able to understand. 
Option two. 
The "CGI application" (which I'm interpreting as "a bundle of code") might encompass one resource or many resources; interactions with those resources might affect application state, having follow-on effects to other resources exposed to the application. 
you may find to be of interest. 
But what is 'non-web'? 
The best definition of the Web is 'an information space', which begs the question; how can you exclude a concept from a global information space? 
HTTP does not define the shape of the Web, or vice versa. 
Whenever you use an HTTP URI in a Web browser, you use it for two things; identifying the resource uniquely in a global namespace, and dereferencing it to get a representation. 
Why is it so odd that some people only want to use it as an identifier, without going off and dereferencing it? 
If it weren't allowed to use a HTTP URI without dereferencing it, how would you talk about the services available at those URIs without dereferencing them? 
The HTTP itself uses URIs in this fashion (e.g. as index keys in caches). 
Mark Nottingham, Research Scientist Akamai Technologies (San Mateo, CA USA) 
