An updated summary of the datatyping issues, as I currently understand them. 
Issue B1: In S, if one wants to use both idiom A and idiom B, e.g. mary age "10" . 
age rdfs:range xsd:integer.lex . 
and mary ageD _:a . 
_:a xsd:integer.map 
"10" . 
two properties have to be used, age and ageD , in this example. 
I believe there is a agreement that this is a difference between the two proposals. 
Indeed, it may be said that the main aim of TDL is to avoid requiring different properties for these different idioms. 
Can't Live With: PatrickS 
Issue B2: Multiple Lexical Representations of a data value S, idiom A, permits multiple lexical representations of a data value: _:i xsd:double "10.1" . 
_:i xsd:double.de 
"10,1" . 
I believe there is agreement that S-A allows this. 
No-one has said this is a can't live with, so I'm proposing to drop this. 
Going ... 
Issue B3: the self entailment issue Withdrawn in favour of B4: 
From: [[I accept the reasoning above; it doesn't address my objection; it' just shows that my example wasn't very good. 
Sergey's example makes the point better:]] 
Issue B4 - TDL breaks existing code This is similar to B3. I've changed the example slightly from Sergey's. 
Under TDL, consider the graph: _:f rdf:type film . 
_:f dc:Title (_, "10") . 
mary age (_, "10"). 
Does this entail: _:x dc:Title ?y . 
_:z age ?y . 
I believe there is agreement that it does not under the current TDL model 
theory. 
It does entail: _:x dc:Title (_, ?y) . 
_:z age (_, ?y) . 
Can't Live With: DanC 
Jeremy: Updated model theory? 
Issue B5: Storage Requirements TDL requires significantly more storage to implement. 
This is disputed. 
Sergey: Do you accept that TDL's storage requirements aren't significantly worse than S's (e.g. given TDL can be transformed to S-P), and can therefore be dropped. 
Issue B6: S requires 4 URI's be registered for each data type S requires that for each datatype 4 URI's be registered datatype datatype.lex 
datatype.val 
datatype.map 
Sergey: Do you agree this is the case? 
If not, how many URI's are required to implement ALL the idioms of S and coexist in the same model. 
Issue B7: Complexity S has too many ways of expressing the same thing. 
An RDF processor has to 
be aware of them all. 
Supported by Jeremy's error cases message 
and a message from Andy Seaborne to rdf comments: Issue B8: S-B encourages logically (sic) errors in the application type processing. 
Given: _:f rdf:type film . 
_:f dc:Title "10" . 
mary age "10" . 
an application 'knows' that the range of age is an integer so it 'knows' that mary has age 10. 
Under S-B, running a query: ?x 
dc:Title ?y . 
?z age ?y . 
will return ?x 
= _:f and ?z 
= mary , and knowing that the age of mary is 10, may conclude that the title of the film is also 10. Can't Live With: Jeremy 
I'm uncomfortable about withdrawing this. 
Dan used a different example for 
self-entailment prior to the one he withdrew: Does: http://www.w3.org/ dc:title "W3C". 
entail: http://www.w3.org/ dc:title "W3C". 
Intuitively, I think it is important that this is a valid entailment, and this hasn't been established yet for TDL. 
Graham Klyne MIMEsweeper Group Strategic Research http://www.mimesweeper.com 
I think it would be useful for the group to make explicit what the ramifications of this are -- which should make it clear (I hope) why I cannot live with it. 
In order to use both S-A and S-B in the same knowledge base, or syndicate knowledge using either idiom into a merged knowledge base, we would have to have *two* variants of every metadata vocabulary: DC, PRISM, ONIX, MARC, vCard, etc. I.e. dcA:title and dcB:title and then relate the two together so that queries asking for dc:title would obtain knowledge expressed in either idiom. 
Ouch. 
Yuck. 
Blech. 
Insert your favorite expletive here _____ ;-) I just can't see the RDF community at large buying into such a scenario. 
And it is imperative that we support both global and local typing for literals, so the alternative -- choose only S-A or S-B is equally unacceptable. 
No. This is not correct. 
We just don't seem to be connecting 
on this one Brian. 
It is an issue of whether the query is based 
on string equality or value equality -- whether datatyping is taken into consideration. 
If we treat the parenthesized versions as TDL pairings (which I think is your intent) and use that as an indication of whether the query is string or value based then I think the results should become clear. 
Let me try to expand it to all significant cases: Case 1: (value comparison, no datatyping specified) 
_:f rdf:type film . 
_:f dc:Title (_, "10") . 
mary age (_, "10"). 
DOES entail _:x dc:Title ?y . 
_:z age ?y . 
(though probably should flag some warnings since 
the query is expecting datatypes as that is the 
basis for value comparison) Case 2: (string comparison, datatyping ignored) _:f rdf:type film . 
_:f dc:Title "10" . 
mary age "10". 
DOES entail _:x dc:Title ?y . 
_:z age ?y . 
Case 3: (value comparison, datatyping defined) _:f rdf:type film . 
_:f dc:Title (xsd:string, "10") . 
mary age (xsd:integer, "10"). 
does NOT entail _:x dc:Title ?y . 
_:z age ?y . 
Case 4: (value comparison, datatyping partially defined) _:f rdf:type film . 
_:f dc:Title (_, "10") . 
mary age (xsd:integer, "10"). 
does NOT entail _:x dc:Title ?y . 
_:z age ?y . 
(and as with case 1 should probably flag a warning due to the unspecified typing) Is that clearer now? 
Cheers, Patrick 
from Sergey's. 
I've just chatted to Jeremy, who tells me you and he have also talked this 
morning, that Jeremy will sending out you joint position on this question soon. 
Brian 
Graham: 
Graham, I think the earlier B3 was only the redhead example, not the a document entails itself example. 
I would certainly support the addition of a new open issue with TDL in the "can't live with" class. 
Something like: 
Issue B?: TDL self-entailment In TDL a document does not entail itself. 
Cannot live with: Graham, Jeremy, DanC 
Without extra work on the TDL MT, this is a "cannot live with" against TDL. 
I was intending to work from the exisitential quantification of literals along the lines you sent me, but frankly if Pat can be persuaded to start 
with a clean sheet (or the P++ model theory) and come up with a better TDL 
model theory meeting his objections then we will all be happier (me especially). 
Jeremy 
I responded to DanC on RDF-interest, RDF-logic I started from Dan's most recent version of the problem and concluded: "TDL is backwards compatible and S isn't." 
More to the point, on bended knee "Can't we just drop this one -- please, pretty, pretty please with a cherry on top?" we have done it to death. 
Jeremy 
Jeremy: 
I have finally had a stab at updating the TDL Model Theory in line with the existentially quantified literals idea. 
See: typing.htm the attachment in feedback welcome. 
Changed text in purple. 
(Sorry the picture links are currently broken). 
Jeremy 
Here are the pictures. 
Just toss the fig/ subdirectory in the same directory with the revised doc. 
Patrick 
I see some "30" rdf:type xsd:integer . 
in tdl-cohabit.png 
(but in a lighter shade) I guess that's entailed or so but how is it really written as an N-triple? 
Jos 
