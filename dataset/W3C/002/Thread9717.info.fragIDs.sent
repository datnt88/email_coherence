I would like the proponents of the recent proposal for a new datatyped literal node type to justify why URIs cannot be used. 
In essence, what is being proposed, as I understand it 
is that we would have a new labeled graph node time, where 
the label would include the datatype and the lexical form, which would globally, unambiguously, and consistently denote a particular datatype value. 
But RDF already has a type of labeled node that is intended to be used to globally, unambiguously, and consistently denote a resource. 
It's a URIref node. 
Just as RDF need not look inside URIrefs to test potential denotational equality of string-unequal URIs, likewise RDF will not itself look at datatypes and make any determination about equality of datatyped literals which have string-unequal lexical forms with identical datatypes. 
In both cases, applications are free to parse the URIs themselves to make such determinations, but both kinds of comparisons are external to RDF itself. 
Therefore, there is no reason why a URI would be any more restrictive to RDF level processing than some other new form of node label -- which will be treated just as opaquely as URIs. 
Therefore... Other than the (political) argument about registering a new URI scheme to denote datatyped values, such as I would like to hear technical (not political) justification for why URIs cannot be used as the compact local datatyping idiom. 
I believe that there is a burden on the proponents of this recent proposal to clearly demonstrate (to the agreement of the WG) that URIrefs do not do the job as a compact, single node denotation of datatype values. 
Patrick 
Err... I mean "type" ;-) Patrick 
I have literals nodes whose content payload might be approx 1 Gb in size. 
If these values were 'URI'ified, do we have any reason to believe standard URI libraries would be able to cope with textual URIref labels on such a scale? 
Can strings of such a size reasonably be claimed to even be RFC2396 URIrefs? 
Dan 
From: ext Dan Brickley [mailto:danbri@w3.org] 
Sent: 09 August, 2002 20:07 Subject: Re: Justification for new node type 
Good argument. 
Another that I will offer myself ;-) is that, if the abstract syntax can see the structure of the datatyped literal node label, then a closure rule can be written to relate the local idiom with rdf:type semantics as well as with a global idiom. 
C.f. http://lists.w3.org/Archives/Public/w3c-rdfcore-wg/2002Aug/0114.html 
If the node is an opaque URIref node, then the datatype which constitutes the rdf:type of the node is not accessible. 
Patrick 
I believe there is a strong technical reason why URIs don't work here. 
According to the model theory (http://www.w3.org/TR/rdf-mt/#sinterp), URIs can denote anything according to the interpretation that is used. 
There is no provision for treating different classes of URIrefs differently in this respect. 
Conversely (and as Jan pointed out long time ago - reinterpretation according to the "possible world" being described. 
(It might be possible to redraw the model theory to use URIs in the way you suggest, but I think that would be a far greater disruption than what is being proposed.) #g Graham Klyne 
From: ext Graham Klyne [mailto:Graham.Klyne@MIMEsweeper.com] 
Sent: 11 August, 2002 16:32 Subject: Re: Justification for new node type 
Well, I wouldn't go so far as to consider that a license to override any semantics imposed by the URI scheme itself. 
If a URI scheme is formally defined to denote members of a particular class of resource, then the RDF MT does not override that to say that such URIs can be used to denote any arbitrary resource. 
Rather, the MT simply says (or should say) that anything can be denoted by *a* URI, but what that particular URI is, and what URI scheme is used to denote it, is a completely disjunct issue. 
Eh? Granted, one may certainly assert some interpretation that conflicts with RDF-external constraints (and certainly URI scheme imposed constraints are external to RDF) but that doesn't mean that -- taking the whole enchilada -- that such an interpretation is acceptable at all levels. 
I think there is an implicit but necessarily expectation that all URIs dealt with by RDF are "correct and valid" both syntactically and semantically, so one could say that assigning an interpretation to a URI which conflicts with the semantics of that URI (via its URI scheme) is incorrect. 
Well, Jan has already pointed out a very valid and practical reason why URIs wouldn't work as a general solution, based on magnitude constraints, so I guess we can just leave this one alone ;-) 
Cheers, Patrick 
Just for the record, there is another practical inconvenience (not a show-stopper) with using URIs: since namespaces are not part of the abstract syntax, there is no other way of determining the type of a URI-encoded literal but to test all known URI prefixes against the given resource URI (of course, assuming no rdf:type is used). 
And that for each resource with a URI label... Summary of cons for URI-encoded literals mentioned in this thread: - literals and thus URIs can be huge (e.g., BLOBs) [Dan, Jan] - interpretation of URIs is unrestricted [Graham, Jan] - literals cannot have substructure in abstract syntax [Patrick] - type of URI-literals needs to be determined by prefix matching [Sergey] Still, I share Patrick's view that in principle URIs are a viable mechanism for encoding typed values and should be taken into account once RDF shoots for an extensible and generic datatyping framework. 
Sergey 
