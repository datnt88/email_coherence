Peter, after my mini-epiphany during the telecon yesterday, I had an even better one :-). 
I think that there is a very tiny, if unconventional, change to the RDF MT which will allow it to accommodate smoothly to your (or anyone else's) proposed treatment of literals: simply say (with some explanatory prose :-) that the XL mapping is a fixed mapping from literal TOKENS to literal values. 
That is, it allows one occurrence of whatever 05 /whatever to denote an integer and another one to denote a string, just as long as they each denote the same thing in every interpretation. 
This allows both the case where every literal is simply a string which denotes itself, and it also allows the extreme other case where an elaborate external datatyping process assigns special values in all sorts of ways. 
However, it does insist that each literal label token has a fixed interpretation; it doesn't tolerate ambiguity of any *particular* literal label. 
I don't want to allow that kind of ambiguity. 
This will leave entirely mysterious how anyone or anything could determine what the actual denotation of any particular literal token actually is, of course. 
That is assumed to be done somehow, but is outside the scope of the MT itself. 
With this change in wording, the actual equations can remain as they are. 
Would that be sufficient flexibility for you, along with allowing IR to consist of both resources and literal values, so that rdfs:Literal doesn't force literal values to be resources? 
Pat PS I'm cross-posting this to both groups in case anyone can see a fatal objection. 
IHMC(850)434 8903 home 
40 South Alcaniz St.(850)202 4416 office phayes@ai.uwf.edu 
Can I try to clarify what I think you're saying... Different occurrences of a literal within a graph may map to different values, but that these mappings are fixed, and may not change when a different interpretation is used for the graph. 
Noodling... 
[a Shoe] decimalSize [ a type:Integer ; rdf:value "10" ] ; sizeLabel [ a type:String ; rdf:value "10" ] . 
The intent here is that the first occurrence is mapped to an integer, and the second to a string. 
BUT, doesn't this depend in some way on the interpretation of type:Integer and type:String? 
#g 
Graham Klyne MIMEsweeper Group Strategic Research http://www.mimesweeper.com 
Right, that is what I had in mind. 
However, Peter wants a slightly different notion, in which the interpretation *does* determine (or at any rate *can* determine) the literal mappings. 
This seems to amount to treating literals rather like bNodes with a kind of potential datatype constraint on them (that can be inferred from rdfs:range assertions in the graph, in Peter's scheme: see ). 
I have to say, I don't like this myself. 
But maybe I will have to just shut up and go along with the crowd. 
Maybe. Actually I'm not sure how to parse that example. 
Is that two triples or four triples? 
Pat IHMC(850)434 8903 home 40 South Alcaniz St.(850)202 4416 office phayes@ai.uwf.edu 
Ah, sorry, I was using N3. [...] encloses properties applied to a bNode. 
"a" in property position is shorthand for rdf:type. 
Let me expand the above to simple triples: _:a rdf:type Shoe . 
_:a decimalSize _:b . 
_:a sizeLabel _:c . 
_:b rdf:type type:Integer . 
_:b rdf:value "10" . 
_:c rdf:type type:String . 
_:c rdf:value "10" . 
#g Graham Klyne MIMEsweeper Group Strategic Research http://www.mimesweeper.com 
we consider them as identities which can be unified in a very straightforward way (and actually also in subject and predicate roles) Jos 
