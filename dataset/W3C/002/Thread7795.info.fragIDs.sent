Another in the series of messages about advanced collection design team proposals: 
Jim Amsden in his comments on the advanced collections spec said that he believes it is never possible to guarantee the integrity of bindings that cross servers. 
So requiring servers to guarantee the integrity of any binding that they allow to be created will have the result that no one will ever implement cross-server bindings. 
The kind of case he had in mind (I think) was one where the server where the resource resides becomes inaccessible to the server where bindings resides. 
So at least while the 2 servers are out of touch, the binding will be broken. 
We think that it is not impossible to guarantee integrity of bindings even in cases like this, if the server is willing to take enough trouble. 
It can 
store a copy of the target resource locally, and insure that no changes are 
allowed except when both servers are accessible. 
We agree that it is unlikely that cross-server bindings will be supported because of the difficulty of guaranteeing integrity, but we do want to insist the servers fail BIND requests where they can't guarantee integrity of the binding. 
(We are planning to remove all normative language about cross-server bindings, but just keep the generic statement that integrity of bindings has to be guaranteed.) If you don't care so much about integrity, and do want cross-server referencing, then redirect references are the better tool to use. 
--Judy Judith A. Slein Xerox Corporation jslein@crt.xerox.com 
(716)422-5169 800 Phillips Road 105/50C Webster, NY 14580 
It may not be feasible to make a copy of a dynamic resource. 
|John Stracke | http://www.ecal.com 
|My opinions are my own. 
| |Chief Scientist |================================================| |eCal Corp. |"Genius, Brain! 
But what if the dragon eats us?"| |francis@ecal.com|"That would alter our plans." 
| 
opinion owner=jlc personal We've barely discussed dynamic resources in general. 
It doesn't take much discussion to realize that copying a dynamic resource is not something that can ever be expressed in a standard protocol; they're far too implementation-dependent. 
|John Stracke | http://www.ecal.com 
|My opinions are my own. 
| |Chief Scientist |===============================================| |eCal Corp. |"Your reality, sir, is lies &amp; balderdash, and I| |francis@ecal.com|am pleased to say I have no grasp on it | 
|whatsoever!" --Baron Munchausen | 
We've barely discussed dynamic resources in general. 
They need just as much 
clarification and cleanup as locks do/did, but we're not going to be able to cover them before the end of the month and I believe that's the deadline we face for the webdav base spec. 
I think until we do get that defined, server implementers are just going to have to experiment with their own ideas about dynamic (content) resources. 
As for COPY/MOVE'ing them. 
For now we'll just have to leave implementors with the guidelines that we have now. 
If they don't think they can support them (or anything else), then they need to reject requests that require they support them. 
They are going to need to make some judgement calls here. 
When we come back to dynamic resources, we can be more specific about what is expected. 
Actually, it's more than that. 
You're (apparently) presuming that the servers can come up with some way of making DELETE on the resource trigger a DELETE on the binding. 
But suppose the resource is just a file, and it gets deleted from outside the server? 
I am not aware of any OS where you can get notification when a file is deleted. 
In the single-server case, this is not a problem, because the server can check to make sure the resource still exists before doing anything to indicate that the binding exists. 
In the cross-server case...well, you could still do it, but it'd make things like PROPFIND expensive (if a collection contains 15 cross-server bindings, you've got to do 15 HTTP requests to make sure they're all still there). 
|John Stracke | http://www.ecal.com 
|My opinions are my own. 
| |Chief Scientist |===============================================| |eCal Corp. |I'm not a bibliophile, I'm a bibliophiliac. 
Put| |francis@ecal.com|me in a bookstore, &amp; my wallet bleeds. 
| 
From: John Stracke francis@ecal.com 
It may not be feasible to make a copy of a dynamic resource. 
gmc/ True. 
In which case (as in all other cases where it cannot guarantee BIND semantics) the server has to fail the BIND request. 
Cheers, Geoff 
To give that dead horse one more kick (:-), I agree with John and Jason that there is little useful we can say about the semantics of dynamic resources. 
The best we can do is give them some standard properties like "source". 
Cheers, Geoff Date: Wed, 15 Sep 1999 15:27:47 -0400 From: John Stracke francis@ecal.com 
X-Mailer: Mozilla 4.6 [en] (X11; I; Linux 2.0.36 i586) X-Accept-Language: en Mime-Version: 1.0 References: 852567ED.006A4EC5.00@D51MTA07.pok.ibm.com 
Content-Transfer-Encoding: 7bit Resent-From: w3c-dist-auth@w3.org 
X-Mailing-List: w3c-dist-auth@w3.org 
archive/latest/3317 X-Loop: w3c-dist-auth@w3.org 
Sender: w3c-dist-auth-request@w3.org Resent-Sender: w3c-dist-auth-request@w3.org Precedence: list X-Lines: 27 Content-Length: 1145 
It doesn't take much discussion to realize that copying a dynamic resource is not something that can ever be expressed in a standard protocol; they're far too implementation-dependent. 
Right. 
A copy might be difficult or inappropriate. 
Judith's copy example is just one possible approach. 
For resources that couldn't be copied, some cooperative proxying might be done for example. 
But the copy suggestion was for when the servers can't talk to each other. 
|John Stracke | http://www.ecal.com 
|My opinions are my own.| |Chief Scientist |=============================================| |eCal Corp. |In the long run, there is no middle ground | |francis@ecal.com|between justice and genocide. 
| 
can 
are 
Right. 
A copy might be difficult or inappropriate. 
Judith's copy example is just one possible approach. 
For resources that couldn't be copied, some cooperative proxying might be done for example. 
Each approach will have tradeoffs. 
I think Judith's point was that integrity *can* be insured. 
