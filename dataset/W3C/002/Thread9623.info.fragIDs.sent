Patrick Stickler said: 
[perhaps these should each be in their own thread?] 
Here it is 
rdfms-xmllang: Why isn't xml:lang information represented within the RDF da 
ta 
model? 
This was put on hold whilst we looked at datatypes. 
Model and Syntax says that lang is part of the literal; that no triples are generated for an xml:lang. 
We can choose to stick with that or change it. 
Does anyone have 
a 
compelling reason to change it? 
I think it should not be changed, but the verbage could be clarified. 
The xml:lang attribute exists for the benefit of XML applications (e.g. an RDF parser) not RDF applications (e.g. an RDF query engine) and therefore it is reasonable that it have no representation in the graph (no triples generated). 
An XML application is free to select or omit elements based on the xml:lang attribute -- but since that is not part of the needed functionality of most (any?) RDF parsers, the attribute simply has no effect. 
I think you are proposing changing what RDF M&amp;S said about using xml:lang and literals. 
RDF is/was linked to XML and just ignoring xml:lang is unacceptable to me, and to other applications and communities too (Dublin Core for one). 
If individuals wish to qualify resources by language value, in a way that will affect queries and other graph-based operations, then they should do so in a way that is meaningful to RDF applications. 
E.g. xxx ex:keyword _:1 . 
_:1 rdf:value "pan" . 
_:1 xml:lang _:2 . 
_:2 rdf:value "en" . 
_:2 rdf:dtype xsd:lang . 
Note that _:2 is a datatyped literal but _:1 is simply a qualified literal (qualified for language). 
Note also the relationship between the property xml:lang and the datatype xsd:lang. 
This is requiring the use of the datatyping part of RDF (unwritten yet) in order to do what was previously part of the core RDF M&amp;S. 
It isn't clear where the datatyping stuff will live, so making users require RDF+RDFS+RDF Datayping in order to do what they could do with RDF M&amp;S alone, seems a big step. 
That said, the M&amp;S view that the language is "part of" the literal is not quite right, and probably should be adjusted (or removed), in that, as with datatyping, language is a property of the occurrence (context) of the literal and not the literal itself. 
And especially since literals are now tidy, an application shouldn't attach context specific properties such as language to globally shared literal nodes. 
Or lang-literals are tidy? 
Dave 
Patrick Stickler said: 
That said, the M&amp;S view that the language is "part of" the literal is not quite right, and probably should be adjusted (or removed), in that, as with datatyping, language is a property of the occurrence (context) of the literal and not the literal itself. 
M&amp;S defines language to be part of the literal. 
Its simple: a literal is a pair ("string", "lang"). 
My question was: does anyone have a compelling reason to change this. 
Do you have one Patrick? 
And especially since literals are 
now tidy, 
The pair above is just as tidy as "string". 
Brian 
Patrick Stickler said: 
That said, the M&amp;S view that the language is "part of" the literal is not quite right, and probably should be adjusted (or removed), in that, as with datatyping, language is a property of the occurrence (context) of the literal and not the literal itself. 
Yes. I thought I explained it. 
Twice. 
Language is not a property of the literal. 
Language is a specific context of interpretation. 
It is similar to datatyping. 
You don't say that the literal "5" *is* an xsd:integer, forever and always, wherever it occurs. 
Rather, in a given case, the literal may occur with a datatype context that gives it interpretation. 
A literal is not a pair ("string", "lang"). 
The M&amp;S is wrong. 
There, I've said it ;-) 
And especially since literals are 
now tidy, 
So now, do we get xxx key "pan" . 
("en") xxx key "pan" . 
("sp") or xxx key ("pan","en") . 
xxx key ("pan","sp") . 
Now which represents tidy literals? 
And does that mean that for *every* query that compares literals one must specify language? 
And what about comparison of literals where one is specified for language and the other is not, do they match? 
No? Why? 
Nope. 
I don't think that any of our discussions over the past few months have considered literals to be anything but the string. 
Patrick 
Patrick Stickler said: 
I agree. 
Pat IHMC(850)434 8903 home 40 South Alcaniz St.(850)202 4416 office phayes@ai.uwf.edu 
