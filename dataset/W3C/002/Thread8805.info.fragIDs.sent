Hi Mauro, In section "4.3.3.2 
The Reference Processing Model" there is stated that these XPointer URIs are used if you intend to support any canonicalization that preserves comments. 
The URI="" removes all comments from the document. 
The URI="xpointer('/')" preserves the Comments. 
See also [1] aboit this. 
Best regards, 
Christian 
[1] http://cvs.apache.org/viewcvs.cgi/xml-security/src/org/apache/xml/security/ 
utils/resolver/implementations/ResolverXPointer.java utils/resolver/implementations/ResolverFragment.java 
Hi all, as my signature says, we are a students groups working on an open implementation of XMLDSIG. 
I have some doubts about URI dereferencing, in particolar: xpointer(/) dereferencing is equals to null URI? xpointer(id('ID')) dereferencing is equals to barename XPointer and therefore to #fragment about XML spec?, Thanks in advance! 
Mauro Arcolini Laurea Informatica I livello Universita' degli studi di Pisa Italy -- member of GAPXSE, a students group from: Nicchia sicurezza reti di computer 2000/2001 Dipartimento di Informatica -- current project: Java Api for XMLDSIG -- mail: arcolini@sec.di.unipi.it 
Mit freundlichen Gr??en, 
Christian Geuer-Pollmann 
Institute for Data Communications Systems University of Siegen Hoelderlinstrasse 3 D-57068 Siegen Germany mail: mailto:geuer-pollmann@nue.et-inf.uni-siegen.de 
web: http://www.nue.et-inf.uni-siegen.de/~geuer-pollmann/ 
Hi all, as my signature says, we are a students groups working on an open implementation of XMLDSIG. 
I have some doubts about URI dereferencing, in particolar: 
xpointer(/) dereferencing is equals to null URI? xpointer(id('ID')) dereferencing is equals to barename XPointer and therefore to #fragment about XML spec?, Thanks in advance! 
Mauro Arcolini Laurea Informatica I livello Universita' degli studi di Pisa Italy -- member of GAPXSE, a students group from: Nicchia sicurezza reti di computer 2000/2001 Dipartimento di Informatica -- current project: Java Api for XMLDSIG -- mail: arcolini@sec.di.unipi.it 
I have a related question. 
When doing signature validation after having done reference validation how does one treat the xpointer string? 
In other words, if my Reference element looks like this: does canonicalization of SignedInfo do anything at all to this tag? 
Ajay 
Hi all, as my signature says, we are a students groups working on an open implementation of XMLDSIG. 
I have some doubts about URI dereferencing, in particolar: 
xpointer(/) dereferencing is equals to null URI? xpointer(id('ID')) dereferencing is equals to barename XPointer and therefore to #fragment about XML spec?, Thanks in advance! 
Mauro Arcolini Laurea Informatica I livello Universita' degli studi di Pisa Italy -- member of GAPXSE, a students group from: Nicchia sicurezza reti di computer 2000/2001 Dipartimento di Informatica -- current project: Java Api for XMLDSIG -- mail: arcolini@sec.di.unipi.it 
Hi, if I understand correctly, you ask about how the c14nized form of this looks? 
Well, I think it's only a fragment of a greater document, so the answer cannot be given that way (depends on eventually existing parent elements and whether you have element content or not). 
To play arount with c14n, I would suggest you download an implementation of c14n and feed some examples to this implementation to it to understand how it works. 
(If your XML snippet is some single Element, the c14nized output would look like but there is no xmlns:dsig="" declaration. 
If you have some child elements and parent elements, the Start tag would not be changed. 
Christian 
--On Dienstag, 16. Oktober 2001 18:53 -0700 Ajay Nerurkar 
Hi all, just for your personal entertainment: Seems some people can't live without ASN.1 ;-)) Christian 
-----BEGIN PGP SIGNED MESSAGE----- Hash: SHA1 
Only 25% shorter than XML? 
Canonical S-expressions [CSEXP] (as used in SPKI/SDSI) is also a binary format, is 1:1 with a major subset of XML (see shorter. 
Then again, CSEXP is almost always shorter than traditional ASN.1 without any XML compatibility. 
Of course, %-shorter is strictly a function of the ratio of tags to content and is a pretty meaningless measurement apart from a real document. 
- Carl [P.S. for some reason, Netscape gets to the #XML tagged line above but IE doesn't.] 
-----BEGIN PGP SIGNATURE----- Version: PGP 6.5.8 iQA/AwUBO817KnPxfjyW5ytxEQINlgCfZapTJy1Gm4+btNQFkvBdj0Zh2S4AoIwV lndL3AxlCqs3rOR4sHcrcsop =Rgmh -----END PGP SIGNATURE----- |Carl M. Ellison cme@acm.org 
http://world.std.com/~cme | 
PGP: 08FF BA05 599B 49D2 23C6 6FFD 36BA D342 | 
+--Officer, officer, arrest that man. 
He's whistling a dirty song.-+ 
Given that virtually every XML document on earth only uses 64 distinct symbols a 25% saving in space can be achieved using a cheesy FSR that could be written in about 30 minutes. 
The odd thing about the return of the Forces of ASN.1 is that reusing the ASN.1 encoding format buys you precisely nothing if you are using the XML data model. 
You can't use any existing ASN.1 tools and using any of the toolkits would give you even more indigestion than usual. 
In other venues the Forces of ASN.1 have claimed much higher compression - from 200 bytes to 6. 
My response is that MD5 is guaranteed to compress *any* bit stream of any length to 16 bytes and is only marginally harder to decode than some of the more insane forms of ASN.1. 
Phill Phillip Hallam-Baker FBCS C.Eng. 
Principal Scientist VeriSign Inc. pbaker@verisign.com 781 245 6996 x227 
