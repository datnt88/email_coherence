Assaf wrote ... 
DB People can always make the decision on which service (e.g. a bank account) to use because they can read. 
Computers find it much harder as they don't understand the semantics. 
/DB 
Probably not, but my computer can still make selections without having to understand semantics. 
The proposal I made was to name things, so you only need to recognize the names, and that a computer can easily do. 
DB2 OK, but who teaches the computer what the names mean and therefore which one to chose. 
Unless the computer has some type of artificial intelligence, then a human has to tell the computer what things mean and we're back to square one - you still have to agree on what the names mean. 
/DB2 Not contradicting anything I'm saying. 
I could also make it a property in a UDDI entry and do a search based on that property. 
If only I could have something I could reference ;-) DB2 But who decides how these properties are recorded and what the semantics of the properties are. 
Unless there is some standardization, you won't get anywhere. 
The only other alternative is to us "natural language" searching to identify what you are looking for which is what Google does so well. 
/DB2 David determinis m of a Chor description language 
DB It's only a done deal because: a) there are dominant networks like Visa and Mastercard that can make it work, and b) they have been working on it for decades. 
The issue is that for Web Services, right now, there is no "done deal" and it will be some time before it gets there. 
This means, that we should start thiking about what it takes to help the "deal get done faster". 
/DB 
There are a lot of other scenarios like that. 
I don't care how they came to be, I know that they exist, and like Visa and Mastercard are very commonly used. 
So let's support them. 
I agree that we should also help the "deal get done faster". 
But where the agreement problem doesn't exist, why not leverage that? 
DB People can always make the decision on which service (e.g. a bank account) to use because they can read. 
Computers find it much harder as they don't understand the semantics. 
/DB 
Probably not, but my computer can still make selections without having to understand semantics. 
The proposal I made was to name things, so you only need to recognize the names, and that a computer can easily do. 
DB You could expose it as part of your WSDL definition. 
However before it could be used, someone else would have to write software that could interpret the semantics of the definition so that it could make an appropriate decision. 
Although this is possible, I don't see it happening unless and until there is some standardization of the semantics around how you describe the rules and regulations as the cost of developing the software for all the different ways of describing the semantics would be prohibitive. 
/DB 
Not contradicting anything I'm saying. 
I could also make it a property in a UDDI entry and do a search based on that property. 
If only I could have something I could reference ;-) arkin 
Isn't this what ontonolgies (semantic web) is all about. 
Not that it solves anything at the human level. 
Someone has to decide on what concepts and names are to be included. 
But at least it is a point of reference. 
Cheers Steve T [mailto:public-ws-chor-request@w3.org]On Behalf Of Burdett, David determinis m of a Chor description language Assaf wrote ... 
DB People can always make the decision on which service (e.g. a bank account) to use because they can read. 
Computers find it much harder as they don't understand the semantics. 
/DB 
Probably not, but my computer can still make selections without having to understand semantics. 
The proposal I made was to name things, so you only need to recognize the names, and that a computer can easily do. 
DB2 OK, but who teaches the computer what the names mean and therefore which one to chose. 
Unless the computer has some type of artificial intelligence, then a human has to tell the computer what things mean and we're back to square one - you still have to agree on what the names mean. 
/DB2 Not contradicting anything I'm saying. 
I could also make it a property in a UDDI entry and do a search based on that property. 
If only I could have something I could reference ;-) DB2 But who decides how these properties are recorded and what the semantics of the properties are. 
Unless there is some standardization, you won't get anywhere. 
The only other alternative is to us "natural language" searching to identify what you are looking for which is what Google does so well. 
/DB2 David -----Original Message----- determinis m of a Chor description language 
DB It's only a done deal because: a) there are dominant networks like Visa and Mastercard that can make it work, and b) they have been working on it for decades. 
The issue is that for Web Services, right now, there is no "done deal" and it will be some time before it gets there. 
This means, that we should start thiking about what it takes to help the "deal get done faster". 
/DB 
There are a lot of other scenarios like that. 
I don't care how they came to be, I know that they exist, and like Visa and Mastercard are very commonly used. 
So let's support them. 
I agree that we should also help the "deal get done faster". 
But where the agreement problem doesn't exist, why not leverage that? 
DB People can always make the decision on which service (e.g. a bank account) to use because they can read. 
Computers find it much harder as they don't understand the semantics. 
/DB 
Probably not, but my computer can still make selections without having to understand semantics. 
The proposal I made was to name things, so you only need to recognize the names, and that a computer can easily do. 
DB You could expose it as part of your WSDL definition. 
However before it could be used, someone else would have to write software that could interpret the semantics of the definition so that it could make an appropriate decision. 
Although this is possible, I don't see it happening unless and until there is some standardization of the semantics around how you describe the rules and regulations as the cost of developing the software for all the different ways of describing the semantics would be prohibitive. 
/DB 
Not contradicting anything I'm saying. 
I could also make it a property in a UDDI entry and do a search based on that property. 
If only I could have something I could reference ;-) arkin This email is confidential and may be protected by legal privilege. 
If you are not the intended recipient, please do not copy or disclose its content but delete the email and contact the sender immediately. 
Whilst we run antivirus software on all internet emails we are not liable for any loss or damage. 
The recipient is advised to run their own antivirus software. 
This email is confidential and may be protected by legal privilege. 
If you are not the intended recipient, please do not copy or disclose its content but delete the email and contact the sender immediately. 
Whilst we run antivirus software on all internet emails we are not liable for any loss or damage. 
The recipient is advised to run their own antivirus software. 
Anders said ... IMHO the leveling approach is often appeling but when used in the context of agreeements, real life more complex than that. 
I like to think in terms of topology or formation. 
I also like to separate agreements from specifications. 
DB I agree that life *can* be more complex than that. 
However the problem with complexity is that it makes successful interoperability to achieve. 
I therefore think it should be a goal to have a limited number of options that a "leveled" approach would facilitate. 
/DB 
* A specification is a collection specification components that one or more authors have created (possibly with copyright) The authors sign the specification with an "Authenticity of Origin" signature. 
Which means the authors does not obligate themself to use the spec and is not responsible for usage by others. 
DB I like this idea, but the specification is not the implementation. 
Do you also need a signature or certification that some software follows the specification. 
However doing this might result in some liability issues perhaps. 
/DB 
* An Agreement contains agreement components and is signed by parties that obligate themself to the semantics specified by the agreement components. 
DB I agree, but the fewer the agreement components the better for ease of implementation and interoperability. 
This probably means that each agreement has to be larger in scope. 
/DB 
I believe that desctinctions like these are important otherwise we never know what the signature means. 
Reuse almost always involve specifications, even on an industry level. 
So the an agreement topology is the art of relating agreements, specification and parts thereof, ie. references, appendix, include, govern, govern with superiority etc. 
Here I also see benefits from using the notion of Specifciations as containers of components which may or may not be related. 
WSDL is component, Chorograpghy is a components, W3C XML Schema is a component. 
A Choreography is bound (static, dynamically) to a syntax specific InformationSpecification such as XML Schema. 
DB As well as an agreement specifying the specifications that are being followed, should it also specify the bits of the specification that are NOT being followed. 
So really the aggreement is a combination of aggregation and restriction. 
I think that restriction is sometimes really necessary, as WS-I has demonstrated, in order to get interoperability. 
You might also find that two specifications actually conflict in some way and therefore you need to say which of the two you are actually following. 
/DB 
In terms of who developes what, I think its a political process and all we can do is to facilitate a number of relevant possibilities. 
determinis m of a Chor description language David, see comment inline. 
Anders Having taken a quick look at the document you attached, it seems to me that really it describes a legal framework that identifies how businesses would interact. 
It does not necessarily specify the detail of how they would interact. 
Yes, the "top" are general provisions which sometime may be difficult or impossible to correctly represent in electronic form other than as text. 
The UBAC work were doing covers simple textual agrement to complext eContracts. 
This with an approach that we start simple with textual clauses and work our way toward semantically rich,executable and computer interpretable agreement components. 
I am also wondering what your thoughts are about separating agreements into three levels: 1. Technology agreements that cover messaging, technical protocols, security, etc 
Seems resonable , these are often call technical addendums. 
2. Process and data agreements that cover the choreography and data to be used, and 
Seems resonable. 
3. Business agreements that specify how individual parties will interact. 
Seems resonable of you by interact include that parties are obligated to ..., have the right to...., is prohibited from.... 
I think that technology agreements could be developed that could be used by multiple industries, and process and data agreements could be developed for individual industries and that the Business agreements could link the two together for use in a particular instance. 
IMHO the leveling approach is often appeling but when used in the context of agreeements, real life more complex than that. 
I like to think in terms of topology or formation. 
I also like to separate agreements from specifications. 
* A specification is a collection specification components that one or more authors have created (possibly with copyright) The authors sign the specification with an "Authenticity of Origin" signature. 
Which means the authors does not obligate themself to use the spec and is not responsible for usage by others. 
* An Agreement contains agreement components and is signed by parties that obligate themself to the semantics specified by the agreement components. 
I believe that desctinctions like these are important othewise we never know what the signature means. 
Reuse almost always involve specifications, even on an industry level. 
So the an agreement topology is the art of relating agreements, specification and parts thereof, ie. references, appendix, include, govern, govern with superiority etc. 
Here I also see benefits from using the notion of Specifciations as containers of components which may or may not be related. 
WSDL is component, Chorograpghy is a components, W3C XML Schema is a component. 
A Choreography is bound (static, dynamically) to a syntax specific InformationSpecification such as XML Schema. 
In terms of who developes what, I think its a political process and all we can do is to facilitate a number of relevant possibilities. 
/anders 
awt Reducing complexity as much as possible is a key goal for all of us. 
Selecting/prioritizes a number of AgreementTypes is certainly important. 
Yes, usage is tricky, what does a signed AgreementReference mean, what is the Intention behind it? 
A loosely coupled certification process is probably better. 
Yes, Creating AgreementComponents in resonable sized chunks is very important. 
Yes, deontics is useful, permissions, prohibitations as well as obligations. 
In UBAC we have also on the agenda to discuss constraints to be used when constructing an agreement. 
These constraints are discarded after the agreement has been constructed (first step in its lifecycle), i.e. CatalogConstraints that are an expression of the the Catalog maintainers (industry org,...) Intent. 
Of course catalog composer can break these constraints without liability. 
/anders 
