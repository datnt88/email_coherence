xmldsig defined (and other security applications have adopted) the following useful type: 
However, the recent Schema Proposed REC [1] eliminated the "binary" type and 
creates "base64Binary" and "hexBinary" types. 
I think this is a good thing in general as we did the same ourselves, but now we have to make a decision. 
Signature can 1. persist with its CryptoBinary, which is now redundant and encourages the use of another type needlessly. 
The definition is now: 2. Remove the CryptoBinary type. 
On the namespace issue, my rule of thumb has been that if I'm not breaking processors or instances from one version of the spec to the next, then there's no need to change the namespace. 
This doesn't break any instances nor processors, but seems to be in a gray zone... 
So we could: A. Continue with #1 for legacy purposes but warn others to use xsd:base64Binary when appropriate. 
B. Remove CryptoBinary and change the dsig namespace. 
C. Remove CryptoBinary and not change the dsig namespace. 
Thoughts? 
[1] http://www.w3.org/TR/xmlschema-2/#base64Binary Joseph Reagle Jr. http://www.w3.org/People/Reagle/ W3C Policy Analyst mailto:reagle@w3.org 
IETF/W3C XML-Signature Co-Chair http://www.w3.org/Signature W3C XML Encryption Chair http://www.w3.org/Encryption/2001/ 
I don't claim to be an expert on the digital signatures specification, but 
my quick reading of it suggests that CryptoBinary is not just any base64 
binary, it is specifically binary that results from applying the 
mechanisms of the digital signatures specification. 
If I am right about this, then I suggest that keeping the name is appropriate. 
We can expect the XPath version 2, as well as many non-W3C database mapping systems, 
will support queries based on type name. 
By specifically naming the digital signature type, you will allow behaviors to be applied to any information specifically coded in that manner. 
The fact that the XML schema validation mechanisms provided no additional direct checking is unimportant, I think. 
Higher level mechanisms can key on the type name 
and will know what to do. 
Noah Mendelsohn Voice: 1-617-693-4036 One Rogers Street Cambridge, MA 02142 
Thanks for your response Noah. 
I should've provided a reference, but there is really nothing more to CryptoBinary than the schema definition. 
It is that simple. 
It's used as the type for SignatureValue, DigestValue, X509SKI, X509Certificate, X509CRL, PGPKeyPacket, and all the DSA/RSA parameters. 
Consequently, it has to be generic, and given we decided to go base64 in xmldsig, it made sense to simplify things and just create a type for it. 
Even given what I said above, I'd be willing to take this as an argument not to eliminate it -- that's the direction I'm leaning towards anyways smile/ . 
Joseph Reagle Jr. http://www.w3.org/People/Reagle/ W3C Policy Analyst mailto:reagle@w3.org 
IETF/W3C XML-Signature Co-Chair http://www.w3.org/Signature W3C XML Encryption Chair http://www.w3.org/Encryption/2001/ 
CryptoBinary and base64Binary are not exactly equivalent -- there are further restrictions on a CryptoBinary because it is a representation of a single bignum. 
From the latest DSIG draft, section 6.4, is this 
implicit definition of the CryptoBinary format: 
Arbitrary-length integers (e.g. "bignums") are represented in XML as octet strings. 
The integer value is first converted to a "big endian" bitstring. 
The bitstring is then padded with leading zero bits so that the total number of bits == 0 mod 8 (so that there are an integral number of octets). 
If the bitstring contains entire leading octets that are zero, these are removed (so the high-order octet is always non-zero). 
This octet string is then base64 [MIME] encoded. 
(The conversion from integer to octet string is equivalent to IEEE 1363's I2OSP [1363] with minimal length). 
There's no difference in the schema definition, at least as it is today, but there is a semantic difference. 
--bal xmlschema-dev-request@w3.org 
Thanks for your response Noah. 
I should've provided a reference, but there is really nothing more to CryptoBinary than the schema definition. 
base64 
It is that simple. 
It's used as the type for SignatureValue, DigestValue, X509SKI, X509Certificate, X509CRL, PGPKeyPacket, and all the DSA/RSA parameters. 
Consequently, it has to be generic, and given we decided to go base64 in xmldsig, it made sense to simplify things and just create a type for it. 
Even given what I said above, I'd be willing to take this as an argument not to eliminate it -- that's the direction I'm leaning towards anyways smile/ . 
Joseph Reagle Jr. http://www.w3.org/People/Reagle/ W3C Policy Analyst mailto:reagle@w3.org 
IETF/W3C XML-Signature Co-Chair http://www.w3.org/Signature W3C XML Encryption Chair http://www.w3.org/Encryption/2001/ 
This is exactly the sort of thing I had in mind when I suggested that higher level application or library software could key on the "CryptoBinary" type name to do the additional validation. 
Indeed, I think that some have failed to notice that the schemas design in this respect anticipates layered families of type libraries and associated schema processors. 
Core compatibility is what we describe in the schema specification, and everyone must implement it compatibly. 
On the other hand, someone might want to propose a higher level standard for math-oriented processors that will additionally recognize and validate a library of math types including perhaps a "PrimeNumber" type (which might be declared in the schema as merely a nonnegative integer). 
When presented with the same schema and document, an ordinary XML schema processor would validate the content as an integer, and would correctly report its type name as PrimeNumber. 
Similarly, a processor, library, or application with knowledge of digital signatures could recognize and do the additional validation of "CryptoBinary". 
Processors which merely conform to the XML schemas recommendation would correctly validate the content as base64Binary and would correctly report the type of any such element as "CryptoBinary". 
So, I think this further supports the suggestion that the additional type be retained. 
Noah Mendelsohn Voice: 1-617-693-4036 One Rogers Street Cambridge, MA 02142 
Good point! 
Good enough then, thank you Brian and Noah. 
Joseph Reagle Jr. http://www.w3.org/People/Reagle/ W3C Policy Analyst mailto:reagle@w3.org 
IETF/W3C XML-Signature Co-Chair http://www.w3.org/Signature W3C XML Encryption Chair http://www.w3.org/Encryption/2001/ 
Ok, as we discussed, this bignum encoding rule we created for RSA and DSA KeyValues should probably apply to all the CryptoBinary types. 
So I've moved the text in section 6.4 and associate it with the CryptoBinary type [1]. 
The question then is there any definitions relying upon ds:CryptoBinary (i.e., SignatureValue, DigestValue, X509SKI, X509Certificate, X509CRL, PGPKeyPacket) that should be of xsd:base64Binary (or any other variant)? 
[1] 4.0.1 
The CryptoBinary Simple Type This specification defines the CryptoBinary simple type for representing arbitrary-length integers (e.g. "bignums") in XML as octet strings. 
The integer value is first converted to a "big endian" bitstring. 
The bitstring is then padded with leading zero bits so that the total number of bits == 0 mod 8 (so that there are an integral number of octets). 
If the bitstring contains entire leading octets that are zero, these are removed (so the high-order octet is always non-zero). 
This octet string is then base64 [MIME] encoded. 
(The conversion from integer to octet string is equivalent to IEEE 1363's I2OSP [1363] with minimal length). 
Schema Definition: Joseph Reagle Jr. http://www.w3.org/People/Reagle/ W3C Policy Analyst mailto:reagle@w3.org 
IETF/W3C XML-Signature Co-Chair http://www.w3.org/Signature W3C XML Encryption Chair http://www.w3.org/Encryption/2001/ 
