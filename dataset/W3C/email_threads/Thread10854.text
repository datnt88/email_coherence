Here are two questions, both stated as challenges to assumptions that have
been stated here but never defended. I am not necessarily saying that
the assumptions fail, but that to me at least, their validity is not
self-evident and that they need some reasoned rhetoric in their support.
1. Why ignore whitespace?
Given really simplistic RS/RE handling, it would be the case that the two
following "P" elements would parse differently.
Listen to my heart beat.
The position has been advanced by both Charles Goldfarb and James Clark
that this would be A Bad Thing. Obviously, it would complicate the
problem of achieving compatibility with 8879. Aside from that,
WHY IS THIS A PROBLEM?
It makes it idiotically, wonderfully, easy to explain to programmers
*and authors* exactly what is markup and what is data. It makes it
ridiculously easy to implement. The downside is that it makes it makes
XML/SGML source code slightly less readable. Do that, and the 8879
issue, constitute all the downside? (Not saying those aren't real; just
wondering if there are more problems)
2. Why should XML try to solve the record problem.?
Personally, I've been writing programs for almost 20 years which routinely
dealt with the fact that there might be NL or CR or CR/NL sequences in the
data, and maybe my experience is not shared, but this has never been a big
problem. Is it necessary for XML to abstract the problem away in the way
that SGML tries to do, especially if it's going to be hard to do in XML?
In fact, the practice in UNIX and Microsoft operating systems of storing
text in chunks of 80 bytes or less, separated by artefacts of typewriter
technology, is simply a historical anomaly, and I'm not sure that we should
pander to it, particularly when (and here's the real challenge I guess) it
doesn't seem, in practice, to be a big problem.
Cheers, Tim Bray
tbray@textuality.com http://www.textuality.com/ +1-604-488-1167
(Personally I wouldn't mind disallowing inclusion
exceptions, and restricting PIs and comment declarations
to element content or even to the prolog; but I do think
that disallowing mixed content is too restrictive.)
Can somebody help me?
Joe seems to be proposing that if we
* restrict PIs and comments to element content
* restrict mixed-content-models to "|"
* disallow inclusion exceptions
then we can reduce the RS/RE handling rules to "Robert's Rules" ( =) ) of
In data content:
1. If an element begins or ends with a newline [not entirely
accurate, but this is what people see], the newline is ignored.
2. Newlines inside markup are ignored.
3. All other newlines are passed on.
Is this really the case? Is this simplification an option?
Paul Prescod
(The discussion so far has focussed on RS/RE handling, but there
is also a problem with separator characters _other_ than
record-ends in mixed vs. element content.)
[ actually, "restrict mixed content to OR groups
with a REP occurrence indicator and which only contain
primitive content tokens", or something equivalent;
IOW, "no pernicious mixed content" ]
There's one more rule (which is the important one):
* disallow separator characters in element content
This is because things like:
have different meanings depending on whether A has mixed content or
element content. The record-end after the first /b end-tag is
significant in the former case, and is ignored in the latter.
If A has element content, the above would have to be written like:
or
a
instead.
Yes, as far as I can tell.
Charles' proposal is similar:
* restrict PIs and comment declarations to element content
* disallow mixed content
* disallow inclusion exceptions (or perhaps, disallow
included subelements in pseudoelement content).
* require data content to be delimited
The chief difference is in the second and fourth rules.
With these restrictions the RS/RE/separator character rules
are even simpler:
1. Delimited separator characters are data.
2. Undelimited separator characters are ignored.
--Joe English
jenglish@crl.com
