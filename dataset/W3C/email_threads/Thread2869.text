has anyone tried to use http over udp.
i have a device which has only udp type server sockets. it doenst have TCP
ones.
I want to reach that device using netscape/ IE (any browser).
since HTTP is based over TCP , my UDP listener at my device's end wont
receive packets sent over netscape.
Any ideas?
Thanks
Tapan
Get Your Private, Free E-mail from MSN Hotmail at http://www.hotmail.com.
The issue is that HTTP needs a connection-oriented transport.
Using UDP would mean that you need some sort of connection-management...
So why use UDP?
Note that UDP is a complete different protocol than TCP, even if they have
the same range of port numbers (and have ports).
- Joris
has anyone tried to use http over udp.
i have a device which has only udp type server sockets. it doenst have TCP
ones.
I want to reach that device using netscape/ IE (any browser).
since HTTP is based over TCP , my UDP listener at my device's end wont
receive packets sent over netscape.
Any ideas?
Thanks
Tapan
Get Your Private, Free E-mail from MSN Hotmail at http://www.hotmail.com.
A few people have investigated the use of HTTP over UDP rather than TCP,
useful for short files as a way of bypassing TCP startup overheads. The most
recent such work of which I'm aware was in the last Infocom. See
Fred
Hi Joris,
I have a device that supports only UDP kind of server side sockets.
So I have to use UDP.
Yes, I know , but since I had to use UDP, I was thinking on that track
Tapan
Get Your Private, Free E-mail from MSN Hotmail at http://www.hotmail.com.
Quite a late response, but I didn't have time earlier...
The issue is that you need some kind of session-management for the
'requests'. Having this solves requests over UDP greater than
64KB and such
transmission back. Also, the client needs to know what it's
requests are.
This is required in the case of multiple requests.
Im quite new as far as working of HTTP protocol is concerned..
Could you pl.
tell me more about the session mgmt protocol here?
Is 64kb is a bottleneck for the UDP requests?
Depends on what you want. Relatively small HTML pages, some art and stuff
usually keep below 64kb, but there are pages that are way larger, and this
is even more common for art. Not to talk about downloads or IE's extensions,
like ActiveX Controls
The proposal on the ATT research site, still relies on TCP, however:
connections are made by the server rather than the client. So
STILL TCP!!!
not solely UDP.
A nice feature would be the easy implementation of HOL
blocking / async
transfers of all files.
Could you please elaborate more on this?
HOL blocking stands for Head-Of-Line Blocking: meaning if you send two
requests (using one connection-persistent connection) using TCP, one for a
large PDF file and another for a small image file, then first the large PDF
file must be downloaded before you can get the image. If you send the image
first and then the PDF file, this would be much nicer in some instances.
Also it's nice for transports that can have packet
drops: live audio/video. But for this there are other
protocols that do
better than HTTP.
Which protocols other than HTTP would you consider better here? TCP?
No, MMS (Microsoft), RTSP (Apple Quicktime, Realplayer). These are designed
solely for audio/video and work on UDP/TCP and support multicast.
I hope you understand how IP, UDP, TCP, HTTP, ..... are related to
eachother...
IP is designed for addressing computers and routing requests easily.
TCP is a connection-based reliable protocol that works on top of IP.
UDP is a connection-less unreliable datagram protocol that works on top of
IP.
HTTP is a application protocol that usually works on top of TCP.
Next you need enourmes time-outs, since you don't know
whether a server is
still handling your request or crashed or 'bobby' knows what else...
- Joris
