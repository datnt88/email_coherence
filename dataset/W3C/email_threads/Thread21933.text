I had deferred doing anything with test suite
definitions, but it seems like things are progressing
to the point that we will need to address them shortly.
I think that it is fairly obvious that we will have a suite
element. What goes underneath is not so clear.
is attractive, but would complicate DTD validation since test
is already defined with a different content model, member
would also be out for the same reason.
Any comments on:
or
Also, I had been using XML/RDF represent extracted metadata from tests and
other sources though the test themselves only had RDF reminiscent elements
and adding a dependency on a technology that none of us seem to really
know well was not popular.
The only construct that was really missing from the existing metadata
construct in the test definition language was the ability to say that
a metadata element was about some arbitrary URI instead of the test or
suite that the metadata element was contained it.
It would seem that we could express subjects.rdf and some of the other
external metadata files within the internal metadata, if we add an
optional about attribute to the metadata element and allow a metadata
element to optional contain other metadata elements.
That would not affect metadata in the tests, but it would allow external
metadata compilations (which are now in an RDF format) to be validated
by the DOMx.DTD. For example, subjects.rdf which now looks something like:
could be expressed as:
The resulting file could be trivially converted to RDF by a transform
if that eventually added any value.
I'd appreciate any feedback and will try to make appropriate
changes when I commit the spec-to-xsd.xsl and spec-to-dtd.xsl
transforms to the W3C CVS tonight.
comments inlined
I had deferred doing anything with test suite
definitions, but it seems like things are progressing
to the point that we will need to address them shortly.
I think that it is fairly obvious that we will have a suite
element. What goes underneath is not so clear.
is attractive, but would complicate DTD validation since test
is already defined with a different content model, member
would also be out for the same reason.
Any comments on:
or
[dd] suiteMember sounds better to me, allows both suites and tests.
Also, I had been using XML/RDF represent extracted metadata from tests
and
other sources though the test themselves only had RDF reminiscent
elements
and adding a dependency on a technology that none of us seem to really
know well was not popular.
The only construct that was really missing from the existing metadata
construct in the test definition language was the ability to say that
a metadata element was about some arbitrary URI instead of the test or
suite that the metadata element was contained it.
It would seem that we could express subjects.rdf and some of the other
external metadata files within the internal metadata, if we add an
optional about attribute to the metadata element and allow a
element to optional contain other metadata elements.
That would not affect metadata in the tests, but it would allow external
metadata compilations (which are now in an RDF format) to be validated
by the DOMx.DTD. For example, subjects.rdf which now looks something
like:
could be expressed as:
The resulting file could be trivially converted to RDF by a transform
if that eventually added any value.
I'd appreciate any feedback and will try to make appropriate
changes when I commit the spec-to-xsd.xsl and spec-to-dtd.xsl
transforms to the W3C CVS tonight.
I ended up going with suite.member href="..."/ , but I'm not married to the
"." vs camel case.
