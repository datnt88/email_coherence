Thus, the language in the specification, from Section 9.2 "Versioning Data
Model" should be used in the requirements.
My problem with this is that the spec's usage seems counterintuitive. I
think it will confuse people. To me it seems natural to say that a node in
a version tree is a version (not a versioned resource). A versioned
resource is a resource that has versions -- it's not any one of the
versions. So I guess the closest thing to a versioned resource is the tree
handle.
Well, while I agree with you that the language in the spec. is probably not
intuitive, I'm not fond of just using the term "version" for a node in a
version tree. Since it took the group awhile to agree that a node in a
version tree is also a first-class resource, I'd like our terminology for
the node in a version tree to reflect this.
I'm also not fond of saying that a node in a version tree is a "version of
a resource." This is because we may allow an individual resource to be a
member of more than one version tree, and because it may imply (for people
used to file-based versioning systems like RCS) that the version is not a
first-class resource.
I'm tempted to bypass this terminology thicket and coin a new term, like
"movert," "movet," or "MVT," which is just an acronym for "member of a
version tree."
- Jim
If we let our terminology be "version tree" and "member of a version tree",
the requirements start looking something like this:
4.9.2.1. Referring to a version tree. There should be a way to refer to a
version tree as a whole. Some queries do not apply only to one member of a
version tree, but to the version tree as a whole. Furthermore, some
operations may affect all members of the tree, rather than any specific
member. In these cases, a way to refer to the whole version tree is required.
4.9.2.2. Referring to specific members of a version tree. There should be a
way to refer to each member of a version tree. This means that each member
of the tree is itself a resource. This is required for version-specific
linking, and for non-versioning client support.
And so on . . .
OK?
--Judy
Thus, the language in the specification, from Section 9.2 "Versioning Data
Model" should be used in the requirements.
My problem with this is that the spec's usage seems counterintuitive. I
think it will confuse people. To me it seems natural to say that a node in
a version tree is a version (not a versioned resource). A versioned
resource is a resource that has versions -- it's not any one of the
versions. So I guess the closest thing to a versioned resource is the tree
handle.
Name:Judith A. Slein
E-Mail:slein@wrc.xerox.com
MailStop:128-29E
OK with me.
- Jim
Bingo bango bongo.
Yaron
PS For those of you who are not versed in the rarified terminology of
Gilligan's Island, that means I agree.
From:Jim Whitehead [SMTP:ejw@ics.uci.edu]
Sent:Thursday, February 20, 1997 4:49 PM
Subject:Re: Versioning terminology
Not considering style, I think I like it. It is much clearer this way,
although repetitions and allitterations may cause the prose to be more
obscure and hard to read than necessary. If there is a way for improving
the readability, for instance introducing neologisms such as vtree and
movert, then it could look like:
4.9.2.1. Referring to a version tree. There should be a way to refer to a
version tree as a whole. Some queries do not apply only to one member of a
vtree, but to the version tree as a whole. Furthermore, some
operations may affect all moverts, rather than any specific
member. In these cases, a way to refer to the whole vtree is required.
But, again, it's just style, and we have different tastes and it's not my
language anyway, so what am I complaining about?
Fabio
Fabio Vitali Tiger got to hunt, bird got to fly,
Dept of Computer Science Man got to sit and wonder "Why, why, why?'
Univ. of Bologna ITALY Tiger got to sleep, bird got to land,
e-mail: fabio@cs.unibo.it Man got to tell himself he understand.
Kurt Vonnegut
