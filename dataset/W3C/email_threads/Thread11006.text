On Mon, 30 Dec 1996 18:24:04 -0900 Eliot Kimber said:
So, what indicates the semantics of the link to the query? It isn't
the HTTP method. Is it the semantics of crossref ?
In the HyTime model, it's the semantics of addresses in general: that
any reference to a location address is a reference to whatever the
location address addresses (recursed until you either get only
non-location addresses, reach the "reflevel" limit, or have a
circular reference). This behavior of addresses is independent of
linking (in other words, the same address resolution behavior would
result from an ID reference that was not a "link" as we're defining
it here).
This sounds suspiciously as if it would be impossible to point at
a link (or perhaps I mean to point at *an address*) in order to talk
about it, without slipping past it and landing at what it's pointing
at. How on earth will I ever be able to write the definitive
cultural critique of hypertext with extensive discussions of the
linking practices of Kimber, Durand, and Allen, if every time I point
at Eliot's links I get an Altavista query for basset hounds?
Surely there's a HyTime way around this problem?
-C. M. Sperberg-McQueen
So, what indicates the semantics of the link to the query? It isn't
the HTTP method. Is it the semantics of crossref ?
In the HyTime model, it's the semantics of addresses in general: that
any reference to a location address is a reference to whatever the
location address addresses (recursed until you either get only
non-location addresses, reach the "reflevel" limit, or have a
circular reference). This behavior of addresses is independent of
linking (in other words, the same address resolution behavior would
result from an ID reference that was not a "link" as we're defining
it here).
There is a "use/mention" problem inherent in indirect addressing. One way
around it in HyTime is to use the "reflevel" attribute to limit the depth
of recursion--once you've passed it, you just get the elements. At one
point we discussed adding a "locloc" (location address location) element
just for this purpose, but decided it wasn't necessary.
Cheers,
E.
W. Eliot Kimber (eliot@isogen.com)
Senior SGML Consulting Engineer, Highland Consulting
2200 North Lamar Street, Suite 230, Dallas, Texas 75202
"Rats in the morning, rats in the afternoon...if they don't go away, I'll be
re-educated soon..." --Austin Lounge Lizards, "1984 Blues"
HyTime considers links and locators to be seperate constructs. locators are
pass-through in that if you point at it, you are effectively pointing at
what it points at (ad infinitum). hyperlinks are normal SGML elements in
terms of pointing at them. If you point at a link you are pointing at the
element which defines that link. (whether the element "knows" it is the
definition of a link is another question....)
-derek
"that which is not slightly distorted lacks sensible appeal: from which it
follows
that irregularity - that is to say, the unexpected, surprise, and astonishment,
are an essential part and characteristic of beauty" - Charles Baudelaire
this is only *sometimes* true in HyTime, because clink linkend=chatper37
is a perfectly valid hytime link and locator in one (though, technically,
the term 'locator' is not used in HyTime -- only 'location address element').
again, mostly but not *quite* true: they are only pass-throughs (by which i
take you to mean indirect) if you don't say otherwise. if you set reflevel=1
you don't get indirection, just as is true for the analogous TEI construct.
As soon as you introduce a notion of indirection at all, it ends up
necessary to provide a way to bound it.
