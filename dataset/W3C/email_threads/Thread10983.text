We have two weeks left in our month of open discussion; I've been trying
to see what topics need to be (further) discussed, and which probably
don't need (further) discussion. I have arrived at a satisfyingly long
list of things I think we don't need to discuss, and a mildly alarming
list of things that haven't yet been discussed enough, or in some cases
at all.
I'm not going to post the first list, of things I think we don't need
to discuss, since that could backfire badly.
The topics I think we need to discuss before we close the voting
booth, so people can make up their minds intelligently, fall into
several classes: those relating to entities and their declarations,
those relating to element declarations, those relating to attribute
declarations, and a fourth group of general and miscellaneous issues.
I'll separate out the other three groups into distinct postings, for the
sake of mail archives with threading mechanisms.
Here's my list of general and miscellaneous issues raised by the various
specific proposals on the table, which I think the WG needs to address
before the ERB actually starts drafting. Clause numbers are attached,
for those who want to look at the voting booth to see how the proposals
now deal with these issues, or at 8879 to see what it says. I've also
added a few parenthetical comments; apologies to those who think I'm
flogging any dead horses.)
Participants may also wish to read the relevant proposals, if they
haven't already.
* Should XML use the markup-declaration syntax described by ISO 8879
clauses 10-11, or should XML define a specialized document type and let
its markup declarations use the document-instance syntax, as proposed by
MGML?
(Using the same syntax for declarations and instances cuts the size of
the grammar approximately in half. It also reflects a firm belief that
structured information belongs in SGML documents.)
* How should XML deal with the need for conditional inclusion of markup
declarations, if XML has no marked sections (10.4.1)?
(In instances, people seem happy to use elements to contain the
conditional text. If XML uses instance syntax for markup declarations,
such conditional-inclusion elements can be used for the purpose.)
* Should XML change the delimiter-in-context rules to require the STAGO
and ERO strings to be escaped whenever they are not to be recognized as
delimiters (9.6)?
(Some people have proposed this; certainly many user manuals I've seen
prescribe this behavior for users, rather than explaining the d-i-c
rules.)
* Should XML use MSOCHAR, MSSCHAR, and MSICHAR strings (9.7)?
(If MSSCHAR is '\', then \  and \&amp; are escaped in the expected way.
Unlike most Unix-style backslash escapes, however, the MSSCHAR is not
removed from the data stream; this means \ characters in existing docs
are safe.)
* Should XML require system and public identifiers to be FORMAL (13.5)?
* Should XML restrict comment declarations to a single comment (10.3)?
(Motivation: the hash made of SGML comments by some current HTML
browsers; simplifying the syntax might make it harder to get wrong.)
-C. M. Sperberg-McQueen
No.
I see no reason to try to define a new notation for declarations at this
time. It is a *non trivial* exercise to define a document type or
architecture for declarations, partly because the additional expressive
power of SGML gives you a lot more options. Having spent quite a few hours
putting together a DTD for DTDs that attempts to provide some useful
features beyond simply reflecting the productions, I know that such an
effort will either be unsatisfactory or take a long time (or both): it will
either be a brain-dead transliteration of the productions (not useful, in
my opinion) or it will be a time-consuming document type
design-by-committee effort of the sort many of us have been involved with
(and about which Eve has written an excellent book).
I say no. The declaration syntax is understood and easy to teach. It's not
hard to parse and it's compact.
While I certainly agree with the last sentence, in principle, I think the
counter arguments are compelling in this case. If such a thing is to be
developed as a standard, it needs to be developed with careful
consideration of the implications the design will have. It's not something
we can do quickly.
This seems like a good idea. It is easy to use short references to define
escape sequences for these, e.g.: "~ ", "~&amp;", "~~" where "~" is the
"escape" character (but is really just the first character of a
two-character short reference delimiter). I think a shortref approach is
better than MSO, for the reasons given below. This doesn't break SGML,
only requires quoting where it might not otherwise be required (but where
people usually do it anyway).
No--escaping is easier and safer using shortrefs.
I think the better questions are:
A. Should public identifiers be FORMAL?
B. Should XML support formal system identifiers? Formal system identifiers
are defined in the forthcoming TC to the HyTime standard and would be
very useful in a Web context because of the additional information they
can provide for storage managers.
I see no reason not to use FORMAL public identifiers. An informal public
identifier is no better than a system identifier really. Formal public
identifiers are functionally equivalent to URNs (to the degree I correctly
understand URNs). In fact, URNs and FPIs could be identical were it not for
an unfortunate syntax clash (both use "//" in different and unreconcilable
ways).
Note that the formal system identifier spec includes "URL" as one of the
starter set of storage managers, so it already anticipates interoperation
with the Web.
Or should we pretend that comment open is " !--" and comment close is "-- "?
While SGML *should* have different delimiter roles for comment open and
comment close (and probably will after the revision), it doesn't today and
this is an area where anticipating the standard would make XML documents
incompatible with existing SGML processors. Thus, we *can't* do something
like make "/*" COMO and "*/" COMC, because those delimiter roles don't
exist in SGML.
Cheers,
E.
W. Eliot Kimber (kimber@passage.com)
Senior SGML Consultant and HyTime Specialist
Passage Systems, Inc., (512)339-1400
10596 N. Tantau Ave., Cupertino, CA 95014-3535 (408) 366-0300, (408)
"If I never had existed, would you still remember me?..."
--Austin Lounge Lizards, "1984 Blues"
I can't see any difference between defining ~ as a MSSCHAR and defining it
as an Escape character (given that we have no short references to decode the
strings shown above, and will therefore rely on application conventions to
define the escape mechanism). Incidentally, I prefer the tilde to any other
escape character.
Yes please
Martin Bryan, The SGML Centre, Churchdown, Glos. GL3 2PU, UK
I believe in the second sentence, but the first one sounds like a red herring to
me, because:
1. The implementation code isn't cut in half, or anything like it. You still
have to process the semantics of the declarations.
2. The grammar may be reduced, but now you have to define and document a DTD.
3. Most users, and many experts, have trouble distinguishing tags, from
elements, from element types. If we use elements to define elements, the
confusion will only get worse.
Charles F. Goldfarb * Information Management Consulting * +1(408)867-5553
13075 Paramount Drive * Saratoga CA 95070 * USA
International Standards Editor * ISO 8879 SGML * ISO/IEC 10744 HyTime
Prentice-Hall Series Editor * CFG Series on Open Information Management
herring to
Ya, but Michael was not commenting on the implementations, only the grammar.
Yes, exactly. That is what I would like to be able to do.
SoftQuad developed an internal tool -- DTDocumenter -- to read
a DTD and transform into a SGML instance with its own DTD
just so that we could document a DTD. If the DTD were in
standard SGML instance syntax, then we could use Panorama
to display the DTD with whatever stylesheet we wanted to
document it. A DTD for DTDs could also include a formal
way to include a human readable description of the element
and attribute declarations. That would be a good thing!
The fact that so many users have trouble distinguishing these
things should be telling us that these distinctions are
not very important to them. Honestly, I don't see why they
should be important to users. Users want something that
they can understand and SGML is not something that can
be easily understood.
Before I get flamed for saying that, please allow me to elaborate
on my position. I am not an expert on SGML by any stretch
of the imagination. A brief conversation with any of the
real experts in the crowd who know me will confirm that.
I have been lurking on this list until now because I did
not want to slow you all down with ill-informed questions.
But...
I want to use something that I can understand. To some extent,
SGML is that. That is, to the extent that I need to understand
it, SGML is understandable. My failure to understand starts
when I can't do something that I think should be obvious or when
I get a result that I don't expect. (RS/RE rules are a perfect
example of that.)
Now, back to DTDs. I want someting that I can work with in
one tool. I want to be able to read and write a DTD. I want
to be able to declare an element type and its attributes,
and I want to be able to explain the whys and wherefores
right there in the DTD in such a way that a downstream
processor can produce reasonable documentation. I also
want to be able to _add_ attributes to an element type.
(That is, I want to be able to have multiple attribute
declarations that affect the same element type. And no ,
I don't think that parameter entities are good enough.)
Thanks for taking the time to consider what I have to say.
Please carry on. This is the most valuable series of
discussions that I have ever encountered in this community.
Murray Maloneymurray@sq.com
Technical Director http://www.softquad.com
SoftQuad Inc.
Toronto, Ontario, Canada M4R 1K8
The difference is that MSO and MSI remain as data characters, whereas the
shortrefs simply become the characters, which can be declared as CDATA
entities:
!SHORTREF XMLmap
"~ " srLT
"~&amp;" srAMP
"~~" srESC
"~[" srLSBRK
"~]" srRSBRK
Note that this markup is used to process XML as SGML--it isn't need by XML
itself, which simply defines the escape sequences as escape sequences.
Cheers,
E.
W. Eliot Kimber (kimber@passage.com)
Senior SGML Consultant and HyTime Specialist
Passage Systems, Inc., (512)339-1400
10596 N. Tantau Ave., Cupertino, CA 95014-3535 (408) 366-0300, (408)
"If I never had existed, would you still remember me?..."
--Austin Lounge Lizards, "1984 Blues"
I think we're all pretty much in aggreement that using SGML markup for
representing a document type is probably a good thing. What Charles and I
are saying is that XML is not the venue to do it because the design must be
done with a degree of care that would make the effort take longer than we
have to do the XML design.
There are a lot of different ways such a thing could be done and a lot of
subtle implications of doing it. It's not even a certainty that it is a
good thing in the long run.
I certainly apply the principle of representing non-SGML things with SGML
(i.e., my DTD for VRML), but it's easy to it unilaterally and for your own
purposes, as everyone whose already done their own DTD for DTDs has
demonstrated. Doing something that will satisfy the requirements and
constraints of a user base as large and varied as the SGML/XML/HTML
community is a very different matter.
Cheers,
E.
W. Eliot Kimber (kimber@passage.com)
Senior SGML Consultant and HyTime Specialist
Passage Systems, Inc., (512)339-1400
10596 N. Tantau Ave., Cupertino, CA 95014-3535 (408) 366-0300, (408)
"If I never had existed, would you still remember me?..."
--Austin Lounge Lizards, "1984 Blues"
