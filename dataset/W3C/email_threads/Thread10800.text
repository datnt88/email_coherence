I find the introduction of "optional features" in XML most unfortunate
Me too - I've been feeling bad ever since the vote. Maybe the WG can help
us out here. Where we got to on the ERB was:
1. external text entities are a basic necessity for authoring (I want to
validate my 700-page book without having to have it in a file) and
they're not even that hard to do [once you've limited the system
identifier repertoire, which we've done]. Arguably, without them,
XML is a delivery-only toy language
2. external text entities are big-time bad news for a browser -
particularly since browsers are moving in the direction of exposing
the document structure to client-side logic. And in fact the
jam-it-in-the-parse-tree semantic of text entities is not really
the kind of transclusion you want in a browser.
So what we REALLY WANT is to say "Here is a feature that is intended
for authoring and document management but look, boyo, don't you go
asking client programs to do this!" I had proposed a side-step by
saying you could only use osfile system identifiers for text
entities, but this kind of smells like a kludge.
Bob Streich had earlier spoken about server-mode vs. client-mode
XML; is this anything more than an option by another name?
I think I speak for the ERB when I say that we would welcome a way to
throw out the optional bathwater without losing the text entity baby,
and cheerfully reconsider the vote of the 23rd.
Cheers, Tim Bray
tbray@textuality.com http://www.textuality.com/ +1-604-488-1167
I would like to point that at least one person on the ERB (me) passionately
believes that this viewpoint is totally misguided...
... it is certainly possible to build a fine authoring
environment without any use of external text entities.
James is correct; it is certainly possible to do this. But SGML provides
a built-in, standard, nonproprietary way to go about it. The way I sell
SGML in the corporate world is:
SGML gives you:
1. a way to model the structure of your documents, and
2. a way to control the authoring so they come out right, and
3. a way to modularize documents for re-use and management, and
4. ALL OF THIS IS STANDARDIZED AND NON-PROPRIETARY
It seems to me that if XML loses text entities, then #4 no longer applies
to #3.
I think you can get 3 and 4 without external text entities by using
transclusion via link semantics, which are going to be standardized in a
later phase of XML.
James
I would like to point that at least one person on the ERB (me) passionately
believes that this viewpoint is totally misguided...
... it is certainly possible to build a fine authoring
environment without any use of external text entities.
James is correct; it is certainly possible to do this. But SGML provides
a built-in, standard, nonproprietary way to go about it. The way I sell
SGML in the corporate world is:
SGML gives you:
1. a way to model the structure of your documents, and
2. a way to control the authoring so they come out right, and
3. a way to modularize documents for re-use and management, and
4. ALL OF THIS IS STANDARDIZED AND NON-PROPRIETARY
It seems to me that if XML loses text entities, then #4 no longer applies
to #3.
Agreed. When explaining external text entities to new SGML users,
they invariably leap to the conclusion these are hypertext links.
They are usually disappointed when I explain these are not. They
then ask, why the extra features. We dropped these from the IADS
and IDE/AS designs for precisely this reason: we were getting
this functionality from the hyperlinks. Wouldn't an independent
link with a semantic of get do this job?
len bullard
