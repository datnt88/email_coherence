Largely I agree with the points made in the text below. My
view is that the DOM being developed by the w3c has greater
potential that just be some DOM that comes with proprietary
software. Maybe my comments enlighted this point further. I
know that my point of view is not really practical, but more
pragmatic.
"Denis Anson" wrote
I have been a long time proponent of MSAA because I believe
it is an
advantage, for the person with a disability, and for the
person who is
producing assistive technology, to have a common AT
interface that crosses
all programs rather than "special casing" each possible
environment.
Comment
I agree!
Historically, each time a new version of Word or Word
Perfect was released,
it broke existing alternative access technologies. There
would be a mad
scramble by the developers of alternative access products to
reverse
engineer the new input strategy, and release a new version
of the product
that would communicate with, or work around, the new
techniques of accessing
the keyboard and screen. As a result, people with disabilities
were
*always* late adopters of new versions of productivity
software. (For
years, Words+ recommended that their customers use Word
Perfect 4.2, even
after it was no longer available!)
Comment
Nothing changed really (so far)
MSAA promises to be a standard interface that all software
can use to
communicate with all assistive technology. (Note that I say
promises, not
that it is.) If it is not rich enough to provide necessary
information, it
can be extended, so that AT can also use new calls to gain a
richer
environment, without breaking older technology.
Comment:
I think that DOM holds the same promises. There is one
problem though. MSAA in my opinion is a repair strategy,
where DOM is potentially a real solution. What we need is a
globally standard way to build a DOM. Then from the DOM
we can start rendering for whatever user profile. What we do
not need is visual rendering with the side effect that it gives
you also a DOM-view. The ideal DOM is still far away.
Although I am not a developer, I strongly feel that special
casing is a poor
design strategy for AT. It guarantees that AT will always be
behind the
curve, and that people with disabilities will not have access to
new
versions of software that is produced.
Exposing the DOM is a good idea for a number of reasons,
but requiring
alternative access devices to treat HTML differently than any
other product
is, IMHO, inviting a new software ghetto.
Comment:
I feel that the term "exposing DOM" is in a sense a
misleading. What we want is to use or have a DOM. Exposing
DOM is not the action we are looking for. In this way many
exposures of DOM will lead to the same pitfall. Every
exposure will need developers attention ...
Also the term "alternative access" should in my opinion read
as just "access". Why should access to DOM have a "normal
way" and an "alternative way"?
Denis Anson, MS, OTR
Assistant Professor
Computer Access Specialist
College Misericordia
301 Lake Street
Dallas, PA 18612
RESNA
The International Organization of Assistive Technology
Professionals
Member since 1989
[mailto:w3c-wai-ua-request@w3.org]On
Behalf Of Hans Riesebos
Henter-Joyce (A)

I think that DOM holds the same promises. There is one
problem though. MSAA in my opinion is a repair strategy,
where DOM is potentially a real solution. What we need is a
globally standard way to build a DOM. Then from the DOM
we can start rendering for whatever user profile. What we do
not need is visual rendering with the side effect that it gives
you also a DOM-view. The ideal DOM is still far away.
Remember what DOM means - Document Object Model. It's not an assistive
technology interface, it's not even a user interface object model. It's an
object model for documents - HTML documents to be specific.
Text object model developers find DOM inadequate to represent higher end
markup and layout.
I caution the group not to put too much stock into DOM. While I feel it's
very useful to improve access to the web content - that is one small piece
of a users experience with a computer.
If we had a DOM which encompassed the scope of web documents (in which I
am including multimedia 'documents' and the range of other beasties that
are out there on the horizon) then the DOM would indeed be a very powerful
approach. It is also completely Open and platform-independent, which means
it is possible to develop applications which use it in standardised ways.
However, DOM level 1 is a long way from that promise. It seems that the
group needs to decide whether it wants to support DOM 1 and thereby
signpost its expectation that DOM2 and DOM3 and DOM4 and so on will
represent the best way forward, or whether the group would rather leave
the question of what interface should be used to User Agent developers.
Charles McCathieNevile
Remember what DOM means - Document Object Model. It's not an assistive
technology interface, it's not even a user interface object model. It's an
object model for documents - HTML documents to be specific.
Text object model developers find DOM inadequate to represent higher end
markup and layout.
I caution the group not to put too much stock into DOM. While I feel it's
very useful to improve access to the web content - that is one small piece
of a users experience with a computer.
--Charles McCathieNevile mailto:charles@w3.org
W3C Web Accessibility Initiative http://www.w3.org/WAI
MIT/LCS - 545 Technology sq., Cambridge MA, 02139, USA
Chuck,
I fail to see why we can't represent a user interface using a DOM by
extending the current user interface. We keep extending the DOM to include
events, range models, iterators, and so on. It is becoming more and more
like an interface that could also be used to represent a GUI. Why not
create a DOM subclass extension for cross platform UIs that addresses the
issues you have wrt word processors and so on. Incidentally for browser
menus and dialogs, you would need all the word features you suggest.
Rich
Rich Schwerdtfeger
Lead Architect, IBM Special Needs Systems
EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm
"Two roads diverged in a wood, and I -
I took the one less traveled by, and that has made all the difference.",
Frost
Charles Oppermann chuckop@microsoft.com on 02/08/99 06:08:22 PM
Subject: RE: Discussion of DOM with Glen Gorden of Henter-Joyce (A) (A)

I think that DOM holds the same promises. There is one
problem though. MSAA in my opinion is a repair strategy,
where DOM is potentially a real solution. What we need is a
globally standard way to build a DOM. Then from the DOM
we can start rendering for whatever user profile. What we do
not need is visual rendering with the side effect that it gives
you also a DOM-view. The ideal DOM is still far away.
Remember what DOM means - Document Object Model. It's not an assistive
technology interface, it's not even a user interface object model. It's an
object model for documents - HTML documents to be specific.
Text object model developers find DOM inadequate to represent higher end
markup and layout.
I caution the group not to put too much stock into DOM. While I feel it's
very useful to improve access to the web content - that is one small piece
of a users experience with a computer.
I'm not sure that the goal of cross-platform AT devices is even a reasonable
one. For a DOM-like interface, or even MSAA, we are talking about code that
runs on the host platform. It would theoretically be possible to write AT
software in Java, and have it run cross platform, but at the current state
of the art, even that is fairly platform specific. This means, in practice,
that AT must be developed independently for each platform.
However, the concepts behind a generic AT interface are good ones. What I
have problems with is the idea that HTML documents would use one generic
interface, word processors another, and spreadsheets still another. This is
one step better than having each program use a completely different
interface, but not as good as the concept of a broad interface for AT that
would communicate with equal facility to browsers, word processors,
spreadsheets, and databases.
I agree with Chuck that asking Unix boxes to support MSAA would be fatuous.
On the other hand, the types of calls that are found necessary on any given
platform would probably be useful on another, so the API developed for MSAA,
for example, might well be a guideline for developing a UnixAA, or MacAA.
Something like 8 years ago, Randy Marsden of Madenta Communications proposed
an AT interface very similar in concept to MSAA for the Apple platform.
While others in the industry thought it would be a good idea, no one wanted
to invest the energy to make it happen. Microsoft has, at least in part,
made it happen in Windows. That work should be extensible to other
platforms, and make building AT more a user interface issue than a reverse
engineering of each application, be it browser or video game.
Denis Anson, MS, OTR
Assistant Professor
Computer Access Specialist
College Misericordia
301 Lake Street
Dallas, PA 18612
RESNA
The International Organization of Assistive Technology Professionals
Member since 1989
Behalf Of Charles McCathieNevile
If we had a DOM which encompassed the scope of web documents (in which I
am including multimedia 'documents' and the range of other beasties that
are out there on the horizon) then the DOM would indeed be a very powerful
approach. It is also completely Open and platform-independent, which means
it is possible to develop applications which use it in standardised ways.
However, DOM level 1 is a long way from that promise. It seems that the
group needs to decide whether it wants to support DOM 1 and thereby
signpost its expectation that DOM2 and DOM3 and DOM4 and so on will
represent the best way forward, or whether the group would rather leave
the question of what interface should be used to User Agent developers.
Charles McCathieNevile
Remember what DOM means - Document Object Model. It's not an assistive
technology interface, it's not even a user interface object model. It's
an
object model for documents - HTML documents to be specific.
Text object model developers find DOM inadequate to represent higher end
markup and layout.
I caution the group not to put too much stock into DOM. While I feel it's
very useful to improve access to the web content - that is one small piece
of a users experience with a computer.
--Charles McCathieNevile mailto:charles@w3.org
W3C Web Accessibility Initiative http://www.w3.org/WAI
MIT/LCS - 545 Technology sq., Cambridge MA, 02139, USA
I am not sure that I would use MSAA as a cross-platform solution. I think
that this cross platform object model access should be closer structured to
what we have in Java whereby events are handled on more of an object by
object basis. I am not trying to make a political statement for which is
better. Having looked at earlier versions of MSAA, my concern is MSAA's
stronger dependency on offscreen model technology. Maybe this has changed
and MSAA has become more object oriented where we can connect directly to
document/application component objects.
Rich
Rich Schwerdtfeger
Lead Architect, IBM Special Needs Systems
EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm
"Two roads diverged in a wood, and I -
I took the one less traveled by, and that has made all the difference.",
Frost
"Denis Anson" danson@miseri.edu on 02/09/99 07:35:36 AM
Subject: RE: Discussion of DOM with Glen Gorden of Henter-Joyce (A) (A)
I'm not sure that the goal of cross-platform AT devices is even a
reasonable
one. For a DOM-like interface, or even MSAA, we are talking about code
that
runs on the host platform. It would theoretically be possible to write AT
software in Java, and have it run cross platform, but at the current state
of the art, even that is fairly platform specific. This means, in
practice,
that AT must be developed independently for each platform.
However, the concepts behind a generic AT interface are good ones. What I
have problems with is the idea that HTML documents would use one generic
interface, word processors another, and spreadsheets still another. This
is
one step better than having each program use a completely different
interface, but not as good as the concept of a broad interface for AT that
would communicate with equal facility to browsers, word processors,
spreadsheets, and databases.
I agree with Chuck that asking Unix boxes to support MSAA would be fatuous.
On the other hand, the types of calls that are found necessary on any given
platform would probably be useful on another, so the API developed for
MSAA,
for example, might well be a guideline for developing a UnixAA, or MacAA.
Something like 8 years ago, Randy Marsden of Madenta Communications
proposed
an AT interface very similar in concept to MSAA for the Apple platform.
While others in the industry thought it would be a good idea, no one wanted
to invest the energy to make it happen. Microsoft has, at least in part,
made it happen in Windows. That work should be extensible to other
platforms, and make building AT more a user interface issue than a reverse
engineering of each application, be it browser or video game.
Denis Anson, MS, OTR
Assistant Professor
Computer Access Specialist
College Misericordia
301 Lake Street
Dallas, PA 18612
RESNA
The International Organization of Assistive Technology Professionals
Member since 1989
Behalf Of Charles McCathieNevile
If we had a DOM which encompassed the scope of web documents (in which I
am including multimedia 'documents' and the range of other beasties that
are out there on the horizon) then the DOM would indeed be a very powerful
approach. It is also completely Open and platform-independent, which means
it is possible to develop applications which use it in standardised ways.
However, DOM level 1 is a long way from that promise. It seems that the
group needs to decide whether it wants to support DOM 1 and thereby
signpost its expectation that DOM2 and DOM3 and DOM4 and so on will
represent the best way forward, or whether the group would rather leave
the question of what interface should be used to User Agent developers.
Charles McCathieNevile
Remember what DOM means - Document Object Model. It's not an assistive
technology interface, it's not even a user interface object model. It's
an
object model for documents - HTML documents to be specific.
Text object model developers find DOM inadequate to represent higher end
markup and layout.
I caution the group not to put too much stock into DOM. While I feel
it's
very useful to improve access to the web content - that is one small
piece
of a users experience with a computer.
--Charles McCathieNevile mailto:charles@w3.org
W3C Web Accessibility Initiative http://www.w3.org/WAI
MIT/LCS - 545 Technology sq., Cambridge MA, 02139, USA
Hi:
Since my name seems to have become somewhat famous as the subject of
so many messages in the past few days, I decided I should probably
clarify my original answers to John and prove that I can communicate
in slightly more than monosyllabic words.
The preference I express for using a DOM rather than a more generic
approach like MSAA stems entirely from the fact that a DOM inherently
offers a richer array of information. This clearly is a double-edged
sword since using a DOM requires additional coding to get at this
richer information set. However, if the assistive technology tool has
a scripting language which allows for accessing this information, then
the efforts involved to incorporate it is greatly reduced and can
often be done by members of the user community who embrace that tool.
I am not advocating that MSAA and similar approaches be abandoned.
Rather, I am saying that approaches to presenting information in
uniform manner be based on DOMs. (This, as I understand it, is
largely the approach MSAA has taken in supporting IE4.) If the
accessibility aid wishes to go the extra mile and take advantage of
the richer information set provided by a DOM, it should be encouraged
to do so. In the case of JFW, we have chosen to use the IE4 DOM in an
effort to more accurately predict the prompts which are
associated with input fields on a form. Without access to the
the underlying HTML tags, doing this is much more difficult and much
more error prone. Even if MSAA were to engage in prediction of field
prompts on HTML forms, who is to say that all accessibility aids will
be happy with the approach that MSAA used. By making DOM information
available, there exists the chance that some ISVs will go the extra
mile and provide a more robust interface than that which is possible
using something like MSAA which can probably never be all things to
all applications.
--Glen
In response to RIch's comment
There is no statement that MSAA would be used as a cross plateform
solution. MSAA is ONE TECHNIQUE developers could use, currently only on
some microsoft windows operating systems, to provde access to information
about information being rendered to the user agent.
We would certainly include informaton about other accessibility APIs like
the Java accessibility tool kit for people developing Java based user
agents.
The key I believe is to state the prblem assistive technology has in
accessing user agent interface information and then use the techniques
document to describe the different methods that can be used to by user
agents and assistive technology to solve the problem. This allows
inovation in improving the interface.
Jon
Jon Gunderson, Ph.D., ATP
Coordinator of Assistive Communication and Information Technology
Division of Rehabilitation - Education Services
University of Illinois at Urbana/Champaign
1207 S. Oak Street
Champaign, IL 61820
Voice: 217-244-5870
E-mail: jongund@uiuc.edu
WWW:http://www.staff.uiuc.edu/~jongund

I fail to see why we can't represent a user interface using a DOM by
extending the current user interface.
I did not say it couldn't be done. All I said that is that the DOM is for
documents - the implication being "currently." I truly believe that the DOM
will expand and that HTML will continue to grow into the application space.
However, I'm not going to sign off on a requirement saying "Support all of
DOM" if that isn't a solution to folks.
Let's try to separate out the theoretical from the practical and get back on
track on solving the problems that people have today.
-Chuck
I agree that we should be concentrating on providing solutions. However,
I think it has to be said that some of the problems which require
solutions arose because the theoretical aspects had not been considered
early enough in the process, and people became obsessed with 'solving
today's problems' at the expense of careful planning.
The use of DOM is, in my view, such a case. If we expect the DOM to expand
its coverage rapidly, and HTML/XML to become an important component of
many applications, then planning for the use of DOM may provide great
benefit.
Although it is currently 'the extra mile', as Glen said, the choice of DOM
may provide a predictable interoperable interface, which would enable the
next x generations of assistive technology to keep pace with applications,
instead of forever lagging behind. DOM is not the only possible solution,
and there is an open issue about whether some of the problems which it may
help tackle are within the scope of this group. (Personally, I feel that
they are.) But it does appear to have great potential as an important part
of a good solution strategy for a number of problems.
I therefore feel that it is worth thinking very carefully about this
issue. On the other hand I am eagerly awaiting the new draft, as I think
there are several other important issues, some of which may have very
simple solutions, and which also need our attention.
Charles McCN
However, I'm not going to sign off on a requirement saying "Support all of
DOM" if that isn't a solution to folks.
Let's try to separate out the theoretical from the practical and get back on
track on solving the problems that people have today.
-Chuck
--Charles McCathieNevile mailto:charles@w3.org
W3C Web Accessibility Initiative http://www.w3.org/WAI
MIT/LCS - 545 Technology sq., Cambridge MA, 02139, USA
