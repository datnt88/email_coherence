In mainting compatibility with HTML 4.0 event listeners, the spec says:
"In order to achieve compatibility with HTML 4.0, implementors may view the
settings of attributes which represent event handlers as the creation and
registration of an EventListener on the Node. The value of useCapture
defaults to false. This EventListener behaves in the same manner as any
other EventListeners which may be registered on the EventTarget."
If the EventListener behaves in the same manner as any other EventListener,
then is the attribute which represents the event handler expected to point
to an object inmplementing the EventTarget interface (as opposed to a
function)?
ie, in HTML 4.0, I just put: BUTTON onclick="alert('foo')"
with the new DOM 2 spec, would it look something like this?
where 'myEventHandler' implements the event target interface? This isn't
backwards compatibility, and I just want to make sure that I understand the
spec correctly.
Thanks,
Sam Christiansen
Trilogy Software
My reading of this text, to use your example, is that:
buttonElt.setAttribute ( "onclick", "alert('foo')" );
can be implemented as (assuming that buttonElt instanceof EventTarget ==
true):
buttonElt.addEventListener ( "click", new Function ( "e",
"alert('foo')" ), false );
However, this seems problematic to me: if an implementation is free to
implement setAttribute in this manner, then would this support standard
attribute semantics; i.e., what would getAttribute() return after
setAttribute()?
Or does this text say "in addition to setting an attribute recognized to
represent an event handler, that implementors may/should/must (?) *also*
create and register an equivalent EventListener on the node"?
Regards,
Glenn Adams
says:
view the
and
any
EventListener,
point
isn't
understand the
I believe that's the intent. The attribute is an attribute; that's standard
DOM behavior. A specialized DOM which wants to interpret setting this
attribute as a request to bind a script to an event can do so as a side
effect.
Joe Kesselman / IBM Research
OK. So which of the "may/should/must" applies? It sounds to me like you
are saying "may", in which case no content author can depend on this
behavior, meaning it is rather useless to specify since the author would
have to explicitly check if such behavior were implemented. If the
answer is "must" then that's a different story.
Regards, Glenn
to
*also*
standard
side
