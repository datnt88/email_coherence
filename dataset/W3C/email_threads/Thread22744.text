At the beginning of every XML document there is a ?xml version="1.0" ?
tag. Is there a way to get this version number from within DOM? I know at
this time there is only one version number, but in the future there may be
more.
Jeff Yates
DOM Level 3 (in draft form) adds the "version" attribute to the
Document interface, as well as a few other interesting tidbits.
-Fred
Fred L. Drake, Jr. fdrake at acm.org
PythonLabs at Digital Creations
Jeff,
I would think that it would be an attribute of that
node. So
document.childNodes[index].getAttribute("version")
would do the trick, assuming a correct implementation.
-Dylan Schiemann
Do You Yahoo!?
Get email at your own domain with Yahoo! Mail.
A correct implementation does not model the ?xml version="1.0"? tag; it
is not a Processing Instruction (even though some DOM implementations have
modelled the XML declaration as a PI Node). Besides, a PI doesn't have
attributes.
This isn't available in DOM level 2 at all. DOM level 3 does give access
to the information given in the XML declaration through attributes of the
Document Interface:
Document.version
Document.encoding
Document.standalone
Martijn Pieters
Software Engineer mailto:mj@digicool.com
Digital Creations http://www.digicool.com/
Creators of Zope http://www.zope.org/
Again, we're talking about implementation instead of specification, but as
far as I know, the XMLDecl is not a child of any parent. The Document is
only supposed to have one child, right? The document element.
Xerces has an implementation-specific XMLDecl interface. I think the XMLDecl
object is just stored in the Document, and thier Document interface
extensions allow you to get at it. The XMLDecl interface provides for
accessing its version, encoding and standalone attributes.
Christopher Watson
Sr. Software Engineer
Creator, Lingo-DOM
Lightspan, Inc.
Jeff,
I would think that it would be an attribute of that
node. So
document.childNodes[index].getAttribute("version")
would do the trick, assuming a correct implementation.
-Dylan Schiemann
Do You Yahoo!?
Get email at your own domain with Yahoo! Mail.
There can be more than one child Node. There can be only 1 *Element* Node.
Document Nodes can also have Comment and ProcessingInstruction Nodes and
at most one DocumentType Node.
Martijn Pieters
Software Engineer mailto:mj@digicool.com
Digital Creations http://www.digicool.com/
Creators of Zope http://www.zope.org/
The Document is only supposed to have one child, right? The document
element.
The Document may also contain a DocumentType node, and
ProcessingInstructions, and Comments. See the table of legal children in
the DOM spec.
Joe Kesselman / IBM Research
Setting aside the fact that I can't seem to keep myself from responding to
list messages prior to RTFM (honestly, I knew that the Document can, along
with a single Element, have Comments, PIs, and a DocumentType -- I just
glazed over that stuff), the Level 2 DOM still doesn't provide for a
Document Declaration node. So if an implementation wanted the Document to
provide access to the XMLDecl version attribute, it would have to implement
an extension. Correct?
Christopher Watson
Sr. Software Engineer
Lightspan, Inc.
The Document is only supposed to have one child, right? The
document
element.
The Document may also contain a DocumentType node, and
ProcessingInstructions, and Comments. See the table of legal
children in
the DOM spec.
Joe Kesselman / IBM Research
This is correct. That's always the case for all non supported functionalities
of DOM Level 2, isn't it?
Philippe
I don't know if this has been replied to, have been way from email for a few days. never the less, here goes :)
when you open an xml file with var.open(...) it creates a #document node with at least two child nodes, the first one is the xml node that has is own actributes (one of wich is the version acttribute, sinse it has to be set) and the other is the root node (what ever it might be called). Has you can see the way to get the version is to get that attribute in the xml node has you would do with any other attribute.
Find the best deals on the web at AltaVista Shopping!
