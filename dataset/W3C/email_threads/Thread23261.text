It would be nice if the Node interface had a "hook" property -- that is,
a read/write property in which the user could store any value they like.
(I don't know what the IDL type is, but this would be equivalent to
Object in Java or void * in C/C++.)
As an example of why this is useful, consider the problem of
constructing a DOM tree based on external order information. That is,
the DOM construction code receives DOM nodes along with the information,
"This is the third child," "This is the fourteenth child," etc. To
perform this task, the code needs to know the order value associated
with each node in the tree.
With a hook property, the application could store order values with each
node and either build the tree in sorted order or sort after the tree is
complete. Without a hook property, the application must encapsulate each
node and add the order property -- more work than seems necessary.
Another use (inspired by recent discussions on xml-dev) would be storing
the current namespace scoping information. I am certain that many other
uses/abuses could be found as well.
-- Ronald Bourret
P.S. Please cc me on any replies, as I am not a member of this list.
Check the DOM Level 3 Core draft:
The intent is to address the "hook" property as well as memory management
associated with it and multi-threading environment.
Feedback is welcome.
The type Object exists in IDL.
As a side comment, the DOM Level 3 XPath gives you this information:
We didn't find any interest or enough use cases to add this Node into
the DOM Level 3 Core module. XPath was our only main one.
Philippe
That does exactly what I need. (My code wouldn't use the UserDataHandler
interface, but it's easy to imagine code that would.) My only objection
is the name "DOMKeyObject", which sounds like a key, not data.
"DOMDataObject" or "DOMUserDataObject" would be better.
Too bad. This would be useful for anyone traversing the tree and wanting
to discover what namespace declarations are in force at the time. Two
use cases are:
1) Figuring out if you need to add an xmlns attribute after moving a
node from one location to another. (I would prefer that DOM did this for
you, but in the absence of that, this node would be very useful. The
alternative is to traverse the path back to the root and figure it out
myself. Yech.)
2) Resolving QNames in attribute or element content. I'm not sure how
many languages do this, but at least some do.
Note that it would be most useful if, instead of having a set of
Namespace Nodes, I could simply call Node.getPrefix(uri) and
Node.getURI(prefix).
-- Ron
Good point.
The DOM will do that for you but not automatically. It is one of the purposes of the
normalizeDocument method:
This method works with the normalization features (also used in the Load and
Save module. One of them is "namespace-declarations" and is activated by default.
Calling normalizeDocument will add the appropriate xmlns declarations for you.
We're still working on that but you can take a look at lookupNamespaceURI
and lookupNamespacePrefix on the Node interface:
We are currently improving the namespace algorithms and default namespace handling.
see above.
Philippe
