I've been thinking along very similar lines. See
which has a mix of related ideas, some good, some bad, some wrong.
Let me pick up on one of them and chew on it: the idea that a literal
is a self-denoting entity. This is a very appealing idea, and it
works for strings, but I don't think it can be made to work (without
modification) for any other kinds of literal. In particular, one of
your examples is 'the number 12'. But numbers are denoted by
numerals, not numbers; numerals, not numbers, are the syntactic
labels that we use to label graph nodes. So I take it that the
intention in treating '12' as a "literal number" is in fact that the
*numeral* '12' is the literal, and that its interpretation is fixed
to be the number 12 (that is, the number whose prime factors are 2,2
and 3; the square root of 144; denoted variously by the numerals '12'
in decimal, '1100' in binary, and '14' in octal). But in none of
these cases is the numerical literal *identical* to its
interpretation.
Actually, I had a stronger notion, which was that conceptually, the
number (not a numeral representation) should be the "label" in a graph.
Ah, that is a nice idea. It has some odd consequences, though. Graphs
with number labels cannot be stored inside computers, send over
packet-switched networks, printed, etc... They have to be Platonic
graphs, not data structures. And why stop at numbers? ;-)
(Forgive an argument by analogy, but
We accept concepts like "the set { 1, 2, 3 }" which is
conceptually a set of numbers, not numerals)
So it really _is_ the number 1 labelling a node in the graph.
However, any concrete realisation of such an RDF graph must, of course,
use a representation (be it numeral or otherwise); this is true whether
it's an "RDF database" or an "RDF/XML serialisation". If it makes any
sense, I'd like to separate the two notions.
Hmm. That gives us an extra layer of representation, which I find
clunky. There is the lexicalisation which encodes the
graph-in-the-machine which represents the abstract graph which
describes the interpretation....
Talk is cheap: free, as in beer. As in Real Ale, not that Budweiser rubbish.
I am proud to tell you that here in Pensacola, not half a mile from
my house, is McGuires, the first micro-brewery in the US and still
the maker of the best Red, Irish Pale Ale and stout you will find
within 3000 miles.
Pat
IHMC(850)434 8903 home
40 South Alcaniz St.(850)202 4416 office
phayes@ai.uwf.edu
This sets my antenae twitching.
One of the problems with the earlier M&amp;S document's formal model was that (at
least in my interpretation of it) the use of platonic statements, platonic
resources etc led to all sorts of horrible confusion.
This is one of the reasons I felt the need for a model theory and why I
preferred to have it based on n-triples - because that was clearly a concete
syntax. I've bought the idea that the graph is also a concrete syntax, so using
that is fine.
I personally would be real nervous if we were losing the clarity of that
distinction between a concrete syntax and what it means. We'll be back to
graphs containing resources and questions about what exactly is a resource,
which so far, we have brilliantly managed not to need to answer.
Brian
Yes, I agree. Maybe I should have said 'elegant idea'.
Pat
IHMC(850)434 8903 home
40 South Alcaniz St.(850)202 4416 office
phayes@ai.uwf.edu
[jan wrote]
Actually, I had a stronger notion, which was that conceptually, the
number (not a numeral representation) should be the "label" in a graph.
Why indeed. The second half to my thinking is "what to do about it"...
However, any concrete realisation of such an RDF graph must, of course,
use a representation (be it numeral or otherwise); this is true whether
it's an "RDF database" or an "RDF/XML serialisation". If it makes any
sense, I'd like to separate the two notions.
_All_ RDF implementations must represent the graph somehow, yes, and
that usually means an extra layer of representation. I'm not convinced
that this distinction needs to be made apparent in a MT though.
In practice: literals are stored in a computer using some
representation, together with a description of the "type" of literal so
represented.
So that gives us the potential problem, of course, as to determining
which literal types (of a potentially open-ended collection) RDF
implementations should support. I'd say that, at a bare minimum, unicode
strings and langstrings ought to be understood. A nice next step might
be (and I'm not suggesting we adopt this in the WG) the datatypes of
XSD.
Then RDF implementations could offer "best-effort" support for
unrecognised literal types by recording the type indicator of the
literal (as a URI?) together with its lexical representation, and
offering a dumbed-down equality check.
Incoherently yours,
jan
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
(ECHOY GRUNTING) (EERIE WHISPERS) aren't subtitles great?
Forgive me answering this a week late (telecom italia problems last
week), but this isn't as dire as you might think.
The "platonic"/conceptual graphs are as distant from computer
realisations as, say, the relational model is from your RDBMS of choice.
You've _never_ inserted the number 12 into a relational table - except
conceptually*. But such a mental leap is trivial to make.
jan
* Instead, you've done something gritty with wave equations, I don't
doubt.
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
Usenet: The separation of content AND presentation - simultaneously.
