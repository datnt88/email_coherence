Is there available anywhere an open source example of using webdav to retrieve
files through a browser and seemlessly work with them using a client
application - word perfect or ms word. Then, be able to save these files with
same type of interface one would experience as if saving to local disk?
Here I want to repeat my question again.
Suppose I edit a WebDAV file with my application.
- Now I want to save it. In a "normal" application I have "save" and "save as".
- With a WebDAV file I guess I have "save local", "save on server", "save local as"
and "save on server as".
- I think "save local as" doesn't make that much sense and can be dropped.
- This leaves me with three choices. One should be default and be called save.
- So my idea is to have "save", "save WebDAV" and "save WebDAV as" which means
a simple "save" means saving local. This could be fine for people with a slow
server connection.
So do you think this sounds right for a user ?
Would you prefer other names or choices for saving ?
I know this isn't something the spec should say but nevertheless it would be nice
if users would have similar menu items for saving in their upcoming WebDAV empowered
applications.
BTW for versioning I have at the moment in a directory window the following
menu items and subitems:
- Version Do
- Checkin (Which does a VERSION-CONTROL, BASELINE-CONTROL or CHECKIN depending
on it's target)
- Uncheckout
- Checkout
- Update
- Version Report
- Version (For a resource or a configuration)
- History (For a resource or a configuration)
- Baseline Compare
Naturally most of these points also can be added to an editor menu. Also there
could be one versioning menu.
Cheers, Edgar
I'd suggest just using "save" and "save as" to mean "save local"
and "save local as" and have "checkin" mean "save to the server
(and create a new version if the server supports versioning)".
Cheers,
Geoff
Edgar wrote on 03/22/2004 04:54:46 PM:
and"save as".
dropped.
save.
means
following
there
I agree with Geoff where versioning is concerned, as users familliar
with versioning will know what that means. However, for applications
(users?) that aren't version aware I would prefer 'Publish (as)' because
most users will have a good semantic model for the meaning of 'publish',
indicating that you are making the resource available for others.
Elias
That makes sense ... in fact, an interoperable client could have the
following logic:
- if local storage is available, provide a "save" and "save as" operation.
- if the WebDAV server is available:
- if the resource is under version control, provide a "checkin"
operation
- otherwise; provide a "publish" operation
Note: we are defining client design issues, rather than protocol issues,
but since the mailing list has been rather quiet and there are a lot of
client implementors on this list, I think this is reasonably on-topic
(if anyone disagrees, please let me or the list know).
Cheers,
Geoff
Elias wrote on 03/25/2004 10:36:04 PM:
dropped.
following
there
