Anticipating an FAQ item (and probably extended debate) on the relationship
between SKOS and OWL, so I had a go at a draft on the subject. I'd like to
know what you think of this.
Al.
Q: What's the difference between SKOS and OWL?
A: OWL is the Web Ontology Language, now a recommendation from W3C. OWL
provides a powerful and expressive framework for adding well defined
semantics (meaning) to data on the web. Adding explicit meaning to data
allows machines to communicate with each other, turning the web into an
environment for effective machine to machine (M2M) interaction, as well as
for human to machine (H2M) and human to human (H2H) interaction. And
because it is grounded in well-understood and formally defined systems of
logic, we have the opportunity to reason over the data and discover new
facts.
But what happens when you give somebody (without a formal education in logic
and set theory) an ontology editor, and ask them to create an ontology? In
my own experience, the results can be varied. Most people grasp the basic
notions of 'classes' 'individuals' and 'properties' without much trouble.
However, one feature that I've seen misunderstood time and again is the
'sub-class' relationship, and the meaning of a class hierarchy.
Organising things into hierarchies is a very natural thing to do. It is
akin to putting things into boxes, and the boxes into bigger boxes, so you
have a measure of order to a number of things that is too large to hold in
the mind at any one time. Everybody who has a computer has a filesystem,
divided into folders and subfolders. But give a group of people the same
set of files, and it's very likely that they'll create completely different
directory structures for organising them. The point I'm making is,
hierarchies are natural, convenient and familiar, but different people can
mean different things by a hierarchical relationship between two concepts.
So often when you let someone loose on an ontology editor, they take one
look at the class tree displayed on the left side of the window and treat it
like a directory structure. But the sub-class relationship has a very
specific and formally defined meaning, which must be used appropriately if
there is to be any guarantee of doing sensible reasoning and inference
further down the line.
So there is a definite niche for a tool that is simpler to wield than OWL,
and won't break when confronted by the variations in peoples preference for
different styles of knowledge organisation.
That's where SKOS comes in. SKOS stands for Simple Knowledge Organisation
System. It allows you to define some concepts, and organise them into basic
and familiar structures, without having to be too strict about the implied
semantics of those structures. Of course SKOS is extensible, and any amount
of semantic precision can be added (or borrowed from other schemas like
OWL). And of course SKOS is designed for maximal interoperability, so there
are links between the SKOS property framework and the major vocabularies of
RDF RDFS and OWL. SKOS can be happily used alongside OWL, offering
alternative views over the same underlying network of resources.
The other major feature of SKOS is that it allows you to capture the link
between a concept and the vocabulary (terminology) that is commonly used to
refer to it. So every concept is expected to have a 'preferred label', and
may also be given any number of 'alternative labels'. This feature can be
used to turn any SKOS concept scheme or OWL ontology into a thesaurus.
Capturing this information adds a lot of value, facilitating H2M and H2H
interaction mediated by OWL ontologies or SKOS concept schemes.
So SKOS does not try to compete with OWL in any way, but is in fact
complementary to it. It provides a simple and flexible framework for
building knowledge organisation schemes. This means a lower entry barrier
for new users of the Semantic Web. And it provides a path for bringing into
the Semantic Web the large amounts of existing knowledge, captured in
'legacy' structures like thesauri, classification schemes, taxonomies and so
on, that are not mapped easily into an OWL ontology.
Alistair Miles
Research Associate
CCLRC - Rutherford Appleton Laboratory
Building R1 Room 1.60
Fermi Avenue
Chilton
Didcot
Oxfordshire OX11 0QX
United Kingdom
* Miles, AJ (Alistair) A.J.Miles@rl.ac.uk [2004-03-05 11:32-0000]
[snip,
for full msg]
This looks like a really useful start. I wonder if it could be taken in
two parts: (i) an characterisation of the differences between formal
ontology/rdf approeach and thesaurus broader-term/narrower-term notions,
particularly referencing library world, then (ii) introduce SKOS as a
formalisation of the latter and an exploratory basis for mapping between
the two...?
exciting to see this stuff coming together :)
Dan
Yes I think this is really good text below.
I like the themes of
- skos = lower entry barrier
- skos = allows us to present a thesaurus view onto knowledge data
But I'd dare to go so far as to say that arguably the notion of owl-ish
'things' and their subclasses doesn't apply so well to pretty abstract
concepts such as 'fear' or, putting it another way, non-object-oriented
things such as 'cycling'.
So for me the lower entry barrier isn't only thing - it's about offering
the flexibility to be *either* casual or precise about how we believe some
'things' to be subsumed by other 'things'. This in our attempts to organise
and represent knowledge - particularly knowledge that covers abstract
territory.
You may totally disagree!
BTW I agree with Dan re talking a bit about RDFS and OWL and subclassing
versus KOS community notions of broader/narrower etc.
Nikki
--On Friday, March 05, 2004 11:32:36 +0000 "Miles, AJ (Alistair) "
NJ Rogers, Technical Researcher
(Semantic Web Applications Developer)
Institute for Learning and Research Technology (ILRT)
