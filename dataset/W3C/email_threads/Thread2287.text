I see that the Monday internet draft still includes two-phase POSTS
and PUTS. I strongly object to this
a) on procedural grounds
b) on technical grounds.
Ad a:
a.1) The issues list says:
Two Phase methods:
JM Section 8.4 POST
Two-phase POST removed
Mogul has writeup of result of discussion?
Status: need writeup, WG review
and I clearly remember that we indeed conclude that two-phase methods
should not be in 1.1 at the end of the two-phase wars some months ago.
a.2) Also, the 02 draft says:
POST requests must obey the entity transmission requirements set
out in section 8.4.1 [which talks about two-phase].
While the 01/00 drafts said:
HTTP/1.1 allows for a two-phase process to occur in accepting and
processing a POST request. If the media type of the posted entity
is not "application/x-www-form-urlencoded" [5], an HTTP/1.1 client
must pause between sending [....]
This considerable change was not discussed.
Ad b:
b.1) Two-phase saves bandwidth sometimes, at the cost of speed
(round-trips) for each POST request, no matter how small. I have seen
no statistics that this tradeoff improves current conditions, while I
suspect that it does not in many cases. Two-phase thus adds complexity
without having established the need for this. If we have it, it
should at least be optional for small POST requests.
b.2) The new requirement that two-phase is also used for normal POSTS
of small forms means degradation of performance for many existing
forms applications when upgraded to 1.1. It may also decrease my
chance of making a successful POST transaction (with a busy search
engine) if the backbone is dropping a significant number of packets.
b.3) Finally, the MUST/SHOULD text about two-phase does not take
proxies, especially 1.0 proxies, into account.
If I am to agree with two-phase staying in, I would require all points
above to be convincingly addressed.
Koen.
This one almost completely got dropped on the floor; there were some
mail exchanges that Jeff got to me at the last minute, but not final
wording that had undergone wide review. Rather than leaving the
situation completely wrong (as was in the 01 draft), I made an attempt
to put something together out of the mail messages over last weekend,
but it was far from polished.
That section (entity transmission requirements) needs careful
redrafting before I consider that issue closed. Note it is marked
Slushy.
Please CAREFULLY read what is now there. It is closer to what needs
to be said, but not done. Ignore the first sentence of the section which is
completely bogus; I should have deleted it), and suggest better words.
I'll also rework it when I get a chance (section 8.4.1) myself if others
don't beat me to it. And the issues list does say it needs WG review,
which it is now getting.
- Jim
jg@w3.org:
A careful redrafting of 8.4.1 will only address one (problem b.3) of
my five problems.
The main theme of my message was: I want two-phase sends *to be
removed completely* from 1.1. I want http/1.0 style one-phase posts.
This means throwing out 8.4.1 completely.
I include again my objections to the inclusion of two-phase below.
Please add this issue to the agenda of the upcoming phone conference.
Koen.
--snip---
I see that the Monday internet draft still includes two-phase POSTS
and PUTS. I strongly object to this
a) on procedural grounds
b) on technical grounds.
Ad a:
a.1) The issues list says:
Two Phase methods:
JM Section 8.4 POST
Two-phase POST removed
Mogul has writeup of result of discussion?
Status: need writeup, WG review
and I clearly remember that we indeed conclude that two-phase methods
should not be in 1.1 at the end of the two-phase wars some months ago.
a.2) Also, the 02 draft says:
POST requests must obey the entity transmission requirements set
out in section 8.4.1 [which talks about two-phase].
While the 01/00 drafts said:
HTTP/1.1 allows for a two-phase process to occur in accepting and
processing a POST request. If the media type of the posted entity
is not "application/x-www-form-urlencoded" [5], an HTTP/1.1 client
must pause between sending [....]
This considerable change was not discussed.
Ad b:
b.1) Two-phase saves bandwidth sometimes, at the cost of speed
(round-trips) for each POST request, no matter how small. I have seen
no statistics that this tradeoff improves current conditions, while I
suspect that it does not in many cases. Two-phase thus adds complexity
without having established the need for this. If we have it, it
should at least be optional for small POST requests.
b.2) The new requirement that two-phase is also used for normal POSTS
of small forms means degradation of performance for many existing
forms applications when upgraded to 1.1. It may also decrease my
chance of making a successful POST transaction (with a busy search
engine) if the backbone is dropping a significant number of packets.
b.3) Finally, the MUST/SHOULD text about two-phase does not take
proxies, especially 1.0 proxies, into account.
If I am to agree with two-phase staying in, I would require all points
above to be convincingly addressed.
This is simply untrue. The two-phase mechanism does not come into play
until AFTER the first request encountered A FAILED CONNECTION WITH RESET.
Also untrue.
Again, not true. The section uses the term "client" exactly as defined
by the specification.
None of your points apply to the existing text.
...Roy T. Fielding
Department of Information &amp; Computer Science (fielding@ics.uci.edu)
Roy T. Fielding:
If this is the case, my problems with two-phase would mostly
disappear. If you are right, I misinterpreted (the context of?) the
following language in the spec:
If the client knows that the server is an HTTP/1.1 (or later) server,
because of the server protocol version returned with a previous request
on the same persistent connection [alternatively: within the past N
hours], it MUST wait for a response. If the client believes that the
server is a 1.0 or earlier server, it SHOULD continue transmitting
its request after waiting at least [5] seconds for a status response.
and I strongly suggest that this part is rewritten to make it more
clear when this MUST comes into play.
Koen.
From: koen@win.tue.nl[SMTP:koen@win.tue.nl]
Subject: Re: Two-phase sends
[omissions...]
What's in section 8.4.1, while still labeled "two phase" is quite
different than the original two phase -- the original was pessimistic,
and this one is optimistic.
See below -- the removal of performance penalties in all normal cases
RTFM. It does not say this. It says that IF THE CLIENT SEES THE
CONNECTION CLOSE WITHOUT ANY STATUS INDICATION that it has to go into
two phase mode. Before that, it can try the HTTP/1.0 style PUT or POST,
with the added requirment that it is obliged to monitor the connection
for errors and stop sending if if gets one. Hence, there will normally
be no performance penalty.
I think the response for b.1 covers this case as well.
Yes it does. Read the definitions of "client" and "server". A proxy is
both a client and a server; the rules for clients and servers in 8.4.1
apply unchanged to proxies in their role as client or server. E.g.: A
1.1 user agent talking to a 1.0 proxy won't use two phase, as 8.4.1 only
applies to 1.1 clients talking to a 1.1 server. Ditto for a 1.0 proxy
talking to a 1.1 server.
Well, I tried.
Paul
(I wish I'd seen this before sending my last message on this topic...)
From: koen@win.tue.nl[SMTP:koen@win.tue.nl]
Subject: Re: Two-phase sends
[ommissions...]
This occurs in the paragraph right after the one saying that clients
have to use two-phase if they get a closed connection with no status. It
is an elaboration on the requirements of two phase mode on clients. It
is followed by more elaboration for clients and servers.
If a section header "8.4.1.1 Two phase mode" were inserted before these
paragraphs, would that set the context more solidly?
Paul
Paul Leach:
Probably, but this is not what I would call a stylistically nice
solution.
Let's just say that I managed to mis-interpret 8.4.1 as requiring that
two-phase must always be used if the server is known to be 1.1. I'm
happy to leave it up to Jim to rewrite the section into something
which does not allow such misinterpretation.
Koen.
