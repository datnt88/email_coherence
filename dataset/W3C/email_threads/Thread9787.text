At the f2f one of the postponed issues that I wished to advocate reopening was:
In particular, given the amount of change we have made I think a small change to
rectify the bnode serialization problem should be considered.
However we were out of time, and so I have decided to raise this by e-mail.
This is primarily motivated for me by Jena development.
Within Jena we have repeated user requirement to enable round-tripping.
e.g. one of our summer students yesterday said words like: "we use N-triple as
our transport becuase bNodes are important."
Since we are not proposing N-triple as a standard, we do have some obligation to
make RDF/XML useable.
I propose that we should modify the RDF/XML syntax to permit bNode labels
"_:foo" wherever we currently permit URI refs.
This still leaves non-standard property names as non-serializable, but that is
much less of a problem in practice.
Jeremy
More detail:
Modify:
5.23 Production URI-reference
An attribute ?string-value? interpreted as a URI reference defined in Uniform
Resource Identifiers (URI) [URIS] BNF production URI-reference.
uses of URI-reference should have the name changed to resource-reference and
then
Production resource-reference
URI-reference|bNode-reference
Production URI-reference
as before
Production bNode-reference
An attribute ?string-value? matching "_: NCName ". (where NCName is the
production from XML Namespaces). The string value gives a bNode identifier with
file scope as for NTriple.
by using two productions (the current URI reference
If we go this route, I propose we use UUIDs to ensure against
accidental collisions between systems or sessions.
Patrick
No! That would make people think they're just some kind of globally
unique URI thing. The more inter-file collision between these, the
better, I think.
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
...You're visualising the _duck_ taped over my _mouth_..?
I don't believe we have made any changes in advance of implementation
experience.
And I hope we don't.
I'm against re-opening this issue, as I haven't seen any working
code and tests, let alone any that represent designs
I like.
Let's please finish this version so we can get on to issues
like this one.
Dan Connolly, W3C http://www.w3.org/People/Connolly/
I agree.
#g
Graham Klyne
Would that be extendable to allow nodeIDs on literal nodes, also, to
handle untidy literals?
Pat
IHMC(850)434 8903 home
40 South Alcaniz St.(850)202 4416 office
phayes@ai.uwf.edu
Seems so to me.
One could simply view untidy literal nodes as analogous to bnodes
with literal labels. Each denotes a (potentially) different resource
and the literal label provides a contextual name for that resource,
but since the literal label does not have globally constent meaning
(as does a URIref) the denotation is underspecified without that context.
As with a bnode, you know it denotes "something", but you don't
necessarily know exactly what that is, insofar as some global
name (URIref) is concerned.
So, _:foo is a bnode and _:bar"1234" is a literal node. Both are
"untidy" and the nodeID simply disappears in the graph representation,
leaving only the literal string in the case of the literal node.
_:foo - "", _:bar"1234" - "1234".
Eh?
Patrick
