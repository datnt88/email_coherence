Section 2.4 of the XML-lang draft has text that says that &amp; and
must be represented using the strings "&amp;amp;" and ""
(sic wrt missing sentence ending punctuation)
Section 4.2 discusses entity declarations in such a fashion that
it does not rule out the possibility of declarations such as:
I would think a user wishing to embed a " " character into this
XML document would be much better served by using &amp;lessthan;, but
per section 2.4, they *must* use  instead.
I know we talked in the WG about whether these predeclared entity
refs could be redeclared or not, but I can't find any such words
in the draft spec (and I can't find any reference to a final
decision on this point). What seems missing from the spec are
some words that either say you cannot redefine the five special
entities or words in 2.4 that say you can use different refs
to get  and &amp;.
Personally, I'd prefer to be able to redeclare the predeclared
entities, but I could live with not being able to do this is
that's the decision that's been made. Then we need to say
something like "the pre-declaration of those 5 entities effectively
occur before any of the markup declarations are processed so that
any attempted explicit declaration of them would be superceded
by the pre-declaration and would therefore have no effect."
What was the decision on this and am I right that the spec needs
clarification in this area?
Paul Grosso's question about the five predeclared character entities
suddenly brought into focus something that has been bothering me since
November but hadn't until that moment come to the front of
consciousness.
Back in November, we were just about to include nearly 200 predefined
character entities to bring XML into alignment with HTML 4.0 when
Anders Berglund pointed out that the entity names for Greek scientific
characters were hopelessly mixed up with the names for the other Greek
characters, and we cut back to the five that are needed to escape just
those characters that have uses in markup. We rationalized this by
saying that all the other characters could be referred to numerically
if necessary, and that in a Unicode context any scheme that conferred
special status on the couple of hundred characters that Europeans
happened to find especially useful was suspect anyway.
What I now realize is that the same logic applies to the remaining
five as well.
Assuming for a moment the most likely syntax for hex character
references, we will have no less than three different ways of
referring to the five syntactically meaningful characters in the
absence of any user definitions:
QUOTATION MARK  &amp;#34; &amp;#x22;
AMPERSAND &amp;amp; &amp;#38; &amp;#x26;
APOSTROPHE &amp;apos; &amp;#39; &amp;#x27;
LESS-THAN SIGN  &amp;#60; &amp;#x3c;
GREATER-THAN SIGN  &amp;#62; &amp;#x3e;
We don't need three different ways to do this. I propose that we
eliminate all problems relating to the predefined character entities
by simply not having any.
Here are the possible counterarguments that I can think of.
Objection 1:
People are used to using &amp;lt, &amp;gt, etc.
Response:
a. They are also used to using all the other ones predefined in HTML but
not predefined in XML.
b. They are used to using them without trailing semicolons under some
circumstances; we don't allow that.
Objection 2:
The names quot, amp, apos, lt, and gt are significantly shorter than
the corresponding numeric forms. Oops, no they're not. Forget that
one.
Objection 3:
The names quot, amp, apos, lt, and gt are significantly easier to
remember than the corresponding numeric forms.
Response:
Easier for people whose native language is other than English,
i.e., most of humanity? I don't think so.
In return for not predefining character entities we get the following
benefits:
1. Language neutrality.
2. Cleaner specification.
3. Zero incursion into the user's name space for character entities.
4. Elimination of nitty objections to the names apos and quot (which
we haven't talked about much but are out there).
5. Elimination of all other issues relating to predefined character
entities (such as the one that Paul raised).
Jon
For those who know HTML, or almost any SGML DTD, they are. Besides, it is a
false dichtomy: those more comfortable with numbers can use numbers.
Overrated. What's the Japanese for " !ELEMENT" and why did we choose not to
allow it? Why not redefine that to a number also? !23 gi (#43)+
I heard this argument for the reason why OS/2 formatted floppies would report
"SYSTEM ERROR: 32341" if they weren't bootable: if it isn't going to be a
meaningful error message for everyone, it shouldn't be meaningful for anyone.
I don't buy it.
A little, but not, in my opinion worth the cost.
Who wants to override  and ? I think that anyone who does so is
making a mistake, whether they are English speaking or not. It's like using
"IF" as a variable name in languages that allow it: no matter what your native
language you are just asking for confusions with the keyword IF and the
convention that "IF" means "conditional" no matter what your native language
is. Many programming languages invented by non-English speakers use the
conventional keywords -- they are magic strings -- like "car" and "cdr" in
Lisp. They were meaningful to a particular set of people at a particular time
and it doesn't make sense to change them now. Calling them numbers would not
have helped.
I'm not as tied to those names as to , &amp;amp; and to a lesser extent
For the usability cost for those familiar with HTML and other DTDs, I would
rather just solve the issues.
Paul Prescod
[Paul Prescod:]
The number of people who are familiar with *anything* now is
insignificant compared to the number of people who will be working
with these languages five years from now.
Apples and oranges. " !ELEMENT" occurs n times per DTD; &amp;amp; occurs
m times per instance. Remember that XML is designed primarily for
delivery; the typical delivery scenario is one in which there is no
DTD at all.
Jon
If current trends continue, the majority of them will be English speakers,
though not necessarily native English speakers. That isn't an argument
for language bigotry, but for suggesting that it *may* still be more intuitive
to most page authors five years from now than (seemingly random) numbers.
Anyhow, five years from now is a LONG TIME. What do we know about five years
from now: do they still edit XML text by hand? Do they still use a few,
standard DTDs, written in English? Do people write their own DTDs in their own
languages but continue to use the  and  conventions because they are
so universal? Did Unicode actually take off? Are programmers the only people
who see "raw" XML code?
Okay then, what do
?XML ? "version" CDATA DOCTYPE RMD
mean if I'm not an English speaker? Why are these funny double-tick
mark ("") characters special? How do I know that they start and end a string?
Once again, I'm not advocating that anyone be forced to use , but that it
be made easy for the majority of us now, and potentially in 5 years, who are
either familiar with the convention or are English speakers (native or not).
Paul Prescod
If people should not be asked to pay ISO for an expensive standard, they
surely should not have to buy a Unicode book to look up these numbers --
this to whoever suggested "simply flipping to the page of the Unicode
book" to decipher the number.
[Sam Hunting:]
Whom are you quoting? I can't recall anyone having made that
statement.
Jon
