Setting the nodeValue property of the Node interface may cause a
DOMException with a code of NO_MODIFICATION_ALLOWED_ERROR. The spec
says that this may occur "when the node is readonly". There are simliar
exceptions raised by other properties and methods.
I can't find a discussion in the spec that explains what it means for a
node to be readonly or where one might encounter such a node. Could
someone please clarify? In particular, will JavaScript programmers
manipulating HTML documents within a web browser ever encounter readonly
nodes?
Thanks!
David Flanagan
See recent discussion in the archives of this mailing list: Descendents of
an Entity andEntityReference nodes and their descendents are read-only. So
are Notation nodes (The DOM's index and glossary pages are useful for this;
looking in the index found this fairly quickly)
This exception may also be thrown in some cases if the specific operation
is forbidden in this node -- eg, trying to set nodeValue for an Entity
node.
The DOM does not say there aren't any other ways that nodes can become
read-only. We may add APIs to control that in the future. And some DOM
implementations have implementation-specific mechanisms that may cause this
to happen.
Joe Kesselman / IBM Research
Won't trying to set nodeValue on an Element also throw?
Bob Foster
WebGain
this;
this
Yes, as documented. Basically, this exception is produced any time you
attempt to change an unchangable value which isn't defined as throwing
something else... as its name implies.
Joe Kesselman / IBM Research
Thanks for the clarification, Joe. I hadn't looked at the "readonly"
entry in the Glossary, and hadn't yet read about the readonly Entity,
EntityReference, and Notation nodes.
This tells me exactly what I need to know for my JavaScript book. This
exception may be thrown when you set any read-write property of any
node. Since it is universal, I'm not going to bother mentioning it in
my descriptions of every read-write property of every node..
David Flanagan
