From: Johnb@screen.subtitling.com [mailto:Johnb@screen.subtitling.com]
I need to go away and investigate how you get this to work, i.e. what the DTD / XSD would look like.
GA: No need to worry about DTD/XSD; just assume it is no problem. Better to focus on vocabulary and semantics.
One final wrinkle:
what would be the impact of:
I.e. an attempt to modify the style partway through the sequence.
What would the 3rd animation be limited to - just that inside the par ?
GA: There is no problem in principle to this (although you need to select some content with the last cue). We can use the additive and accumulate animation attributes to determine combinatorial effects and we can define implicit additive semantics as well. See http://www.w3.org/TR/SVG11/animate.html#AdditionAttributes as an example.
regards
John Birch
The views and opinions expressed are the author's own and do not necessarily
reflect the views and opinions of Screen Subtitling Systems Limited.
See below.
From: Johnb@screen.subtitling.com [mailto:Johnb@screen.subtitling.com]
Glenn,
Thanks for your reply - I perhaps did not make exactly clear what I intended would be the effect of the last animation.
what would be the impact of:
I.e. an attempt to modify the style partway through the sequence.
What would the 3rd animation be limited to - just that inside the par ?
GA: There is no problem in principle to this (although you need to select some content with the last cue). We can use the additive and accumulate animation attributes to determine combinatorial effects and we can define implicit additive semantics as well. See http://www.w3.org/TR/SVG11/animate.html#AdditionAttributes as an example.
The last cue does not select content because I want the animation to affect the content already selected by the previous two cues.
GA: this would still require selecting content. It would be awkward to have an implicit selection.
What I am thinking of is effects like Karaoke - where the style of displayed text is modified (emphasis, colour change, underlines etc)
Karaoke might be achieved by replacing the content with new content over successive intervals.....
GA: what you describe below does not require replacing content, it merely requires selecting subsequent words of the same content and applying color to each word.
So the following could be represented thus:
p { display : none; color: blue }
e.g.
0006 : 10:00:18:19,10:00:19:03, Scooby dooby doo, where are you?
0007 : 10:00:19:03,10:00:19:16, Scooby dooby doo, where are you?
0008 : 10:00:19:16,10:00:20:03, Scooby dooby doo, where are you?
0009 : 10:00:20:03,10:00:20:17, Scooby dooby doo, where are you?
0010 : 10:00:20:17,10:00:21:00, Scooby dooby doo, where are you?
0011 : 10:00:21:00,10:00:21:21, Scooby dooby doo, where are you?
This is a bit repetitive..... and makes it somewhat awkward to edit - tho' I guess a Karaoke aware editor could ameliorate the issue!
Incidentally at least one fan-subbing format (USF) includes a Karaoke markup.
- karaoke :
The karaoke element is very similar to the text element. The main differrence is that you can used the special tag k t="duration_in_ms"/ .
So in the example below the text "song" has a duration of 400 ms, "cool " has a duration of 300 ms...
The sum of all the duration must be equal to the subtitle duration. Here 100+200+300+400 = 1000 ms = 1s
GA: This kind of timing can easily be handled with:
The semantics of seq is such that the combined duration equals the seq duration. If you need something specified in parallel to seq, then you wrap the seq and the other thing in a par.
If temporal flow in TT-AF is possible - then it would be desirable to be able to move a region using a style animation - without 'knowing' the content of the region.
GA: We have included origin as an animatable style property in R505.
Consider: you have some text that you are flowing into a region under UA temporal flow - but halfway through the display of the text (and you have only specified an overall start and end point) - you need to move the display region because it is obscuring some important part of the picture.
GA: This would be no problem according to our current thinking. You use animate display to flow the text into the region, then you independently animate origin to move the region.
Eg. a Magic show - the subtitles are most of the time at the bottom of the screen - magician is talking about something - but halfway through you want to see his hands - so you need to move the subtitle region to the top of the screen - then later it can go back down.
An example of how style and text are not intrinsically linked. (or is it just that style should not include layout :-)
regards
John Birch
The views and opinions expressed are the author's own and do not necessarily
reflect the views and opinions of Screen Subtitling Systems Limited.
We could dispense with spans in the following example if we supported XPointer's range functionality (e.g., see [1]). We wouldn't want to restrict authors from marking up each span if they wish. Note that the two mechanisms are semantically equivalent, so this is just an optimization (i.e., to use range).
As for whitespace, you neglect that there is whitespace between the spans (e.g., newline), which would be normalized by formatter in conjunction with xml:space preservation or default processing semantics. In other words, it isn't required to include the whitespace in spans in this example.
[1] http://www.w3.org/TR/xptr-xpointer/#appA
From: Johnb@screen.subtitling.com [mailto:Johnb@screen.subtitling.com]
Glenn,
The last cue does not select content because I want the animation to affect the content already selected by the previous two cues.
GA: this would still require selecting content. It would be awkward to have an implicit selection.
[JB ] I don't have a problem with selecting the content - I can see how implicit slection could cause complications witrh inherited style etc.
in your example reproduced below....
p { display : none; color: blue }
Can we dispense with the spans, i.e. is there a way that the select can extract from a single element. BTW Your spans lost the whitespace - unless there is some assumed mechanism for re-inserting it?.
Scooby dooby doo where are you?
regards
John Birch
The views and opinions expressed are the author's own and do not necessarily
reflect the views and opinions of Screen Subtitling Systems Limited.
My experience is that relying upon whitespace in marked up content is problematic for a variety of reasons. It is much better to use xml:space=preserve and then subsequently perform whitespace normalization during formatting in combination with explicit markup or style properties to indicate forced line breaks.
The WG recently added "force line break" to the requirements for content vocabulary as well as adding break-after and break-before style properties that take a "line" value. The WG sees these as the prefered ways to indicate line break semantics.
G.
From: Johnb@screen.subtitling.com [mailto:Johnb@screen.subtitling.com]
[JB ] Yes - you're right - I did forget the newlines. I think for subtitling/captioning you'd want a fairly verbatim transcription of the content of the p element into the displayed region. So I'd expect:
To produce the output
Scooby dooby doo, where are you?
and
To produce the output
Scooby dooby doo,
where are you?
Which I assume it would :-)
We would have to extend XPointer to handle ranges that involve words or lines. At present, ranges demarcate their endpoints using character offsets or element offsets, e.g., from 2nd to 4th character, from before element E to after element F, etc.
Doing a line selector is problematic unless it is based strictly on forced line breaks in content, which would require the authoring system to predetermine line breaks and which would not work well if UA or device could change fonts or layout region. It might be possible to introduce a form of "pseudo" selector that makes selection based on units that are not determinable by lexical content. CSS provides such selectors.
G.
From: Johnb@screen.subtitling.com [mailto:Johnb@screen.subtitling.com]
I think I prefer the range selector functionality over a word selector - since it wouldn't stop there - you'd also want a line selector, a character selector...
Glenn,
Scooby dooby doo where are you?
we've got some work to do now
Scooby dooby doo, where are you?
we need some help from you now
come on Scooby doo, I see you
pretending we've got a slither
you're not fooling me, cause I can see
the way you shake and shiver
so presumably:
and so on
- would select lines from the paragraph.
GA: Your example doesn't select lines; rather it selects characters which may or may not be mapped to a line. Unless you are using manual line breaks, e.g., by using a br/ element or a style property equivalent, then selecting character runs in this fashion would not be guaranteed to map to a line since you may have font substitutions, different region sizes, etc.
Well it selects lines from the content - agreed that they may not map to a line on the display region. I was assuming when I wrote this that there was a layout property in style a2 that caused a line break. In some cases (e.g. snake mode) you would not want a line break. As regards font substitutions and different region sizes - I see the above example as the explicit model - i.e. all this is pre-calculated by the author - default overflow mode is hidden - so superfluous content is clipped from the region (not very desirable for subtitling / captioning!).
GA: OK, that (a style property) would work. However, since in this scenario the author is manually selecting line break points irrespective of the contingincies of user agent display, I can't see a great advantage to using range selection over explicit markup in content. I suppose your response would be that by not using markup to delineate lines, that you can apply multiple timesheets/stylesheets to the same content without changing the content such that these different timesheets/stylesheets could select different lines or units. Is this the crux of your argument for using external ranges rather than inline markup?
GA: What we would need is effectively a pseudo selector that operates on the area tree produced by the layout process. The layout of the above paragraph may produce one or more block areas, each containing one or more line areas, each containing one or more glyph areas.
Perhaps we can introduce a new axis extension that logically selects areas produced by formatting the referenced content, e.g.,
id('p1')/area::line(1) // select first line area
id('p1')/area::line(1)/glyph(1) // select first glyph area of first line area
I'm not really sure I understand how this could work - What in the above statements defines the style (which specifies the font, region size etc) that the selection mechanism uses to determine how long the line is? Especially in the case of style animation.....
GA: I was just providing an example of how by introducing a new axis into XPath expressions that we could select areas produced by formatting content as opposed to selecting the content itself. For example, if you wanted to time the appearance of line areas at authoring time but you don't know where line breaks will occur (because UA is performing line breaking), then by using the above mechanism you could associate timing and style properties with the areas produced by the formatting process. Since XPath only provides axes that select lexical content, we would need such an extension if we wanted to time or style the results of formatting.
I think the insertion of a 'temporal line break' has to be in the style domain - not in the content domain. If an individual selection defines too much content for a line (assuming that is the mode of the temporal line breaking model) - then 'normal' style attributes for overflow (marquee - scrolling etc) would be applicable.
GA: I don't believe we can force one particular model on all uses. Some authors may want to express in content domain for whatever reason, others may want to express in style domain. We should support the vocabulary to express both models.
I'm trying to get my head round this - don't want to stray too far from current concepts - but are we jumping through hoops to avoid modifying the style model here?
regards
John Birch
The views and opinions expressed are the author's own and do not necessarily
reflect the views and opinions of Screen Subtitling Systems Limited.
