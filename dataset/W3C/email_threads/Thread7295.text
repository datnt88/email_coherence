I am interested in the group's opinion on the Notify Request header
proposal in Section 6. Do you think this is a good idea, or a bad idea?
Server implementors -- how difficult would such a mechanism be to
implement?
6. Notify Request Header (proposal, for comment)
Whenever the NotifyRequest header is included in an HTTP request, the
server should send update information on the progress of a request.
Notify_Request = "NotifyRequest" ":"
It is common, in asynchronous environments, to provide a mechanism to
describe the status of a request as it is processed. As we provide for
more and more powerful methods, which have longer and longer processing
times, might we not want a similar feature for HTTP?
Thanks!
- Jim
Now that I've read the draft, I have to confess that I don't
understand what you intended to do with the Notify Request Header.
Is this a way of the client asking "please send me 100 Continue
messages as you're progressing?" Or did you intend for some other kind
of progress report to be sent back?
I see no value in a 'please notify me' request header. Clients will
ignore 100 Continue messages if they aren't going to process them
specially. And any client that is WILLING to process 100 Continue
messages would always be asking for them.
In general, I suggest that you avoid adding any features whose value
you're not sure of, unless it solves a well known and widespread
problem.
Larry
I suspect this is hair spliting but my understanding of "100 Continue"
is that it is meant to be sent while a request message is being
transmitted to indicate to the client that the request is being properly
received. Further, I thought that if the request has completed
transmission then all "100 Continue"s should be thrown out. I thought it
was introduced because of chunking.
What I am suggesting is that the server will send a continuous stream of
update messages, which will be formatted as responses, informing the
client of a request's progress. This would be used to create progress
bars and the like. If we wanted I am sure "100 Continue" could be tasked
to the purpose, we just need to make sure that each response contains
enough context so the client can unambigously determine which request
the response is in reference to.
This sort of asynchronous notification solves a problem so fundamental
it has been built into just about every OS known to humanity.
Yaron
I'm not questioning the need for asynchronous progress
notification. I'm questioning the need for a request header to ask for
it.
A simpler approach would be to say that servers should always send
back progress indications for long-running requests with whatever
frequency they deem reasonable to implement, and that clients should
accept progress indications and ignore them if they want.
If 100 Continue isn't adequate for what you want (and I suppose it
isn't), propose a different response.
# This sort of asynchronous notification solves a problem so fundamental
# it has been built into just about every OS known to humanity.
While I know of lots of progress-reporting mechanisms, I don't know
any that are built into operating systems, and I thought that most
distributed systems wind up inventing their own. Many networking
protocols don't contain any such mechanisms even when they're needed.
What is the asynchronous notification mechanism built into any of:
Multics, MS DOS, Unix, Tenex, the Alto OS, MacOS, Windows?
I don't remember anything like this in ONC/SunRPC, Grapevine, XNS
Courier, SMTP, HTTP. FTP has a progress header, but its application is
limited. Unless you're thinking of something else?
Could you explain what you mean by 'built into just about every OS
known to humanity'?
Larry
1. The problem with automatically sending update information is that it
will break many clients. HTTP 1.1 clients do not handle unsolicited
responses very well. HTTP 1.0 clients would probably go insane. So we
need a way for a client to indicate that they can handle unsolicited
responses. Hence the header.
2. As for building into OS's, Sockets come to mine.
Yaron
Oh, so it's a versioning issue, not a client capability issue. That
makes sense. Status might be signalled by a
102 Processing
status code, probably with an entity body which contains the actual
status. This would signal the client that the server is still working
on the request and not to time out.
We could add a new request header which indicates a client's
willingness to accept such a status code, or else just bundle it in
with HTTP/1.2
GET uri HTTP/1.2
would be the signal that '102 processing' responses are acceptable.
Right?
Larry
Is there a HTTP 1.2 group? I thought the HTTP group's charter ran out
with 1.1.
Yaron
# Is there a HTTP 1.2 group? I thought the HTTP group's charter ran out
# with 1.1.
The HTTP group's charter runs out when the HTTP group runs out of
things which it agrees are worth doing. At one point that looked like
it was going to be sooner (December) but now it looks like there are
more things worth doing.
But don't confuse IETF groups with work items: you don't need a
working group to make, or extend, an IETF standard. The requirement is
that you have a process that insures adequate review, and usually that
process is 'form a working group'.
Larry
Yes, that's one of the reasons why 1xx codes were re-introduced.
Unnecessary. Any HTTP/1.1 client must treat all unrecognized 1xx responses
as if they were 100 responses. Any client that doesn't is not using HTTP/1.1.
The only thing you have to remind people of is that they can't send or
forward any 1xx response to an HTTP/1.0 client.
.....Roy (and any implementer that screws-up on that part of the protocol
is going to get a severe thrashing from me, since it is the key
to status extensibility)
Sending those headers involves overhead, a lot of overhead on slower
links. We should have a means of indicating if we want a particular
response stream. I know, I know, its not a proper use of a header. I
agree and am open to suggestions. Where is the balance to be struck?
Yaron
From:Roy T. Fielding [SMTP:fielding@liege.ICS.UCI.EDU]
Sent:Monday, November 04, 1996 11:25 AM
Subject:Re: Opinion on Notify Request Header
# Sending those headers involves overhead, a lot of overhead on slower
# links. We should have a means of indicating if we want a particular
# response stream. I know, I know, its not a proper use of a header. I
# agree and am open to suggestions. Where is the balance to be struck?
Since there's a way that servers can send these kinds of responses
when they see fit, and the servers are just as qualified as the
clients to know when it's a good idea and when it's a waste of
bandwidth, why don't we just put in the response notification and
leave the request-for-response-notification behind.
Larry
I disagree. Servers have absolutely no knowledge of what a client is up
to. This is especially true when that client is sitting behind a proxy.
The server sees a full Internet connection but on the other side of that
connection is a modem. This is not acceptable from an implementation
point of view. The result will be that proxies will kill these messages
and clients who do wish to pay for the information will be left in the
dark.
Sometimes there are no clean solutions,
Yaron
