Let me briefly report back on the issues I brought to the DOM WG for
resolution:
NO_MODIFICATION_ALLOWED_ERROR issue not resolved yet. We discussed it
and will have a resolution in one of the near future telephone
conferences.
Browser sniffing, bootstrapping, asynchronous loading of document and so
forth: as these issues were brought up by Netscape, we agreed that they
be resolved in the DOM TS group work.
Exception handling: The DOM WG resolution is this: The DOM is defined
for ECMA, which supports exceptions. Therefore, any DOM implementation
for ECMA script should support this feature. The previously sent email
to this list by Jason Brittsan contained the following (I'm currently in
a plane and cannot look up the archives):
Comments regarding DOMExceptions:
-17189187
Some languages and object systems do not support the concept of
exceptions. For such systems, error conditions may be indicated using
native error reporting mechanisms. For some bindings, for example,
methods may return error codes similar to those listed in the
corresponding method descriptions.
By returning error codes, Internet Explorer does conform to the DOM
Level 1 specification.
Given that ECMA is not a language that does not support exceptions, a
system that is built with ECMA support and does not support exceptions
cannot be considered conformant to the DOM. If a system does not use
ECMA and therefore not exceptions, it is a non-issue for the DOM WG.
Thus, the DOM TS framework will be rewritten and the workaraound must be
removed.
Default attributes: According to the DOM level 1 specification, it's not
an error no to load default attributes. Later versions of the DOM
require the explicit loading of default attributes. So, not loading
default attributes should raise a warning, not an error.
General reports: I did have a series of meetings with representatives
from Microsoft and Netscape, mainly, where they indicated interest in
our work and promised to help out as much as possible. Specifically:
Netscape reiterated their commitment to help out on the framework, which
we have seen in Bob's interest. I look forward both to resources and of
course the tests we were promised.
Microsoft wants a less discriminating loading mechanism of tests (I
spoke to a representative of the IE for Mac group), and indicated that
they will look into this and help out. One idea was to use DOM "level 0"
for document loading to allow for testing of more than the currently
supported browsers. Given Jason's previous work I feel certain we'll
manage to run the tests smoothly in IE for both these platforms. I look
forward to a submission of ideas and code.
DOM WG: I (again) raised the issue of having to get more tests submitted
from member companies, especially as we want to move along as a WG to
reach Recommendation of DOM level 3. The DOM WG members promised to look
into this and try to allocate resources. I also brought the issue that
there have been very limited resources working on the DOM TS to the DOM
WG's attention, indicating that this cannot continue indefinitely if we
want to ensure some sound quality requirements for the DOM TS.
W3C:
Let's draw some experiences from the work done so far:
I'm still personally very pleased to see that we not only managed to
work together in a pleasant way, but especially that we produced
something which we can all be happy with (it is of course subject to
improvement). However, I want to flag for a few things I've observed:
As a general principle, the companies interested in the DOM TS must
allocate resources to the DOM TS group for solving specific issues (eg.
loading, framework, assuring test quality, test submission and so forth)
as it is in their immediate interest. As the coordinator of this effort
I don't want to see any more drainage of individuals to solve platform
and implementation specific problems (or framework issues for that
matter), especially if representatives for those platforms and
implementations do not allocate resources to aid in solving issues. We
are all working in good faith and a spirit of cooperation, and I want
this to be reflected in the resource allocation. Especially considering
the obvious value a sound and thourough DOM TS has for implementors, I
look forward to having a broader group than the current one working on
future version of the DOM TS.
The framework is now up and running, and there is a clear communication
channel for submitting tests and discussing framework issues. Given that
the release two weeks ago was our first one, I understand that issues
were raised and now (hopefully) solved, and I look forward to discussing
more issues and taking them to the DOM WG for resolving as they are
raised.
However, we need to steer clear of pitfalls in order to ensure that we
release at regular intervals and with a decent coverage.
One such pitfall, as I've indicated, is more tests. We already see some
good intentions in this area, and I look forward to receving more
submissions from organizations other than the ones who launched the DOM
TS activity.
Another pitfall is that we cannot ensure that the framework run on every
single platform if we don't have enough feedback and resources from the
platform's organization. It goes without saying that if the only option
we have is to use a generic simple framework, it will be quite difficult
for any given implementation to endorse any claim on conformance with
the DOM Specification if the framework does not run a for that
implementation and its representatives have not aided in ensuring that
the particular implementation support the framework.
If what needs to be done in order to avoid this is more frequent builds
for testing the DOM TS so that members of the DOM TS group can gain
insight, this is what we'll do. If there is anything else we can to do
comment and constructively criticise the DOM TS, please advise (such as
better documentation, better reporting from me, etc.).
I'll get back to the list with a more detailed agenda of action items
that need to be dealt with, and I'll propose a divison of labour which
I'll be happy to discuss. In the meantime, I very much look forward to
your comments on what I say above and again stress that we all have the
best of intentions in this effort.
Best,
/Dimitris
Changed in DOMTestCase.js rev 1.14.
DocumentBuilder.isDOMExceptionCode(ex,code) now returns (ex.code == code).
This results in every test where an expection is anticipated to fail for all
COM-based implementations accessed from JScript.
If a test's expected behavior is deemed to not be required by DOM L1 Core
but to be required by DOM L1 Core, then the test should be removed from the
DOM L1 Core test suite (that is removed from alltests.xml) and added to the
DOM L2 Core test suite.
It would be good if DOM L3 could be extremely clear on the conditions, if
any, that a conformant processor could not provide attribute nodes for
default values.
However, I'm not sure what the magic phrase that makes providing default
attributes required in DOM L2 and optional in DOM L1+Errata.
For example:
1.2 Interface Document)
The description of the createElement method is missing the following piece:
In addition, if there are known attributes with default values, Attr nodes
representing them are automatically created and attached to the element.
This errata seems to make L1 behavior identical to L2 behavior (at least for
createElement). If you want to make adding the default attributes optional,
then you have to start fine-tuning the the interpretation of "known".
Definitely in these tests default attribute values are specified. They
should be "known" if the parser was validating since reading the external
subset would be required. Would they be specified but not truly "known" by
the processor when non-validating and the definitions were in an external
subset? How about when they were in the internal subset?
Marking the default attribute tests as requiring a validating parser would
probably be the best resolution for the default attribute tests. Unless
there are objections, I can guard these tests so they only run if validation
can be enabled.
Quite a few tests failed in Mozilla because of the total lack of a
DocumentType node. Is there a scenario under which this is conformant?
It would be nice if Netscape could make their tests incrementally visible.
I know NIST was relunctant to do so, but it really makes things easier to
see things as they are evolving instead of having to fix up 400 tests at a
time.
HTML documents are loaded through DOM L0 type mechanisms (window.open). I'm
still totally in the dark on how you would load an XML document on Mac IE.
Making any existing tests (in whatever language) available would be a great
help.
Changed in DOMTestCase.js rev 1.14.
DocumentBuilder.isDOMExceptionCode(ex,code) now returns (ex.code == code).
This results in every test where an expection is anticipated to fail for all
COM-based implementations accessed from JScript.
If a test's expected behavior is deemed to not be required by DOM L1 Core
but to be required by DOM L1 Core, then the test should be removed from the
DOM L1 Core conformance test suite (that is removed from alltests.xml) and
added to the DOM L2 Core conformance test suite. We also could create an
nonnormative test suite for tests failure of which is undesirable but would
not constitute a non-conformance.
However, I'm not sure what the magic phrase that makes providing default
attributes required in DOM L2 and optional in DOM L1+Errata. It would be
good if DOM L3 could be extremely clear on the conditions, if any, that a
conformant processor could not provide attribute nodes for default values.
For example:
1.2 Interface Document)
I brought up the issue, but I still think we should anticipate that
submitted tests are in the XML DOMTS format in order to allow for
generating both bindings. Do you think the advantage of having tests
submitted in a particular language outweighs the design we currently
have?
What I was saying was that given existing tests in whatever language, it is
pretty simple to quickly convert them to DOMTS, so if there is someone who
has existing tests and is willing to donate them as-is, we could review them
and then decide whether to convert them to DOMTS.
My opinion is we should only accept submitted tests in the XML DOMTS
format. If there are binding-specific things, then this should be
accomodated using that format. I do not feel that the potential for
getting more tests in a particular language outweighs the advantage in
getting all of them in a platform-neutral way.
Were the current guidelines not strict, the anticipated Netscape
contributions would not be language-neutral. If the tests were not
language-neutral, and some tests were submitted that did not apply to
the platform I work on, my incentive to care about the correctness of
the tests would diminish, which I believe would result in a lower quality.
On the other hand, Netscape would have loved to just dump all its tests
into someone else's hands and not worry so much about format or quality.
Ray Whitmer
rayw@netscape.com
I'm also in favour of this and I'm glad a company representatvie holds
the same views.
/Dimitris
