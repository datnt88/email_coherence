Is it necessary to have the:
algorithm? Can't this simply be implied? When would you
not want to exclude the enveloped Signature element from
the canonicalization step? It seems like additional
complexity that is not really needed.
Sincerely,
Kevin Regan
kevinr@valicert.com
It isn't necessary for external or enveloped Signatures. Having it implied
buys little but potential ambiguity. Consider the behavior of a
canonicalization algorithm where this is implied and one is dealing with
nested enveloped/enveloping Signatures. John's approach of distinguishing
between evaluating-expressions-as-transforms, such as Signature's enveloping
signature:
(//. | //@* | //namespace::*)
count(ancestor-or-self::dsig:Signature |
here()/ancestor::dsig:Signature[1])
count(ancestor-or-self::dsig:Signature)
or canonicalization's internal/default:
(//. | //@* | //namespace::*)[not(self::comment())] )
and actual node-set ordering to UTF-8 conversion is quite slick IMHO.
Joseph Reagle Jr.
W3C Policy Analyst mailto:reagle@w3.org
IETF/W3C XML-Signature Co-Chair http://www.w3.org/People/Reagle/
Hmm, It doesn't look (from the DTD) like a Signature
element can contain another Signature element. The
content of Object is:
In this case, it does not seem like the enveloping-signature
adds anything. I might be wrong in thinking that Signature
elements can not nest. Can they?
If they can not, there does not seem to be any case where
you would get to the Signature element and want to include
it in the signature calculation. If this is the case,
the enveloping-signature algorithm seems worthless...
--Kevin
That's because the content model of the DTD is rather limited in that
anything should be able to go in an Object, and we have to specify the few
things from our own set, and hope #PCDATA means external data (which it
doesn't, that's why we are using Schema). However, I'll add Signature to
that delcaration.
Joseph Reagle Jr.
W3C Policy Analyst mailto:reagle@w3.org
IETF/W3C XML-Signature Co-Chair http://www.w3.org/People/Reagle/
