Hmm, seems I was right - we do *not* have a consensus on this one.
I think this is inevitable.
There is no consensus on how PUBLIC should be interpreted.
Different peole want it as a hook for different things.
It's a recipe for disaster.
If we open the can of PUBLIC worms, we have to say:
* what to do if you are givena PUBLIC Id and no SYSTEM Id
* what to do if you are given both
* what to do if you are given both and the resulting files are different
* give at least one way in which I can put an XML file on the web and
someone else 6 months in the future with some new application can
use that file, whether or not it has a PUBLIC Identifier.
Otherwise...
Some people will implement systms that ignore the PUBLIC ID, as
David Durand and Paul Prescod suggest, and always require a SYSTEM Id.
Some people will implement systems in which the SYSTEM Id is ignored,
as Paul Grosso suggests, when both are given.
Some people will implement systems in which the SYSTEM ID is used for
some things and the PUBLIC for others, as per Panorama today.
Some people will implement systems that require end users to edit local
configuration files before they can use documents containing PUBLIC Ids,
as per Author/Editor today.
No document will work on all systems.
If we give a set of rules for which to prefer, as I have several times
said, we will end up with interoperability, and you will then be safe
to use XML in systems where you have no control over the recipient,
rather like HTML today.
If we don't have PUBLIC at all, this problem goes away.
I would rather wait six to twelve months before adding PUBLIC.
Lee
Net the fact that the XML catalog proposal left practically everything
optional/recommended--we could make things required, but the
subcommittee got the sense that the ERB and WG didn't want to set any
hard requirements in this area--I thought the XML catalog proposal did
answer the first three questions above (and your fourth question isn't
a question to be answered by a catalog proposal--it's not even clear
it's a real question at all). Given the application has decided to
use the XML catalog in the external identifier resolution process,
the proposal gives (or meant to give) the following answers:
* what to do if you are given a PUBLIC Id and no SYSTEM Id
Use the PUBLIC id--what wlse would you expect?
Use the PUBLIC id. (If that fails, the proposal doesn't forbid
trying the system id--the proposal doesn't discuss fallback/recovery
mechanisms.) If the proposal fails to make this clear, we can reword
it. If the ERB decides to prefer system ids, we can change this decision
easily without affecting any of the rest of the catalog proposal, but
there are many good arguments for preferring public ids, and the
subcommittee decided to write the proposal so as to prefer public ids.
Why are you asking this question? How did you discover the "resulting
files" are different? You must have retrieved both--why? Though nothing
prevents an application from retrieving both (perhaps some "external id
consistency checking application might want to do this), this is a red
herring as far as resolution is concerned. Once you've successfully
retrieved something, you've resolved it--end of resolution.
So the answer is the same as the answer to the second question.
I'll let Durand and Prescod speak for themselves, though given that
both of them as well as myself were on the subcommittee that produced
the proposal, it seems a simplification at best to make the above
characterizations of our positions.
I can say that your characterization of my position is inaccurate.
For external identifiers in which both a PUBLIC and SYSTEM id are
given, I suggest that the application first attempt to resolve the
PUBLIC id. In the event that this resolution fails, I would want
the SYSTEM id to be tried, though the XML catalog proposal does not
require this behavior. We could explicitly recommend this behavior
in the proposal if we wish.
paul
No it's not, it's quite clear-cut:
1. Resolve it, either algorithmically or using a catalog.
If that doesn't work then you do indeed have a problem,
and the browser can't be blamed for the deficiencies of
the author in failing to provide the right info.
2. Browser-configurable preference.
3. Never occurs: you use the one you get first from (2) above. If you've
resolved one successfully, why on earth would you want to fetch the
other one?
That doesn't make sense: the question is surely, how can someone use
that file whether or not it has _some kind of identifier_, sys or pub?
If you provide no identifier, then the instance has to be well-formed
only, and the question falls.
It strikes me that the authors of such systems need some serious help.
Perhaps (as often looks all too frighteningly obvious) they've never
actually had to _use_ their software to do a job of work.
I'm delighted to see that at long last this problem is being taken
seriously.
We may have to agree to disagree on this, but I'm willing to be
persuaded. The problem is that the PUBLIC identifier is the "real" (ie
formal) name of my DTD. I don't care what filename you give your
locally-cached copy, or what filename someone calls their version
available via a URL. What is crucial is that if I identify my document
as being "-//Davenport//DTD DocBook V3.0//EN" then that is what it is,
nothing more and nothing less. Trying to fudge the issue of public DTDs
without PUBLIC identifiers, trying to rely on someone's localised
concept of what they might want to call the DTD file on the third
Tuesday after the full moon, is a guaranteed recipe for disaster. Where
private DTDs are concerned, by all means stick with SYSTEM ids. I just
cannot believe that people seriously mean that a browser is capable of
doing the right thing when given !doctype html system "html.dtd" when
there must be 100 or more DTDs all claiming to be that.
Where we agree 100% is that we need a set of rules, and they're nearly
all binary choices, so it's just a large nest if if-then-elses.
///Peter
sorry for misunderstanding -- the clarification is helpful.
If we require this behaviour, it is nonsensical unless we specify exactly how
that resolution is to happen -- you can't require an unspecified action!
(e.g. how are you going to test conformance?)
So I strongly agree with Michael on that one.
And to do that, we have to supply a mechanism by which CATALOG can be fetched
when XML is used over the Web. The same mechanism should work when a
local XML file is used (as is true for Panorama) so you don't have to
edit system ids or catalog files.
Any proposal (e.g. as per Ken's mail) that involves users editing CATALOG
files is assuming SGML levels of sophistication in users. I know that
Panorama users don't download catalog files and edit them when there
are problems -- or most don't. I don't suppose XML users will, and XML is
supposed to be easier than SGML.
So I think "We could explicitly recommend this behavior
in the proposal if we wish" is like saying "we could explicitly recommend
that  and  be used around element names in tags, but if you prefer you
can use some other method, whith no way to signal this in the file, and
by prior arrangement with the recipient arrasnge for interoperability".
I.e. it won't work.
Lee
If this happens, it means that the document's author
has assumed that the recipient already knows how to resolve
the PUBLIC id. So the recipient's software should try to
resolve it. If the PUBLIC id can't be resolved, then the
document's author's assumption was incorrect. We don't need
to specify error recovery in this case.
Try to resolve either one. If that fails, try the other.
It doesn't matter which one you try first.
(If the software does not know how to automatically resolve
PUBLIC ID's -- which I suspect most software will not, since
_nobody_ is sure how to do this yet -- then naturally it
should try the SYSTEM ID first. Is there a need to put
this in the spec though? It seems like common sense to me.)
This means that somebody somewhere has made a mistake.
We don't need to specify error recovery in this case.
How is using the file six months in the future any different from
using the file right away? I don't understand the question.
Fine. I expect that PUBLIC IDs will be used more for
identification ("the official name of this resource is...")
than for resolution anyway.
Such systems will naturally have to be very good
at automatically resolving PUBLIC IDs, which will be
tricky, since nobody knows how to do this at all yet.
I don't see how this conclusion follows from the premises.
If the author provides both PUBLIC and SYSTEM id's,
the document should work on any system, regardless
of which of either or both the system in question uses.
--Joe English
jenglish@crl.com
I'm not sure how the latter follows from the former. If
software does not know how to look up the public identifier,
it should use the system ID first and last. There is nothing
to specify.
But if software knows about both, I would urge that the public
identifier should be tried first.
a) It will probably be faster (since it will be a catalog lookup more
often than a network transaction using a still-under-development URN
protocol).
b) It provides opportunity for client-side overriding.
c) It could allow "smarter" caching (e.g. Document 1 says it needs
same public identifier. The browser should know its already got the
right document).
Paul Prescod
