The 'attributes' property of the 'Node' interface is defined as being
readonly. Does this apply only to the property as such or does it
extent into the functionality of the NamedNodeMap too, e.g. does
calling myElement.attributes.setNamedItem (instead of using
myElement.setAttributeNode) raise a NO_MODIFICATION_ALLOWED_ERR
exception?
Dieter K?hler, M. A. - dieter.koehler@ppp.uni-bamberg.de
Mittlere Kaulberg 22, D-96049 Bamberg, +49(0)951-5190726
"http://www.philo.de/Philosophie-Seiten/": 1000+ Philosophie-Links
"http://www.philo.de/VirtualLibrary/14.de.htm": Deutsche Philo-Links
"http://www.philo.de/xml/": Open XML - XML-Komponenten f?r Delphi
I can't speak to the intent of the API designers, but I've always
seen it interpreted as "there is no set operation for 'attributes'".
This makes more sense to me; setting the list would be a fairly
expensive operation to make available through what may be
syntactically innocuous in some language bindings. For example, this
would appear as
someNode.attributes = someAttributesList
in Python; most Python programmers will consider this a "cheap"
operation.
Actually, I'm not sure how else to get ahold of the children of a
node in a general fashion, so this behavior would make the DOM nearly
read-only in practice.
What I *would* like is a way to determine that a DOM object is
read-only; this should be exposed at the Node level (to see if a
particular Node is read-only, perhaps because it is a descendent of an
EntityReference), at the Document level (some particular Document is
read-only), or at the implementation level (the impl. only supports
read-only operation). This would be useful at least for developing a
test suite to determine if an arbitrary implementation is operating as
expected. There are enough nuances that a thorough test would need to
be conditionalized for that more introspective features would be
useful for. A set of standard "feature" names would be useful for
this. Another would be persistence beyond a process, as we're
starting to see more DOMs built on top of relational databases or other
non-transient data structures.
-Fred
Fred L. Drake, Jr. fdrake at acm.org
PythonLabs at Digital Creations
Yes. Whether the NamedNodeMap is readonly (your second question) is a
seperate issue, and is gated by whether the Element itself is readonly (eg
because it's within the value of an EntityReference).
Joe Kesselman / IBM Research
Other than trying it and letting it throw the exception, I presume
smile/ .
Currently, the only officially-blessed condition under which nodes become
readonly is when they're within the value of an EntityReference. There is
some interest in coming up with a more official definition of read-only
documents or subtrees -- it's on the Open Isses list -- but at this time
it's unclear how much of that might or might not be included in DOM Level
3; it's not currently one of our top priorities, though the XSLT folks have
inquired about it since they want a way to say that their input tree Must
Not be altered during stylesheet processing.
Joe Kesselman / IBM Research
