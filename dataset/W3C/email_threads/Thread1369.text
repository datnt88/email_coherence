In an effort to wrap my brain around all of the autoversioning options, I
developed the following table. I'm hoping some variant of this might make it
into the specification, since I believe it could increase the correctness of
implementations of this feature. I'm also curious to see if I got it all
right (I'm most curious about the checked-in states...) :-)
Abreviations used:
ci = check-in (or checked-in)
co = check-out (or checked-out)
ul = unlock
lk = lock
- = sequence of operations (1- 2)
acoaci = always-checkout-always-checkin
acowuci = always-checkout-when-unlocked-checkin
wlco = when locked checkout
coouakco = checkout-on-update-and-keep-checked-out
Operation "write" is defined to be the state modification action of the
method. For a PUT, write = changing the body. For PROPPATCH, write =
changing the property values.
The table is orgazined as follows:
rows correspond to specific states of the resource (e.g., checked out and
write locked).
columns correspond to specific autoversion options
cells contain descriptions of what happens when specific methods are invoked
under these conditions
acoaci acowuci
ci locked PUT/PROPPATCH PUT/PROPPATCH
co- write- ci co- write
UNLOCK UNLOCK
ul ul
LOCK LOCK
err:423 Locked err:423 Locked
ci unlocked PUT/PROPPATCH PUT/PROPPATCH
co- write- ci co- write- ci
UNLOCK UNLOCK
err:412 err:412
LOCK LOCK
lk lk
co locked PUT/PROPPATCH PUT/PROPPATCH
write write
UNLOCK UNLOCK
ul ci- ul
LOCK LOCK
err:423 Locked err: 423 Locked
co unlocked PUT/PROPPATCH PUT/PROPPATCH
write write
UNLOCK UNLOCK
err:412 err:412
LOCK LOCK
lk lk
wlco coouakco
ci locked PUT/PROPPATCH PUT/PROPPATCH
co- write co- write
UNLOCK UNLOCK
ul ul
LOCK LOCK
err:423 err:423
ci unlocked PUT/PROPPATCH PUT/PROPPATCH
err:DAV:cannot-modify-version- co- write
controlled-content
UNLOCK UNLOCK
err:412 err:412
LOCK LOCK
lk lk
co locked PUT/PROPPATCH PUT/PROPPATCH
write write
UNLOCK UNLOCK
ci- ul ul
LOCK LOCK
err:423 err:423
CHECKIN
ci
co unlocked PUT/PROPPATCH PUT/PROPPATCH
write write
UNLOCK UNLOCK
err:412 err:412
LOCK LOCK
lk lk
CHECKIN
ci
The table looks correct to me, in terms of the old DAV:auto-version
terminology. I support Jim's suggestion that such a table go into the
specification, because it leaves much less room for misinterpretation and
error than a prose-only expression of the semantics. Geoff has done a
wonderful job of expressing the semantics in a concise set of sentences, but
it's almost like solving a puzzle to wring out of those sentences the
semantics spelled out in Jim's table. Rather than requiring each
implementor to solve the puzzle, and possibly end up with an incorrect
solution, I like the idea of spelling out the semantics in a table. As I
noted in my earlier message, I also prefer the old terminology.
--Chuck Fay
FileNET Corporation, 3565 Harbor Blvd., Costa Mesa, CA 92626
Hmm, I hadn't realized we were moving towards new terminology for
autoversioning. I've checked out the -15 draft, and I think the new
autoversioning terminology is a step in the right direction. I'd still like
to see the requirements listed in a tabular form.
- Jim
To map Jim's table to the current protocol:
DAV:always-checkout-always-checkin =
DAV:auto-checkout = (DAV:locked-update, DAV:unlocked-update)
DAV:auto-checkin = (DAV:locked-update, DAV:unlocked-update)
DAV:always-checkout-when-unlocked-checkin =
DAV:auto-checkout = (DAV:locked-update, DAV:unlocked-update)
DAV:auto-checkin = (DAV:unlocked-update)
DAV:when-locked-checkout =
DAV:auto-checkout = (DAV:locked-update)
DAV:auto-checkin = ()
DAV:checkout-on-update-and-keep-checked-out =
DAV:auto-checkout = (DAV:locked-update, DAV:unlocked-update)
DAV:auto-checkin = ()
I believe this illustrates the superiority of the current approach,
since the checkout/checkin behavior is largely "self-evident"
from the values of the auto-checkout and auto-checkin values.
Note: Half of Jim's rows are for "co locked" or "co unlocked".
Since auto-checkout (and therefore auto-checkin) only applies
when the resource being updated is in the checked-in state,
the "co xxx" lines are not relevant for this table, because
their behavior is unaffected by the auto-checkout status.
Note: Although this table is a useful way to test ones understanding of
locking and auto-versioning behavior, I don't think it is suitable
for inclusion in the protocol definition of auto-versioning.
In particular, I believe it makes auto-versioning behavior look
more complex than it really is, because it mixes standard
locking semantics (i.e. you can't write-lock a resource if its
already locked, and you can't unlock a resource if it is not
locked) with auto-versioning semantics. By doing so, it hides
the underlying regularity of the auto-versioning behavior.
Jim's table was largely correct, except for a few notes below
(marked as "[gmc: ...]").
Cheers,
Geoff
In an effort to wrap my brain around all of the autoversioning options, I
developed the following table. I'm hoping some variant of this might make it
into the specification, since I believe it could increase the correctness of
implementations of this feature. I'm also curious to see if I got it all
right (I'm most curious about the checked-in states...) :-)
Abreviations used:
ci = check-in (or checked-in)
co = check-out (or checked-out)
ul = unlock
lk = lock
- = sequence of operations (1- 2)
acoaci = always-checkout-always-checkin
acowuci = always-checkout-when-unlocked-checkin
wlco = when locked checkout
coouakco = checkout-on-update-and-keep-checked-out
Operation "write" is defined to be the state modification action of the
method. For a PUT, write = changing the body. For PROPPATCH, write =
changing the property values.
The table is orgazined as follows:
rows correspond to specific states of the resource (e.g., checked out and
write locked).
columns correspond to specific autoversion options
cells contain descriptions of what happens when specific methods are invoked
under these conditions
acoaci acowuci
ci locked PUT/PROPPATCH PUT/PROPPATCH
co- write- ci co- write
UNLOCK UNLOCK
ul ul
LOCK LOCK
err:423 Locked err:423 Locked
ci unlocked PUT/PROPPATCH PUT/PROPPATCH
co- write- ci co- write- ci
UNLOCK UNLOCK
err:412 err:412
LOCK LOCK
lk lk
co locked PUT/PROPPATCH PUT/PROPPATCH
write write
UNLOCK UNLOCK
ul ci- ul
[gmc: only if auto-checked-out]
LOCK LOCK
err:423 Locked err: 423 Locked
co unlocked PUT/PROPPATCH PUT/PROPPATCH
write write
UNLOCK UNLOCK
err:412 err:412
LOCK LOCK
lk lk
wlco coouakco
ci locked PUT/PROPPATCH PUT/PROPPATCH
co- write co- write
UNLOCK UNLOCK
ul ul
[the unlock will automatically check it in]
LOCK LOCK
err:423 err:423
[gmc: why the 423? it is not currently locked]
ci unlocked PUT/PROPPATCH PUT/PROPPATCH
err:DAV:cannot-modify-version- co- write
controlled-content
UNLOCK UNLOCK
err:412 err:412
LOCK LOCK
lk lk
co locked PUT/PROPPATCH PUT/PROPPATCH
write write
UNLOCK UNLOCK
ci- ul ul
[gmc: only if auto-checked out]
LOCK LOCK
err:423 err:423
CHECKIN
ci
co unlocked PUT/PROPPATCH PUT/PROPPATCH
write write
UNLOCK UNLOCK
err:412 err:412
LOCK LOCK
lk lk
CHECKIN
ci
