Hi,
This is an interesting query language. Does it exist an implementation in Java (based on Jena for example) ?
Best regards
Stephane Fellah
Web Chief Architect
PCI Geomatics
490, Boulevard St Joseph
Hull, Quebec
Canada J8Y 3Y7
Visit our web site:? www.pcigeomatics.com
This is an useful comparison but one query language missing is RxPath
(http://rx4rdf.liminalzone.org/RxPath) -- so below are RxPath queries
for each of your use cases.
RxPath is syntatically identical to XPath 1.0 and is defined by a
deterministic mapping from the RDF model to XPath data model. Its
specification is available at http://rx4rdf.liminalzone.org/RxPathSpec
(BTW, I'll be releasing a new version of the software next week.)
Based on the metric described in the conclusion of your paper, it's more
complete than any of the languages surveyed, supporting 12 out of the 14
use cases. Also, the same mapping (with minor changes) could be applied
to map RDF models to the XPath 2.0/XQuery data model, the resulting
query language would address most of the items on your wishlist,
including aggregation, sorting, and full support for XML Schema datatypes.
-- adam
1. Path Expression
Return the names of the authors of publication X.
/*[.='X']/author/*/rdf:li/*/name
2 Optional Path
Return the name and, if known, the e-mail of the author of publication X.
/*[.='X']/author/*/rdf:li/*/name | /*[.='X']/author/*/rdf:li/*/email
(Note: RxPath doesn't support tuples, but each email will follow each
author's name because the union is returned in "document" order.)
3 union
Return the labels of all topics that and (union) the titles of all
publications.
/*/rdfs:label | /*/rdfs:title
4 difference
Return the labels of all topics that are not titles of publications.
/*/rdfs:label[. != /*/rdfs:title]
5 Quantification
Return the persons who are authors of all publications.
Not Supported.
6 Aggregation
Count the number of authors of a publication.
count(/*[.='X']/author/*/rdf:li/*)
7 Recursion
Return all subtopics of topic "Information Systems", recursively.
/*[.='http://www.aifb.uni-karlsruhe.de/WBS/pha/rdf-query/sample.rdf#ACMTopic/Information_Systems']//acm:subTopic/*
8 Reification
Return the person who has classified the publication X.
/*[. =/*[.='X']/isAbout/@rdf:ID]/dc:creator/*
9 Collections and Containers
Return the first author of Publication X.
(/*[.='X']/author/*/rdf:li/*)[1]
Unlike the languages you surveyed, RxPath has syntatic support
for RDF containers and collections so you can get the last author too:
(/*[.='X']/author/*/rdf:li/*)[last()]
10 Namespace
Return all resources whose namespace starts with
"http://aifb.uni-karlsruhe.de/".
Assuming there's a namespace declaration with the prefix 'aifb':
/aifb:*
or for any arbitrary URI prefix:
/*[starts-with(., "http://aifb.uni-karlsruhe.de/")]
11 Language
Return the German label of the topic whose English label is "Database
Management".
/*[rdfs:label = 'Database Management']/rdfs:label[@xml:lang='de']
12 Lexical Space
Return all publications where the page number is the lexical value '08'.
/Publication[pages = '08']
13 Value Space
Return all publications where the page number is the integer value 8.
/Publication[pages = 8]
Note: In XPath 1.0 type coercion is automatic but it only supports
numbers and strings.
14 Entailment
Return all instances of that are members of the class Publication.
/Publication
(No special support for entailed vs. ground assertions, inference is up
to the implementation.)
Related to the recent work of the RDF Data Access Working Group [1], we have
compared six proposals for RDF query languages. The report, the use case
data, and the queries are available online [2].
Looking forward to hearing your feedback.
Peter Haase, Andreas Eberhart, Raphael Volz, Institute AIFB, University of
Karlsruhe
Jeen Broekstra, Vrije Universiteit Amsterdam
[1] http://www.w3.org/2001/sw/DataAccess/
[2] http://www.aifb.uni-karlsruhe.de/WBS/pha/rdf-query/
There's only a Python implementation but the plan is to write an RxPath
to Squish/RDQL converter. At that point it could interact with Jena via
some RPC mechanism (or by porting it to Jython)
-- adam
Related to the recent work of the RDF Data Access Working Group [1], we have
compared six proposals for RDF query languages. The report, the use case
data, and the queries are available online [2].
Looking forward to hearing your feedback.
Peter Haase, Andreas Eberhart, Raphael Volz, Institute AIFB, University of
Karlsruhe
Jeen Broekstra, Vrije Universiteit Amsterdam
[1] http://www.w3.org/2001/sw/DataAccess/
[2] http://www.aifb.uni-karlsruhe.de/WBS/pha/rdf-query/
/me trims massive crossposting
I think most (all?) of the paths should work in TreeHugger, which is
implemented in java - most of the heavy lifting is done by jena and
saxon (path expressions, XSLT, XQuery). It's the same idea as RxPath but
mine was more of a thought experiment, i.e. it may be broken, do not
rely on it for medical use etc ;-) Adam's stuff is more robust, I
suspect. But TreeHugger is BSD-style licenced, and I don't think it's
too hard to understand if you want to play around.
Hope that helps,
Damian
PS I'm not sure if I've added in the descendant-or-self stuff - I'll
check later.
I think the message is well-intentioned. It also goes to show how much
attention people are paying to DAWG (scary) and how much they care (good -
that's why we are here). I'm glad they will comment on our working
documents.
Blasting to so many mailing lists is quite unnecessary as are ridiculously
long signatures.
This WG is proceeding with a different approach: requirements-driven,
including the remote access usage. We have gathered some interesting,
grounded examples and have a requirements lists that we think important.
Some comments on the report:
== Methodology ==
I would have found a much greater discussion of the methodology helpful.
Section 2 of the report lists the features they wish to consider but without
significant justification. It was also a missed opportunity; instead of a
feature-oriented perspective, something that looked at the underlying
computational model would have been useful.
The list that does not distinguish between features that are innate because
of the computation model of the query language and those features that could
be easily added. This WG can just add those features.
== RDQL correction ==
Without wanting to go through every example, there is one serious error
about RDQL (they used the Jena implementation). The report states that
there is no access to graph entailment. There is; and even the command line
application can access RDFS entailments. In Joseki, a published model can
have an RDFS or OWL reasoner associated with it - the query executes against
that.
The approach we have taken for runtime use of data is that inference is a
feature of the data source, not the query language (there are also separate
APIs for the reasoner and for an ontology-centric view of the model).
Others have done much the same. If the query is on an RDFS or OWL model,
then all entailments that the reasoner produces are available.
Specifically,
Why does this query (SeRQL)
select Publication from {Publication} rdf:type { s:Publication }
rate as "yes"
when the RDQL equivalent
SELECT ?p WHERE ( ?p rdf:type s:Publication )
rate as "no"? This will find all individuals with type publication.
Andy
From: public-rdf-dawg-request@w3.org
Date: 28 April 2004 19:59
I'm not sure what the consensus view on this kind of stuff is. I think
the last thing we want is for other RDF groups to be arguing about
what a query language should be under the assumption that we're
hearing their input when we're clearly not (the attempted cross-post
to our mailing list didn't seem to go through).
Just to add another data point, I'm finding this report extremely
useful, both in editing our UC&amp;R doc and as a member of the WG
thinking about where to start, what other tech requirements to propose,
and so on.
I'm also a bit irked about surveys that don't include the REX
language; I realize I haven't put together enough resources to make
it accessible (hoping to at least post a summary of the f2f
presentation this weekend), but I really don't have the time to be
writing comprehensive documentation and language tutorials in more
than one forum.
Yes, please pick one forum for the discussion;
www-rdf-rules seems fine.
Don't crosspost to public-rdf-dawg. That mailing
list is for WG use. I havn't put in place technical means
to deny posting from other parties, but if this sort
of crossposting continues, I may have to.
Dan Connolly, W3C http://www.w3.org/People/Connolly/
see you at the WWW2004 in NY 17-22 May?
