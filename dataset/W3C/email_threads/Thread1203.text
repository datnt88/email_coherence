Martin is completely correct on the first count: I sent the message to the
wrong list. Here's the recent announcement for the new draft. We think this
draft covers all the issues discussed here since the last draft. On first
reading, I agree with some of Martin's nits, but need to look more
carefully at the substantial stuff. However, please do read the draft and
let us know if you think it is ready (or almost ready) to be sent off for
RFChood.
From: Internet-Drafts@ietf.org
Reply-to: Internet-Drafts@ietf.org
Subject: I-D ACTION:draft-hoffman-utf16-03.txt
Date: Wed, 21 Apr 1999 12:35:27 -0400
Sender: nsyracus@ns.cnri.reston.va.us
A New Internet-Draft is available from the on-line Internet-Drafts
directories.
Title : UTF-16, an encoding of ISO 10646
Author(s) : P. Hoffman, F. Yergeau
Filename : draft-hoffman-utf16-03.txt
Pages : 9
Date : 20-Apr-99
This document describes the UTF-16 encoding of Unicode/ISO-10646 and
contains the registration for three MIME charset parameter values:
UTF-16BE (big-endian), UTF-16LE (little-endian), and UTF-16.
A URL for this Internet-Draft is:
Internet-Drafts are also available by anonymous FTP. Login with the username
"anonymous" and a password of your e-mail address. After logging in,
type "cd internet-drafts" and then
"get draft-hoffman-utf16-03.txt".
A list of Internet-Drafts directories can be found in
or ftp://ftp.ietf.org/ietf/1shadow-sites.txt
Internet-Drafts can also be obtained by e-mail.
Send a message to:
mailserv@ietf.org.
In the body type:
"FILE /internet-drafts/draft-hoffman-utf16-03.txt".
NOTE: The mail server at ietf.org can return the document in
MIME-encoded form by using the "mpack" utility. To use this
feature, insert the command "ENCODING mime" before the "FILE"
command. To decode the response(s), you will need "munpack" or
a MIME-compliant mail reader. Different MIME-compliant mail readers
exhibit different behavior, especially when dealing with
"multipart" MIME messages (i.e. documents which have been split
up into multiple messages), so check your local documentation on
how to manipulate these messages.
Below is the data which will enable a MIME compliant mail reader
implementation to automatically retrieve the ASCII version of the
Internet-Draft.
Content-Type: text/plain
Content-ID: 19990420144114.I-D@ietf.org
ENCODING mime
FILE /internet-drafts/draft-hoffman-utf16-03.txt
ftp://ftp.ietf.org/internet-drafts/draft-hoffman-utf16-03.txt
Before this goes to last call, I just wanted to say that permitting
multiple byte orderings in this context has a high probability of leading
to interoperability problems similar to past problems caused by permitting
multiple endian orders in a protocol.
My intention with this comment is simply to make my technical assessment
clear. I see little value in pushing this issue or making a last call
comment because:
(1) This issue has been debated to death alrady.
(2) There is a lot of "religion" involved in the issue and further debate
will likely not help.
(3) I know this was agreed to by the Unicore group which is a smart group
that knows more about character sets than I do.
(4) If UTF-16 has interoperability problems, it will just strengthen
support for UTF-8 and RFC 2277. Since I think UTF-8 is a better solution
in most cases anyway, I see little merit in fighting to make UTF-16 more
attractive.
- Chris
Note that only UTF-16 has this problem; UTF-16BE and UTF-16LE do not have
multiple byte orderings. Because of this, I believe that most systems will
try to use BE and LE.
I fully agree with both sentences.
--Paul Hoffman, Director
--Internet Mail Consortium
I think it is almost ready, but I have a nit.
4.3 Interpreting text labelled as UTF-16
Text labelled with the "UTF-16" charset might be serialized in either
big-endian or little-endian order. If the first two octets of the text
is 0xFE followed by 0xFF, then the text can be interpreted as being
big-endian. If the first two octets of the text is 0xFF followed by
0xFE, then the text can be interpreted as being little-endian. ...
I think that leading 0xFE 0xFF or 0xFF 0xFE in this case (charset = "utf-16") is
always a byte order mark and is not a zero-width non-break space. I would like
to make this explicit, since "the character 0xFEFF in the first
position of a stream MAY be interpreted as a zero-width non-breaking
space, and is not always a byte-order mark." (in 3.2).
Cheers,
Makoto
Fuji Xerox Information Systems
E-mail: murata@apsdc.ksp.fujixerox.co.jp
4.3 Interpreting text labelled as UTF-16
Text labelled with the "UTF-16" charset might be serialized in either
big-endian or little-endian order. If the first two octets of the text
is 0xFE followed by 0xFF, then the text can be interpreted as being
big-endian. If the first two octets of the text is 0xFF followed by
0xFE, then the text can be interpreted as being little-endian. ...
I think it would be nice if we could it make that way, but I'm not
at all sure that we can do that. We can't just change definitions that
were around previously.
Regards, Martin.
#-#-# Martin J. Du"rst, World Wide Web Consortium
#-#-# mailto:duerst@w3.org http://www.w3.org
Have clear definitions or consensus ever existed?
Makoto
Fuji Xerox Information Systems
E-mail: murata@apsdc.ksp.fujixerox.co.jp
