I am suprised at the amount of speculation on this
list; apparently few have taken the time to read the
patent in detail or the IEEE Visualization paper.
I think you'll find most have read at least the patent. But few of us (the
current posters seem to be software developers in the main) are lawyers...
and neither are lawyers software developers. Which is what I see as the
problem. All lawyers, judges and juries can do is apply patent case law as
it existed before software patents to software patent cases. But
inventions are not comparable to software, at least if by "software" we
mean "a hazy concept of what something could do." Inventions are clearly a
specific formulation of an idea, not the idea itself- that Mr Doyle used
the word "idea" in his testimony in Eolas vs Microsoft when describing
what he was attempting to patent should have rung alarm bells (and should
not been glossed over by that judge.)
Let's not even begin to discuss that Doyle's idea appears at least, on my
reading of the evidence, to not be original or novel anyway. Indeed, I am
increasingly convinced by the "obviousness" argument. When you are writing
a piece of software, there is an enormous amount of creativity involved.
And yet even someone like me, who prides himself on thinking "outside the
box" and pioneering new frontiers, is slightly worried that the US is
granting patents on *ideas*, vague ideas so broad they may encompass my
creativity. By the way, I am not claiming to be alone, or even in the
minority here. The world of software demands that we create new and
interesting things on an almost daily basis. That someone who stops to
take the time to smell the coffee and think up some wishy-washy words
could net himself a decision like Eolas vs Microsoft scares the hell out
of me. Why should the legal beagle triumph over the guys working hard in
the trenches? What kind of justice is that?
Someone was bound to come up with plug-ins. Indeed, it seems to me that
many people came up with the idea in a very short period of time. It's
like a soap bubble- it's the most energy-efficient configuration for a
dynamic web browser that needs to deliver a vast array of content types to
the user. That one person should be labelled the inventor (not even the
first, it would seem,) and the rest have to suffer for not thinking fast
enough and running down to the patent office... That's just plain
disgusting. If the court had a gram of technical inclination they would
have realised *on the evidence* that the plug-in was an idea ripe for the
picking at the time of the '906 filing. The ingredients were put in place
by greater men who did not (could not) patent their true formulations (not
merely ideas) a la HTTP, Mosaic etc.
From my reading of those documents, I think the claim
language is straight-forward and clearly
differentiates this invention from the earlier work
that has been discussed.
Well, I'm not sure how clear that is. But I don't expect the "prior art"
to be targeted by the patent, not only because it is not clear it could be
applied, but because there would be no return on persuing it. Patents
aren't based on the principle of "use it or lose it" like, say,
trademarks.
I do not believe patents, software or not, are
inherently bad. In fact, I believe they are the best
defense the technical community has to ensure that
innovation continues against the hegemony of the
WINTEL duopoloy.
In their current form, software patents are, I think, inherently bad. So
thankyou for giving me cause to characterize them as such. Unless software
patents are as specific as, say, photographic emulsion patents, where you
have to describe every ingredient and the manufacturing process in great
detail, their only outcome will be to stifle innovation. As evidence, I
cite all the cumbersome workarounds people on this list have been
scrambling about to provide. The energy of the software developers should
be at innovating in new fields, not treading over old ground to keep a
bunch of lawyers happy.
And this brings me to my last point (cue sighs of relief.) Some have said
that politics should not play a part in this discussion. However, I have a
feeling that the reason that the plaintiff was successful was because he
played on the "guy stepped on by corporate giant" angle. There was a jury,
for [insert possessive form for preferred deity or philosopher here] sake!
How can these people keep their judgement impartial in the face of all the
antitrust hoo-ha that went down in the last few years. Being
non-technical- and even the judge seems to be suffering here- what hope
did they have to see that the case was actually about stalling or setting
back web development for the next couple of years, not about pricking MS
in the foot with a safety pin.
Anyway, sorry about that. But with such a vacuum of actual facts, what
else can you really expect from this list.
Archer
End.
Hear! Hear! I was going to respond to the poster about his comment, but I
decided it was just a waste of time. Its a matter of perspective. Just
imagine if the relaxation of the software patents in 1998 (or was 1996?),
was the original guidelines in the early software days:
- One operating system,
- One Bios,
- One language
- One compiler
- One text editor
- One word processor
- One telecommunications program,
- One Mail reader/Writer
- One File Transfer protocol
- There would be no Bill Gates nor Windows,
- No lotus, Mitch Kapor would of been sued,
- No Borland,
- AT&amp;T and IBM and Peter Norton would be god!
- One browser,
- Mr Doyle would probably be a bartender,
and on and on and on and on.
I too consider myself very creative and a systems oriented person. If I
went of a software patent binge today, I would probably dominate a few
things.
I'm afraid we are just seeing the beginning of worst to come as the silly
software patents filings a few years back are starting come out now. I'm
going to show the world how silly it is with an extensive analyze compared
to my world-wide marketed products dating back into the 80s. I've been
putting it all together and plan to send the results to the USPTO, the rags,
etc. I mean, just research BBS systems you will see recent patents issues
for BBS concepts that been around since the 80s. As you eluded too, there
is simply too much ignorance in the market.
Sincerely,
Hector Santos, CTO
Santronics Software, Inc.
305-431-2846 Cell
305-248-3204 Office
I am suprised at the amount of speculation on this
list; apparently few have taken the time to read the
patent in detail or the IEEE Visualization paper.
From my reading of those documents, I think the claim
language is straight-forward and clearly
differentiates this invention from the earlier work
that has been discussed.
I do not believe patents, software or not, are
inherently bad. In fact, I believe they are the best
defense the technical community has to ensure that
innovation continues against the hegemony of the
WINTEL duopoloy.
I broadly agree and think that W3C should take a 3-pronged approach:
1. Lobbying politicians (they create the laws the lawyers and judges have to
try and make sense of!) to make sure they understand the wider implications
of software and business model patents. We (in Europe) are on the verge of
having a US-style patent law covering "computer-implemented inventions", so
there is a lot of concern - see
petition http://www.ffii.org/ffii-cgi/eintrag?f=eubsa&amp;l=en .
2. Find prior art and evidence to blow this patent out of the water. A key
concept in patents (at least in the UK) is that an invention must not be
obvious *to someone with experience in the field* (i.e. a software
developer, NOT a judge and jury). I think many software people would agree
that the ideas in this patent are obvious, so can the ruling be challenged
on this basis?
3. Develop workarounds to circumvent any patents that are upheld in the
meantime (these may be "cumbersome" but perhaps could lead to something
useful). I agree that there are probably not that many lawyers on this list,
but some may have patent experience such as writing applications for
non-software patents (e.g. 2 electronics ones in my case) so I think it is
useful to discuss ideas for potential workarounds. Perhaps later the W3C can
get a legal opinion on any sound proposals.
And I think these are in the order of importance! 1 needs to be done to stop
new issues arising every week, but will take a while; 2 would stop this one
specifically but could set a precedent to discourage other opportunist
"patenteering". 3 is to provide a fallback to allow people to get on with
life without lawyers breathing down their necks!
Neil.
