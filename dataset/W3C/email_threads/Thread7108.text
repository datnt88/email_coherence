The mapping is the resource and the resource always exists, which is
is why 404 Not Found does not imply that the resource does not exist,
but rather says that no current representation of the resource exists
at the time of the request.
But the HTTP spec says:
The DELETE method requests that the origin server delete the resource
identified by the Request-URI.
What does "delete the resource" mean if resources always exist? Should
DELETE be understood to clear the mapping from resources to representations?
Paul Prescod
The mapping is the resource and the resource always exists, which is
is why 404 Not Found does not imply that the resource does not exist,
but rather says that no current representation of the resource exists
at the time of the request.
The DELETE method requests that the origin server delete the resource
identified by the Request-URI.
This has always puzzled me. From an RDF perspective, where we say little
more than 'URIs are names' it is often easier (esp. for the logicians) to
take the perspective that there are no 'dangling URIs' that name nothing;
and that 404 and DELETE correspond to a lack of information about the
named thing, rather than to the named thing not existing at all. If the
consensus here is that there are some URIs that denote nothing, we ought
to take that message back to the RDF groups.
Dan
The DELETE method requests that the origin server delete the resource
identified by the Request-URI.
Yes, but as far as the interface is concerned they mean the same thing.
What is the difference between a resource that is DELETEd and later PUT,
versus one that has no mapped representations between those two events?
There are a lot of things not mentioned in the HTTP specification, for
one reason or another unrelated to technology.
....Roy
Am Donnerstag den, 12. September 2002, um 21:51, schrieb Dan Brickley:
The mapping is the resource and the resource always exists, which is
is why 404 Not Found does not imply that the resource does not exist,
but rather says that no current representation of the resource exists
at the time of the request.
The DELETE method requests that the origin server delete the resource
identified by the Request-URI.
Can this puzzling perhaps be resolved by looking at how URIs are
used in the different aspects/layers in the architecture?
In one layer all URIs are regarded as "names" for
[insert your favorite term]s. A name always exists. A name cannot be
deleted. Formerly, those URIs were called URNs until it was discovered
that every URI can be used as name and, for example, http URIs are
good candidates for XML namespaces.
In another (sub-?) layer URIs are used for "retrieval" of
representations.
Representations can be missing (404), they can be removed (DELETE)
or even replaced (PUT). Formerly those URIs were called URLs, until
it was discovered that every URI can potentially be used for
retrieval.
Now for the term "resource".
If, as Roy said, the mapping is the resource, then HTTP is not about
manipulation of resources but about manipulation of representations.
In this terminology one could reformulate, e.g. "302 Found"
(RFC 2616 10.3.3) from:
"The requested resource resides temporarily under a different URI..."
to
"The requested representation can be found temporarily under a
different URI..."
or
"The requested representation is temporarily the same as for another
URI and can be retrieved there..."
No, this is not a proposal to reformulate RFC 2616. ;)
//Stefan
If you DELETE something twice, you usually expect an error message or a
core dump. If you clear a list twice, you usually expect the second
clearing to be a no-op. Also, if it is valid to clear the unmap
representations from resources, why not have methods that allow me to
unmap chosen representations instead of all of them.
Some days it feels like exegesis: especially in the area of of the
method definitions. A person can chew up hours on: "What does DELETE
mean? What does PUT mean? What does POST mean? When is it appropriate to
use which? Why do we have these particular methods and not others? Why
not CREATE" etc. etc. ad nauseum
Paul Prescod
Do you mean 'delete' in the classic programming language sense (releasing
system memory, calling destructors, etc.) or do you mean the HTTP concept of
DELETE?
I haven't followed the discussion of the response status codes for
idempotent PUT/DELETE pairs, but it sounded like HTTP's DELETE should return
a 2xx success even if a GET would return a 404. What's the official word on
this?
