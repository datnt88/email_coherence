I tried to get information about the global object for JavaScript. There is no information about it in neither JavaScript Core/Reference nor HTML Specification, so I went through the ECMAScript specification once again and found out that in a chapter about global object it states that 'the HTML document object model states that the window property of the global object is the global object itself'. However, the DOM doesn't state anything like that. And reading the discussion on this topic in the DOM mailing list a question came up. How can I refer to the global object in the HTML? What is its name? Is it window or document or maybe even something else? Does document.open means the same as window.open? Because I am afraid that when using, for instance, window.open it is possible that a browser (not IE and not Netscape) won't support it and the whole script wouldn't run as it was intended!!!
I think it's normal that the DOM does not state anything about what the
global object in Javascript is : the EcmaScript concept of a global objet is
absolutely not related to the DOM specification, but only to the
specification of Javascript.
Now EcmaScript's specification does not state in any way how to access
explicitly the global object (due to its very globality) : but every
variable which is not the property of any other object is implicitly a
property of the global object. This is the reason why the "window" variable,
which is a reference to the global object itself, is also a property of the
global object.
Concerning the open() method :
a) window.open() is a function of the global object, so you can inplicitly
call open() without the window prefix (in fact you could also write
window.window.window.open(), since window points to itself). The effect of
the open() method of the global object is to create a new navigator window
and return a reference to it.
b) document.open() is a function of the document object (which is not the
global object) : this method opens a new HTML stream into the current
document (there are as many document objects as frames and windows). After
document.open() is called you can invoke the document.write() and
document.writeln() and finally document.close(), which closes the stream.
-----Message d'origine-----
De : www-dom-request@w3.org [mailto:www-dom-request@w3.org]De la part de
Marek Kielar
Envoy? : dimanche 6 juillet 2003 22:16
? : www-dom@w3.org
Objet : What is the status of window object and such?
I tried to get information about the global object for JavaScript. There is
no information about it in neither JavaScript Core/Reference nor HTML
Specification, so I went through the ECMAScript specification once again and
found out that in a chapter about global object it states that 'the HTML
document object model states that the window property of the global object
is the global object itself'. However, the DOM doesn't state anything like
that. And reading the discussion on this topic in the DOM mailing list a
question came up. How can I refer to the global object in the HTML? What is
its name? Is it window or document or maybe even something else? Does
document.open means the same as window.open? Because I am afraid that when
using, for instance, window.open it is possible that a browser (not IE and
not Netscape) won't support it and the whole script wouldn't run as it was
intended!!!
But I believe that the DOM Specification does not state that the global object HAS the window property at all, hence that the window property points to the global object.
Moreover, I think that the DOM Specification also does not state that the global object has the document property. (However, can a property have properties, I'm not sure about that, because if it cannot then the document property of the global object would have to point to another object which name could have been 'document' and therefore the 'document' object could then be accessed without any reference to the global object. Is that correct?)
I think what actually needs to be done is some containing standard needs to be developed to standardize the window object - perhaps the "Viewport Object Model." It's proper that the window object is not entirely addressed by the DOM (though it is erroneously, in my opinion, addressed by the DOMHTMLHTMLElement in places). The DOM is for documents, and the document does begin at the HTML element.
But the window object exists in all cases - there is always some User Agent presenting the document - and W3C text often refers to "The Viewport" and its "Canvases." A Spec ought to be written to nail down exactly what these are.
As it stands now many methods and properties belong in the window object, but without a Viewport OM the W3C is unable to specify them. Further, in the case of framesets (which are defined by the W3C), each Frame really ought to be an object that inherits from Viewport (resolving a lot of inconsistencies) rather than the long list of exceptions required today.
-Chris "SoopahMan" Moschini
I don't intend to state the obvious, but since it's not being mentioned
in your message:
The AbstractView object is accessible through the document, and the
document is accessible through an AbstractView.
Every event has a view object associated as well.
--Brad Pettit
Of Chris Moschini
I think what actually needs to be done is some containing standard needs
to be developed to standardize the window object - perhaps the "Viewport
Object Model." It's proper that the window object is not entirely
addressed by the DOM (though it is erroneously, in my opinion, addressed
by the DOMHTMLHTMLElement in places). The DOM is for documents, and the
document does begin at the HTML element.
But the window object exists in all cases - there is always some User
Agent presenting the document - and W3C text often refers to "The
Viewport" and its "Canvases." A Spec ought to be written to nail down
exactly what these are.
As it stands now many methods and properties belong in the window
object, but without a Viewport OM the W3C is unable to specify them.
Further, in the case of framesets (which are defined by the W3C), each
Frame really ought to be an object that inherits from Viewport
(resolving a lot of inconsistencies) rather than the long list of
exceptions required today.
-Chris "SoopahMan" Moschini
1) Agreed, though this text in the definition obscures what exactly a View is:
A document may have one or more "views" associated with it, e.g., a computed view on a document after applying a CSS stylesheet
Try to mend this with:
There is at most one viewport per canvas, but user agents may render to more than one canvas (i.e., provide different views of the same document).
- http://www.w3.org/TR/REC-CSS2/visuren.html
What then is a "View?" Does this mean there is in fact a Document, a connected set of Canvases, and for each Canvas an AbstractView and DocumentView? If so - where is the definition of Canvas?
2) This is stating the obvious but AbstractView has no definition besides its relationship to DocumentView (meaning basically, it is a sibling to Document). If AbstractView in fact represents the window object, shouldn't there be a "View" (presumably the implementation of "Abstract"View) and some properties underneath it, such as height and width?
-Chris "SoopahMan" Moschini
A canvas is a screen area which had been prepared to receive painting.
An HTML document, and its associated DOM tree, could be displayed in
more than one canvas but it doesn't make sense to paint the same HTML
document on the same canvas. The View could be a Canvas (and in fact, is
a Canvas in IE/Netscape-like browsers) but not necessarely: a voice
browser will never display the document but stil provide a View of it
using voice.
AbstractView is meant to address to be the base of all possible views:
VisualView, VoiceView, etc. and it does not imply height and width. You
probably want to have a look at
As of today, we still don't have plans to move further DOM Level 3 Views
and Formatting since we didn't get enough interest on the draft.
Philippe
AbstractView is meant to address to be the base of all
possible views: VisualView, VoiceView, etc. and it does
not imply height and width. You probably want to have a
look at
As of today, we still don't have plans to move further
DOM Level 3 Views and Formatting since we didn't get
enough interest on the draft.
What would constitute sufficient interest? I can think of several
developers with me at Hiveminds that would be very interested, at
the least... .
Many browsers are making an honest push today to implement the
standards completely exactly as they're written - but this
philanthropy runs into trouble when holes in the standards like
this are left to lie. Opera is going to add text selection to its
browser soon, but what element should .getSelection() be called
from? Having VisualView hammered out could help make this clear,
even if it's to have it well-defined yet not include selection
(driving Opera to the document element).
I won't say it's a stronger priority than say, CSS2.1 and 3,
but there's many somewhat-similar implementations out there with
no standards to work from whatsoever - just the de facto that
most involved with the W3C denounce in other areas, like coding
to the de facto IE standard of document.all.
-Chris "SoopahMan" Moschini
Remember, the DOM isn't a browser API. It's a Data Model API which browsers
happen to be using.
Many of the things a browser is going to want to do will be outside the
DOM's scope, and might be better standardized by another committee. Views
may or may not fall into that category.
Joe Kesselman, IBM Next-Generation Web Technologies: XML, XSL and more.
"The world changed profoundly and unpredictably the day Tim Berners Lee
got bitten by a radioactive spider." -- Rafe Culpin, in r.m.filk
