I've just spent a few hours reviewing this list's archive and managed to
answer almost all of my questions about NodeLists. Damn they're weird. ;)
There was one question to which I couldn't find an answer, though:
Since a NodeList is a "live view" into the tree, what does nextSibling do on
items in a NodeList? It would seem like it should return the next sibling in
the tree, not the next sibling in the NodeList. However, that makes stepping
through items in an "abstract" NodeList (like that generated from
getElementsByTagName) a little difficult. I haven't looked at DOM2 yet, but I
imagine that this problem is solved by iterators.
But what's the answer in Level 1?
Thanks much,
-H
Harold Poskanzer Senior Software Engineer
Infoseek Corporation hmp@infoseek.com
Sunnyvale, CA 94089 http://www.infoseek.com/
Infoseek. Once you know, you know.
When you've fetched a Node out of a NodeList, it doesn't know it
was *in* a NodeList, so nextSibling is the Node on its right
in the tree, not its successor in the list.
Use the index method, being careful to note what you are doing
(i.e. if you are removing each node as you find it, always ask
for index(0) each time).
John Cowanhttp://www.ccil.org/~cowancowan@ccil.org
You tollerday donsk? N. You tolkatiff scowegian? Nn.
You spigotty anglease? Nnn. You phonio saxo? Nnnn.
Clear all so! 'Tis a Jute.... (Finnegans Wake 16.5)
on
in
stepping
getNextSibling() called on a Node returned from an iterator, a NodeList,
etc. should return its sibling in the tree. getNext (or whatever we call
it) on an iterator will return the next node in the set being iterated over.
There is no "next" operation on a NodeList; you get the next by incrementing
the index passed to the item() method.
I prefer to think of all NodeLists (and iterators) as abstract references
into the tree rather than physical lists into which nodes are copied from
the tree.
Does that help?
Mike Champion
