I am responding to David Kemp's comments about password authentication
separately, because I believe the topic is important enough to deserve
separate treatment.
(From dpkemp@missi.ncsc.mil[SMTP:dpkemp@missi.ncsc.mil]:)
(6) Password authentication (particularly for clients) is extremely
desirable. Right now, it has to be done at an application protocol
level (and differently for every protocol). Having part of
authentication occur at the SSL level and part at the application
protocol level is not desirable.
No. Password "authentication" is not an acceptable means of
establishing
a secure connection. It may be acceptable at the application layer,
for example to control access to particular portions of a html document
tree. In that case, the basic authentication or digest authentication
occur at the application layer, independently of whether transport
layer
security is being used. I don't agree that that layering scheme is
"not desirable".
Normally, protocol definitions should provide mechanisms, and
configuration
options should be the means of enforcing policy. However if the STLP
is defined in such a way as to allow weak authentication, it will not
be meeting it's goals. As stated in the SSL spec, goal number 1 is
cryptographic security. I hope most TLS working group members agree
with that.
I strongly recommend that STLP contain no provisions for password
authentication.
To me, the issue is not whether password authentication is weaker than
authentication by certified asymmetric key; most everyone would agree
that this is the case. Unfortunately, for reasons ranging from
established practice to portability issues to plain ignorance, many
people will likely continue to use passwords for authentication for
some time to come, whether protocol authors want them to or not. The
issue at hand is therefore whether password-based authentication must
continue to be as weak as the encryption available (which is often, as
we all know, woefully weak), or whether, by our protocol design
choices, we can make the security of password authentication as strong
as it can possibly be.
Nobody advocates forcing people to use passwords (even if it were
possible to do so). The question is whether we can force them not to,
and what to do given that we can't. Anyone who doesn't trust
password-based security is always free not to support it; in fact, it
takes an explicit decision by both parties to share a password before
password authentication even becomes possible. People who make that
decision are, in my view, no different from those who accept 40-bit
encryption, or proprietary, relatively unstudied RC4 over
heavily-analyzed (triple-)DES; we cryptographers might prefer that they
choose otherwise, but we recognize that security must sometimes yield to
other practical priorities.
Daniel Simon
Cryptographer, Microsoft Corp.
dansimon@microsoft.com
I am resending this email with apologies, and " " attributions
corrected....
(From dpkemp@missi.ncsc.mil[SMTP:dpkemp@missi.ncsc.mil]:)
(6) Password authentication (particularly for clients) is extremely
desirable. Right now, it has to be done at an application protocol
level (and differently for every protocol). Having part of
authentication occur at the SSL level and part at the application
protocol level is not desirable.
I have to agree with Mr. Kemp. Passwords for purposes of authentication
do not belong in a protocol that claims to provide cryptographic
security. If you really want to use passwords, you can always do it in
an application level protocol.
What's wrong with public key cryptography?
Sure we spend a lot of money, but that doesn't mean | Tom Weinstein
we *do* anything. -- Washington DC motto | tomw@netscape.com
Personally, I love public-key cryptography. Unfortunately, many people
are not ready to convert to it yet, for at least two reasons I can think
of offhand: there are entire infrastructures out there based on
passwords, and people are loath to abandon them for a new technology
that has had much less time to "settle"; and the technology for
transporting asymmetric private keys to arbitrary trusted machines
safely and conveniently is not yet widely available.
Now, if I believed that the force of my eloquence could quickly convince
them all to follow us cryptographers into a magnificent new era of
public-key cryptography, then I would forget about trying to stick
passwords into this working group's protocol. But I can't. And that
means that passwords will continue to be widely used *regardless* of
what we do. Moreover, a large fraction of those passwords will, for
reasons we're all familiar with, be sent (or used to compute
authentication responses sent) over connections only protected by 40-bit
encryption keys. Passwords used in that manner are subject to offline
brute-force attacks, first on the 40-bit encryption, then second (if
necessary) on the password-based response.
On the other hand, if we incorporate password authentication into the
protocol, then we can protect those passwords by basing the
challenge-response protocol on both the password and the
automatically-strong MAC key exchanged during the handshake. This will
protect the password from offline attacks, making even a poorly chosen
password a useful security tool (assuming that it's kept secret, and
that the server doesn't permit unlimited online trial-and-error
attacks).
That's still not as secure as public-key cryptography, of course. But
it's better than what password users will have otherwise. And the cost
to people who *don't* want to support or implement passwords is *zero*.
No extra code, no extra administration, no extra security risk. Only
the vague feeling of unease over somebody somewhere else getting a
chance to make a security decision that they (and I, to some extent)
disagree with.
Now, what's wrong with *allowing* password authentication into the
protocol?
Daniel Simon
Cryptographer, Microsoft Corp.
dansimon@microsoft.com
A great deal, but I'm sure you already know most of it. It's big, it's
slow, it's expensive to license (for a few more years anyway), it requires
an infrastructure that is not in place (partially due to licensing issues
of the underlying technology), it presents usability issues (you can type
your password into any machine anywhere, but have to somehow carry your
private key around with you) and on and on.
Public key is also the "wave of the future." When "the future" will be
remains to be seen, despite repeated assurances of RSN. It's a great
technology, but mandating use of it and nothing else seems rather
presumptuous and arrogant.
- Marc
