From: Jean Paoli jeanpa@microsoft.com
Subject: SD4 - Schema Format
Date: Thu, 15 May 1997 21:14:19 -0700
SD4 - Schema Format
Schemas are structured data, yet their current representation (DTD)
does not leverage work invested in the XML document instance. Tools
and solutions will be developed for XML in the following categories,
and more besides: digital signatures, structured attributes,
specialized editors, indexing services, repositories, version control
systems, database representation, etc. These XML tools will be mass
market, and so will be ubiquitous, high-quality, and expected by all
users.
Further, in all our discussions with groups such as DSIG and
W3C-Labels, we found it artificial and difficult to make a clear
distinction between the requirements of schemata and the requirements
of structured data generally.
An example of this problem is the following: we want a mechanism to
digitally sign a page on the Web by embedding a signature string in
the page. Well, we also need a mechanism to digitally sign a schema on
the Web. If we keep the instance syntax and the schema (DTD) syntax
differents, we have to invent 2 different mechanisms to sign them.
And you can think about a thousand of similar problems.
Proposal: All machine-readable schemata, whatever their other
characteristics, are structured data, and so XML itself is a good
carrier syntax for schema expression. We should design a general
structure for writing schemata in XML.
In other worlds, we propose to keep the existing DTD syntax for
compatibility reasons and to define another syntax which will
grand-father the current DTD features but will be using the current
instance syntax (i.e. well formed tags and attributes)
This was discussed *very* fully when we decided to stick with SGML's syntax
for DTDs. Calling it a schema rather than a DTD doesn't change the basic
issue. Reaching agreement on an instance syntax would require a lot of
time, which I don't think we can afford at the moment, given the enormous
amount we have still to do.
The biggest problem I have with instance syntax for DTDs is how to allow
internal DTD subsets. I haven't seen any solution proposed for this.
There are some things I think you really need to be able to put in an
internal subset, mainly information that is needed to get the right grove:
- general entity declarations (especially for entities specific to the document)
- which element types have element content v mixed content
- default values for attributes
- which attributes are ID attributes.
Will all conforming XML parsers be required to support both syntaxes?
If yes, then you've just substantially increased the amount of work required
to implement an XML parser.
If no, then you've just thrown away interoperability.
Neither option looks very attractive to me.
James
From: James Clark jjc@jclark.com
Two comments:
1) We have very clear goals and a timetable for XML 1.0. When the draft
causes responses, like some of these (&amp; I am certainly not saying they are
not good ideas), that conflict with our goals and timetable, we should
push ahead to finish XML 1.0, though certainly with the addition of namespaces.
(By the way, I am interested to know in the Microsoft namespace model how they intend that
various content models from various DTDs intertwine and still retain validity.
Does everything have an (implicit) declared content type of #ANY in their scheme?)
You cannot have a single markup syntax that is optimal for every purpose.
So maybe XML 1.0 (1997) is optimised for perl hackers and XML 2.0 (1998)
will be optimised for database transfers. But people who need XML 2.0 can
use XML 1.0 in the interim, with only slight speed penalty.
In other words, I think XML is simple enough that it can widely used in industry,
but that wide deployment will be an enormous generator of new requirements and
goals. This is why we maybe
* need to be disciplined to get at least XML 1.0 finished,
* need to keep SGML compatibility, because otherwise XML will fragment into a million
incompatible pieces: SGML provides at least a base by which we can say
"this wheel has been already invented" or "if you need this extra feature,
bump yourself up to some XML-like form of simple SGML"
* make sure that XML doesn't grow into SGML, but keeps its identity as a small
language (using the 20 page rule)
2) There is an idea in the background that you cannot use DTDs to specify
enough usful information about elements types. I hope HTML people realise that
in SGML (&amp; XML?) you can add fixed attributes to element types that reference:
* PI entities, that allow you to pass any instructions that will help
process the element.
* NOTATIONs, that allow you to specify the format of the contents of the
element.
So there is no need to extend or replace DTDs with any new tags to
tell you what is in a element, or how it should be processed.
So the infrastructure is already there. We are just missing agreed on
notations and PIs.
For example:
!NOTATION comma-delimited-data
PUBLIC "IDN//W3.ORG//NOTATION XML comma delimited data//EN"
!NOTATION pipe-delimited-data
PUBLIC "IDN//W3.ORG//NOTATION XML pipe delimited data//EN"
!ATTLIST database
xml-notation
NOTATION (comma-delimited-data | pipe-delimited-data)
#IMPLIED
lets you have documents like:
dog,rover,stinks
cat,happy,scratches
In other words, you can, with nice simple XML as it now stands, embed your
own particular highly efficient data. XML becomes more like a wrapper. You
get the best of both worlds, maybe: you get a standard syntax for metadata,
and as efficient (and proprietary) as you want for the contents.
SGMLs main strength (and HTML) is that it lets you embed other notations:
you can use it for what it is good for. I don't think we should expect XML to
be otherwise.
Rick Jelliffe
The new types of schema that are being proposed include a lot of
things that are not covered by DTDs. Thus we have three choices:
1. use XML syntax
2. radically extend DTD syntax
3. invent a new syntax
Of these, the first seems desirable, the second questionable, and
the third idiotic.
As with data typing and namespace issues, I think this new work belongs
not in XML-lang but in a new small volume in the lang/link/display
series.
This is not realistically achievable in the July 1 timeframe. It's
hard and is going to require thorough exploration. -Tim
I'm not sure what I think of this one yet philosophically--that is,
it sounds attractive in theory--but I do know that given SGML
compatibility issues and the effort it would take to put something
like this into the XML-lang spec at this time, accepting this
proposal would be subjecting the XML design process to a minimum
six month delay/extension.
Given that we have designed XML not to need a DTD for many light weight
applications and given that the current syntax works when a DTD is
needed, I'd have to hope we don't feel we need to do this now.
paul
