Addressing ACTION: 2001-08-24#8 Dave Beckett
Write up a proposed resolution for reifying using XML attributes
anly (sic)
The RDF XML syntax defined in M&amp;S allows properties to be written as
XML attributes in the Qname form, with values that are strings.
These are then turned into RDF statements with a string object. The
syntax also allows the rdf:type property to be used as an attribute
with the string value interpreted as a URI-reference.
M&amp;S defines explicitly other properties including rdf:subject,
rdf:predicate and rdf:object
In summary, these take as values:
Property Property Value
rdf:type URI-reference
rdf:subject URI-reference
rdf:predicate URI-reference
rdf:object URI-reference or literal
These can be used in this attribute abbreviated form since they match
the grammar propAttr or typeAttr (for rdf:type).
Testing the attached example with parser implementations gives
different results for the statement values - some literals,
some URI-references.
Thus, we need to clarify what is allowed here.
Proposed clarification / resolution, test case.
For properties encoded in XML attribute form, the attribute value
is interpreted as a literal for all properties except rdf:type
for which it is interpreted as a URI-reference.
The attached N-Triples defines the model produced by the attached
RDF/XML.
Consequences:
rdf:subject and rdf:predicate if used in XML attribute form will
generate literal values which are presently forbidden (I think!)
or maybe just very unexpected.
If you want to use rdf:subject, rdf:predicate properties, encode
them in the property element form (propElt).
rdf:object can be used but can only take a literal value.
Dave
Umm... I'm running into the same sort of use/mention issues
here as are all over the RDF 1.0 spec.
The fact that both XML attributes and RDF properties have
values is one source of confusion.
The values/objects of statements whose predicate is rdf:type are
not constrained at all, as far as I know, let alone
being constrained to a URI-reference.
i.e. it's not the case that
rdf:type rdfs:range xmlschema-datatype:URI-reference.
right?
But no matter... the test case you give is clear enough...
I'm not a big fan of this exception. While we're cleaning up
this mess, I suggest we get rid of it.
I think not. They might not make much sense, but they're not forbidden.
quite possibly.
Yup. rdf:type too, I suggest.
I suggest the expected results are:
_:id1 http://www.w3.org/1999/02/22-rdf-syntax-ns#type
"http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement" .
_:id1 http://www.w3.org/1999/02/22-rdf-syntax-ns#subject
"http://example.com/resource" .
_:id1 http://www.w3.org/1999/02/22-rdf-syntax-ns#predicate
"http://example.com/predicate" .
_:id1 http://www.w3.org/1999/02/22-rdf-syntax-ns#object "literal" .
Dan Connolly, W3C http://www.w3.org/People/Connolly/
Since Dave and DanC seem to be in agreement wrt the resulting
N-Triples, is anyone aware of implementations that differ
from this interpretation? [FWIW, this output matches the
ARP and SiRPAC parsers.]
Art Barstow said:
No, Dan changed rdf:type to take a literal value which is a change
beyond what we can justify as a cleanup just because it makes the
grammar slightly neater, IMHO.
The first triple in my original N-Triple output was
_:id1 http://www.w3.org/1999/02/22-rdf-syntax-ns#type http://www.w3.org/1999/02/22-rdf-syntax-ns#Statement .
The original grammar is pretty clear on this point, it intended
rdf:type to take a URI-reference. rdf:type may also match propAttr
but the rdf:type property has a privileged position in the syntax
such as its generation from typedNode and this is another place.
[6.10] propAttr ::= typeAttr
propName '="' string '"' (with embedded quotes escaped)
[6.11] typeAttr ::= ' type="' URI-reference '"'
[6.14] propName ::= Qname
[6.19] Qname ::= [ NSprefix ':' ] name
-- http://www.w3.org/TR/1999/REC-rdf-syntax-19990222/#propAttr
onwards
(plus modifying type to be rdf:type as we have already decided)
Dave
Dan Connolly said:
I would say no.
I am describing the RDF/XML syntax as described in RDF M&amp;S which does
not require or use RDF Schema or XML Schema. The restrictions is on
how the rdf:type property is used in the syntax as an XML attribute.
This is mostly done in the grammar EBNF. The syntax references I
pointed out in:
Note: This is about the use of rdf:type as an attribute in *this* XML
syntax. It does not restrict what rdf:type can point to in the model
or of course, anything in other syntaxes.
Although, for all uses I can remember in RDF/XML rdf:type is used
with a URI-reference, the following is perfectly legal RDF/XML:
and generates
http://example.org/ http://www.w3.org/1999/02/22-rdf-syntax-ns#type "literal" .
No. This part of the syntax has a legitimate use and is not too
difficult to work out what the grammar meant. We should not just
throw out syntax with no good reason.
After emailing that, I changed my mind on illegal - unspecified would
be better.
Dave
