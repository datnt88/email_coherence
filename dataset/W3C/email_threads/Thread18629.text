Hello all,
Regardless of how an unparsed entity is indicated, a copy of the entity must
be brought into the XML document. XFDL uses base 64 encoding to transform
unparsable entities into character content for inclusion in the hash value.
It is important to capture non-human-readable resources such as images in
the hash as an essential part of capturing the context leading to a
signature. The user does not see start tags, attributes, and character
content. In a legal sense, a user who affixes a digital signature is
authorizing that *what they are looking at* is correct. It is necessary to
combine the input values given by the user with the questions asked,
foreground and background colors, fontinfo, images, GUI object locations,
etc. A repudiation argument could then include graphically rendering the
hashed message.
Here's an example. Suppose we didn't include images in the signature. This
could be the image that tiles the background, the image of the company logo,
the image that shows which credit card will be used, a drawing or picture of
what is being negotiated, etc. Removing the image can directly alter the
meaning of the transaction, and it is even possible to have indirect
consequences. For example, not having the image could cause other objects
whose positions are based on the image's bounding rectangle to change
positions. This could alter the meaning of the agreement.
If only a reference to the object is kept, then the object can never be
moved. If it does, then changing the reference breaks the signature.
John Boyer
Software Development Manager
UWI.Com -- The Internet Forms Company
jboyer@uwi.com
Hi Donald,
All the world is not a form see by a human being. Many uses or potential
uses of XML DSIG are for protocol messages, such as in IOTP or eCheck,
where internal structures are being signed. Later messages are frequently
constructed containing some pieces and signatures from previous messages
(which particularly motivates canonicalization in some cases).
The form is a useful paradigm in terms of getting human developers to
understand the problems that may arise in systems which are not forms based.
I use the form example because, A) I'm good at it, and B) everybody
understands it. But transaction non-repudiation is transaction
non-repudiation regardless of how you choose to represent the transaction.
You either have or you do not have sufficient information to make assertions
about the nature of a transaction. According to the digital signature
guidelines of the American Bar Association, a digital signature provides
authentication and authorization. It authorizes that a given signer intends
for the transaction to have a legal effect. If we cannot accurately say
what the transaction was, then the digital signature does not achieve its
essential purposes.
Also, based on your other email to me, let me reiterate that I've been
talking all along about the ability to sign parts of the document. Multiple
overlapping signatures using signature filters, inclusion versus exclusion
of elements (be they form elements, structure elements, or whatever two
parties mutually decide represents a transaction).
The basic signature structures have to be able to sign things that are
sometimes
present and sometimes absent.
You can't sign it if it is absent. Furthermore, how can two parties agree
on it being part of a transaction if it is absent? How can they resolve a
dispute about the nature of the transaction if a component necessary for the
interpretation of the transaction is absent? Although it happens in the
paper world (e.g. not actually reading the fine print), it is at least
supposed to be the case that we don't sign if we don't see the whole
agreement.
With respect to signature filters, we can't write a generic XML syntax that
prevents the developer from excluding essential pieces of an agreement
(because this requires an understanding of semantics, and XML doesn't have
that understanding). But we can do our best to understand how signed XML
will get applied and try to make behaviors that result in good signatures
within the body of XML applications that we can envision.
If it is desired that something be bound into a signature, it suffices to
include its hash.
It does not always suffice, as you point out below, and which is the only
real point I'm trying to make.
Whether you also need the original bits is application
dependent. It depends on whether you want to provide and prove the original
message or merely be able to prove there was a message and disprove false
claims about its contents.
OK, so now I think we are agreeing. It is necessary for a signed XML spec
to include the ability to incorporate externally defined/unparsed entities
achieving transaction non-repudiation.
Thanks,
John Boyer
Software Development Manager
UWI.Com -- The Internet Forms Company
jboyer@uwi.com
John,
I am certainly pushing a bit too far but, considering the lack of conformity
in the rendering of document by commercial browsers, I feel that you'd
better save a copy of the user-agent along with the transaction. The point
is that in most circumstances, signing at the presentation layer does not
make a lot of sense or, at least, does not increase the overall security of
the system. For form signing by human being, I would rather propose
signature of the message semantics and ensure the reliability and conformity
of the user-agent (i.e. plug-ins or style sheet). As we already do with
smart card readers, it shall be possible to require authentication of the
user-agent in the signature process.
This is certainly a requirement, which is actually considered by the Digital
Signature for XML Proposal. However, the ability to package
external/unparsed entities does not imply that the Signature Standard shall
require compliant implementations to "chase" such external entities. This
only implies that the Signature Standard should allow authentication of
packaged entities. Chasing and embedding such external entities in the
signed document shall fall under the responsibility of the application
framework that defines such a requirement in the first place.
Sincerely,
Richard D. Brown
