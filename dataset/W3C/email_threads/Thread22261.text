Please see http://bclary.com/dom-ts/readme.html for an example of
using jsUnit 1.3.0 in the DOM Test Suites.
This online example contains the full tests for DOM Core 1, DOM Core 2
and DOM HTML 2 as of June 21 and can be run in either Mozilla or
Internet Explorer. It has been tested on Windows 2000 using Mozilla
1.0.1 and Internet Explorer 6.
You can select the implementation to use, the content type, several
parser options and either a test suite or individual tests.
You can browse the directories and tests by visiting
http://bclary.com/dom-ts/ .
The script DOMTestCase.js, the transforms test-to-ecmascript.xsl and
test-to-jsunit.xsl were patched as well as several tests. The readme
contains the details and rational behind the changes.
http://bclary.com/dom-ts/changes.diff contains a diff showing all the
changes.
I created jsUnit Test Suites (by hand) to replace the 'all' versions of
the tests. I did not attempt to modify the transforms to produce these
suites although that should be relatively easy for someone with more
skill in XSL.
A few comments about testing results/strategies
Mozilla will have problems with the Applet tests if you try to run the
DOM HTML Level 2 tests as text/xml. You can either disable Java or you
can choose the non-Applet/non-Object test suite if you wish to test DOM
HTML Level 2 as text/xml. There is no problem when testing DOM HTML
Level 2 as text/html.
Internet Explorer may have problems with the Applet tests if you try to
run the DOM HTML Level 2 tests as text/html. (IE fails all the DOM HTML
Level 2 tests if you run them as text/xml and it does not matter if you
have Java enabled or not). Again you can either disable Java or choose
the non-Applet/non-Object test suite.
Bob
Just to confuse things, I've been busy the last few days too.
Hopefully, Bob can reconcile these, but right now we are diverging.
I wasn't satisified with the test format in Bob's previous offering
since it didn't look much like a JUnit test and possible involved
putting stuff in JSUnit that was DOM Test suite aware (not sure about
that). JUnit had (but JSUnit didn't) have the concept of a TestCase
class. In most cases, you just let the framework create TestCase
objects that invoked your "test" methods by reflection. However, you
could create your own classes derived from TestCase as we do in the Java
tests.
In my variant of Bob's previous JSUnit, I've added an equivalent to the
JUnit TestCase class. The generated tests override the setUp, runTest
and tearDown methods of the test class. The tweaks I added are the
ability for the setUp method to mark the test as ignored (for example,
if the test requires entity expansion and the implementation doesn't
support it) or not ready (for async loading).
Here is a sample of a test body:
function attrname_runTest() {
var doc;
var addressList;
var testNode;
var attributes;
var streetAttr;
var name;
doc = this.builder.load(this.doc, "doc", "staff");
addressList = doc.getElementsByTagName("address");
testNode = addressList.item(1);
attributes = testNode.attributes;
streetAttr = attributes.getNamedItem("street");
name = streetAttr.nodeName;
assertEquals("nodeName","street",name);
name = streetAttr.name;
assertEquals("name","street",name);
function attrname_setUp() {
var attrs = [ ];
var features = [ ];
this.builder = getBuilder(this, null, attrs, features);
if (!this.ignored) {
this.ready = this.ready &amp;&amp; !this.builder.async;
this.doc = this.builder.startLoad("doc", "staff");
function attrname_tearDown() {
this.builder.close(this.doc);
this.doc = null;
function suite() {
var test = new DOMTestCase("attrname");
test.runTest = attrname_runTest;
test.tearDown = attrname_tearDown;
test.setUp = attrname_setUp;
return test;
The getBuilder() will cause the test to be ignored if the attributes and
features are not compatible with the builder. I've written a few
different builder implementations (MSXML, DOM 3 LS, Mozilla
document.load and an iframe loader). To change builders currently you
have to modify DOMTestSuite.js.
function getBuilder(test, contentType, attributes, features) {
// return new MSXMLBuilder(test, contentType, attributes, features,
"MSXML2.DOMDocument.3.0");
// return new DOM3XMLBuilder(test, contentType, attributes, features);
// return new MozillaXMLBuilder(test, contentType, attributes,
features);
return new IFrameBuilder(test, "text/html", attributes, features);
This setting uses the IFrameBuilder to load .html documents. Replace
"text/html" with contentType to load .xml documents.
I was not able to get notified when I trying to add an iframe
dynamically with document.writeln(), however it seems simpler to just
generate the iframe elements into the test HTML files.
Document loading is performed by two calls, startLoad() in setUp and
load() in runTests.
I've also added jsUnitCore.js to the files included in testRunner.html.
That allows tests that want to avoid path dependencies to access
jsUnitCore methods by using top.assertEquals(), etc.
I've run the DOM L1 Core and L1 HTML tests with Mozilla 1.0 for both XML
and HTML documents. Currently DOMTestSuite.js is hacked to suppress
tests that use the extended interfaces (now marked with
hasFeature("XML",""), since Mozilla XML doesn't attempt to parse the
document type declaration. The majority of failures are due to failing
to throw an exception.
Unfortunately, I was not able to run the tests on Microsoft Interface
Explorer. When the first test failed, I would get an exception not
captured message even though the runTest method was clearly within the
scope of a try/catch block. It is possible that I dorked something on
my machine settings that is causing it to act that way.
Modifications to the tests fell into these categories:
DOM L1 Core tests that depended on extended interfaces (CDataSection,
Entity, EntityReference, etc) were marked as requiring
hasFeature("XML","") as true.
Changed ignoreCase to "auto" on L1 Core hc_* tests and L1/L2 HTML tests
where HTML implementations are expected to return uppercase.
Changed some bad expected values on HTMLParam01 and 02.
My hacked version of JSUnit is http://home.houston.rr.com/curta/jsunit.zip
I've been running the DOM HTML Level 2 tests and have discovered
that running the tests on IE6 takes approx 3 minutes while running the
same tests on Mozilla takes approx 22 minutes. Has anyone else
had similar results? Is there something I need to set/change within the
Mozilla browser to make it run faster?
Be sure you are running the DOM HTML 2 tests as text/html. My
comparisons on a local webserver show on a PIII 700/Win2k box:
IE6 [214 seconds, text/html], [1238 seconds, text/xml]
Moz 1.0.1 [834 seconds, text/html], [1124 seconds, text/xml]
I tried to run Bob's tests on my Windows XP and didn't have lots of
success unfortunately.
I wasn't able to try with Mozilla 1.0.1 but both Mozilla 1.0 and 1.1
didn't run the tests.
IE6 becomes unstable when running the tests for Core (it crashed after 2
or 3 retries) but I managed to obtain a result for DOM level 2 HTML (see
attachment). That is interesting data for the WG since it shows that
some types in IE6 don't match the ones in the CR of DOM level 2 HTML.
There are some uppercase/lowercase issue as well and some of them are
probably errors in the tests themselves. A tagName will "BODY" if the
document was HTML 4, and "body" if the document was XHTML 1. If someone
has the output results from Mozilla 1.0.1, I'd like to have a look at
them.
Curt mentioned that createHTMLDocument and contentDocument tests were
missing so I started to work on them. I have 2 for createHTMLDocument
but are not able to test them for the moment unfortunately.
Philippe
I ran the tests again on a Pentium 4 1400MHz/Windows 2000 box.
native implementation
text/html
alltests-suite-no-applets
IE6 147 seconds
Mozilla 1.1a 1095 seconds
Philippe,
When you run the test with Mozilla, try it with a fresh profile to make
sure you haven't disabled features that are required for the framework
such as opening windows, setting status bar, etc. To create a new
profile, start mozilla like this:
mozilla -profileManager
After you create a fresh profile, can you run the standard jsUnit tests at
If you can not run the standard tests, open the JavaScript Console
(Tools- Web Developer- JavaScript Console) and copy/paste the error
messages into an email and send them to me please.
If you can run the standard jsUnit tests, please try the demo dom ts
with Mozilla again. If it fails to run, please use the JavaScript
Console and send me the error messages.
When you ran the DOM Core 1/2 tests with IE6 which implementation did
you use? native? MSXML 3 or 4? Which suite did you run? What version of
MSXML do you have installed? You can find the msxml*.dll files in
c:\winnt\system32\. Right click them and choose properties then the
version tab.
If no one else has the test results available, I will post them later today.
Bob
from the http://www.mozilla.org/ home page
Mozilla 1.1 Alpha Released
Mozilla 1.1 Alpha is our bleeding edge alpha release which is meant to
get wider testing for all the changes that happened on the trunk since
we branched for Mozilla 1.0. See the release notes to find out what's new.
The trunk is not really the best place to be testing at the moment. :-)
you can find zip files and installers for Mozilla 1.0.1 at:
I usually dl a zip version and unzip it into a separate location. It is
usually easiest when running multiple versions.
Bob
Are you experiencing the same performance issues with my variant of JSUnit
from earlier this week. A quick test this morning was about 350 seconds for
text/html on Mozilla 1.0 on a Pentium III 700.
Could not provide numbers for IE since any exception was stopping the tests
on my machine.
I did fix up a number of capitalization issues in the tests at that time
that may not be reflected in Bob's demo.
