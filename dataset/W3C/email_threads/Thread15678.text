Hi, David
I tend to agree with you. A very basic form, i.e. a single text field
with only one send button, can probably be considered accessible.
(Using a RETURN in the text field will activate the form.) If the
form uses buttons or other features, then probably currently it cannot be
considered generally accessible since button control varies so much
among browsers.
Using alternate methods, e.g. phone or e-mail, can work for some
web applications. However, there are many other applications for which
alternate means won't work, e.g. configurable database interaction. These
applications will be inaccessible.
A question that comes up is how can entities covered by Title II or Title III
of the ADA be in compliance when using web forms if the technology is
currently inaccessible? Could this state of technology be used to justify
a claim of undue burden?
Scott
Hi Scot!
At different times in my life, I might give different answers to this
question, but let's consider a couple of things. I may be stating the
obvious here, but please bear with me. Forms are variably accessible
depending on 1 the product, and 2 the reciever.
the product is the form and what has generated it. the reciever is the
"browser" if you will and the interface to it. these interact with each
other in subtle ways and a number of mixes emmerge. The purest
deffinition for access in this case is can a form be read, comprehended
and compleeted by anyone who has the mental cpacity to do so. the best
way to insure this as far as I can tell is to make the form a simple fill
in the blank rather than having buttons which imply and require the
application of something on the recievers end which may or may not be
present.
I hope this answers your enquiry or at least takes us in an appropriate
direction.
I tell people not to redesign their forms, just provide an alternate means
of access to them so that they may be serviced. for instance, can I email
my response or quiry? can I phone it in or mail it in?
cn I ask for a form in email which is structured differently but provides
the same data?
Thanks!
Hi,
A question I keep running into is whether forms are accessible or not.
Some aspects to take in consideration are:
1. If some blind computer users can access forms, are they accessible?
2. If a person has a preferred screen reader which doesn't work with
forms, are they accessible?
3. If it takes blind computer users three times longer to use forms
than sighted users, are forms accessible?
4. If blind users make more errors using forms than sighted users,
are forms accessible?
If forms are not considered accessible, what are the implications for
all those applications which let users interact with online databases?
Are all these applications inaccessible if forms are the only interface
provided? Does this mean that for online systems, non-form based
interfaces must also be provided?
If forms are considered inaccessible, what are the implications
under 504, 508, ADA etc?
Scott
Hands-On-Technolog(eye)s
touching the internet
voice: 1-(301) 949-7599
poehlman@clark.net
ftp://ftp.clark.net/pub/poehlman
in one sense, you have answered your own question. either it is
accessible or it isn't in regard the database forms. in annother sense,
there is always the answer of doing it in one of the old fashioned way.
although not accessible in the truest sense, it does provide an interface
of sorts to allow for postal mail or telephone interaction.
Hi Scot!
At different times in my life, I might give different answers to this
question, but let's consider a couple of things. I may be stating the
obvious here, but please bear with me. Forms are variably accessible
depending on 1 the product, and 2 the reciever.
the product is the form and what has generated it. the reciever is the
"browser" if you will and the interface to it. these interact with each
other in subtle ways and a number of mixes emmerge. The purest
deffinition for access in this case is can a form be read, comprehended
and compleeted by anyone who has the mental cpacity to do so. the best
way to insure this as far as I can tell is to make the form a simple fill
in the blank rather than having buttons which imply and require the
application of something on the recievers end which may or may not be
present.
I hope this answers your enquiry or at least takes us in an appropriate
direction.
I tell people not to redesign their forms, just provide an alternate means
of access to them so that they may be serviced. for instance, can I email
my response or quiry? can I phone it in or mail it in?
cn I ask for a form in email which is structured differently but provides
the same data?
Thanks!
Hands-On-Technolog(eye)s
touching the internet
voice: 1-(301) 949-7599
poehlman@clark.net
ftp://ftp.clark.net/pub/poehlman
Hands-On-Technolog(eye)s
touching the internet
voice: 1-(301) 949-7599
poehlman@clark.net
ftp://ftp.clark.net/pub/poehlman
to follow up on what Scott Luebking said:
The "return" behavior you mention is not common practice in all
browsers. But then, I seem to have a higher estimate of how much
form stuff is accessible.
Checkboxes can be usable if using Lynx with speech, if you
explain them before the checkbox occurs. There are examples of
forms with checkboxes and radio buttons that are accessible.
Lynx has an optional function which converts SELECT elements to
radio buttons. This is there by request from blind users.
Maybe you have to deprecate these features because of how other
browsers implement them. Then there is also the possibility of
trying through the browser guidelines to address the behavior and
gradually resurrect their accessibility.
One of the CSS functions we may want to look at is to reach out
to a set of items such as a checkbox and its label, and force the
activation sensitivity to spread to include all of them as one
atom. Is this at all clear? I mean that in a GUI you could
place the mouse anywhere in the set of items gathered by the
style and a click would still change the state of the checkbox.
For audio, you could perhaps activate a control hotkey any time
any of the sensitive material was being spoken, and the state
change would result. Or a query of the current clickable would
always read you the label. The latter version has a reasonable
chance of CSS2 support and could be recommended browser behavior
anyway.
-- Al Gilman
