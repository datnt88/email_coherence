Joe,
Because there is no way to set a default attribute, I have implemented
createAttribute to returned with an Attribute whose specified value is true.
Although adding 'specified' parameter to createAttribute might be useful for
Level 2 when DTD support is fleshed out, I would prefer to add
createDefaultAttribute method in Level 2 than having to worry about default
attributes being set via setAttributeNode(). If you set default attribute
for one element instance, it will have to be reflected in all other
instances of that element as well. It feels a bit hairy, don't you think?
Don Park
Docuverse
As far as I can tell, the PR doesn't state whether a newly-created
Attribute has its specified flag set true or false.
It would be safer to either make the intial value explicit, or (probably
better) pass it in as an argument to the factory.
Joe Kesselman / IBM Research
Unless stated otherwise, all opinions are solely those of the author.
As far as I can tell, the PR doesn't state whether a newly-created
Attribute has its specified flag set true or false.
It would be safer to either make the intial value explicit, or (probably
better) pass it in as an argument to the factory.
Joe Kesselman / IBM Research
Unless stated otherwise, all opinions are solely those of the author.
I think I've concluded that I was confusing my stopgap implementation of
default attributes with the real answer. In fact, Specified is a read-only
IDL attribute in the DOM spec, so it had better default to true if XML
Attribute objects returned from the factory are to be useful to DOM
applications. In Level 1, Parsers and other DOM generators will have to use
non-DOM methods to create and manage default Attributes.
Creating and setting an attribute on a node via the normal DOM API should
indeed set only the Specified attribute.
The longterm answer will probably be to hang the default attributes off the
DTD rather than attaching them directly to Elements, and to tell the
Elements to consult the DTD if they don't have a local value for a given
attribute. Among other things, that approach avoids duplicating default
attribute objects all over the tree and means that changes to the DTD will
immediately be visible throughout the document. It also nails down the fact
that if you want to change the defaults, you do so by talking to the DTD.
But default attributes are one of those areas that Level 1 left fuzzy, so
we'll probably have to wait for Level 2 to nail down the loose corners on
this issue.
Joe Kesselman / IBM Research
Unless stated otherwise, all opinions are solely those of the author.
