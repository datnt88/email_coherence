Hello Joseph, dear XML Signature specialists,
I would like to request a clarification on Canonical XML
(http://www.w3.org/TR/2001/REC-xml-c14n-20010315).
At http://www.w3.org/TR/2001/REC-xml-c14n-20010315#Terminology,
Canonical XML says:
The canonical form of an XML document is physical representation of the
document produced by the method described in this specification. The
changes are summarized in the following list:
* The document is encoded in UTF-8
There are numerous applications (parser testing, digital signatures,
encryption) where it is important to have an actual physical representation
for simple octet comparison or for input to cryptographic algorithms
that usually take octet streams as inputs.
However, it has recently come to my attention that there are also some
attempts to use Canonical XML (or Exclusive XML Canonicalisation, which
inherits this aspect of its definition from Canonical XML) in other
situations, such as purely abstract modeling and comparison of XML
documents or XML fragments, or for API definitions.
For abstract modeling, the encoding in UTF-8 irrelevant and confusing.
For API definitions, specifying the encoding is crucial, but it may
be counterproductive to use UTF-8 in a context where UTF-16 is
widely used (e.g. Java, Python).
Although not appropriate in these cases, it seems to be difficult for
users of Canonical XML to abstract them from UTF-8 where necessary.
I therefore propose to add some clarification. As a first actual
text proposal (may need some additional work), I propose to
add a note at the end of Section 1.1, Terminology:
Note: Canonical XML is defined here in terms of a physical (octet-based)
representation. This is appropriate for many applications, ranging from
digital signatures to parser testing. However, there are cases where a
physical representation is not needed, and there are cases where another
physical representation is appropriate. As an example, it may be
aproriate to choose UTF-16 rather than UTF-8 as the encoding of an
API in a programming language using UTF-16 to represent Unicode strings,
such as Java or Python. In such cases, users of Canonical XML should
abstract from the physical character encoding if they note this
appropriately.
I'm sure there is a better way to word this.
Regards, Martin.
Hi Martin,
The wording you gave for the note below seems fine to me, except the last sentence, which begins "In such cases, users of Canonical XML should...", should begin "In such cases, users of Canonical XML may...".
Thanks,
John Boyer, Ph.D.
Senior Product Architect and Research Scientist
PureEdge Solutions Inc.
Patel-Schneider
Hello Joseph, dear XML Signature specialists,
I would like to request a clarification on Canonical XML
(http://www.w3.org/TR/2001/REC-xml-c14n-20010315).
At http://www.w3.org/TR/2001/REC-xml-c14n-20010315#Terminology,
Canonical XML says:
The canonical form of an XML document is physical representation of the
document produced by the method described in this specification. The
changes are summarized in the following list:
* The document is encoded in UTF-8
There are numerous applications (parser testing, digital signatures,
encryption) where it is important to have an actual physical representation
for simple octet comparison or for input to cryptographic algorithms
that usually take octet streams as inputs.
However, it has recently come to my attention that there are also some
attempts to use Canonical XML (or Exclusive XML Canonicalisation, which
inherits this aspect of its definition from Canonical XML) in other
situations, such as purely abstract modeling and comparison of XML
documents or XML fragments, or for API definitions.
For abstract modeling, the encoding in UTF-8 irrelevant and confusing.
For API definitions, specifying the encoding is crucial, but it may
be counterproductive to use UTF-8 in a context where UTF-16 is
widely used (e.g. Java, Python).
Although not appropriate in these cases, it seems to be difficult for
users of Canonical XML to abstract them from UTF-8 where necessary.
I therefore propose to add some clarification. As a first actual
text proposal (may need some additional work), I propose to
add a note at the end of Section 1.1, Terminology:
Note: Canonical XML is defined here in terms of a physical (octet-based)
representation. This is appropriate for many applications, ranging from
digital signatures to parser testing. However, there are cases where a
physical representation is not needed, and there are cases where another
physical representation is appropriate. As an example, it may be
aproriate to choose UTF-16 rather than UTF-8 as the encoding of an
API in a programming language using UTF-16 to represent Unicode strings,
such as Java or Python. In such cases, users of Canonical XML should
abstract from the physical character encoding if they note this
appropriately.
I'm sure there is a better way to word this.
Regards, Martin.
Hello John,
Many thanks for your quick reply. Your proposed tweak would be
fine by me.
Regards, Martin.
I would like it to be made VERY EXPLICIT that this is non-normative
advice for those intending to use xml-c14n for something other than its
originally intended purpose. If the text was more than a paragraph -- or
if it's possible to add more, so it becomes more than a paragraph -- I'd
even rather see it as a separate W3C note.
And, by the way, shouldn't we all be using exc-c14n instead of c14n
whenever possible?
/r$
Rich Salz Chief Security Architect
DataPower Technology http://www.datapower.com
XS40 XML Security Gateway http://www.datapower.com/products/xs40.html
XML Security Overview http://www.datapower.com/xmldev/xmlsecurity.html
Why?
(My analysis let the RDF group to make this decision [exc-c14n], but it
seemed to depend on aspects of our application. In particular the problem
of namespaces that are used but not so visibly so, seems to be a reasonable
argument for using c14n rather than exc-c14n).
Jeremy
Not sure what this could mean - you mean something
like a qname attribute value? Oh. I suppose you
could work around that by adding the prefix to the
inclusives list, but I see your point.
/r$
Rich Salz Chief Security Architect
DataPower Technology http://www.datapower.com
XS40 XML Security Gateway http://www.datapower.com/products/xs40.html
XML Security Overview http://www.datapower.com/xmldev/xmlsecurity.html
I think what would help here would be to define a (referencable) canonical
character sequence form, and use that to define the canonical octet
sequence representation.
#g
Graham Klyne
PGP: 0FAA 69FF C083 000B A2E9 A131 01B9 1C7A DBCA CB5E
The request actually came from exc-c14n. But that one relies on c14n
for that particular aspect of its definition.
Regards, Martin.
In a very specific application, the 'inclusives list' works well.
If you want to be general, it doesn't work well.
One idea I recently thought about was to define an attribute
of the form prefix:dummy to make a prefix and the
associated namespace visible with exc-c14n.
To take an example from the XML Schema Primer
(http://www.w3.org/TR/xmlschema-0/#UseDerivInInstDocs)
(simplified):
ipo:purchaseOrder
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:ipo="http://www.example.com/IPO"
If we take the shipTo element and canonicalize it, the
Qname attribute value "ipo:UKAddress" will be invisible,
and the 'ipo' prefix will become orphaned.
The solution would be to write something like:
ipo:purchaseOrder
xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
xmlns:ipo="http://www.example.com/IPO"
It would be nice if there would be an uniform convention for the
name of the 'dummy' element, but this can't be established throughout
because there are no reserved attribute names (only the prefix is
not allowed to start with 'x' 'm' 'l'; the actual attribute name
can start with anything). But at least this can be done on a case-
by-case basis.
Regards, Martin.
That would definitely be the approach I would propose if we were
still writing that spec.
Regards, Martin.
I'm not confident of the scenario/requirement yet, but *if* Alice wanted to
ensure that a prefix is always declared by some other person (Bob)
corresponding to a attribute value, she could use an attribute with the
same prefix to force its "visible utilization." However, I'd expect the
interface between Alice and Bob would be sufficiently close in the cases
that I think of, that she can pass the prefixes corresponding to QNAMEs to
Bob; or if Bob really cares (since he's doing the c14n/signing), he can do
the work of scanning for QNames and adding them to his InclusiveNamespace
Prefix list himself...
Hi Martin, had this issue come up while we were writing the spec I'm
confident we could have provided the clarity, or maybe even an additional
definition of a "canonical character sequence form" as Graham suggested,
that you are seeking. However, I think it would be inappropriate to do such
a definition now, and I'm not sure how to even add a "note" as an erratum.
It doesn't quite fit into "a Caveat where subsequent experience has shown
that a recommendation of the specification was incorrect or needs further
qualification." [1]
I don't object to the spirit of your text, and have tweaked it below:
Note: Canonical XML is an octet sequence resulting from characters, from the
UCS character domain, encoded in UTF-8. This is necessary for the purposes
of XML Signature and other applications. However, some applications may
require a canonical form of XML that is a sequence of characters, without
concern for its encoding and representation as octets. As an example, it
may be appropriate to choose UTF-16 rather than UTF-8 as the encoding of an
API in a programming language using UTF-16 to represent Unicode strings,
such as Java or Python. In such cases, applications are not prohibited from
defining and using a canonical character sequence that corresponds to the
characters of a Canonical XML instance.
I'm not sure if this is any better, and I'm not confident it should be an
erratum, but perhaps you could use this thread in your discussions with
others about whether the octet representation is really needed?
[1] http://www.w3.org/2001/03/C14N-errata
I'm not seeking the addition of a new definition. I don't think it would
be appropriate to add new definitions without starting a new WD-REC
cycle, and I don't think this is important enough to do this.
I guess it comes sufficiently close, the 'further qualification'
seems quite adequate.
The current text is slightly problematic because it says 'without concern
for its encoding' and then goes straight on to mention UTF-16. UTF-16
indeed does not deal with octets, but it is still an encoding.
Also, this version of the text doesn't mention abstract modeling anymore.
It might also be better to replace 'may require' with 'may be better
served with'.
Regards, Martin.
Hi Martin and others,
Whether the c14n spec is "incorrect or needs further qualification" regarding this character sequence issue is debatable to me. It depends somewhat on the connotation of 'further qualification', which in the sentence comes across as 'almost incorrect' or 'partly mistaken'.
There is nothing mistaken about what c14n does. It produces a canonical form for XML. Canonicalization in general is about picking one specific way of doing everything. Regarding encoding, we picked one way: UTF-8. We made this choice in part because encoding is part of the definition of XML 1.0 according to the Recommendation itself, so we wanted to pick one way of doing it. We chose UTF-8 because it was the most supported encoding, as guaranteed by XML 1.0 itself. We also made this choice because we wanted as a requirement be able to use the output of a canonicalizer as the input to a canonicalizer, thereby allowing statements like c14n(doc)==c14n(c14n(doc)).
Right now, you are discussing the use of other encodings because it is logically equivalent in your application context yet more efficient to do so, not because there is anything incorrect, in whole or in part, with the method by which the current c14n achieves its primary goal.
The fact that comparison of the UTF-16 encoding of an XML document might be equivalent to the UTF-8 encoding is an implementation detail. As long as the implementer can guarantee that what they are doing is completely equivalent within the application context to comparing the results produced by C14N, then the implementer can choose to implement in this fashion.
John Boyer, Ph.D.
Senior Product Architect and Research Scientist
PureEdge Solutions Inc.
Patel-Schneider
I'm not seeking the addition of a new definition. I don't think it would
be appropriate to add new definitions without starting a new WD-REC
cycle, and I don't think this is important enough to do this.
I guess it comes sufficiently close, the 'further qualification'
seems quite adequate.
The current text is slightly problematic because it says 'without concern
for its encoding' and then goes straight on to mention UTF-16. UTF-16
indeed does not deal with octets, but it is still an encoding.
Also, this version of the text doesn't mention abstract modeling anymore.
It might also be better to replace 'may require' with 'may be better
served with'.
Regards, Martin.
In the "caveat" category, I think my threshold is are we wasting many of the
readers' time while banging their heads against the spec trying to figure
something out. Granted the spec isn't incorrect, but they really want to do
X and are looking for some guidance in the spec on how to do it.
In this case, I think there was a genuine question of whether Canonical XML
provides or precludes a encoding-less Canonical XML. I hope this discussion
and the text in [1] is sufficient to document that it doesn't provide, nor
does it preclude someone else from simply defining and using such a thing.
I think there's also a conceptual disagreement as to whether one can have
octets in a RDF graph, but I don't think that's our specification's
responsibility to answer.
So for the time being, I'm going to defer on an erratum. If the question
comes up repeatedly, perhaps that will be further evidence that an erratum
is necessary, or, more likely, that there's a requirement for new work.
[1]
