('us-ascii' encoding is not supported, stored as-is)
Have a look at the attached generated test.
It says:
inputSource.setSystemId(/* undeclared */TEST2);
although TEST2 is declared.
Obviously it won't effect the test but is there a way to avoid this ?
Thanks,
Jeroen
X-Hive Corporation
Jeroen van Rotterdam, CEO
e-mail: jeroen@x-hive.com
I don't have a consistent version of dom3tests.ent for this test.
It might be beneficial to validate the tests against the generated schema.
I typically use Sun's Multischema Validator.
Also, you might try using a different XSLT processor. For example, if you
are using a Xalan processor, you might remove or change the extension of
xalan.jar in /ant/lib and drop a saxon.jar into /ant/lib
(http://saxon.sf.net). The casting logic depends on XSLT's key() function
which has been unevenly implemented.
I don't have a consistent version of dom3tests.ent for this test.
sorry, attached
It might be beneficial to validate the tests against the
generated schema.
I typically use Sun's Multischema Validator.
Also, you might try using a different XSLT processor. For
example, if you
are using a Xalan processor, you might remove or change the
extension of
xalan.jar in /ant/lib and drop a saxon.jar into /ant/lib
(http://saxon.sf.net). The casting logic depends on XSLT's
key() function
which has been unevenly implemented.
I will test this.
Thanks for the response,
Jeroen
X-Hive Corporation
Jeroen van Rotterdam, CEO
e-mail: jeroen@x-hive.com
The casting logic depends on XSLT's key() function
which has been unevenly implemented.
Could you clarify?
If "unevenly" means "bug", it needs to be fixed. Has this been reported to
the developers of the various XSLT processors?
If "unevenly" means "spec has a bug", that needs to be fixed. Has it been
reported to the XSLT WG?
If "unevenly" means "spec allows more variation than we'd prefer"... then
this might be a portabilty issue in the stylesheet....
Joe Kesselman / IBM Research
I don't know what XSLT processor that Jeroen is using and I didn't have enough information to determine if the problem was with his source, the transform or the processor. Given the complexity of the test-to-java transform and its tendency to find bugs in XSLT implementations, switching XSLT processors is a quick way to identity if the XSLT processor is a part of the problem. If it uncovers an implementation or spec bug, then logging the issue is the right thing to do. I have vague memories of filing at least one bug on key(), but I can't recall the details and I believe it has been resolved.
Good enough.
(At some point, I really want to worth through the TS stylesheets with
Xalan and make sure we understand all the issues. I just haven't been able
to make time to do so, darn it...)
Joe Kesselman / IBM Research
