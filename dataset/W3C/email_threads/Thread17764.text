Maybe table linearization is something that "the browser" can
punt to add-on modules that access the DOM. But scripting won't
work to disseminate this to a mass of users because of the strict
scoping rules for scripts.
There needs to be some way for the user to express trust in the
third-party widget that de-table-izes the DOM image of the
document, so it gets applied systmatically across all pages
without having to fake up an enclosing frameset or so on.
There is a "behavior sheet" submission to the W3C for behavior
reuse. Maybe we need to ask the browsers to be out in the market
ahead of the consensus format on this one. If scripting is to be
an acceptable solution for table re-flow, then there has to be
some way for the user to inject this script through the browser
without messing with specific pages.
Al
I think you are misunderstanding my position. We don't want tables
linearized - we expose the structure of tables and allow accessibility aids
to decide for themselves how to represent the table to the user. The
advantage is that each aid can optimize the presentation to their particular
users. The disadvantage is that the accessibility aid has to implement the
feature. This is the means by which several Windows-based screen readers
current use to access HTML tables.
Using scripts to "unroll" a table is one possible means to achieve what
Scott wants, but it is not the position that I'm advocating. The advantage
of this approach is that it'll provide a lowest common denominator approach,
workable for legacy aids. The disadvantage is that in order to be useful,
the script would have to intelligently restructure the table - possibly
making incorrect assumptions.
Another means, similar to a script, is directly modifying the object tree to
eliminate the table structure. This method must be implemented by the user
agent or the accessibility aid (as JAWS for Windows currently does). The
advantage of this method is the same as the first method. The disadvantages
are the same as the second method.
Finally, the user agent itself can unroll the table, using an internal
script or other code or by merely changing the rules by which is displays
tables. The advantage of this method is that accessibility's aids have to
do no work. The disadvantage is that each user agent could do it
differently and that the display is not optimized to a particular set of
users.
Maybe table linearization is something that "the browser" can
punt to add-on modules that access the DOM. But scripting won't
work to disseminate this to a mass of users because of the strict
scoping rules for scripts.
There needs to be some way for the user to express trust in the
third-party widget that de-table-izes the DOM image of the
document, so it gets applied systmatically across all pages
without having to fake up an enclosing frameset or so on.
There is a "behavior sheet" submission to the W3C for behavior
reuse. Maybe we need to ask the browsers to be out in the market
ahead of the consensus format on this one. If scripting is to be
an acceptable solution for table re-flow, then there has to be
some way for the user to inject this script through the browser
without messing with specific pages.
Al
Nothing precludes the aid to do a better job at Table linearization
when the UA does a poor job at it.
It's not a either/or UA/Aid situation, so I see no disadvantage for
the end-user in having the UA giving it a try in the first place.
Is there a down side ?
(like promoting poor linearization done by UA ?)
You are correct that either the user agent or the aid can do the work, or
both. It's much harder to motivate our developers to do work that they feel
can be better done by 3rd party aids however. That would be the downside.
Nothing precludes the aid to do a better job at Table linearization
when the UA does a poor job at it.
It's not a either/or UA/Aid situation, so I see no disadvantage for
the end-user in having the UA giving it a try in the first place.
Is there a down side ?
(like promoting poor linearization done by UA ?)
aids
particular
the
