I think the DTD given in section 4.5 is incorrect (at least it contradicts the
Schema definition):
Is a understand the text of section 4.5, the Object element can also encapsulate
any XML markup. Therefore the content model must be ANY instead of (#PCDATA).
Gregor
Gregor Karlinger
Institute for Applied Information Processing and Communications
Austria
Gregor wrote...
I think the DTD given in section 4.5 is incorrect (at least it
contradicts the Schema definition):
Is a understand the text of section 4.5, the Object element can also
encapsulate
any XML markup. Therefore the content model must be ANY instead of
(#PCDATA).
Gregor
Strictly speaking, XML v1.0 defines "ANY" to mean "any of the elements
defined in the DTD" whereas we would like it to mean "PDCDATA or any
well-formed XML instance". Hence, the DTD model is really inadequate here
though some might consider "ANY" to be closer than "PCDATA".
Note: The XML Schema model allows one to say that any well-formed XML
instances can be the content of an element.
Ed
the
encapsulate
(#PCDATA).
Ed is correct about the statement regarding ANY. (ANY = element types within
the DTD). Consequently, we use #PCDATA. XML1.0 does permit MIXED content
models:
An element type has mixed content when elements of that type
may contain character data, optionally interspersed with child
elements. ...
Such that we could do the following:
However, while I can get XMetalPro to compile and validate instances with
that declaration, I can't get IE (and I'm not sure if my declaration is bugg
or not ...) so I avoid them. I will add some structure to the schema to make
what is going on more clear though:
Joseph Reagle Jr.
Policy Analyst mailto:reagle@w3.org
XML-Signature Co-Chair http://www.w3.org/People/Reagle/
Sorry, I did not know the exact meaning of #PCDATA (see below). With the
definition Ed gives for it , the DTD of Object seems to be what it should be ;-)
I have also made this experience with a XML parser API from Sun: If I declare
then the instance
does not validate. The validating API parser throws an exception because it
only expects character data. So this parser does not behave like #PCDATA
is intended to mean (as Ed described in his contribution).
Gregor Karlinger
Institute for Applied Information Processing and Communications
Austria
Thanks for this enlightenment! Up to now I thought PCDATA would correspond
with String, and the behaviour of a XML parser API I have in use fortified
my opinion (please see my response to Joseph's article).
Gregor Karlinger
Institute for Applied Information Processing and Communications
Austria
Until tools understand XML Schemas, I suspect XML-structure-validation of
XML Signatures won't really be reliable. I think the IBM XML4J parser has
an early schema handler.
Regards, Ed
Thanks for this enlightenment! Up to now I thought PCDATA would correspond
with String, and the behaviour of a XML parser API I have in use fortified
my opinion (please see my response to Joseph's article).
Gregor Karlinger
Institute for Applied Information Processing and Communications
Austria
