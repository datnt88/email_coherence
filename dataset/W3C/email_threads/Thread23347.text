Hi:
Java binding of DOM L3 LS at
contain unclear javadoc for getNewLine and setNewLine methods of DOMSerializer class.
From the javadoc it is not clear that what should getNewLine return in case setNewLine is not called before ( default value ). Whether "null" should be returned or the "platform default end-of-line sequence"?
The javadoc for setNewLine is exactly same as getNewLine?
There is need for changing the javadoc for getNewLine and setNewLine and make it different to define specific purpose of each method.
Whether the intention is that when "null" value is
passed to setNewLine, then the end-of-line sequence
need to be defaulted to platform specific one? And
getNewLine should never return "null"
Here is snippet of javadoc for getNewLine/setNewLine.
* The end-of-line sequence of characters to be used in the XML being
* written out. Any string is supported, but these are the recommended
* end-of-line sequences (using other character sequences than these
* recommended ones can result in a document that is either not
* serializable or not well-formed):
* dl
* dt code null /code /dt
* dd Use a default
* end-of-line sequence. DOM implementations should choose the default
* to match the usual convention for text files in the environment being
* used. Implementations must choose a default sequence that matches one
* of those allowed by section 2.11, "End-of-Line Handling" in [ a href='http://www.w3.org/TR/2000/REC-xml-200010
06' XML 1.0 /a ], if the
* serialized content is XML 1.0 or section 2.11, "End-of-Line Handling"
* in [ a href='http://www.w3.org/TR/2002/CR-xml11-20021015/' XML 1.1 /a ], if the
* serialized content is XML 1.1. /dd
* dt CR /dt
* dd The carriage-return character (#xD). /dd
* dt
* CR-LF /dt
* dd The carriage-return and line-feed characters (#xD #xA). /dd
* dt LF /dt
* dd The
* line-feed character (#xA). /dd
* /dl
* br The default value for this attribute is code null /code .
public String getNewLine();
Regards
-Ramesh
I believe the spec does currently reflect the intent here. The spec does
say (and the bindings that you quoted from also say) that the default
value of this attribute is null, and it's clearly defined that the
implementation is then expected to pick a good default newline sequence
in the environment in question. And this attribute can be null, and that
indicates that the implementation will use the default. There was never
an intent to reflect to the application what that default newline sequence.
If you feel that this still needs clarification, please let us know.
jst
First, the documentation is written from the point of view of the
specification, not from the javadoc. The javadoc is generated as a
convenience in the Java interfaces, but the DOM script that generates
the interface cannot produces different text for each setter and getter
in the Javadoc.
The CR version of the specification does say:
The default value for this attribute is null.
Generated automatically from the specification. It is the case for all
DOM attributes.
Doing so would require changing the way the specification is being
produced (using xmlspec for the moment). I can try to write the text so
that it is comprehensible when you read from a setNewLine() or
getNewLine() javadoc point of view but making the attribute texts
specific for their setter and their getter would require more work than
I am willing to spend on it now. Core and LS contain 100 attributes.
Agreed. We changed the description to get the default value
(implementation specific end-of-line sequence) on retrieval, and on
setting, use the value null to set it to its default value.
Philippe
