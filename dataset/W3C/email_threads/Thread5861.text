Hi Folks,
I am a bit confused about what a functional property is. Let me give an
example:
Let the property be: lengthOf
- it maps a River to a Distance
Suppose that one instance document asserts this:
The Yangtze has a lengthOf 6300 kilometers.
A second instance document then asserts this:
The Yangtze has a lengthOf 3937.5 miles.
If lengthOf has been declared "functional" then we can infer that:
6300 kilometers = 3937.5 miles.
Is the purpose of functional to enable inferences like this? /Roger
Roger - way cool example - (Jeremy, I wonder if we should make this
one of our test cases for Owl Full). This is definitely one of the
uses for functional property.
Professor James Hendler hendler@cs.umd.edu
Director, Semantic Web and Agent Technologies 301-405-2696
Univ of Maryland, College Park, MD 20742 240-731-3822 (Cell)
Unfortunately, I don't believe that we can capture this in OWL, as
there is no way to apply a unit to an XML Schema data type, and
certainly not to specify the relationship between two values having
different units.
If OWL supported binary datatype predicates (in fact it only supports
unary datatype predicates), then one way we could do this would be to
define a pair of functional datatype properties called something like
kLength and mLength, and a binary datatype predicate called something
like ratio1.6:1. Then we could make the assertion that
allValuesFrom((kLength,mLength),ratio1.6:1) must be true in all cases
(i.e., subsumes Thing).
Even this doesn't exactly give you the inference you suggested - it
tells you that anything having both a kLength and an mLength that are
not in the ratio 1.6:1 is logically inconsistent.
Regards, Ian
Unfortunately, I don't believe that we can capture this in OWL, as
there is no way to apply a unit to an XML Schema data type, and
certainly not to specify the relationship between two values having
different units.
If OWL supported binary datatype predicates (in fact it only supports
unary datatype predicates), then one way we could do this would be to
define a pair of functional datatype properties called something like
kLength and mLength, and a binary datatype predicate called something
like ratio1.6:1. Then we could make the assertion that
allValuesFrom((kLength,mLength),ratio1.6:1) must be true in all cases
(i.e., subsumes Thing).
Even this doesn't exactly give you the inference you suggested - it
tells you that anything having both a kLength and an mLength that are
not in the ratio 1.6:1 is logically inconsistent.
Regards, Ian
