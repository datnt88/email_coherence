I've changed the issue name to the one on the issue list that seems more
appropriate. See new Subject: line.
So do we have agreement that *any* of the URIs affected by a deep lock
can
be used to do the UNLOCK operation?
The other question of that issue is... do we agree that if you request an
UNLOCK
on a resource that is not locked by that lock, that the request should
fail?
I believe in previous discussions it was suggested that we should not allow
one
to specify a URL other than one that is locked by the lock. The reasoning
was
that in a virtual website where the URI space might be partitioned and
delegated
across several machines (perhaps using intermachine BIND requests), it
might be
burdensome for all machines of the virtual website to be familiar with all
locks.
Anyway, regardless of folks believing this, I'd like to confirm that UNLOCK
requests
specifying a request URI of an unlocked resource should be rejected.
Opinions?
J.
"Julian Reschke"
reschke@gmx.de cc:
Sent by: w3c- Subject: RE: root of a lock, was HOW_TO_IDENTIFY_LOCK_OWNER
dist-auth-
request@w3.org
07/08/2002 07:24
AM
Message-ID: OF7C4220CB.830F87EE-ON85256B41.006F0EFA@pok.ibm.com
From: "Jason Crawford" ccjason@us.ibm.com
Date: Mon, 14 Jan 2002 15:19:50 -0500
Subject: RE: root of a lock, was HOW_TO_IDENTIFY_LOCK_OWNER
In addition to Geoff's answer:
If you are an administrator trying to unlock a resource obtained by
someone else, you have to be able to figure out which resource to
unlock. You can't unlock an internal member of a collection that's
locked by a depth-inifinity lock without knowing which collection was
actually locked.
CAN'T?
(going back to an old discussion...)
RFC2518, 8.11 says [1]:
"The UNLOCK method removes the lock identified by the lock token in the
Lock-Token request header from the Request-URI, and all other resources
included in the lock. If all resources which have been locked under the
submitted lock token can not be unlocked then the UNLOCK request MUST fail.
So do we have agreement that *any* of the URIs affected by a deep lock can
be used to do the UNLOCK operation?
[1] http://greenbytes.de/tech/webdav/rfc2518.html#METHOD_UNLOCK
I agree that an UNLOCK on a resource not locked by the
specified lock token MUST fail.
Cheers,
Geoff
I've changed the issue name to the one on the issue list that seems more
appropriate. See new Subject: line.
The other question of that issue is... do we agree that if you request an
UNLOCK
on a resource that is not locked by that lock, that the request should fail?
I believe in previous discussions it was suggested that we should not allow
one
to specify a URL other than one that is locked by the lock. The reasoning
was
that in a virtual website where the URI space might be partitioned and
delegated
across several machines (perhaps using intermachine BIND requests), it might
be
burdensome for all machines of the virtual website to be familiar with all
locks.
Anyway, regardless of folks believing this, I'd like to confirm that UNLOCK
requests
specifying a request URI of an unlocked resource should be rejected.
Opinions?
J.
"Julian Reschke" julian.reschke@gmx.de
"Julian Reschke" julian.reschke@gmx.de
Sent by: w3c-dist-auth-request@w3.org
07/08/2002 07:24 AM
In addition to Geoff's answer:
If you are an administrator trying to unlock a resource obtained by
someone else, you have to be able to figure out which resource to
unlock. You can't unlock an internal member of a collection that's
locked by a depth-inifinity lock without knowing which collection was
actually locked.
CAN'T?
(going back to an old discussion...)
RFC2518, 8.11 says [1]:
"The UNLOCK method removes the lock identified by the lock token in the
Lock-Token request header from the Request-URI, and all other resources
included in the lock. If all resources which have been locked under the
submitted lock token can not be unlocked then the UNLOCK request MUST fail.
So do we have agreement that *any* of the URIs affected by a deep lock can
be used to do the UNLOCK operation?
[1] http://greenbytes.de/tech/webdav/rfc2518.html#METHOD_UNLOCK
That was the assumption I had made too.. the sentence so far reads
"Any locked resource may be addressed by UNLOCK, not just the resource
that the LOCK method applied to. "
Lisa
I've changed the issue name to the one on the issue list that seems more
appropriate. See new Subject: line.
can
The other question of that issue is... do we agree that if you request
an UNLOCK
on a resource that is not locked by that lock, that the request should
fail?
I believe in previous discussions it was suggested that we should not
allow one
to specify a URL other than one that is locked by the lock. The
reasoning was
that in a virtual website where the URI space might be partitioned and
delegated
across several machines (perhaps using intermachine BIND requests), it
might be
burdensome for all machines of the virtual website to be familiar with
all locks.
Anyway, regardless of folks believing this, I'd like to confirm that
UNLOCK requests
specifying a request URI of an unlocked resource should be rejected.
Opinions?
J.
"Julian Reschke" julian.reschke@gmx.de
"Julian Reschke" julian.reschke@gmx.de
Sent by: w3c-dist-auth-request@w3.org
07/08/2002 07:24 AM
In addition to Geoff's answer:
If you are an administrator trying to unlock a resource obtained by
someone else, you have to be able to figure out which resource to
unlock. You can't unlock an internal member of a collection that's
locked by a depth-inifinity lock without knowing which collection
was
actually locked.
CAN'T?
(going back to an old discussion...)
RFC2518, 8.11 says [1]:
"The UNLOCK method removes the lock identified by the lock token in the
Lock-Token request header from the Request-URI, and all other resources
included in the lock. If all resources which have been locked under the
submitted lock token can not be unlocked then the UNLOCK request MUST
fail.
So do we have agreement that *any* of the URIs affected by a deep lock
can
be used to do the UNLOCK operation?
[1] http://greenbytes.de/tech/webdav/rfc2518.html#METHOD_UNLOCK
------_=_NextPart_001_01C226C2.4A261105
Content-Type: image/gif;
Content-Transfer-Encoding: base64
Content-ID: image001.gif@01C22687.71F99E20
Content-Description: image001.gif
Content-Location: image001.gif
R0lGODlhEAAQAKECAMzMzAAAAP///wAAACH5BAEAAAIALAAAAAAQABAAAAIXlI+py+0PopwxUbpu
ZRfKZ2zgSJbmSRYAIf4fT3B0aW1pemVkIGJ5IFVsZWFkIFNtYXJ0U2F2ZXIhAAA7
------_=_NextPart_001_01C226C2.4A261105
Content-Type: image/gif;
Content-Transfer-Encoding: base64
Content-ID: image002.gif@01C22687.71F99E20
Content-Description: image002.gif
Content-Location: image002.gif
R0lGODlhSAABAHcAMSH+GlNvZnR3YXJlOiBNaWNyb3NvZnQgT2ZmaWNlACH5BAEAAAAALAAAAAAB
AAEAgAAAAAECAwICRAEAOw==
------_=_NextPart_001_01C226C2.4A261105
Content-Type: image/gif;
Content-Transfer-Encoding: base64
Content-ID: image003.gif@01C22687.71F99E20
Content-Description: image003.gif
Content-Location: image003.gif
R0lGODlh4QABAHcAMSH+GlNvZnR3YXJlOiBNaWNyb3NvZnQgT2ZmaWNlACH5BAEAAAAALAAAAAAB
AAEAgAAAAAECAwICRAEAOw==
------_=_NextPart_001_01C226C2.4A261105
Content-Type: image/gif;
Content-Transfer-Encoding: base64
Content-ID: image004.gif@01C22687.71F99E20
Content-Description: image004.gif
Content-Location: image004.gif
R0lGODlhAQABAHcAMSH+GlNvZnR3YXJlOiBNaWNyb3NvZnQgT2ZmaWNlACH5BAEAAAAALAAAAAAB
AAEAgAAAAAECAwICRAEAOw==
------_=_NextPart_001_01C226C2.4A261105--
I agree they should be rejected, but I thought there was some question
of what the error should be.
dan
"Julian Reschke" julian.reschke@gmx.de
In addition to Geoff's answer:
If you are an administrator trying to unlock a resource obtained by
someone else, you have to be able to figure out which resource to
unlock. You can't unlock an internal member of a collection that's
locked by a depth-inifinity lock without knowing which collection
actually locked.
CAN'T?
y
In addition to Geoff's answer:
If you are an administrator trying to unlock a resource obtained by
someone else, you have to be able to figure out which resource to
unlock. You can't unlock an internal member of a collection that's
locked by a depth-inifinity lock without knowing which collection was
actually locked.
CAN'T?
We appear to have a consensus.
Right you are. So the final question is, what error code should we return
if a client submits an UNLOCK request with a request URL for a resource
that isn't locked by the specified lock?
Hi,
the example response is:
[1] http://greenbytes.de/tech/webdav/rfc2518.html#rfc.section.8.10.10
(sorry, operator error)
The example response is:
and the spec says furthermore:
"In this example the lockdiscovery property is empty which means that there
are no outstanding locks on the resource."
What's the point in returning the DAV:lockdiscovery property if it will
always be empty (otherwise a 200 would have been returned). And shouldn't
the response better be:
...because the error condition applies to the complete resource, not a
specific property?
[1] http://greenbytes.de/tech/webdav/rfc2518.html#rfc.section.8.10.10
