Having consulted with my colleagues I will *not* be proposing to drop
reification.
However, in the feedback I got the following suggestion was made:
There are two use cases which, if not supported by reification,
you need to at least document recommended solutions - provenance
and quoting.
One approach might be to not remove reification but to relegate it to an
advisory section. In particular, leave in the rdf:Statement,
rdf:subject etc tags as reserved tags. Have two "how to's" which
describe how one might represent provenance or quoting in RDF and
say that you have reserved the tags
"rdf:Statement" etc for this purpose but they have no special
semantic status other than being the recommended type tags to
use if you are trying to encode ground facts which happen to be about
RDF statements.
This approach allows us to:
- avoid the "RDF is (NOT) its own metatheory" hole.
- avoid the stating versus statement problem (depends on usage).
- keep the good bits of reification (have standard vocab. for modelling
RDF).
It is characterised by there being no model theory for reification.
I am well aware that Pat may yet produce a reification rabbit out of his
hat, but currently this sort of approach is my favourite.
We could even throw out all the syntax for reification and still follow this
suggestion; it is more within charter not to do so, and I will not be
proposing such a step.
Jeremy
There are two use cases which, if not supported by reification,
you need to at least document recommended solutions - provenance
and quoting.
One approach might be to not remove reification but to relegate it to an
advisory section. In particular, leave in the rdf:Statement,
rdf:subject etc tags as reserved tags. Have two "how to's" which
describe how one might represent provenance or quoting in RDF and
say that you have reserved the tags
"rdf:Statement" etc for this purpose but they have no special
semantic status other than being the recommended type tags to
use if you are trying to encode ground facts which happen to be about
RDF statements.
I'm sympathetic, but some comments / nits.
re 'reserved the tags "rdf:Statement" etc', they're not tags, they're RDF
classes and properties. One class (rdf:Statement) and three properties
(rdf:p/s/o). Like other classes and properties, they have various
representations as XML elements/tags.
saying they're to be used 'for this purpose' (provenance and quoting)
doesn't adequately describe the meaning of these constructs. What *is* an
instance of rdf:Statement? We need to give a clear answer, rather than
allude to possible uses for the class. That's the mistake the old spec
fell into (cont. below).
How so? Giving a clear definition for rdf:Statement, rdf:predicate,
rdf:object and rdf:subject might avoid the stating/statement problem. If
we fail to define rdf:Statement clearly, we'll continue to have
stating/statement problems. I can't see how merely saying " rdf:statement
and p/s/o are 'reserved for quoting, provenance etc." fixes this problem.
One way to be clear when defining classes is to give identity conditions
for members of the class, eg. specify whether members of rdf:Statement
are uniquely picked out by their predicate/subject/object properties. I
suspect that if we explore that route, we'll find the statement/stating
confusion unwravels into the need to be more careful distinguishing URIs
from the resources they name.
Yep.
Somewhere we need to write down a clear account of rdf:Statement; if it
looks mathematical, the Model Theory spec seems a reasonable home for it.
cheers,
Dan
I think I was advocating a substantially more woolly position than you
appear to want.
A few inline comments follow ...
Words typically have more than one (related) meaning falling into different
usage patterns. It works in natural language, I have yet to be convinced
that giving (not particularly formal) definitions that follow the
"provenace" model and the "quoting" model is not a solution.
e.g. when discussing the provenance of an RDF statement:
1: A different resource is used for each occurrence of the statment.
2: The resource is of type rdf:Statement
3: The s/p/o properties are as follows: [ omitted ]
4: dc properties are used to describe provenance.
[I am not suggesting (4) is correct, merely an example]
This sort of resource is referred to as a "stating"
when quoting
Each rdf:Statement resource is uniquely identified by its s/p/o.
This sort of resource is referred to as the Statement.
We observe that each stating as a natural Statement corresponding to it.
While it may seem confusing to have both Statements and Statings represented
in the same way, in practice context will disambiguate.
It is clear to merely say that the rdf:Statement corresponds to the triple
in n-triple and the rdf:subject is the first field, the rdf:predicate is the
second, the rdf:object is the third.
Clarity only vanishes when we claim some deep metaphysical truth about
*identifying* a triple with its reification. If the reification merely
models the triple then it is not difficult.
Jeremy
This seems fine to me. One nit...
Do you mean "there being no special model theory"... I see no reason why
the standard model theory should not apply -- we just don't (yet) try to
say anything specific about the intended interpretation of the reserved
vocabulary.
Well, yes.
I would personally prefer to see rdf:ID= in property elements used
consistently to identify the corresponding rdf:Statement resource, etc.
#g
Graham Klyne MIMEsweeper Group
Strategic Research http://www.mimesweeper.com
well, in an earlier MT draft, there was some of that stuff
but ... (don't get me wrong) where are we w.r.t. that???
I'm much more in favor of unasserted triples
like the ones in a set of statements enclosed by N3's { } or so,
but that is out of scope of course :-(
and so I would propose to drop reification
a bit in the spirit of
You know you've achieved perfection in design,
Not when you have nothing more to add,
But when you have nothing more to take away.
-- Antoine de Saint Exupery.
Jos
I'm sympathetic with what you say here, but I'm not sure that there's much
we *can* (easily) say about a statement within the RDF framework as
currently formalized.
We might say that the intended interpretation of any instance of
rdf:Statement is that it denotes some RDF statement. But what does that
actually mean? What properties does an rdf:Statement instance have that
distinguish it from any other RDF resource?
You suggest identity conditions. But I think that could take us into an
area of conflict with other work (DAML+OIL/WOL) that build on
RDF. Architecturally, I think that core RDF is the wrong place to make
this kind of assertion.
One thing that I can imagine doing, but something that I think is beyond
our current charter, is to have a way of relating an rdf:Statement instance
to a truth value; i.e. a way of saying that an rdf:Statement corresponds
to an asserted triple. A simple example might be similar to the style of
RDFS-entailment, such that:
s a rdf:Statement ;
rdf:predicate pred ;
rdf:subject sub ;
rdf:object obj ;
rdf:hasValue rdf:True .
statement-entails:
sub pred obj .
(I don't think this particular approach is especially useful; e.g. for
provenance we'd want to be able to make the entailment also depend in some
way on expressed trust in the source of the statement, but I think that's
still an area for experimentation.)
Earmarking the vocabulary and indicating it's intended interpretation
without saying anything else (yet) about its semantics, as Jeremy suggests,
possibly leaves open the path to some future enhancements, without
committing to exactly what they would be until we have some experimental
experience.
#g
Graham Klyne MIMEsweeper Group
Strategic Research http://www.mimesweeper.com
This is precisely what I had suggested some time ago with my X proposal,
which also takes into account issues such as trust/authority, as well
as source, authentication, scope, and all other qualifications of
statements. It's just an issue of (a) having only one representation
for statements and (b) shifting matters of assertion, trust, etc. to
a suitable ontology (or ontologies) for qualifying statements. E.g.
s a rdf:Statement ;
rdf:predicate pred ;
rdf:subject sub ;
rdf:object obj ;
rdf:assertedBy auth://abc.com/john.doe ;
rdf:source http://www.abc.com/~jdoe/what-I-know.rdf ;
rdf:scope dilusions ;
rdf:authentication esl:SHA1:i8...a82 .
and the triple s,p.o is just a resource-centric view of that knowledge
derived from the qualified statement, as Graham points out.
All statements are "reified", per se. Assertion is taken to be an issue
of relevance to any given process -- and selection of relevant statements
is based on a statement's qualification properties. I.e. assertion is
a preliminary query on the statements in a knowledge base to select
knowledge of relevance to a subsequent query or operation.
C.f.
Of course, changes of a magnitude such as suggested above are totally
beyond the scope of the present charter, which is why I dropped discussion
of the X proposal (for now ;-)
Cheers,
Patrick
This seems to me to be the central problem. *How* will 'context'
disambiguate? What context, in any case? If RDF had contexts, it
would be a different language.
The trouble with this kind of approach (not to reification in
particular, but more generally) is that if there is no way in the
language to state a distinction, and if the same constructs are used
to say different kinds of things, then confusion will be inevitable.
Maybe some people will manage to get by, but someone else will be
confused (or, worse, some other piece of software will get confused.)
Surely it is better to provide a way to state or somehow indicate the
distinction, and allow both kinds of things to be said more clearly.
If you want strict backward compatibility and don't like new
syntactic conventions, then make the one you like best be the
unmarked case and mark the other one.
No, its still a problem. There are at least two distinct senses of
'model a triple' involved here, and you have to choose one of them.
Other people will understand you to be meaning the other sense,
however, and will draw conclusions you didn't intend. Even if you
only want to use RDF for some private purpose, we have to make it
capable of being published on a web and 'understood' by people/agents
who have no way of knowing what we had in mind when we wrote it.
Pat
IHMC(850)434 8903 home
40 South Alcaniz St.(850)202 4416 office
phayes@ai.uwf.edu
This was what motivated my suggestion of two new classes rdf:Assertion
and rdf:Quotation, both rdfs:subClassOf rdf:Statement, to provide a
means of distinction for the purpose of intepretation.
That was my take.
Right. rdf:Assertion is the unmarked case, implied by actual
property arcs from subject nodes to object nodes, and rdf:Quotation
is available as an alternate to rdf:Statement providing for
the slightly different interpretation of "utterance" rather
than statement.
This approach seems backwards compatable with (most) current
usage while allowing those who want the quotation distinction
to achieve it explicitly.
Patrick
