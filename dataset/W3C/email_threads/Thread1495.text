I think now that work on deltaV and ACL nears completion, we *badly* need to
go back resolving issues on the WebDAV core (maybe including parts of
bindings, redirect refs, ordered collections and SEARCH).
While I agree that DeltaV nears completion now I see one thing still to do.
Once upon a time someone wrote a DeltaV scenarios document. This document
should be updated to the newest draft so it could help people understanding
DeltaV by giving some detailed use cases. OTOH it could give implementors
sort of a validation suite they could test their clients and servers against.
Cheers, Edgar
edgar@edgarschwarz.de http://www.edgarschwarz.de
* DOSenfreie Zone. Running Active Oberon. *
Make it as simple as possible, but not simpler. Albert Einstein
During testing we found the following issue with the Microsoft webfolder
client (sent here so it is propertly archived):
Given a WebDAV collection mounted as:
a collection resource
and a member
Upon trying to move "file" into "collection", the MS webfolder client will
send the following request:
MOVE http://host/file HTTP/1.0
Host: lisa.greenbytes.de:8080
Destination: http://host/localdir/collection/file
Translate: f
Proxy-Connection: Keep-Alive
Content-Length: 0
Overwrite: F
Pragma: no-cache
Content-Language: en-us
User-Agent: Microsoft Data Access Internet Publishing Provider DAV
Accept-Language: de, en-us;q=0.2
So in the request URI, the path is wrong. Note that this only happens if the
webfolder client "thinks" that it's operating in the root of the mounted
namespace -- that is, if http://host is mounted instead of
Julian
During testing we found the following issue with the Microsoft webfolder
client (sent here so it is propertly archived):
Given a WebDAV collection mounted as:
a collection resource
and a member
Upon trying to move "file" into "collection", the MS webfolder client will
send the following request:
MOVE http://host/file HTTP/1.0
Host: lisa.greenbytes.de:8080
Destination: http://host/localdir/collection/file
Translate: f
Proxy-Connection: Keep-Alive
Content-Length: 0
Overwrite: F
Pragma: no-cache
Content-Language: en-us
User-Agent: Microsoft Data Access Internet Publishing Provider DAV
Accept-Language: de, en-us;q=0.2
So in the request URI, the path is wrong. Note that this only happens if the
webfolder client "thinks" that it's operating in the root of the mounted
namespace -- that is, if http://host is mounted instead of
Julian
Hi,
I think I've come across an issue with the way WebDAV related drafts use the
DAV: namespace. While this mainly applies to individual submissions (like
ours: [1]), it also applies in some way to deltaV and ACL.
In section 1.5 [2], deltaV says:
Although WebDAV request and response bodies can be extended by arbitrary
XML elements, which can be ignored by the message recipient, an XML element
in the DAV namespace MUST NOT be used in the request or response body of a
versioning method unless that XML element is explicitly defined in an IETF
RFC.
Which I thing is a good thing. However this leaves us with the question:
which namespace *should* be used in drafts that are *planned* to become an
RFC?
- Putting elements into the DAV: namespace might not be a good idea, *even*
for deltaV or ACL until they reach RFC status. By using a different
namespace, ambiguities about what version of the spec is supported could be
avoided. This would be similar to the W3C practice of using a new namespace
each time a Working Draft changes incompatibily.
- "DAV:experimental" seems to be an option, although this would require that
the registrar of the DAV: URI scheme finally defines the syntax of it
(hint).
- Another approach would be to use a "private" namespace for individual
submissions (probably the cleanest approach).
The reason why I'm raising this right now is that our WebDAV server
(obviously) supports the extensions we have proposed (of which two need
extension elements). The IDs (Internet Drafts) use the DAV: namespace. We
now have the choice of either actually *implementing* the extension using
the DAV: namespace (which doesn't seem to be good style), or to use a custom
namespace (and to bring the IDs in line with that).
Feedback appreciated.
Julian
[1] http://www.greenbytes.de/tech/webdav/
[2]
http://www.greenbytes.de/tech/webdav/draft-ietf-deltav-versioning-20.htm#_T
oc524830510
I agree that using a custom namespace is the right way to go
for properties defined in individual submissions.
I think it is better for early implementors to have a
"custom else DAV switch", than for the DAV namespace to
become uncontrolled.
Cheers,
Geoff
Hi,
I think I've come across an issue with the way WebDAV related drafts use the
DAV: namespace. While this mainly applies to individual submissions (like
ours: [1]), it also applies in some way to deltaV and ACL.
In section 1.5 [2], deltaV says:
Although WebDAV request and response bodies can be extended by
arbitrary
XML elements, which can be ignored by the message recipient, an XML element
in the DAV namespace MUST NOT be used in the request or response body of a
versioning method unless that XML element is explicitly defined in an IETF
RFC.
Which I thing is a good thing. However this leaves us with the question:
which namespace *should* be used in drafts that are *planned* to become an
RFC?
- Putting elements into the DAV: namespace might not be a good idea, *even*
for deltaV or ACL until they reach RFC status. By using a different
namespace, ambiguities about what version of the spec is supported could be
avoided. This would be similar to the W3C practice of using a new namespace
each time a Working Draft changes incompatibily.
- "DAV:experimental" seems to be an option, although this would require that
the registrar of the DAV: URI scheme finally defines the syntax of it
(hint).
- Another approach would be to use a "private" namespace for individual
submissions (probably the cleanest approach).
The reason why I'm raising this right now is that our WebDAV server
(obviously) supports the extensions we have proposed (of which two need
extension elements). The IDs (Internet Drafts) use the DAV: namespace. We
now have the choice of either actually *implementing* the extension using
the DAV: namespace (which doesn't seem to be good style), or to use a custom
namespace (and to bring the IDs in line with that).
Feedback appreciated.
Julian
[1] http://www.greenbytes.de/tech/webdav/
[2]
http://www.greenbytes.de/tech/webdav/draft-ietf-deltav-versioning-20.htm#_T
oc524830510
