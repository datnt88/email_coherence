Fairly soon, we will begin to convert the NIST HTML tests to
the DOM TS ML format. There are roughly 600 tests that
fall into this category. They were originally developed for
DOM Level 1. When we developed these tests, they were
designed to make use of the "everything is a node" view
and as such, called generic routines which in turn made
specific DOM calls. Eventually, when you zeroed in on
getting the root element of a document, then the appropriate
load routine was called -- hence, they presuppose the ability
to synchronously load a document. In converting these tests
for use by the DOM TS, we would like to do the following:
1) Load the document upfront
2) Get rid of the generic functions, and make direct use
of DOM calls.
3) Express the tests in the DOM TS ML format
4) Update the tests to be compliant with DOM HTML Level 2
5) Break up the rather large HTML files, which are loaded,
to exercise the HTML DOM calls, into smaller files, each of
which will be used for a small set of tests. It may also be
possible that we decide in favor of initializing the DOM tree
by creating these nodes rather than reading them in from
a file.
6) Create additional tests to fully cover the HTML Module.
We are looking for help in this effort. If you are interested in
helping, please let us know. When we know who the players
are, we will discuss the new design, and break up the work
accordingly.
Thanks,
Mary
comments inlined
I'd be happy to help out as far as time allows.
/Dimitris
[dd] Except if I'm misreading, wouldn't this be a step away from one
test - one file that we've used so far?
5) Break up the rather large HTML files, which are loaded,
to exercise the HTML DOM calls, into smaller files, each of
which will be used for a small set of tests. It may also be
possible that we decide in favor of initializing the DOM tree
by creating these nodes rather than reading them in from
a file.
[dd] Except if I'm misreading, wouldn't this be a step away from one test - one file that we've used so far
[mb] Each test reads in an input file. Currently, all 600 of the HTML
tests read in the same input file -- which tries to cover many of the
facets of HTML -- ie, frames, tables, lists, etc. If a particular
implementation does not provide all the capabilities of HTML, or
provides them in a slightly different way, it can be hard to determine
what's failing and why. This would be much easier if we broke up
this huge html file into smaller chunks, and just had tags that were
pertinent to what we were testing in that file -- or alternately, not load
a file at all, but rather have an init routine that would construct the
proper DOM nodes that would correspond to this file -- lets say
construct a table with 5 rows and 5 columns -- also include table
header info, table data info, etc that is necessary to exhaustively
test the DOM HTML Table functionality. Create another set for
frames, another for forms, etc. The actual tests will still be one
per file.
--Mary
I agree, I should have stated the question in more detail: what I meant
is that we should break the big HTML file up into one file per test
case, and not into smaller files, as you wrote.
/Dimitris
