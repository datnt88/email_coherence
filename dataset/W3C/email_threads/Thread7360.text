I have a resource called http://a/b/c. I delete http://a/b. Is http://a/b/c
deleted?
Yaron
From: Larry Masinter [mailto:masinter@parc.xerox.com]
Sent: Thursday, August 20, 1998 7:38 PM
Subject: RE: Hierarchical URLs and Collections
This is an odd discussion, since people seem to be putting up
strawman proposals and then knocking them down.
The objection to the current WebDAV spec is that it requires the
client to parse the URL in ways that are otherwise not required.
I think part of the issue is that the 'parent' is an attribute
of the resource locator, and not an attribute of the resource itself.
The 'value' is that it no longer requires that the URL hierarchy
match the (direct) containment hierarchy.
For example, if put up a DAV server as
I might want to treat 'root' as a container, but not have the client
assume that the parent of 'root' is
and that the parent of that resource is
etc.
Clients shouldn't parse URLs except to deal with relative references.
This is not a "multi-membership" issue, nor a direct vs.
referential issue;
those are perhaps issues too, but let's leave them aside for now.
The issue is that currently the semantic concept of direct
containment is equated with syntactic MUST constraints on the
URL syntax.
That syntactic mapping is certainly required by most file systems, but
it shouldn't be required here.
From "4.1 Collection Resources" of the April 7 (version 08) draft:
A collection is a resource whose state consists of at
least a list
of internal members and a set of properties, but which may have
additional state such as entity bodies returned by GET.
An internal
member resource MUST have a URI that is immediately
relative to the
base URI of the collection. That is, the internal
member's URI is
equal to the parent collection's URI plus an additional segment
where segment is defined in section 3.2.1 of RFC 2068
[Fielding et
al., 1996].
There are NO OTHER parts of the web or the WebDAV protocol that
require this constraint. The DocuShare WebDAV-style Windows
client works
without that constraint because it deals with the content of
PROPFIND requests, not the syntax of resource URLs. You
certainly don't
need the syntax to walk down the tree - PROPFIND clearly tells what a
collection's members are.
If we add a server-side operation for obtaining the DAV 'parent' of a
resource (locator), then that kind of approach to walking the
hierarchy
will be more general and more robust. The _server_ should be
the source of hierarchical knowledge, not the client or syntactic
conventions. The server would then be free to store and reference
content as it wishes and the client doesn't need to care.
It may have confused the issue to make this operation
'PROPFIND', since it
doesn't actually apply to the resource but to the locator.
Larry
|I have a resource called http://a/b/c. I delete http://a/b. Is http://a/b/c
|deleted?
Is this a trick question?
DELETE instructs that the collection specified in the request-URI
and all its internal member resources are to be deleted.
So whether deleting http://a/b deletes http://a/b/c by dint of this
rule depends on whether http://a/b/c is or isn't an internal member
resource of http://a/b.
For the most part, WebDAV works fine without the assumption that
resource membership hierarchy is mapped onto URL syntax.
Of course, if we allow a resource to be an 'internal member' of multiple
collections, why, we might have to resort to reference counting! Or even
garbage collection!
Larry
(resource contained in http://www.parc.xerox.com/istl/members/)
For the most part, WebDAV doesn't define things in terms of the
URL syntax. The only thing it does is internal members, and that's
because people did want to require that http://a/b/c be deleted whenever
I am all for a member of a collection that may appear in multiple
collections and does not act like an external reference. However, that
thing is called a direct reference (or alias) and not 'internal member'.
And yes, you might need reference counting and garbage collection to
keep track of aliased resource disposal, but not for internal members.
Calling both things an 'internal member' makes it impossible to describe
the requirements of internal resources that do not exist independent
of the collection.
....Roy
|For the most part, WebDAV doesn't define things in terms of the
|URL syntax. The only thing it does is internal members, and that's
|because people did want to require that http://a/b/c be deleted whenever
|http://a/b/ is deleted.
If you defined this in terms of 'internal member' rather than syntactically,
then the requirement would be stated by semantics rather than by the URL
syntax. This would then not disallow systems that didn't follow the
syntactic convention. I think we're talking past each other. Isn't it
better to not require a syntactic convention if there's no justification
for it?
|I am all for a member of a collection that may appear in multiple
|collections and does not act like an external reference. However, that
|thing is called a direct reference (or alias) and not 'internal member'.
You're justifying the design by making reference to the design, so this
seems like a circular argument. WebDAV has a concept called 'internal
member', and it maps it onto a syntactic convention. And anything that
doesn't follow the syntactic convention you have to assign a different concept.
But the concept works fine without the syntactic convention, in which
case you wouldn't have to call it something else.
It sounds like you're trying to _explain_ the design, but I understand
the design, I'm just asking that the design be changed. If you're explaining
why you shouldn't change the design, saying "because we called the thing
you want to do something else" isn't a good justification.
|Calling both things an 'internal member' makes it impossible to describe
|the requirements of internal resources that do not exist independent
|of the collection.
No! An internal member is something that doesn't exist independent of
the collection(s) that contain it. That's the definition, and the requirement.
Now you have another requirement, which is that "The URL of an internal
member has a particular syntactic relation to the URL of the container",
but that requirement isn't justified.
Larry
We are definitely talking past one another. The real problem is that
WebDAV defines namespaces, not collections in the general sense.
The hierarchical requirement does make sense for a namespace.
What I was trying to explain was that the requirement only applies
to that subset of collections which is a namespace, though I've pretty
much gotten to the point where I'd be a lot happier if WebDAV wouldn't
use general terminology to refer to something that has been
restricted (for ease of deployment) to only a subset of what real
collections are capable of supporting.
The functionality you want is part of the advanced collections
requirements and is currently called a direct reference. Maybe it
should also be called an internal member, but that means you have
to go back and invent a new term for internal members that are
not direct references. I hope that this will be easier to do
sometime this week in the hallways or DAV-WG meeting rather than
trying to wrangle terminology on the list.
....Roy
