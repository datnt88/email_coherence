On 16 October 1996, the ERB will vote to decide the following question.
A straw poll indicates the question needs further discussion in the work
group.
B.9 Should XML require system and public identifiers to be FORMAL
(13.5)?
This needs interpretation. The FORMAL keyword in SGML does not restrict
system identifiers to any formal structure. The important question is:
If system identifiers are retained in XML must they conform to the rules for
formal system identifiers defines in ISO 10744?
Martin Bryan, The SGML Centre, Churchdown, Glos. GL3 2PU, UK
If this is equivalent to having a canonical grammar by which to
parse them, that is extensible, yes.
It is indeed ... and I agree with Gavin.
Charles F. Goldfarb * Information Management Consulting * +1(408)867-5553
13075 Paramount Drive * Saratoga CA 95070 * USA
International Standards Editor * ISO 8879 SGML * ISO/IEC 10744 HyTime
Prentice-Hall Series Editor * CFG Series on Open Information Management
On Sat, 12 Oct 96 15:08:24 CDT, Michael Sperberg-McQueen
Yes. XML should use formal public identifiers (per ISO 8879) and formal system
identifiers (per SGML Extended Facilities of ISO/IEC 10744).
Charles F. Goldfarb * Information Management Consulting * +1(408)867-5553
13075 Paramount Drive * Saratoga CA 95070 * USA
International Standards Editor * ISO 8879 SGML * ISO/IEC 10744 HyTime
Prentice-Hall Series Editor * CFG Series on Open Information Management
system
I agree with Charles.
bob
Robert Streichstreich@slb.com
Schlumbergervoice: 1 512 331 3318
For XML 1.0, we need to keep things as simple as possible. The simplest
solution is:
- No public identifiers, formal or otherwise.
- System identifiers must be URLs.
I don't think it's part of our job in this WG to try and solve the WWW's
naming/addressing problems. The mechanism that the WWW currently uses for
identifying entities is URLs. We should simply adopt that into XML.
If we incorporate public identifiers, we would need to define a mechanism
for resolving them to URLs. There is not time to do that before November.
They can always be added in XML 1.1.
I don't think formal system identifiers buy us any functionality that we
have to have in XML 1.0. They can be added in a future version; this would
be backwards compatible since any legal formal system identifier is not a
legal URL.
James
I disagree. Using FPI's and FSI's for naming is simple enough.
The really hard part is name *resolution* (ie. turning a name
into a physical adress that can be accessed).
I agree that we cannot solve the resolution side by November, but
XML naming conventions certainly can be resolved by then. Again,
if we have an extensible naming scheme with a robust grammer, then
I am all for it.
[Gavin, beginning with a quote from James:]
Putting on a third hat this time...
(Note that I am now speaking as one with a vested interest in this
question.)
In the general scales-to-the-edges-of-the-galaxy scenario in the
context of which this is usually discussed, the resolution problem is
a well-known nightmare. In the more limited case where one is only
interested in defining location-independent identifiers for a few
thousand publications and only needs to resolve those identifiers
within a corporate intranet space, however, the resolution problem is
a pussycat.
At Sun, we are putting into place an intranet publishing solution that
relies on FPIs and the SGML Open catalog system (including Tauber's
DELEGATE extension) to provide location-independent naming of our
technical manuals and other publications. This system allows users to
install individual publications in multiple locations on a network
without worrying about what happens if one of the servers goes offline
for a while, and we believe that it will provide very substantial
document management benefits moving forward.
We don't expect everyone to follow our lead in this, but it would be a
good thing for us to have FPIs as they are currently defined be part
of what you can legally put in an XML document. So this (not
disinterested) user strongly supports Gavin's position.
Jon
From: James Clark jjc@jclark.com
I agree that this is a usefull immediate solution.
One extension to URLs that I believe that XML would need is a means to
refer to other parts of a MIME multipart message. To my knowledge,
there exists no current URL formalism for this. Such a thing would be
usefull beyond XML, so this might be become proposal for extending
URLs (in general) to support MIME multipart messages.
Or XML could define its own syntax of referencing parts (by their id)...
-enjoy,
derek
Derek Denny-Brown derdb@techno.com | Technical Staff @ TechnoTeacher, Inc.
SGML/HyTime/DSSSL/WWW | http://www.techno.com/
I just counted the number of lines of code in the part of SP that handles
external entities; I included just the URL and OSFILE storage mangers, and
just the UTF-8 and Unicode encodings. It was more than 5000 lines.
So this was just fSi, not fPi? Interesting; and a powerful argument.
Would you have any insights as to what the "tough bits" are that make
this so hard? It seems on the face of it that FSI handlers for URLs and
OSFiles ought to be pretty easy; would it be possible to contemplate
cutting a lot of the options out, so that all you had left was something
along the lines of
!element osfile CDATA [yeah, I know we don't have CDATA in XML]
This at least has the virtue that (a) it slips into the base of what
SGML offers, and (b) allows room for clean extensibility.
Until I read James' posting, I was ready to lose FPI's (&amp; PUBLIC for
that matter) and keep FSI's. I'd still like to keep at least a subset
of the nice clean FSI syntax. James?
Cheers, Tim Bray
tbray@textuality.com http://www.textuality.com/ +1-604-488-1167
I just counted the number of lines of code in the part of SP that handles
external entities; I included just the URL and OSFILE storage mangers, and
just the UTF-8 and Unicode encodings. It was more than 5000 lines. I don't
see how we can possibly meet our goals for ease of implementation if this
part of XML has this level of complexity.
Don't get me wrong: I love FPIs and FSIs. But I strongly believe this whole
XML exercise is going to be a total waste of time unless we exercise extreme
self-restraint in the features we put in XML, especially in version 1.0.
James
What is the functionality you want from FSIs that you can't get from URLs?
At least better opportunities for indirection.
bob
In my opinion, this is an especially strong argument against FPIs, FSIs, and
external entities - in XML 1.0. They can be added in a subsequent version.
I think the figures depend largely on how much code reuse is in effect.
Most people dealing with XML probably already have code to use. For those
that don't, I don't see 5000 lines of code as a major overhead, because
the code is very straightforward. One other thing: any XML applications
that try to do anything even slightly complex will require entity
managers. by stating up front what the overall functionality is expected
to be, people can design the entity managers with the future in mind.
I agree with you wholeheartedly. The real thrust I've been continually
trying to make is that of building a good infrastructure that is
open-ended. As such, I see nothing wrong with using FPI's and FSI's,
possibly with some constraints (XML 1.0 only *requires* certain forms
of FSI). The constraints can be removed over time, but the foundation
cannot be relaid time and time again.
No, FPIs as well: I was counting the entity manager (which in SP only deals
with external entities) after removal of support for all encodings other
than UTF-8 and Unicode and for all storage managers other than URL, OSFILE.
I didn't count all the code in the parser proper for handling entity
declarations and references.
James
What is the functionality you want from FSIs that you can't get from URLs?
James
How do FSIs offer this? What makes you think URLs can't offer indirection?
James
From: James Clark jjc@jclark.com
Subject: Re: B.9 Formal system, public identifiers?
How do FSIs offer this? What makes you think URLs can't offer indirection?
James
URLs can provide indirection (or at least a server can) but they
bind the resolution protocol at the time the name is assigned. Using
URLs as the only syntax for system identifiers doesn't allow other
forms of name to be used later on. If we specify FSI syntax, and
then restrict the FSIs to be URLs, there is a nice path to more-robust
identifiers at no more cost than we incur by implementing URLs to
begin with.
Similarly, if we allow FPIs and restrict our catalogs to mapping
FPI - FSI, the implementation will be a lot simpler than current SGML
implementations. We need not even use the SGML/Open catalog syntax if
it makes parsing to hard.
Having the FSI syntax to allow extension seems easy and
foresighted to me. FPI's may add complexity (in that they need to be
resolved, but if we have external entities at all, FPIs should be
available -- We need the slot in the syntax if we ever want to have
the FPI/FSI distinction -- and it is a critical distinction. So I
guess I think we need to FPIs into the syntax even if we consciously
decide not to specify how they should be resolved. (Assuming that we
have external entities at all. On that question I can't make up my
mind.)
If we are to eliminate the distinction between FPI and FSI (or
URN/URL or pointer/name, choose your terminology), then we would have
to eliminate URLs and other pointers I think, and standardize on FPIs
only. However, this would fly in the face of familiarity, and be hard to
implement, so we should probably avoid the high road on this issue.
But making it impossible to ever do the right thing and use
location independent naming seems a high price to bear.
-- David
RE delenda est.
I didn't say that URLs don't offer indirection, only that there are
better opportunities with FSIs. With an FSI, I can add my own storage
object handler to pull the doc out of a DMS, for example. With a URL, I
would have to go through a gateway to accomplish the same purpose. If
you've ever had a key gateway crash because the process table overflowed,
you understand my reluctance to be cornered into this.
bob
There is a cost to the user: instead of entering a kind of thing they are
familiar with, namely a URL, they have to enter something that they are not
familiar with, namely an FSI.
If we stick to URLs now, we can still support FSIs in the future: any FSI
must include  and  but these two characters are not allowed in URLs. It's
ridiculous to force users to type url at the beginning of all their URLs
when it's completely unnecessary to do so.
URL syntax is extensible: why can't it be used to do location-independent
naming? Something like fpi://W3C/DTD/HTML_3.2 is a perfectly good URL. I
can't resolve it, but then I can't resolve FPIs either.
Location-independent naming is not a problem specific to XML. We should use
whatever general solution gets adopted for the WWW, rather than trying to
come up with a solution specifically for XML.
James
Why can't you add a URL scheme to do this? It's just as easy for an entity
manager to recognize a URL scheme name and pass the scheme part off to some
handler as it is for it to recognize a storage manager name and pass the SOI
off to some handler.
James
Sure, but then the URL is just a dummy. Why force me to invent a scheme
like that? It's too messy. I like to have things that do what you expect
them to do. If it looks like a URL, it is a URL, and it should resolve
a URL. Trying to make it into something else is too much like server-side
includes, yeccchhh. I just can't see myself explaining to people: "Well,
true. It looks like a URL, but it is really this other thing...."
bob
No-one in the world has any XML code today.
There are people with URL-handling code, but there are very few people in
the world with FSI code. Most of it was written by James, in fact...
For me, if something takes James 5,000 lines, it is probably complex enough
that I would leave it out of the XML implementation I was thinking of
writing in my spare time when it settles down. If FSIs end up being
required by XML, I won't use XML for my purpose.
Although I can write about 500 lines of working C in a day, I am very
tired on the next day :-), and it takes several days of debugging. So I
can get between 100 and 300 working, tested, debugged lines of code done
in a day, averaged out over a week.
So FSIs may take me more than ten weeks.
Well, I don't think that counts as not a ``major overhead''.
If it takes me ten weeks to implement a parser for all of XML, you can
forget it. I would expect to be able to write a simple style-sheet
aware browser in less time than that!
(the last one took me about 2 or 3 weeks, but it wasn't very good :-) )
A possible compromise might be to allow a url: prefix to a URL, and
say that. This is forwards compatible -- you can add URNs later when
they are working, and any other mechanism you want.
Note that one very very useful feature in Panorama is support for partial
URLs. A system identifier of "docbook.dtd" is interpreted as relative to
the file containing that identifier. Hence, if we used File- Open to open
a file containing that system identifier, Panorama looks in the same
directory as the document you just opened. But if ftp was used, Panorama
will use ftp to fetch "docbook.dtd" from the remote computer, again in
the same directory. And if http was used... well, you see the pattern :-)
This means you can test your SGML locally on a networked or local disk,
then yes exactly the same unchanged files to test with a web browser.
No changes means no errors.
If URLs are used in XML, let's also allow partial URLs, as in HTML, and say
that _all_ system identifiers are treated in this way. It really does
work, and there is a sample implementation you can try...
Lee
This was one of my original dislikes for FSI's: namely that they add a
lot of syntax for no apparent benefit. In the long run though, it's
all just syntax, and I think that one thing FSI's do bring to play is
that you can add attributes to the address. This can be very useful
for things like specifying encoding etc (yes, you could also use RFC
15XX mechanisms to encoding strings, but that is not a easy for users
to type).
True, but I haven't seen a good general purpose solution from the WWW
yet either.
BTW. Do you see URI's as addresses or names? I tend to think of them
as pointers into a large shared address space.
True, but they do have URL and/or name resolution code.
Well, that's you. I would use them.
Well, one of my strengths is prototyping, and the best I've ever
managed was 40,000+ lines of C++ in a month (working, reasonably well
tested, but not production level code), and recently 27,000 lines of
JAVA in 3 weeks, but that says little about the *type* of code. FSI's
and whatnot are simple enough to make them a SMOP, especially if they
are constrained by a "minimum" level of functionality. I would also
expect free code to be made available over time.
Or constrain the possible set of FSI's...
Relative URLs? They are very useful, and a standard feature in most
browsers now.
The question: are the WWW protocols the responsibility
of any notation or any language for defining a notation?
In a framework, protocols can always be added, but for
system integration and stability, redoing existing ones
is expensive.
After so many years of work in HyTime, I do not wish to
see the strong concepts of HyTime location and address types
disappear.
But at this time, the established WWW protocols are
in place and they work. XML has the power to return to us the
capability to design our own structures and use them
as see fit in operations on the data. To me, there
is the evolution of XML. Version 1.0
should be be a perfect fit to existing frameworks.
Else, it will not be adopted.
VRML used this strategy successfully. If we adopt
this strategy, our interoperability problems and
many of our portability problems are reduced significantly.
I think James is right. 2.0 is a new day.
len
On Sat, 12 Oct 96 15:08:24 CDT, Michael Sperberg-McQueen
Here is a possible solution to the impasse between FSI and URL-only.
The FSI design effectively treats an informal system identifier (i.e., an
ordinary string) as a default storage object specification. The usual default is
OSFILE. For XML, we could let the default be URL. In other words, for a URL you
could enter either:
or
url http://www.exasperated.org
For other storage managers that XML supports in future versions, the normal FSI
syntax would be used.
Charles F. Goldfarb * Information Management Consulting * +1(408)867-5553
13075 Paramount Drive * Saratoga CA 95070 * USA
International Standards Editor * ISO 8879 SGML * ISO/IEC 10744 HyTime
Prentice-Hall Series Editor * CFG Series on Open Information Management
This is a pretty decent solution. I'd like the option to use FSI's and
FPI's since I think I can implement the few kinds I would want in _much_
less than 5000 lines of code. We can handle this like the alternate
character sets: implementations are allowed to support it, but need not.
Network publication should _not_ use FSIs or FPIs until XML 2.0 defines
exactly how they should work.
-- David
RE delenda est.
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com
Boston University Computer Science \ Sr. Analyst
--------------------------------------------\ http://dynamicDiagrams.com/
MAPA: mapping for the WWW \__________________________
