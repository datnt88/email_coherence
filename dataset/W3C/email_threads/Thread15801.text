NB I do not receive this list. please add me to replies
charlesn@srl.rmit.edu.au
The difficulty is introduced by CSS allowing user-defined sheets. In
earlier HTML, there were a fixed number of Styles (H1, H2, P, UL etc).
Setting up 'presentation sheets' for these could take advantage of the
multi-media aspects of CSS such as the ability to define an
audio style, a screen style, etc. without risking it being subsequently
over-ridden. (Except Author sheets override reader sheets, which
seems stupid to me)
Another possibility would be to change the interpretation of specificity.
If a user could declare an H1 style, to be regarded as specific to every
instance of H1, including a class, id, etc, it would alleviate the
difficulty.
Charles McCathieNevile
Sunrise Research Lab
RMIT University
To auto-subscribe, please send a mail to w3c-wai-ig-request@w3.org with
Subject: subscribe.
H1, H2, O, UL are not style, they are structure&amp;content.
Style is for presentation, and when I write UL in a document, I mean
"this is a list of items", the presentation is independent, you can
voice it, print it, screen it, braille it, up to you.
Can you rephrase your issue ?
(the question is below the answer)
in HTML, H1 is a structural element. It specifies what role the block
plays (in this case, level 1 heading). But it makes intuitive sense to
view it as the name of a style, as well. In fact CSS begins by doing just
this. The difficulty is that CSS then allows the major group H1 to be
sub-classed. From a perspective of allowing users control, this
introduces the difficulty raised in this thread.
It seems that a solution may be to reexamine the CSS rules. If these
allowed greater weight for reader's rules than those of the author, and
provided a mechanism where a reader could make general declarations but
artificially raise their specificity, the problem may disappear.
As an example, if I could declare, in my reader screen styles that H1
should be color:purple size:massive, and that this declaration was to be
regarded as having the specificity of an H1 with a particular id and
class attribute, it seems that the problem would go away. I have ignored
the problem of author/reader precedence for the example. But that should
be easily soluble.
Charles McCathieNevile
Sunrise Research Laboratory
RMIT University
I had written
On Thu, 4 Dec 1997, Daniel Dardailler replied
[Charles McCathieNevile]
Indeed, it already has been. A rule can be declared as !important,
meaning that it takes precedence over everything else, except more
specific rules also marked !important. See 7.1.1 of CSS2.
-Chris
!ENTITY crism PUBLIC "-//O'Reilly//NONSGML Christopher R. Maden//EN"
URL http://www.oreilly.com/people/staff/crism/ TEL +1.617.499.7487
The user style sheet need to more than over ride author styles or even
there sub classing styles like H1. Since many authors will use absolute
positioning in spatial formatting, if you say enlarge all H1 (and it also
enlarges sub classes) you may end up with a screen full of alphabet soup.
What is need in the browser is a mechanism to say ignor the entire author
style sheet and use just mine. This would eliminate the impossible task of
users needing to know anything about the authors classing or positioning of
tags.
Jon
Jon Gunderson, Ph.D., ATP
Coordinator of Assistive Communication and Information Technology
Division of Rehabilitation - Education Services
University of Illinois at Urbana/Champaign
1207 S. Oak Street
Champaign, IL 61820
Voice: 217-244-5870
E-mail: jongund@uiuc.edu
WWW:http://www.staff.uiuc.edu/~jongund
JT:
I agree, this would then depend on the browser.
There may be situations however when we do want some of the author style
declarations to come through. I can't think of a good example right now but
I have come up with some in other conversations. For this reason it would
be good to have a strong, specific override mechanism in CSS. Could we have
something similar to "important!", possibly "access!" which can only be
used in the user style sheet?
Jutta Treviranus
ATRC
University of Toronto
jutta.treviranus@utoronto.ca
(416)978-5240
I am not sure having an ACCESS tag of importance would help, since the user
will never know all the class names that an author will create. For that
matter with the new tools many authors won't even know what their class
names are or even what classes are. I think style sheet over rides will
work great in pages that do not use CSS or only use CSS on the standard
HTML classes. But pages are becoming more complex and sub class tags is
becoming more popular. The use of abslute positioning will also be a
problem, unless the overriding style sheet can somehow modify the existing
positioning. Many times the user with a disability will not want any
spatial positioning, especially if is not carrying any information usefule
to interpret the page.
Jon
Jon Gunderson, Ph.D., ATP
Coordinator of Assistive Communication and Information Technology
Division of Rehabilitation - Education Services
University of Illinois at Urbana/Champaign
1207 S. Oak Street
Champaign, IL 61820
Voice: 217-244-5870
E-mail: jongund@uiuc.edu
WWW:http://www.staff.uiuc.edu/~jongund
Another possibility is to do what IE4 does - individual control over
rendering of fonts and colors. At present, IE doesn't support LAYER and
I'm told it never will because of absolute positioning problems. CSS is
definitely the way to go there.
How about recommending that browsers implement a "user always wins" switch?
From:jutta.treviranus@utoronto.ca [SMTP:jutta.treviranus@utoronto.ca]
Sent:Friday, December 05, 1997 10:55 AM
Subject:Re: Style sheets for access
This issue has been discussed before on this list, in the context of media
types. The outcome of those deliberations can be conveniently
recapitulated by contrasting two examples.
1. The user's default style sheet is of type media="aural". In this case,
only subsequent style sheets of type media="oral" will modify the user's
preferences. This is a desirable outcome, for it allows the author, should
he or she wish to do so, to exercise control over the audio rendering,
with the default being supplied by the user.
2. The media type of the user's default style sheet is a parameterized
value, for instance a hypothetical media type of media="screen enlarged",
which is not presently defined in any specification but which, for the
sake of illustration, may be regarded as designating a style sheet which
establishes a large font and perhaps a particular colour scheme. Now there
are two ways in which subsequent styles of the same base type, in this
scenario they would be of type media="screen", could be treated: (I) they
could be ignored; (II) they could participate in the cascade and thus
override the provisions of the default style sheet of type media="screen
enlarged".
Now it was generally agreed, in our previous treatment of this topic, that
behaviour (II) should be preferred. It was argued that, for example, it
would be absurd if the provisions of a default style sheet of type
media="braille embossed 40" could not be modified by a style later in the
cascading order of type media="braille". However, as the example of large
fonts indicates, there are cases in which behaviour (I) as enumerated
above would be the preferable option, thereby preventing style sheets of
type media="screen enlarged" from being subject to later styles of type
media="screen".
One solution might be to introduce a directive into CSS which, if present
in a style sheet, indicates that only subsequent styles which match the
media type exactly will participate in the cascade. Thus, in the default
style sheet of type media="screen enlarged", the proposed directive would
be included. Any later style sheet of type media="screen" would, pursuant
to this directive, be excluded from the cascade, since it would not
exactly match the media type of "screen enlarged". A fortiori, any later
style of type media="screen enlarged", whether supplied by the user or the
author, would match and would thus participate in the cascade.
Hi all,
The latest version of the CSS2 specification draft (11/07/1997) specifies
the following cascading order. It includes an "important" attribute (as
Jutta suggested). for more info see http://www.w3.org/TR/WD-CSS2/cascade.html
1. declarations marked '!important' carry more weight than unmarked
(normal) declarations.
2. Author's style sheets override reader's style sheets which override the
user agent's default values.
3. More specific declarations override more general ones.
"This strategy gives author's style sheets considerably higher weight than
those of the reader. It is therefore important that the user agent gives
the user the ability to turn off the influence of certain style sheets,
e.g. through a pull-down menu...A reader rule with an important declaration
will override an author rule with a normal declaration. An author rule
with an important declaration will override a reader rule with an important
declaration."
--wendy
From:jutta.treviranus@utoronto.ca [SMTP:jutta.treviranus@utoronto.ca]
Sent:Friday, December 05, 1997 10:55 AM
Subject:Re: Style sheets for access
wendy chisholm
researcher - human factors engineer
trace research and development center
university of wisconsin - madison, USA
JRG:: I think the model of user overrides currently implemented by
Microsoft is very good. The user always wins is what we need to see
implemented, especially when it comes to fonts and colors.
Jon Gunderson, Ph.D., ATP
Coordinator of Assistive Communication and Information Technology
Division of Rehabilitation - Education Services
University of Illinois at Urbana/Champaign
1207 S. Oak Street
Champaign, IL 61820
Voice: 217-244-5870
E-mail: jongund@uiuc.edu
WWW:http://www.staff.uiuc.edu/~jongund
CMcCN::
The CSS standard does this. But it is a recommendation. Why not make it
part of the Cascade rules? The virtue of this is it is fairly easy to
make the change, and it would be retro-active for CSS1.
The problem of specificity is a little harder. It would be possible
simply to allow ANY user Style to override author styles, and ignore the
specificity rules. But they can be a useful tool. So it would be better
to include a mechanism which allows the user to set the specificity of
their style. For example, I may like to have my H2 style override any H2
subclass, but have a (differently styled) H2 subclass which will override
an H2 with an ID attribute. This preserves the ability to mark out
particular objects which the subclassing allows.
Charles McCathieNevile
charlesn@srl.rmit.edu.au
Sunrise Research Laboratory
RMIT University
I think that we need to come up with something that is simple for end user
to use to get the presentation they need. We have not even talked about
what happens if a scripting language starts to modify style sheet
attributes.
I would like to propose that an accessible WWW page is one that renders the
information content well without the style sheet, and therefore turning off
the author styles and substituting the users style sheet will solve alot of
problems. The limitation of this approach is the ability of authors to
varify that information is still rendered logically without the style
sheet. This also does not solve all problems like tables and frames, but
gives the user alot of control over visual effects such as color and font
features.
Jon Gunderson, Ph.D., ATP
Coordinator of Assistive Communication and Information Technology
Division of Rehabilitation - Education Services
University of Illinois at Urbana/Champaign
1207 S. Oak Street
Champaign, IL 61820
Voice: 217-244-5870
E-mail: jongund@uiuc.edu
WWW:http://www.staff.uiuc.edu/~jongund
(in summary) We need a simple system for users to determine the outcome.
There are several aspects to explore, such as scripting languages
modifying the style sheets, the ability of authors to
varify that information is still rendered logically without the style
sheet, tables and frames.
CMcCN::
If the user prevailed in the Cascade, then the problem shrinks to making
sure the sense of a document is not distorted by removing the style.
This should be reasonably simple. If an author uses too much styling, they
run a great risk of incomprehensibility. This is not just a WAI issue.
The most common example I find is the use of half a dozen icons for
navigation, which are comprehensible only to the people who made them.
However it seems a difficult concept for many people. Part of the reason
the web appeals is its ability to handle graphic content. And many of the
people employed to make content have a background in graphics. Often they
don't understand the technical problems they are creating. In my
experience, they are often good at creating graphics, but actually quite
bad at communicating with graphics, let alone in any other medium. How
you solve that problem is a thorny one, since the people employing them
often know less than the designers. Otherwise somebody who understood the
problems would get the job.
I have ignored the problem of how a user learns to create their own
styles to ensure that a sensibly written page is comprehensible, or where
they get a third party stylesheet which they make their own. I think it
is not such a huge problem.
thoughts anybody?
Charles McCathieNevile
charlesn@srl.rmit.edu.au
