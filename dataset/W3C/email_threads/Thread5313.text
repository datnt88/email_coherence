[Note: This thread is being moved to public-sws-ig@w3.org. After this
message, replies should be sent only to public-sws-ig. Subscription
info is at http://www.w3.org/2002/ws/swsig/.]
[Monika Solanki]
2. Formula is made up of predicates, so we define
process:Formula
process:predicate rdf:parseType="Collection"
Bad terminology. People often speak of atomic formulas as
"predicates," which yields a lot of confusion.
There are two alternatives I would recommend: either replace Formula
with any connective, or require Formula to always label the topmost
element, with an implicit conjunction inside. The second is
essentially what you're proposing, so I'd just change 'predicate' to
'conjuncts.'
3. Then we define propertyPredicate etc from ORL. Definition of variable
5. This Formula can then be used whever we want to define "Condition",
ofcourse with appropriate relationship between the two defined in the
process Ontology i.e
Condition is of rdf:type Formula
Right.
So, if we just want to express the predicate accountExists(acctID,
password) we write
Here's how I would change it:
process:Formula
process:conjuncts rdf:parseType="Collection"
owl:individualPropertyAtom
owl:propertyPredicate
rdf:resource="&amp;congoUserProfile;accountExists/
owl:argument1 rdf:about="#AcctID" /
owl:argument2 rdf:about="#Password" /
/owl:individualPropertyAtom
owl:individualPropertyAtom
owl:propertyPredicate
rdf:resource="&amp;congoUserProfile;creditExists/
owl:argument1 rdf:about="#AcctID" /
owl:argument2 rdf:about="#CreditCardNumber" /
/owl:individualPropertyAtom
/process:conjuncts
/process:Formula
I believe the above is equivalent to an Horrocks/Patel-Schneider rule
with an empty antecedent, and the 2 property atoms in the consequent.
If that is true, perhaps we should just express it that way for now, so
as to avoid defining our own Formula class which probably will be
supplanted later.
I also wonder if Ian and Peter (and the joint committee) have any plans
to define something like Formula (or at least "ConjunctiveFormula"), so
that one can write non-rule formulas a little more conveniently.
- David
If you want an OR here instead (which makes no sense, but is
syntactically illustrative), you write:
process:Formula
process:conjuncts rdf:parseType="Collection"
process:Or
process:disjuncts rdf:parseType="Collection"
owl:individualPropertyAtom
owl:propertyPredicate
rdf:resource="&amp;congoUserProfile;accountE
xists/
owl:argument1 rdf:about="#AcctID" /
owl:argument2 rdf:about="#Password" /
/owl:individualPropertyAtom
owl:individualPropertyAtom
owl:propertyPredicate
rdf:resource="&amp;congoUserProfile;creditE
xists/
owl:argument1 rdf:about="#AcctID" /
owl:argument2 rdf:about="#CreditCardNumber" /
/owl:individualPropertyAtom
/process:disjuncts
/process:Or
/process:conjuncts
/process:Formula
[Drew McDermott]
Here's how I would change it:
process:Formula
process:conjuncts rdf:parseType="Collection"
owl:individualPropertyAtom
owl:propertyPredicate
rdf:resource="&amp;congoUserProfile;accountExist
s/
owl:argument1 rdf:about="#AcctID" /
owl:argument2 rdf:about="#Password" /
/owl:individualPropertyAtom
owl:individualPropertyAtom
owl:propertyPredicate
rdf:resource="&amp;congoUserProfile;creditExist
s/
owl:argument1 rdf:about="#AcctID" /
owl:argument2 rdf:about="#CreditCardNumber" /
/owl:individualPropertyAtom
/process:conjuncts
/process:Formula
[David Martin]
I believe the above is equivalent to an Horrocks/Patel-Schneider rule
with an empty antecedent, and the 2 property atoms in the consequent.
If that is true, perhaps we should just express it that way for now, so
as to avoid defining our own Formula class which probably will be
supplanted later.
I also wonder if Ian and Peter (and the joint committee) have any plans
to define something like Formula (or at least "ConjunctiveFormula"), so
that one can write non-rule formulas a little more conveniently.
I hope that OWL Rules, or something a lot like it, is going to become
the standard. (Assuming we can't get what's really needed, which is
to introduce non-asserted contexts into RDF.) It would be very easy
to switch DRS over to the OWLR vocabulary, thus making it a
downward-compatible superset of OWL Rules. Since OWL Rules gets
variables right, and encodes atomic formulas right, it would be very
easy to add explicit quantifiers and a richer zoo of atomic formula
types.
Since OWL Rules is not the standard now, I don't think we gain
anything by expressing a Formula as a rule with a missing antecedent.
-- Drew
-- Drew McDermott
Yale Computer Science Department
Here's how I would change it:
process:Formula
process:conjuncts rdf:parseType="Collection"
owl:individualPropertyAtom
owl:propertyPredicate
rdf:resource="&amp;congoUserProfile;accountExi
sts/
owl:argument1 rdf:about="#AcctID" /
owl:argument2 rdf:about="#Password" /
/owl:individualPropertyAtom
owl:individualPropertyAtom
owl:propertyPredicate
rdf:resource="&amp;congoUserProfile;creditExi
sts/
owl:argument1 rdf:about="#AcctID" /
owl:argument2 rdf:about="#CreditCardNumber" /
/owl:individualPropertyAtom
/process:conjuncts
/process:Formula
Would it perhaps make sense, then, to define Formula in the drs
namespace (or use whatever term drs already uses for formulas), rather
than putting this new thing in the process namespace?
Regards,
David
[David Martin]
Would it perhaps make sense, then, to define Formula in the drs
namespace (or use whatever term drs already uses for formulas), rather
than putting this new thing in the process namespace?
Yes, it would. We'd get:
owl:propertyPredicate
rdf:resource="&amp;congoUserProfile;accountExists
/
owl:propertyPredicate
rdf:resource="&amp;congoUserProfile;creditExists
/
-- Drew
-- Drew McDermott
Yale Computer Science Department
Hi Drew,
Would drs:And be the top-level element?
I guess this says that the atoms are to be treated in conjunction, do we
have something on top of all this that classifies it as a formula?
Thanks,
Monika
s/
s/
**   **   **   **   **   **   **   **
Monika Solanki
Software Technology Research Laboratory(STRL)
De Montfort University
Hawthorn building, H00.18
The Gateway
Leicester LE1 9BH, UK
web: http://www.cse.dmu.ac.uk/~monika
**   **   **   **   **   **   **   **
[Monika Solanki]
Would drs:And be the top-level element?
I guess this says that the atoms are to be treated in conjunction, do we
have something on top of all this that classifies it as a formula?
Yes, the DRS ontology, which states that Ands are a subclass of
Connective_formulas, which are a subclass of Formulas.
I append the latest, OWL-compatible, version of the ontology because
it really isn't that long. I haven't validated this, and it might
have a couple of bugs, because I haven't fully grokked how
"parseType=Collection" works in OWL.
I really should send out an updated version of the DRS overview to
include Burstein-style atomic formulas plus influences from OWL Rules.
-- Drew
rdf:RDF
xmlns:rdf ="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:rdfs="http://www.w3.org/2000/01/rdf-schema#"
xmlns ="http://www.w3.org/2002/07/owl#"
xmlns:xsd ="http://www.w3.org/2000/10/XMLSchema#"
xmlns:drs ="http://www.cs.yale.edu/~dvm/daml/drsonto.owl#"
This ontology describes formulas in logical languages.
The class of Propositions
!-- Every resource can be a term, but we don't try to say that;
it sounds too dangerous, since everything is a resource.
--
!-- There are two ways to describe any atomic formula, as a
functional term or as a triple.
We'd like to say that the args = cons(subj, obj), but that's
presumably hopeless --
!-- type restriction: If a term is a Literal and is declared of type
Y, then the 'value' should be a literal of type Y.
Can this be expressed in OWL? --
rdf:Description rdf:about="http://www.cs.yale.edu/~dvm/daml/drsonto.daml#Null"
/
rdfs:subClassOf
rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Bag"/
onProperty
rdf:resource="http://www.w3.org/2002/07/owl#item"/
Bag of Vars
rdfs:subClassOf
rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Bag"/
onProperty
rdf:resource="http://www.w3.org/2002/07/owl#item"/
The list of Atomic formula
rdfs:subClassOf
rdf:resource="#Term_Bag"/
onProperty
rdf:resource="http://www.w3.org/2002/07/owl#item"/
rdfs:subClassOf
rdf:resource="http://www.w3.org/1999/02/22-rdf-syntax-ns#Bag"/
onProperty
rdf:resource="http://www.w3.org/2002/07/owl#item"/
-- Drew McDermott
Yale Computer Science Department
I agree; that would be well worthwhile. Might that not become a
candidate for an FOL layer atop the newly proposed rules layer? (So
then, as long as you remember to talk about layers instead of
reification, you may yet get a fair measure of fame and glory :-).
- David
l"/
