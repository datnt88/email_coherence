-- 4.4 User-specifiable Serialization
ACTION: KendellC to elaborate on 4.4
-sigh-... I'll know DAWG is finished when Dan spells my name correctly
two times in a row. :
Okay, to discharge this action item...
I proposed 4.4 because there are now, by my count, several
exchange serializations of RDF graphs, with varying statuses: de jure
standards, de facto standards, dead-end proposals, v. promising
proposals, wild-ass ideas:
1. canonical RDF-XML (with a couple of well-known variants)
2. Notation3
3. NTriples
4. TRiX
5. Turtle
6. RXR
7. YAML (I'm working on this one; it has some nice features)
And probably a few others I'v forgotten or never heard of.
These all have different properties, different advantages and
disadvantages; some are more widely implemented, some are good for
resource-constrained use cases, and so on. But what seems clear to me
is that no one of these is going to crowd out the others. Thus, I
think we should recognize that fact -- if it is a fact -- and act
accordingly.
So I want to be able to request or negotiate for -- and I'm *today*
agnostic as to where, in the protocol or in the QL -- my preferred
exchange serialization. That was the point of my proposal.
Open design issues (many of which I expect can be analogized to
content negotiation in HTTP) include:
- how to request one's preferred exchange serialization;
- whether it's a request or a negotiation;
- whether to identify exchange serializations by Internet Media Type, by
URI, or by canonical short name;
- which format should be the default? (Ok, that one is easy!)
Also, is this requirement totally parasitic on 3.4? In other
words, if 3.4 is rejected, should we still be able to specify which
kind of exchange serialization one prefers for variable binding
results? I don't see why not, and, in fact, I think that this design
objective is applicable to both 3.2 and 3.4 is an indication of its
utility.
I hope this discharges my action item to expand on my reasons for 4.4.
Best,
Kendall Clark
Just to be clear, the IMT option won't really work here. IMT aren't
generally fine-grained enough to distinguish different XML
vocabularies (which sucks, really). I think, then, short-name or URI
are the real options.
I'd be happy to design for 4.4 v. simply[1]:
Put a bit in our doc about (1) HTTP content-negotiation and (2)
come up with a set of (or a way to generate a set of) canonical
names for various serialization formats.
I believe we'd need to do (2) because, IIRC, the con-neg spec talks
about IMTs. I just *assume* people are going to use con-neg if we give
them an HTTP binding for our protocol and don't say anything about all
of this. Except that then they'll have an interop nightmare because we
won't have done (2).
Best,
Kendall
[1] What I'd really like to see, vis-a-vis design, is an RDF
vocabulary to make assertions about the properties of DAWG origin
servers. The HTTP spec even gives us a very elegant (IMO) discovery
mechanism using OPTIONS and (slightly extending) OPTIONS *. Such a
vocabulary could assert which serialization types, identified by URI,
the server is prepared to offer, as well as other gooey bits of
metadata-y goodness.
There are three tiers in the xml subtrees as specified by RFC 3023.
It specifies (or maybe just references) a bunch of popular media types:
8.14 Application/xml-external-parsed-entity with UTF-16BE Charset 23
8.15 Application/xml-dtd . . . . . . . . . . . . . . . . . . . . 23
8.16 Application/mathml+xml . . . . . . . . . . . . . . . . . . . 24
8.17 Application/xslt+xml . . . . . . . . . . . . . . . . . . . . 24
8.18 Application/rdf+xml . . . . . . . . . . . . . . . . . . . . 24
8.19 Image/svg+xml . . . . . . . . . . . . . . . . . . . . . . . 24
One feature of using media type selection is that it allows us to take
advantage of the notion that the semantic content should be consistent
from one serialization to another. Thus, you can get the URL for a
query and give the URL to different clients which prefer different
result formats.
For example: suppose the W3C mail search service provided results in
different languages; you could
GET 'http://www.w3.org/Search/Mail/Public/search?keywords=20040608210620.GC15635%40monkeyfist.com&amp;hdr-1-name=subject&amp;hdr-1-query=&amp;index-grp=Public__FULL&amp;index-type=t&amp;type-index=public-rdf-dawg'
and get back a bunch of HTML,
GET -H 'Accept: application/rdf+xml' 'http://www.w3.org/Search/Mail/Public/search?keywords=20040608210620.GC15635%40monkeyfist.com&amp;hdr-1-name=subject&amp;hdr-1-query=&amp;index-grp=Public__FULL&amp;index-type=t&amp;type-index=public-rdf-dawg'
and get back some RDF:
xmlns:log="http://www.w3.org/2000/10/swap/log#"
xmlns:rdf="http://www.w3.org/1999/02/22-rdf-syntax-ns#"
xmlns:search="http://www.w3.org/Team/2001/09/search/search.pl#"
xmlns:session="http://dev.w3.org/cvsweb/perl/modules/W3C/Util/W3CDebugCGI.pm" ... /rdf:RDF
GET -H 'Accept: text/x-n3' 'http://www.w3.org/Search/Mail/Public/search?keywords=20040608210620.GC15635%40monkeyfist.com&amp;hdr-1-name=subject&amp;hdr-1-query=&amp;index-grp=Public__FULL&amp;index-type=t&amp;type-index=public-rdf-dawg'
and get back some n3:
@prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# .
session:id "1086926895.725659".
GET -H 'Accept: application/soap-xml' 'http://www.w3.org/Search/Mail/Public/search?keywords=20040608210620.GC15635%40monkeyfist.com&amp;hdr-1-name=subject&amp;hdr-1-query=&amp;index-grp=Public__FULL&amp;index-type=t&amp;type-index=public-rdf-dawg'
and get something (who knows what) in a SOAP envelope:
env:Envelope xmlns:env="http://www.w3.org/2003/05/soap-envelope"
xmlns:search="http://www.w3.org/Team/2001/09/search/search.pl#"
xmlns:session="http://dev.w3.org/cvsweb/perl/modules/W3C/Util/W3CDebugCGI.pm"
The Annotea server behaves similarly.
I can see this working to select between N3 and RDF, even RDF and TRiX
application/rdf+xml vs application/trix+xml
but not between tuple and graph responses. Those seem like they'd
require different URLs.
On the downside, whatever mime types we need have to be registered
through IETF which puts a dependancy on another orgnanization.
3023 does not deal with compound document, but I don't think we need
that for our purposes. Even if we do, and we have to do something
that's known only to DAWG-QL (or DAWG-TP), we'd have to do that if
we rolled our own format selection protocol.
[2] http://www.faqs.org/rfcs/rfc3023.html
-eric
office: +1.617.258.5741 NE43-344, MIT, Cambridge, MA 02144 USA
cell: +1.857.222.5741
(eric@w3.org)
Feel free to forward this message to any list for any purpose other than
email address distribution.
From: Kendall Clark
Date: 7 June 2004 18:20
-- 4.4 User-specifiable Serialization
ACTION: KendellC to elaborate on 4.4
Re: 1, 3, 5,
There is one, defined recommendation for serializing RDF graphs - its
RDF/XML [1]. The one point of having a recommendation is so everyone can
implement one thing, and not many.
Alternative serialization that encode more information (TriX for the named
graphs, some way of using N3 with formulae) is one thing: promoting
alternative serialises of RDF just negates the value to clients (samll and
large) of having one serialization to deal with.
Andy
[1] OK - it can't serialize every RDF graph [2]
[2] Example in case you were wondering:
x http://example.org/pred/ "string" .
And "yes" it can cause problems. I have had a bug report from this - the
RDF is created programmatically, it is extracted and serialized. And once
unhelpful predicates are in the DB they are hard to remove.
