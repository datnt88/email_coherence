Regarding the configuration problems with Apache, I
think the main culprit is the configuration file httpd.conf,
as shipped with the distribution. This contains:
# Specify a default charset for all pages sent out. This is
# always a good idea and opens the door for future internationalisation
# of your web site, should you ever want it. Specifying it as
# a default does little harm; as the standard dictates that a page
# is in iso-8859-1 (latin1) unless specified otherwise i.e. you
# are merely stating the obvious. There are also some security
# reasons in browsers, related to javascript and URL parsing
# which encourage you to always set a default char set.
AddDefaultCharset ISO-8859-1
I have filed a bug with bugzilla, asking that this default setting
be removed or commented out, and the comment fixed, at
You may want to vote for that bug.
I have commented on a related bug that I found, at
Regards, Martin.
(to virtually all Content-Type headers whether textual or not) unless
it's explicitly overriden in the JSP with either of the following lines.
So, including the following line in a JSP without either of the above
leads to a conflict:
It seems like the JSP specification mandates this behavior so that it's
not just Jakarta Tomcat. I'm not sure whether this is good or bad.
Certainly JSP offers a way to specify the character encoding of
individual pages (it took me a while to find that out [1]), but someone who
doesn't know that (and who believes that adding meta tag would work)
may be taken by surprise.
Do we have to consider asking those in charge of the JSP specification
to change it so that by default NO charset parameter is added?
Jungshik
[1] I should have turned to
BTW, the second method of setting the page encoding in JSP is not mentioned
in the above tip.
Hi Jungshik,
I think you're forgetting what happens to a JSP page. You can't just have
the JSP container omit to mention the charset in the HTTP header because the
encoding is important in the lifecycle of a JSP page: JSP pages are compiled
into servlets. That is, they are turned into a small Java program that
generates the HTML. The HTML content in a JSP page just becomes a series of
Java String objects inside the servlet. The Strings must be converted back
to bytes using some encoding (since Strings are UTF-16 based Java objects).
You set the encoding used for this conversion with the page contentType
directive.
So you see: if you don't tell JSP container's servlet generate what encoding
you want, it has to make some assumption.
There is another part to this process as well: you have to generate the
servlet (i.e. those String objects) to begin with. Parsing the HTML to look
for a META tag is not a really reliable solution. So unless the file is
entirely ASCII to begin with, you have to tell the JSP container how to read
the bytes in the file to generate the servlet. This is what the pageEncoding
directive does.
One could argue with the choice of Latin-1 as the JSP default, but any other
encoding, including UTF-8, wouldn't really solve the problem: people want to
use legacy encodings from time to time as well. Setting the page encoding
and content type should just be automatically part of what a JSP developer
does in every page.
Best Regards,
Addison
Addison P. Phillips
Director, Globalization Architecture
webMethods | Delivering Global Business Visibility
Chair, W3C Internationalization (I18N) Working Group
Chair, W3C-I18N-WG, Web Services Task Force
Internationalization is an architecture.
It is not a feature.
From: public-i18n-geo-request@w3.org
[mailto:public-i18n-geo-request@w3.org]On Behalf Of Jungshik Shin
Sent: dimanche 30 novembre 2003 08:49
Subject: JSP containers and default charset (was: Re DefaultCharset
considered harmful)
Hi Addison,
You're absolutely right. Therefore, the charset declaration in a JSP
file serves dual purposes. It indicates the character encoding of the
JSP file to the Java compiler (i.e. playing the same role as '-encoding'
option when invoking 'javac') and it also indicates in what character
encoding the generated html file should be served to the outside world.
Someone might argue that there need to be two separate 'directives' for
two roles, but I guess it's all right to overload pageEncoding directive.
Yup, I can't agree with you more.
I was labelling ASCII only files as UTF-8, which is why I didn't
realize that when I wrote the message.
Thanks,
Jungshik
Hi Jungshik,
Not quite: there are two directives: pageEncoding and contentType and they
can indicate *different* encodings. If you use pageEncoding on its own, it
is assumed that the encoding of the source JSP file should be the encoding
used to deliver the file. If you use contentType on its own, then the page
is delivered in the encoding specified, but read as Latin-1. If you want to
use one encoding (say KS-X-1001) for the JSP file and a different encoding
for the delivery (say UTF-8) then you can use both directives together.
For example, see Norbert Lindeberg's excellent article here:
SP/
In addition, the pageEncoding is how the JSP container reads the .jsp file
in, but the resulting servlet may not be written in the specified encoding
(e.g. the javac invocation might not use an -encoding directive).
One more note: if your JSP page reads data from a HttpServletRequest object,
you may have to call the setCharacterEncoding() method on that object before
retrieving parameters sent to your JSP page via GET or POST.
Best Regards,
Addison
Hi Addison,
Thanks for the clarification. The more I wrote about it, the clearer it
became how ignorant I am about JSP (which I took up just a week ago).
Here's one thing I know more than you do :-). KS X 1001 is not a
character encoding scheme but just a coded character set without
Latin letters, numbers and punctuations so that on its own it's
virtually useless. It always has to be used along with US-ASCII (ISO
646:IRV)/ISO-646:KR in CES'(character encodings/MIME charset) like EUC-KR
and ISO-2022-KR. That is, virtually NONE of Korean text can be written
with characters drawn _only_ from KS X 1001. When it comes to JSP, it's
even more so because all those ASCII charcters are NOT covered by KS X
1001 unless javac somehow can understand double/full width Latin letters,
numbers and punctuations in KS X 1001, which I don't think is the case.
... snip (good tips/advices) ...
Thanks again for the reference and tips.
BTW, wouldn't it be nice if it's possible to specify the DTP with a
a macro for my editor so that I can enter DTDs for xhtml 1.0 and html
4.x strict/loose rather easily when I edit html/xhtml/jsp files, but a
simple JSP directive would make it a lot more pages (generated by JSP)
compliant to the standard in that they have the DTD declared. By the same
token, it'd be nice (although not necessary because the http header is
emitted to that effect) if 'contentType' directive with __'text/html;
if not present (the same is true of PHP. I don't know what ASP does
here.) I realize that both are rather tricky to implement given the
way JSP files are processed (as you explained in great details) before
they're delivered. Maybe, we just have to live with having to add
DTD declation manually.
Jungshik
You're right. I was trying to avoid the old "ksc5601 is obsolete" issue. I
suppose I could have said "MS949" or "EUC-KR"... :-).
Addison
Addison P. Phillips
Director, Globalization Architecture
webMethods | Delivering Global Business Visibility
Chair, W3C Internationalization (I18N) Working Group
Chair, W3C-I18N-WG, Web Services Task Force
Internationalization is an architecture.
It is not a feature.
Hello Addison, others,
One very specific question about JSP: Is it possible (and if yes,
how) to produce an XML file where the correct encoding is automatically
put into the encoding pseudo-attribute of the XML declaration?
Also, is it possible (and how) to use the mechanisms provided
(rather than doing everything on your own) and produce a HTTP
response without a 'charset' parameter on the Content-Type
response header?
Regards, Martin.
I'm sorry to resurrect an old thread, but recently I stumbled upon this
issue once more. Besides, for those who would come across this
issue in the future, we may have to add it to the appropriate
sections of our authoring tech document (where 'form' and
'character encoding specification' are dealt with) along with
what's to be done with this in other popular server-side 'scripts'/cgi
(asp, perl, etc)
With recent versions of Apache tomcat 4.1.29 and 5.x, I found that
request.setCharacterEncoding() doesn't have any effect for GET by
default because it treats the URI as if it's in ISO-8859-1 whatever you
do with setCharacterEncoding() (setCharacterEncoding() normally only
applies to the request body NOT the URI.). For POST, it works just fine.
By setting 'useBodyEncodingForURI' attribute to true in server.xml for
the http/1.1 connector, we can get setCharacterEncoding() applied to
GET as well. The following bugzilla entries for apache mention
two other methods.
Jungshik
