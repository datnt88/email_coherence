In looking at the Level 3 working draft, I see that the
DocumentOrder and TreePosition enums defined in the Node interface
both use the names SAME and UNORDERED, but the numeric values will be
different given the IDL as specified.
I'd like to suggest that the ordering of the names be the same for
those names that are shared between the two enums, or that using enums
be avoided for this purpose. The constants should share values if
they share names; this will make it easier to create readable language
bindings for the DOM.
(I apologize if this has already been addressed, but a search of the
list archive did not show anything relevant.)
-Fred
Fred L. Drake, Jr. fdrake at acm.org
PythonLabs at Digital Creations
I wrote earlier:
Looking at this further, the use of the same names for two
enumerations in the same scope is illegal IDL -- no IDL compiler
should accept this. (There's also a minor error with extra semicolons
between the enum definition and the typedef name, but let's consider
that a simple typo!)
I'll propose that a single enumeration should be used, and should
define the names that are defined for TreePosition, but perhaps call
it TreeOrder. That type can be used for both compareDocumentOrder()
and compareTreePosition().
-Fred
Fred L. Drake, Jr. fdrake at acm.org
PythonLabs at Digital Creations
"Tree order" doesn't seem to capture the meaning like "tree position"
does. The distinction in names is intentional.
While ancestors and descendants have order within a document using
conventions of document order (which start tag was encountered first),
they have no sequential order within a tree hierarchy. Being an
ancestor or a descendant does not feel like "order" to me, but rather
relative position of the nodes, which can be in one of four directions.
Ray Whitmer
rayw@netscape.com
OK. The name itself is of limited interest for me, but the current
IDL isn't usable. If there are to be two different enumerations,
there needs to be some prefix on the names from each ("ORDER_" and
"POSITION_" come to mind, but I won't be terribly picky).
I concur; there is a semantic problem with collapsing the two
types. There could be two types if the names don't clash, or there
could be a specific set of values, as for the NodeType constants. I'm
not tied to either approach.
-Fred
Fred L. Drake, Jr. fdrake at acm.org
PythonLabs at Digital Creations
