I noticed that closure rule rdf2 in
will generate an infinite number of triples from any triple with an xml
literal as its object.
I was wondering if there was a reason to prefer the form of the closure
rule given over one of the form:
sss1 ppp1 xml1
sss2 ppp2 xml2
sss1 ppp1 _:x
sss2 ppp2 _:x
where xml1 and xml2 denote the same XML literal value.
Brian
Is that really the case? I still have not got a clear picture of what
the XMLliteral value is supposed to be or how it relates to the
lexical form, but my understanding was that the lex2value mapping was
a pretty simple normalization process, so that the set of lexical
forms which map to the same 'value' would be reasonably small.
Im not sure if that would be sufficient to find all entailments, but
I'll think about it.
BTW  there is an obvious way to limit se1 and se2 to keep those
closures finite, which I suspect you already noticed, when I read you
earlier message more carefully: do not apply them to bnodes. Duh.
Pat
IHMC(850)434 8903 or (650)494 3973 home
40 South Alcaniz St.(850)202 4416 office
FL 32501(850)291 0667 cell
phayes@ihmc.us http://www.ihmc.us/users/phayes
Jeremy is the expert. I was thinking there may be places where I can
add unbounded amounts of whitespace, e.g. spaces between attribute
values.
Brian
In the lexical space and the value space XMLLiterals are simply (isomorhpic
to?) strings.
i.e. identity and equality are the same.
However, in RDF/XML documents Brian is correct, you can have arbitrarty
whitespace in certain places - but it gets squashed before you get to the
lexical space.
Jeremy
The best thing in any case is to phrase the rule in terms of
replacing XML literal strings by their canonical versions. This kills
even the dead birds with one stone and is fine for checking closures.
New editor's draft will have this modification.
Pat
IHMC(850)434 8903 or (650)494 3973 home
40 South Alcaniz St.(850)202 4416 office
FL 32501(850)291 0667 cell
phayes@ihmc.us http://www.ihmc.us/users/phayes
