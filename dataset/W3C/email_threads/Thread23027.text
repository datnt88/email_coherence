The Load and Save spec says that the DocumentLS interface will be
implemented by objects that currently implement document. The Level 1 Core
spec says:
DocumentFragment is a "lightweight" or "minimal" Document object. It is very
common to want to be able to extract a portion of a document's tree or to
create a new fragment of a document. Imagine implementing a user command
like cut or rearranging a document by moving fragments around. It is
desirable to have an object which can hold such fragments and it is quite
natural to use a Node for this purpose. While it is true that a Document
object could fulfill this role, a Document object can potentially be a
heavyweight object, depending on the underlying implementation. What is
really needed for this is a very lightweight object. DocumentFragment is
such an object.
Furthermore, various operations -- such as inserting nodes as children of
another Node -- may take DocumentFragment objects as arguments; this results
in all the child nodes of the DocumentFragment being moved to the child list
of this node.
Therfore, shouldn't the DocumentLS interface be implemented by
DocumentFragment objects also?
Thanks, Dominic.
On Tuesday, 10/29/2002 at 09:11 EST, "Dominic Chambers"
I think not. The meaning and usage of DocumentFragment has changed
somewhat as the DOM has evolved, and the quoted paragraphs should not be
taken overly literally.
Yes I do see you point. I myself never use DocumentFragment normally, but
was hoping to offer a sensible way to allow loading into a node.
In particular: Every DocumentFragment exists in the context of a specific
Document node, which carries the factory methods for creating more nodes
compatable with that DocumentFragment. Since Load can be considered
another kind of node factory, I think it makes perfect sense for Load to
be associated with the Document rather than the fragment, and Save would
remain on the Document for reasons of symmetry.
It is certainly desirable to be able to load XML source into the context
of an existing Document (rather than loading into a new Document and
having to import/adopt them), and quite possibly to insert them into a
DocumentFragment in the process of doing so... but as long as the APIs
support that operation I don't think the methods themselves need to be
duplicated on DocumentFragment.
Yes, I agree, loading XML into nodes should be possible without creating
a new Document and importing. The problem as I see it, is that there are
two ways of using Load and Save: the easy way and the hard way. This
makes sense since Load and Save has so many nice features when you go
the full distance and create a DOMBuilder.
But, the easy way does not allow users to import or export directly from a
node, which is a common desire, and is already provided by both IE and
Mozilla using the proprietary innerHTML method. This leaves the hard way
of achieving this conceptually simple task.
For example, node.innerHTML = xml, would be written as:
var domBuilder = document.createDOMBuilder(
document.MODE_SYNCHRONOUS);
var inputSource = document.createDOMInputSource();
inputSource.stringData = xml;
domBuilder.parseWithContext(inputSource, node, DOMBuilder.REPLACE);
Notice that in this example we are not using entity resolvers, error
handlers,
feature determination, character decoding, XML base, asynchronous
download, or any of the good stuff that Load and Save offers the more
advanced
user.
So there seems to be a disparity between a synchronous uri or string load
into a
document, and the same thing into a node. The node is definately a second
class
citizen in this model.
Is there a reason for this disparity, and does it have anything to do with
the fact that
IE currently provides load and loadXML for documents, but not for nodes?
Would
it change anything if these methods (or some other similar methods) were
made
available for nodes and they never supported it? Wouldn't users of that
implementation
still be in the same position - unable to perform this task without using
proprietary
methods?
Regards, Dominc.
Joe Kesselman / IBM Research
On Tuesday, 10/29/2002 at 09:11 EST, "Dominic Chambers"
I think not. The meaning and usage of DocumentFragment has changed
somewhat as the DOM has evolved, and the quoted paragraphs should not be
taken overly literally.
In particular: Every DocumentFragment exists in the context of a specific
Document node, which carries the factory methods for creating more nodes
compatable with that DocumentFragment. Since Load can be considered
another kind of node factory, I think it makes perfect sense for Load to
be associated with the Document rather than the fragment, and Save would
remain on the Document for reasons of symmetry.
It is certainly desirable to be able to load XML source into the context
of an existing Document (rather than loading into a new Document and
having to import/adopt them), and quite possibly to insert them into a
DocumentFragment in the process of doing so... but as long as the APIs
support that operation I don't think the methods themselves need to be
duplicated on DocumentFragment.
Note that the inputSource could be your own object and does not have to
be necessarily one created with createDOMInputSource. Yes, your example
does not take into account the parameters for the configuration, but
this is the advantage of a DOMBuilder compared to solutions like
innerHTML.
This has been the case in the DOM model for a while. Only documents can
create nodes for example.
DocumentLS was indeed introduced to match a current set of
functionalities in web user agents.
And each Node would have a different set of parameters? or would you
only support the parameters on the DOMBuilder of the Document and then
the Node is only reusing them? I don't think it would make sense to
support this method on one set of Nodes and not an other either.
Philippe
I am not sure I completely understand your point:
What I am saying is that the DocumentLS interface would be far more usedul
if it was implemented by Nodes instead (i.e. NodeLS). Or, if there is some
good reason for not doing that, which I imagine there will be, then an extra
optional parameter could be added to the methods of DocumentLS so that they
allowed the node to load or save from to be specified.
I should have explained my intent better, but I think it would be very
useful to be able to load and retrieve XML (particulary strings) from nodes
(typically elements). Lots of people use this feature regularly (using
innerHTML) because working with elements that are interleaved with text
nodes becomes confusing, and extremely verbose using the DOM only.
Of course, loading and saving from nodes can be achieved with the current
spec. using the DOMBuilder. And, to reiterate, I do think that the
DOMBuilder is a very strong interface, since it allows access to so many
advanced features, and is not too complicated for occasional use. But the
verbosity of that method, and the sheer number of times DOM applications
need to load XML into elements means that code quickly becomes unreadable.
The current spec standardizes the load and loadXML methods, but provides
nothing like the even more useful innerHTML attribute. A simple method for
quickly getting XML into elements is necesarry for all but trivial DOM work,
and the current method is too verbose for an operation that occurs so often.
Dominic.
