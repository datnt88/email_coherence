Expected result is written as:
it should be:
section_count 7 /section_count ,
(comma after section_count element)
1.3.4.2 and 1.3.4.3 are missing commas in the same place.
I suspect you are using Galax, which does format the output with a comma.
This query has two element constructors, separated by a comma. This comma
is not text, it separates the two constructors. The output should not have
a comma.
Jonathan
Thanks for the other fixes. The basic issue with this comma problem
(and the whitespace mentioned elsewhere), is these oddities make
extraction from the use cases for testing much more difficult. I
understand the comma is not text. It seems it should still be there
because the output is still a sequence; it is not inside another
element which would make the elements be children.
For example, if the query were
section_count { count(doc("book.xml")//section) } /section_count ,
then I would not expect commas in the result.
Perhaps a separate document should be available that lists the expected
and actual results in their normative form. The other two sections that
are basically impossible to extract are the SGML section and the
relational data section. It seems odd that a query must be written to
"reconstruct" the xml from the html data tables presented.
Cheers,
--Sarah
It should be pointed out that there is no normative serialization of the
results of a query. In cases where the result of the query is a single
document node or element node (which is true of most of the use cases),
results can be compared by serializing and then converting to a canonical
XML form. But if the result is say a sequence of integers, there is no
definitive way of serializing it that all products will adhere to.
Michael Kay
