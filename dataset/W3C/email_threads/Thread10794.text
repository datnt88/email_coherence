I'd like to propose what I take to be an improved approach to the syntax of
such things (taking into account some of the decisions already taken). I am
also putting in the things that I think we should have, that I don't expect
some people to like. I'm also going to just give examples, rather than a
grammar. If the examples aren't clear enough to make sense, then that's
useful data itself.
The lack of formal semantics also reinforces the notion that this is a
preliminary proposal, not a hard and fast prescription. I hope that it may
be a wooden (or at least wicker)-man, but even if only a strawman, it may
serve a purpose. The syntax is not defined because it will be whatever
syntax we finally choose for document instances. I have used the proposed
sdf/ empty tag syntax, as a shining example of syntactic disambiguation.
!-- A shortcut to define an attlist, and apply it to an element in one
declaration, possibly without even naming it, would prbably be a good
idea. Perhaps adding:
apply-to="element1 element2"
to define-attlist would do. --
extending="highlighted"/
dtd-doc p This is the way comments should really be done. /p
p We can even add a way to define a dtd fragment for the dtd-doc
contents. To do this we need to find a way to define the DTD for the
contents without preventing the DTD itself from serving as an
instance /p /dtd-doc
!-- Note: except for relaxing the unique keyword-value restriction, all
of this can be compiled to SGML by a pretty simple processor. --
!-- a mix-in tag. Valid at any point in processing of top level of a p .
Not an inclusion exception --
legal-anywhere-within="p" illegal-anywhere-within="footnote"/
!-- maybe something like contains="#MODEL p" would be nice
for inheriting content models from existing elements --
!-- we keep inclusion and exclusion, but don't make them
too easy to abuse --
Other syntactic options might also make sense:
We should probably use an ID attribute instead of the name attribute in
the above defining forms (to aid in cross-references, and the like). The
Even with the fixed name, it doesn't look too bad:
On the other hand, since attributes, content-models, tags, and attlists
all havewe should perhaps allow multiple ID attributes per element, and
vary the name of the attribute for the item being defined, to make DTD
processing and cross-referencing with XML tools easier.
I abandoned SGML technical terms for common parlance in the definition
syntax. This could create some confusion for SGML geeks, but removes a
significant barrier to initial understanding (and hence enthusiasm) for the
HTML user in the street. The distinction between tag and element is useful,
but can be pretty well approximated by "tag" and "tag and its contents." I
think I went a bit too far in simplifying things, but if it would increase
the user-base that would be a net gain.
This contains just about everything I would want in a DTD language, in
a syntax that I would prefer. I didn't include entity declaration syntax,
but you can imagine. I would (of course) include a "new-character"
declaration that give an entity name, and descriptive text, and would map
to an SGML SDATA entity.
Apologies for any infelicities or typos in the above, but I am in need
of rest now.
-- David
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com
Boston University Computer Science \ Sr. Analyst
--------------------------------------------\ http://dynamicDiagrams.com/
MAPA: mapping for the WWW \__________________________
Many thanks to David,
I like this!
I can't say that I like the specific syntax that much,
but the general idea of being able to simply declare
element types and "attribute types" is very appealing.
David has very succesfully reduced this to the point that
a non-wizard like me can immediately see the value and merit.
Frankly, I would not go so far on terminology, but I think
that will be a matter of finding a common ground between
the vocabularies of the SGML literati and the "great unwashed"
-- to borrow an endearment from an unnamed technical committee. :-)
Here, we have a meta-language in which one can declare element
types and their content models, modify those content models by
providing additional declarations (but without the hackery of
parameter entities), and attach attributes to element types
at will. This is fabulous!
I don't really see the value in losing the "|" connector in
expressing content models, but I guess that it does make
things a bit simpler.
The define-model element type is a handy shorthand that is,
I assume, a useful replacement for parameter entities --
but much clearer.
I agree that one should be able to declare that a given attribute
or attribute list applies to a named/ID'd element type, but I also
think that an element type declaration needs to be able to declare
that an attribute or attribute list applies to itself.
Finally... There have been numerous fragments of discussions
that have suggested that it might be useful to have multiple IDs
on a single SGML object -- an element, for most purposes. David
has suggested the same again. I don't understand why this would
be helpful. Is there some suggestion that an object's identity
should be, somehow, context-sensitive? That addressing an object
by one name means one thing, but that addressing it by another
name might mean another thing? And if that is the issue, isn't
it better to let the object have only one identity and to rely
on other methods to assign aliases and to express additional layers
of semantics? Help me with this -- I just don't get it.
Regards,
Murray
p We can even add a way to define a dtd fragment for the dtd-doc
contents. To do this we need to find a way to define the DTD for the
contents without preventing the DTD itself from serving as an
instance /p /dtd-doc
************* NOTE NEW ADDRESS AND PHONE NUMBER *****************
Murray Maloneymurray@sq.com
Technical Director http://www.softquad.com
SoftQuad Inc.
Toronto, Ontario, Canada M4R 1K8
Thanks.
I didn't intend to lose it. (A problem with definition by example), but to
show that if #PCDATA is only allowed in models like (#PCDATA | x | y | z)*,
we might just a specail syntax for that case, nipping in the bud the
obvious, but illegal, (#PCDATA, foo, #PCDATA, bar, bletch). By having
"#PCDATA-containing" models have a special format, we elimiate a source of
possible confusion.
models like "(a|b)+, c" should still be allowed. We should remove SGML's
funky paren rules as well, and go for a standard operator-precedence
syntax. Pulling together adjacent like operators is easy to do for a
computer, and a potential source of error for a user.
I actually think we should keep parameter entities, but have built in
notation to eliminate some of their idiomatic uses -- cases where by
definition we are synthesizing useful abstractions that SGML lacks.
yes. Incomplete again.
Well, I didn't get it either. But I was thinking that in this case we have
namespaces for elements, attributes, content models, and attribute lists,
and unique IDs (_within_ each namespace). If we wanted to use the ID/IDREF
mechanism to implement these references, however, we would have to add an
extra parameter for the Unique_id, because there is only _one_ global
namespace for ID and IDREF.
So I can see the use for several namespaces, each with a parser-enforced
uniqeness and reference semantics. This is not a must-have for me, but I
now see why people would want it.
-- David
RE delenda est.
I am not a number. I am an undefined character.
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com
Boston University Computer Science \ Sr. Analyst
--------------------------------------------\ http://dynamicDiagrams.com/
MAPA: mapping for the WWW \__________________________
Dave Durand is to be commended for the effort and thought that went
into his plan. However, we already covered this ground at length and
in great detail when we considered Tim Bray's DSD proposal. The
question that was finally placed before the ERB was as follows:
Shall XML use a markup declaration syntax based on a simplification of
ISO 8879 clauses 10-11?
This was put to a mail vote, which under our rules takes a week to
complete. One of the ERB members has been unable to reply for most of
that period due to family matters. He has finally registered his
vote, and I can now report that the proposition above has been
unanimously approved by the ERB.
However disappointed some of us may feel about this, the decision has
been made and it's time to move on. Please take any further
discussion of this point off the list so that we can continue to meet
our deadlines. I will be happy to answer any further questions you
may have about this through private correspondence.
Jon
