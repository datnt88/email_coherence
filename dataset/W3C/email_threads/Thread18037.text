Sorry for my late reply. I sent my email to wrong addres...
In my opinion, this guidline is too ideal for mobile browsers,
and many checkpoints are strongly oriented some graphical
browsers on desktop PC. Mobile browsers vendors should make
effort to satisfy some checkpoints, but many of them are
impossible, or not proper for mobile browsers.
I think it's better to describe how mobile (or other some kind
of) browsers treat this guideline.
Takuya ASADA
aloha, h?kon!
thank you for your extremely valuable and insightful comments on the Last Call
draft of the User Agent Accessibility Guidelines...
in your review, you noted:
quote
Adding support for DOM effectively turns a browser into an editor.
This is often beneficial, but in memory-constrained enviroments it is
often impossible. By making this Priority 1, a whole segment of UAs
will fail conformance and might therefore pay less attention to the
Guidelines in general. I suggest changing it to Priority 2 and limit
the requirement fo the read (i.e. not write) portions of the DOM.
I suggest changing all sections in Guidline 5 to reflect this.
unquote
while your point is very well taken, i would like to propose a median solution:
retain Priority 1 for the read portions of the DOM and Priority 2 for the write
portions... this could be accomplished either by splitting the checkpoint in
2, or by simply listing the priority level as P1 for read functions and P2 for
write functions...
gregory.
He that lives on Hope, dies farting
-- Benjamin Franklin, Poor Richard's Almanack, 1763
Gregory J. Rosmaita unagi69@concentric.net
WebMaster and Minister of Propaganda, VICUG NYC
I think that dropping the requirement for the write functionality of DOM may
be appropriate. Although I believe that some tools write to the DOM to
restructure a page for more appropriate presentation. If we drop the
requirement to support DOM write functions do we destroy compatibility with
those assistive technologies, and do I understand the way they are working
correctly?
There is a broader question of whether the DOM is indeed something that needs
to be implemented, or whether it is sufficient to implement an interface,
with the use of DOM in particular being a lower priority.
cheers
Charles McCN
aloha, h?kon!
thank you for your extremely valuable and insightful comments on the Last Call
draft of the User Agent Accessibility Guidelines...
in your review, you noted:
quote
Adding support for DOM effectively turns a browser into an editor.
This is often beneficial, but in memory-constrained enviroments it is
often impossible. By making this Priority 1, a whole segment of UAs
will fail conformance and might therefore pay less attention to the
Guidelines in general. I suggest changing it to Priority 2 and limit
the requirement fo the read (i.e. not write) portions of the DOM.
I suggest changing all sections in Guidline 5 to reflect this.
unquote
while your point is very well taken, i would like to propose a median solution:
retain Priority 1 for the read portions of the DOM and Priority 2 for the write
portions... this could be accomplished either by splitting the checkpoint in
2, or by simply listing the priority level as P1 for read functions and P2 for
write functions...
gregory.
He that lives on Hope, dies farting
-- Benjamin Franklin, Poor Richard's Almanack, 1763
Gregory J. Rosmaita unagi69@concentric.net
WebMaster and Minister of Propaganda, VICUG NYC
W3C Web Accessibility Initiative http://www.w3.org/WAI
21 Mitchell Street, Footscray, VIC 3011, Australia (I've moved!)
Hi
The document is important. Hopefully it will be able to turn a negative
trend -- the web is less accessible today than it was five years ago.
Yes
One general comment before proceeding to more specific issues: I think
the document puts too much emphasis on UAs supporting various APIs
relative to the UAs enhancing accessibility itself.
Yes
For example, section 5.3 states:
Provide programmatic read and write access to user agent
functionalities and user interface controls. [priority 1]
and section 10.3 states:
Allow the user to change and control the input configuration. Users
should be able to activate a functionality with a single-stroke (e.g.,
single-key, single voice command, etc.). [Priority?2]
I would suggest reversing the priorties here -- it's more important
that the UA supports (say) single-key functionality than that it
supports an API for changing the UI.
Definitely
5.6 Conform to W3C Document Object Model specifications and export
interfaces defined by those specifications. [Priority?1]
Guildline Introduction Line 4 says: "They may have a text-only screen, a
small screen, or a slow Internet connection." unquote} Recognizing slow
connections vendors may choose to create smaller UAs which shouldn't be
given a lower conformance mark because they fulfil other needs &amp; suit that
firms approach to Web business. In any case, very few people have write
privileges on the Web. DOM strikes me as something akin to Groupware
allowing workers to edit documents on a business LAN. We shouldn't be
distracted from the goal of enhanced Web usability. Other laws make business
programs Accessible WAI is about Web browsing.
Regards,
Bryan
- "It has been said the pebbles can't stop the avalanche, guess the pebbles
didn't have access to the Web!"
aloha, charles!
you raise a very valid question -- do assistive technologies need to use the
write functionalities of the DOM in order to provide access to content, but the
working group has -- so far -- heard extremely little from ANY of the adaptive
technology vendors whose opinions we've solicited, and whose representatives
have sat amongst us, detailing exactly what it is that they need from the
DOM... this is input that needs not only to be plowed back into the UA WG, but
the DOM WG as well...
i was also wondering if you might elaborate upon your intriguing comment:
quote
There is a broader question of whether the DOM is indeed something that needs
to be implemented, or whether it is sufficient to implement an interface, with
the use of DOM in particular being a lower priority.
unquote
gregory.
He that lives on Hope, dies farting
-- Benjamin Franklin, Poor Richard's Almanack, 1763
Gregory J. Rosmaita unagi69@concentric.net
WebMaster and Minister of Propaganda, VICUG NYC
One of my reasons for doing the DOM in the frst place was to give
adaptive technology vendors a standard interface so they could
write tools that hook into browser, editors, etc which implement the
DOM. So I think such tools should implement the DOM, to enable
this. There is, to my mind, little point in implementing a proprietary
interface when a standard one is available, particularly since the
WAI groups have input to the standard interface and not to
proprietary interfaces in general.
If adaptive technology vendors (screen readers, etc) implement
hooks to be a client of the DOM, they should be able to hook into
any DOM implementation with minimal changes. Otherwise they
need to change their client interface for each tool. For example,
SoftQuad Software's HoTMetaL and XMetaL implement the DOM
(more with each release) and Mozilla implements the DOM, and
MSIE implements the DOM, and .... so why reinvent the wheel
each time?
If these tools can't use the DOM for some reason, then the DOM
WG needs to know about this.
Lauren
aloha, lauren!
thank you for your extremely informative response... the scenario which you
outlined was my understanding of the issue, but i have yet to really hear
anything concrete from assistive technology vendors on the topic of "what do we
need from the DOM" and "what does the DOM need for us to provide access to
content and make orientation information available and to facillitate
navigation"
i understand that in a niche market as competitive as assistive technology,
firm examples may be hard to come by, but if microsoft, sun, and apple can all
sit at the same table and discuss issues openly, why not henter-joyce,
gw-micro, and the others?
the assistive technology vendors need to let both the UA WG and the DOM WG know
more precisely what it is they need from the DOM... otherwise, all the UAGL's
talk of implementing the DOM to achieve accessiblity will be naught but hot
air...
gregory.
He that lives on Hope, dies farting
-- Benjamin Franklin, Poor Richard's Almanack, 1763
Gregory J. Rosmaita unagi69@concentric.net
WebMaster and Minister of Propaganda, VICUG NYC
Allow the user to change and control the input configuration. Users
should be able to activate a functionality with a single-stroke (e.g.,
single-key, single voice command, etc.). [Priority?2]
I would suggest reversing the priorties here -- it's more important
that the UA supports (say) single-key functionality than that it
supports an API for changing the UI.
Hi
There are enough keys to make all common browser commands 1 key commands.
Opera uses the main alphanumeric key area of keyboards to do it. Please
visit Opera's keyboard command page http://www.opera.com/keyboard.html The
software keyboard Mouse, "Mouse Keys" (which turns NumPad into 1 keystroke
mouse commands), is a prime example of using keyboards in a different manner
to give people with physical disabilities a usable command structure.
Moreover "Mouse Keys" proves that such innovation doesn't bother &amp; perhaps
isn't even know to regular users because it can be turned On &amp; Off or
Time-out itself. It isn't that the resources (in this case available keys)
don't exist, it feels like an unknown prevents imaginative steps to be taken
to truly enhance Web usability for people with disabilities. To illustrate
what can be with the main keyboard area an example of 1 key commands for Web
navigation follow below.
Regards,
Bryan
- "Cyberspace dwarfs all outer space because cyberspace is only limited by
human imagination!"
In keyboard driven browsing the page control keys just right of ENTER are
important so the Web navigation keys should be around ENTER [which gets a
link]. The enhanced keyboard is huge for anyone using just 1 digit, be it
head or hand; &amp; key combinations add tiring, extra work while individual
keys go unused. Example: SHIFT-TAB to get the previous Anchor means 2
keystrokes which is hard as I'm unsteady (To get an idea of what how some
folks work put the keyboard Repeat Delay to very short &amp; Repeat rate to very
fast, key combinations become a huge challenge, to say the least) &amp; apt to
miss the desired link so it can take 4 keystrokes to pick a link. Just as
Page Up &amp; Down are paired on the Keypad area Web navigation controls must be
paired on the main keyboard (Less movement around keyboards helps folks with
muscle degeneration as they tend to have slow or reduced mobility).
Some pairs I mean are move Anchor highlight up &amp; down &amp; next page &amp; back to
previous page. Vertical or horizontal pairing might provide a cue about what
movement occurs,
perhaps a UI designer could comment. BACKSPACE for page back &amp; the "=" key
for page ahead. The "[" key for Anchor up and ";" key for down [this is only
for links]. Form boxes should be selected via TAB &amp; SHIFT-TAB, for limited
use a key combo is fine because it actually lessens chances users get into
an unwanted mode. Using O or Zero seems too confusing so lets use 9 for
Previous Frame &amp; I as Next Frame [&amp; Anchor movements should cycle within a
Frame, not the whole page]. DHTML Layers K as Up &amp; "," as Down with U to
Activate events. The 9, I, K, &amp; "," keys are roughly in line vertically yet
key rows are offset so its harder to slide up or down then left or right,
where the sides of keys fully in line making a mistaken push easier. Because
Frames &amp; Layers divide pages up it would help if browsers used sound files
to say Frames &amp;/or Layers are on a page. Moving between HTML Headings hasn't
been too helpful as many Web pages are non-linear so Headings doesn't
resemble Pg-Down command to get to a lower sub-section, H &amp; N will do.
I agree whole heartedly. To me the DOM is the basis for being an industry
standard cross-platform mechanism to access not only document content but
also the chrome that encompasses documents comprising an application. Just
to take some MSAA/Java accessibility features that are in DOM 2:
- events and the ability to monitor them on a component or "element" basis
- attributes and the ability to get at them (role information, etc.)
- application/document tree navigation mechansims (AccessibleChildren Java
, child information in MSAA). DOM provides tree navigation
- Text elements and their attributes
- Element Activation mechanism (links)
Assuming an appropriate schema we should be able to semantically map an XML
document into a DOM with the appropriate accessibility information
I am not saying that all we need for accessibility is in the DOM today but
the combination of future extensions to the DOM and other W3C based
accessibility solutions we have mechanisms for open accessibility standards
that can apply to a variety of devices and solutions.
Another point to note is that differentiation between the concept of what
constitutes an application and a document is becoming muddled. For example,
JavaScript adds many application features to a document although it
provides no semantic information as of yet. Also, web sites are directly
tied to servlets which generate dynamic content constituting an
"application."
This is why I feel so strongly about the DOM when discussing accessibility
and how its simplicity can help the accessibility of pervasive device
accessibility in the future.
It would be nice if we could look at using the DOM for other non Web-based
user agent applications as well at least for the document area.
Rich
Rich Schwerdtfeger
Lead Architect, IBM Special Needs Systems
EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm
"Two roads diverged in a wood, and I -
I took the one less traveled by, and that has made all the difference.",
Frost
"Lauren Wood" lauren@sqwest.bc.ca on 12/03/99 01:58:16 PM
Please respond to lauren@sqwest.bc.ca
Subject: Re: WD-WAI-USERAGENT-19991105 review
the
but the
adaptive
representatives
WG, but
One of my reasons for doing the DOM in the frst place was to give
adaptive technology vendors a standard interface so they could
write tools that hook into browser, editors, etc which implement the
DOM. So I think such tools should implement the DOM, to enable
this. There is, to my mind, little point in implementing a proprietary
interface when a standard one is available, particularly since the
WAI groups have input to the standard interface and not to
proprietary interfaces in general.
If adaptive technology vendors (screen readers, etc) implement
hooks to be a client of the DOM, they should be able to hook into
any DOM implementation with minimal changes. Otherwise they
need to change their client interface for each tool. For example,
SoftQuad Software's HoTMetaL and XMetaL implement the DOM
(more with each release) and Mozilla implements the DOM, and
MSIE implements the DOM, and .... so why reinvent the wheel
each time?
If these tools can't use the DOM for some reason, then the DOM
WG needs to know about this.
Lauren
Hi Takuya,
Thank you for taking time to review the Guidelines. We have
discussed recently clarifying (for example in the Abstract)
that the Guidelines are primarily intended for graphical
desktop browsers. Mobile devices can still conform, however.
There is an important provision in the
document that says that some checkpoints don't "apply" under
certain conditions. It would be very useful to the Working Group
if you listed the checkpoints you felt did not really apply for
mobile devices.
Of course, we hope that developers of user agents on mobile
devices wish to make their software accessible and the principles
in the Guidelines are meant to apply to most user agents. If
a user agent developer finds that most checkpoints don't apply,
then they can still conform, but the claim would be less
meaningful if, for example, more than half of the checkpoints
didn't apply.
Any comments you have on improving the document or how some changes
might make the document easier to use by mobile device developers,
please send them to this list.
Thank you again,
- Ian
Ian Jacobs (jacobs@w3.org) http://www.w3.org/People/Jacobs
Cell: +1 917 450-8783
One important applicability requirement is operating system and hardware
capability. For example, there are operating systems (such as DOS, which is
actually still rather widely used, esecially in the disability community) and
hardware such as mobile devices and braille devices which do not have a
capacity to render different fonts or colours. There is therefore no point
requiring a user agent which works on such platforms to have the capacity to
handle those features.
Charles McCN
Hi Takuya,
Thank you for taking time to review the Guidelines. We have
discussed recently clarifying (for example in the Abstract)
that the Guidelines are primarily intended for graphical
desktop browsers. Mobile devices can still conform, however.
There is an important provision in the
document that says that some checkpoints don't "apply" under
certain conditions. It would be very useful to the Working Group
if you listed the checkpoints you felt did not really apply for
mobile devices.
Of course, we hope that developers of user agents on mobile
devices wish to make their software accessible and the principles
in the Guidelines are meant to apply to most user agents. If
a user agent developer finds that most checkpoints don't apply,
then they can still conform, but the claim would be less
meaningful if, for example, more than half of the checkpoints
didn't apply.
Any comments you have on improving the document or how some changes
might make the document easier to use by mobile device developers,
please send them to this list.
Thank you again,
- Ian
Ian Jacobs (jacobs@w3.org) http://www.w3.org/People/Jacobs
Cell: +1 917 450-8783
W3C Web Accessibility Initiative http://www.w3.org/WAI
21 Mitchell Street, Footscray, VIC 3011, Australia (I've moved!)
