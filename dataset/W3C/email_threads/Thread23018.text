Events 3.0:
From spec:
DOMAttributeNameChanged
Fired after the namespaceURI and/or the nodeName of a Attr node have been
modified (e.g., the attribute was renamed using renameNode). The target of
this event is the renamed attribute.
shouldn't the target be the element that contains the attr, and relatedNode
be the attr?
how can bubbling etc. work if the target is the attribute, since the
attribute isn't part of the tree..
thanks,
Sigurd Lerstad
I would like to specify dynamically the path of a DTD file to the XML parser
: I've include a DOCTYPE declaration with a SYSTEM call to a relative URL.
The implementation of the DOMParser I'm using is Xerces for Java. I would
like to know if there is a way to resolve the relative URL of the SYSTEM
call programatically ? Much better : I'd like also, if it's possible, to
create the DTD InputSource myself, so as to keep full control upon input and
output in my program. Thanks for your help.
There is no way to set up the path to the DTD in DOM 1&amp;2. DOM 3 has a
way to validate against a DTD specified with the location.
Philippe
Dear Zeljko,
If I understand your question, you are looking for an entity resolver.
You have these both on Xerces's own DOMParser (EntityResolver inteface
taken from SAX) as well as Load/ Save which Xerces also supports
(DOMEntityResolver). Since you already already mention DOMParser, I will
give an example with that interface (although I should plug W3C's Load/
Save of course):
import org.apache.xerces.parsers.DOMParser;
import org.xml.sax.EntityResolver;
import org.xml.sax.InputSource;
DOMParser myParser = new DOMParser();
myParser.setEntityResolver(new EntityResolver() {
public InputSource resolveEntity(String publicId, String systemId)
throws SAXException, IOException {
if ((systemId != null) &amp;&amp; systemId.endsWith("mydtd.dtd") {
return new InputSource(new StringReader(" !ELEMENT dummy
EMPTY "));
} else {
return null;
Kidn regards,
--Sander.
I am still seeing people confused by the fact that createElement("foo")
and createElementNS(null,"foo") are not interchangable. Ditto for
attributes.
I can point them to DOM 2.0 Core 1.1.8, but it would be good to have an
official practical-advice summary. "Yes, they're different and not really
ineroperable. Unless you are writing a pure DOM 1.0 application, don't use
the non-namespace-aware version of these calls."
Or something along those lines, easy to find and short enough to absorb at
a glance.
(A few folks have also grumbled "why isn't that advice in the Javadoc?".
Might be worth considering for future releases.)
Joe Kesselman / IBM Research
You are correct. This has been fixed in the new version:
Philippe
