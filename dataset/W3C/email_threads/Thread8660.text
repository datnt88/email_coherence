1: some signature semantics are not application-specific in the usual sense
of that term. They may not belong to all signatures, but they belong to a
very large subset.
2: Joseph's example, in which the signed data contain an approved by
="xxx" element referring to the signature, has I think two drawbacks,
neither of them fatal.
2.1: It will be hard work to allow arbitrarily many signatures to be added
to a document using this approach. Subject to what John Boyer has to say,
it looks to me as if a document will need to be specially designed to allow
multiple signatures to be added.
2.2: Information about the signature logically belongs with the signature.
Forensic examination of signatures will be complicated by the need to
consult a plurality of resources in different locations in order to
reconstruct the evidence of a single historical event.
3: It is not the application which defines the meaning of a signature. The
application can only define whether the signature _can have_ any semantics.
It is the intent of the signatory which determines what a signature
actually means. (For more on application semantics, see e.g.
For these reasons I think that Joseph's proposal is actually more untidy
than making use of the SignatureProperties. Perhaps he would like to point
out where I'm going wrong.
CPK Smithies
PenOp
There is a difference between signature "syntax/mechanics" and signature
"semantics/meaning."
The XML-Signatures specification is for standardizing signatures
"mechanics." Trying to standardize signatures "meaning" is not possible in
this specification. Indeed, standardizing signatures "meaing" is not
possible because signatures, in and of themselves, do not have any meaning.
Three concrete examples follow:
Example 1: I am sitting in a waiting room doodling on a peice of paper and
I sign my name on the paper. The signature has no meaning.
Example 2: Yesterday I signed an invoice for $51,000 for work that was
actually performed for me by four developers. If you were to look at the
face of the signed document, it would appear that I own $51,000. In fact, I
don't owe anyone anything because the "developers" were students senior
seminar class and I was a "fake" contractor. They did the work. I received
the benefit. But, the "surrounding circumstances" clearly indicate that I
have no obligation to pay them.
Example 3: I digitally sign an electronic will that gives me estate to my
nephew, but excludes my sons and daughters. I sign the document using a
private key that, in fact, belongs to me. Mechanically, the signature
validates using the corresponding public key. The will is invalid, however,
and the signature is meaningless, because it comes to light that when I
signed the document, my nephew had a gun to my head.
The key to each of these examples is "intent" or, stated another way, the
"meaning" of what the person did when he/she signed. You cannot capture
intent/meaning in a signature. Even if you could, you couldn't standardize
it, because there are an infinite flavors of intent.
Meaning and intent is usually specified in documents/writings. The modern
term is "records" and this might include audio, video, or other tangible
medium. Usually "records" are signed, because a signature is additional
evidence of what is meant was, in fact, really meant (i.e., authorized,
affirmed, accepted, etc., etc.) Meaning and intent may also be garnered
from "surrounding circumstances." Surrounding circumstances are not
captured in signatures or even in records.
sense
I suspect you mean things like dates and times. Dates and times are
captured on documents/records. Documents with dates and times are signed to
give them additional credibility. It is not only inappropriate to put a
date and time in a signature, it is also dangerous. Not only is it contrary
to common understanding, there is the potential for conflict if the
date/time in the document/record is different than the date/time in the
signature. If I sign a document that, on its face, says 1/23/2001 on it and
a signature application embeds 12/30/2001 in it, and the two are associated,
then what is the correct date/time?
allow
If there are "mechanical" reasons for using SignatureProperties (or any
other element), then I am not opposed to using SignatureProperties .
I am somewhat concerned about Tom Gindin's post yesterday where he says:
The primary use of SignatureProperty, IMHO, is in the case where
multiple signatures are affixed to the same document and one of the signers
wishes to add qualifications to his or her signature without affecting the
document signed by the others.
If this is the use of SignatureProperty then it is an improper use. If
Person A evidences his/her agreement on a document with a signature and then
Person B wants to amend or qualify the agreement (by means of alterning the
document or the signature), then you don't have an agreement, so you would
*never* want to allow this. There is no "meeting of the minds."
If either Person A or Person B wants to qualify the meaning of the
transaction, they cannot do so unilaterally via a document or a signature.
The way it is usually done is to change or amend the document and then
*everyone* resigns.
If you mean signature "mechanics" then I agree. Everything necessary to
mechanically verify the signature should be standardized in this
specification. However, the "meaning" and "trust semantics" *do not*
logically belong to the signature; these things belong to the
document/record and surrounding circumstances.
semantics.
The "intent of the signatory" (to the extent it can be ascertained)
determines the meaning of the transaction. However, the signature has no
inherent meaning. You could just as easily say the "intent of the author."
A signature is a meaningless act, unless it is associated with something
that gives it some meaning.
(Feel free to skip the next three paragraphs . . . it is a tangent. . . )
All of this having been said, since you pointed to Searle, about an hour
after I sent off the post yesterday (. . . in which I stated that current
technology cannot capture intent . . .) I had a meeting with a professor in
the CIS department at the university working in biotechnology. She, with
help from a doctor, is writing device drivers for use with a diode that is
embedded in the brain of a blind quadriplegic. They are picking up
electrical signals from the man's brain as he thinks about things (like
moving his hand or his leg). The man can hear and he can blink. He cannot
see or otherwise communicate. Previously, the man (via the diode, device
drivers, etc.) was able to move and stop a mouse cursor on a computer screen
in a strait line. Yesterday, for the first time, he was able to move the
mouse cursor up, down, left and right, on command, simply by thinking about
it.
If you combine the above with the following stentences from the Searle
article and substitue the word "computer" below for "human" you get an
interesting result.
Contrary to "strong AI", then, no matter how intelligent-seeming a computer
[human] behaves and no matter what programming makes it behave that way,
since the symbols it processes are meaningless (lack semantics) to it, it's
not really intelligent. It's not actually thinking. Its internal states and
processes, being purely syntactic, lack semantics (meaning); so, it doesn't
really have intentional (i.e., meaningful) mental states.
Hmmmm . . .
I still agree with Joseph.
Todd
Hi Chris, Joseph and all,
Actually, I think both Chris and Joseph are right; they are coming from
different points of view that are not irreconcilable.
Chris is coming from a viewpoint of creating a signing ceremony that
includes capturing the intent of the signer. To take one of Todd Vincent's
examples, Todd could communicate that despite what is said on the face of
the document, his intent in signing is only to achieve a certain level of
realism in a student training scenario and is not intended to legally
obligate him to pay anything.
Joseph's viewpoint is that it is the application that defines what
constitutes appropriate intent. For example, a check may not be valid
unless signed by N signers. A particular signer may intend to authorize a
check, but the application is aware of the need for authorization from
multiple parties in other roles.
It is helpful to consider this scenario from the relying party's viewpoint.
An application receives a signed check. The application knows what
constitutes an authorized check, so it goes to the check element and finds
the 'pointers' to the requisite signatures. The 'pointers' in Joseph's
example happen to carry the additional information of what 'intent' was
chosen by the signer (approval). Since approval is what the application
requires, the application then calls upon core behavior to verify the
signature(s) before processing the transaction.
So, it is clear that 'pointers' are required to get from the document to the
signatures, though they may be implicit, esp. in the case of enveloped
signatures within a document. It is also clear that the rules regarding the
semantic interpretation of intent (e.g. its sufficiency for proceeding with
a transaction) are application specific and belong in the document. But the
location for storing the actual declaration of intent *depends on who is
providing the mechanism by which the signer's intent is specified*.
It is helpful to think about this from the standpoint of an application
(such as an e-check system) that integrates with a signature generation
engine. The application provides the face of the document and the face of
the document may explicitly indicate what the signer is doing by signing
(e.g. "I agree to pay X"). Upon hitting the "Sign here" button, the
application turns control over to the signature generation engine, which may
then allow the signer to specify some intent (e.g. typing "Not really!" into
an edit field).
The signature generation engine is one application that is only aware of the
signature element. It is designed to qualify that signature through
signature properties. But to assert that a 'secure' application would
integrate with such an engine without taking its properties into account
would be ludicrous. The application could
1) turn off the signature engine's generation of properties if the
application knows that it is providing the intent declarations, or
2) account for the signature engine's method for specifying signer intent
(which could get complicated if the signer is given a free-form text box to
type whatever they like).
In the latter case, the application is usually allowed to parameterize what
the signature engine's intent message will say and what the signer's options
are (e.g. the user can click OK or click Cancel in response to a specific
message, rather than being given the freedom to type any contradictory
message they like).
And if the application is already on the hook for parameterizing a given
signature engine, then the application can certainly deal with finding the
intent results of a signature in a signature property subelement.
John Boyer
Software Development Manager
PureEdge Solutions, Inc. (formerly UWI.Com)
Creating Binding E-Commerce
jboyer@PureEdge.com
2: Joseph's example, in which the signed data contain an approved by
="xxx" element referring to the signature, has I think two drawbacks,
neither of them fatal.
2.1: It will be hard work to allow arbitrarily many signatures to be added
to a document using this approach. Subject to what John Boyer has to say,
it looks to me as if a document will need to be specially designed to allow
multiple signatures to be added.
2.2: Information about the signature logically belongs with the signature.
Forensic examination of signatures will be complicated by the need to
consult a plurality of resources in different locations in order to
reconstruct the evidence of a single historical event.
3: It is not the application which defines the meaning of a signature. The
application can only define whether the signature _can have_ any semantics.
It is the intent of the signatory which determines what a signature
actually means. (For more on application semantics, see e.g.
For these reasons I think that Joseph's proposal is actually more untidy
than making use of the SignatureProperties. Perhaps he would like to point
out where I'm going wrong.
CPK Smithies
PenOp
From: "Winchel 'Todd' Vincent, III" winchel@mindspring.com
References: OF6D713979.4CD7972A-ON802568BF.0043572F@com
Date: Wed, 12 Apr 2000 13:03:55 -0400
Normally the date embedded in a signature is labeled as being the date
of the mechanical signature operation. I don't see what's confusing
about this. I suppose you could have a signature property that said
"ignore any date in the document, here is the true document date" but
I think it would rarely be useful and in any sufficiently powerful
expressive system, you can't stop people from making confusing or self
contradictory statements. I believe our current syntax document only
mentions date of the signature (or digest) and hardware identifier for
crypto hardware used in calculating the signature (or digest) as
examples of appropriate properties of the signature itself to be put
into SignatureProperties.
Note, Tom said "add qualifications to his or her signature". I don't
see that as amending the fundamental agreement. Assume some sort of
bond with multiple sureties where each indicates the monetary amount
which they are willing to be bound and when their surety expires. It
would be much better to format the document so these things were
outside the Signatures, in little surety elements or something, but
putting that info inside SignatureProperties isn't ridiculous and I
don't see it as in really amending the agreement, which presumably is
something like "The below signatories give surerty for the faithful
performance ... by A B of their duties as ...".
Donald
I'm not arguing against SignatureProperty and I appreciate your points.
Actually, I think the question is more of "Information about the trust and
semantics logically belongs with the [signature/application]." It's just
that the examples I was thinking of, that information belongs to the
application in my use scenarios. My proposal was only that as presently
specified, I think it appears that SigntureProperty is the only way to go,
and one independent reader of the spec came up with the other way that I'm
more comfortable with.
One sentence in section 2.2 might do the trick
It already says:
Applications that wish to represent other semantics must rely upon
other
technologies, such as [XML, RDF].
And we could add:
For instance, an application might use as foo:assuredby attribute
within its own markup to references a Signature element.
Consequently,
it's the application that must understand and know how to make trust
decisions given the validity of the signature and the meaning of
assurdby syntax.
In my example, the application and the signer are the same (or at least both
are present at time of application XML and signature generation), though I
know this isn't always the case.
Joseph Reagle Jr.
W3C Policy Analyst mailto:reagle@w3.org
IETF/W3C XML-Signature Co-Chair http://www.w3.org/People/Reagle/
I thought so as well. However, I just re-encountered the text:
While the signing application should be very careful about what
it signs (it should understand what is in the SignatureProperty) a
receiving application has no obligation to understand that semantic
(though its parent trust engine may wish to).
[1] http://www.w3.org/TR/2000/WD-xmldsig-core-20000228/#sec-o-SignatureProperty
The nice thing about my proposal/example is that the signature need not even be aware of the application semantics. Now there really shouldn't be any difference between stuff in the application data, and stuff in SignatureProperty. When I wrote the text above, I wasn't sure about it (I hoped to get comments) and I'm beginning to think that the Signature application need not understand any of the content in SignatureProperty. Not sure though. I think the difference might be that when the application in [2] signs, it is obviously aware of its semantic. As I said in my last email, "In my example, the application and the signer are the same (or at least both are present at time of application XML and signature generation), though I know this isn't always the case." [3]
Possible text:
- An application should always understand the semantics of its application data, particularly when it makes an assertion (assuredby) and binds it. A Signature application need never understand application data, be it in SignatureProperty or anywhere else.
[2] http://lists.w3.org/Archives/Public/w3c-ietf-xmldsig/2000AprJun/0040.html
[3] http://lists.w3.org/Archives/Public/w3c-ietf-xmldsig/2000AprJun/0052.html
Joseph Reagle Jr.
W3C Policy Analyst mailto:reagle@w3.org
IETF/W3C XML-Signature Co-Chair http://www.w3.org/People/Reagle/
I have just joined the list to participate in the discussion of
SignatureProperties. Although I am a co-chairman of the Signatures workgroup
of Legal XML, I am participating here individually.
On Tue, 11 Apr 2000 17:18:17 -0400,
"The short of this though, is that since I that I think we should encourage
people to use the approach captured in the example above, I'd like to
include a few sentences and an example similar to the above such that we
aren't unduly encouraging people to use SignatureProperty."
I have been communicating privately with Todd Vincent. He and I agree on
some points and disagree on others.
I agree with posted portion quoted above in that there is a need to limit
what can legimately be put into the SignatureProperties element so that it
it is not used for matters that are not directly related to the signature as
such. On the other hand, in at least two respects, I think signatures do
have properties that should legitimately be expressed as
SignatureProperties .
In a first example, one such property relates to signatures of individuals
made on behalf of entities and agencies, which may become a large part of B
to B commerce.
There is a fundamental difference when a signer in the world of pen and
paper signs as "John Doe" as compared with "XYZ corporation by John Doe, its
agent". In the former, John Doe is responsible. In the latter, XYZ
corporation is the signatory. I think it is clear that the identity of the
true signer is a property of the signature. As an agent John Doe is probably
not responsible or liable if XYZ corporation fails to perform. A signature
property is that John Doe signs *for* XYZ corporation within an agency
relationship. Applications will need a standard way to understand this
difference. Digital signatures supported by X-509 certificates may not
adequately express this difference and it can be argued they cannot do so on
the basis of identity certificates alone. The SignatureProperties element
should be a place to store such information.
As several people in previous posts have pointed out, the multiple signer
example should also be considered a candidate for the signature property
element. I agree, particularly where detached signatures are used.
Chris Smithies has raised the example of needed forensic examination
material. This relates, as I understand it, to the specifics of the
signature technology of signature dynamics.
A more difficult example is where the signature authority of a signer is
limited to certain transactions or dollar value transactions, as in the
original example taken from discussions with Taka. This does not relate to
the technology of the signature or the identity of the signer or signers,
but to the authority to act. I agree with Todd Vincent and Joseph Reagle
that this is extrinsic to the signature itself and relates to authority of
an agent to act within a certain grant of authority, and therefore the
limitation is not a property of the signature but of the transaction or
document being signed.
Where a signer has reservations about a certain commitment or level of
commitment, as in Tom Ginden's suggested example and Donald Eastlake's
elaboration, and wants to indicate one or more such reservations within the
signature property element, the case for a signature property as opposed to
another element is weaker. I believe that in Tom and Don's example, the
signature is a part of a process, but what is happening is not a property of
a signature. Historically signatures have been used to mark an event that
fixes a legal commitment. Prior to universal literacy, in early common law,
people transferred real property by grabbing a clod of grass or dirt and
pulling it out of the ground, passing the clump of soil to another. That
primitive method fixed the transfer of title and ownership as irrevocably
done. Signatures on paper later came to replace this earlier method as
marking the event. Some such mechanism is probably needed to combat a
natural tendency towards what is popularly called "buyer's remorse".
Electronic signatures can replace ink ones for this purpose, but the
signature is a step in a process extrinsic to it, and the process is not a
property of the signature. Though John Boyer has constructed a useful
scenario about a possible interaction of a signature engine and an
application to derive intent, it is the pressing of the "sign" button which
fixes a user's intent, not the mechanical application of the signature,
though customarily we tend to associate the one act with the other. In
certain early court e-filing projects, which do not yet use signatures, such
intent is expressed by pressing a "submit" button, which simply uploads an
unsigned document presented for filing to a court server. By court rule or
in California by statute, submitting the document is the act which fixes the
intent. Some consider this method to be unsatisfactorily primitive
(including myself, because for example there is no way to insure data
integrity). Regardless of one's views of the method, with that approach,
should we include the "submission" information within a Signatures Property
element? I don't think so. Intent is expressed by pressing a button to
upload a document, but there is no signature. Another method of establishing
intent has been used and is either implicit in the application or if more
information is needed, this should be reflected in the document, not as a
Signature Property.
I agree that at some point a line should be drawn and respected as to what
is a property of the signature and what is not.
