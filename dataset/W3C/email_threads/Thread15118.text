In other words, it seems that some HTML structural elements are more
important to accessibility than others, but the minimum level
success criteria put them all at the same importance.
I would say that few HTML *elements* are specifically
important to accessibility. object is one. What's really important
are *attributes*, some of which are perennially ignored (like title
on everything), others required (like alt on area and img ).
The minimum level success criteria for checkpoint 1.3 are:
1. any information that is conveyed through presentation formatting
is also provided in either text or structure.
Maybe someone could explain what that bit means.
Aren't we really trying to say "Don't use HTML incorrectly"?
(That's another guideline already, isn't it?) In other words, an
ill-informed developer might use
to make a paragraph *look* like a header to a sighted person, but the
structure of the h1 through h6 tags is lost.
A plain reading of the requirement above would force someone
who wanted to use p big bold font color="red" to *also* surround
all that in heading tags.
I think not.
These seem to fall into 2 categories:
1. those elements that genuinely provide structure, are commonly
used, and make a much larger accessibility impact when they are
used. e.g. H1-H6, UL, OL LI, TH, LABEL, etc.
i.e., are well-supported by current browsers and adaptive technology,
which falsely leads us to believe they are more important.
2. those elements that are not commonly used or supported and do not
provide a large accessibility benefit. e.g. CITE, VAR, KBD, etc.
i.e., are poorly-supported by current browsers and adaptive
technology, which falsely leads us to believe they are less
important. (And I dispute that cite , var , and kbd are
poorly-supported. If anything is poorly supported, object is.)
Browser and (for example) screen-reader makers are both
guilty here. Try finding a browser that supports *all*, absolutely
all, of HTML 4, a specification dating back to 1999. (summary on
table , anyone? cite on blockquote , perhaps?) Even getting
something as simple as longdesc support out of these people is like
pulling teeth. (iCab, Moz, and NN6 have it. IE doesn't.)
Now try to find a screen reader that understands *all*, and I
do mean all, of the accessibility elements and attributes available
in HTML. (How about longdesc on iframe ? How about nested object ?
How about title on everything, and yes, *title is an accessibility
feature*, as I have tried to explain before?)
"Not commonly used" is irrelevant. If it's in the spec, it
must be supported. "Not commonly... supported"? At least you're being
honest. You're saying, in effect, "Jaws for Windows can't handle it,
so let's pretend it doesn't matter." (That's merely to draw one
example.)
They don't provide a sizable benefit because if you don't know that
something is a citation by the markup
This is self-contradictory. If you mark it up with
cite /cite , it is up to your browser or adaptive technology to
*tell* you it's a citation! If an author marks up a citation
correctly, he or she has done the job. Responsibility then falls to
the browser or device.
hopefully you can glean that from the context. Unlike headings which
can be used as navigation markers as well as create the structure
that the document is built on.
Here you are specifically referring to an *interface*
currently used in screen readers (and one browser-- iCab will list a
page's headers for you). You are allowing this currently-used
interface to influence your conception of what's important in HTML
markup. All HTML markup is important. Some of it may be more
*useful*, but that's a different question.
Following this line of thinking, HTML elements that, say,
Jaws for Windows can't list in a handy-dandy group should all be
eliminated. The thinking here seems to be "Wow. Jaws lets a blind
person navigate from heading to heading. That's just so terribly
clever. Why didn't I think of that? I feel slightly embarrassed that
I didn't. So headings must be really important then! And who uses
var anyway?"
Let me add that this habit of being influenced by current
adaptive technology (invariably meaning a screen reader, invariably
meaning Jaws for Windows) leads to absurd advice that gets
accessibility advocates laughed out of the room. Example: Claiming
that all text between a and /a tags must be self-explanatory on
the off chance that someone is perusing the document link by link.
That's not how hypertext works; a is an inline element and can and
should be used smack dab in the middle of a sentence if that's what
you want to do. I see a call for people to "glean that from context"
in the discussion of cite above; why is that desirable here but not
in the case of freeform link text? But I digress.
Does this make more sense now? Can you see how a sub-priority scheme
is almost forming from this? Or do you think they are all equally
important?
No. No. Yes.
This might be an incorrect premise on my part (that some are less
important to accessibility than others).
Some HTML elements are treated more *conspicuously* by
certain *present-day devices*, leading to the misapprehension that
they really are indisputably more important and everything else can
be eliminated. This kind of Oprah effect-- "Oprah mentioned the h6
tag on her show today! We really ought to treat it special!"-- is to
be discouraged.
I am not really wild about fashioning the WCAG around the
deficiencies of current adaptive technology. We're already stuck with
requirements like this one--
http://www.w3.org/TR/WAI-WEBCONTENT/wai-pageauth.html#tech-divide-links
Until user agents (including assistive technologies) render
adjacent links distinctly, include non-link, printable characters
(surrounded by spaces) between adjacent links.
Adjacent links are *always* discernible in valid HTML. Example:
is quite clearly four separate links. If your adaptive
technology can't keep them straight (or your visual browser uses an
unbroken underline for all four, making you think they're a single
unit), that's not our problem. We shouldn't be saddled with a
requirement to *work around* errors in adaptive technology
essentially forever. (Pedants always conveniently omit the "until
user agents" part, and in any event it causes developers to be guilty
until proven innocent: "Unless you can prove that adaptive technology
no longer needs this addition, I am going to accuse you of
negligently designing an inaccessible site." This *is* in fact the
tone often used with developers. High dudgeon can be called for, but
certainly not in this case-- the *requirement* is broken!)
Let's break out of the habit of accommodating the
peccadilloes of software makers who cannot be bothered to support all
of HTML. And I do mean *all*. Nor should we be influenced by the way
current software does things.
To paraphrase Just van Rossum and Erik van Blokland of
LettError, let's not allow our IdeaSpace to be limited to the
available ToolSpace
http://www.fawny.org/typoexpoagogo.html#toolspace .
"Is this an isolated instance or is it part of a more general problem?"
The latter.
Joe Clark | joeclark@joeclark.org
Accessibility http://joeclark.org/access/
Weblogs and articles http://joeclark.org/weblogs/
I think that you are on to a good thing Joe, but I think your examples are
not quite right. The place were i feel there is an over dependence on what
is "commonly used" is in placement of success criteria. The priority
leveling of success criteria are dependent on the extent which a requirement
is already commonly implemented. In other words, if a requirement is not
already widely implemented it will be lower priority. The wording for the
prioritization criteria was sufficiently ambiguous to slip past me. But this
criteria seem to have consciences. (mine exclude)
On to the main.....inline comments to Joe's points
1. any information that is conveyed through presentation formatting
is also provided in either text or structure.
Maybe someone could explain what that bit means.
[Lisa] Ok - there is always a lot of content that is implied in the
presentation. When that content is definitive, make sure it is also conveyed
in structure or text.
So if you have an e-commerce site that is having a sale. and the words
"SALE" and any items on sale are all in green. Make sure that there is
another way to know what items are on sale besides the green.
[Lisa] even if someone reads the requirement and as a result raps
p big bold font color="red" in heading tags, that is a lot better then
just having the p big bold . A user agent can know what to do with a
header, and that information - that this is a heading - has been preserved.
"Not commonly used" is irrelevant. If it's in the spec, it
must be supported. "Not commonly... supported"? At least you're being
honest. You're saying, in effect, "Jaws for Windows can't handle it,
so let's pretend it doesn't matter." (That's merely to draw one
example.)
Let me add that this habit of being influenced by current
adaptive technology (invariably meaning a screen reader, invariably
meaning Jaws for Windows) leads to absurd advice that gets
accessibility advocates laughed out of the room
[lisa]I agree on this one - In principle - I could not agree more
but your examples of when we use it is a bit off
Jaws is not the only reason headings are - important.
I am making some XSL for cognitive disabilities and i relay on the use of
heading for outlining the text. In the same way abridged text may leave in
the links.
It is not common. It may yet become so, but it is a help for accessibility.
also links are often separated by white spaces or the visual lay out of the
page so links do not make any since when they are read. For example a table
layout which has lots of "more" links on one cell , so they are layout next
to the content they are affiliated to.
They will read "more, more, more, more"
Version: 6.0.373 / Virus Database: 208 - Release Date: 7/1/02
Outgoing mail is certified Virus Free.
Checked by AVG anti-virus system (http://www.grisoft.com).
Version: 6.0.373 / Virus Database: 208 - Release Date: 7/1/02
As a practical point, T.V. Raman's Emacspeak software applies aural
CSS, allowing it to give a distinctive spoken rendering of each type
of HTML element; it can also invoke XSLT style sheets to give, for
example, an outline of the document or to render tables more
intelligibly.
This is just one example of what can be and has been achieved in
actual implementation. Of course, braille translation software, as I
pointed out in an earlier message, also relies heavily on proper
document structure in order to generate appropriate formatting. The
advantage of SGML, XML, therefore HTML/XHTML, Docbook, the TEI DTD,
Daisy/Niso, SVG etc., is the support they provide for distinguishing
structure from presentation, allowing content to be reused and
transformed in ways that the author may not have had in mind
originally. The problem with designing content only to satisfy the
features available in popular assistive technologies is that it
assumes some peoples' assistive technologies are more important than
others, limits the ability of current and future technologies to take
full advantage of the logical structure, fails to gain the benefits of
separating style from structure (including more powerful styling
options with CSS, XSLT etc.); and adds to the legacy of poorly
structured content that will be with us for years to come.
For purposes of checkpoint 1.3 and setting priority levels, the issue
is not what assistive technologies support or do not support, but
rather which semantic distinctions are most important. This is
basically the approach currently taken in 1.3, success criterion 2, as
well as in checkpoint 3.1. I think it would be worthwhile to review
these success criteria and decide which should fall under each
checkpoint, but I don't have time to think it through just at the
moment.
What the first success criterion in 1.3 means, in effect, is that if
you are using style to convey a certain structural distinction
(layout, fonts, or in a speech application, voice characteristics
etc.), then you must ensure that the proper structural markup is
included so that all the distinctions you have taken the trouble to
emphasize using style characteristics are also expressed abstractly in
the structure. In other words the first success criterion of 1.3 ties
the author's decisions regarding structural markup/data model to their
decisions regarding presentation: whatever structure is distinctive in
the presentation should also be distinctive in the more abstract,
structural markup.
The second success criterion is supposed to catch those cases in which
there is no intended presentation (the author hasn't bothered about
presentation; perhaps the content is in a format which isn't intended
to be presented directly to the user, but will be presented after
other transformations have been applied to it; or perhaps not all of
the distinctions important to accessibility are made in whatever
presentation is associated with the content, though the latter
possibility should be ruled out by checkpoint 3.1). One way of
thinking of it is as follows:
Whatever structure is clearly evident from presentation must be
explicitly given in abstract, structural markup or a data model.
Checkpoint 3.1 requires that the structure be provided in the first
place, that is, the author must impose structure upon the content that
is created, and must, moreover, do it in such a way as to enhance
navigation and comprehension.
As I said, I think these success criteria could benefit from some
work, but I don't have time for it in the near future; but if anyone
wants to examine the issues further they are most welcome to put
forward a proposal.
In general I don't think our success criteria are guilty of this,
though anyone who thinks they are is welcome, indeed encouraged, to
point out places where it occurs.
The other issue to bear in mind here is that WCAG also provides the
basis of the requirements in the User Agent Accessibility Guidelines;
the priorities in WCAG have a significant impact on the requirements
and priorities of UAAG.
Thus if we were to set priorities on the basis of what is commonly
implemented, the effect would be (1) that authors aiming for level 1
conformance would not implement them; (2) that they would be of lower
priority in the User Agent Accessibility Guidelines and the Authoring
Tool Accessibility Guidelines; and (3) because of (1) and (2), user
agent and authoring tool developers would be less inclined to
implement them, resulting in a self-reinforcing cycle of
non-implementation, independently of other motives that are likely to
influence developers.
Jason I completely agree. I think many people in the group would also agree
with you.
I bring this up because it was explained to me on a recent teleconference
(where we were discussing Hebrew vowels) that our conditions for a
requirement to be level one success criteria include that it is commonly
implemented.
can we clarify that this condition does not, at this time, achieve
consensus?
all the best,
Lisa
are
what
requirement
In general I don't think our success criteria are guilty of this,
though anyone who thinks they are is welcome, indeed encouraged, to
point out places where it occurs.
The other issue to bear in mind here is that WCAG also provides the
basis of the requirements in the User Agent Accessibility Guidelines;
the priorities in WCAG have a significant impact on the requirements
and priorities of UAAG.
Thus if we were to set priorities on the basis of what is commonly
implemented, the effect would be (1) that authors aiming for level 1
conformance would not implement them; (2) that they would be of lower
priority in the User Agent Accessibility Guidelines and the Authoring
Tool Accessibility Guidelines; and (3) because of (1) and (2), user
agent and authoring tool developers would be less inclined to
implement them, resulting in a self-reinforcing cycle of
non-implementation, independently of other motives that are likely to
influence developers.
Incoming mail is certified Virus Free.
Checked by AVG anti-virus system (http://www.grisoft.com).
Version: 6.0.373 / Virus Database: 208 - Release Date: 7/1/02
Outgoing mail is certified Virus Free.
Checked by AVG anti-virus system (http://www.grisoft.com).
Version: 6.0.373 / Virus Database: 208 - Release Date: 7/1/02
I think that view was expressed, but if memory serves correctly it
wasn't adopted. As I remember, the reason for leaving it at level 2
(checkpoint 1.5) for now was that further investigation had to be
carried out to determine whether algorithms existed that could
reliably handle the problem, for example as the result of document
analysis and translation research. If the tool exists then the
requirement as stated in checkpoint 1.5 is already satisfied in any
case.
This is an issue we decided to revisit after finding out what tools
were available or could be constructed, and as I remember there are
outstanding action items to that effect (Lisa, Cynthia and others?).
