In XML, we've tossed out OMITTAG. However, there's a question about
whether we allow the "omitted tag minimization" parameter in XML
element declarations.
I feel we should, so that existing DTDs that provide these specifications
don't need to be maintained in two separate versions, one for SGML and
one for XML. I see no harm in allowing them. In private conversation,
Tim has said that we shouldn't, because it requires more cruft in the
XML spec.
Opinions?
Eve
I think the answer is pretty clear. Ask yourself the question of how we
will explain the need to put two hyphens in each element definition to an
XML user who doesn't care about SGML, but only wants the advantages of XML
(descriptive markup, document grammars, real containment). There's not a
plausible explanation. Worse, the explanation points to the removal of a
feature that seems like a better idea than it really is, making the naive
user feel deprived (as well as bossed around).
They typical XML user will only be an SGML user if we fail in our
mission in defining XML. Let's design on the assumption that we will
succeed and lots of people will use XML, who may or may not ever use SGML.
-- David
RE delenda est.
I am not a number. I am an undefined character.
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com
Boston University Computer Science \ Sr. Analyst
--------------------------------------------\ http://dynamicDiagrams.com/
MAPA: mapping for the WWW \__________________________
I hadn't thought about it before, but it seems easier to add a little more
to the element declaration production (and corresponding pattern matching
regexps) than to require changing 99% of existing declarations to work with
XML. It's only two additional two-character optional OR groups: ([O\-],
S*, [0\-])?
Cheers,
E.
W. Eliot Kimber (drmacro@drmacro.com)
Senior SGML Consulting Engineer, Highland Consulting
2200 North Lamar Street, Suite 230, Dallas, Texas 75202
"Rats in the morning, rats in the afternoon...if they don't go away, I'll be
re-educated soon..." --Austin Lounge Lizards, "1984 Blues"
I agree--no harm in allowing them.
However, note that 8879 _permits_ (but doesn't _require_) that that
parameter be omitted if the SGML declaration doesn't permit OMITTAG.
So, with care one could use the stripped DTD for XML and SGML under
some scenarios. Although I can certainly imagine where one might
require an OMITTAG DTD as well, and in that case it would be convenient
to be able to have the omitted tag minimization parameter present and
ignored.
Dave Peterson
SGMLWorks!
davep@acm.org
Given that the current XML draft doesn't support
parameter entities, name groups for ELEMENT and ATTLIST
declarations, AND groups, content models denoting
mixed content where #PCDATA appears anywhere other
than as the _first_ token in a repeatable OR group,
inclusion and exclusion exceptions, and probably a few
others, it looks like XML-SGML compatibility will be
pretty much limited to document instances in any case.
Since most SGML users will have to rewrite their DTDs
to make them XML-able anyway, leaving out the omitted
tag minimization parameter doesn't seem like that big
a deal...
--Joe English
jenglish@crl.com
But rewriting them so that the content models obey the
restrictions is a one-shot thing, and then you can
continue to deal with those documents using the new
DTD with its new content models in both SGML and XML
systems.
The point of Eve's proposal is to avoid having to
continue to maintain both versions. That to me
_does_ "seem like that big a deal...".
Dave Peterson
SGMLWorks!
davep@acm.org
Don't forget: you also have to expand all the parameter
entity references, replace things like:
with
and change things like:
into:
!ELEMENT x ( (a, ((b,c) | (c,b)))
(b, ((a,c) | (c,a)))
(c, ((a,b) | (b,a))) )
Heaven help you if you're using something like
TEI, DocBook, or IBM ID Doc...
I for one do not relish the thought of maintaining
even a moderately large DTD after expanding all
the parameter entities...
Point taken, but I think it will take more than just
allowing "- -" in the XML grammar to make this feasible.
I could live without AND groups, but parameter entities and
the ability to specify more than one associated element
type in !ELEMENT ... and !ATTLIST ... declarations are
essential.
--Joe English
jenglish@crl.com
Often I find that even the DTD syntax is not powerful enough to express the
particular semantics and element-context linkages I want to express
elegantly (e.g. OOP-style "inheritance"). The solution may be to code in
something entirely unlike DTDs (for instance one of the instance syntax
languages we have discussed) and down-translate. Eve's suggestion would seem
to allow ONE down-translation instead of two.
Paul Prescod
Boycott Shell Oil worldwide! http://www.web.apc.org/embargo/shell.htm
"Shell is here on trial and it is as well that it is represented by counsel
said to be holding a watching brief."..."The ecological war that the Company
has waged in the Delta will be called to question sooner than later." -Ken
Saro-Wiwa to the tribunal that later executed him.
This note starts with one point, and records my reasoning as I abandoned
the point again. (Maybe it's not rhetorically sensible, but that's the way
it happened, so
I've been thinking about this some more, and watching the discussion,
and I think that we maybe should allow the minimization flags, _if_ we
explicitly label them as an SGML compatibility feature. This explicit
labelling may be a hopbby horse of mine, but I think it is something we
must do for the negative requirements we are already making (like
disallowing -- in comments). Not being honest about these feature would be
a terrible mistake.
Of course, adding something to the grammar that is not already there is
more intrusive than removing something that _could_ be there. No XML
document will be invalid when parsed with a parser that fails to implement
the comment restriction, but an XML document that puts - - in its element
declarations would be invalid to a parser that skipped implementing
SGML-compatibility features. It's a much stronger requirement on processors
to add something to the language for compatibility, than to remove it for
the same reason -- even people who don't care about compatibility have to
implement added-features they don't need, whereas not implementing
restrictions you don't care about is easier and safer.
I guess we're back to eliminating them. I'm not sure it's worth adding
syntax, especially given the number of changes that many DTDs will have to
undergo, anyway.
-- David
RE delenda est.
I am not a number. I am an undefined character.
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com
Boston University Computer Science \ Sr. Analyst
--------------------------------------------\ http://dynamicDiagrams.com/
MAPA: mapping for the WWW \__________________________
I would like to see the omitted tag minimization allowed in XML DTDs.
I fail to see how allowing and ignoring this field will make the
implementors job (that is, those implementors whose tools even read
the DTD, since there is a whole class which will not) that much harder.
I do see, however, how it can make the DTD maintainters job much harder
and how it will make SGML compatibility more difficult for very little
gain. All the DTD reading and writing tools that use an implied SGML
declaration with OMITTAG YES--as well as all those with OMITTAG NO but
that write out the omitted tag minimization anyway as permitted by
8879--will not produce valid XML DTDs even if the DTD writer is careful
to create models that are otherwise valid per XML.
If I were writing an XML tool that was going to read a DTD, I'd sure
spend the extra 10 minutes to program it to read and ignore an optional
omitted tag minimization field. And once a couple tools do that, users
will start assuming it's okay to have that field, and then the tools that
don't do it will just be considered suboptimal. Why set ourselves up for
this bit of gratuitous non-interoperability?
