I've updated
2000/10/rdf-tests/rdfcore/skeleton/positiveEntailmentTest.rdf
(and related support files) to include the following lines:
Basically, if an entailment test (positive or negative) requires
datatype knowledge / general DT closure rules then the entailmentRules
tag is needed. In addition, the datatypeSupport tag can be repeated to
list the specific datatypes used in the test.
jan
PS. The test case document includes this text:
Negative Entailment Tests
Should a premise document contain a semantic error with respect to any
constraints imposed by the entailment rules selected, the entailment is
treated as not holding; that is, the test will succeed.
So I'm going to use this to include the following test:
it is NOT the case that
eg:a eg:foo "fiewh"^^xsd:integer .
datatype-entails
(with knowledge of the xsd:integer datatype).
I'll come back to the list with the other tests in a bit.
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
It's a sad fact that the word "semantics" seems to have lost all meaning.
Not sure what this all means, but please make sure that the test
cases always have an explicit
whatever rdf:type rdfs:Datatype .
antecedent for all the datatypes used.
Well, er, actually, in this case the entailment DOES hold, strictly
speaking, rather in the way that False implies anything. But OK, you
can *treat* it as not holding.
How about
_:x eg:foo "fiewh"^^xsd:integer .
_:x rdf:type xsd:integer .
??Strictly speaking, the MT says that this (trivially) entails
anything, because its always false. Similarly
_:x eg:foo "fiewh"^^xsd:integer .
_:x rdf:type rdfs:Literal .
Pat
IHMC(850)434 8903 home
40 South Alcaniz St.(850)202 4416 office
FL 32501 (850)291 0667 cell
phayes@ai.uwf.edu http://www.coginst.uwf.edu/~phayes
s.pam@ai.uwf.edu for spam
It just means, if the test case requires knowledge of lexical- value
mapping for a particular datatype, you list it in the test case
description (outside any files that have the test contents). "To run
this test case you need to know about XSD integer lexical- value
mapping".
They don't at the moment, but I'll include those asap.
Yeah, I didn't really like it at the time, 'cause the MT is written so
that things are false rather than broken. Unfortunately, I had no way to
generate a false N-Triples consequent document at the time :-)
So although it's not a straightforward entailment, the "positive
entailment test" succeeds if:
- the premise document(s) have no semantic errors due to
constraints wrt the entailment rules used, and
- the premise document(s) entail the consequent documents.
and a negative entailment test succeeds in exactly the opposite case.
It's the "always false" that the neg. entailment test is trying to
catch; perhaps it'd be simpler to have a "no valid interpretations exist
for document X (wrt some set of constraints)" test? - That would mean
that an entailment test would do what a logician expects from the name.
Jos, you're running these test cases, what'd be your preference?
jan
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
Unfortunately, I have a very good idea how fast my keys are moving.
