Implementing a specific expression language binding should be optional,
with at
least 1 of the available expression languages.
compare it to DOM which might offer XSL besides CSS.
I believe CSS is optional... i.e. the core DOM only consists of basically
DOM1. Can someone on the DOM WG confirm this? I don't think a DOM
implementor should be required to implement any expression language. (or
I might be misunderstanding what you are saying...)
Thats not what I meant, I meant that we should use the same mechanisme as dom
does where you have a DOM compliance implementation if you implement the core +
1 of the extended interfaces.
If you split up PAX in a PAX core and expression specific interfaces you can use
the same mechanisme where an implementation can be DOM-PAX compliant if it has
implemented f.i. the pax-core and the pax-xpath interfaces. (or pax-core and
pax-inquirer patterns.. ).
the "create" function should be:
public abstract Expression create(String expression, PrefixResolver
prefixResolver)
throws ParseException;
ok
ExpressionFactory efactory = ExpressionFactory.newInstance("Xpath");
Expression expr = efactory.create("foo/baz[yada]", myPrefixResolver);
XObject val1 = expr.evaluate(node1, myXEnvironment);
XObject val2 = expr.evaluate(node2, myXEnvironment);
Setup is good
compare it to:
XPathExpression aExpression = PAXFactory.createXPathExpression();
or
InquirerExpression aExpression = PAXFactory.createInquirerExpression();
It sounds more DOMmish in my point of view, and I think it's easier to make it
language independent.
Additional features:
A separate
Expression.parseExpression() DOMException PARSE_EXCEPTION
might be usefull.
Given create(String expression, PrefixResolver prefixResolver), do you
really think so?
I still think so but you might call it something like "ValidateExpression".
The purpose was not to precompile stuff separately but to validate the
expression separately without executing it.
Do you think more needs to be put on the Inquirer interface, like
boolean getBool(String queryString);
boolean getMatch(String queryString);
?? It's supposed to be minimal though, so maybe not. Dunno.
You're asking me ;-), I'm not a minimalist supporter but I think that easyness
is important.
Best regards,
Jeroen
can use
it has
and
Hmm.. OK, I think. What would be in PAX-core? Sorry if I'm being dense.
I'm not familiar with the details of the DOM complience stuff... I guess I
should do some studying. To me, there is only core and optional.
ExpressionFactory efactory = ExpressionFactory.newInstance("Xpath");
In yours, you have to have exposure to a specific interface for
XPathExpression. In mine, the interface is obtained at runtime, based on a
property registration mechanism, and the interface is abstract.
make it
Not sure what more DOMmish means. Why is it more language independent? Do
you mean, Java vs. COM language independent? Why?
"ValidateExpression".
Can you give a use case?
-scott
If you set it up like dom2 than an implementation is DOM-PAX compliant if it
implements the PAX-CORE interface and at least one PAX-Expression module
interface.
Variable, Variable lists can be shared among Expression modules (f.i. xpath) and
should therefore be in the PAX-core interface;.
ExpressionFactory efactory = ExpressionFactory.newInstance("Xpath");
That's the difference, the same thing is done in DOM level 2.
You don't have a createNode("Element"), createNode("Attr") in DOM it is done
through createElement, createAttr...
This enables you to vary the variablelist of a specific expression language
create.
DOMmish... ehhh I meant it "feels" like DOM. (don't ask me for a definition of
"feels like DOM" ;-))
That's what I meant but I agree it isn't a strong point, what I had in mind was
that in certain programming languages you're not able to create an instance
based on a string but there are simple workarounds.
In company A, employee "clever" is creating an expression for employee "dummer"
which he validates before shipping it to "dummer". "dummer" executes the
expression.
Compare it to compile time errors and runtime errors in a programming
environment.
Best regards,
Jeroen
