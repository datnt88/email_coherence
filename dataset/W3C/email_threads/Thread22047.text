Contents
DOM Test Suite task force
DOM Test Suite Process
Bugzilla
Change Control
Call for Volunteers/Nominations
DOM Test Suite task force
I have been invited to chair the DOM Test Suite task force
with the objective of managing the work required to complete
and release the DOM Test Suites for DOM Levels 1, 2 and 3.
I would like to outline some of the basic changes in how
the project will be managed and ask for nominations and
volunteers to help complete the DOM TS.
Please feel free to make comments or suggestions regarding
these changes.
Changes to the DOM Test Suite Process
The existing procedures for the DOM TS are outlined in
http://www.w3.org/DOM/DOMTS-Process .
In order to for the DOM TS to be completed, we need to know
what work needs to be completed, who is responsible for
completing the work and have some degree of control over
what changes are made to the project.
In order to achieve this, we will manage all work through
Bugzilla.
www-dom-ts@w3.org will continue to be used for general
discussion.
Bugzilla
The public W3 instance of Bugzilla http://www.w3.org/Bugs/Public/
will be used to identify and track each task required for the
completion of the DOM TS.
A new Bugzilla product "DOM TS" and the following Components
have been created:
Component Description
Process This component would be used to manage changes
in the process used to manage DOM TS project.
Documentation This component would be used to manage the
http://www.w3.org/DOM/Test site as well as
any other documentation related to the DOM Test
suites.
Any changes to the public web site will be made
by Philippe Le Hegaret after approval of the
full document by the DOM WG.
Java Binding This component would manage the maintenance of
the XSLT and build processes used to create the
binding of the tests to the Java Test harness.
ECMAScript This component would manage the maintenance of
Binding the XSLT and build processes used to create the
binding of the tests to the ECMAScript Test harness.
DOM Level 1 This component would be for all issues related
to the DOM Level 1 test suite.
DOM Level 2 This component would be for all issues related
to the DOM Level 2 test suite.
DOM Level 3 This component would be for all issues related
to the DOM Level 3 test suite.
The Component Owner is responsible for either performing the
work required to resolve the bug or for assigning the bug to
an appropriate member of the DOM TS community and scheduling
it to be resolved.
Ownership of each DOM TS Component has been temporarily assigned
to myself until suitable owners can be identified.
Change Control
If we are to complete the DOM TS, each change to the TS must
be managed. Therefore, before any change is committed to the
DOM TS:
* The reason for the change must be documented as a bug in
Bugzilla
* For changes to existing files, the change must be attached
to the bug as a patch. For new files, the files must be
attached to the bug.
* Each change must be reviewed by a person who has been
given reviewer status. If the reviewer suggests modifications
or otherwise does not approve the change to the DOM TS,
then the change must not be checked into CVS.
* Changes committed to CVS must include a comment containing
the bug number, the reviewer and a short description of
the change.
A hierarchy of component owner, reviewer, DOM TS chair, DOM WG
will be responsible for making decisions regarding changes to
the DOM TS.
If at any point, a decision is questioned, the decision will
be bubbled up to the next highest level of authority.
The final authority for any decision regarding the DOM TS is
the DOM WG.
Repeated violations of the CVS check in rules would be grounds
for revocation of CVS commit privileges.
Call for Volunteers/Nominations
We need people to help complete the DOM TS as:
Component Owners
Component Owners are responsible for managing the work
involved in each component.
Component QA
Component QA are responsible for verifying that RESOLVED
bugs/issues in Bugzilla are in fact resolved
as described in the bug.
Reviewers
Reviewers are responsible for ensuring that any changes made
to the DOM TS are appropriate.
General Contributors
General Contributors help by filing new bugs, helping to
resolve existing bugs or by contributing documentation.
If you would like to be involved in one of these areas or know of
someone you think would be a good candidate, please contact me.
Bob Clary
build and schema/DTD generation are probably worthy to be components.
There were good intentions to do transforms and frameworks for other
"unofficial" bindings (Python, Xerces-C, libxml, System.Xml, et al). It
would be good to clarify whether they can be done within the context of
the W3C effort and if so to define components and a process for
developing or accepting test suite generation for other bindings.
It might be better to organize the components by sub-spec (Core, HTML,
Events, LS, XPath) than by level. The Level 1 owner isn't going to have
much to do.
That might be appropriate for the later phases of a test suite's life,
but it would seem to severely hinder collaboration in the development of
new test suites. I've been troubled that there has been very little
visibility and collaboration in the development of the initial LS and
XPath test suites and such a lock-down would reinforce the tendency for
new test suites to be developed in hiding.
There needs to be some middle ground between tests on one developer's
machine and code that has implied sanction of the WG. If our releases
were more frequent, then we could tolerate the CVS containing a few
controversial tests awaiting review by the WG. To have more frequent
releases, we would need some incremental status for releases. The
progression could be from a nightly build, to working-draft release, to
a last-call release that the task force and WG approved to a definitive
release. Has there been anything in the QA WG on test suite lifecycles
that might be appropriate?
Except for code freeze periods, the review before commit seems terribly
pessimistic. If a committer is considering something controversial or
that touches a lot of files, good manners would suggest that it be
brought up on the mailing list for discussion before being committed.
In the, hopefully rare, case that a committer did not think a particular
change was controversial, but it was, it would not be difficult to undo
the change until there was consensus. Maybe I'm insensitive since I
would be the most likely offender, but I do not believe that we have had
abuses of committer priviledges to warrent such a strong corrective.
The most effective review of a proposed change would be a nightly (or
more frequent build) that would validate all tests against the
appropriate schema, build the bindings, and possibly run the tests
against benchmark implementations (which would probably be limited to
Java bindings at this time). To effectively review before commit, the
reviewer would be forced to apply the patch to his local copy and run
through such a build process semi-automatically. To review after
commit, the reviewer could rely on the automated build to find any
structural problems with the change and would only need to verify that
the change is consistent with the spec. I would not suspect that it
would be difficult to get the DOM TS added to Gump's
(http://jakarta.apache.org/gump) roster.
Component Owners seem a generally good idea. However, if, for example,
a change was committed in the DOM L3 TS that broke the build or was not
schema valid, it would be good for a committer to fix the problem
without requiring an assignment of the defect by the component owner.
Breaking down QA by components might be overkill, maybe an QA role that
can mark any bug as closed with an possible informal division of
responsibilities.
There should be no criteria to be a Reviewer (in the monitor change, not
the veto change sense) or a general contributor. Anyone who wants to
subscribe to www-dom-ts@w3.org or access the CVS should be encouraged to
do so.
Those with commit rights to the CVS (aka Developers) should be a
separate class.
I'd see the roles break down like:
Community/Public: Anyone interested in the DOM TS work. Can subscribe
and post to www-dom-ts, access the CVS, subscribe to CVS change
notifications, access Bugzilla.
Developers: Public rights + CVS commit rights. May research bugs and
commit changes to CVS corresponding to bugs. Should not make
potentially controversial changes to CVS without raising the issue on
www-dom-ts. When there is a controversy (either before or after a CVS
change), any committer can block (or rollback) the change until WG or WG
liason resolution, accept the change pending WG or WG liason resolution
or accept the change without escalation to the WG liason. Votes on task
force interim releases.
QA: Monitors Bugzilla, can mark issues as closed.
WG liason: Can block or rollback changes to the CVS. Coordinates issues
resolution with the WG. Votes on task force interim releases.
WG: approves formal releases of test suite.
The most crucial role that we have been missing coverage has been
implementation representatives. It would be great to have someone who
is the go to person for issues specific to Xerces-J, Safari, Konqueror,
Palm Web Browser, etc.
That sounds like a good idea.
Please detail what areas each component would cover and either volunteer
or nominate an owner for these proposed components.
I have indeed already had inquiries regarding this. I think that we
should work to enable others to reuse the test suite to test other
implementations. However, I think that this topic needs more guidance
from the WG on how to proceed. Our initial goal is to complete and
release the DOM TS and I would not want this worthy topic to detract
from that goal.
I will start a discussion here to discuss what we can and should do with
respect to "unofficial" bindings.
I agree that it would be very nice to be able to specify the
sub-specification however I also wanted to make the level explicit to
help identify the version of the test suite affected by the bug/issue.
Ideally we would have components for each level/spec however the benefit
of being able to assign bugs/issues to that level of detail seemed to be
outweighed by the sheer number of required components and owners. Of
course we can have a single individual who owns multiple components.
I am open to expanding the components to include the sub-specification
however I want to keep the level as well.
The fact that the DOM Level 1 owner (and hopefully the DOM Level 2
owner) will hopefully have a short time of activity is the goal of our
project.
The question is would
DOM Level 1
DOM Level 2 Core
DOM Level 2 HTML
be acceptable or would this create too many components?
I agree with your basic point. I think that we can consider DOM Level 1
and DOM Level 2 to be at the stage where more controls are appropriate
but that DOM Level 3 is not.
I do not know if the QA WG has anything appropriate however I do
envision creating a system where we do have public nightly builds
available for testing and review and agree with your general process
outline.
These are issues that I think we can handle in the overall project
framework once we have the basic initial process defined and have owners
for the basic components.
For a sub-specification that is in it's earliest stages such as DOM
Level 3, I agree that mandatory review is not absolutely necessary.
However for other sub-specifications which are in their final stages I
do believe that mandatory reviews are necessary.
I also think that other aspects of the project need to be under tighter
control and can benefit from a mandatory review process. For example,
the ECMAScript binding has been an area of disagreement and we are not
in a position of saying we have decided how to proceed or complete it.
The process to date has been for myself and others to raise points,
provide demonstrations of ideas, and solicit feedback. However you make
the final decisions as to the exact changes to the ECMAScript binding
and commit them to CVS without any discussion or approval of what those
specific changes will be.
I believe that each Bugzilla component can have separate review
requirements. At the earliest stages, no review would be needed. As the
Component nears completion, mandatory review can be required.
I do envision a system of nightly builds, candidate builds, etc however
I do not think they constitute a replacement for the need to review
changes to those parts of the TS which are nearing completion.
I think that if someone breaks the build and notices it before anyone
else, the person responsible for the change should consider it their
immediate responsibility to backout the commit that caused the breakage
and to reopen the bug which tracked that change.
If someone else notices that the build is broken due to another person's
commit, then the bug which tracks the change should be reopened and the
person responsible for the change notified and given the chance to
correct the problem. If the person responsible for the change can not
respond quickly enough, those with the appropriate permissions should
backout the change without waiting for the original person.
The basic underlying point here is that no changes should be made
without tracking that change in a bug whether or not the component in
question requires review or not.
A new bug is not required in order to back out a commit which breaks the
build. Reopening the already existing bug is sufficient.
I agree that anyone who wishes to participate is welcome and should be
encouraged. However the role of "reviewer" who accepts/rejects/asks for
modifications to a change before it is committed implies knowledge and
responsibilities which are not those of a general contributor.
In our context "review" and "reviewer" have specific meaning related to
controlling changes committed to CVS to make sure that the change is
appropriate.
Any change should first be tracked by a bug. If necessary, the bug can
be announced on the www-dom-ts to solicit a discussion but if there is
controversy then the comments in the bug should reflect that and the
commit not made to CVS until the issue has been resolved either by the
Component owner, the DOM TS chair or the DOM WG.
Under no circumstances would I feel that it is ok to check in a change
to CVS if there has been disagreement with either the Component owner,
the DOM TS chair or the DOM WG.
I have preliminary contacts with Safari and Opera and hope to make the
participation of implementation representatives as broad as possible.
I don't have a problem with that.
Committing stuff to the CVS (on a branch if appropriate) in my opinion
is a precondition for discussion and collaboration, not an attempt to
preempt discussion. It is in no way final since there is more than one
committer and any ill-considered change could readily be reversed if
there were complaints.
In this particular instance, the prototype was branched (apparently
unintentionally) from the CVS sometime before July 2002, it would have
been error prone to reconcile your prototype with the current CVS.
Instead I attempted to incorporate the novel concepts from your
prototype and the followup discussion into modifications of the current
CVS to provide a path forward to which all could contribute.
If there had been any complaints, the 3 files that were changed easily
could have been rolled back or split off into a branch.
It is counterproductive to do substantial work off-CVS. It was
unavoidable during the development of X-Hive's submission of Load/Save
tests since it was based on a non-public draft, but knowing there was
work going on but not being able to see it would strongly discourage
anyone else from building LS tests for contribution. If the test suite
development had been done on CVS, other interested parties could be able
to contribute since they would know there contributions did not
duplicate X-Hive's efforts. It also made it very difficult for me to
modify the transforms to address problems with tests to which I did not
have access.
In regards to controversial tests, the following example might be
helpful. A couple of years ago David Brownell raised an issue
(http://lists.w3.org/Archives/Public/www-dom-ts/2001Nov/0025.html) where
Crimson alone implemented a particular reasonable interpretation of a
passage of a DOM spec and every other parser known to man implemented a
behavior that seemed contrary to the spec. A well-known WG member said
in a communication that I can't find something like "it kind of says
that but it really means..." and referred to non-public WG communication
to support his interpretation.
A definitive way to have resolved the conflict would have been to put
one test for each of the behaviors into the CVS and petition the WG to
explicitly reject one or the other. If we attempted to avoid
controversy, neither test would have added to the CVS and there would be
nothing to compel resolution to this issue.
As long as a test is schema-valid, is consistent with a somewhat
reasonable reading of the spec and doesn't have IP issues, the TS task
force should not suppress a controversial test but should add the test
to the CVS, survey the usual implementations and petition the WG to
accept or reject the test.
I know Dimitris spent a huge amount of time with the QA team and maybe
he can elaborate. I think it is a good thing for the TS force to seek
out potential controversy, crystalize it into potentially inconsistent
test cases, survey the implementations and petition the WG for
resolution and not to suppress controversy or preempt the WG's judicial
role.
In regard to framework issues, there may be efforts like the enhancement
of the ECMAScript harness that may extend for a substantial period of
time. I'd prefer to avoid it, but these types of efforts could be
isolated in development branches in the CVS and only integrated to the
stable branch when everybody is happy. Totally locking down the CVS
would encourage development to occur elsewhere, either in isolation or
on some non-W3C CVS server.
Bob
I would be glad to help with any problems/clarifications/modifications
of the Level 1 &amp; Level 2 Core/HTML tests contributed
by NIST.
Rick Rivello
