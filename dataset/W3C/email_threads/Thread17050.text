Has anyone come up with a way to standardize on signaling that a table
is being used for layout purposes only? When we run our documentation
through our accessibility checking utility, we have told folks to add a
null SUMMARY attribute to their tables, and our checking utility
recognizes this as a signal that the table need not be checked for
association between headers and cells, or for header markup itself. Is
anyone else standardizing on this, or are folks using SUMMARY="This is a
layout table?" Or some such variation? It seems that the SUMMARY=""
makes sense in the same way that null ALT attributes work for decorative
graphics, no?
Is anyone interested in standardizing on such a thing, so that all ERTs
(Evaluation and Repair Tools) can be looking for the same thing?
Cheers,
-Kerstin Goldsmith
This is very good question. It has been discussed to some extent, with no
apparent consensus, and different practices exist, and different guides and
programs give different recommendations. So the situation really calls for
some clear statement. I wonder if there's any mechanism for W3C WAI to take
an official position, to give an official interpretation of the Guidelines.
The Guidelines say (checkpoint 5.5): "Provide summaries for tables.
[Priority 3] For example, in HTML, use the "summary" attribute of the TABLE
element." Note that it does not say "for all tables". However, the related
HTML techniques document describes, at
the summary attribute in a manner that suggests that it's intended to be
used for all tables. But no example is given about a summary for a layout
table.
This sounds trickish, though I see the practical point.
That's a natural way of looking at it, but maybe not quite correct. For an
IMG element, the ALT attribute by definition gives the textual alternative
to be used in place of the image, when the image is not displayed. Thus,
alt="" says that the adequate textual replacement for the image (when the
image is not shown) is an empty string. And this is of course quite correct
for a purely decorative graphic (unless the graphic itself is being
discussed, of course). For a TABLE element, the SUMMARY attribute is defined
(according to HTML specifications) as follows: "This attribute provides a
summary of the table's purpose and structure for user agents rendering to
non-visual media such as speech and Braille."
The definition is a bit one-sided, since such a summary could be useful even
when the table is presented visually. The user might have cognitive
difficulties in just seeing the structure, or the canvas might be too narrow
for the table without (horizontal) scrolling, so that it's difficult to get
a good picture of it as a whole. So it's useful if a graphic browser gives
the user an optional access to the summary (as Mozilla does: right click on
the table and select Properties).
On the other hand, it's _double_ sided: the summary is supposed to describe
the purpose _and_ structure. The examples in W3C documents add a third job
to that: describing the overall _content_ of the table, like "This table
charts the number of cups of coffee consumed by each senator - -", but this
probably means basically that "purpose" is meant to be read as a content
description, rather than telling the real purpose, i.e. _why_ a table
presents some statistics about senators' coffee consumption. I feel a bit
like a harmonizing exegetic, but I think this interpretation more or less
resolves the doublesidedness:
A summary is supposed to describe the structure of a table, in a manner that
covers the meanings of columns and rows, thereby giving an idea of the
overall content en passant.
Literally taken, this discussion means that summary="" would say that the
table has no structure and, moreover, that it has no purpose (if we take the
word "purpose" in the specification literally) or that it has no content
(since an empty overview of a content is adequate only if there is no
content).
However, one might read "table" as relating not the the table element, with
all its content, but to the pure structure itself. Even then, summary=""
would be problematic.
It is tempting to say that the lack of a summary attribute should indicate
that table is for layout only. But since the great majority of tables on Web
page currently has no summary attribute, such a criterion would lead to
definitively wrong conclusions.
What I suggest is this (and I might be simplifying the situation):
1. For a table used for positioning elements on screen, e.g. so that there
is some material on the left and some other material on the right, use a
summary attribute that explains the contents of the cells. In a way, treat
it as a structural table. Example: summary="First cell: navigation links.
Second cell: content proper." If there are cells with no content, used just
to create borders between content cells for example, I think you should
state this explicitly, like "Fourth cell: no content."
2. For a single-cell table used for formatting purposes such as setting a
fixed width for text or to create a border around it, use a summary
attribute that describes the content of the cell. Example: summary="Copy
text. (This is the only cell in the table.)"
One of the points here is to be prepared to software that processes tables
in an "unconventional" but logical way, giving the user access to each cell
separately, in some suitable manner.
Jukka Korpela, senior adviser
TIEKE Finnish Information Society Development Centre
Diffuse Business Guide to Web Accessibility and Design for All:
A comprehensive solution but doesn't this run the risk of overloading users
with too much info about the structure of layout tables? Given that
developers will still continue to use tables for layout and that they may
not always linearise correctly would not a better solution be to use
summary="layout table" and then use title for each cell that has
meaningful content. If a td has no content (except spacer images etc) then
the lack of a title would be useful and other cells would have, for example,
td title="navigation cell" or td title="content cell" . This has the
bonus of the purpose of each cell becoming apparent when the user hits them
rather than havnig to try and commit the structure of the page to memory.
Julian
From: Jukka Korpela [mailto:jukka.korpela@tieke.fi]
Sent: Friday, November 08, 2002 7:49 AM
Subject: RE: layout tables
The information in this email is confidential. The contents may not be disclosed or used by anyone other than the addressee. If you are not the addressee, please tell us by using the reply facility in your email software as soon as possible. Sheffield City Council cannot accept any responsibility for the accuracy or completeness of this message as it has been transmitted over a public network. If you suspect that the message may have been intercepted or amended please tell us as soon as possible.
Well the way I do it is by not using tables just for layout purposes. Really
simple (but not entirely true - I do use a tool for presentations that is
supplied to me and gets maintained and regularly updated by other people.
That uses a table to put some buttons on the page. I used to maintain my own
version, but it got too hard to keep up).
There have been discussions before about getting people to use
summary="layout table" (so should spanish tools look for summary="solo
maquetacion" or what?) or some similar mechanism.
It would also be possible to use a profile to identify this. It seems like
standardising ways of doing this and then getting that implemented in tools
is a lot of work compared with just not using tables for layout, from my
perspective.
Chaals
SWAD-E http://www.w3.org/2001/sw/Europe ------------ WAI http://www.w3.org/WAI
W3C, 2004 Route des Lucioles, 06902 Sophia Antipolis Cedex, France
One problem I have observed with this is that if *every* table has a
summary, including the tables used strictly for layout purposes, users of
screen reading technology get inundated with more information than is
practically neccessary under *normal* solutions.
For example, if a page maintains a persistent table at the top of every page
for navigation "buttons", is it really neccessary to tell every user (every
time) that "This is a table for laying out the navigation buttons"? ("This
is a pen which is used for writing"). The net effect is that we are then
being "overly verbose" to this type of technology.
If, to avoid this, the user of the screen reader "disables" or reduces the
verbosity of their application, what then happens when they reach a table
which *really* requires an appropriate summary? They don't get it...
Chaas has correctly suggested that the best way to avoid this problem is to
avoid using tables for layout purposes, but as we all know, in the real
world that may not be an option available to us. I would suggest then that
Kirsten's approach of providing {summary=""} to the layuout tables satisfies
some of the testing tools which cannot mechanically ascertain the difference
between the layout table and the data table.
Perhaps the better solution would be to re-write the checkpoint
acknolwedging the difference between layout and data tables?
JF
-----Original Message-----
From: Jukka Korpela [mailto:jukka.korpela@tieke.fi]
Sent: Friday, November 08, 2002 7:49 AM
Subject: RE: layout tables
I still haven't found an easy to use and set up table using CSS to handle
form layout for example. I have found some but they're a bit messy in
comparison to a table IMHO (see
helpful to provide summary information about the form being display in the
table even though the table is only being used for layout. Inddeed, you
could argue that it is always more helpful to provide summary information
even if the table is only being used for layout. Ideally it would be nice to
have a table type attribute or something but I would be happier to see the
summary attribute being used to at least explain it's purpose. Unless we
standardardize the text to be used in the summary for layout tables, eg
"layout table: additional information" this would mean validation tools
wouldn't be able to identify whether the table was being used for layout or
not but if you know it is only a table layout then you can ignore the
warning surely.
As far as adding title text to each cell aren't we going to be possibly
confusing the problem by offering to much information? The summary attribute
in conjunction with headers etc for complex data tables seems to be
sufficient to me.
OK, I inadvertantly send this originally to Charls who kindly replied as
follows but I wanted to send it to the list anyway. Here's Charls's reply:
Was this for the group? I got it privately. (Feel free to forward my
response).
Well, although making real tables should of course be done in HTMl by using
table elements and all the associated bits and pieces, the stuff you have
there rendered nicely in MOzilla 1.2 for Mac OS X. iCab doesn't handle
floats, so linearised it (Amaya would do the same thing I guess, but I
didn't
test it yet).
If I was trying to replicate the kind of form where there are two columns,
with the left hand one being labels, right-justified and the right hand one
being text inputs left-justified I would use inline spans with a width to
try
and make them behave right. (Hmm. I suppose you could use divs as well, like
you do in your example). Either way, I can think of worse things than the
raggedy look that non-compliant browsers will give - things that cause real
problems.
Another approach would be to use RDF annotations for tables that are layout
tables. This would potentially take the information out of the page
(although
you could also use meta elements to include it, and provide an automated way
of stripping that to put it on the web as RDF, via a very simple XSLT). At
that point you can start by defining your own property for a layout table,
and simply write some RDF to relate it to another such property if you find
one, so that until one of you decides to use the other person's property
there is information that can be used to match the two - also providing
backwards compatibility.
Although I don't know of any current validation or repair tools that are
currently equipped with a complete general-purpose RDF parser, I know that
these are coming (in part because I have some students at work on one, an in
part because the use of things like EARL makes it an obvious direction to be
moving in order to use other people's validation results in your repair
tool).
Cheers
Ian
Well the way I do it is by not using tables just for layout purposes. Really
simple (but not entirely true - I do use a tool for presentations that is
supplied to me and gets maintained and regularly updated by other people.
That uses a table to put some buttons on the page. I used to maintain my own
version, but it got too hard to keep up).
There have been discussions before about getting people to use
summary="layout table" (so should spanish tools look for summary="solo
maquetacion" or what?) or some similar mechanism.
It would also be possible to use a profile to identify this. It seems like
standardising ways of doing this and then getting that implemented in tools
is a lot of work compared with just not using tables for layout, from my
perspective.
Chaals
136
SWAD-E http://www.w3.org/2001/sw/Europe ------------ WAI
22
W3C, 2004 Route des Lucioles, 06902 Sophia Antipolis Cedex, France
This email is confidential and intended solely for the use of the
individual to whom it is addressed. Any views or opinions presented are
solely those of the author and do not necessarily represent those of
SchlumbergerSema.
If you are not the intended recipient, be advised that you have received
this email in error and that any use, dissemination, forwarding, printing,
or copying of this email is strictly prohibited.
If you have received this email in error please notify the
SchlumbergerSema Helpdesk by telephone on +44 (0) 121 627 5600.
Ideally it would
[snip]
Unless we
Of course either a type attribute or a standard for such text would be
creating a standard for a deprecated technique used only as an intermediary
measure.
Not at all.
A layout grid is scene-graph-building infrastructure that just belongs in the
web-content-builder's toolkit forevermore.
More future than history.
Al
Yes, but using a table element to produce that grid is a kludge.
One of the banes of the post 508 internet is the summary informing us
that
"this table is used for format purposes..."
