I've volunteered and Jim has accepted me as document editor for
the access control issue. I am currently working on a "Requirements"
draft which will serve as the direction for a later Draft
Specification for access control.
It is possible that access control will grow too big for this WG;
it may grow into either a subgroup of WEBDAV or even a WG of its
own. This will be determined later.
Right now, I am soliciting initial input on some major questions
we need to answer before we can even begin drafting the Requirements
specification. I would like to propose some initial questions.
I'll compile responses together, and then that can serve as a basis
for discussing the pros/cons of different things that could show
up in the Requirements draft. If you have other issues that you
think should be discussed, please send them to me.
1. Should an access control specification attempt to encompass any
of the following:
a) Potential extensions to HTTP;
b) A server-based API approach;
c) A file-oriented specification (e.g., an Access Control List
specification for the Web).
We need to determine if the scope of the Requirements will be
to include one or more of the above items, and the pros/cons
of different ways of solving the issue through the different
overall approaches.
2. If an API based approach is used, what is the best design
philosophy to utilize? An ODBC-like approach consisting of
modular API design which separates implementation from interface
has already been discussed in this group. Are there other ideas?
3. Should the Specification attempt to include any of the following:
a) A _required_ set of access control token-naming-conventions
b) A _suggested_ set of access control token-naming-conventions
If either of the above, what should the scope of tokens include?
What are the kinds of access we need to think about?
4. Should the access control specification reflect a particular
file-system convention, e.g., the UNIX-based filesystem, or
should the specification include any sort of policy and/or
protocol that abstracts filesystem from access control data?
If it uses an "abstracted" filesystem, is it safe to assume
that URL-based conventions are the best way to specify control
over a file? How does existing work in the areas of filesystems
(e.g., Andrew, etc.) reflect on these concepts?
5. Should the specification include any notions around "groups"
or should this be implementation dependent?
6. How should the access control specification deal with the identity
of a user, i.e., what authentication standard/proposal will
the implementation explicitly support, if any? If an API-based
specification is pursued, should the API explicitly support an
interface to a specific authentication interface or should it
be fairly abstract?
7. Should there be any embedded/defined support for the object model
in the access control system, e.g., inheritance of access tokens.
8. Should the scope of the access control specification include:
a) Checking to see if a user has a certain permission;
b) Assigning permissions to a user;
c) Revoking permissions;
d) Relating permissions to objects on the Web;
e) Any other management-related functions?
9. What are the ideas around non-file-access type permissions?
(For example, permissions that define what a user is allowed
to do inside an application).
10. Should the draft specification intend to ultimately include a
reference implementation?
11. What other questions are there?
Sincerely,
Jon Radoff
NovaLink
I'd like to thank Jon for taking the lead for coordinating work on access
control within WebDAV, and for starting a dialog on this topic.
I would agree that 3 and 4 are out of scope. Defining #1 is
also out of scope, because there are many others working on that
components. Our role here should be to determine which #1
we are going to support.
The purpose of the Access Control document will be concerned
principally with #2.
I agree with both the slicing of the topic into the above four areas and
the assertion by Jon that we are primarily concerned with how to support
various authentication schemes (#1), and how to specify Web access control
(#2), but not #3 and #4.
I'd like to throw out for discussion a "minimalist" view of access control.
My hypothesis is the only access control necessary in the client-server
WebDAV protocol is a method which temporarily changes the access rights of
a resource such that only (write) lock holders may read the resource, and
another message which reverts the access rights back to their original form
once editing is complete (or perhaps this happens automatically once all
locks are released). This limited access control provides document privacy
during editing, so authors are assured that others will not be reading
their preliminary work.
If more sophisticated access control is needed, this can be accomplished by
using server-specific forms to modify the access rights according to the
server's specific access control scheme. I'm not convinced that
interoperability is needed for more complicated access control.
Advantages: it's very simple, most likely would be consistent with any
future access control standard, and seems to handle the most compelling
case for why there needs to be *interoperable* client-server access
control. There are many reasons for why it is desirable to have Web access
control capability, but it is a different argument to say that Web access
control must be achievable via some interoperability scheme, be it a
protocol or an API. I'd like to see some scenarios for why we need a
full-featured access control specification for WebDAV.
- Jim
I think this is a good approach that should certainly be included.
This brings up the topic of whether the specification needs to
understand the concept of "ownership" of a particular object.
Yes, there is "ownership" in the sense of the operating system
ownership of objects, but this ownership is rarely consistent with
the identities of the actual users editing the files. In fact, it
is also pretty rare the .htaccess-type security models have
a logical mapping to individuals involved in content creation.
Is it necessary to provide users with the ability to change
ownership of objects? In this sense, the "WebDAV" ownership of
an object would be distinct from the "operating system" ownership
of the object. The Web server/WEBDAV implementation would be
responsible for maintaining whatever lists are necessary for
providing the object-to-user ownership mapping.
Another idea: an approach that could eliminate the need for an
"ownership" concept might be the ability to assign and revoke
access "tokens" to individual objects. For example, each object
could have a "Modify Token" which can be set to a particular value.
The WEBDAV-server implementation would check to make sure the
authenticated user "owns" that particular token before letting them
perform the related action.
