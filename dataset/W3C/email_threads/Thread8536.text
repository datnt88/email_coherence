I think Kent is arguing that from an implementor's point
of view, requiring minimal canonicalization is a real pain
not because minimal canonicalization is hard to implement,
but because by making support for minimal canonicalization
REQUIRED, it means that an implementor cannot use XML parsing
to parse SignedInfo when verifying a Signature.
If my app receives a Signature with a SignedInfo element
that was canonicalized using minimal-c14n, I cannot use an
XML parser to isolate the SignedInfo element and then go
on. After my app has figured out that minimal-c14n was
used, I have to use some sort of character-by-character
algorithm to ensure I've got the right bytes in the right
order. Having always used XML-c14n in my code because
I've always thought minimal-c14n was generally a bad idea,
I never realized just how bad an idea it was to require
supporting minimal-c14n as a SignedInfo canonicalization
algorithm. Kent, who is implementing a full XML Signature
Toolkit, has run into this problem directly.
(Kent if any of the above assertions are invalid, let me
know.)
In summary, by making support for minimal-c14n canonicalization
of the SignedInfo element, the spec really makes things
painful for XML Signature toolkit implementors. If there
is someone out there who has actually implemented code that
can support minimal-c14n canonicalization of the SignedInfo
element, I'd like to hear about it. I'm not saying it is
impossible, just a pain. If it has been implemented in a
robust, non-painful, way, we need to know about it.
The upshot of this may in fact be that support for Canonical
XML really should be REQUIRED and from an implemenation
point of view, should be mandatory for SignedInfo (eg. we
don't even need a Canonicalization child element, because
XML-c14n is mandatory. Kent, do you agree with this
paragraph. Everyone, I know this is a radically different
paradigm than what we've believed for months but in my
current "Eureka!" state, I'm not sure there isn't a better
solution. Perhaps after I send this note, I'll be in a
"Doh!, why didn't I see that" state but right now I'm not.
If someone can show me some elegant pseudo-code showing me
how one would extract, without XML parsing, the SignedInfo
element from an XML Signature, I would be grateful.
eg. Extract the XML Signature SignedInfo element from the
following Signature without using XML parsing.
-- Start of example --
!--
CanonicalizationMethod
Algorithm="http://www.w3.org/2000/02/xmldsig#minimal"
--
?x
CanonicalizationMethod
Algorithm="http://www.w3.org/2000/02/xmldsig#minimal"
?
CanonicalizationMethod
Algorithm="http://www.w3.org/2000/02/xmldsig#minimal"
CanonicalizationMethod
Algorithm="http://www.w3.org/2000/02/xmldsig#minimal"
-- end of example --
OK, I admit the above is probably a worst case scenario,
but Toolkits, particularly security Toolkits, have
to be able handle worst case scenarios.
Regards, Ed
insert
/insert
which from my point of view basically says if the XML-encoded data is
going to go through some form of XML parsing during its processing,
then one really needs to do XML-aware canonicalization (eg. XML-c14n)
before signing it.
It seems to me what Kent is saying is in accordance with the above
fragment
from the spec. Kent, John, would you agree or disagree?
This insertion is acceptable for me though I hope XML Signature
could be processed on only XML Information Set.
Anyway, remove the minimal c14n, or change requirement of the
minimal c14n: REQUIRED - RECOMMENDED, please.
TAMURA Kent @ Tokyo Research Laboratory, IBM
The issue is not whether one scheme or the other is hard to
implement but that the placement of the signature checking
module needs to be different for the two schemes.
If one places the signature checker after having reduced the
text to an XML parse tree then one can only support fully
c14n messages. That is undesirable from a security point of
view since c14n is a substantially more complex transformation
than cryptography people are generally happy with. Without a
comprehensive formal analysis of the potential substitution
attacks it would take a very long time to gain confidence in
the spec.
It is however quite possible to resolve the conflicting
constraints, it is difficult to explain how to do this in
ASCII however.
Briefly, one needs to code the XML parser with separate FSR
and parse tree building modules (a good idea in any case).
The initial FSR module needs to have a switch to divert code
through a hash algorithm when required. The switch needs to be
activated by the signature verifier at the appropriate point.
It is quite easy to write an integrated parsing / signature
verification module in C on this structure without the use of
any global variables. XML was designed to be very easy to
write parse tools for.
Alternatively if one is perfoming DOM style all in one go
parsing then one can reasonably expect to have the entire
input text available when performing the parse, supporting
verification is then a simple matter of making an index of the
position of the current lexeme within the input text avaliable
to the parser.
Phill
We've been trying to play agnostic between XML as XML, and XML as a
character sequence, but I believe the spec should follow the
implementations, which seem to be adopting the XML toolkit (XML as
XML) route.
The two problems that exist for that route are security and fragments, and
things seem to be falling out as follows (IMHO):
Security:
You can't do enveloped or partial documents signatures really without
operating in the XML as XML paradigm, if that frightens you from a
security point of view, use detached. (Or see Phil's comment:
Fragments:
We need some way of serializing the results of DOM/XPath node lists
(abstractions). Canonical XML only processes full documents, what to do? I
liked Gregor's proposal:
These approaches work well for XML as a refereant being signed,
I'm not sure if it's a compelling enough case to make the WG get off the
fence (move to the XML as XML or XML as character sequence) yet with
respect to SignedInfo, but given the comments from Gregor, Kent, and Ed
(based on implementation experience) I'm certainly leaning that way.
