My preference is for element only as well for Transforms. Does anyone oppose
this. Ed/John, is the mixed content for Transforms even relevant to the
types of transforms we'd expect people to write now?
Yes, I think it would be fine to have the same structure for all kind of
algorithms.
But are you arguing for consistency or for mixed? I could make them all
element only.
I am arguing mainly for consistency. I personally would feel better with
element only; if somebody wants to have mixed content, he can define a
parameter element which allows this mixed content.
Joseph Reagle Jr.
W3C Policy Analyst mailto:reagle@w3.org
IETF/W3C XML-Signature Co-Chair http://www.w3.org/People/Reagle/
Hi all,
My understanding was that transforms were required to include all parameters
in elements, so mixed content of the Transform element is not required.
It used to be required because we were just including whatever data was
necessary (XSLT or an XPath expression), so I think the MIXED setting is
legacy.
However, I think the idea behind transforms is that they be extensible in
the future. In the past, Ed pointed out that ANY means any element defined
in the DTD. However, if you omit the Transform !ELEMENT declaration, I
think you can put whatever you want inside it with a maximum of a warning
from validating processors. I believe we could still include the !ATTLIST
without trouble.
John Boyer
Development Team Leader,
Distributed Processing and XML
PureEdge Solutions Inc.
Creating Binding E-Commerce
v: 250-479-8334, ext. 143 f: 250-479-3772
1-888-517-2675 http://www.PureEdge.com http://www.pureedge.com/
[mailto:w3c-ietf-xmldsig-request@w3.org]On Behalf Of Joseph M. Reagle
Jr.
My preference is for element only as well for Transforms. Does anyone oppose
this. Ed/John, is the mixed content for Transforms even relevant to the
types of transforms we'd expect people to write now?
Yes, I think it would be fine to have the same structure for all kind
of
algorithms.
I am arguing mainly for consistency. I personally would feel better with
element only; if somebody wants to have mixed content, he can define a
parameter element which allows this mixed content.
Joseph Reagle Jr.
W3C Policy Analyst mailto:reagle@w3.org
IETF/W3C XML-Signature Co-Chair http://www.w3.org/People/Reagle/
I agree with element-only, because of the following:
- Mixed allows in most cases much more than you actually want
(mixed in XML can be controlled much less than in SGML)
- Mixed is typically used for document text; transforms have
clearly defined parameters (if not, something is wrong).
- If there should be a case where using mixed for a transform
is an alternative worth to consider, it's usually very easy
to create a corresponding element-only model by adding one
or a few more elements.
Regards, Martin.
Yes, I think it would be fine to have the same structure for all kind of
algorithms.
I am arguing mainly for consistency. I personally would feel better with
element only; if somebody wants to have mixed content, he can define a
parameter element which allows this mixed content.
I'm in favor of element-only and it looks to me like no one is in favor
of the more complex mixed content model...
Donald
From: "Martin J. Duerst" duerst@w3.org
Message-Id: 4.2.0.58.J.20000902023325.039db300@sh.w3.mag.keio.ac.jp
Date: Sat, 02 Sep 2000 02:37:36 +0900
"Gregor Karlinger" gregor.karlinger@iaik.at
"John Boyer" jboyer@PureEdge.com , Ed Simon ed.simon@entrust.com
References: NDBBIMACDKCOPBLEJCCDAEFHCKAA.gregor.karlinger@iaik.at
Yes, I think it would be fine to have the same structure for all kind of
algorithms.
I am arguing mainly for consistency. I personally would feel better with
element only; if somebody wants to have mixed content, he can define a
parameter element which allows this mixed content.
