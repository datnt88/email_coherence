After reviewing the documents Jon referenced, I believe that there are some
issues we need to consider based on an action item I am working on with
Mark Novak for the PF group:
We have to be careful of what we put in the DOM and do not put in the
DOM. What I feel is needed is an interface that extends the DOM for a
user agent. This way we can preserve the existing DOM for some of its
intended purposes such as servlet processing of HTML pages where user
interface issues are not of consideration.
We need to create an AccessibleObjectModel which extends the DOM to
application components. The DOM provides some key features that we can
reuse namely an architected event model, a range model, an iterator, CSS
to node mapping, and a tree structure.
The new AccessibleObjectModel needs to be designed such that each
document node can be constructed by a mapping of XML semantic schemas
into each individual node.
Position information is not important for all assistive technologies if
we can provide accessible action sets for specific node types as
specified by its schema. Screen reader technology may be interested in
position information when it needs to determine where line breaks in
text occur or if they need to map objects to an OSM representation. The
need for mapping to an OSM representation should be less important with
true object model technology. Position information is very relevant to
screen magnifiers that will use the caret or selector position to pan
the magnification point to the users point of focus. Position
information should not be stored in the core DOM because there it has no
meaning in a non-visual orientation. This again is why we need to create
a new AccessibleObjectModel that inherits from the DOM to provide this
feature.
Keyboard bindings could be specified for specify node types based on the
schema. Although it would be up to the authoring tool and/or browser to
define these, we will need to establish a set of key binding for
specific node types that will not conflict with different operating
system specific key bindings for obvious reasons. This is something we
had to deal with for Java.
On the issue of using standard rather than custom controls when
designing user agents, the accessible object model should define an
interface that can be applied to application object model components.
The interface will provide the necessary information to access a
particular object model component based on the specified XML schema. On
some systems like UNIX with the X Windows System, these components may
be part of someone's widget set. Allowing the browser (one user agent
example) to map the proper semantic information to that component or
node allows the user agent to use whatever widget set they like and
still be accessible. Bottom line: The restriction to use standard
controls is an unnecessary restriction if we design the Accessibility
interface properly.
Regarding the issue of "Allowing the user to turn on and off support for
spawned windows" We need to develop and AccessibleApplication interface
that can be implemented by a user agent so that an assistive technology
can be notified when a spawned document has focus. This is again
separate from the DOM.
Rich
Rich Schwerdtfeger
Lead Architect, IBM Special Needs Systems
EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm
"Two roads diverged in a wood, and I -
I took the one less traveled by, and that has made all the difference.",
Frost
just wanted to add a few thoughts....
The things Rich is referring to here, are proposed in DOM Level 2. I'd prefer
to not call this new object model anything using the word "accessible", since
I believe the potential scope is much larger (e.g., automated testing tools,
validation tools, search engines, etc.).
If individual nodes maps to individual elements (??), then we may also need
a grouping and un-grouping semantic mapping as well.
I think these would also be in the ??? object model that extends DOM,
not DOM itself?
I just want to remind the participants of today UA telecon that we want to
focus on what can be put in the current UA guidelines. I want to support
the efforts of the PF group in guiding future technologies to be more
accessible, but want to keep our feet on the ground for the current UA
guidelines.
I think by having general checkpoints that state the access problem and a
dynamic techniques document we can have a living document that can
incorporate new features as they are define.
The goal of todays meeting is resolving what the those checkpoints are and
what the techniques document can say to help developers right now.
Jon
prefer
Jon Gunderson, Ph.D., ATP
Coordinator of Assistive Communication and Information Technology
Division of Rehabilitation - Education Services
University of Illinois at Urbana/Champaign
1207 S. Oak Street
Champaign, IL 61820
Voice: 217-244-5870
E-mail: jongund@uiuc.edu
WWW:http://www.staff.uiuc.edu/~jongund
Rich's email marked RS:, Mark's thoughts MN: mine CMcCN:
just wanted to add a few thoughts....
MN:
The things Rich is referring to here, are proposed in DOM Level 2. I'd prefer
to not call this new object model anything using the word "accessible", since
I believe the potential scope is much larger (e.g., automated testing tools,
validation tools, search engines, etc.).
CMcCN:
I agree with Mark here.
RS:
MN:
If individual nodes maps to individual elements (??), then we may also need
a grouping and un-grouping semantic mapping as well.
CMcCN:
It would be helpful to have a method for selecting a range, across element
boundaries. I believe this is provided by DOM 2.
RS:
CMN:
Position information is only relevant to a particular architecture which
is intrinsically visual. Within that architecture it is important, as Rich
explains, but I am not sure that it is of particular relevance to the DOM,
which should not presuppose a particular rendering architecture.
RS:
MN:
I think these would also be in the ??? object model that extends DOM,
not DOM itself?
CMcCN:
If the standard control mechanism for a system is to provide a particular
API (as with accessible Java) then the requirement has been met to a large
degree. (there is still the issue of consistency, but that is usability
rather than being inaccessible to assistive technology.)
RS:
the
to
we
The object model that extends the DOM should contain UI component
informaiton such as keyboard bindings, etc. This would include position
information. I agree with CMN that position information does not belong int
he DOM.
Rich
Rich Schwerdtfeger
Lead Architect, IBM Special Needs Systems
EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm
"Two roads diverged in a wood, and I -
I took the one less traveled by, and that has made all the difference.",
Frost
Charles McCathieNevile charles@w3.org on 04/02/99 01:24:30 PM
Subject: Re: Issues
Rich's email marked RS:, Mark's thoughts MN: mine CMcCN:
just wanted to add a few thoughts....
some
can
CSS
MN:
The things Rich is referring to here, are proposed in DOM Level 2. I'd
prefer
to not call this new object model anything using the word "accessible",
since
I believe the potential scope is much larger (e.g., automated testing
tools,
validation tools, search engines, etc.).
CMcCN:
I agree with Mark here.
RS:
MN:
If individual nodes maps to individual elements (??), then we may also
need
a grouping and un-grouping semantic mapping as well.
CMcCN:
It would be helpful to have a method for selecting a range, across element
boundaries. I believe this is provided by DOM 2.
RS:
if
in
The
with
to
no
create
this
CMN:
Position information is only relevant to a particular architecture which
is intrinsically visual. Within that architecture it is important, as Rich
explains, but I am not sure that it is of particular relevance to the DOM,
which should not presuppose a particular rendering architecture.
RS:
the
to
we
MN:
I think these would also be in the ??? object model that extends DOM,
not DOM itself?
On
may
CMcCN:
If the standard control mechanism for a system is to provide a particular
API (as with accessible Java) then the requirement has been met to a large
degree. (there is still the issue of consistency, but that is usability
rather than being inaccessible to assistive technology.)
RS:
for
interface
technology
Rich, by this do you mean the interface provided to the DOM should be an
extended one, which also includes platform-specific information (keyboard
bindings, volume controls, etc etc?
Charles
the
to
we
The object model that extends the DOM should contain UI component
informaiton such as keyboard bindings, etc. This would include position
information. I agree with CMN that position information does not belong int
he DOM.
Rich
Rich Schwerdtfeger
Lead Architect, IBM Special Needs Systems
EMail/web: schwer@us.ibm.com http://www.austin.ibm.com/sns/rich.htm
"Two roads diverged in a wood, and I -
I took the one less traveled by, and that has made all the difference.",
Frost
Charles McCathieNevile charles@w3.org on 04/02/99 01:24:30 PM
Subject: Re: Issues
Rich's email marked RS:, Mark's thoughts MN: mine CMcCN:
just wanted to add a few thoughts....
some
can
CSS
MN:
The things Rich is referring to here, are proposed in DOM Level 2. I'd
prefer
to not call this new object model anything using the word "accessible",
since
I believe the potential scope is much larger (e.g., automated testing
tools,
validation tools, search engines, etc.).
CMcCN:
I agree with Mark here.
RS:
MN:
If individual nodes maps to individual elements (??), then we may also
need
a grouping and un-grouping semantic mapping as well.
CMcCN:
It would be helpful to have a method for selecting a range, across element
boundaries. I believe this is provided by DOM 2.
RS:
if
in
The
with
to
no
create
this
CMN:
Position information is only relevant to a particular architecture which
is intrinsically visual. Within that architecture it is important, as Rich
explains, but I am not sure that it is of particular relevance to the DOM,
which should not presuppose a particular rendering architecture.
RS:
the
to
we
MN:
I think these would also be in the ??? object model that extends DOM,
not DOM itself?
On
may
CMcCN:
If the standard control mechanism for a system is to provide a particular
API (as with accessible Java) then the requirement has been met to a large
degree. (there is still the issue of consistency, but that is usability
rather than being inaccessible to assistive technology.)
RS:
for
interface
technology
--Charles McCathieNevile mailto:charles@w3.org
W3C Web Accessibility Initiative http://www.w3.org/WAI
MIT/LCS - 545 Technology sq., Cambridge MA, 02139, USA
Response in JRG:
JRG: I though DOM already included some type of position information for
dynamic positioning of elements. Is this not a part of the porposed DOM?
Jon
Jon Gunderson, Ph.D., ATP
Coordinator of Assistive Communication and Information Technology
Division of Rehabilitation - Education Services
University of Illinois at Urbana/Champaign
1207 S. Oak Street
Champaign, IL 61820
Voice: 217-244-5870
E-mail: jongund@uiuc.edu
WWW:http://www.staff.uiuc.edu/~jongund
hi Jon
Still reading about W3C DOM/DOM2, so.....
Position information in terms of "relationship" (e.g., sibling, parent,
etc.), yes.
Position information in terms of X Y coordinates, no. However, having said
that, in the
DOM 2 draft 19990304, the UIEvent interface has 4 attributes, one for screenX,
one for screenY, one for clientX, and finlly one for clientY., which
according to their
definitions refer to the x/y coordinate at which the event occurred in
relative to the
origin of the screen system, and likewise in relative to the DOM's
implementation.?
Also, many of the UI events (e.g., click, mouseup, etc.) have these
attributes as context
information.
I'm guessing you are asking about what an element's position is, in a
visual format, I think that would be its screen location, which is why I
said "no" above.
However, I believe you can figure this out from DOM2 support for
stylesheets, perhaps
someone can help here?
This is not necessarily the case for current browser implemantations of a
"DOM".
For example, in the headerlist power toy clone script I developed, after I've
found the string of text I was searching for, and verified that it is indeed a
header, I can obtain the Y postion of this string, in relationship to the
current
scrolled (or not scrolled) "dynamic" position of the page, and then adjust the
page accordingly such that if possible (if enough page still exists to
scroll it)
I can place the found header string at the top of view .
mark
