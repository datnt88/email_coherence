I have a few comments inlined below:
As a general remark though: we should try to keep in line with the various
issues that have been raised, on the one hand, but also work together in
order to achieve our common goal, on the other.
The more pressing question is if we decide to move along by keeping the two
schemas separate, or if we try to use functionality from both. The DOM WG
has expressed some things it would like to see in the DOM TS ML as given in
http://lists.w3.org/Archives/Public/www-dom-ts/2001Apr/0054.html .
Best,
/Dimitris
-----Ursprungligt meddelande-----
Fr?n: Curt Arnold [mailto:carnold@houston.rr.com]
Skickat: den 18 maj 2001 08:35
Till: xmlconf-developer@lists.sourceforge.net; www-dom-ts@w3.org
?mne: [Xmlconf-developer] Updated domtest.xsd and simple attr.xml
I've updated my alternative XML Schema for DOM tests and started writing a
few experimental test in preparation of attempting to convert my
domunit/junit code to XML.
*** There are some major differences between your schema and the one used by
NIST and proposed to the mailing list participants as the basis for the DOM
TSML 1.0. I think we can go in two directions: we either set up an agenda of
action items to bring the two closer together, or we decide which one will
form the basis for the DOM TSML.
One remark is that the DOM TSML should be simple enough to develop against,
as well as understandable by most people in the community. I have a feeling
that most people would not be able to use your schema to its fullest extent
(given that it's quite advanced).
Another thing we said when we began writing the DOM TS ML was that it should
be easily portable to the XUnite framework, in order to let developers use
any framework they wanted. I haven't had a chance to assert whether this is
the case in the schema you propose.
You can see a very simple Attr test (parentNodeNull) at
r.xml?rev=1.2
http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/domunit/DOM1/NIST/at
tr.xml?rev=1.2&amp;content-type=text/vnd.viewcvs-markup
&amp;content-type=text/vnd.viewcvs-markup
The updated schema is
ev=1.2
http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/domunit/domtest.xsd?
rev=1.2&amp;content-type=text/vnd.viewcvs-markup
&amp;content-type=text/vnd.viewcvs-markup
The files comply with the Oct 2000 Schema working draft since that currently
has the best software support.
*** In general, I think it's a better idea to comply with the spec, now that
it's been published as a recommendation. Until applications start supporting
that, I propose to use the only schema language (nearly totally supported),
namely DTD. Do you have a DTD verison of your schema we could look at?
I think it now has enough (or close to enough) constructs to handle the
NIST DOM tests and has elements for all of the DOM 2 Core.
On the test metadata, my personal leaning would be to use the Dublin Core
Proposed Recommendation "An XML Encoding of Simple Dublin Core Metadata" (
http://dublincore.org/documents/2001/04/11/dcmes-xml/ ) This would keep
the metadata in a distinct file from the test in a format that was
compatible with RDF and provides both a DTD and an attempt at an XML schema
for the metadata. One of the advantages of keeping the metadata distinct
from the test definitions is that it is then easy to add additional
description, notes, translations, without modifying the test definitions.
On this point I wonder if it is indeed that difficult to add new information
to the test if it were to contain non-test info in the single file: I can
imagine an easy interface that allows you to change author details without
touching the test details, even though they exist in a single file.
I think it's good to keep the test cases and the metadata (what's tested,
is it a positive test, negative, xref to spec, etc) distinct. Among other
things, the test cases shouldn't really change when interpretations get
updated ... and since DOM hasn't really had a test suite before, then
it seems likely to me that interpretations will be in flux for some time.
- Dave
I have put the following up on my personal home page temporarily, eventually
these will be hosted on xmlconf.sourceforge.net
(same as the last post)
generated DTD from previous schema
generated documentation from schema with graphics
simple test
schemas separate,
or if we try to use functionality from both. The DOM WG has expressed some
things it would like  to see in the DOM TS ML as given in
as well as  understandable by most people in the community. I have a feeling
that most people would not be  able to use your schema to its fullest extent
(given that it's quite advanced).
The "complexity" has to be somewhere, by putting it in the schema or DTD, it
enables schema or DTD-aware editors to guide the user in building the test.
If you just used generic CALL elements, then the user is going to have to
guess the supported method names and find their errors when they try to
compile their Java code after doing an XSLT transform.
should be easily  portable to the XUnite framework, in order to let
developers use any framework they wanted. I  haven't had a chance to assert
whether this is the case in the schema you propose.
I designed the schema based on my experience with migrating the NIST DOM
tests to the JUnit, JSUnit, and CppUnit frameworks. I definitely believe
that it is much more friendly to generating xUnit code than anything else
proposed.
that it's been published as a  recommendation. Until applications start
supporting that, I propose to use the only schema language  (nearly totally
supported), namely DTD. Do you have a DTD verison of your schema we could
Link to a generated DTD appears above. Using only a DTD aware editor will
not check, for instance, that the index argument to the NodeList.item method
is either an integer literal or a variable reference, but it will enforce
all the structural constraints.
information to the test if it were to  contain non-test info in the single
file: I can imagine an easy interface that allows you to change  author
details without touching the test details, even though they exist in a
single file.
It is definitely possible to place RDF and Dublin Core metadata within the
test element. For example, SVG defines a metadata element for exactly
this purpose. However, you can't keep all the evolving metadata about the
test within the test definition and since you can't keep all of it there,
why keep any of it there. It would definitely be fairly straight forward to
write XSLT that ensures that all tests defined in the test definition have
at least minimal metadata in the base RDF file.
When I first looked at defining tests in XML, I thought that schemas were
probably the way to go.
I have a very limited knowledge of schemas, so I was reluctant to go down
that path.
Let me say upfront that I believe that what is important here is the ability
to automatically
generate tests for a specific binding. Both approaches will get us to that
end goal -- assuming
we can take the schema approach and develop an appropriate stylesheet for
it. I don't mind
Curt's approach of using DOM structures as names, and automatically
generated documentation
is always a plus!
I do have a couple of questions.
1) For the Document interface, it appeared that the following were missing:
doctype
documentElement
createCDATASection
createComment
createDocumentFragment
createElement
createProcessingInstruction
createTextNode
getElementById (maybe a typo -- I saw getElementsById)
implementation (should this be Document.implementation)?
I just looked at the Document interface -- there may very well be others.
Is this schema
possibly still in process?
2) What are you using as names for the methods and attributes -- the IDL
names, the java
binding, or something else? This becomes important particularly for the
attributes -- they
are defined as get/set methods in java, and as attributes in ECMAScript.
Differences are
either handled here, or will have to be handled in the transformation, and
was the primary
reason for using IDL names as entity references in the other approach.
Doing so with a
conditional include allowed for the automatic substitution of
binding-specific names. I don't
mind doing it another way -- do you have something else in mind?
3) Would it be possible to make use of inheritance for your
attribute/method declarations?
I would think that this would be an advantage that schemas could provide
over a DTD
approach? I don't currently see attributes and methods defined for
inherited interfaces. For
example, Text should inherit everything from CharacterData, which in turn
should inherit
everything from Node.
I'm not sure if I have mentioned that we have added about 200 tests to the
the collection
of NIST tests and I expect that about another 200 will have to be written to
fully cover
DOM Level 2 -- we have covered namespaces, errata, and exceptions, but have
not
fully accounted for inherited attributes/methods. In a couple of days, I
should be finished
with a proposed list of tests for all interfaces, with a mapping of the NIST
tests. We
can then identify any holes and will be ready to write additional tests. I
would like to
use the TSML for this purpose.
--Mary
Mary Brady
NIST, Web Technologies
mbrady@nist.gov
eventually
tests
very
two
or if we try to use functionality from both. The DOM WG has expressed
some
against,
feeling
extent
it
test.
to
assert
totally
method
to
missing:
doctype and documentElement are Document.getDoctype and
Document.getDocumentElement .
The others are in the schema documentation on
getElementById
A test has to start by either loading an XML file using load or accessing
the DOMImplementation under test with the implementation tag (in case you
are building a document dynamically) both of these would get transformed to
an code specific for the parser under test.
Definitely very much a work in process, I initially posted it only after a
few hours of work to let you know I was thinking.
I am using the Java binding names since there are distinct content models
for the accessors and mutators. I am aware that the IDL and ECMAScript
binding are expressed in a property notation. The fact that
Node.getNodeValue is a property accessor is maintained in the schema (its
type is DOMPropertyAccessor) and that information could be used in the XSLT
transform that generates the ECMAScript tests.
I don't believe that it is necessary or beneficial to replicate elements for
the inherited methods and
properties.
would get translated to:
value = ((Node) node).getNodeValue(); //Java
or
value = node.nodeValue; //ECMAScript
Whether Node, CharacterData, etc appeared left of the "." would only add an
"instanceOf" check that could already be handled with a:
(Note: var probably should be obj and a distinct assertInstanceOf would
probably be useful)
to
have
NIST
I
I've been doing some exploratory work on DOM 2 Events testing and have
encoded about 20 tests in the domunit CVS and have been working on
corresponding language elements to support that type of testing.
Here is basically what I was hoping to do:
a) Make a domunit release for Java (now with support for JAXP, Batik and
Oracle and additional "Unofficial" tests).
b) Relay my interpretations of results to Oracle, Batik and Crimson teams.
c) Make some additional refinements to the schema. The most significant
would be the ability to nest code within assertions that would only execute
if the assertion was true. This eliminates either asserting that an object
was not null and then executing a method on it and throwing an exception or
having to code an identify if immediately after the assertion.
NamedNodeMap.getNamedItem obj="attributes" var="domestic"
name='"domestic"'/
d) Recode the domunit source to the schema and make any necessary
refinements or corrections. I had originally thought that this should be
automated so you could round trip, however with schema validation of the
test definition it shouldn't be that bad to develop in XML. So I'll
probably do this as a trial and error conversion using a programming editor.
e) Iterate on a XSLT sheet targeting JUnit
f) Regenerate domunit from the XML source using (e)
g) Modify e for ECMAScript and C++
I'm going to try to get (a-b) done today, (c-e) over the next few days. As
I put things in the xmlconf CVS or make releases, I'll announce it on
xmlconf-developer but won't on www-dom-ts.
