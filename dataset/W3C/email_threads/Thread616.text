Greetings.
I was using tidy to process an XML file that used some custom entities.
Since tidy wasn't aware of those entities, it refused to generate a
tidied file. I did a little rooting around and modified the code just
enough to produce the desired effect. There are some TODO comments in
the code to point out where it is suboptimal. Nonetheless, I'm posting
it here in case anyone else wants to make use of it or in case someone
wants to tidy (ahem) it up for inclusion in the next release.
Enjoy.
-- Gregor N. Purdy
gregor@focusresearch.com
diff -Naur tidy4aug00/Overview.html tidy4aug00-gnp/Overview.html
--- tidy4aug00/Overview.htmlFri Aug 4 12:21:05 2000
+++ tidy4aug00-gnp/Overview.htmlTue Nov 28 15:11:34 2000
@@ -422,6 +422,13 @@
this feature is to allow Tidy to be applied to Cold Fusion
files. /p
+ p You can also teach Tidy about new entities by declaring them
+in the configuration file, the syntax is: /p
+ pre
+ new-entities: em entity1, entity2, entity3 /em
+ /pre
p class="c7" I am working on ways to make it easy to customize
the permitted document syntax using a
href="http://www.w3.org/People/Raggett/dtdgen/Docs/" assertion
@@ -1053,6 +1060,14 @@
"slide1.html", "slide2.html" etc. The default is
+ dt new-entities: em entity1, entity2, entity3 /em /dt
+ dd Use this to declare new entities. The option takes a space
+or comma separated list of entity names. There is no mechanism
+for specifying the values of the entities. Note that tidy still
+does not read custom entities from any internal document subset.
+ /dd
dd Use this to declare new empty inline tags. The option takes a
@@ -1115,6 +1130,7 @@
mprescripts, mtable, mtr, mtd, mth
new-blocklevel-tags: cfoutput, cfquery
new-empty-tags: cfelse
+new-entities: dollar
diff -Naur tidy4aug00/config.c tidy4aug00-gnp/config.c
--- tidy4aug00/config.cFri Aug 4 12:21:05 2000
+++ tidy4aug00-gnp/config.cTue Nov 28 15:00:51 2000
@@ -104,6 +104,7 @@
static char *inline_tags;
static char *block_tags;
static char *empty_tags;
+static char *entities;
static char *pre_tags;
@@ -182,6 +183,7 @@
{"new-blocklevel-tags", {(int *)&amp;block_tags}, ParseTagNames},
{"new-empty-tags", {(int *)&amp;empty_tags}, ParseTagNames},
{"new-pre-tags", {(int *)&amp;pre_tags}, ParseTagNames},
+ {"new-entities", {(int *)&amp;entities}, ParseTagNames}, /* TODO: Really should get name+value */
{"char-encoding", {(int *)&amp;CharEncoding}, ParseCharEncoding},
{"doctype", {(int *)&amp;doctype_str}, ParseDocType},
{"fix-backslash", {(int *)&amp;FixBackslash}, ParseBool},
@@ -663,6 +665,8 @@
DefineBlockTag(buf);
else if (location.string == &amp;empty_tags)
DefineEmptyTag(buf);
+ else if (location.string == &amp;entities)
+ DefineEntity(buf, ""); /* TODO: Really should get its value and pass it in */
else if (location.string == &amp;pre_tags)
DefinePreTag(buf);
diff -Naur tidy4aug00/entities.c tidy4aug00-gnp/entities.c
--- tidy4aug00/entities.cFri Aug 4 12:21:05 2000
+++ tidy4aug00-gnp/entities.cTue Nov 28 15:01:43 2000
@@ -357,6 +357,37 @@
install(ep- name, ep- code);
+void DefineEntity(char * name, char * value)
+int code;
+int l;
+l = strlen(value);
+if (l == 0)
+code = ' '; /* TODO: This is a bad hack to allow entities to be defined without values */
+else if (l == 1)
+code = value[0];
+else
+/* TODO: We really should handle general entities */
+if (value[0] != '&amp;') return;
+/* TODO: We really should handle general entities */
+if (value[1] != '#') return;
+code = EntityCode(value);
+if (code == 0) return;
+install(name, code);
void FreeEntities(void)
struct nlist *prev, *next;
diff -Naur tidy4aug00/release-notes.html tidy4aug00-gnp/release-notes.html
--- tidy4aug00/release-notes.htmlFri Aug 4 12:21:05 2000
+++ tidy4aug00-gnp/release-notes.htmlTue Nov 28 15:07:27 2000
@@ -73,6 +73,13 @@
current workload means that I don't get much time left to work on
HTML Tidy. /p
+ h2 November 2000 /h2
+ p Gregor N. Purdy gregor@focusresearch.com&amp;gt made a quick
+hack to permit the definition of custom entities in the config
+file via the new-entities option. This is handy for tidying
+XML files. /p
p Ann Navarro comments that the "appears to" message is
I'm afraid I have no idea how this patch works (and would appreciate some
help on this), but think that it may be useful to me as I have come across a
similar problem with custom tags (re: "Problem with custom HTML TAGS using
HTML TIDY", a message I sent to the list previously).
The problem that I was having was that although I'd included my tags as
in-line or block-level (in the config.txt file) to get tidy to recognise
them, tidy would perform some additional processing above what I would have
wanted that in the block-level case was to add unwanted formatting p and
br tags to the document. - in the in-line case tidy would split font ,
b , u etc.. tags around my custom tags.
What I'd ideally like is to be able to turn this additional formatting off
for the custom tags.
Behalf Of Gregor N. Purdy
Greetings.
I was using tidy to process an XML file that used some custom entities.
Since tidy wasn't aware of those entities, it refused to generate a
tidied file. I did a little rooting around and modified the code just
enough to produce the desired effect. There are some TODO comments in
the code to point out where it is suboptimal. Nonetheless, I'm posting
it here in case anyone else wants to make use of it or in case someone
wants to tidy (ahem) it up for inclusion in the next release.
Enjoy.
-- Gregor N. Purdy
gregor@focusresearch.com
Dominic --
[[cc-ed back to html-tidy@w3.org in case anyone else had a similar
question.
I don't follow the list, so contacting me directly is the right way to
follow up on this patch if anyone else has questions or comments.]]
The patch I submitted implements rudimentary support for custom
*entities*,
not for custom *elements*. This is accomplished by hooking into the code
path that executes to add the standard list of HTML entities to a lookup
table. Existing initialization code inserts entries into this table
based
on a list of known tags that is compiled into tidy. I just wrote enough
code to allow you to add your own list of entity names in the
configuration
file. The code takes the list of custom entities and passes them each to
a function that inserts them in the same table as the standard ones.
So, if you have an XML file that uses entities like &amp;larrhk; or &amp;dollar;
or whatever, you can tell tidy that these entities are OK by adding a
line
like this to your config file:
new-entities: larrhk dollar
I haven't played with this aspect of tidy enough to provide any guidance
with this (sorry)...
Regards,
-- Gregor
Here's a cleaned up version. (It doesn't expand custom entities
because I feel that's beyond Tidy's scope.)
--- tidy4aug00.orig/Overview.htmlFri Aug 4 18:21:05 2000
+++ tidy4aug00/Overview.htmlSat Dec 23 15:07:13 2000
@@ -422,6 +422,13 @@
this feature is to allow Tidy to be applied to Cold Fusion
files. /p
+ p You can also teach Tidy about new entities by declaring them
+in the configuration file, the syntax is: /p
+ pre
+ new-entities: em entity1, entity2, entity3 /em
+ /pre
p class="c7" I am working on ways to make it easy to customize
the permitted document syntax using a
href="http://www.w3.org/People/Raggett/dtdgen/Docs/" assertion
@@ -1088,6 +1095,14 @@
CDATA elements (similar to script). /dd
+ dt new-entities: em entity1, entity2, entity3 /em /dt
+ dd Use this to declare new entities. The option takes a space
+or comma separated list of entity names. There is no mechanism
+for specifying the values of the entities. Note that tidy still
+does not read custom entities from any internal document subset.
+ /dd
@@ -1115,6 +1130,7 @@
mprescripts, mtable, mtr, mtd, mth
new-blocklevel-tags: cfoutput, cfquery
new-empty-tags: cfelse
+new-entities: disclaimer
--- tidy4aug00.orig/config.cFri Aug 4 18:21:05 2000
+++ tidy4aug00/config.cSat Dec 23 15:07:13 2000
@@ -105,6 +105,7 @@
static char *block_tags;
static char *empty_tags;
static char *pre_tags;
+static char *entities;
typedef struct _plist PList;
@@ -182,6 +183,7 @@
{"new-blocklevel-tags", {(int *)&amp;block_tags}, ParseTagNames},
{"new-empty-tags", {(int *)&amp;empty_tags}, ParseTagNames},
{"new-pre-tags", {(int *)&amp;pre_tags}, ParseTagNames},
+ {"new-entities", {(int *)&amp;entities}, ParseTagNames},
{"char-encoding", {(int *)&amp;CharEncoding}, ParseCharEncoding},
{"doctype", {(int *)&amp;doctype_str}, ParseDocType},
{"fix-backslash", {(int *)&amp;FixBackslash}, ParseBool},
@@ -665,6 +667,8 @@
DefineEmptyTag(buf);
else if (location.string == &amp;pre_tags)
DefinePreTag(buf);
+ else if (location.string == &amp;entities)
+ DefineEntity(buf);
i = 0;
--- tidy4aug00.orig/entities.cFri Aug 4 18:21:05 2000
+++ tidy4aug00/entities.cSat Dec 23 15:07:13 2000
@@ -349,6 +349,11 @@
return 0; /* zero signifies unknown entity name */
+void DefineEntity(char *name)
+ install(name, '&amp;');
void InitEntities(void)
struct entity *ep;
--- tidy4aug00.orig/html.hFri Aug 4 18:21:05 2000
+++ tidy4aug00/html.hSat Dec 23 15:07:13 2000
@@ -501,6 +501,8 @@
Bool IsWord2000(Node *root);
/* entities.c */
+void DefineEntity(char *name);
void InitEntities(void);
void FreeEntities(void);
uint EntityCode(char *name);
--- tidy4aug00.orig/lexer.cFri Aug 4 18:21:05 2000
+++ tidy4aug00/lexer.cSat Dec 23 15:07:13 2000
@@ -296,7 +296,7 @@
uint start, map;
Bool first = yes, semicolon = no;
- int c, ch, startcol;
+ int c, ch, startcol, i;
start = lexer- lexsize - 1; /* to start at "&amp;" */
startcol = lexer- in- curcol - 1;
@@ -352,6 +352,15 @@
else /* naked &amp; */
ReportEntityError(lexer, UNESCAPED_AMPERSAND, lexer- lexbuf+start, ch);
+ if (QuoteAmpersand)
+ for (i = 0; i  4; ++i)
+ AddCharToLexer(lexer, '\0');
+ for (i = lexer- lexsize - 1; i  start + 4; --i)
+ lexer- lexbuf[i] = lexer- lexbuf[i - 4];
+ wstrncpy (lexer- lexbuf + start + 1, "amp;", 4);
else
@@ -363,19 +372,16 @@
ReportEntityError(lexer, MISSING_SEMICOLON, lexer- lexbuf+start, c);
- lexer- lexsize = start;
- if (ch == 160 &amp;&amp; (mode &amp; Preformatted))
- ch = ' ';
+ if (ch == '&amp;')
+ AddCharToLexer(lexer, ';');
+ else
+ lexer- lexsize = start;
- AddCharToLexer(lexer, ch);
+ if (ch == 160 &amp;&amp; (mode &amp; Preformatted))
+ ch = ' ';
- if (ch == '&amp;' &amp;&amp; !QuoteAmpersand)
- AddCharToLexer(lexer, 'a');
- AddCharToLexer(lexer, 'm');
- AddCharToLexer(lexer, 'p');
- AddCharToLexer(lexer, ';');
+ AddCharToLexer(lexer, ch);
--- tidy4aug00.orig/pprint.cFri Aug 4 18:21:05 2000
+++ tidy4aug00/pprint.cSat Dec 23 15:07:13 2000
@@ -362,21 +362,6 @@
return;
- naked '&amp;' chars can be left alone or
- quoted as &amp;amp; The latter is required
- for XML where naked '&amp;' are illegal.
- if (c == '&amp;' &amp;&amp; QuoteAmpersand)
- AddC('&amp;', linelen++);
- AddC('a', linelen++);
- AddC('m', linelen++);
- AddC('p', linelen++);
- AddC(';', linelen++);
- return;
if (c == '"' &amp;&amp; QuoteMarks)
AddC('&amp;', linelen++);
--- tidy4aug00.orig/release-notes.htmlFri Aug 4 18:21:05 2000
+++ tidy4aug00/release-notes.htmlSat Dec 23 15:07:13 2000
@@ -73,6 +73,14 @@
current workload means that I don't get much time left to work on
HTML Tidy. /p
+ h2 December 2000 /h2
+ p Gregor N. Purdy gregor@focusresearch.com&amp;gt made a quick
+hack to permit the definition of custom entities in the config
+file via the new-entities option, and Matej Vela
+vela@debian.org cleaned it up. This is handy for tidying
+XML files. /p
p Ann Navarro comments that the "appears to" message is
