The August 7 Tidy does the following
desc += " /td /table ";
with the warning
line 7 column 16 - Warning: ' ' + '/' + letter not allowed here
and writes out ie
desc += " \/td \/table ";
Because of course it does not detect eg the td , formally its correct,
but in practice of course the td is written out elsewhere.
Can one suppress this behaviour? Is it in fact correct?
Dept. Chemistry, Imperial College, London, SW7 2AY, UK.
The relevant section in the HTML specification (4.01) is at
http://www.w3.org/TR/html4/types.html#type-cdata :
Although the STYLE and SCRIPT elements use CDATA for their data model, for
these elements, CDATA must be handled differently by user agents. Markup and
entities must be treated as raw text and passed to the application as is. The
first occurrence of the character sequence " /" (end-tag open delimiter) is
treated as terminating the end of the element's content. In valid documents,
this would be the end tag for the element.
It is the sequence / (which some programs will treat as the end of the
element, regardless of whether it's actually the right name or not) that
is the problem here -- not specifically an end tag apparently without
a matching start tag.
Tidy's behaviour is therefore correct for HTML4.01 documents. (Though I
expect XHTML is stricter, and requires CDATA element content to use /
instead.)
Daniel Biddle deltab@osian.net
Although the STYLE and SCRIPT elements use CDATA for their data model, for
these elements, CDATA must be handled differently by user agents. Markup and
entities must be treated as raw text and passed to the application as is. The
first occurrence of the character sequence " /" (end-tag open delimiter) is
treated as terminating the end of the element's content. In valid documents,
this would be the end tag for the element.
From the HTML4 DTD:
There are two important things to know about elements with CDATA content:
(1) They are *supposed* to be terminated by *any* end-tag.
(Not as useful as it could have been, as this example shows, but
that _is_ what the standard says.) If you have
then the script *must* be taken as ending just before /foo ,
and then the parser will discover that /foo isn't actually
allowed them.
(2) Markup and entities *cannot* occur inside them. The point of CDATA
is to have  (other than /) and &amp; occurring as plain data with no
special reading at all.
The solution for Javascript is easy. Any time you would have had
e.g. " /td ", write " " + "/td " instead.
Tidy's behaviour is therefore correct for HTML4.01 documents. (Though I
expect XHTML is stricter, and requires CDATA element content to use /
instead.)
To start with,  inside an element with CDATA content means
ampersand, leower case l, lower case t, semicolon. It never ever
EVER means less than.
XHTML is based on XML. XML has no CDATA element content models.
XML has CDATA sections instead.
Sounds like we need a "tidy" for JavaScripts, but the bigger problem seems insuperable.
Thus ensuring that dynamic HTML is written by JavaScript
in an XHTML consistent manner
is one thing, ensuring that the resulting HTML is itself XHTML compliant
is a far worse problem..
The use of JavaScript seems to be increasing, but boy is it going to cause
problems in the future!
Does anyone know of any tools that can even begin to look
at the above problems of handling JavaScripts? Likewise, are
there any tools for validating the stylesheet components?
Dept. Chemistry, Imperial College, London, SW7 2AY, UK.
I use JTidy with parserDOM and I have the following problem :
the HTML source contains entities like &amp;#146; that refer to a Windows char
set and when a get the string from the DOM that Tidy build, I get a ?
instead of the character.
In fact I understand that Tidy does not retreive the good char, but in this
case it should not replace it by ? (which cannot be interpreted later).
So is there a configuration that tells Tidy not to replace undefined
entities by ?
Denis Queffeulou
Wokup! - Product Team
I'd be very interested in a "JavaScript Tidy" myself...
Regarding StyleSheets, there is the W3C CSS Validator
[http://jigsaw.w3.org/css-validator/] (especially useful is the text area
version) and BradBury's TopStyle [http://www.bradsoft.com/topstyle/], a
commercial StyleSheet editor that allows validation of your stylesheets
against various style definitions and also does perform pretty-printing for
you.
Does anybody know whether a comparable tool exists for JavaScript?
Sebastian Lange
Maybe the first chat site that validates as HTML
4.0 even though user input may contain HTML codes.
Courtesy to Dave Raggett's HTML Tidy:
Tidy your documents ONLINE:
From: "Denis Queffeulou" denis.queffeulou@wokup.com
Is it a literal ? that is being inserted? I know that with the fonts I
use for display, those non-standard characters display as ? . Just curious
whether you've checked this aspect of things.
Never apply a Star Trek solution to a Babylon 5 problem.
Larry W. Virden mailto:lvirden@cas.org URL: http://www.purl.org/NET/lvirden/
Even if explicitly stated to the contrary, nothing in this posting should
be construed as representing my employer's opinions.
- -
For XHTML, I am looking into ways to hide a CDATA marked section
in the script element, e.g.
// ![CDATA[
... some javascript ...
//]]
A similar approach is applicable to CSS.
This solves the pressing problem of making the documents wellformed,
but leaves open the Turing-complete issue of document.write and
direct use of the DOM to generate markup programmatically. The HTML
working group wisely ducked the issue, leaving it up to authors to
deal with!
Of course the Web is increasingly about scripting rather than
static documents. XML Schema doesn't even begin to tackle the
problem of documents with dynamic constraints. However, this
is something that work on XForms is having to address!
Regards,
-- Dave Raggett dsr@w3.org http://www.w3.org/People/Raggett
World Wide Web Consortium (on assignment from HP Labs)
// ![CDATA[
... some javascript ...
//]]
The javascript had better not contain a[a[i]] 0 !
XML (and SGML before it) badly needs a way to specialise the
end of section mark, e.g.,
I suppose if this style forced Javascript programmers to put spaces
around comparison operators it would strike a blow for readability...
