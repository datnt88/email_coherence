Hi,
After reading through sections 3 &amp; 4 &amp; 5 (with a group of other MERANT
staff) here is a list
of issues/questions (some of these issues are editorial and simply need
clarification
in the spec, others are real issues/questions).
[Editorial]
In the specification some of the sections eg, 10.1,10.2 have no white
space after the
section number, others (eg section 9.7,1.6 do have a single space). Some
sections, eg 13.10
are followed by multiple whitespace characters. I think this is caused
by conversion from
Microsoft Word to ASCII. We should correct this before submitting the
draft.
[Editorial]
Section 3.1.4, the last sentence does not seem to make sense, it reads:
"A live property is supported by a resource if that property has the
semantics defined for
that property"
The property always has the semantics defined for that property. Now we
have the
property-o-rama we could replace that definition with something like:
"A live property is supported by a resource as specified in Appendix A
(section 23)."
[Issue/Editorial]
Section 3.9 the specification says that when a resource is automatically
checked out:
"the DAV:checked-in property MUST be empty"
Should it be empty or should it be removed, I read this statement as
meaning that
DAV:supported-live-property-set would still contain DAV:checked-in and
that a PROPFIND
on DAV:checked-in would return an empty value. I thought we were going
to remove the
DAV:checked-in property from the supported-property list when the
resource is checked-out.
The specification should be consistent with respect to which properties
are removed and which
are empty in the various states of the resource since it is crucial for
the whole "check the
properties to find out what type of resource this is" system to work.
This also applies to section 4.4 where it talks about properties being
"no longer set".
[Editorial]
Section 4.4 starts to talk about the UNCHECKOUT on a Working Resource.
I think this text
would make more sense if it was in "Working Resource Feature" section 8.
[Issue]
Section 4.3 states for CHECKIN that :
"The response for a successful request MUST include a Location header".
The only time deltav talks about the location header is for CHECKIN of a
VCR and CHECKOUT
of a working resource (section 9.3). Why is this only on those methods?
What is the use case for it
(does it simply save the client from having to PROPFIND the
DAV:checked-in?). I ask this because
the Location header is not returned by other methods that create
resources, eg UNLOCK etc for
auto-versioning clients (eg when automatically checking in).
I suggest we either remove the feature or use it consistently eg
whenever a new resource
is created return the Location header.
[Issue]
Section 5.4.1 since this report is on a collection I would like a Depth
header defined.
Again I think we should be consistent (to avoid speical-case coding).
Any method that gets properties
of a collection should take a Depth header.
[Issue]
Section 5.5 defines this mechanism where OPTIONS can be used to find a
possible location
in the namespace that is to be used for version histories. I assume
this is so a client can indicate
in a GUI if a collection is a collection of version histories or a
client could choose not to display
that part of the namespace.
It seems odd that this is only available for version histories, these
are not the only resource that have
"server-defined" URLs. For example would the clients want a OPTIONS
request to indicate where
in the namespace will be used to reference versions as opposed to
version controlled resources?
The same arguments as in section 5.5 applies to versions, they may not
be stored on the same server etc.
I also think an example of the OPTIONS method being used for this would
be good as it is quite different
from other uses of OPTIONS.
[Editorial/Issue]
Reading section 5.6 it took us quite a while to decide how to delete the
last version from a version history.
I think the answer is "you don't" you must delete the version history
itself in order to delete the last version.
Did we interpret this correctly? Do you think we should clarify this in
the spec?
I look forward to seeing some of you at the deltav sessions in London
tomorrow.
Regards,
Peter Raymond - MERANT
Hi Peter,
I'm going to skip most of the editorial points you make and comment on some
of the issues you raised:
This is a (somewhat desperate) attempt to define the supported properties.
The point is that if the property is 'live' i.e., its semantics are
enforced by the server, and those semantics are those defined by this
document, then it is a 'supported' property in the DeltaV sense.
Alternative wording is invited.
I think we have agreed that the properties should be removed (not just made
empty).
The Location: header is required in the response to a successful check-in
of a version-controlled resource to indicate which version was created by
the CHECKIN. Without the Location: header there would be a race condition
between the client checking in the resource and PROPFINDing the
DAV:checked-in property with other clients that may be checking-out the
version-controlled resource or UPDATEing it, that would loose that
information.
The Location: header is required in the response to a successful CHECKOUT
of a version to indicate to the client the server defined working resource
URL.
I ask this because the Location header is not returned
by other methods that create resources, eg UNLOCK etc
(UNLOCK will not create a resource) In general, the methods that create
resources do so at user-defined URLs (e.g., PUT, MKCOL, MOVE, etc.
Auto-versioning clients, by definition would not know about any extensions
we would define for them.
All REPORTs may take a Depth: header (see versioning-16 Sec. 3.6)
That was not the motivation for providing this information. In general,
the version histories will be maintained in server-defined URL space which
is likely to not conflict with user URLs. The mechanism was provided to
give clients the ability to locate version histories 'from scratch'. This
is required when clients remove all the version-controlled resources that
refer to (versions in a particular) version history. Since without any
version-controlled resources all that remains is the version histories and
versions, which are all at server-defined URLs, they can become 'orphaned'.
This mechanism gives clients a way to find them again.
There was no attempt to refine the description of the server storage to
this level of detail. That's not to say a particular server cannot include
such information, only that it is not required for versioning clients and
servers to interoperate.
ACK.
Yes, that is correct. Just one of the riddles for the careful reader g .
Do you think we should clarify this in the spec?
Yes.
Regards,
Tim
From: Peter Raymond [mailto:Peter.Raymond@merant.com]
After reading through sections 3 &amp; 4 &amp; 5 (with a group of other
MERANT staff) here is a list of issues/questions (some of these
issues are editorial and simply need clarification in the spec,
others are real issues/questions).
I agree with Tim's responses to the issues. I'll limit my responses
to the editorial comments he didn't cover.
In the specification some of the sections eg, 10.1,10.2 have no
white space after the section number, others (eg section 9.7,1.6 do
have a single space). Some sections, eg 13.10 are followed by
multiple whitespace characters. I think this is caused by
conversion from Microsoft Word to ASCII. We should correct this
before submitting the draft.
Yes, I will be doing this (I used to do this for the internet drafts,
but after around draft 6, decided it was not a productive use of my
time :-).
Section 4.4 starts to talk about the UNCHECKOUT on a Working
Resource. I think this text would make more sense if it was in
"Working Resource Feature" section 8.
Done.
Section 5.5 defines this mechanism where OPTIONS can be used to
find a possible location in the namespace that is to be used for
version histories.
I also think an example of the OPTIONS method being used for this
would be good as it is quite different from other uses of OPTIONS.
Done.
Reading section 5.6 it took us quite a while to decide how to
delete the last version from a version history. I think the answer
is "you don't" you must delete the version history itself in order
to delete the last version. Did we interpret this correctly? Do
you think we should clarify this in the spec?
Done.
Thanks for the review!
Cheers,
Geoff
From: Tim Ellison [mailto:Tim_Ellison@uk.ibm.com]
All REPORTs may take a Depth: header (see versioning-16 Sec. 3.6)
Yes, but I think Peter's point was that the Depth header is
missing in the example. It is in fact missing ... I've added
it. Thanks for noticing!
Cheers,
Geoff
As currently implemented, my server will allow you to delete the last
version. That version goes away and the VCR reverts to the next to last
version.
That solution works because I don't fork.
But if the consensus is to prohibit this I can prohibit it (except as a
side effect of UNCHECKOUT, though).
Ah, the wonderful ambiguities of English ... (:-).
This thread was about deleting the "last" version in the sense of
"the only version left in the version history". The result of this
would be a version history with no versions in it, which is not
allowed by the spec.
I believe you are referring to the "last" version in the sense
of "the one that was created most recently in a linear history".
That is totally legal to delete (assuming it is not the only
version left in the history), and having the VCR revert to the
immediately preceding version is very reasonable (although not
required by the protocol).
Cheers,
Geoff
As currently implemented, my server will allow you to delete the last
version. That version goes away and the VCR reverts to the next to last
version.
That solution works because I don't fork.
But if the consensus is to prohibit this I can prohibit it (except as a
side effect of UNCHECKOUT, though).
Good.
I already forbid deleting the only version, though I didn't know the
spec actually said I had too.
That didn't prevent me from having someone try to delete the only
version and log a bug because they couldn't. :)
