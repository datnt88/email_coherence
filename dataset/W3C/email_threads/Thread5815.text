All,
A few questions and comments on the Web Ontology Language (OWL) Guide
Version 1.0, http://www.w3.org/TR/2002/WD-owl-guide-20021104/, some of
which are just trivial typos.
1) The guide contains the definition of the WineYear class:
but this class does not appear to be present in the file wine.owl (or
food.owl) linked from the guide.
2) in this example OWL, the semicolon is missing from the first &amp;owl;
entity:
rdf:type rdf:resource="&amp;owlTransitiveProperty"
/
3) Botany trivia - is Cabernet Sauvignon in fact a species as stated, or
just a variety? 8-)
4) Typo - change "Is" to "It" and add "of":
In our wine ontology, hasVintageYear is functional. A wine has a unique
vintage year.
That is, a given individual Vintage can only be associated with a single
year using the
hasVintageYear property. Is is not a requirement a FunctionalProperty
that all
elements of the domain have values. See the discussion of Vintage
cardinality.
5) Unique naming
The guide says:
In the example above, we asserted identity between two distinct names. But it is just as possible for this sort of identity to be inferred. Remember the implications that can be derived from a functional property. Given that hasMaker is functional, the following is
not necessarily a conflict.
owl:Thing rdf:about="#BancroftChardonnay"
hasMaker rdf:resource="#Bancroft" /
hasMaker rdf:resource="#Beringer" /
/owl:Thing ?
It may simply mean that Bancroft = Beringer.
Well, does it? Either it is a conflict, or Bancroft = Beringer, but
which? If this is an application -dependent choice, are interoperability
problems likely if systems make different assumptions?
I think the point about explosion of properties has been made already -
with large numbers of distinct individuals, the number of
differentIndividualFrom properties required to express this becomes very
large. But presumably one could define a uniqueId property for each such
individual (inverseFunctionalProperty?) to achieve this?
6) typo -
differentIndividualFrom
This mechanism provides the opposite effect
from sameIndivdualAs.
7) typo - insert "of":
OWL provides the means to define a class via a direct enumeration its
members.
8) typo - remove apostrophe
One could distinguish four types of production
area's:
9) typo - Change "us" to "is"
vineyards are located in towns: Chateau Margaux us a vineyard in
Margaux, Avignonesi in Montepulciano
Regards,
David.
/d{def}def/u{dup}d[0 -185 u 0 300 u]concat/q 5e-3 d/m{mul}d/z{A u m B u
m}d/r{rlineto}d/X -2 q 1{d/Y -2 q 2{d/A 0 d/B 0 d 64 -1 1{/f exch d/B
A/A z sub X add d B 2 m m Y add d z add 4 gt{exit}if/f 64 d}for f 64 div
setgray X Y moveto 0 q neg u 0 0 q u 0 r r r r fill/Y}for/X}for showpage
David,
Thanks for the careful reading. Some comments below on things other than
typos.
- Mike
Michael K. Smith, Ph.D., P.E.
EDS - Austin Innovation Centre
98 San Jacinto, #500
Austin, TX 78701
* mailto:michael.smith@eds.com
"VintageYear" in wine.owl should be "WineYear".
In the example above, we asserted identity between two distinct names.
But it is just as possible for this sort of identity to be inferred.
Remember the implications that can be derived from a functional property.
Given that hasMaker is functional, the following is
not necessarily a conflict.
owl:Thing rdf:about="#BancroftChardonnay"
hasMaker rdf:resource="#Bancroft" /
hasMaker rdf:resource="#Beringer" /
/owl:Thing
It may simply mean that Bancroft = Beringer.
In OWL, it is not a conflict. Formally, it means Bancroft = Beringer,
barring a differentIndividualFrom. I was insufficiently clear on the
distinction
here between what is true in the world and what is entailed by the knowledge
base.
Note that this example is not part of the wine ontology (as denoted by the
In OWL Full, you can create unique names for resources by defining a
DataTypeProperty that is both functional and inverseFunctional.
That gives you a one-to-one mapping, and then you can infer that resources
are different because they have different names. You just need to go
through a level of indirection.
But the application of InverseFunctionalProperty to a DataTypeProperty
depends on the use of OWL Full. So the answer depends on what language
level you have selected.
If you use ObjectProperty, the target is another resource and you are
back where you started.
thx again for the comments.
a response to the one wine issue you mention (mike smith already responded to the other issues).
we appreciate your comments.
deborah
it is a varietal
Deborah L. McGuinness
Knowledge Systems Laboratory
Gates Computer Science Building, 2A Room 241
Stanford University, Stanford, CA 94305-9020
URL: http://ksl.stanford.edu/people/dlm
