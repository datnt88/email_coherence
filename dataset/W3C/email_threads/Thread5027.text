From: public-swbp-wg-request@w3.org
[mailto:public-swbp-wg-request@w3.org] On Behalf Of NANNI
Marco FTRD/DMI/SOP
Sent: Friday, April 02, 2004 10:43 AM
Subject: [WRLD] Some few questions about the formal
description of the TF
So, for me the most important thing we have to do is to
convince the reader that OWL is a good language and that he
migth uses it as much as possible. Obviously the
demonstration will based on some comparisons betwen the
languages but always, in my mind, according to the fact that
OWL is the most powerful one.
At breakfast this morning, I used a chain saw to take the top off my boiled
egg, as it was the most powerful tool I had available. Shame I didn't have
one of those loud pneumatic road digger thingies :)
Seriously, though, the point I want to make is that there is a notion of
appropriateness of a tool to a task. It may be that there are no tasks for
which RDFS is more appropriate that Owl, but perhaps that is something to
examine rather than assume.
Brian
So, for me the most important thing we have to do is to
convince the reader that OWL is a good language and that he
migth uses it as much as possible. Obviously the
demonstration will based on some comparisons betwen the
languages but always, in my mind, according to the fact that
OWL is the most powerful one.
Very good point Brian. Similar arguments have proven that SOAP/WSDL is
not the ideal tool for ALL public web services (as HTTP with simple XML
may be most appropriate in lots of cases).
We could try to approach cases from bottom up, and try to see if we
then find limitations in the technology for the specific task that will
make us need to take one step higher in the "semantic cake". We then be
able to point this out rather than jump to the most complex technology
first.
I would like to see us describe a list of use cases where it is clear
that the "least complex" technology is appropriate, rather than the
most powerful. Gradually we keep on moving up the stack, when we reach
more and more complex problems that would *require* OWL. We should also
comparing them with other known technologies like RDBMS, XML and Web
Services to show that the latter ones are inappropriate (if so). Also
point out what you lose by not using the higher layers in SW.
Use cases to start from could be as easy as
1. News summaries, e.g. RDF site summary (RSS). Clearly "simple" enough
to only use RDF + DC (hence RSS 1.0), but regardless of what we may
think (?), also appropriate to use XML (RSS 2.0). But what problems
arises with use of XML instead of RDF? (e.g. Unique identification).
What do you lose by not using OWL?
2. Personal information, e.g. vCard, FOAF... What makes RDF appropriate
here? Why is FOAF problems simple enough for RDF(S), and when do we
need to introduce OWL?
...and then move to more and more complex.
- David
So, for me the most important thing we have to do is to
convince the reader that OWL is a good language and that he
migth uses it as much as possible. Obviously the
demonstration will based on some comparisons betwen the
languages but always, in my mind, according to the fact that
OWL is the most powerful one.
FOAF uses OWL - in particular, inverseFunctionalProperty, which
we need to avoid using uris for people (instead, homepage or mbox or
mbox_sha1sum are used to indirectly identify people).
Libby
Hello,
Brian writes
I believed i haven't exposed my point of view enough clearly
From what i have understood about the "OWL Web Ontology Language
Reference" and as it has been pointed out by some people here I think
that OWL(Ful),
is the "natural" evolution of RDF(S). It is not an other language but it
is the same language
with a cleaner model (semantic) and some more features wich make it more
powerful.
Apart, of course, from the necessity to include historical aspects in an
OWL or a general SW course (it can be useful, for example, to know the
evolution process which has brought us to the creation of OWL to have a
better undertanding of if) and, most of all, apart from the necessity to
deal with interoperability problems or with "porting" problems for
particular reasons, I don' t see serious educational obstacles to begin
directly with OWL.
That's not because :
- OWL Full provides free, unconstrained use of RDF constructs,
- owl:Class is equivalent to rdfs:Class,
- all data values are considered also to be part of the
individual domain
- OWL Full allows classes to be treated as individuals
that all the things that you will write with OWL full will be
automatically more complex to read, to understand or to write than with
RDF(S). OWL full is not ontologically more complex it's even the
contrary for me.
We can use OWL full to write "simple" onotlogies, as simple as RDF(S)
based ontologies.
If we want or we NEED to write complex ontologies for good reasons we
can but we are not oblige to.
For me our role would be to help people understand the semantic of each
OWL(Full) feature or construct, for each one to give an example of use
case, to help people to choose as often as possible the simplest way to
solve a problem, to be sure that their NEEDS can only be solved the way
they think at first, to know : when, if, how and where some OWL
constructs can have impact on reasoning possibilities and perfomance
aspects for their application for example.
I repeat but, for me it's easier to read only One document (the "OWL Web
Ontology Language
Reference") to try to understand it, than to read one or two more
documents and to try to understand the difference between their
respective content. There are too
much different languages and somebody (we ?) have to take the risk to
offer a simpliest view of this jungle.
When you compare RDF(S) documents and OWL documents I don't understand
why/how you can think that OWL is more complex than the others.
OWLfull is enough for me, i can write complex/simple ontologies, i can
reason or not with them : I'm free I have the choice...I don't need (to
know about) RDF(S)
To conclude, i think it is useless and perhaps even a bad educational
choice to present
RDF, RDFS and OWL as 3 (or 3 + 2) different languages each of them to be
used for a set of problem instead of one language (OWL) with a set of
features each of them which can be used for a set of problem.
Thank you very much
Best regards
MArco NANNI
PS : perhaps that i'm quite wrong but if it is the case perhaps also
that the proof of my mistake could be a very useful and important thing
to put into our outputs for new SW comers, don't you think ? :-)
-----Message d'origine-----
De : David Norheim [mailto:david@asemantics.com]
Envoye : lundi 5 avril 2004 10:14
A : McBride, Brian
Cc : Jim Hendler; SWBPD; NANNI Marco FTRD/DMI/SOP
Objet : Re: [WRLD] Some few questions about the formal description of
the TF
So, for me the most important thing we have to do is to
convince the reader that OWL is a good language and that he
migth uses it as much as possible. Obviously the
demonstration will based on some comparisons betwen the
languages but always, in my mind, according to the fact that
OWL is the most powerful one.
Very good point Brian. Similar arguments have proven that SOAP/WSDL is
not the ideal tool for ALL public web services (as HTTP with simple XML
may be most appropriate in lots of cases).
We could try to approach cases from bottom up, and try to see if we
then find limitations in the technology for the specific task that will
make us need to take one step higher in the "semantic cake". We then be
able to point this out rather than jump to the most complex technology
first.
I would like to see us describe a list of use cases where it is clear
that the "least complex" technology is appropriate, rather than the
most powerful. Gradually we keep on moving up the stack, when we reach
more and more complex problems that would *require* OWL. We should also
comparing them with other known technologies like RDBMS, XML and Web
Services to show that the latter ones are inappropriate (if so). Also
point out what you lose by not using the higher layers in SW.
Use cases to start from could be as easy as
1. News summaries, e.g. RDF site summary (RSS). Clearly "simple" enough
to only use RDF + DC (hence RSS 1.0), but regardless of what we may
think (?), also appropriate to use XML (RSS 2.0). But what problems
arises with use of XML instead of RDF? (e.g. Unique identification).
What do you lose by not using OWL?
2. Personal information, e.g. vCard, FOAF... What makes RDF appropriate
here? Why is FOAF problems simple enough for RDF(S), and when do we
need to introduce OWL?
...and then move to more and more complex.
- David
