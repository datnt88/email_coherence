This report is on the last couple of ERB meetings, on March 8 and 12th.
The majority of the time was spent on the issues (the discussion items
numbered 4.*). One issue is central: can we afford to assert that all
XML locators are URLs? The advantages are huge:
- no need for separate locator-language machinery
- web conformance. On the WWW, locators are URLS, and that's that
- existing understanding and machinery
There is one substantial downside: pure XML IDREFs cannot in this
framework be XML Links; a URL consisting only of a Name is interpreted
in URL-talk as a relative URL - you'd have to put a leading '#' in order
to get IDREF behavior. You could rely on the declaration - if its
declared IDREF, then you know - but this probably requires DTD processing
in order to recognize links, and adds complexity; neither are good.
Another issue arises, unavoidably. When a URL points into an XML
doc, what does the part after the '#' mean? We have to define this.
And if we are going to assert that we want to have all our pointers
be URLs, then we have to explain how to squeeze TEI Xpointers into
these things.
This leads to the #1 problem that makes the ERB unhappy about the
pure-URL idea: internationalization. We have gone to great lengths
to allow the use of any sane Unicode encoding in data and markup -
and yet the rules as to what can be in a URL are very restrictive;
URL-encoded UTF-8 is going to be massively non-human readable. On
the other hand, it may be the case that browsers de facto do the
right thing with the part after the '#' - for sure this doesn't get
sent out over the network, so why can't it be internationalized. So
maybe we could just assert that the URL-encoding is not required
after the '#'. We have some action items to check out what the specs
say, what people think they mean, and what the de facto behavior of
popular browsers is.
Summary: the ERB is leaning *very* strongly to asserting that all
locators are to be URLs - and will almost certainly go this way, if
we aren't thereby throwing away our nice clean international
interoperability. Input welcome. - Tim
Cheers, Tim Bray
tbray@textuality.com http://www.textuality.com/ +1-604-708-9592
If the Web architecture cannot support clean internationalization,
then making all locators URLs is only an option for the first
release. My guess is, this is a hole that can be exploited in the
competition between the two commercial vendors of web browsers and
should, therefore, be left open in some way to take advantage
of the one who is able to devise a *beyond URL* solution.
If IDREFs can't be links, we are invalidating a lot of existing
work in SGML as well in order to accomodate a weak addressing
system.
It looks like URLs need some work. You should make it clear
that URLs are a first version limitation only and that XML
developers should be working on a stronger, more flexible,
and more international solution. If they can't do this
within the URL framework, then it should be replaced.
len
Explicit link recognition needs "DTD processing" anyway, whether the
ATTLIST machinery is in the external or the internal subset. (The latter
is more trivial to retrieve, but no easier to process.)
Given than IDREF[S] and ENTITY[IES] are usually only interesting in the
cases where the relevant ATTLIST is read, I'd prefer that we sanction these
as links in XML by allowing them to have the XML-LINK="LINK" on them and to
dictate the "template" (that is, arch form) requirements for these attributes.
If you supply just an IDREF[S] value, then it's a fragment identifier
relative to the current document. If you supply an ENTITY[IES] value, then
it's just an indirect way of pointing to a URL (which is what entities have
to resolve to anyway, right?).
The tricky part would be doing the entity-plus-ID in separate attribute
values, which is a really common thing to want to do. If you supply an
IDREF[S] that's intended as a fragment identifier relative to the entity,
you'll get a validation error if the entity isn't the current document
(though you may not care about validation errors). Perhaps, when
ENTITY[IES] is supplied, the regular locator attribute value can be
interpreted as the fragment identifier relative to the entity, and too bad
if you don't combine them properly.
FWIW, here's a concrete proposal, with a few comments/questions:
o LOCATOR here is the all-powerful locator attribute. The locators
that have special declared values are named after the declared values.
o Does "ANY" allow the element to be declared "EMPTY"? I think we should
allow this! How can we get the template/AF to indicate it?
o What I mean is to allow *either* IDREF or IDREFS, and *either* ENTITY
or ENTITIES. How do you do this in a template/AF?
o If the element and attribute names become canonical, then perhaps DTD
processing *isn't* needed in the cases where the name matches up with
the declared value.
!ATTLIST XML-LINK
ROLE CDATA #FIXED "LINK"
LOCATOR CDATA #IMPLIED
IDREF IDREF #IMPLIED
IDREFS IDREFS #IMPLIED
ENTITY ENTITY #IMPLIED
ENTITIES ENTITIES #IMPLIED
Eve
I wonder what constitutes sane (or insane) Unicode encoding :-)
Aparently at last week's Unicode conference in Mainz it was agreed that URLs
would be allowed to contain any 10646 character providing that those outside
the first 95 characters were replaced by %number representations. (I also
heard that the %number concept would be extended to allow hexadecimal
numbers, but I find this somewhat hard to believe without the invention of a
number delimiter code or a fixed length requirement for both numbers and hex
values.)
Presumably the same rules will apply to fragment names as to domain and file
names.
Martin Bryan, The SGML Centre, Churchdown, Glos. GL3 2PU, UK
The problem with URL's is really 3 problems rolled into one:
1) Naming
2) Addressing
3) Queries
If the ERB emphasizes that URL's are to be used for (2), then this
will be fine. Once we get (1) and (3) mixed in, URL's become an
unholy mess.
This was a question I asked Tim. He told me that there shouldn't
be this distinction in the spec per se. I agree; this looked
to me like a way to handle the implementation under COM, so it's
a discussion that probably belongs on the developer's list;
Tim, if someone were using a structured storage server (storages
and streams in a compound document), would it not suffice for the
XML client to send that server the request, have the server unpack
what it needs from the compound document and return it as a file?
In that case, the URLness of always getting files is unbroken and
the subdocument/subelement addressing is something only the
server cares about. Would that work? The bad news is the
server stored files are fatter and there is overhead. Also,
since the structure storage definition only contains streams
and no record level management, the application server has
to handle that and enforce it. Maybe an XML definition or requirement
for the XML server is needed.
I agree with what you are saying above, but that has always been
the case with URLs as far as I know. Watching some of the
discussions on the uri list, it seemed that trying to get the
naming and addressing concepts into separate boxes was a fairly
difficult problem.
len
