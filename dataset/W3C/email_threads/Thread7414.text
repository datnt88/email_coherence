If you have an opinion about whether or not DASL should support queries on
structured properties *please* speak up in the DASL list,
www-webdav-dasl@w3.org
The rest of this email explains this further, and can be skipped if you
already understand what DASL is and what a query on structured properties
means for DASL.
DASL is the search protocol for WebDAV, it allows one to find resources
whose properties or content have values specified in the query, (e.g. find
resources whose date modified is  19 Nov 1998 and whose text contains
"Halloween".)
WebDAV property values may be plain strings, but they may also be
structured values (expressed as XML elements on the wire). The best
example of the latter is the WebDAV lock discovery property, but those who
have proposed WebDAV properties for Dublin Core metadata would likely also
use structured values.
DASL as currently defined provides means for searching string valued
properties but not within structured properties. Thus one can not search
for resources based on the value of the lockscope or owner within a lock.
As a special concession to the need to search for collection/non-collection
resources, it provides an ad-hoc test to determine whether a resource is a
collection.
Thus the current DASL requirements ID does not include a requirement for
queries on structured properties. We could say there is a rough concensus
that there is no requirement, but that would be based on having only one or
two opinions, scarcely a mandate. We'd like to hear from more people one
way or the other. In addition, if you think there *is* a requirement for
queries on structured values, please if possible, describe the layout of
the property values you expect to search, and the kinds of tests you think
you'd need.
For further information:
The DASL home page is http://www.ics.uci.edu/pub/ietf/dasl/
(Archived) mail messages of greatest relevance are:
Structure criteria for DASL queries
(tries to "make (or reopen) the case for defining a structure criteria
(also called "structured query") in DASL.")
Should DASL have structure queries?
(Attempt to provoke discussion on the need for structured queries)
If you want to contribute to the design of DASL structured criteria, there
are two proposals on the table right now, or you can add your own.
Please see
initial proposal for structure criteria
(Davis's proposal for syntax for structured criteria)
Querying WebDAV Hierarchical Properties -- The Proposal
(Babich's proposal for structured query.)
Some background on the above
what kinds of structure criteria are needed?
(lists the structural features that must be testable)
Querying WebDAV Hierarchical Properties -- Motivation
(Design rationale for the Babich proposal)
Jim
650-812-4301
and
seem to imply that in order for DASL to be useful and effective, it must
support structured searches. If DASL doesn't XQL probably will. Also, the
content searches for HTML and XML documents would have to be structured to
be useful. So the same mechanism can be use to search structure properties
since they are XML elements (on the wire) too.
Let me see if I understand you correctly. Are you saying that "the same
mechanism" can be used to search over the metadata about the documents as over
the document content? I don't think that follows from just observing that both
have structure and can be queried using XML (lots of things have structure but
that doesn't mean everything can be searched by the same mechanism; XML can be
used to represent anything, as can ASCII, binary data, S-expressions, and so
on); you would also need some deeper unity of model and implementation.
I should have said that DASL is designed to be very extensible. My
question had to do with the requirements for search in the base level DASL.
There will certainly be possibility to define additional, more powerful
search grammars.
That said, DASL will certainly be of some non-zero value even without
structured search. From information retrieval studies it is well known
that the typical user query is very simple, e.g. just one word.
Even without structured query, the base level query grammar in DASL will
likely meet most, though not all, usage scenarios. We'd like to know
whether there are specific, important needs it will not meet, urgent enough
to justify the considerable effort to add structured query to this base
level grammar.
Since you mention XQL, that is one reason to *not* add it to DASL: perhaps
it would be better to wait until XQL is done, then import it.
true for structured documents, but the DASL charter for content-based
search is to find words in text resources only, not in structured
documents. So, e.g, no query for words that occur only in an H2 XML
element, in the *base level* DASL query.
Thanks for your quick response.
Jim
650-812-4301
I disagree with this statement.
DASL as currently specified supports all sorts of useful queries. There are
also some sorts of things that it can't do. Future versions SHOULD
incorporate technology such as XQL, XSL, etc, in order to provide more
sophisticated types of searches.
The fundamental issue is- Given the many sorts of useful queries that DASL
1.0 as currently published can support, do we really want to wait for the
W3C groups to solve the more complicated structured query problem, or should
we move our current simple syntax forward without adding extra complexity
and take advantage of our extensibility to do a 2.0 later once the various
X*L technologies are finished?
As an IETF activity, obviously we need the rough consensus of the community
to proceed with this decision, so I'd like to continue this discussion to
make sure as many people as possible are happy with this. Please let me know
what your concerns are.
Alex Hopmann
Microsoft Corporation
"... in order for DASL to be useful and effective, it must
support structured searches."
I disagree. It's obvious that that's not true.
For example, neither SQL nor SQL 92 support structured
data, let alone structured searches, and SQL is very widely
used. Years of experience have shown that SQL is both useful
and effective for many applications without the ability to
define or query structures. Similarly, DASL would be very useful
for many queries (including the most common queries) without
the ability to query structures. (Of course, that doesn't
imply that we should not add that ability in the future. I
think we should.)
"So the same mechanism can be use to search structure properties
since they are XML elements (on the wire) too."
I disagree with the implicit assumption behind this statement.
The assumption is that the serialization format (i.e., XML)
is somehow equivalent to the data model, or somehow forces
the data model to be the same.
As far as searching, it is irrelevant what the serialization
format is. Multiple different protocols could be used to access
the same data source if that were desirable. A binary
serialization format would be much more efficient than XML,
as one example. What matters for query is the data model.
XML all by itself is not a data model. Conventions would have
to be added, starting with data types. Then there is the
whole question of metadata, central definition of data
(as opposed to client program definition of data),
administration of database schemas (retrieving and updating
metadata), merging metadata when querying across multiple
data sources, etc., none which are issues that XML or any
other serialization format was intended to address directly.
There are pros and cons for every design choice. For example,
XML is a very good format for certain types of text based documents,
and is a very poor format for others (e.g., image documents).
Similarly, XML plus extensions wouldn't be the best property
model.
Alan Babich
"... in order for DASL to be useful and effective, it must
support structured searches."
I disagree. It's obvious that that's not true.
For example, neither SQL nor SQL 92 support structured
data, let alone structured searches, and SQL is very widely
used. Years of experience have shown that SQL is both useful
and effective for many applications without the ability to
define or query structures. Similarly, DASL would be very useful
for many queries (including the most common queries) without
the ability to query structures. (Of course, that doesn't
imply that we should not add that ability in the future. I
think we should.)
The S in SQL stands for Structured Query Language. A table captures this
structure and its format is defined by a schema. So I guess those years of
experience support my claim. SQL is exactly analogous to XML and DTDs. But
since XML is a tagged language, it carries an instance of the schema with
each document. So it is very easy to formulate queries using tag and
attribute names. That just what XSL patterns are. No DTD is required to do
these queries. The DTD is only required to validate the document if needed.
"So the same mechanism can be use to search structure properties
since they are XML elements (on the wire) too."
I disagree with the implicit assumption behind this statement.
The assumption is that the serialization format (i.e., XML)
is somehow equivalent to the data model, or somehow forces
the data model to be the same.
As far as searching, it is irrelevant what the serialization
format is. Multiple different protocols could be used to access
the same data source if that were desirable. A binary
serialization format would be much more efficient than XML,
as one example. What matters for query is the data model.
The only assumption is I'm using is that if you have a web resource of type
text/xml, and you have webdav properties returned by a server somehow as
text/xml which is what PROPFIND is specified to do, you can use the same
query mechanisms on both. Again XSL is a good example of such a thing. I
have used it to render the results of a PROPFIND. I don't see what this has
to do with serialization, data models, etc. They're just XML documents
available to a client.
XML all by itself is not a data model. Conventions would have
to be added, starting with data types. Then there is the
whole question of metadata, central definition of data
(as opposed to client program definition of data),
administration of database schemas (retrieving and updating
metadata), merging metadata when querying across multiple
data sources, etc., none which are issues that XML or any
other serialization format was intended to address directly.
XML is a language for describing structured data, and XML DTDs specify what
constitutes valid structure. No it doesn't support primitive data types,
and a lot of the other functions of a traditional DBMS, but client and/or
server applications are free to provide these capabilities on an XML base.
DCD and other DTD replacement proposals are also addressing some of these
issues.
There are pros and cons for every design choice. For example,
XML is a very good format for certain types of text based documents,
and is a very poor format for others (e.g., image documents).
Similarly, XML plus extensions wouldn't be the best property
model.
The real power of DASL will come from being able to search for documents
having properties or content that is more than just a regular expression.
This restriction is what makes web searching and crawling so difficult with
HTML. With XML, we'll have the real business data and meta-data (in WebDAV
properties) to search on and can make much better searches. I think DASL
should address this and not require special cases for what it can search.
Alan Babich
Just to keep the discussion of this thread in perspective,
let it be clear that I (along with everyone else,
apparently) believe that it would be a good thing for DASL
to query hierarchical WebDAV properties -- *eventually*. If
that's true, then the real issue of this e-mail thread is
"on what release of DASL". I personally believe that we
should wait for 1.x . Others believe that we should try
to jam it into 1.0.
Having clarified what I think is the real issue, I shall
now attempt to unconfuse the *secondary* discussions about
property models, the meaning of the word "structure", etc. .
The S in SQL stands for Structured Query Language. A table
captures this structure, and its format is defined by a schema.
Jim and I apparently use different meanings for the
word "structure". When I say "structure" in this thread,
I mean specifically the hierarchical organization of values
of WebDAV properties. In an RDBMS, that would map to
hierarchical nesting of tables (i.e., a denormalized
relational databases). It is a fact that no ANSI standard
version of SQL through SQL 92 yet has the ability to define,
let alone query, nested tables. (I believe SQL 92 is the
most recent ANSI standard version of SQL.) Another interesting
issue for query is repeated values. It is a fact that no
ANSI standard version of SQL has arrays of integers,
floating or fixed point numbers, or datetimes. SQL has
strings and bitfields, but these are not treated as arrays
of characters or arrays of bits. They are treated as a whole,
i.e., they are treated as scalars. Standard SQL doesn't
have arrays.
Therefore, it is true that the "S" in "SQL" literally stands
for "structured", but not structured in the sense of
hierarchical WebDAV property values. In other words, the
"S" in "SQL" means something like "the data is structured
into tables with scalar valued columns".
This meaning of "structure" is less general than WebDAV
"structured property values", since standard SQL tables are
flat. Therefore, the argument that the "S" in "SQL" stands
for "structured" is irrelevant to the question of DASL querying
"hierarchically structured" WebDAV properties.
Of course, many of you have seen recent releases of
commercial RDBMS's with the ability to defined nested tables
(i.e., denormalized relational databases) and the ability to
query them. They typically have arrays as well. These features
are proprietary extensions to SQL, and are not part of the
SQL standard. Denormalized relational databases
are useful, but the point is that the acronym SQL was coined
*many years ago*, and had nothing to do with nested tables
when it was coined. These proprietary implementations should
be called "SQL with proprietary extensions" to avoid semantic
confusion. A denormalized RDBMS can, of course, represent
hierarchical WebDAV properties directly using nested tables.
In non normalized RDBMS's one typically achieves the effect
of nested tables by using flat tables and a convention for
joining on a "row instance" property. This is indirect
representation of hierarchically structured property
values, and the "S" in "SQL" does not refer to this
particular schema definition technique (or any other).
So I guess those years of experience support my claim.
Quite the opposite. The confusion arises from our different
meanings of the word "structure" as explained above.
There are many, many more years of experience with SQL
*without* nested tables (or arrays) that have proved its
usefulness than there are months or a few of years of
experience with the relatively recent releases of RDBMS's
with proprietary extensions for nested tables (and arrays).
Obviously, hierarchies were not a 1.0 feature of SQL, and
didn't exist for very many years. This makes it very plausible
that DASL could get away without queries on hierarchically
structured values for its first release.
With XML, we'll have the real business data and meta-data (in WebDAV
properties) to search on and can make much better searches.
This seems to conflate property values with metadata.
A WebDAV resource has property *values* and, possibly, content.
The metadata is information about the *form and meaning*
of the property values -- data type (e.g., integer),
maximum and minimum values, list of legal values,
property name, domain of values (e.g., the subset of
integers that are zipcodes), character set, natural
language, whether string comparisons are case
sensitive, a narrative description of what the property
is and how it should be used, etc., etc. . All that is
very different from the property values themselves.
The metadata is analogous to the schema in an RDBMS.
It is invariant now matter what values are in the columns
of the rows.
The usual paradigm is (1) suck up the metadata once when your
client program starts up (if it's not already hardwired
into your client application), and (2) send and receive
property values and content from then on, not metadata.
Searching on content is good. (Find documents containing
"computer".) Searching on property values is good. (Find
documents authored by "Joe".) You find resources (e.g.,
documents) in both cases. Searching metadata is a
qualitatively different operation: (Find all the
properties having data type "integer". Or find all
the properties whose domain is "zipcode". Or find
out all about the definition of the Author property.)
Searching metadata is much less important that simply
retrieving all of it at once for client program
initialization purposes.
Retrieval and maintenance of metadata is important, and
there are a lot of issues to address including the property
model. The normal cases are two: (1) High end document
management systems have well defined schemas, and only the
docbase administrator can change the schema, because
organization and discipline are critical for enterprise
wide applications. (2) Some low end systems have hard
wired properties and don't allow clients to define additional
properties. In both cases, the server has all the metadata
-- it knows about all the properties, and
enforces consistency (e.g, it won't allow the value of
the Author property to be an integer).
The rare case is that any old client can define
any old property any old time any time it wants to.
This would probably only be workable in a personal
document management system, or a very small work group.
Even in that case, it is not strictly necessary or even
a good idea to send the metadata along with the data
at the same time. The property metadata only has to be
sent once no matter how many resources have or will have
that property. The high end document management systems
will have some protocol for the docspace administrator
to update and define the metadata. If and when some
WebDAV subcommittee defines such a protocol, that would
be a general solution that could be used for any WebDAV
server that allowed clients to define their own properties.
We clearly can't take the time to address all these
issues in DASL 1.0 .
SQL is exactly analogous to XML and DTDs. But since XML is a
tagged language, it carries an instance of the schema with
each document.
No, not "exactly". For one thing, XML can describe nested
structures. ANSI standard SQL can not. Only the proprietary
denormalized RDBMS's can. For another, the database schema
is never factored out of a SQL database and stored separately.
It is always embedded in the database. In
contrast, the same DTD file could be shared by multiple
XML documents. There are other differences as well.
*More importantly*, the XML representation of the value of a
WebDAV property indicates only *small part* of the metadata
of the property -- the hierarchical structure of the value.
The hierarchical structure of the value is nowhere near the
whole metadata. (That is important for efficiency. DBMS's
have known that for decades, which is why they do *not* store
the entire metadata of the table with each row, nor do they
send the complete metadata over the network with each creation
of a new row or retrieval of a row). XML, even with DTD,
can not even represent the most basic part of the metadata,
the base data type, without adding some conventions to the
protocol or formally extending XML to include data types.
Data types are just the beginning of defining the metadata.
Some people are erroneously conflating property value
models with XML, conflating serialization formats with XML,
and conflating metadata models with XML. These are all
distinct. To untangle the confusion on those and other
related issues would take far more time than DASL can
afford on 1.0 .
Fortunately, that is not necessary -- DASL is extremely
useful for the most common types of queries that WebDAV
needs to support.
So what if DASL 1.0 can't do any possible query that
anyone could ever think of? Why should DASL 1.0
have to? No standard or proprietary implementation of SQL
can do all possible queries anyone has ever thought of, and
SQL has been around a very, very long time.
For example, in SQL 92 or 89, try to express "find the properties
of the employee ranked tenth in decreasing order of salary
*and no others*" in a single query. (Remember that if two
people make the maximal salary, there is no employee ranked
second.) You can't do that in SQL with a single query (assuming
there is no preexisting salary rank column). (If you think you
can, send me e-mail, and if you're right, I'll find a different
example.) The list of queries SQL can NOT do is endless.
Obviously, that didn't stop SQL from being extremely useful.
Nor would the temporary absence of the ability to query
hierarchical WebDAV property values stop DASL 1.0 from being
extremely useful.
Alan Babich
Now that my illness is receding, I'm diving into this a bit. Mostly this is
still on the XML property front.
For the record, I think structured searching is pretty essential (it should
be in the goals document, for instance). I also think it could be tabled
for a 1.1 release, especially given the ongoing work on XML Querying, etc.
We should not re-create a wheel here, and even simple searching has value.
SQL is only useful with a database schema. We've so far not had any such
thing, only assertions that servers might have their own (hardwired
schemas) and that based on the XML data they see, they are free to
transform client property requests to conform to these (non-public)
schemas. This sounds like a disaster-in-waiting to me.
I think that this is true, but in a trivial way, because we seem to be
ignoring some critically important questions in the current view of things.
_If_ we are only using XML as a "serialization format", then we still need
a hard and fast definition of the data model that we are using it as a
format for. Unless this is in the DASL document, we don't have a data
model. We have discussed many situations where the string PROPATCHed and
the value GETPROPed may be different. (dates, times, integers, Floats (with
differing accuracies and decimal conversion algorithms?), etc.). If we
intend to allow such things for servers, we need to be clear about when
they can, or cannot, happen. If not, there's no way to know what is
actually going to happen when you put a property at a server.
I know that some feel that the only properties supported by servers will be
hardwired in, but I doubt that that assumption can hold up:
First of all, the current protocol is grossly overdesigned if clients
aren't to be allowed to set arbitrary properties (that a server may _not_
have special support for).
Secondly, we want this to be useful for metadata generally, and that means
that it ought to be compatible with the formats in use for meta-data: at
this point, very clearly, this will be XML, in a wide variety of metadata
domains. Off the top of my head, I can think of at least the TEI (Text
Enxcoding Initiative), the EAD (Encoded Archival Description), and Dublin
Core -- and I know that there are others.
So the encoding format argument seems already wobbly to me.
There's a very simple data model for XML (multilingual strings, with
labelled bracketings and attached, unordered attributes. Attributes get
some people very excited, but that's fundamentally silly: they can easily
be represented as a special case of containment (internally for servers
more limited pure hierarchical data models): for instance any attribute
name could be represented as a dummy element with a name beginning with
"#". Since # is not a legal element name start character this is an easy
reversible transformation.
This is really only a problem for live properties, where servers already
have the needed leeway. I think servers should be required to preserve all
information in properties that they cannot interpret via the XML namespace
mechanisms.. If the server is going to perform some selection process, then
we need to specify what that is, and since that is essentially a
modification of XML, we need a good justification as to why it's a good
idea.
These are all facilities that server might want to offer, and might not.
They might make sense as additional layers and they might not. We don't
need to solve those (potential) probolems to allow clients to request the
attachment of arbitrary properties, and require servers to deliver them
back unmodified (within the limits of XML). Servers can still reject such
requests if that is their policy; but they should not be allowed to accept
such a request and _modify the data_, either by ignoring or changing the
information the client provides. [In fact, modification is OK, but only if
we define the limits precisely -- I see no reason to limit the model from
XML, and think that such an attempt will be confusing and silly.
We chose a (good) notation for poperty values (certainly the one that is
being used in all current metadata efforts I know about). We should just go
ahead and admit that that's what we're doing.
Since XML (potentially plus extensions) is being used in so many metadata
efforts, I find the above statement rather odd.
What do you know that Dublin Core, EAD, the digital libraries folks, and
the TEI don't?
-- David
David Durand dgd@cs.bu.edu \ david@dynamicDiagrams.com
Boston University Computer Science \ Sr. Analyst
--------------------------------------------\ http://www.dynamicDiagrams.com/
MAPA: mapping for the WWW \__________________________
DASL does not introduce a data model, it uses WebDAV's.
Unfortunately, other than some posts by a few of the WebDAV authors, there
is nothing written about WebDAV's data model, and certainly no concensus
about it.
You are right to say this is a barrier.
By "supported by servers" do you mean supported by PROPPATCH? If so,
surely the WebDAV spec makes it clear that clients may set arbitrary 'dead'
properties? Is there really any doubt about this? Also, as far as I know
all three extant WebDAV implementations (mod_dav, PyDAV, and MS) support
dead properties.
Or did you mean "searchable by DASL"?
Although that's harder, it's still not unreasonable. I would expect that
some implementations of DASL will only support search of properties chosen
by the server administrator (this allows for a easy and fast implementation
on existing RDB technology) I expect others to allow search over *all*
properties. The protocol says nothing about this, nor should it.
best regards
Jim
650-812-4301
