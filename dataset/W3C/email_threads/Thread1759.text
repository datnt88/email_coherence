Hi,
the spec says in chapter 8 [1]:
"...SHOULD use a case-sensitive octet-by-octet comparison of the two label
names."
I think this must be "character-by-character comparison". The term "octet"
isn't meaningful here because we have XML based marshalling.
Furthermore, I'm not convinced that [2]:
"The value of a label header is the name of a label, encoded using UTF-8.
For example, the label "release-2.0" is identified by the following header:"
is compatible with HTTP and existing servlet engines. Has anybody *tested*
this? Maybe it would be better to specify URL-encoded UTF-8 instead.
Julian
[1]
http://www.webdav.org/deltav/protocol/draft-ietf-deltav-versioning-20.htm#_
Toc524830601
[2]
http://www.webdav.org/deltav/protocol/draft-ietf-deltav-versioning-20.htm#_
Toc524830606
This is one of the reasons that baselines should be used instead of
labels, whenever possible (baselines are identified by URL's, not text
strings, so they have none of these problems).
As I recall, the "octet-by-octet" phrasing was written with the
label header in mind, but I agree that this phrasing doesn't work
so well with XML. Perhaps some of the folks that care about labels
could comment here?
Cheers,
Geoff
Hi,
the spec says in chapter 8 [1]:
"...SHOULD use a case-sensitive octet-by-octet comparison of the two label
names."
I think this must be "character-by-character comparison". The term "octet"
isn't meaningful here because we have XML based marshalling.
Furthermore, I'm not convinced that [2]:
"The value of a label header is the name of a label, encoded using UTF-8.
For example, the label "release-2.0" is identified by the following header:"
is compatible with HTTP and existing servlet engines. Has anybody *tested*
this? Maybe it would be better to specify URL-encoded UTF-8 instead.
Julian
[1]
http://www.webdav.org/deltav/protocol/draft-ietf-deltav-versioning-20.htm#_
Toc524830601
[2]
http://www.webdav.org/deltav/protocol/draft-ietf-deltav-versioning-20.htm#_
Toc524830606
I just re-read the lable header thread from almost one year ago.
While I agree that language information isn't relevant, I have serious
concerns about how it's currently described in the spec.
1) The matching should not refer to octets. This doesn't make sense if the
label has been set using XML marshalling.
2) I'd really like to see a working example of of a label containing
non-ASCII characters being passed through an HTTP header into a server. If
the description in the spec is sufficient, it should be easy to come up with
an example, right?
2b) As an alternative, I'd suggest URL-encoding the label's UTF-8 octet
representation (we know *this* works).
Julian
It appears to me that the DAV:href element value has all the same problems
as
a label (i.e. the value appears both in header contexts and in
XML element values), but 2518 didn't feel obliged to say anything about it.
Has this caused interoperability problems?
Cheers,
Geoff
I just re-read the lable header thread from almost one year ago.
While I agree that language information isn't relevant, I have serious
concerns about how it's currently described in the spec.
1) The matching should not refer to octets. This doesn't make sense if the
label has been set using XML marshalling.
2) I'd really like to see a working example of of a label containing
non-ASCII characters being passed through an HTTP header into a server. If
the description in the spec is sufficient, it should be easy to come up with
an example, right?
2b) As an alternative, I'd suggest URL-encoding the label's UTF-8 octet
representation (we know *this* works).
Julian
Geoff,
1) yes, it has caused interoperability problems, because the convention to
"UTF-8 encode first, then URL-encode" of URIs is relatively new. For
instance, some Microsoft client implementations use ISO8859-1 encoding,
which causes the client to fail if the server only supports UTF-8 (like it
should).
2) however, the main difference is that a URI *always* is encoded -- there
is no such think like a URI containing non-ASCII characters (so the problems
I have with LABEL do not apply here -- actually, I'm proposing to use the
same format used for the URI).
Julian
UTF-8 first followed by URL-encoding sounds fine to me.
Regards,
Tim
"Julian Reschke" julian.reschke@greenbytes.de
Sent by: ietf-dav-versioning-request@w3.org
2002-01-25 08:31
Subject: RE: LABEL comparison
Geoff,
1) yes, it has caused interoperability problems, because the convention to
"UTF-8 encode first, then URL-encode" of URIs is relatively new. For
instance, some Microsoft client implementations use ISO8859-1 encoding,
which causes the client to fail if the server only supports UTF-8 (like it
should).
2) however, the main difference is that a URI *always* is encoded -- there
is no such think like a URI containing non-ASCII characters (so the
problems
I have with LABEL do not apply here -- actually, I'm proposing to use the
same format used for the URI).
Julian
problems
the
If
This is fine with me as well.
Does anyone object to the following two changes to address this issue:
- In section 8.2, Replace "SHOULD use an octet-by-octet case-sensitive
comparision" with "SHOULD use a case-sensitive comparison".
- In section 8.3, replace "encoded using UTF-8" with "encoded using
URI-escaped UTF-8".
Cheers,
Geoff
UTF-8 first followed by URL-encoding sounds fine to me.
Regards,
Tim
"Julian Reschke" julian.reschke@greenbytes.de
Sent by: ietf-dav-versioning-request@w3.org
2002-01-25 08:31
Geoff,
1) yes, it has caused interoperability problems, because the convention to
"UTF-8 encode first, then URL-encode" of URIs is relatively new. For
instance, some Microsoft client implementations use ISO8859-1 encoding,
which causes the client to fail if the server only supports UTF-8 (like it
should).
2) however, the main difference is that a URI *always* is encoded -- there
is no such think like a URI containing non-ASCII characters (so the
problems
I have with LABEL do not apply here -- actually, I'm proposing to use the
same format used for the URI).
Julian
problems
the
If
