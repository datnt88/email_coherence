I'm sorry to intrude into the issue-resolving process with a hammer
rather than tweezers. Although we are bound to backward compatibility in
many respects, I think we still have a chance to nail down some shaky
pieces of the frame. Putting off the metaphors, I'd like to suggest
several incremental layers for the RDF model spec, and a way of building
advanced languages on top of those. The idea is to keep each layer thin,
and to provide model-theoretic semantics a la
layer. Application developers may choose to support a certain subset of
layers. Tentatively, I could imagine the following layering:
- Layer 1: Abstract syntax based on resources and triples only (no
literals, no predefined vocabulary, no reification). Namespaces are part
of the formal model (missing in current spec). Interpretation
(semantics) is specified using a model-theoretic approach.
- Layer 2: Literals are declared as a specific kind of resources
belonging to a certain namespace (e.g. http://www.w3.org/.../Literal).
Literals may be used as subjects (this is an extension).
- Layer 3: Reification added to abstract syntax (e.g. as a symbol for a
partial function). Interpretation of the reification function maps DxDxD
to D (D is domain of discourse). The corresponding vocabulary elements
(subject, predicate, object) may be defined here (rdf:type still
missing). Reified statements are first-class objects in the model, i.e.
applications may implement them as Java classes, database tuples with
IDs etc. Statements are directly mapped to individuals in the domain of
discourse, no resources/URI that identify them are required per se
(identifiers for statements can be introduced later on if needed).
- Layer 4: rdf:type is introduced as a basic typing mechanism (broader
than class instantiation).
- Layer 5: defines e.g. containers (for backward compatibility only. I
think containers are a topic of its own, and belongs to the issues like
representing order, aggregation etc.)
- (more model features...)
This proposal might seem radical, but I think most of the suggestions
are incremental. The features listed above (namespaces, literals,
reification etc.) are intended to be backward compatible and may be
introduced in a different order. The semantics of a language "built on
top of RDF" (like DAML/OIL) can be defined by restricting interpretation
functions used in the existing layers or by defining new ones.
Specifying "new" semantics in this way may result in a larger or smaller
number of valid interpretations. The set of statements that are subject
of semantic interpretation can be selected in an unspecified,
application-specific way.
Since semantics proved to be a highly controversial issue, I would
suggest to strictly split each layer into abstract syntax (+ examples) /
formal semantics part. The developers who care about running apps more
than about formal semantics may ignore the parts they don't want to deal
with.
Sergey
Hi Sergey,
You made/make a strong inroduction!
I'm trying to understand what you mean and I'm struggling
with that last sentence. No matter how many times I
read it, I'm not understanding it.
It's in particular that
set of statements
subject
semantic interpretation
unspecified selection
So what does that last sentence actually mean?
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/
Let me give an example. We expect to find RDF statements on many
webpages and in many online data sources. Specific applications
typically consider only a subset of all available data (e.g. certain
domain, certain set of trusted servers, certain vocabularies, etc.) I
was trying to convey the idea that meaningful semantics exists only for
such limited datasets, whose boundaries are determined in a particular
application context. It probably would be inappropriate to refer to the
set of all webpages on public servers when say defining the semantics of
rdf:type.
Sergey
Thats a function of the machinery used for the definition.
If you want to use standard model theory, I don't see why
you could use all the rdf on all the servers in the world.
guha
Namespaces are part of the formal model (missing in current spec).
How do you suggest we do this and why?
Do you have something against data: (which seems to be the
popular candidate)?
[ "Aaron Swartz" ; mailto:me@aaronsw.com ; http://www.aaronsw.com/ ]
You guys at db.stanford really do all think alike, don't you? :-)
While I agree with your overall theme here, it seems to go beyond the
remit of RDFcore, as it requires a basic change to the language.
However, what you say about semantics isnt exactly right. After all,
one *can* give a model theory for FOL, which is about as global in
scope as one could imagine (way larger than the mere Web, for
example.)
Pat
IHMC(850)434 8903 home
40 South Alcaniz St.(850)202 4416 office
phayes@ai.uwf.edu
For some reason, several people seem to be unhappy about the above side
remark of mine. If it does not make sense, well scrap it.
If you mean Stefan, we do have lots of opinionated discussions on many
RDF-related issues. However, I'm glad that we look consistent from the
outside ;)
I'm happy to hear that layering is not a hopeless venue. I'd very much
appreciate your help along those lines, since several of the RDFCore
members including myself are far from being experts in formal logic. I
apologize in advance for many things that I will be arguing for that may
not make sense.
In particular, I hope you could find time to summarize the approaches to
reification extensively discussed on rdf-logic (Brian called for a
summary on that issue a couple of days ago). That would be a great help,
especially for the F2F.
Sergey
