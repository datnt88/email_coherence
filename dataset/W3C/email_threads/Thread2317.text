A Revised Internet-Draft is available from the on-line Internet-Drafts
directories. This draft is a work item of the HyperText Transfer Protocol
Working Group of the IETF.
Title : Proposed HTTP State Management Mechanism
Author(s) : D. Kristol, L. Montulli
Filename : draft-ietf-http-state-mgmt-03.txt, .ps
Pages : 19
Date : 07/19/1996
This document specifies a way to create a stateful session with HTTP
requests and responses. It describes two new headers, Cookie and requests
and responses. It describes two new headers, Cookie and Set-Cookie, which
carry state information between participating origin servers and user
agents. The method described here differs from Netscape's Cookie proposal,
but it can interoperate with HTTP/1.0 user agents that use Netscape's
method. (See the HISTORICAL section.)
Internet-Drafts are available by anonymous FTP. Login with the username
"anonymous" and a password of your e-mail address. After logging in,
type "cd internet-drafts" and then
"get draft-ietf-http-state-mgmt-03.txt".
Or
"get draft-ietf-http-state-mgmt-03.ps".
A URL for the Internet-Draft is:
ftp://ds.internic.net/internet-drafts/draft-ietf-http-state-mgmt-03.txt
Internet-Drafts directories are located at:
o Africa
Address: ftp.is.co.za (196.4.160.8)
o Europe
Address: nic.nordu.net (192.36.148.17)
Address: ftp.nis.garr.it (193.205.245.10)
o Pacific Rim
Address: munnari.oz.au (128.250.1.21)
o US East Coast
Address: ds.internic.net (198.49.45.10)
o US West Coast
Address: ftp.isi.edu (128.9.0.32)
Internet-Drafts are also available by mail.
Send a message to: mailserv@ds.internic.net. In the body type:
"FILE /internet-drafts/draft-ietf-http-state-mgmt-03.txt".
Or
"FILE /internet-drafts/draft-ietf-http-state-mgmt-03.ps".
NOTE: The mail server at ds.internic.net can return the document in
MIME-encoded form by using the "mpack" utility. To use this
feature, insert the command "ENCODING mime" before the "FILE"
command. To decode the response(s), you will need "munpack" or
a MIME-compliant mail reader. Different MIME-compliant mail readers
exhibit different behavior, especially when dealing with
"multipart" MIME messages (i.e., documents which have been split
up into multiple messages), so check your local documentation on
how to manipulate these messages.
For questions, please mail to Internet-Drafts@ietf.org
Below is the data which will enable a MIME compliant mail reader
implementation to automatically retrieve the ASCII version
of the Internet-Draft.
Greetings,
The current cookie proposal appears insufficient to assure a secure
environment for providing state management in an authenticated system
where multiple users have access to the same single-user machine.
To be specific, and provide an example, I will use the environment,
and application, I am trying to use:
There will be a cookie as an identifier for an authenticated session during
which the student will conduct online course work, possibly from a public
computer lab. What I want to guard against is the possibility of subsequent
users of the same machine from being able to "work" as the previous student.
Relying upon the default Max-Age behavior of not saving the cookie is
not an option. I use Max-Age to limit the validity of a session to guard
against a student just walking away from their computer, leaving it
unattended (much like auto-locking screen savers or idle timeouts on
various shells, or kerberos tickets).
Yet I would also like for the cookie to disappear after one person's
"use" of the client, whether this be signified by an actual quitting of
the client program, closing the browsing window, switching user environment,
etc.
What I would propose is another standard attribute "Single-user".
This attribute would indicate not only that the cookie is not to be kept
across client invocations, but also that the cookie should be discarded
after any indication that the user has closed the session, such as closing
the window, switching user environments, etc. (And perhaps the cookie should
not be shared by multiple windows of the user agent unless the other windows
are opened from the originating session?)
thank you,
-Robert
r-lentz@nwu.edu http://www.astro.nwu.edu/lentz/plan.html
"The intellectual level of the schools can be no higher than the
intellectual level of the culture in which they float."
-Richard Gibboney
It would seem to me that you're just up the creek with no paddle. From
first principles, if the OS you are using is "single user", there's no
way that multiple users can use it securely (even serially), and nothing
any *protocol* can do to fix it.
I'd say that you need a browser that will encrypt all of a user's
cookies under a key known only to that user, never stores them in the
clear, never leaves them in main memory in the clear for more than the
time required to send them to the server, and exits or demands the user
type a password if idle for more than a few minutes.
This approach basically uses cryptographic techniques to turn a "single
user" workstation into a serially resuable secure multiple user one (at
least as far as cookies go). I don't think anything less will do.
All of which has nothing to do with the cookie protocol.
From: Robert A. Lentz lentz@annie.astro.nwu.edu
Date: Tue, 23 Jul 1996 19:44:44 -0500 (CDT)
Greetings,
The current cookie proposal appears insufficient to assure a secure
environment for providing state management in an authenticated system
where multiple users have access to the same single-user machine.
I believe there are a number of solutions to this problem, none of
which require changes to the protocol.
One example would be to store the user's password as part of the
session info on the server, and use it to encrypt/decrypt the cookie.
When the first student ends their session (or it times out), the
cookie stored on the browser side becomes meaningless until replaced
with a cookie for a new session.
Joe
Joseph Arceneaux
Arceneaux Consulting
jla@arceneaux.com
|Yet I would also like for the cookie to disappear after one person's
|"use" of the client, whether this be signified by an actual quitting of
|the client program, closing the browsing window, switching user environment,
|etc.
This is not a protocol issue, rather an implementation issue. I'd recommended
the following language regarding the tossing of cookies that didn't make it
into the draft:
+If a browser has a kiosk mode for use as a public terminal, and is configured
+to accept cookies, then the user agent should be configurable to clear its
+cookie cache (and any other per-user authentication data), either by an
+explicit user "log out" command or by a timeout mechanism.
There is enough complexity to the unaddressed issues of cookie privacy that
aren't appropriate to the protocol specification that an informational document
on cookie practice is probably a good idea.
-marc
