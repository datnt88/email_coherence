I'm having trouble figuring out how to respond to your comment below
from
Could you please provide some guidance?
[38] *** 7.3 "For alignment with the [Character Model for the World
Wide
Web 1.0], applications may choose collations that treat unnormalized
strings as though they were normalized (that is, that implicitly
normalize
the strings)."
This is somewhat misleading, in that early uniform normalization
should avoid having to compare strings that differ only in
normalization.
This should be reworded carefully. Please also point out that
using
highest collation strength does not imply string normalization.
All the best, Ashok
I'm having trouble figuring out how to respond to your comment below
from
Could you please provide some guidance?
[82] 7.4.11 normalize-unicode: 'full normalization' needs a defition of
the
relevant constructs. For strings, the string itself is most
conveniently the relevant construct, but this should be said
explicitly.
All the best, Ashok
Hello Ashok,
Thanks for checking back with us.
The Character Model contains various definitions of
normalization. (http://www.w3.org/TR/charmod/#sec-TextNormalization).
In particular, 'full normalization' is designed so that pieces
of a format (for example, element content in XML) can easily
be concatenated without creating normalization issues at the
point of concatenation. As an example, in
the 'u' and the combining grave accent (&amp;#x300;) would have to
be normalized to a precombined "u with grave" when the content
of the foo and bar elements are concatenated. So
a) bar &amp;#x300; and some more text /bar
is not fully normalized. On the other hand,
b) bar and some more tex&amp;#x300;t /bar
is fully normalized, because there is no "x with grave"
precomposed character in Unicode, and "x&amp;#x300;" is the only
way to denote an 'x' with a grave. But how do we distinguish
between case a) and case b)? This distinction is made in
the relevant format (e.g. XML 1.1), which defines the
'relevant constructs', in this case "element content".
Relevant constructs cannot start e.g. with a combining
grave character, but they can contain such a character
internally, unless of course in a case such as a&amp;#x300;,
where it would clearly not be in NFC.
So XQuery should define the relevant constructs when it
speaks about text normalization, the same way XML 1.1
defines the relevant constructs (see http://www.w3.org/TR/xml11/#sec2.13).
My understanding is that in the case above, you are dealing
with simple strings, so the only thing you need to say is
that the relevant construct for the purpose of full normalization
is the whole string.
Hope this helps. Regards, Martin.
