According to the spec:
insertRow
Insert a new empty row in the table. [...]
Parameters
index The row number where to insert a new row.
What should the behaviour be if the table currently has
less than (value of) index rows? Should the new row be
added at the end; or should all the intervening rows be
inserted?
My preference is for the latter, on the grounds that the
following conditional should always be true,
HTMLElement newRow = someTable.insertRow(index);
if(((HTMLTableRowElement)newRow).getRowIndex() == index)
// should always be true
Alternatively, the insertion interface on HTMLTableElement
might be better if modified to match that of
HTMLSelectElement ... but I realize it's far too late for
that now :-(
Cheers,
Miles
Miles Sabin Cromwell Media
Internet Systems Architect 5/6 Glenthorne Mews
msabin@cromwellmedia.co.uk England
Another question is into which TBODY the row should be inserted, if
the specified index falls on a boundary between table sections. E.g.,
if the existing table "fruitable" looks like
what does fruitable.insertRow(1) do? My suspicion is that it should
add a row to the TBODY, since there is a Node.insertBefore method and
not Node.insertAfter
And I hesitate to ask this, but is Table.rows supposed to put the rows
from the TFOOT before or after those from the TBODY? They occur
before in the HTML, but logically should come after in the table.
John T. Whelan
whelan@iname.com
Miles,
1. Most people expects insertRow(getLength()) to append a row yet given
index is clearly not in the range of valid index values.
2. index can be end up being a very large number erroneously. I think it is
safer to append just one row.
Docuverse DOM SDK's implementation of the HTML layer appends just one row at
the end of the table.
Best,
Don Park
Docuverse
is
Agreed. Rephrasing the question, is it better to generalize the
just-past-the-end behavior, or recognize it as a specific expression of
"append"? The former has convenience benefits, the latter has
application-design-error-detection benefits. Given the past decisions in
favor of making the DOM help novice programmers, I lean toward "tell them
they made a mistake" rather than "assume they knew what they were asking
for."
Joe Kesselman / IBM Research
Unless stated otherwise, all opinions are solely those of the author.
You mean "keep reminding the users of their stupidity until they are forced
to choose between hiring a consultant and a psychiatrist?" I am all for it
since I do consult on the side and got an endless supply of aha and hmm to
pass off as a shrink as well. g
How do we let the user know that they made a mistake? A shrug (return null)
or a kick in the groin (throw an exception)? Neither is documented so it is
no longer a matter of interpretation.
Best,
Don Park
Docuverse
This goes back to basic disagreements over what we're accepting as the
least common denominator. I don't think further debate's going to move
either of us at this late date.
Joe Kesselman / IBM Research
Unless stated otherwise, all opinions are solely those of the author.
Joe,
It was my fault for not tagging my joke. Let me try again.
The problem is that even if we are to inform the user of unspecified
behavior, how do it at after REC? Documentation for insertRow does not say
that null might be returned nor does it say that an exception might be
thrown. Do we go for Errata?
Don
My understanding is that
fruitable.insertRow(1)
is equivalent to
fruitable.insertBefore(
fruitable.getOwnerDocument().createElement("tr"),
fruitable.getChildNodes().item(1))
so I think you are correct.
Good question. I believe that the original document layout takes precedence
over logical order.
Best,
Don Park
Docuverse
Don Park wrote,
In the light of a previous reply to a query of mine on TBODY,
this can't be right. Something more like,
Node next = fruitable.rows().item(1);
next.getParentNode().insertBefore(newRow, next);
would seem appropriate, allowing for TR elements being nested
within THEAD, TFOOT or TBODY.
Cheers,
Miles
Miles Sabin Cromwell Media
Internet Systems Architect 5/6 Glenthorne Mews
msabin@cromwellmedia.co.uk England
If the behavior is really undefined in the spec, we should post a statement
in the Errata anyway... if nothing else, to warn users that it _is_
undefined and behavior may vary. If we're doing that anyway, we may or may
not want to pick an answer and nail it down.
Joe Kesselman / IBM Research
Unless stated otherwise, all opinions are solely those of the author.
Oh, yeah. That is what I meant. I am not fully awake yet.
Don Park
Docuverse
