8.9. Furnish keyboard shortcuts for form elements
This guideline's example places the ACCESSKEY attribute on the
LABEL associated with the form control.
1. If this is the preferred method of doing this sort of
thing, then why do all the form controls have ACCESSKEY
attributes themselves?
2. BUTTON and INPUT TYPE=BUTTON don't have
labels associated with them and the ACCESSKEY should
be directly specified on these controls.
3. I don't quite understand why we even have access keys
for forms at all. It seems to me that for any practical
web-based form it isn't really usefull not to mention
kind of crazy if the keys change on every web page.
On some forms, because of their size, using accesskeys
would be impossible. Does someone have a comprehensive
vision of how this is supposed to be used?
Josh Krieger
CAST
My personal experience has been that there is a number of web-based forms
which I need to use often. It is slow and tedious to have to move the
cursor to each item in such a form. I would much prefer to be able to use
access keys as a means of quickly selecting the desired fields. Since I
use the same forms repeatedly, it would not take long to learn which keys
were associated with the various controls. The result would be a much
quicker and more satisfying approach to form completion tasks.
It has been my observation, from using both braille displays and speech
synthesizers to access computers, that it is usually desirable to reduce
as far as possible the amount of time which is spent reading menu items
and lists of options, especially in applications with which one is
familiar. An interface which requires the user to navigate through a list
of items and select one or more of them, is very easy to work with at
first, but quickly becomes frustrating as one's knowledge and experience
with the software develops. This is the primary reason why access keys are
so important for those who are relying on braille or speech output.
The Microsoft Enable web site uses ACCESSKEY=Q to get to the QuickLink list
box of choices. A experienced user of the site can go in, press ALT+Q,
arrow to the correct link and press Enter to get to it. If using Tab
navigation, they would have to wade through a long series of links.
Large forms will have difficulty with assigning unique identifiers.
ACCESSKEY comes in handy for HTML dialogs and smaller forms. I would say
that if your form is so large that you cannot come up with unique
ACCESSKEY's, then it's a usability problem and suggestion that the page be
broken up.
8.9. Furnish keyboard shortcuts for form elements
This guideline's example places the ACCESSKEY attribute on the
LABEL associated with the form control.
1. If this is the preferred method of doing this sort of
thing, then why do all the form controls have ACCESSKEY
attributes themselves?
2. BUTTON and INPUT TYPE=BUTTON don't have
labels associated with them and the ACCESSKEY should
be directly specified on these controls.
3. I don't quite understand why we even have access keys
for forms at all. It seems to me that for any practical
web-based form it isn't really usefull not to mention
kind of crazy if the keys change on every web page.
On some forms, because of their size, using accesskeys
would be impossible. Does someone have a comprehensive
vision of how this is supposed to be used?
Josh Krieger
CAST
I would add that users of Windows and some other operating systems are used
to finding access keys on nearly all dialogs and forms. Keyboard-centric
users find they save time and effort, and this is even more important for
users who have difficulty typing. We consider it a critical goal that
applications and forms written in HTML be no less accessible than those
written with other technologies.
Another suggestion might be that UA provide an option to visually indicate
the access key for any element, such as by appending a constructed string to
the end of the label or even inserting a textual label where there was none.
This would certainly alter the presentation and layout of the page, but no
worse than the ability to force all ALT= text to be displayed in place of
images regardless of the image's size.
The Microsoft Enable web site uses ACCESSKEY=Q to get to the
QuickLink list
box of choices. A experienced user of the site can go in, press
ALT+Q,
arrow to the correct link and press Enter to get to it. If using
Tab
navigation, they would have to wade through a long series of links.
Large forms will have difficulty with assigning unique identifiers.
ACCESSKEY comes in handy for HTML dialogs and smaller forms. I
would say
that if your form is so large that you cannot come up with unique
ACCESSKEY's, then it's a usability problem and suggestion that the
page be
broken up.
-----Original Message-----
8.9. Furnish keyboard shortcuts for form elements
This guideline's example places the ACCESSKEY attribute on the
LABEL associated with the form control.
1. If this is the preferred method of doing this sort of
thing, then why do all the form controls have ACCESSKEY
attributes themselves?
2. BUTTON and INPUT TYPE=BUTTON don't have
labels associated with them and the ACCESSKEY should
be directly specified on these controls.
3. I don't quite understand why we even have access keys
for forms at all. It seems to me that for any practical
web-based form it isn't really usefull not to mention
kind of crazy if the keys change on every web page.
On some forms, because of their size, using accesskeys
would be impossible. Does someone have a comprehensive
vision of how this is supposed to be used?
Josh Krieger
CAST
I think having a visual indication of the availability of the ACCESSKEY is
important and we need to have something in the UA guidelines.
Jon
8.9. Furnish keyboard shortcuts for form elements
Jon Gunderson, Ph.D., ATP
Coordinator of Assistive Communication and Information Technology
Division of Rehabilitation - Education Services
University of Illinois at Urbana/Champaign
1207 S. Oak Street
Champaign, IL 61820
Voice: 217-244-5870
E-mail: jongund@uiuc.edu
WWW:http://www.staff.uiuc.edu/~jongund
The access key is especially needed when using
browsers like IE that are broken with respect
to what "next link" as per the tab key means--
for instance you can search through a page in IE, and then
hit tab,
and you will find that you wont necessarily jump to the link
closest to where you stoped searching.
you get better behavior purely because emacs does the right
thing with incremental search.On real browsers like Emacs/W3
8.9. Furnish keyboard shortcuts for form elements
Best Regards,
--raman
as representative of my employer, Adobe Systems Inc.
I think people misunderstood some of what I was talking
about. The first 2 points below are technical questions
about how we use the ACCESSKEY, LABEL, and FORM controls
together. The last point, a more general comment, was
about the praticality of many different web pages having
different sets of command keys making them hard to learn
and use. It would seem to me that while having author
customized access keys on a web page/site may be useful
in particular instances, it is not generally so. Further,
it is not nearly as useful as a user-agent standardized set
of keyboard commands that would guarantee that all web
browsers allow movement through forms, links, image maps,
etc. in the same manner using the same keys.
Josh Krieger
8.9. Furnish keyboard shortcuts for form elements
