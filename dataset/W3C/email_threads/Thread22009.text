Hi,
I'm currently investigating the effort for converting our existing DOM
Level 3 L&amp;S tests to the framework.
I'm only scratching the surface here, I has been a while since I've
looked into the testsuite in detail, so forgive me if questions have be
asked before.
Issues:
1. The current frameworks relies on a load methods in the framework that
loads a document. Based on that parsed documents tests are written.
With Load and Save this is not very usefull because you need to test the
load.
2. The schema for DOM L3 and the stylesheets to produce the tests aren't
available as far as I can see, writing a first test is therefore pretty
tough because there is no way you can get an DOMImplementationLS.
3. Testing serialization is difficult as well in the current framework
because there are no tools to test the serialized form. Sure you could
reparse it but that is not a good basis to test the serialized form
since the document may/will change during parsing. Examples here are
pretty-print, discard-default-content etc.
4. DOMInputSource, DOMEntityResolver, DOMBuilderFilter, DOMWriterFilter
and DOMErrorHandler don't have a factory method. The test needs to
provide an implementation that implements the interface. Any ideas on
how to solve this in the framework.
Jeroen
X-Hive Corporation
Jeroen van Rotterdam, CEO
e-mail: jeroen@x-hive.com
Hi Jeroen
Thanks for looking into writing tests.
As a first comment, I can only agree that we have a problem with the DOM
TS ML for level 3 as the other ones (levels 1 &amp; 2) are generated
directly from the specifications. As Level 3 has not yet been released,
this needs to be resolved.
/Dimitris
If DOM L2 is generated, how do you write a test for NodeFilters in DOM
L2 Traversal. There is no factory method for the creation of NodeFilter
as well.
Jeroen
X-Hive Corporation
Jeroen van Rotterdam, CEO
e-mail: jeroen@x-hive.com
That should be level2 Core.
/Dimitris
Ok,
So what's the planning for extending the framework to DOM Level 3 ?
I won't be able to convert tests before the stylesheets are available.
Jeroen
X-Hive Corporation
Jeroen van Rotterdam, CEO
e-mail: jeroen@x-hive.com
As it stands now, the framework generates the schema for the tests from
the source of the specifications themselves. However, these are the
published specs, not drafts.
Technically it would be possible to generate the level 3 schema
languages too, if the xml sources for the specs are publically
available, but as the specs change, so would the tests.
On the other hand, there's an intention to tie the test production
closer to specification authoring, so maybe it's not a bad idea.
Let's have a discussion here to hear people's views, and I'll take it up
with the DOM WG as well.
/Dimitris
You wouldn't use load , you'd use something like:
I've made some light attempts at generating a DOM LS schema and DTD, but
didn't perserve since there wasn't anyone immediately interested in it.
I'll see what I can do. It does not require waiting for the drafts to move
to a recommendation status.
There are some hints of this in the test language with, so far unused,
language elements that I put in to support testing DOM L2 Events
(EventMonitor.*, handleEvent). The xmlconf DOM L2 Events test used a stock
implementation of EventListener that would capture all the events, so that
you could query it after the mutation.
handleEvent basically was intended to be used to define something like an
anonymous inner class.
Take a look at the xmlconf event tests
(http://cvs.sourceforge.net/cgi-bin/viewcvs.cgi/xmlconf/domunit/JUNIT/NET/so
urceforge/XMLCONF/DOMUNIT/dom2/events/) and see the approach that I took
there.
handleEvent basically was intended to be used to define something
like an anonymous inner class.
Ok, sounds promising.
Lets have a look at a simple example derived from our testsuite to verify
the setup. (bare in mind that this is the first test I'm writing using the
framework...)
public class LSTest {
DOMImplementation implementation ;
DOMImplementationLS lsImplementation;
Document document ;
DOMBuilder builder ;
MyDOMBuilderFilter myfilter ;
public void testFilterStartNode() throws Exception {
lsImplementation = (DOMImplementationLS) implementation;
builder = lsImplementation.createDOMBuilder
(DOMImplementationLS.MODE_SYNCHRONOUS);
myfilter = new MyDOMBuilderFilter();
builder.setFilter(myfilter);
document = builder.parseURI(getURL("test.xml").toString());
assertEquals("elt2 is skipped, so document element has only one child",
1, document.getDocumentElement().getChildNodes().getLength());
assertEquals("That one child is elt1", "elt1",
document.getDocumentElement().getFirstChild().getNodeName());
class MyDOMBuilderFilter implement DOMBuilderFilter{
public int startNode(Node element) {
boolean accept = ! element.getNodeName().equals("elt2");
if (accept) {
return NodeFilter.FILTER_ACCEPT;
} else {
return NodeFilter.FILTER_REJECT;
public int endNode(Node enode) {
return NodeFilter.FILTER_ACCEPT;
public int getWhatToShow() {
return NodeFilter.SHOW_ELEMENT;
The XML file for the actual test would look something like:
test xmlns="http://www.w3.org/2001/DOM-Test-Suite/Level-3"
subject resource="http://www.w3.org/TR/DOM-Level-3-ASLS/load-
save.html#LS-Interfaces-DOMBuilderFilter"/
createDOMBuilder var="builder" obj="lsImplementation"
mode="MODE_SYNCHRONOUS"/
-----asserts-----
If this is somehow correct than I guess the dtd needs some work, especially
when you look at the definition of var
By the way, how are constants handled ?
jeroen
Jeroen van Rotterdam
X-Hive Corporation
jeroen@x-hive.com
I was planning to build the DOM 3 schemas and DTD's tonight, but someone
called and invited me over for movie and pizza. Hopefully tomorrow night
and maybe I get finally get some of my DOM Events tests ported.
Symbolic constants have so far just been represented by their assigned
integer value. That is, the existing tests don't check if the nodeType for
an element is NODE_ELEMENT, they check that it is 1.
If possible, you'd like to preferentially use stock implementations of the
interfaces instead of using the anonymous inner class form. For example, in
the xmlconf events tests, most of the test attach the stock "EventsMonitor"
class which captures all the events and allows you to make queries
afterwards. Only tests that need to do things like call stopPropagation use
the anonymous inner class form. Don't know what stock objects would be
useful for the DOM L3 L/S, but hopefully you could express most of the tests
using one or two stock implementations for each interface and only use the
anonymous inner classes for the oddball cases.
