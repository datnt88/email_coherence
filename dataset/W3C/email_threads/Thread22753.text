I recently had occasion to look at the DOMBuilder interface in
the current "Level 3" WD:
I'd like to suggest that four of the default feature settings are
inappropriate. These should all default to 'false', not to 'true'
- create-entity-ref-nodes
- white-space-in-element-content
- cdata-nodes
- comments
The rationale is that all those node types are "syntactic sugar"
and not intended to convey logically significant information to
applications. This means that creating them by default is
inappropriate (it encourages _use_ of insignificant "sugar") as
well as undesirable (it wastes memory). Applications that, for
legacy reasons, want such sugar can ask that it be reported;
other applications shouldn't need to bother.
It may be worth considering "comments" separately, since
they unfortunately show up (legacy processes?) in the XPath
data model. I think it's appropriate to discourage their use
everywhere, but reasonable people might expect a DOM
to handle "full" XPath without needing to enable comments.
Additionally, setting these flasgs to 'false' should be required, not
optional; only the "comments" flag requires that. (That's implied
by changing to defaults of 'false'.) Having "false" be optional
forces applications to manually filter out such sugar, and makes
this feature flag much less useful than it ought to be.
I'd also suggest revisiting the "charset-overrides-xml-encoding"
flag. Minimally, document that changing this default (to 'false')
makes applications violate the XML standard. It'd be good to
at least describe why this would be desirable. (For example,
stating that it may be necessary to work around misconfigured
web servers.)
Related, the "validate-if-cm" flag has a similar issue. Setting it
to "true" violates the XML specification of a validating parser;
that should be identified as a reason to keep this flag cleared.
Also, there seems to be some confusion in the text about
whether to call these "properties" or "features". Please
refer to them using only one term, preferably "features"
or, for more suggestive language, "feature flags" (which
captures the notion that these are boolean values).
- Dave
Remember, one man's "syntactic sugar" is another man's
"round-trip-ability". It's really hard to argue that either option is
clearly preferable, which is why we're supporting both. Since it's trivial
for users to explicitly override the defaults, and since it looks like half
the population will do so no matter which defaults we set, I really don't
find the syntactic-sugar argument a compelling one.
The XML Recommendation explicitly says that processors _will_ deliver
whitespace-in-element-content as part of the document's content (though it
also says that this whitespace shall be flagged as being in element
content, which past versions of the DOM didn't support). Our default should
be for maximum conformance, and therefore should be to include these nodes.
If the user explicitly requests that they be filtered out, we can do so...
but we can't do it unless they ask for it.
For the rest... I don't think it's desirable for different options to
default in different directions, so the whitespace decision may constitute
a sufficient precident to nail down the others. It strikes me as simpler to
say "The default is to build everything, and the options allow you to
filter out the portions you aren't interested in " than to try to explain
the less-obvious concept of "filtering things in" -- especially if we are
also allowing user-written filters, as has been proposed.
Re properties versus features: DOM convention has been that the term
"feature" replies to an optional module of the DOM API. If a flag doesn't
control something which we've defined as a feature, we shouldn't use that
term.
Joe Kesselman / IBM Research
Not until supporting a "no-sugar" diet is "required", not "optional";
you seem to have ignored that (distinct) point. (Likewise the
comments about two non-sugar feature flags -- which can be just
doc fixups.)
Since I've argued plenty for round-tripping support myself (though
normally not using DOM :) I won't argue against it. I'll just say
I think that sugar-aware round-tripping is in the 20% app space, not
the 80% that should govern default settings.
That doesn't follow. I think it's sufficient to provide that (ignorable
whitespace) data on request. Though whitespace is always a messy
issue, since strictly speaking only validating processors can be relied
on to tell when it's ignorable. (Which is another doc issue that ought
to be addressed.)
My suggestion was to default more simply, not do so inconsistently:
"The default is to record only things that are supposed to matter to
applications, but you can save other syntax if you want."
That doesn't resolve the issue though. Both "property" (in explanatory
text) and "feature" (in the API) are both used. Perhaps switch over
completely to unadorned term "flag"? That will involve changing the
IDL ... which now uses "feature" to refer to something other than an
optional module. (Why not call them "optional modules"? :)
- Dave
Both modes are "requried" by some applications. Both modes are available,
at the application's election. I don't think that provides particularly
clear guidance re which should be the default, either way; setting a flag
before parsing isn't exactly a major hardship or performance impact, and a
convenience routine to yield a parser configured as you need it is fairly
trivial.
For that reason, I'm not really dogmatic about which way this should go. I
do think that having the DOM default to building as complete a DOM as
possible and filtering down from there is a touch cleaner,
architecturally... but I grant that this is a matter of taste.
"property" (in explanatory text) and "feature" (in the API) are both used.
If they're both used to refer to the same things, we should certainly fix
it. If it's a matter of "If this feature is supported by the DOM, it can be
disabled by setting that property" (where the feature is the behavior/API
and the property is the flag), we should consider whether our intent is
clear and make sure that "property", like "feature", goes into the
glossary.
A bit late to change it now, especially given the hasFeature() method.
Joe Kesselman / IBM Research
Exactly why I think it's wrong to make one of them "optional".
Please go read that part of the spec to see what I've been talking
about: some of the relevant flag settings are "optional". I'd like
your next response to that point to indicate you at least can see
the issue I've raised ... :)
Architecturally, such issues can't matter ... unless things are set up the
way they are now, so that the "filter down" (at build-time) approach
can't work reliably! (See above.)
Stylistically, it certainly does matter whether the default policy settings
aim for the 80% or the 20%. I think the defaults now aim for the 20%,
but I get the feeling some people like it that way.
"property" (in explanatory text) and "feature" (in the API) are both used.
As I said. Again, go read the WD ... I think that since some of the text
needs to change, it'd really be better to use a word that captures the
boolean nature of this beast, such as "flag".
- Dave
So your concern is not the defaults per se (as your original phrasing
seemed to suggest), but whether all implementations will permit you to
override those defaults?
If that's what you're seeing, then I agree that I have to reread the
current draft.
Joe Kesselman / IBM Research
My original note reported five separate issues, including both
the suboptimal defaults (one issue) AND this separate one:
