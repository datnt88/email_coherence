(It's gotten so I have to date them! :-)
3.2.2 The Authorization Request Header
response = "response" "=" request-digest
Later there's this text:
The definition of request-digest above indicates the encoding for
its value. The following definitions show how the value is
computed.
Unfortunately, there *is* no "definition ... above". The non-terminal
request-digest has no syntactic definition. I suspect it should be
request-digest = " *LHEX "
3.2.3 The Authentication-Info Header
cnonce and qop are used in the calculation of response-digest. The
client is not required to send either cnonce= or auth=. So I assume
(correct?) that the null string is used for values for omitted
attributes in the calculation.
If (to use cnonce as the example) cnonce was omitted, should
Authentication-Info omit cnonce, or should it send cnonce=""? Same
question for auth.
Dave Kristol
It might be better to say that Authentication-Info should only be
sent if qop (and hence cnonce) are present.
Another question: Unless I am mistaken, at one point in the long
sequence of digest drafts, the Authentication-Info header could be
supplied by either the server or the client. It would be useful
for the client to be able to supply the digest of POSTed data
or a file which is PUT. Being able to assure the integrity of
client supplied data would be very useful. Did this fall through
the cracks, or am I just missing this functionality somewhere in
the draft?
John Franks
john@math.nwu.edu
But cnonce is not required, even when qop is specified. Only
nonce-count is required.
Hmmm. There does not seem to be a way for the client to send a digest
of the entity-body. If it could, though, there's an ambiguity about
qop=auth-int:
1) C -S
HTTP/1.1 401 Unauthorized
WWW-Authenticate: ... qop="auth,auth-int", ...
2) C- S (speculative)
POST /some/entity HTTP/1.1
Host: blah
Authorization: ... qop=auth-int, ...
Authentication-Info: reqauth= some suitable digest , ...
3) C -S (problematic)
HTTP/1.1 200 OK
Authentication-Info: qop=auth-int, rspauth= entity digest
The problem is that the client chose (this is speculative -- the spec.
doesn't read this way) "auth-int", in order to send an entity digest.
But the server is obliged to respond in kind, which means it must do a
digest of what is probably not a very interesting response.
Dave Kristol
It is in the Authorization header now. In section 3.2.2, it says:
] request-digest = "  KD ( H(A1), unq(nonce-value)
] ":" nc-value
] ":" unq(cnonce-value)
] ":" unq(qop-value)
] ":" H(A2)
] ) "
] If the "qop" directive's value is "auth" or is unspecified, then A2 is:
] A2 = Method ":" digest-uri-value
] If the "qop" value is "auth-int", then A2 is:
] A2 = Method ":" digest-uri-value ":" H(entity-body)
So A2 in the response digest (poor name, that, because it is the
response to the challenge, but it appears in a request) contains the
hash of the body. That way we don't need another header. I don't
believe that we specified that this may appear in a trailer,
though.
I think this is an oversight. I suspect the intent was that
cnonce MUST be supplied if qop is.
Actually Scott Lawrence straightened me out about this. The client's
POSTed or PUT data must be MD5 digested if qop="auth-int". The digest
result is part or the response digest. It is included in "A2" in
the case that qop="auth-int".
Actually I think the spec DOES read this way and the server is
required to respond with a digest of what may be an uninteresting
response. The choice is not entirely with the client. The server
may only offer one of "auth" or "auth-int". But if it offers both
the client gets to pick and the server must digest its response.
John Franks
john@math.nwu.edu
