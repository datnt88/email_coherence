Joseph,
I owe you this since a long time.
The idea and solutions described below were developed as an outcome of
the dependency - discussions with XForms.
Steven Pemberton suggested a very simple binding that would allow to
bind a P3P-Policy to arbitrary XML-Elements. He thought it would be a
quick and short specification to do as it would define a generic
attribute like xml lang=..[1] This could be done in a separate
specification, but is also a possible candidate be included in the
[beyond HTTP] stuff.
So I suggest to specify an XML-attribute that can be generally used to
point to a _Policy_ (not PRF). The binding is no issue as the attribute
itself defines it's own binding by the element it is sitting on.
In a past email, Steven Pemberton gave an example of how this could look
like[2]
1. http://www.w3.org/TR/REC-xml#sec-lang-tag
2. http://lists.w3.org/Archives/Member/w3c-forms/2003JanMar/0127.html
Best,
Rigo Wenning W3C/ERCIM
Policy Analyst Privacy Activity Lead
mail:rigo@w3.org 2004, Routes des Lucioles
To add a bit more context.... such a binding would be useful in (at
least) the following cases:
a. When you want to bind a P3P policy to an XML document that is not
identified by a URI.
b. When you want to bind a P3P policy to a particular XML element
within an XML document, but not to the entire document.
c. When you want to bind a P3P policy to an XML document and don't have
the ability to use the WKL or header methods for the PRF
As I recall, there were two other ideas that were discussed that should
probably be considered along with this:
- A referencing mechanism that is nearly identical to the HTML and
XHTML link tags in the P3P1.0 spec that could be used with any XML
document (this is another way to satisfy point c above)
- An extension to the PRF syntax to allow binding to a particular XML
element at a URL rather than to the whole document at that URL (this is
another way to satisfy point b above)
Lorrie
Yes, and now I expect to have little time for this issue.
I don't completely understand. I note that in the CR [a] they have a
mechanism for associating an input with a "p3ptype." (I'll also note that
for historical purposes some privacy advocates *objected* to P3P
controlling the exchange of information under a policy. For some reason,
when we made the policy orthogonal to the actual auto-fill or control of
the exchange, which permits someone to make misrepresentations in the
policy and then solicit lots of unrelated information in a form, they felt
*happier*. shrug/ )
[a] http://www.w3.org/TR/xforms/slice6.html#model-prop-p3ptype
You seem to be suggesting that you'd associate an actual policy with an
element (e.g., p3ppolicy), for example:
but I don't think that's what Steven is discussing in [2]. I *think* they
are using p3ptype and perhaps asking two questions:
1. How/when is the evaluation of a policy governing a form field
corresponding to a p3ptype affect the auto-filling of the form. I think
Steven is comfortable with the model there but I can't say I understand
everything involved there.
2. Even if the P3P policy permits its release, should it be released if the
form field is not displayed to the user via old CSS mechanisms, or XForms
switch/case mechanism. I think it would be a good idea for the HTML family
of specifications to recommend that fields should NOT be auto-filled if
they are not presented to the user. (Of course, agents will not be able to
figure this out in all cases as one could use various size,color, CSS
tricks?)
[2] http://lists.w3.org/Archives/Member/w3c-forms/2003JanMar/0127.html
The use-case was initially, that privacy implications of XForms could be
addressed by every single field and not only for an entire Form.
I see that it is partly already in the [BH] draft as they have a p3p
element for the soap-binding. This could be done in a more elegant way
using the link to a p3p-policy as an attribute.
Best,
Rigo
I can't say I understand, example please.
You introduce a privacy / element that carries the URI to a PRF
Instead of linking to a PRF and from the PRF back to the instance, you
could directly reference the policy:
so the example in "The Scope of Layers and Bindings (HTTP and SOAP)"[1]
would change to something with direct connection to a policy. That would
allow to have a policy per element as domain-info might have a different
impact than PersonalInfo (but hasn't here as we have whois)
So I give you the example of how powerful this could be. As it is
generic to XML, it could be also used in RDF.
================rigo-example==============================
env:Envelope xmlns='http://registry.example.com/2003/ns1'
xmlns:env='http://www.w3.org/2003/05/soap-envelope'
Privacy xmlns='http://www.w3.org/P3P/2003/p3p-beyond-http/'
rel='PolP3Pv1.1' href='http://registrar.example.com/P3P/policy-register.xml'
================rigo-example==============================
1. http://www.w3.org/P3P/2003/p3p-beyond-http/Overview.html
Rigo Wenning W3C/ERCIM
Policy Analyst Privacy Activity Lead
mail:rigo@w3.org 2004, Routes des Lucioles
Ah, ok, though it seems to be complicate things for reasons I don't quite
understand yet. Some questions/issues:
1. What is the benefit of splitting the policies out across these sections
over the existing mechanism of having different DATA elements in different
POLICY elements within a POLICIES?
2. In your example, this means that the XML application schema will have to
permit these foreign P3P elements, which prexisting XML formats won't be
able to accomodate, and all such future ones would have to take this into
account for, which I think unlikely.
I do believe that in the future once we have the P3P data structures in
standard XML/schema, it will probably make sense to reconsider the design
of P3P with all of the stuff, but in the medium term P3P 1.0 gives you the
granularity in the policy, and the XForms proposal gives us a way to map a
form element with a DATA ref that one will find in the POLICY, right?
I think this is addressed by the report, the XML instance would have to
reference a policy though with something like:
my:Privacy my:rel='P3Pv1'
my:href='http://registrar.example.com/w3c/p3p.xml'/
Can't the Policy simply enumerate that particular element via
What is WKL? Is this addressed the same way as (a) above?
Yes, this is addressed in the report.
This is the bit I'm not understanding yet.
I don't know if it complicates things as it removes the whole overhead
of referencing and integrates into the natural way of writing down XML.
See your mail to Lorrie: You seem to assume a binding between an
XPointer and a P3P Data-Element. This binding does not exist now. In
fact, that is the second solution Lorrie mentioned in the call today:
Extending the PRF to allow XPointer - Statements and bind a specific
policy to a specific node-set in the XML-Document. This needs a second
document to be written. This adds overhead as you still need a binding
mechanism while an attribute would have an implicit binding of the
policy by the element it sits on.
E.g. your XForms engine would have to implement XPointer for that reason
while the direct attribute would only trigger the simple parsing of that
new attribute which is then delivered to the P3P engine.
So my arguments are:
It is easier to write
It is more intuitive
It is easier to implement
This is ignoring the fact that we are already mixing namespaces today,
if the mixing is well defined. So the XML application schema does not
have to accomodate, but the application must be aware of this generally
available attribute that we have specified in some specification. This
at least what Steven Pemberton suggested. Other Specifications, he said,
could just use this short specification and kind of 'import' it.
So the scope of this is not only addressing P3P 1.0 and Web Services but
also all kinds of future dependencies of e.g. Device Independence
Specifications.
Giles has already written a XSLT-transform to transform P3P data schemas
into XML Schema. So this can be transformed already on the fly. But the
granularity you are claiming is simply not there, as the binding
mechanism is not there. So we have three possibilities:
1/ Stick with the existing binding and require a URI for everything, not
allowing to address sub-parts of a document (e.g. XForms form-fields)
2/ Add a complicated binding mechanism a la XPointer/XPAth to the Policy
Reference File allowing to address a certain nodeset of an existing XML
Document (which still needs to have a URI)
3/ Have an elegant way of implicitly binding a P3P Policy to an
arbitrary XML Element as an addition to the things already under
way in [1]. This attribute would carry it's own namespace. Applications
that are P3P - aware can just use it out of the box by implementing the
desired behaviour. (binding)
1. http://www.w3.org/P3P/2003/p3p-beyond-http/Overview.html
Best,
Rigo Wenning W3C/ERCIM
Policy Analyst Privacy Activity Lead
mail:rigo@w3.org 2004, Routes des Lucioles
The semantics of a P3P policy is that is applies to all data collection
associated with a URI -- you cannot currently exclude data collected at
that URI from your policy. If you only reference a particular element
in your policy and do not reference the other elements at that policy,
then your policy is wrong. This is especially problematic in the case
of multiple policies applying to different elements on a page -- how
would you explain that in the existing framework unless each element
was submitted to a different action URI?
WKL is well known location
Imagine that the INCLUDE syntax in a PRF allowed you to say that the
scope of a policy was a specific set of XML elements found at a URI
rather than to all content found at that URI.
Lorrie
I think the confusion is that the wrong mail has been quoted. My mail
suggesting binding a P3P Policy to an arbitrary element is at
The mail quoted originally is not from me.
Best wishes,
Steven Pemberton
the
Thanks Steven,
this was my mistake, so thank you for the right pointer
The email does not reflect our entire discussion, but it is at least the
main start.
Rigo
Thank you Steven, it's useful to see the original source when trying to
figure out what the issue is! smile/
The problem is, there can be several submit elements, and each
submit could have a different policy associated with it.
I propose removing the privacy element, and adding a p3p attribute
to the submission element to identify the policy reference file for
the submission:
submission action="/submit" method="post"
I'll note that since this email was sent over a year ago, you presently
don't appear [1] to do either of these. Instead,
(a) XForms doesn't have any special mechanisms for the policy association,
instead you reference the existing methods [2] (well known location, link
tag, HTTP header).
(b) Orthogonally, a P3P data element type can be bound [3] to an XForms
instance data node. I assume there must be a one-to-one mapping for each,
so the binding list could get rather exhaustive.
Even your suggestion above did *not* require a per element (e.g.,
"user.personname.given") policy association, only a per submission
association.
[1]http://www.w3.org/TR/2002/CR-xforms-20021112/slice3.html#structure-model-submission
[2]http://www.w3.org/TR/2002/CR-xforms-20021112/sliceC.html
[3]http://www.w3.org/TR/2002/CR-xforms-20021112/slice6.html#model-prop-p3ptype
Ok, hopefully the issue is now represented in:
$Revision: 1.31 $ on $Date: 2003/07/18 20:14:11 $ GMT
