I am increasingly worried by
see
(it does not seem to have made it into www-rdf-comments yet)
Jeremy
My reading of schema datatypes is that with a union type:
o a lexical form can be ambiguous - i.e. might map to different values
depending on which component type is used to do the mapping
o the component types of a union are ordered by the order they are
declared when defining the union
o by default the ambiguity is resolved by applying the first type whose
lex space includes the literal
o the default can be overridden by using an xsi:type attribute
In RDF we always use the default disambiguation rule. If you want to
override, use a more specific datatype in the rdf:datatype attribute.
I guess I'm missing something.
Brian
The comment asks us to reword concepts
A datatype mapping is a set of pairs whose first element belongs to the
lexical space of the datatype, and the second element belongs to the value
space of the datatype:
+ Each member of the lexical space is paired with (maps to) exactly one
member of the value space.
+ Each member of the value space may be paired with any number (including
zero) of members of the lexical space (lexical representations for that
value).
to change "including zero" to "one or more", if we do this then we have to
change the lexical-to-value mapping from being a function which maps a
string to the first value associated with it in an XML Schema union, to
being a relation, which maps a string to any of the values associated with
it. XML Schema provides a mechanism by which the appropriate member of the
set of associated values can be chosen; this mechansim is not open to RDF
datatyping.
I am increasingly inclined to urge rejection of both this comment and the
renaming to use XML Schema's terminology comment on the grounds that we wish
to be able to reuse XML Schema union datatypes without reusing the whole XML
Schema framework.
Jeremy
I agree that we should reject the comments.
I think we are trying to look at this in too much detail. Insofar
as RDF is concerned, an XSD union datatype is just an rdfs:Datatype,
i.e., RDF doesn't see that it is a union datatype. That's irrelevant.
The behavior of the union datatype is the same as for any rdfs:Datatype.
It has a lexical space, a value space, and an N:1 mapping from lexical
to value space. Period. The fact that the datatype in question is
a union datatype and the ordering of the component datatypes is taken
into account as part of the realization of its L2V mapping is completely
irrelevant to RDF Datatyping.
Given an XSD union datatype, and a lexical form, that lexical form
maps to one and only one value -- insofar as it is used with RDF.
xsi:type has no relevance to RDF and therefore one cannot use it
within RDF/XML to force some other mapping other than defined by
the union datatype definition.
Patrick
/0281.html
No, I don't think you're missing anything. Though I would put all
of the above simply as informative and note that it is completely
out of scope for RDF Datatyping as RDF doesn't actually see a
union datatype as a union datatype, but as an rdfs:Datatype with
a clear and regular L2V mapping. And yes, the default disabiguation
rule is always used -- but *we* don't use it, rather, RDF simply
provides no means to use xsi:type therefore one cannot override its
use by an XML Schema datatype savvy processor.
Patrick
Patrick
/0281.html
