Checkpoint 10.2 has labels preceding fields, which make obvious good sense
for text fields.
However, for radio buttons and checkboxes, which one can think of as
"bullet" controls because they look like bullets, Chuck's curriculum
example has the label following the controls. See
Question: do we change the checkpoint or Chuck's example?
I think we should consider switching to what Chuck has for bullet style
controls.
The first reason is that I think first of all that we'll get pushback from
designers if we want them to reverse the order.
Second of all, since most pages have the fields following bullet style
controls, it could be that people using screenreaders are accustomed to it,
even if it's non-optimal, and it would actually be confusing to change.
Eventually, when user agents support associations between form controls and
labels, the position will not matter.
I suggest that so few pages will go with the order we recommend before that
time, that we change the recommendation or possibly downgrade to priority 3
for checkboxes and radio buttons.
What do folks who use screenreaders think?
Please note that I am not suggesting this order for text fields. Only for
bullet style controls.
Anyway, I'll be talking with a bunch of webmasters monday. I'll let you
know what they think.
Len
Leonard R. Kasday, Ph.D.
Universal Design Engineer, Institute on Disabilities/UAP, and
Adjunct Professor, Electrical Engineering
Temple University
Ritter Hall Annex, Room 423, Philadelphia, PA 19122
kasday@acm.org
(215} 204-2247 (voice)
(800) 750-7428 (TTY)
Cross posted wo WAI GL and WAI EO.
I agree with Len. I think we would be better off requiring consistent
positioning. The checkpoint itself requires proper positioning, but hte
explanatory text says the the label must be above or before the control.
Charles McCN
Checkpoint 10.2 has labels preceding fields, which make obvious good sense
for text fields.
However, for radio buttons and checkboxes, which one can think of as
"bullet" controls because they look like bullets, Chuck's curriculum
example has the label following the controls. See
Question: do we change the checkpoint or Chuck's example?
I think we should consider switching to what Chuck has for bullet style
controls.
It's sort of funny that the only explicit reason I had for placing the
labels after the "bullet-style" controls was to have the controls and the
text align nicely without having to resort to a layout TABLE or trying to
figure out how to use CSS that would work across the major browsers.
Strictly speaking, I think the order of placement suggested in the
checkpoint is valid for text boxes and for controls if the author puts more
than one control/label pair on the same scan-line, so I don't think the
checkpoint should be changed. However, if there is only one control/label
per line, I think the ordering is unimportant since the control and label
are associated by default.
To maintain internal consistency with the guidelines, I guess I should
move the labels to the other side of the controls (lead by example!).
Either that, or I could add a comment to the slide (or an associated page)
explaining why I chose the placement and why it is not necessarily a bad
thing. I look forward to hearing what Len's colleagues have to say about this.
By the way, in this case an automated accessibility validation tool
hard-coded to the checkpoint would indicate an access-error when one does
not really exist, although I suppose a rule could be written to test for
the exception.
Chuck Letourneau
Starling Access Services
"Access A World Of Possibility"
e-mail: info@starlingweb.com
URL: http://www.starlingweb.com
Putting a control label above the control has serious problems for users of
older screen readers. This is only marginally acceptable, and then only if
there is no more than one control on line following label.
Expansion: The first-level of display scope in the screen reader is the
highlighted text of the control with focus. In some browsers this will
include the label. That is good style. The label should share the
highlight when a control gains focus. The choices of reading scopes in the
screen reader are roughly: the screen reader reads all in document
serially, just the current line, or just the current
focus-or-other-highlight. To get from a checkbox to the label in the
_previous_ line the user of the screen reader has to back up _twice_ in
searching for better context. Once to read the whole line, and then to
read more than the current line. Checking the previous line will be an
arcane trick of the trade. Next natural level of retreat above "read the
whole line" is to start over at the top.
A really bad scenario is the defacto table with multiple labels associated
with multiple controls by layout artifacts.
Neal, have I got this pretty much straight?
Forcing the label to come before a checkbox or radio button has serious
drawbacks in terms of visual values. Lining up a set of parallel
clickables in a column aids usability. We need to compromise better here.
Consider FatLinks in User Agent as a better fix.
Steve McCaffrey is interested in accessible forms. Please get comments on
examples from him and Gregory Rosmaita before finalizing any adjustments or
interpretations of the guidance in this area.
Al
Hi Al, yes, this is much of it, but, depending on the age of the screen
reader being used, it is actually worse than even you implied. The thing
the screen reader user who is using an older screen reader also has to do
to read the label above the focus is to some how change reading sources.
One is tabbing to the items in focus with what could be called the
application cursor or whatever is following the focus. But when one gets
to a focus area, it is then necessary to begin reading the text, with the
(mouse pointer or screen reader review) cursor either line by line, by
word, by character, etc. as you pointed out. As one tabs to a new focus
area, the mouse pointer or screen reader review cursor is probably nowhere
near the area of the screen which currently has the focus. In newer screen
readers, this is not a large problem although it is sometimes tricky.
there is, however, a reasonable expectation that one can route the mouse
cursor to the area of current focus. In some older screen readers, this
is not nearly as easy. Thus, when one tabs to some area of focus and then
wants to read the line above that focus, one has to first find the text in
question from perhaps a good ways away. After reading all the text
necessary to allow one to discover where they are and where the focus is,
it is likely that most persons will have their concentration totally
shattered and they will be lucky if they can even remember what they were
looking for in the first place.
Neal Ewers
Trace Research and Development Center
5901 Research Park Blvd.
Madison, WI 53719
E-mail: ewers@tracecenter.org
Web site: http://www.trace.wisc.edu
