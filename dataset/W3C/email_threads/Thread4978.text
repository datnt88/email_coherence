This is a request for the rationale as to why the quantifiers
for "()" and "none" changed between Aug 2002 and May 2003. In
Aug 2002:
quantifier(()) = 0
quantifier(none) = 0
In May 2003, this changed to:
quantifier(()) = ?
quantifier(none) = 1
Why? The current version seems rather odd. Why should
quantifier(none) be 1?
- Paul
BEA Systems, Inc.
A little detective work indicates that this has been the definition
since May 2003:
Returning to Nov 2002, we see the old definition:
which was unnecessarily complex. First, there is no '0' quantifier
in the language, only ?, 1, *, +. Plus all the entries in
the table for combining the 0 quantifier are redundant
(e.g., () . 0 = () = () . 1),
so we can just get rid of 0 quantifiers entirely. Make sense?
Mary Fernandez mff@research.att.com
AT&amp;T Labs - Research
Mary,
I am sorry but I do not understand.
First, quantifier(none)=1 is really surprising. It is really counter
intuitive with the definition of quantifier.
Second, according to the new rules, one cannot detect
statically that the following expression returns an empty sequence
(and by consequent, one cannot raise the good static errors):
for $x in (), $y in ()
return ($x, $y)
So, no, I am sorry but I do not understand those new rules.
The old rules might have been more complex
but they seemed closer to correctness then the new ones.
Best regards,
Dana
