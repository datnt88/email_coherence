In looking through the DOM specs, I could not discern a way to do the
following:
Given two nodes of a common parent, identify which node precedes the other
in the parent's ChildNodes nodelist.
Is there such a creature in the current specs?
Regards,
-Tom
On Monday, February 28, 2000 5:50 PM, David Brownell
[mailto:david-b@pacbell.net]
You'd basically look at the nodelist yourself. Takes a few lines
of code -- would you seriously expect DOM to save you the work of
writing such a simple subroutine? If so, why?
Dave,
DOM allows me to access a childNode directly by using the item(index) method
off of the nodelist that is returned from childNodes, rather than walking
the nodelist.
So, I was expecting that if I had the reference to the childNode, it would
have an index property that I would be able to use for routines like this,
rather than having to examine the nodelist itself.
Am I really expecting too much? :-)
-Tom
You'd basically look at the nodelist yourself. Takes a few lines
of code -- would you seriously expect DOM to save you the work of
writing such a simple subroutine? If so, why?
Right, the "list" can be implemented as an array (easy to implement
the "item" method) or as a linnked list (more awkward) or some other
data structure.
Perhaps. If you got used to using it, the linked list implementation
would accumulate some bizarre costs since it'd need to recompute that
property pretty often ... but that'd be more reasonable than asking for
a specific "is this child before that one" primitive, as you'd seemed
to be suggesting!
- Dave
Furthermore, if the element is part of an entity, then no single index
will work, as the element node may be in the tree in multiple places.
Schlingt dreifach einen Kreis vom dies! || John Cowan jcowan@reutershealth.com
Schliesst euer Aug vor heiliger Schau, || http://www.reutershealth.com
Denn er genoss vom Honig-Tau, || http://www.ccil.org/~cowan
Und trank die Milch vom Paradies. -- Coleridge (tr. Politzer)
Actually I tend to disagree on that one.
There is some nasty text in the DOM spec saying that the "same" nodes
are EntityRef children as are children of the respective Entity. Is
that what you're thinking about?
But that notion of "same" seems to me like it must be (equals? a b)
rather than (eq? a b), to sneak in two LISP primitives ... since, unlike
the case with LISP, DOM nodes have (non-null) ancestors that prevent
them from being in more than one place at a time. A DOM is a tree,
not a general graph.
(Note to DOM WG: Perhaps the prose on that part of the DOM spec needs
to say what it means by "same"?)
- Dave
