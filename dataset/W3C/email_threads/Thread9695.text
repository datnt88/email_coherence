We build a rule mechanism, as in the know fix, into RDF. I think Jos has
claimed that he has proved something similar, if not the same as this,
works. No one I have suggested this to has like it, usually for different
reasons.
yes, that would be something like
{ :rule3a . ?p rdfd:dcrange ?d . ?p rdfd:valueProp ?q . ?s ?p ?o }
log:implies
{ ?s ?q [ :f ( ?p ?d ?q ?s ?o ) ] } .
{ :rule3b . ?p rdfd:dcrange ?d . ?p rdfd:valueProp ?q . ?s ?p ?o }
log:implies
{ [ :f ( ?p ?d ?q ?s ?o ) ] ?d ?o } .
Jos
The Rule Fix
We build a rule mechanism, as in the know fix, into RDF.
I think adding rules to RDF is a substantial change and out of
scope. Especially this late in the WG cycle.
Graham, this must be a misunderstanding
We have already 10 RDFS-entailment and RDFS closures rules in
and at least 3 draft ones for the RDFD-MT
that fix here is just maybe 2 extra proposed ones for the RDFD-MT
Jos
Jos, I think you're right that it's a misunderstabnding...
I was responding to "We build a rule mechanism", which I understood to be a
means to define rules *in RDF* (similar to log:implies in N3), and which I
think would be a unacceptably substantial change to RDF at this stage. If
this means simply that we define some extra closure rules, then I withdraw
that particular objection.
Thinking aloud... would a new closure rule work?
To get from:
jenny age "10" .
age rdfd:datatype xsd:integer .
to:
jenny age _:x .
_:x xsd:integer "10" .
We'd need a closure rule something like:
{ ?s ?p ?l . ?p rdfd:datatype ?d . ?l rdf:type rdfs:Literal . )
log:implies
{ ?s ?p _:newx . _:newx ?d ?l . }
which isn't quite what the datatyping proposal currently says, because the
rule fires whenever the object of ?p is something denoted by a literal, not
simply when an actual literal is used.
Is this the sort of thing you had in mind? Hmmm... I just found your
earlier posting:
yes, that would be something like
{ :rule3a . ?p rdfd:dcrange ?d . ?p rdfd:valueProp ?q . ?s ?p ?o }
log:implies
{ ?s ?q [ :f ( ?p ?d ?q ?s ?o ) ] } .
{ :rule3b . ?p rdfd:dcrange ?d . ?p rdfd:valueProp ?q . ?s ?p ?o }
log:implies
{ [ :f ( ?p ?d ?q ?s ?o ) ] ?d ?o } .
Is that valid N3? What does { :rule3a . } generate? ... cwm likes it, so
I suppose it's OK; doesn't generate any triples, so I suppose it's a
device for labelling? Hey, even my own N3 parser thinks it's OK.
I guess the [ :f ( ?p ?d ?q ?s ?o ) ] is some kind of analog of a Skolem
function? I guess you might need that for proof finding, but for deductive
closure ... aha, I see -- I called mine "_:newx"!
And rdfd:valueProp relates the property-with-literal-range to a
corresponding property-with-value-range?
Taking all that on board, I guess we're talking about pretty much the same
idea here.
#g
The Rule Fix
We build a rule mechanism, as in the know fix, into RDF.
I think adding rules to RDF is a substantial change and out of
scope. Especially this late in the WG cycle.
Graham Klyne
That's what I meant. Sorry for the confusing language.
Brian
[not getting mail and scraping from archive]
[more than excited about Graham's 'entree']
yes Graham, very much
Jos
The Rule Fix
We build a rule mechanism, as in the know fix, into RDF.
I think adding rules to RDF is a substantial change and out of
scope. Especially this late in the WG cycle.
Hold on, guys. The closure rules are only a technical device in the
MT to relate different notions of entailment (in the latest draft,
posted today, Ive tried to clarify that point a bit.)
Pat
IHMC(850)434 8903 home
40 South Alcaniz St.(850)202 4416 office
phayes@ai.uwf.edu
