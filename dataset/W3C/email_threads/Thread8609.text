Element /h3
is used to convey a u reference /u to code KeyInfo /code
information that is stored at u another /u location. For example,
u several sigantures in a document might use a key verified by /u an
X.509v3 certificate chain u appearing once in the document or
remotely outside the document /u ; each u signature's
code KeyInfo /code /u can reference this chain using a single
code RetrievalMethod /code element instead of including the entire
chain with a sequence of code X509Certificate /code elements. /p
p u code RetrievalMethod /code uses the same syntax as
code Reference /code except that there is no
code DigestMethod /code or code DigestValue /code sub-element and
presence of the code URI /code and code Type /code attributes is
mandatory. code Type /code is the type of the retrieved data after
any code Transforms /code . The possibly transformed referenced data
is a code KeyInfo /code sub-element type or a binary X.509
certificate. The code Type /code attribute, as in Section 4.3.3, is
a URI consisting of "http://www.w3.org/2000/07/xmldsig#" suffixed with
a code KeyInfo /code sub-element type, such as
"http://www.w3.org/2000/07/xmldsig#X509Data", or
"http://www.w3.org/2000/07/xmldsig#rawX509Certificate" to indicate a
binary X.509 certificate. /u /p
Schema Definition:
element name='RetrievalMethod'
complexType content='elementOnly'
element ref='ds:Transforms' minOccurs='0' maxOccurs='1'/
attribute name='URI' type='uriReference'/
attribute name='Type' type='uriReference'/
/complexType
/element
DTD:
!ELEMENT RetrievalMethod (Transforms?)
!ATTLIST Type
URI CDATA #REQUIRED
Type CDATA #REQUIRED
We still have to deal with the mandatorines of that attribute. That means
people HAVE to come up with a type. Is this intended? We only specify a
subset of key types. Consequently people will come up with other types (that
is fine) or throw dummy text in there which seems like a bad thing if they
want to rely upon type information found elsewhere.
Joseph Reagle Jr.
W3C Policy Analyst mailto:reagle@w3.org
IETF/W3C XML-Signature Co-Chair http://www.w3.org/People/Reagle/
I think Type should be mandatory. People who have defined their own
KeyInfo data element can easily construct a type for it.
Donald
From: "Joseph M. Reagle Jr." reagle@w3.org
Resent-Date: Thu, 7 Sep 2000 12:52:14 -0400 (EDT)
Resent-Message-Id: 200009071652.MAA27370@www19.w3.org
Message-Id: 4.3.2.7.2.20000907124935.02bb0920@rpcp.mit.edu
Date: Thu, 07 Sep 2000 12:51:56 -0400
Of course, but what if they don't like the type mechanism and they prefer to
rely upon the namespace in the XML instance? What happens if they want to
rely upon the HTTP header to carry that information? What happens if the
type KeyInfo object changes (a newer version with a tweaked namespace) and
while they want the URIof the KeyInfo signed, they don't want its Type
signed and consequently don't have the ability to change it? Since we aren't
specifying any MANDATORY application behavior with respect to type, why
REQUIRE the syntax?
I'm not wondering if it's easy to do, I'm wondering what requiring it
benefits?
Joseph Reagle Jr.
W3C Policy Analyst mailto:reagle@w3.org
IETF/W3C XML-Signature Co-Chair http://www.w3.org/People/Reagle/
