So let's lose the Space Handling bit.
Amid much rejoicing in Toronto (and probablyu Japan)
Lee
So let's lose the Space Handling bit.
... (too happy/shocked for words)
So let's lose the Space Handling bit.
I wouldn't start dancing in the streets yet. The -xml-space mechanism
came out of many, many hours of discussion in the ERB during which the
alternatives were discussed not just exhaustively but to the point of
literal exhaustion. And this came after a long discussion of the RE
rules in the WG that can be found in the archives. The final vote on
the language in the current draft was unanimous. I haven't seen any
new information presented recently that would change this. The fact
that Tim has changed his mind is interesting but in itself
procedurally insignificant. If it is based on some new information
that was not present during the long discussions that have already
taken place on this subject, I would like a clear statement of that
new information and how it fundamentally changes the considerations
that went into the decision as it presently stands.
Jon
Jon is correct. I thought it was obvious (although I should have said
so) that this was merely a personal point of view that I was advancing
in the WG.
Three things. (a) The principle we voted on sounded reasonable. The
language that was generated in the spec (after a *whole lot* of
work) is messy, inelegant, and I think prone to misinterpretation.
Much like 8879. Note the excellent and difficult question raised by
Paul Grosso in respect of white space at text entity boundaries. I
predict that things like this will keep coming up us a result of
us having opened the Pandora's box of interfering with users' data.
(b) having made the decision to reserve some attribute/element
namespace, we only had to use it once. I think this is a signal
that we're doing something wrong.
(c) Because of our decision on unified attribute name space, no
element to which you might want to apply -xml-space can take an
enumerated-value attribute where the enumeration includes either
"keep" or "collapse". The only solution is to change the
attribute values to "-xml-keep" and "-xml-collapse".
- Tim
We need to keep the concepts of "source" and "destination" separate. I would
be annoyed if my text editor changed the source of my SGML (or C++ or Java)
documents. But in none of those languages am I surprised or annoyed when the
language parser strips out token-delimiting whitespace:
^ indicates token separator
! indicates meaningful space
C++: cout   "Foo Bar"   endl ;
SGML/XML: statement cout lshift Foo Bar lshift endl /statement
These rules are not bizarre inventions from outer space. They follow common
encoding/programming language conventions. There is no "interfering with
users' data".
I haven't yet seen Paul's post that questioned entity/record end handling.
I agree that the attribute thing seems suboptimal to me. Couldn't it be
replaced with a marked-section mechanism? By restricting the content of
those marked sections we could probably eliminate *all* occurances of
SGML-incompatibility until SGML is fixed.
Paul Prescod
Boycott Shell Oil worldwide! http://www.web.apc.org/embargo/shell.htm
"Shell is here on trial and it is as well that it is represented by counsel
said to be holding a watching brief."..."The ecological war that the Company
has waged in the Delta will be called to question sooner than later." -Ken
Saro-Wiwa to the tribunal that later executed him.
