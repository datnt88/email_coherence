Hi,
There's someyhing about I've have questions : when a user calls the VERSION-CONTROL method on a versionable resource, it performs 3 operations :
- creation of a new version history,
- conversion of the versionable resource in version controlled resource,
- creation of a new version by copy of the versionable resource (content and properties).
My question is : why doing a copy of the version controlled resource ? why duplicating it ?
It is not enough, just keeping it, and creating the first version after checking it out, modifying it, and checking it in ?
Thanx in advance for answering at this (simple) question !
A version is created as a copy because the version-controlled resource can
be checked out and modified. The version remains as an immutable copy of
the inital state of the VERSION-CONTROL'led resource.
Clearly, _implementations_ don't have to do a copy and can fake out the two
resources (version and checked-in version-controlled resource) using the
same underlying storage.
Regards,
Tim
can
of
Hmm, I compared the version-controlled resource to a sort of 'root', and
I
thought it was immutable... I made a mistake.
A version-controlled resource is a resource with defined DeltaV behavior,
notably CHECKOUT to make it mutable and CHECKIN to capture it's state as a
version resource and make it immutable. RFC3253 has lots to say about
version-controlled resources.
But why is it possible to modify it, if I can create descendants with the
first version of the history ?
You can either modify the checked-out version-controlled resource, or a
working resource of a version to create a descendant depending upon whether
the server or client is maintaining the 'workspace' or work in progress.
See section 2.1 for an overview of the differences.
Regards,
Tim
