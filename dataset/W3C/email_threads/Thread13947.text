Reference number 6 in the WAI authoring
guidelines "Any browser table" is somewhat
misleading.
It recommends to use invalid structure
in order to achieve backward compatibility
with non-table browsers.
On the other hand, article number 29 (Flavell) also discusses
invalid markup, but has the appropriate warnings
Thank you for making this point. I don't know of a method that is
sure to work with all browsers.
The article to which you refer, involves a combination of techniques,
one of which (the use of H6 markups at a point that is both
syntactically invalid and has no apparent semantic purpose as a
header) seems to me to be uncalled-for. If this one trick were to be
removed, it's the same technique as the no-break space stuffing
technique, described in McCandlish's EFF page (ref 12).
I should like to stress that my article was aimed at compatibility
with old browsers, and with Lynx, and was not written specifically as
a contribution to web accessibility in the sense of the WAI. I'm of
course glad if you can get something useful out of it!
The combination of PRE with TABLE (invalid syntax) has worked with a
remarkably wide range of _older_ browsers, as well as with Lynx.
However, it stopped working with some recent versions of Lynx. As
invalid syntax it certainly can't be recommended to the general
authoring community without strong reservations; as you say, I tried
to do that in my paper.
There is a technique using the HTML3.0 TAB tag, described in the Lynx
documentation and mentioned in my article. However, as far as I know,
it has no useful effect on any other non-table browser, and it can
cause problems on those few browsers that try to implement both TABLE
and TAB. And you would need a custom DTD to validate it, unless you
are going to confine yourself to markup that fits the HTML3.0 draft
DTD (not recommended).
Originally, I was guided away from the non-breaking space, both by the
fact that some older browsers didn't support &amp;nbsp; and/or &amp;#160; and
by the fact that the HTML3.0 proposal implied that multiple
non-breaking spaces should be compressed.
Nowadays, all recent browser/versions will implement &amp;nbsp; and &amp;#160;
, and the great majority, maybe even all, will treat multiple no-break
spaces as uncompressible.
It seems, therefore, that in a context where the reader population
could be expected to be using fairly recent browser/versions, the best
way to deal with non-table browsers (sc. Lynx) would be the "no-break
space stuffing" technique.
There is in fact no need to use the representations &amp;nbsp; or &amp;#160;
unless you want to: for those authors who have the expertise to
handle it[*], the spaces can be inserted as genuine no-break
characters - an octet of value 160 decimal (if the charset is an
iso-8859-x etc.).
In the context of this discussion, I think that the no-break space
stuffing technique is probably the one to recommend. Provided, of
course, that we are dealing with bona fide "tabular data".
The final point that I would make is the one about tables used for
layout. This will be rightly discouraged by the guidelines. But
it's possible to design table "layout" in a way that deliberately
falls into a quite different "layout" on Lynx. Where this approach
fails, though, is with a text-mode browser which implements tables,
such as emacs-w3, which can produce ludicrous results when the browser
is presented with tables-for-layout pages.
[*]This may be a dangerous technique for those who are performing
cross-platform transfers when publishing their web pages. Once the
page is safely on the server, HTTP is a guaranteed 8-bit protocol, so
nothing could go wrong.
Hope that was useful.
The guidelines should definitely not recommend the use of NBSP or any
other non-standard technique for achieving particular visual effects in
user agents that have inadequate support for HTML table markup. It is the
responsibility of the user agent to provide proper support for HTML
constructs, not that of the author to compensate for the idiosyncrasies of
implementations that fail to meet the standards set forth in W3C
recommendations.
By all means, include a recommendation in the WAI user agent guidelines
regarding the support that should be provided for tables, but the page
author guidelines should not be misused as a vehicle for overcoming the
shortcomings of browsers that fail to support standard markup conventions,
such as tables, which have been included in HTML for some time.
Reference number 6 in the WAI authoring
guidelines "Any browser table" is somewhat
misleading.
It recommends to use invalid structure
in order to achieve backward compatibility
with non-table browsers.
The article does not note that the structure is invalid,
and claims that the method works for all browsers.
In my view browsers are expected to be
more sensitive to structural problems with
the implementation of stylesheets and XML.
On the other hand, article number 29 (Flavell) also discusses
invalid markup, but has the appropriate warnings
and thus is not misleading in any way.
Regards,
Nir Dagan
Assistant Professor of Economics
Universitat Pompeu Fabra
Barcelona (Spain)
Website: http://www.econ.upf.es/%7Edagan/
I have a great deal of sympathy with what you're saying here, which is
one reason I've been careful to point out that my own paper was
originally composed for a different purpose, and why I've tried to
steer the discussion away from the tricks that can't pass syntax
validation.
However, I'm not sure in what sense you mean that stuffing with
no-break spaces is "non-standard". It is syntactically valid, and I'm
not aware of anything in the HTML spec with which it is
_inconsistent_, albeit there is nothing in the spec that _guarantees_
that it will work.
That having been said, one would have every right to argue that the
technique/trick is inappropriate to be recommended in the present
context. That it is in the nature of a trick is not contested!
My perception is that Lynx is used by many users who are in the kind
of situation for which the WAI guidelines are intended. In an ideal
world, Lynx would support TABLEs properly when it was needed; the fact
is that it doesn't.
Again, I've much sympathy for the principles, but in a practical sense
one may sometimes have to compromise. After all, the HTML4.0 spec
says noble things about how speaking browsers are to make tables
accessible, but in practice today such support would be the exception
rather than the rule, and it would be inappropriate for authors to
behave as if such sophisticated browsers as described in the spec were
widespread.
While I absolutely would not expect to see table tricks in the main
body of the guidelines with a "RECOMMENDED" status, I submit that it
can be useful to offer practical advice to authors, as is presently
done in a series of appendices, and that this kind of advice could be
appropriate there. The exact nature of the advice offered is of
course fully open to debate, but I suggest you're going too far when
you ask to rule it out of court entirely.
best regards.
I did not imply that the reference to "any browser table" should
be removed, but tried to suggest an improvement in its presentation.
The guidelines can divide the reference to two groups:
"normative" (e.g., including HTML4.0 spec.)
and "informative". This is done in the technical reports
of the W3C.
Referring to an informative publication does not imply
endorsment whatsoever.
My major reservation from
article no. 6 (any browser table) in the guidelines references
was that it is written in a way that may mislead a non expreienced
reader/author who doesn't know much HTML.
A second reservation is that the construct proposed might
result in unexpected behavior in browsers that support tables.
This is because it puts H6 directly in a TR and puts TD inside H6.
A third point raised by Flavell was that the headings H6 do not
have any clear purpose.
The second reservation also applies to Flavell's paper, as
it has PRE in TABLE or TABLE in PRE, that nest elements in
an invalid way. (I think that TABLE in PRE
is theoretically less risky, as its more likely that
the PRE will be disregarded than the TABLE, in a table
supporting browser.)
However, the reader is warned of the invalidity, and is given a "fair
chance" to evaluate the risks in the methods discussed.
Regards,
Nir Dagan.
Although I agree with the general principles behind Alan's thinking in
this area, and appreciate the clarifications which he offers, it remains
to be shown that the benefits of the trick which he suggests would outway
its disadvantages. For example, the non-breaking spaces could cause havoc
in the braille formatting of a document, given the typical maximum line
length of 40 characters. So far as the advantages are concerned, the
proper formatting of tables in Lynx would indeed be helpful to braille
display users, but of limited benefit to those relying upon speech
synthesizers, since the spatial aspects of the document can not be
conveyed by a screen reader in an intelligible fashion. Of course, the
reader might resort to counting spaces and locating columns manually,
using the review functions offered by the screen reader, but I doubt that
many readers would be inclined to do so.
Consequently, I think this is one deficiency, limited to only a single
browser, which should not be compensated for in the guidelines. Indeed, as
I remember, problems specific to only one browser were ruled out of
consideration at an earlier stage of guideline development when it was
proposed that tricks should be introduced to avoid certain shortcomings
associated with the handling of TITLE and ALT by Microsoft's browser. A
trick concerned with the treatment of TR and TD elements by Lynx was also
rejected on similar grounds.
