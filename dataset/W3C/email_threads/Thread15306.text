Hello all.
A student asked me about accessibility of javascript.
I have some doubt about what can or cannot be considered accessibile in
JS. In fact, from a point of view, JS should simply be avoided as the
only mean to implement a relevant functionality. I.e., the same
functionality should be available (in other ways) even if JS is not
active on that user agent.
On the other hand, JS events should be as modality-independent as
possibile (onSelect instead of onClick, etc). But, still, if JS is not
supported, this is simply not sufficient.
I'm sure this has already been discussed in the list. I've just looked
at wcag 2.0 draft, and have not found a simple answer, so I turn the
question to the WG.
Thanks all
Maurizio Boscarol
Hi Maurizio,
well, of course there are things to be considered when using JavaScript.
Unfortunately, I'm somewhat disposed, but you should at least regard that
you don't generate markup via JS (a fact several 'natural persons' and
'corporate bodies' often disobey) since that markup's just not present using
any UA not capable (anymore) of JS, of course not.
And there's at least Joe Clark who summarized some issues related to
rollovers [1] (yours sincerely, Joe ;).
Best regards,
Jens.
[1] http://joeclark.org/book/sashay/serialization/Chapter09.html#p-1485
Jens Meiert
Interface Architect (IxD)
Jens said:
I don't entirely agree with this. I view JavaScript as a means to provide
convenience rather than exclusive function. However one of the most
accessible ways I know to do it is have JavaScript generate the elements
which are providing that functionality. For example if you have a button
which links to javascript.this.print(); then if it is also generated with
JavaScript only the people able to use it will have it included in their
content. In this way I think it is extremely valid to provide redundant or
more convenient functionality which is also provided by some other server or
user agent function.
Tom
It's not convenient to write out parts of a document if they are crucial but
not present for UAs being not capable of or not using JS. It's bad coding
style, too.
It's a difference whether you /generate/ them (elements) or whether you
/hide/ them until a specific event occurs (e.g., via CSS). The latter is
more elegant (though not inevitably good), so I disagree. (My conclusion is
a bit global, but generally applies.)
Well, if you use JS to offer functionality only available with JS, it might
be okay (if you really limit your scripting efforts to this specific action
and don't 'generate' all buttons with JS, for example). By the way, this
example 'limps' since you seem to copy browser functionality.
I disagree. It might be pretty convenient if you can print a document
pressing one of fifty buttons available in a document, but hence, what do
you print? (I exaggerate, I know.) -- And 'valid' are many approaches in Web
development (though not most right now), but that doesn't mean they are
useful or reasonable.
Best regards,
Jens.
Jens Meiert
Interface Architect (IxD)
I agree that writing actual content with JS is a heinous crime, but as a
tool to provide a convenience I think it is most valid. I meant of course
convenience to the user in terms of the sophistication of the site widgets.
It depends on the context, I am writing a script for the techniques
submission form which will hide elements which in a drop down menu according
to a selection from a previous menu. However in the mark-up all the items
exist for all users because everyone needs to see them, with JS enabled or
not.
However if you have some functionality which JS can do without a page
reload, then I think it is reasonable to use that (such as saving using
WebDav to talk to the server in a browser WYSIWYG editor). As long as, of
course, the functionality is still available to all users via a server
mechanism.
I think it is more than okay, I think it is extremely important to not show
users navigation or page controls they can't use. As for a limping example,
I think my point was any JS used on a page should be duplicate, either from
the browser or the server.
Implying that using JS is the same as bad UI design is silly. Having an icon
which simplifies people's model of site interactions (such as the very
common action of printing) is a good thing, at least if it is used site wide
(I work with content management systems).
You can create bad usability (and are probably more likely to in some areas)
with the minimal available tools in plain HTML. An example being overly long
line lengths for reading without using max-width in CSS. Adding widgets and
features which makes sites rich in interaction is not a bad thing, it just
needs to be done properly.
Regards,
Tom Croucher
Research Assistant
University of Sunderland
Jonathan Chetwynd also did a bunch of work with others on what he hoped would
one day be a techniques document for WCAG 2 on javascript. He is no longer
involved with WAI, but maintains the document:
You might find that interesting, adn I know Jonathan is still interested in
comments.
cheers
Chaals
Post: 21 Mitchell street, FOOTSCRAY Vic 3011, Australia or
W3C, 2004 Route des Lucioles, 06902 Sophia Antipolis Cedex, France
