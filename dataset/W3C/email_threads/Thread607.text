I am on SPARC Solaris 8 and am seeing the following behavior with tidy from
Aug with the patches posted to this mailing list.
$ cat tst.html
test
$ cat ~/.parms/tidy.config
# Tidy command configurations
# Bool: Meta tag for Tidy? (default: yes)
tidy-mark: yes
# Bool: Pretty print output? (default: yes)
markup: no
# Number: Right margin for line wrapping (default: 66; set to 0 to disable)
wrap: 0
# Bool: Wrap attribute values across lines? (default: no)
wrap-attributes: no
# Bool: allow string literal wrapping (default: no)
wrap-script-literals: no
# Bool: allow lines within ASP pseudo elements to be wrapped (default: yes)
wrap-asp: yes
# Bool: allow lines within JSTE pseudo elements to be wrapped (default: yes)
wrap-jste: yes
# Bool: allow lines within PHP pseudo elements to be wrapped (default: yes)
wrap-php: yes
# Bool: ensure white space within attributes are maintained (default: no)
literal-attributes: no
# Number: columns between tab stops (default: 4)
tab-size: 4
# Bool+: (no, yes, auto) indent block level tags (default: no)
indent: no
# Number: how much to indent (default: 2)
indent-spaces: 2
# Bool: each attribute on a new line (default: no)
indent-attributes: yes
# Bool: omit optional end tags when pretty printing (default: no)
hide-endtags: no
# Bool: Use XML parser (default: no)
input-xml: no
# Bool: Generate output as well-formed XML (default: no)
output-xml: no
# Bool: Add XML processing instructions (default: no)
add-xml-pi: yes
add-xml-decl: yes
# Bool: pretty print output as extensible HTML (default: no)
output-xhtml: no
# Select: omit|auto|strict|loose| fpi : what kind of doctype is generaged (default: auto)
doctype: auto
# Select: raw|ascii|latin1}utf8|iso2022: characters being input (default: ascii)
char-encoding: ascii
# Bool: write non-XML 1.0 basic entities as numeric (default: no)
numeric-entities: no
# Bool: write quotes as entitles (default: no)
quote-marks: no
# Bool: non-breaking spaces as entities (default: yes)
quote-nbsp: yes
# Bool: unadorned &amp; characters written as entities (default: yes)
quote-ampersand: yes
# Bool: require ? as processing instruction terminator (default: no)
assume-xml-procins: no
# Bool: replace backslashes with forwardslashes (default: yes)
fix-backslash: yes
# Bool: output line break before each br (default: no)
break-before-br: yes
# Bool: output tag names in upper case (default: no)
uppercase-tags: yes
# Bool: output attribute names in uppercase (default: no)
uppercase-attributes: yes
# Bool: strip out MS-Word 2000 html extra lines (default: no)
word-2000: yes
# Bool: replace surplus tags and attributes with style rules (default: no)
clean: no
# Bool: replace i by em and b by strong (default: no)
logical-emphasis: yes
# Bool: discard paragraph tags rather than create br elements (default: no)
drop-empty-paras: no
# Bool: discard font/center tags rather than create style rules (default: no)
drop-font-tags: no
# Bool: enclose body text within p element (default: no)
enclose-text: yes
# Bool: insert a p element around text when permitted (default: no)
enclose-block-text: no
# Bool: replace - with = when encountering adjacent -s (default: yes)
fix-bad-comments: yes
# Bool: add xml space preserve to pre, style and script elements (default: no)
add-xml-space: yes
# String: default alt text for img attributes (default: none)
#alt-text:
# Bool: write tidied markup to input file (default: no)
write-back: no
# Bool: do not alter last modified time of output file (default: yes)
keep-time: no
# filename: errors and warnings to this file name (default: output to stderr)
# error-file:
# Bool: display warnings (default: yes)
show-warnings: yes
# Bool: do not output welcome message or summary (default: no)
quiet: no
# Bool: change error output format to one parsable by GNU Emacs (default: no)
gnu-emacs: no
# Bool: generate one output file for each header encountered (default: no)
split: no
# string: declare new empty inline tags
new-empty-tags:
# string: declare new non-empty inline tags
new-inline-tags: CFABORT, CFAPPLET, CFAPPLICATION, CFASSOCIATE, CFAUTHENTICATE, CFBREAK, CFCACHE, CFCOL, CFCOLLECTION, CFCONTENT, CFCOOKIE, CFDIRECTORY, CFELSE, CFELSEIF, CFERROR, CFEXIT, CFFILE, CFFTP, CFGRIDCOLUMN, CFGRIDROW, CFGRIDUPDATE, CFHEADER, CFHTMLHEAD, CFHTTPPARAM, CFINCLUDE, CFINDEX, CFINPUT, CFINSERT, CFLDAP, CFLOCATION, CFMAIL, CFMODULE, CFOBJECT, CFPARAM, CFPOP, CFPROCPARAM, CFPROCRESULT, CFREGISTRY, CFSCHEDULE, CFSEARCH, CFSET, CFSETTING, CFSLIDER, CFSTOREDPROC, CFTEXTINPUT, CFTHROW, CFTREEITEM, CFUPDATE, CFWDDX
# string: declare new block-level tags
new-blocklevel-tags: CFFORM, CFGRID, CFHTTP, CFIF, CFLOCK, CFLOOP, CFOUTPUT, CFQUERY, CFREPORT, CFSCRIPT, CFSELECT, CFSWITCH, CFCASE, CFDEFAULTCASE, CFTABLE, CFTRANSACTION, CFTREE, CFTRY, CFCATCH
# string: declare new pre type elements
#new-pre-tags:
$ tidy -config ~/.parms/tidy.config -f /tmp/errs.txt -m tst.html
Tidy (vers 4th August 2000) Parsing "/tmp/tst.html"
line 3 column 1 - Warning: inserting missing 'title' element
/tmp/tst.html: Document content looks like HTML 2.0
1 warnings/errors were found!
HTML &amp; CSS specifications are available from http://www.w3.org/
To learn more about Tidy see http://www.w3.org/People/Raggett/tidy/
Please send bug reports to Dave Raggett care of html-tidy@w3.org
Lobby your company to join W3C, see http://www.w3.org/Consortium
$ cat /tmp/tst.html
test
Notice that not only is the missing title element not there, but none
of the other things I listed in the config file have been done either.
Anyone have any ideas what might be going wrong?
Never apply a Star Trek solution to a Babylon 5 problem.
Larry W. Virden mailto:lvirden@cas.org URL: http://www.purl.org/NET/lvirden/
Even if explicitly stated to the contrary, nothing in this posting should
be construed as representing my employer's opinions.
- -
* What output do you get if you write output to stdout using
tidy -config ~/.parms/tidy.config tst.html
* Could the problem be with file permissions?
Klaus Johannes Rusch
KlausRusch@atmedia.net
Your configuration file specifies:
# Bool: Pretty print output? (default: yes)
markup: no
That tells Tidy to suppress the tidied output. The "pretty-printed output"
_is_ the corrected output.
-- Dave
I tested it and got the same behaviour. However, if you set
markup: yes
it works fine.
I'm not sure about this option, does 'markup: no' mean that there is no
output at all?
Achim
Re: my problems with tidy.
1. I have write permissions on the web page I am trying to get tidy
to update.
2. I was surprised to read that tidy treats fixing html and
pretty-printing (moving text around to particular columns, wrapping,
etc.) as the same thing.
3. However, I'm not sure whether that's the whole picture. Here's
the latest test:
$ tidy -m tst.html
Notice that I'm not providing any config file. It is my understadning
that this should take the default action - updating the file.
However, tst.html continues to have no modifications made to it, even though
I get the output:
Tidy (vers 4th August 2000) Parsing "tst.html"
line 3 column 1 - Warning: inserting missing 'title' element
tst.html: Document content looks like HTML 2.0
1 warnings/errors were found!
HTML &amp; CSS specifications are available from http://www.w3.org/
To learn more about Tidy see http://www.w3.org/People/Raggett/tidy/
Please send bug reports to Dave Raggett care of html-tidy@w3.org
Lobby your company to join W3C, see http://www.w3.org/Consortium
Never apply a Star Trek solution to a Babylon 5 problem.
Larry W. Virden mailto:lvirden@cas.org URL: http://www.purl.org/NET/lvirden/
Even if explicitly stated to the contrary, nothing in this posting should
be construed as representing my employer's opinions.
- -
Try:
$ tidy tst.html
...and see if you get the proper output on the screen. If so, then Tidy is
having problems writing the corrected output back to the file. If not,
then the trouble is elsewhere.
That's due to the way Tidy works. Basically, Tidy reads the input file and
creates a parse tree. After the input file is completely processed, Tidy
walks the parse tree and prints to the output file as it goes. Pretty-
printing options simply modify the way Tidy does the printing.
The "markup" option is perhaps confusingly named. "Markup: no" should be
interpreted as "don't output any markup during processing," i.e., don't
produce any output except Tidy diagnostics.
It should, in the absence of any implied configuration file. Note that
Tidy will process:
1. A configuration filename supplied on the command line.
2. A configuration filename designated by the HTML_TIDY environment
variable.
3. A ".tidyrc" file, if present in the HOME directory.
4. A compiled-in default filename, if defined.
Perhaps you're still getting "markup: no" from one of these sources?
(Some time ago, I suggested an enhancement that would have Tidy print to
the console the name of any configuration file processed. It sure would
help to track down "stealth" configuration problems of this nature!)
-- Dave
From: "J. David Bryan" jdbryan@acm.org
get tidy
Try:
$ tidy tst.html
...and see if you get the proper output on the screen. If
so, then Tidy is
having problems writing the corrected output back to the
file. If not,
then the trouble is elsewhere.
I rebuilt the original aug 4 release of tidy on my SPARC Solaris
8 machine. I use a relative pathname to make sure I get the
version I just built. I see:
$ ./tidy /tmp/tst.html
Tidy (vers 4th August 2000) Parsing "/tmp/tst.html"
line 3 column 1 - Warning: inserting missing 'title' element
/tmp/tst.html: Document content looks like HTML 2.0
1 warnings/errors were found!
HTML &amp; CSS specifications are available from http://www.w3.org/
To learn more about Tidy see
Please send bug reports to Dave Raggett care of
Lobby your company to join W3C, see http://www.w3.org/Consortium
$ cat /tmp/tst.html
test
So I am seeing no change in the file or written to stdout.
Here's
understadning
file.
It should, in the absence of any implied configuration file.
Note that
Tidy will process:
1. A configuration filename supplied on the command line.
2. A configuration filename designated by the HTML_TIDY
environment
variable.
3. A ".tidyrc" file, if present in the HOME directory.
4. A compiled-in default filename, if defined.
Perhaps you're still getting "markup: no" from one of these
sources?
Ah ha! There was a HTML_TIDY variable set. I'm rather surprised
that there isn't a simple option to override things - even when I
provide a -config /dev/null, it appears that tidy wants to use
that HTML_TIDY variable. Once I unset that variable, things seem
to work again.
I wonder if the argument setting is really working as expected; I
would have expected command line flags to override everything
else - AND I would expect a command line flag to turn on or off
the generation of that markup argument. At the very least, one
should have the ability to seperately indicate whether
non-functional changes (line wrapping, etc.) vs functional cases
(inserting code) should be performed. In general, I don't want
tidy messing around moving tags about in my file just to make
things look pretty. I do however want tidy to fix broken code.
Does tidy perform character conversions for those Microsoft (and
Mac) characters that I see so frequently on web pages - the
'wrong' characters for quotes, dashes, etc. that end up not
displaying properly unless you happen to have the right font?
(Some time ago, I suggested an enhancement that would have
Tidy print to
the console the name of any configuration file processed. It
sure would
help to track down "stealth" configuration problems of this
nature!)
That would be nice - another nice feature would be a 'show me
what values you are using' option. That way, one could tell
after having gone thru a variety of files exactly what parameters
had been set...
Larry W. Virden URL: mailto:lvirden@cas.org
Even if explicitly stated to the contrary, nothing in this
posting
should be construed as representing my employer's opinions.
I'm rather surprised that there isn't a simple option to override things
- even when I provide a -config /dev/null, it appears that tidy wants to
use that HTML_TIDY variable.
The various configuration file options accumulate, if I recall correctly,
so "-config /dev/null" doesn't change anything because there aren't any
options specified. The order in which configuration options are applied
is: compiled-in default, then environment variable OR then ".tidyrc", then
command-line options in order of appearance, including the "config" option.
Note that if the environment variable is defined, ".tidyrc" will not be
checked.
If you use "--markup yes" from the command line, that would override a
previous "markup: no" in any configuration file previously encountered.
Also, the "-errors" and "-e" command option is the same as "markup: no".
Wouldn't that just be a case of selecting the desired options in your
configuration file?
another nice feature would be a 'show me what values you are using'
option. That way, one could tell after having gone thru a variety of
files exactly what parameters had been set...
Agreed.
-- Dave
