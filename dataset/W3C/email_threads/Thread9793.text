You had an action:
2001-12-14#8 Jan Grant look at #rdfms-not-id-and-resource-attr closely
Right, this issue is tied up in the most complicated rules in Dave's
production, which attempt to do not "the right thing", but "what the RDF
spec has pretty much claimed was the case in this production".
I'll set out the changes that would have to be made to incorporate this
"fix" into Dave's document; this fix, however, is an extension (not a
correction) of the RDF grammar.
OK, here I'm going to refer you to Dave's WD:
(that is, section 5.14)
Currently, the production looks like this:
start_element(URI=anyURI,
attributes=set((idAttr | resourceAttr)?, bagIdAttr?, propertyAttr*))
end_element()
The production needs to become
start_element(URI=anyURI,
attributes=set(idAttr?, resourceAttr?, bagIdAttr?, propertyAttr*))
end_element()
(with the proviso that all of idAddr, resourceAttr and bagIdAttr are not
present at the same time. These alternatives can be enumerated)
The "uniform" resolution of this issue would look as follows:
first bullet point: unchanged
second bullet point: CHANGE from
- If there is an rdf:resource attribute a and no other attributes then
add the following statement to the model:
to
- If there is an rdf:resource attribute a, and no other attributes
except for the optional rdf:ID attribute i then add the following
statement to the model:
and add the same clause concerning _i_ from the first bullet point.
Third bullet point: CHANGE from
- If there is one or more propertyAttr; an rdf:ID attribute, an
rdf:resource attribute or neither; and optionally an rdf:bagID attribute
b, then:
- If there is one or more propertyAttr; an rdf:ID attribute, an
rdf:resource attribute or neither (but not both); and optionally an
rdf:bagID attribute b, then:
Add the fourth bullet point as follows:
- if there is one or more propertyAttr; an rdf:ID attribute i; and an
rdf:resource attribute r
then add the following statement to the model:
e.parent.subject.string-value e.URI r.string-value
and reify the above statement with
identifier(identifier=concat(base-uri, "#", i.string-value), identifier-type="URI")
using the reification rules in section 5.26
Note that I've explicitly not covered idAttr, resourceAttr, propertyAttr
and bagIdAttr all being present at the same time since that would
arguably involve two levels of reification.
This resolution of this issue is _slightly_ more regular, possibly, than
what we currently have; however, it still suffers from the problem that
rdf:ID is overloaded in meaning - "generally" indicating reification,
but in one case (the clause in the third bullet point) indicating the
URI of a node.
The alternative is to stick with what we've got, if the (odd) behaviour
of rdf:ID as it currently stands is enshrined for the sake of
backwards-compatibility.
In my opinion there is no way to simplify or make any more regular the
expression of this rule; we can add the fourth production if it is
considered a show-stopper, although RDF using this new version of the
production has never been a legal consequence of the old version of the
rdfms productions (not that that means much(!))
A test case for this production is trivial to produce, although it
relies on the base-URI-mangling rules (so I'm not going to attempt to
attach one to this email).
To be honest, I would be inclined to resolve to close this issue as
follows:
- NO changes to the current syntax document or productions are required
- we recognise the current irregularity in the RDF syntax with regards
to this production; however, the current production reflects accurately
the letter of the RDF M+S. Removing the irregularity from this
production completely would require a change in the interpretation of
rdf:ID which (since it would certainly break the meaning of existing RDF
documents*) is beyond the scope of the RDF Core efforts in this regard.
Cheers,
jan
* as asserted numerous times by various RDF core members
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
HP-unix: Open Sauce product, available in 57 distributions.
I found Jan's message somewhat hard to follow.
I'll not labour my disagreement with some of the assumptions about the
meaning of M&amp;S.
In this message I will restrict my comments to bagID in an empty property
element production.
Jan:
Dave says "bagID cannot be used when there are no propertyAttr"
I don't understand either restiction on bagID here. In either case, for me
on my reading of M&amp;S,a bagID unambiguously indicates the bag formed from the
reifications of the property attributes (if any) of this property element.
Hence a bagID on any otherwise empty property element generates one triple,
the type triple for the bag.
e.g.
==
#A rdf:value _:a .
#B rdf:type rdf:Bag .
Adding prop attrs is unproblematic:
==
#A rdf:value _:a .
#B rdf:type rdf:Bag .
_:a a:a "a" .
_:r rdf:type rdf:Statement .
_:r rdf:subject _:a .
_:r rdf:predicate a:a .
_:r rdf:object "a".
#B rdf:_1 _:r.
An rdf:ID on this triple either indicates the reification of the
#A rdf:value _:a .
triple, on my preferred resolution, or indicates the identity of the object
bNode (_:a) on the current text of the syntax WD. Either way there is no
difficulty in having both a bagID and an ID.
Jeremy
Bluff!
Jan:
I looked through the archive and could not see even the assertions let alone
links to docs using rdf:ID on empty property elements to name the object
resource.
I also saw assertions that parsers had implemented the reading of M&amp;S that
is currently in the WD. These seemed to be unsubstantiated. A fairly
informal survey that I have done suggests a lack of uniformity and
significant confusion in the implementation of reification. I expect that
once we are done most/all parser writers will need to revisit their
reification code since as far as I can tell there is no industry consensus
behind any one reading of M&amp;S.
Jeremy
Just checking I've understood the main thrust here:
Your message is trying to give the "uniform" resolution of rdf:ID
[ ... snip ...]
The only change from the current WD being to allow *both* rdf:ID and
rdf:resource on otherwise empty property elements.
And you explicitly reject my proposal.
You also appear to prefer the current WD to such a change. I agree with this
preference.
Jeremy
Actually, I agree with you that the current state of play wrt
reification is pretty poor. I'd much rather see something neat, tidy and
regular.
...but I don't think such a beast will be related to the RDF/XML syntax
as expressed in rdfms, and which Dave has captured in his WD.
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
HP-unix: Open Sauce product, available in 57 distributions.
Mea culpa, the * should have been at the end of the sentence.
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
Ever see something and think, "I've gotta leverage me some of that?"
Odds are, you were looking at a synergy and didn't even know it.
