"Patrick.Stickler" said:
[lots]
Don't read into a proposed N-Triples syntax change more than I wrote.
I could have put it has datatype(decimal, "2.0") or somesuch.
Specifically don't read that as qnames but evocative of how XSD is
used in XML; similar how the xsi:type is being used in this RDF/XML -
a special attribute.
But I'm still waiting for the triples for these RDF/XML + xsi:type
examples. Which is hard to do if they have no n-triples syntax.
I'll create a better N-triples if needed when I'm clear what (if
anything) has changed in the graph. Catch 22.
Dave
"Patrick.Stickler" said:
[lots]
What's changed in the graph is that the space of "literals" has
expanded; that is that
jenny age "10" .
and
jenny age number(10) .
are distinct triples, but that
jenny age number(10) .
bob age number(10) .
indicates that jenny and bob really do have the same age.
As to how much it has expanded: this proposal seems to be capable of
going two ways:
1. the space of literals is expanded by a small set of other literal
types to provide a sufficient foundation for datatyping to be built
upon. That a small set can be sufficient is indicated by the success
people have in using RDBM systems, I suppose. This proposal would then
need guidelines as to what to do with other "datatypes": eg: factor out
units in property values; use uri-labelled resources for enumerations
and taxons; use graph-structure to express compound types.
This reading means that the RDF parser must have a transform from some
serialised form to the appropriate value, but that the values are what
are present in the graph. In this case, the "hook" for that transorf is
the xsi:type attribute. The space of literals is not extnsible by third
parties.
Presumably for datatyping and range constraints, etc, rdf:Literal
(rdfs:Literal? I forget) is subclassed into numbers (or ints and reals),
strings, langstrings, whatever.
That literals are essentially self-denoting entities is obvious in this
setup.
2. the space of literals is arbitrarily expandable by users, and literal
nodes in the graph are of the form type, thing where a "thing" may or
may ont be a lexical form. Treatment of compound, union, intersection of
types is unclear in this system.
In this case the proposal is effectively "drawing a circle" around the
construct from one of the other datatyping proposals that uses
node-and-arc constructs, and calling the whole contents of that circle
"the literal"
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
Lambda calculus? I hardly know 'er!
"Patrick.Stickler" said:
[lots]
Well, no; in fact, they can't be self-denoting in this setup. If
(int)10 is supposed to denote an integer, then if it were
self-denoting it would have to be an integer, which it isn't. In
fact, you can't put integers into syntax, so *anything* that denotes
integers isn't self-denoting.
Pat
IHMC(850)434 8903 home
40 South Alcaniz St.(850)202 4416 office
phayes@ai.uwf.edu
That should disappoint a lot of travelling salesmen. OK, there may be a
tacit one-step indirection of the same kind that you may want to model
weighted graphs.
jan grant, ILRT, University of Bristol. http://www.ilrt.bris.ac.uk/
They modified their trousers secretly.
