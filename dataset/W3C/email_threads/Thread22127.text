Hi,
Just back from Berlin, trying to catch up with the TS.
After a quick read I understand that we are moving into a direction where interface methods are defined as Elements within the TS dtd.
After a series of method calls a set of assertions are issued.
With the limited knowledge I've got now from the DTD I'm trying to image how a test for a DOM L3 LS call would look like.
example:
void writeNode(in DOMOutputStream destination, in Node node) raises(DOMSystemException);
Would probably something like DOMWriter.writeNode var="........
One of the options for this DOM L3 call is Namespace fixup:
true: Check namespace declarations and prefixes for consistency, and fix them in the serialized data if they are inconsistent.
false: Perform no special checks on name space declarations, prefixes or URIs.
default: true;
supported values: true: required; false: required.
It seems to me that it could be difficult to check the result of this method by a set of asserts.
Do you think it would be doable to test these kind of methods ?
Regards,
Jeroen
Hi Jeroen,
The TSML will also have the capability to use complex if's, whiles, for's etc -- all the
language constructs that you would expect, so I think that we will be able to cover
your example sufficiently. At the moment, we are discussing the DOM constructs
and the issues related to them -- so you see a stripped-down version of what will be
available.
--Mary
Mary Brady
NIST, Web Technologies
mbrady@nist.gov
Hi,
Just back from Berlin, trying to catch up with the TS.
After a quick read I understand that we are moving into a direction where interface methods are defined as Elements within the TS dtd.
After a series of method calls a set of assertions are issued.
With the limited knowledge I've got now from the DTD I'm trying to image how a test for a DOM L3 LS call would look like.
example:
void writeNode(in DOMOutputStream destination, in Node node) raises(DOMSystemException);
Would probably something like DOMWriter.writeNode var="........
One of the options for this DOM L3 call is Namespace fixup:
true: Check namespace declarations and prefixes for consistency, and fix them in the serialized data if they are inconsistent.
false: Perform no special checks on name space declarations, prefixes or URIs.
default: true;
supported values: true: required; false: required.
It seems to me that it could be difficult to check the result of this method by a set of asserts.
Do you think it would be doable to test these kind of methods ?
Regards,
Jeroen
I think this is similar to problems that you would also encounter in writing tests to test event
dispatching and probably traversals (but I don't know traversals). Definitely I don't think we want
our little language to grow to the point that we can extend arbitrary interfaces.
I did a few initial tests for event dispatch and the approach that I thought was reasonable was to
have a build-in implementation of the listener (or in this case DOMOutputStream) that captured
all the events (or output) and allowed you to insert code into the event handler. You could
make assertions in the event handler or after event dispatching was complete.
I started with some event tests in Java with Junit:
and then added the minimal language constructs that allows to be represent that test. Which in my schema was the declare onEvent/ /declare , the EventMonitor.* elements and the EventMonitor datatype.
I would assume a similar approach would work for Traversals and Serialization. Determine what you
want to test and prototype a few in the language of your convienience and then add a few constructs
to support those types of tests.
