We can't quite LAST CALL a document which has a technical
issue unresolved. The technical issue that's unresolved
is the limitation on accepting cookies while interacting
with the resource identified by the CommentURL annotating
a cookie.
I will state my personal opinion, again, just in case there
is some additional support for it:
I think that the complexity inherent in "CommentURL" makes
it suspect, and that the simplest thing to do is to remove
it. If there is no CommentURL, then you don't need a policy
for accepting cookies while interacting with it.
Too much icing on the cookie, just say no.
Larry
[ appended ]
The commentURL points to a resource which can be requested by
a UA under a variety of circummstances, not just in conjunction with
an assessment of whether to accept a new (not previously accepted or
expired) cookie, or an assessment of whether to delete a previously
(e.g., tentatively) accepted cookie. A link for that URL might have
been bookmarked, or added to some document. The server thus must be
prepared to have Cookie headers in requests for those resources, and
should act on them as it would for other requests sent by UAs. If
you impose restrictions for such URLs, you are creating complications,
not alleviating them.
In those cases where the UA is sending the request in conjunction
with an assessment of whether to accept a new cookie or delete an existing
one, I still see no compelling reason to omit a Cookie header from the
request, if there are cookies which the UA would normally send to that
site. I also think it is desireable to send at least the cookie for which
a comment is being requested, to ensure that at least one cookie is
included in the request (That's a MAY, not a MUST. :) Such a cookie would
have the modern format for UAs which have adopted the modern IETF specs.
Consider, for example, the case for a host which does need to impose a port
restriction. It's needs cannot be met by a blanket port restriction, as in
the current RFC. The inclusion of a cookie with the modern format provides
assurance to the server that the request comes from a modern UA, and that a
document which is suitable for modern UAs can be returned. Otherwise, the
server may elect to return a comment such as:
WARNING: Your browser may have a historical implementation of
cookie handling which inadequately protects your privacy and
might result is transmissions of your cookies to inappropriate
sites. See IETF RFC??? URL: ... for more information. A
list of browsers with modern cookie support is available from
URL: ... . Such browsers will enable you to derived the full
benefit of services offered by our site.
Of course, the WebMaster for the server might consider that particular
message impolite, or risks cache busting. The point is that there are
reasons why it would be good to allow exchanges of cookies in conjunction
with the requests for commentURLs, and how they are handled is an
"implementation issue" dependent on the context in which the UA issues
the request. All that's needed is a word of caution about getting caught
in a loop, and if you go too far beyond that at this time, it may turn out
that you're added a bug rather than alleviated a problem.
Fote
Foteos Macrides Worcester Foundation for Biomedical Research
MACRIDES@SCI.WFBR.EDU 222 Maple Avenue, Shrewsbury, MA 01545
[Discussing language that would state under what circumstances a UA,
examining a page fetched via CommentURL, would accept a cookie...]
Scott Lawrence (responding to Foteos Macrides):
ouch... parse error line 3... sorry... The reply to what? To the request for
the CommentURL? The UA just needs to know if it should or
should not accept a cookie that's been sent to it. The CommentURL allows
the user to make an informed decision about whether they should or
should not accept the cookie. The process of attaining this "decision
making information" should be "sacred"... without cookies or sessions
or anything... it should be anonymous, as though the browser does not
have support for cookies, and it should not be something that will result
in any cookies being accepted, rejected, or changed in any way, except
for the one cookie that is in question, and the point of the whole process.
Foteos Macrides:
Parsing error, indeed. The server should not send any "new" cookies,
meaning none that are not included in the UA's Cookie: header, and the UA
should deal with the situation of a server doing so. However, if you get
so heavy handed as to bar any cookie exchanges, that's like the blanket
port restriction in the current RFC, with it's side effect of blocking
all cookie sharing between http and https servers, including unencrypted
cookies from an http server going encrypted to an https server. If you
make it that heavy handed, even UAs which do want to implement the IETF
specs are likely to respond with "Sorry, we're not going off the deep end
with you."
The folks arguing *for* CommentURL say it's a valuable feature and (I
think they would claim) easy to implement. I agree that, at the
bits-on-the-wire protocol level, it's simple to specify, but I've always
been skeptical about the UA implications. I think Foteos's wording for
how a UA should handle a cookie that it receives while examining a
CommentURL page (not reproduced here) help to make my point. I think
they're complex.
Some of the disagreement results from differing visions of when/how a
user could inspect a cookie. (And we must allow for that flexibility.)
I imagined that the inspection would take place at the point where a
cookie arrived, subsequent to a user's clicking on a link, and before
some or all of the content has been received. In that circumstance, if
the UA offers the user the opportunity to follow the CommentURL link for
the cookie, I think it's inappropriate for the UA to send a cookie to
the very server whose cookie policy the user is (presumably) about to
examine, or to accept cookies from that server or others.
On the other hand, if the cookie inspection mechanism is "off-line", in
the sense that it functions when the UA is otherwise quiescent (no page
retrieval taking place), then different rules may apply. The
interrogation of the CommentURL could be treated similarly to retrieval
of any other resource.
I think a UA could (perhaps *should*) provide both mechanisms. The
question is (assuming you agree with the two paragraphs above) how to
word the spec. to restrict the first case and not the second. Dave
Morris proposed:
A potentially confusing situation exists if a user agent's cookie
inspection interface allows a user to follow a CommentURL link
within a dialog which is prompting the user to decide if the cookie
containing the CommentURL is acceptable AND following the CommentURL
link results in receipt of a new, not previously approved cookie.
The useragent MAY discard any cookie received in this context in order
to avoid the complexities of interacting with the user regarding nested
set-cookie requests. Servers which depend on cookies MUST allow for
the possibility that URLs used in their cookie's CommentURL value
will be ignored by user agents.
Well the technical issue has only received intense discussion for a day
and there would seem to be convergence.
The simple problem is that as a protocol design we are demanding that
UI/UA designers provide a meaningful dialog with end-users for control
of cookie usage in the interest of protecting user privacy. Without
including the CommentURL we are not providing any way for the enduser
and origin server to have a mutual understanding of how the cookie
will be used. There is no way to require the server to provide the
CommentURL or to provide a meaningful message but one might expect that
users who bother to police their cookie transactions would be less
inclined to accept cookies which don't have the CommentURL. As far as
the accuracy of the CommentURL description is usage is concerned, I
would speculate from a limited legal background that publishing a false
statement could be the basis of legal action for false advertising,
misrepresentation, etc.
The difference between the Comment attribute and the CommentURL is the
difference between the Windows application which provides a message
box with a message like:
"Unable to write bookmark file"
and one which presents the message:
"Unable to write bookmark file:
C:\home\user\internet\bkmrks.fil
because the file already exists and is owned
by another user"
In the first case, only a user familiar with the application internals
could guess where to start looking. In the second case, the average
reasonably knowledgable user of the operating system usage would have
a good chance at successful problem resolution.
If user privacy is important to our protocol effort, we must make it
possible for the user to receive sufficient information for informed
consent. If we don't, the user community will throw their hands up
and take the course of least resistance and all of our concern about
cookie sharing will be moot.
In other words, I don't consider CommentURL as icing on the cookie,
it is central to any possibility of achieving user control over
privacy.
Dave Morris
The criteria by which a UA might accept particular cookies in
Set-Cookie or Set-Cookie2 headers, and might include particular cookies
in Cookie headers, are in the specification. There is no MUST for
acceptance of cookies, nor for sending them. For a URL obtained via a
commentURL, the UA could apply those criteria, and perhaps include cookies
in a Cookie header when requesting that URL. It could apply those criteria,
and perhaps accept cookies in any Set-Cookie or Set-Cookie2 header that
accompanies the server's reply, all dependent on the context, the manner
in which the UA has implemented cookie support, and any configuration or
run-time options set by the user. There is nothing about the commentURL
which requires holding up LAST CALL, unless you want to change the critera,
rather than just making suggestions or adding words of caution in the
comments/explanations. Just say yes.
The FQDN issue is another matter. That's a change in the critera.
Fote
Foteos Macrides Worcester Foundation for Biomedical Research
MACRIDES@SCI.WFBR.EDU 222 Maple Avenue, Shrewsbury, MA 01545
Note that even in that example, you are restricting yourself
to ASCII characters. :)
I doubt it will be considered icing by users whose language
is not adequately accomodated by the device of try to stuff a body
into the value of a Set-Cookie2 header's comment attribute. :)
Fote
Foteos Macrides Worcester Foundation for Biomedical Research
MACRIDES@SCI.WFBR.EDU 222 Maple Avenue, Shrewsbury, MA 01545
Date: Wed, 23 Jul 1997 12:39:04 PDT
From: Larry Masinter masinter@parc.xerox.com
Organization: Xerox PARC
We can't quite LAST CALL a document which has a technical
issue unresolved. The technical issue that's unresolved
is the limitation on accepting cookies while interacting
with the resource identified by the CommentURL annotating
a cookie.
I will state my personal opinion, again, just in case there
is some additional support for it:
I think that the complexity inherent in "CommentURL" makes
it suspect, and that the simplest thing to do is to remove
it. If there is no CommentURL, then you don't need a policy
for accepting cookies while interacting with it.
Too much icing on the cookie, just say no.
I disagree.
Effectively, showing the CommentURL merely involves going to a different
page, probably with a different set of cookies. I don't see what's
really hard about it. Is there something I'm missing?
It is likely that at some point in the future I will implement a UA
which will support the CommentURL, and I would like the CommentURL
to be available.
