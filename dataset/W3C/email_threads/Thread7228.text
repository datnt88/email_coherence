1.UNCHECKOUT
1.1Problem Definition
The term uncheckout actually means two things.
One definition is that an uncheckout is the removal of a checkout.
The second definition involves transactioning. In this case an
uncheckout results in all changes the user has made to the resource
since they checked the resource out, being rolled back.
1.2Proposal
With my proposed removal of the CHECKOUT method and its replacement with
the LOCK method, the first definition is satisfied with the UNLOCK
method.
The second definition requires a transactioning system and as such I
believe it is beyond the scope of the DAV draft.
Those who remember my original position paper on atomic methods will see
a contradiction in my view. Indeed, my current view does contradict my
original statements. After having spent the last few days thinking about
versioning I have come to the conclusion that the rollback UNCHECKOUT
requires a transactioning system and that introducing such a system is
completely out of scope for DAV. In addition I do not believe that
rollback UNCHECKOUT is necessary for a basic interoperable system.
2.DAV.VersionSpace Link
2.1Problem Definition
It is highly probable that a single HTTP server will actually be a front
door to a number of other servers, some will support versioning, some
will not. Some servers will be able to support versioning of a resource
anywhere in their name space and some will only be able to support
versioning in specific parts of their name spaces. A mechanism is needed
to determine if a server supports versioning at all and if it does,
where.
2.2Proposal
I propose introducing the DAV.VersionSpace link. A DAV versioning
compliant system must have this link available from *. This link will
default to returning a web collection containing a description that
indicates which name spaces support versioning and if versioning is
automatic or must be requested within those namespaces.
3.History
3.1Problem Definition
One of the most powerful features of a versioned system is the ability
to view the entire history of a versioned resource. This information can
be built manually by the client by following all the versioning links
but this is extremely inefficient. Most servers already maintain the
history list, as such it would be good for clients to be able to get
this list in one request.
3.2Proposal
I propose that a STRUCTURE method executed on a tree handle return a
history. This does not remove the need for the DAV.Versioning.History
link. This link is needed to find the tree handle and for proper
operation of distributed systems which have no tree handle.
Your proposal is no different, in terms of race conditions, from mine.
Between the time you receive the response and the time you send out a
request based on that response, the state of the server may have
changed.
In either case, the system deals with recovery. The content-nature
header provides for requesting exactly what you want and the server is
required to refuse the PUT if it can't match the content-nature header.
So if the situation has changed, the PUT will fail.
As for your accusation that my proposals do not seem thought out, I
personally find facts more compelling then assertions.
In regards to my "rapid fire approach", there is an author's meeting
next week and I wanted to give the author's a chance to see my proposals
before I bring them up at the meeting. However, rather than just sending
the posts to them privately, I decided to share them with the list. You
can not have it both ways Larry. Either you have openness with me
sending the proposals out to the list, or you don't. I will eventually
be making all the proposals available in a single file, once I have
finished them. Until then, anyone wanting to refer to them can check the
archives of this list.
All in all your post was offensive and unproductive. I hope you will
refrain in the future from such postings as it makes it extremely
difficult to work with you. Your attitude is consistently
confrontational rather than cooperative. If you have a problem with the
content or speed of my postings there are ways to bring the issues forth
without being insulting.
Yaron
PS Sorry about the Microsoft mail address. Something went screw when I
sent the mail out.
From:Larry Masinter [SMTP:masinter@parc.xerox.com]
Sent:Wednesday, March 26, 1997 1:01 AM
Subject:Re: Uncheckout, DAV.VersionSpace link, and History
Yaron, I'm just asking for a little consideration and context.
You were sending a lot of proposals to the mailing list. The issues
of timing and interaction, robustness and transactions were not
addressed or referenced in any of them. The problem statements
made allusions to previous proposals without giving reference to
them, and did not, in the "Problem Statement" section, identify
what Distributed Authoring and Versioning problem they solved.
I'm happy to accept that these are just advanced notice of what
you and others will be discussing at a private meeting next week,
but it's useful to say that they'll need serious review against
robustness criteria, and that the proposals, as written, don't indicate
that the review had been done. It's OK that they're preliminary
drafts. I hope it's OK that there's not really a lot of time to
review them in depth, and that the analysis of the robustness
of the proposals that I gave was pretty hurried.
I'm sorry that my attempt at humor ("Problem Description" / "Proposal")
was taken as insulting. I just wanted to say "ouch", what you
were doing hurt.
Regards,
Larry
Your absolutely correct that these are preliminary proposals, that is
why I title them as "proposals" and not "text for the standard". They
are not meant to be bullet proof. The proposals have all been generated
from a list of open problems I compiled based on comments from the last
meeting and Jim's published list. I am not trying to provide the final
copy of a standard. I am trying to show a direction and to see if there
is buy off. For example, after Jim's letter, I see that people have
problems with the STRUCTURE method. So I need to flesh that out more in
preparation for the author's meeting. However, in general, people seem
perfectly happy with the new syntax for LINK and LOCK. Now I know where
to spend more of my time. This sort of "gut level" feedback is really
useful. It helps to create a better spec.
As for your humor, actually I found that part funny. The part I found
insulting was your statement, in reference to my proposals, that "It's
like they've not
really been thought through.". I have been working 7 days a week, 14
hours a day, for three weeks in order to make all this content
available. I will leave it to your imagination as to what it feels like
to then have the HTTP-WG Chair come along and label the whole thing as
not having been thought out.
"If you prick me, do I not bleed? If you insult my proposals, am I not
hurt?" =)
Yaron
PS If, indeed, they have not been well thought out, then we probably
have bigger problems. However, as yet, no one has managed to punch any
solid holes in them. Rather most people, having just first seen these
totally new proposals are not fully comfortable with them. This is to be
expected. I have spent weeks wrapping my mind around these ideas. It
would be unreasonable to expect people, seeing them for the first time
and in an abridged form, to instantly accept them. It would be like
trying to understand Shakespeare from the cliff notes. You get a
superficial understanding but the richness of the details is missing.
