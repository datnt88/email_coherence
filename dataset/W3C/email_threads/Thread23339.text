With the current interfaces there is good no way for a calling application
to programatically decide what action to take according to the reason for
parsing failure.
My suggestion is to extent the exising DOMError interface to include two
more read only attributes: domain (DOMString) and error code (unsigned
short). W3C could define a set of general error codes that parser
implementations can choose to implement, but allows different
implementations to extend the error code set in seperate domains. This
way calling applications can look at the domain and error code and easily
make a decision on what action to take (eg poorly formed XML versus I/O
error versus validation error).
From your description, it sounds like "domain" will be identify some
broad area in which the error codes will be interpreted; is this
right? Would example domains be things like "XML Conformance",
"System Error", ...?
-Fred
Fred L. Drake, Jr. fdrake at acm.org
PythonLabs at Zope Corporation
Open to suggestions. Coming from Apache's Xerces C++ implementation I'd
suggest an URL.
Say:
DOM standard
I know this does raise issues wrt to mapping implementation errors to w3c
defined errors, and also implementations must decide when to return DOM
error codes and when they should return error codes in other domains but I
can't see a way to allow callers to have fine granularity of control any
other way. This also allows W3C to grow the error code set as the general
community require yet allowing implementations to press ahead without
extending the standard through proprietry interfaces/methods.
"Fred L. Drake, Jr." fdrake@acm.org
30/08/2002 01:11 PM
Subject: Re: Comment/Suggestion: DOM L3 L&amp;S
From your description, it sounds like "domain" will be identify some
broad area in which the error codes will be interpreted; is this
right? Would example domains be things like "XML Conformance",
"System Error", ...?
-Fred
Fred L. Drake, Jr. fdrake at acm.org
PythonLabs at Zope Corporation
Whether the domain values are URIs or short strings specified in the
DOM spec doesn't make any difference to me, since I'd expect language
bindings to provide convenient named constants I can refer to.
Judging from the current round of DOM 3 drafts, I'd expect the W3C to
go for short strings, and forget to deal with namespace control within
that space. (Such as reserving some prefix for future W3C use, and
recommending some Java-esque reverse-domain prefix convention.)
Reception seems to have been poor when I suggested clarifying that for
the Load/Save specification, but I don't remember the exact response
off the top of my head.
(I still think that's important, and using URIs at least implicitly
hints at that, if the W3C doesn't want to be specific on this topic.)
Yes, which is nice. It might even be reasonable for the DOMError
objects to provide a sequence of domain/code pairs, so that if an
error matches some non-W3C error, and later a W3C-specified error code
is defined, both can be associated with the error. That feels a bit
heavy, but then, we are talking about the DOM, and error handling
never has the same performance requirements as normal processing.
-Fred
Fred L. Drake, Jr. fdrake at acm.org
PythonLabs at Zope Corporation
