The original issue was the scope of our ed note (calling out which issues
are still open for discussion in the TBTF). I would not agree with just
discussing the "binding specification" statement with dist-app, unless we
start discussing all the core issues of the TBTF on dist-app.
I see the content needing closure within the TBTF as:
Features are the modular components from which the contract between SOAP
nodes and the bindings they support are formed. A binding specification
details how the services of the underlying protocol are used to honor the
contract formed by the declaration of features supported by the binding
being specified.
The combination of the SOAP extensibility model and the SOAP binding
framework provides some flexibility in the way that particular features can
be expressed: They can be expressed entirely within the SOAP envelope (as
blocks), outside the envelope (typically in a manner that is specific to the
underlying protocol), or as a combination of such expressions. It is up to
the communicating nodes to decide how best to express particular features;
often when a binding-level implementation for a particular feature is
available, utilizing it when appropriate will provide for optimized
processing.
Editors note: some discussion continues on how best to represent the balance
of responsibility between binding specifications in particular, vs. other
software at the SOAP node, when dealing with features that are represented
entirely within the SOAP envelope. The paragraph above may need some
additional work to clarify.
Thus the ed note should refer to the above 2 paragraphs and not just the one
above.
As a side note, in reference to Stu's thoughts and one of my original
comments, it appears that bindings and binding specifications are 2 separate
documents. Examples should be provided to illustrate a binding and a
binding specification, to clearly call out the differences in the two
documents and their usage. Providing just an HTTP Binding Specification,
would be incomplete, and would not fully illustrate what our framework
provides(IMHO). By saying this, I am not advocating this approach(yet), but
asking for more clarity if we do go this route. (Glen - Are you planning on
covering such examples in your ftf presentation?)
David Fallside (E-mail); Christopher Ferris (E-mail); Glen Daniels
(E-mail); Hugo Haas (E-mail); Yves Lafon (E-mail); Oisin Ohurley
(E-mail); Marc. Hadley (E-mail); Mark A. Jones (E-mail) (E-mail)
I would tend to agree with this.
Should this not be discussed on xml-dist-app?
Henrik Frystyk Nielsen
-----Original Message-----
From: Williams, Stuart [mailto:skw@hplb.hpl.hp.com]
Sent: Wednesday, November 21, 2001 09:32
Mendelsohn (E-mail); David Fallside (E-mail); Christopher
Ferris (E-mail); Glen Daniels (E-mail); Williams, Stuart;
Christopher Ferris (E-mail); Hugo Haas (E-mail); Yves Lafon
(E-mail); Oisin Ohurley (E-mail); Marc. Hadley (E-mail); Mark
A. Jones (E-mail) (E-mail)
Subject: RE: TBTF text for f2f
Highland,
I see the statement as limiting the scope of a binding
specification to those features that the combination of the
binding and the underlying protocol provide. 'Thin' bindings
may just expose the features of the underlying protocol,
'fatter' bindings may introduce mechanisms of their own.
I do think it right that a binding specification be scoped
down to the things that binding/underlying protocol
combination collectively provide.
I also don't see the circularity you refer to. As I understand
it the contract that a binding provides to the local SOAP
processor is modular. The components of that contract are the
various features that the binding claims to support. The
various feature specifications define the semantics of that
feature (non-normatively in terms of property sets) and the
behaviour of the feature in the abstract. One of the jobs of a
binding specification is then to detail how the binding
honours the contract it makes with the local SOAP processor by
declaring that it provides a particular feature.
So... the various feature specification define components of
the contract between a local SOAP processor and a binding. A
binding declares what features it supports and how (the
concrete mechanisms) it meets the contract implied by its
support of a given feature.
I hope this helps... of course its only how I think about it.
Regards
Stuart
-----Original Message-----
Sent: 21 November 2001 16:59
(E-mail); David Fallside (E-mail); Christopher Ferris (E-mail); Glen
Daniels (E-mail); Stuart' 'Williams (E-mail); Christopher Ferris
(E-mail); Hugo Haas (E-mail); Yves Lafon (E-mail); Oisin Ohurley
(E-mail); Marc. Hadley (E-mail); Mark A. Jones (E-mail) (E-mail)
Subject: RE: TBTF text for f2f
Henrik,
This statement limits the scope of a binding specification to those
features
which are provided by the underlying transport protocol. It also
seems to be a somewhat circular statement in that it speaks of what
the "binding specification" captures and then references the binding
being specified as something which needs to be honored. Are the
binding specification and
the
binding being specified 2 different things?
Highland
A binding specification details how the services of the underlying
protocol
are used to honor the contract formed by the declaration of features
supported by the binding being specified.
-----Original Message-----
From: Henrik Frystyk Nielsen [mailto:henrikn@microsoft.com]
Sent: Wednesday, November 21, 2001 9:47 AM
(E-mail); Christopher Ferris (E-mail); Glen Daniels
(E-mail); Stuart'
'Williams (E-mail); Christopher Ferris (E-mail); Hugo Haas (E-mail);
Yves Lafon (E-mail); Oisin Ohurley (E-mail); Marc. Hadley (E-mail);
Mark A. Jones (E-mail) (E-mail)
Subject: RE: TBTF text for f2f
Could you please clarify what the issue is regarding this paragraph?
Thanks
Henrik
During the last TBTF con-call it was my understanding that the
"binding specification details" statement(first paragraph
below) was also an issue, and the group planned to discuss the
text further. That being the case, the ed note should read the
2 above paragraphs, not the paragraph above.
Hi Highland,
separate
When we talked on the phone what I said was that I think of a binding
specification as a document (a human readable document). I think of a
binding as an instantation (or a realisation - practically a (deployed)
implementation) of that behaviour.
I think that there are (at least) four concepts that may be getting tangled
up.
a) A binding specification: Which declares what features bindings conforming
to that specification supports and how to make use of the services of the
underlying protocol to provide those features.
b) The abstract behaviour that the binding specification describes - a
description of behaviour can change without the described behaviour
changing. There should only be one of these per binding specification.
[However, there could be many specifications that describe the same
behaviour.]
c) The design... and ultimately source and object code that implements the
behaviour specified in binding specification. This will be targetted on a
particular operating environment which may be homogenous or modular. In
general I think we stay well clear of this stuff. There may be many of these
per binding specification.
d) A deployed, configured (if appropriate) and operational instance of such
an implementation - one hopes that there will be may of these per
design/implementation.
I think the term 'binding specification' is clear.
I think the use of the undecorated term 'binding' is less clear. I think it
could reasonably be applied to b) (eg. the behaviour specified in the
normative W3C SOAP/SMTP binding specification), c) (eg. the Apache Axis
implementation of the behaviour specified in the normative W3C SOAP/SMTP
binding specification) or d) (eg. a particular deployment of the Apache Axis
SOAP/SMTP binding implementation on xmlp.w3.org).
Mostly I think I use the term binding for a d) which I also think of as a
'binding instance'.
Binding spec... I think we can provide an example of one (or more) of those.
Binding as abstract behaviour, (b) above... that's hard... it's abstract...
Binding as design/implementation, (c) above... while reasonably one could
think of these as documents (or at least files) I think it would get us into
a bunch of trouble to provide an example of an implementation/design.
Binding as an instance of deployment, (c)... I think that we can talk about
that in the same sense that we can talk about SOAP Nodes and SOAP
Processors.
but
on
I hope I've added clarity rather than confusion... but I fear the latter.
again, FWIW these are just my thoughts.
Best regards,
Stuart
Stu,
Thanks for the detailed note. After the flurry of email last week, it
became apparent that there may have been some miscommunications. Here is my
source of apprehension regarding the current doc...as I read the statement,
"It is up to the communicating nodes to decide how best to express
particular features; often when a binding-level implementation for a
particular feature is available, utilizing it when appropriate will provide
for optimized processing.",
it seems like something is missing, in terms of examples or guidance to our
audience. What is being fed into the communicating nodes to allow them to
"decide how best to express particular features"(if it is something like
WSxL, should we not just say so)? Are we implying that these "decisions"
are being made via an automated process?
Most of you will be meeting ftf in Boston and will be discussing this issue.
I would appreciate it if a con-call could be available for any TBTF ftf ( I
will set up the call, just let me know the date/time).
Thanks,
Highland
Ferris (E-mail); Glen Daniels (E-mail); Hugo Haas (E-mail); 'Henrik
Frystyk Nielsen'; Yves Lafon (E-mail); Oisin Ohurley (E-mail); Marc.
Hadley (E-mail); Mark A. Jones (E-mail) (E-mail); 'www-archive@w3.org'
Hi Highland,
separate
When we talked on the phone what I said was that I think of a binding
specification as a document (a human readable document). I think of a
binding as an instantation (or a realisation - practically a (deployed)
implementation) of that behaviour.
I think that there are (at least) four concepts that may be getting tangled
up.
a) A binding specification: Which declares what features bindings conforming
to that specification supports and how to make use of the services of the
underlying protocol to provide those features.
b) The abstract behaviour that the binding specification describes - a
description of behaviour can change without the described behaviour
changing. There should only be one of these per binding specification.
[However, there could be many specifications that describe the same
behaviour.]
c) The design... and ultimately source and object code that implements the
behaviour specified in binding specification. This will be targetted on a
particular operating environment which may be homogenous or modular. In
general I think we stay well clear of this stuff. There may be many of these
per binding specification.
d) A deployed, configured (if appropriate) and operational instance of such
an implementation - one hopes that there will be may of these per
design/implementation.
I think the term 'binding specification' is clear.
I think the use of the undecorated term 'binding' is less clear. I think it
could reasonably be applied to b) (eg. the behaviour specified in the
normative W3C SOAP/SMTP binding specification), c) (eg. the Apache Axis
implementation of the behaviour specified in the normative W3C SOAP/SMTP
binding specification) or d) (eg. a particular deployment of the Apache Axis
SOAP/SMTP binding implementation on xmlp.w3.org).
Mostly I think I use the term binding for a d) which I also think of as a
'binding instance'.
Binding spec... I think we can provide an example of one (or more) of those.
Binding as abstract behaviour, (b) above... that's hard... it's abstract...
Binding as design/implementation, (c) above... while reasonably one could
think of these as documents (or at least files) I think it would get us into
a bunch of trouble to provide an example of an implementation/design.
Binding as an instance of deployment, (c)... I think that we can talk about
that in the same sense that we can talk about SOAP Nodes and SOAP
Processors.
but
on
I hope I've added clarity rather than confusion... but I fear the latter.
again, FWIW these are just my thoughts.
Best regards,
Stuart
