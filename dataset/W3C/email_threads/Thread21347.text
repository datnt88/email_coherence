I've done a little more work on a client for Annotea, with a view to
supporting annotations in Page Valet.
Since Page Valet generates a normalised representation of page markup
showing validation errors and accessibility warnings as and when they
arise in the markup, it makes sense to use annotea's pseudo-xpointers[1]
(which valet already uses) to reference annotations to the markup.
This is essentially equivalent to what any other annotea client can do,
but because Valet is a diagnostic tool, the view and its purpose differ.
As soon as I had a working prototype, it became abundantly clear that
there is a deep and fundamental flaw in Annotea: we construct long
and detailed pseudo-xpointers, but these become totally useless as
soon as a page is updated. And annotea has no mechanism for dealing
with this, nor indeed even to detect that a page has changed.
It seems to me that annotations need some expiry mechanism for
when the annotated resource changes. This should be qualified
by the significance of a change: for example, a page bearing todays
date may not be regarded as changed when the date becomes tomorrow.
The problem of measuring when a change is significant is one that
has been discussed in ER, where we have considered document hashing.
My prototype implementation[2] hashing on ESIS by filtering nsgmls
output appears to do the job, and might be worth considering for
Annotea:
* Where a document's Elements have changed (as measured by
the hash), the xpointer is invalidated.
* As changes are made, the quality of the annotation is reduced as the
significance of a change increases. Quality exceeding some threshold
could be a database search criterion; dropping below some threshold
could be used to delete or archive the annotation. For example,
if the Headings have changed, there is a strong chance the
earlier annotations are no longer applicable.
[1] They are xpointers only when a page is well-formed XML, which is
neither usual on the Web nor required by Annotea.
[2] http://lists.w3.org/Archives/Public/w3c-wai-er-ig/2001Dec/0029.html
Nick Kew
Site Valet - the mark of Quality on the Web.
First, the amount of problems depends on what kinds of changes are made to
the page and how well id's are used. Sometimes updates can cause only minor
problems e.g. many reviewing changes are often local and the annotation
stays pretty much in the right area even after changing the document (I use
annotations myself all the time now for creating comments and reading them
in context while changing the page and I haven't had problems yet).
But you are right, there is a lot of research that has been done and can be
done in this area. While we have been thinking of different ways of
detecting the changes in the document or even that the information that the
document has changed and looking some of the research on robust pointers we
have not had resources yet to concentrate on this problem.
So I'm very happy that you are doing that with other EARL people. Annotea
does not prevent the use of additional mechanisms that will make the
pointers more robust. New information can be added to schemas for instance
about the document version CVS or ETAG or a checksum. And the clients can
be taught to understand that info when available.
Second, how to change the status of annotations either manually or
automatically as part of the review process is an interesting problem and
we have been discussing about couple of approaches (in our future to do
list). If there are use cases, ideas, solutions etc. we are interested in
hearing about them.
Marja
This fundamental flaw was clear to me and the other members of the
Crit project group as soon as we read the early specifications for
XPointer. We responded by suggesting that XPointer adopt a simple
text-based pointer scheme, using whitespace-insensitive string matching,
but our request was ignored. Instead, XPointer grew more complex,
adding even more features that were perhaps academically interesting,
but few people would use (or even understand) -- while neglecting to
add the simplest, most basic, and most usable method for anchoring
annotations. I find this extremely unfortunate.
It is vital that annotations be anchored in a manner that the *user*
understands. It is not sufficient even to invent a fantastically
intelligent algorithm for re-anchoring when the document is modified.
The re-anchoring must be so simple and predictable that a typical
user can learn to figure out what is going to happen when the
document changes.
Given that all the user gets to see in a rendered document is the
textual content, it follows that the textual content must drive the
anchoring of annotations.
This is how Crit works. See http://crit.org/. Crit has worked this
way since 1997 when it was first introduced, and while it has some
other problems -- it is slow and its current implementation doesn't
scale very well at all, for example -- we have never had a problem
with anchoring annotations to changing documents.
When the string target is unchanged, the annotation sticks; when
the string target is no longer present, the annotation falls off.
This is easy for people to understand. Users can reattach annotations
themselves after they fall off, if they are still relevant. Until
we achieve Xanadu-style live editing of annotated, versioned documents,
i don't think it is really possible to do much better.
See http://crit.org/http://crit.org/draft-yee-url-textsearch-00.txt
for the specification of the anchor protocol that Crit uses.
-- ?!ng
