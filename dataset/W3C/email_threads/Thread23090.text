ElementEditVal.allowedChildren isn't all that useful. What you really
would want is a list of all the element names (and maybe #text if
character content would be allowed) that could appear as the initial
child of the element. If you had a content model like (j,
(a|b|c|d|e|f|g|h|i|k|m|n|o|p)) you would want to guide the user to start
a j element. Once you had that inserted, you could use
NodeEditVal.allowableNextSiblings to guide through the rest of the
content model.
ElementEditVal.allowedAttributes is good, but it would also be helpful
for have an ElementEditVal.requiredAttributes and maybe an
ElementEditVal.fixedAttributes.
It would be useful if DocumentEditVal had a method that took a value
from a NameList from allowedChildren, allowedNextSiblings, et al and
created the corresponding node. The format of the NameList entries is
not described, but without such a method, it would be necessary to parse
the entry into the namespace and local name and then call the
corresponding CreateElement or CreateElementNS.
Something like:
Node CreateNode(string nameListName)
where if nameListName was '@foo', you'd get an attribute, if
nameListName was #text, you'd get a CharacterDataNode and if
'transform:http://www.w3.org/1999/XSL/Transform", an XSLT transform
element and if "foo" a DOM L1 element.
That would suggest that allowedAttributes should return the attribute
values starting with a "@". You'd also need to specify how you'd
represent namespace qualified attributes.
Responses are below.
Thanks,
Ben
allowedChildren is very flexible; subsequent operations would achieve
your desired results. Your suggestion of having a convenience attribute
(the allowed* are all attributes) allowedFirstChildElements was
incorporated.
requiredAttributes was already there; you must have missed it. We decided
against adding a fixedAttributes attribute for now.
If you take a look at the DOM L3 CORE NameList description, these
are not needed.
The proposed name allowedFirstChildElements seems inconsistent with name
allowedChildren. Other than that, I am satisified with the resolution.
Apparently I did overlook requiredAttributes. I agree that
fixedAttributes is excessive,
The current public working draft of L3 Core does not define NameList. I
assume that it is defined in the current working group draft. If
NameList has a provision to creation of nodes from a name entry, then I
would be satisified with the resolution.
I do believe it would be essential to have a coordinated release of a
Core public draft with the next public working draft of L3 validation.
Here is the current NameList interface as defined in the incoming
version of the Core draft (to be published really soon):
// Introduced in DOM Level 3:
interface NameList {
DOMString getName(in unsigned long index)
raises(DOMException);
DOMString getNamespaceURI(in unsigned long index)
raises(DOMException);
readonly attribute unsigned long length;
It does not define a method to create an Element or Attr node, but doing
so can be achieved easily using the createX() methods.
Our current effort is focused on updating the Core and Load/Save drafts
so those drafts should be back in sync soon.
Philippe
Adding
boolean contains(DOMString name);
boolean containsNS(DOMString namespace, DOMString localName);
might allow the elimination of ElementEditVal.isElementDefined[NS]
As an update, your request to consider the addition of contains and
containsNS has accepted as a DOM Level 3 Core Last Call issue:
Philippe
We have decided to keep isElementDefined[NS], as implementations
could be more efficient if left as currently defined and there are no
compelling reasons to eliminate or move these methods. The suggestion
about adding contains[NS] to DOM L3 Core will be considered.
Thanks,
Ben
