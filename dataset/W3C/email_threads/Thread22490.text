Hi!
Here are 3 comments to the 0720 spec.
1) Why isn't there an enumerated NodeType in the Node interface? It's
all
unsigned short constants. Isn't it better to have a defined enum type
for the return value of the method nodeType in the Node interface?
Your descriptions even says: "the IDL specification uses an enum",
in the description of the nodeType method.
2) Shouldn't the item method in NodeList raise an exception when
the index is out of range?
3) Shouldn't wstring be domString or something like that, so that it
will
not interfere with IDL's builtin wstring type? wstring is defined
as a sequence of wchars, which is fine. IDL's builtin wstring is
defined differently which might give a lot of problems.
We have discussed this before, and I was told that wstring
would be changed to domString or something.
Cheers
ANOQ of the Sun / Johnny Andersen
E-Mail: anoq@vip.cybercity.dk or anoq@berlin-consortium.org
Homepage: http://users.cybercity.dk/~ccc25861/
re point 1: Not all languages support enumerations per se. (Java's one
obvious example that doesn't, and the C implementation is not much more
than a self-calculating set of #defines.) I agree that in languages which
do have this feature, and especially in those which perform typechecking on
enums, providing the "named constants" in that form would be appropriate.
But I'm not sure how one formally states language-specific alternatives in
this sort of spec.
(This brings up an interesting question. If a user subclasses the DOM
objects, are they allowed to introduce other kinds of nodes? If so, the
enum approach would require that the enum also be subclassable to add
appropriate nodetypes. I'm not sure which languages that support enums also
support subclassing them. Of course if the node types are _not_ considered
extensible, that isn't an issue.)
Joe Kesselman / IBM Research
Unless stated otherwise, all opinions are solely those of the author.
That's what the language mappings for IDL are for. There are already
mappings for C, C++, Java, Smalltalk and others. Using enum is a kind
of typesafety, which should be used if at all possible. The IDL
language mappings takes care of using them whenever possible.
This might be a problem with enums - I agree. But since your unsigned
shorts are defined in Node, you are still in trouble. You have to change
the implementation of Node to add constants later and if that is an
option, it can be done for enums too.
So in short: There are no real arguments against enums right?
Cheers
ANOQ of the Sun / Johnny Andersen
E-Mail: anoq@vip.cybercity.dk or anoq@berlin-consortium.org
Homepage: http://users.cybercity.dk/~ccc25861/
Not really. It's one thing to extend an interface by adding new
elements; that's routine. But an enum is a class, without the
feature of extensibility. (At least not in C--; in Java, enums
are usually implemented as ints anyhow. One could create a special
class with just N pre-constructed elements and access them through
static variables.)
John Cowanhttp://www.ccil.org/~cowancowan@ccil.org
You tollerday donsk? N. You tolkatiff scowegian? Nn.
You spigotty anglease? Nnn. You phonio saxo? Nnnn.
Clear all so! 'Tis a Jute.... (Finnegans Wake 16.5)
If an implementation is recompiled, won't it conform to the
same "interface" of the enum class, even though values have
been added?
Is this a language? If it doesn't have the same type of
enum as defined in the IDL-specs, it will possibly not
be mapped to a "C-- enum", but rather to a set of integers
or something in "C--".
Ja, jeg taler dansk! ;)
Cheers
ANOQ of the Sun / Johnny Andersen
E-Mail: anoq@vip.cybercity.dk or anoq@berlin-consortium.org
Homepage: http://users.cybercity.dk/~ccc25861/
