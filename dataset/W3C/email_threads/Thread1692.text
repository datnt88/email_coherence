Is it necessary for email that is sent to multiple mailing lists to include,
in its body, an apology to people who receive it multiple times? If they
cared, couldn't they set up an email client to filter out duplicates using
the Message-ID field? Placing an apology in the message body clutters
everybody's email. I would like an apology for the apologies!
Delving deeper, there seems to be a problem with communications applications
having obscure features (e.g. Message-IDs) that people reinvent using social
protocols. How can we entice people to use these features and receive the
benefits of automation without a large investment in learning?
Apologies of my own:
1. Please redirect me, and this discussion, to any mailing lists that might
be more relevant to this topic.
2. This isn't a criticism of this particular Call For Papers. It seems to
be a deeper generic problem, worthy of research.
Tim
From: owner-end2end-interest@ISI.EDU
[mailto:owner-end2end-interest@ISI.EDU]On Behalf Of Atiquzzaman,
Mohammed
Sent: Monday, May 01, 2000 9:37 AM
'enternet@bbn.com'; 'end2end-interest@isi.edu'; 'itc@ieee.org'
Subject: CFP: IEEE IC3N'2000
(Our apologies if you receive this multiple times!!)
[end2endinterest removed...not on topic for that discussion]
in general you don't want to do duplicate suppression based on
message-id alone, because sometimes the same message-id really
is used for significantly different messages (sometimes due
to software bugs, but if duplicate supression were widespread
it would probably be a target of malice ... to keep someone from
seeing a message, send them a different message using the same
message-id). some lists significantly modify messages without
modifying the message-id. (and you probably don't want them
to modify the message-id - it's what lets you trace a message
back to its source)
you can use message-id to find potential duplicates, and then
compare the messages themselves and use heuristics to determine
whether they really are more-or-less the same. or a user agent
could remove extraneous information (e.g. received headers) from
every message it received, hash the result, and compare the hashes
for duplicates. I don't know of any user agent that does either
of these, and unless one gets lots of duplicate mail, it might
not be worth the bother.
mail delivery systems should probably not try to eliminate duplicates
on behalf of their users. sometimes you actually want to know that
you got a copy of the message that was sent through a list even if
you already received a copy by other means. so the user agent would
need to do the duplicate suppression if it is to be done at all.
I don't think we need to find a technical solution to every
social problem that exists with email. the problem exists in other
fields as well - people sometimes get more than one copy of the
same mail-order catalog, for instance - and we don't lose too much
sleep over it.
in general, the purpose of apologies are to avoid getting compliants
from people who are naive enough to think that this is the sender's
problem rather than the recipient's.
Keith
Carnegie Mellon's legacy e-mail system has been eliminating duplicates
based on message-id alone (well, with recepient envelope address) for
many years (circa 1985?), and our new system, the Cyrus IMAP server,
also does it. We never get any user complaints except when it doesn't
work.
The denial-of-service attack is interesting, and text should probably
be added to the relevant document that message-ids should be
reasonably unpredictable if it's not there already.
Larry
From: Keith Moore moore@cs.utk.edu
Date: Tue, 02 May 2000 12:33:52 -0400
[end2endinterest removed...not on topic for that discussion]
in general you don't want to do duplicate suppression based on
message-id alone, because sometimes the same message-id really
is used for significantly different messages (sometimes due
to software bugs, but if duplicate supression were widespread
it would probably be a target of malice ... to keep someone from
seeing a message, send them a different message using the same
message-id). some lists significantly modify messages without
modifying the message-id. (and you probably don't want them
to modify the message-id - it's what lets you trace a message
back to its source)
you can use message-id to find potential duplicates, and then
compare the messages themselves and use heuristics to determine
whether they really are more-or-less the same. or a user agent
could remove extraneous information (e.g. received headers) from
every message it received, hash the result, and compare the hashes
for duplicates. I don't know of any user agent that does either
of these, and unless one gets lots of duplicate mail, it might
not be worth the bother.
mail delivery systems should probably not try to eliminate duplicates
on behalf of their users. sometimes you actually want to know that
you got a copy of the message that was sent through a list even if
you already received a copy by other means. so the user agent would
need to do the duplicate suppression if it is to be done at all.
I don't think we need to find a technical solution to every
social problem that exists with email. the problem exists in other
fields as well - people sometimes get more than one copy of the
same mail-order catalog, for instance - and we don't lose too much
sleep over it.
in general, the purpose of apologies are to avoid getting compliants
from people who are naive enough to think that this is the sender's
problem rather than the recipient's.
Keith
just for grins, see whether you get this message or the "fake" one
that I just sent to you with the same message-id.
(this is the real message)
Keith
i received the 'fake' message. interestingly enough, i'm unable to
tell exactly where the duplicate message got filtered out---only one
ever hit our IMAP server, and our delivery system is still mostly
under control of AMS, which functions in it's own strange and mystical
ways that I do not totally comprehend.
I read this list via a shared bboard---which also has duplicate
delivery suppression (the mail system views it just like any other
user).
More interesting then your denial-of-service attack on yourself is the
problem of a mailing list that both you and I are on:
- you receive a message, and decide to prevent me receiving it
- you immediately send me a message with the same message-id
If the mailing list exploder decided to deliver to me later than you
(especially if it's a large mailing list) you have a good chance of
denying me receiving a message.
It's hard to come up with a simple scheme to prevent this, since most
of the obvious things to hash can easily be duplicated, and you
generally want a message with the same message-id but a different body
to be repressed --- since it's probably the "[to unsubscribe, blah]"
message from a mailing list.
Larry
yes, that's my point. I can just send you a copy of an advertisement
for toner cartridges with the same message-id as the message I don't
want you to see.
not sure what you mean here - my idea is for the recipient's
user agent (or in your case, message store) to index
messages received by message-id, but have the potential to
store duplicates.
so when a message gets received, the message-id is extracted,
and a secure hash is made of the message (minus its received
fields and anything else that seems extraneous). if there
was another message with that message-id and the same hash,
the new message is ignored. if there was another message
with the same message-id but a different hash, the new message
is treated as a separate message.
and you generally want a message with the same message-id but a
different body to be repressed --- since it's probably the
"[to unsubscribe, blah]" message from a mailing list.
maybe, but the mail system doesn't know for sure.
Keith
So forget the message-ID and just store the secure hash.
yep, if you're going to just compare hashes then you might as well
forget the message-ID altogether.
the message-id could still be useful if you want to compare the
message using other means, or to point out to a human
"hey, we've got these two messages with the same message-id".
Keith
I have many times complained that so few mailers utilize
the opportunities provided by Message-ID, In-Reply-To,
References and (not yet standard) Supersedes to correlate
related messages. Such correlation functions will provide
simple user commands for actions such as "find the message
which this message is a reply to", "find all replies to
this message", "find all message in this thread".
Duplicate messages can be detected either by Message-ID
or by some kind content checksum. Instead of rejecting
one of them (like Usenet News servers do) they should
be correlated.
(If a Usenet News server gets a message with Message-ID
xyz to newsgroup A, and then gets the same message again
to newsgroup B, it will reject the second copy of the
same message, instead of delivering it to newsgroup B.
I can understand why it works like that, but it is not
nice and proper. If two mailing lists gateway to two
newsgroups, then this means that messages sent to both
mailing lists will only occur on one of the newsgroups.)
Example of you can correlate messages with the same Message-ID:
You get a message with
Message-ID: xyz@foo.net.bar
And another message with identical content, and the headers
Message-ID: xyz@foo.net.bar
You can then display this to the user something like this:
Message-ID: xyz@foo.net.bar
If two messages have the same Message-ID but not identical
content, it is still useful to correlate them, for example
From: marys@foo.bar.net
Other messages with the same Message-ID
The recipient can then click on this link to see the other
messages with the same ID.
See also http://dsv.su.se/jpalme/ietf/message-threading.html
Jacob Palme jpalme@dsv.su.se (Stockholm University and KTH)
for more info see URL: http://www.dsv.su.se/jpalme/
Usually the messages are not identical. The names listed
in the To, Cc and Bcc headers are usually different.
Jacob Palme jpalme@dsv.su.se (Stockholm University and KTH)
for more info see URL: http://www.dsv.su.se/jpalme/
The Message-ID has the advantage of identifying also not-quite-
identical messages, for example with different information in
the To, Cc and Bcc headers or Resent-From added or something
like that. You cannot make a secure hash on just the content
of a message, there is an obvious probability that several
entirely unrelated messages will have the same textual content,
for example "Yes" or "I love you!".
Jacob Palme jpalme@dsv.su.se (Stockholm University and KTH)
for more info see URL: http://www.dsv.su.se/jpalme/
Less so now than 5 years ago. It's a shame that MS Outlook, used with
MS Exchange, doesn't seem to set either References or In-Reply-To.
It's making non-inferential threading harder and harder to do for
mailing lists. Shouldn't we be discussing this on the 822 mailing
list?
Bill
The people at Microsoft do listen to complaints of this kind,
so we should try to influence them. Everyone who knows
someone at Microsoft, remind them of this issue, and recommend
them to read http://dsv.su.se/jpalme/ietf/message-threading.html
then maybe the next generation of Outlook will get good thread
support!
I am sending a copy of this e-mail to one friend of mine who
works at Microsoft, and who has done good work in the past
on getting his company produce standards-compliant products.
Jacob Palme jpalme@dsv.su.se (Stockholm University and KTH)
for more info see URL: http://www.dsv.su.se/jpalme/
