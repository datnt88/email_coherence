Should the setCssText method of a CSSRule that contains a style
declaration [eg. CSSStyleRule] behave similarly to the setCssText of
CSSStyleDeclaration. I.e can it be used to add CSSValues to the rule's
internal style declaration. Example:
styleRule.setCssText("H1 {font-size: 10pt}");
styleRule.setCssText("H1 {ascent:10}");
Should the last line remove 'font-size' from the style's internal style
declaration or will it simply append the 'ascent' value, leaving the
'font-size' value intact. The latter behavior seems the more reasonable
solution, but it is not stated in the specification. If the former
behavior is followed then there will be problems dealing with outstanding
CSSValues.
Thanks for the clarification.
Blaine
It will remove it. setCssText is setting the _entire_ cssText - otherwise,
it should be called "appendCssText".
Should the setCssText method of a CSSRule that contains a style
declaration [eg. CSSStyleRule] behave similarly to the setCssText of
CSSStyleDeclaration. I.e can it be used to add CSSValues to the rule's
internal style declaration. Example:
styleRule.setCssText("H1 {font-size: 10pt}");
styleRule.setCssText("H1 {ascent:10}");
Should the last line remove 'font-size' from the style's internal style
declaration or will it simply append the 'ascent' value, leaving the
'font-size' value intact. The latter behavior seems the more reasonable
solution, but it is not stated in the specification. If the former
behavior is followed then there will be problems dealing with outstanding
CSSValues.
Thanks for the clarification.
Blaine
Setting this attribute will result in the parsing of the new value and
resetting of the properties in the declaration block. It also allows the
insertion of additional properties and their values into the block.
-- Document Object Model CSS
Wed, 10 May 2000 15:09:02 GMT
Hum, the cssText description could be better. What about :
Setting this attribute will result in the parsing of the new value and
resetting of all the properties in the declaration block including
theremoval or addition of properties.
Philippe
Yes, this description is good. Can you please tell me what would happen
in the following case where I retrieve a CSSValue from the rule's style
declaration, and then make a call to the rule's setCssText method which
removes the value's property from the declaration? Does the outstanding
CSSValue reference become detached from its parent rule and simply perform
method calls on the old data [without affecting the rule's declaration
values] or does the reference become invalid and invalid state exceptions
are thrown on any of the value's method calls?
Example.
styleRule.setCssText("H1 { ascent: 10 }");
CSSValue styleValue = style.getPropertyCSSValue("ascent");
style.setCssText("H1 {} "); //**** ascent property is removed eventhough
a reference is outstanding ***//
( (CSSPrimitiveValue)styleValue).getFloatValue();
Does the last call throw an invalid state exception or does it return the
old value 10?
Thanks,
Blaine
Hi Chris,
'appendCssText' is probably a better name, however CSSStyleDeclaration's
setCssText, according to the current description, does not remove any
properties. It is only capable of resetting and appending additional
properties.
Blaine
From: bbrodie@savagesoftware.com (Blaine Brodie)
Subject: Re(2): Expected behavior of CSSRule's setCssText.
Too late for the next publication. I'll add the text before the REC.
In that case, style.getPropertyCSSValue("ascent") will return null. The ascent
property can be only applied on the @font-face rule [1].
Let me rewrite your example:
fontfaceRule.setCssText("@font-face { ascent: 10 }");
CSSValue fontfaceValue = fontfaceRule.getPropertyCSSValue("ascent");
style.setCssText("@font-face {} "); /**** ascent property is removed eventhough
a reference is outstanding ***/
( (CSSPrimitiveValue)fontfaceValue).getFloatValue();
Since the default value of the ascent font property is undefined, getFloatValue()
will return INVALID_ACCESS_ERR. But I certainly don't recommend this kind of
program
since this depends on the CSS property. Some CSS properties can be a CSSValue
or a CSSValue or a CSSValueList.
Let's imagine a property "foo" with the following definition:
inherit | integer | ident +
Depending on the value, you'll cast the CSSValue in a different way.
It becomes a nightmare if you invoke setCssText on the CSS*Value* after the cast.
Some implementations can raise an INVALID_ACCESS_ERR, some others an invalid
state exception, this depend on your implementation. I'm not sure we want to
define
these corners cases. It will add more constraints on the implementation of the
interfaces and complexity in the spec for a bad practice.
I recommend to change your program if you really want to do that as following:
fontfaceRule.setCssText("@font-face { ascent: 10 }");
CSSValue fontfaceValue = fontfaceRule.getPropertyCSSValue("ascent");
style.setCssText("@font-face {} "); /**** ascent property is removed eventhough
a reference is outstanding ***/
if (fontfaceValue.getValueType() == CSS_PRIMITIVE_VALUE) {
// this raises an INVALID_ACCESS_ERR since it is really a CSSPrimitiveValue
( (CSSPrimitiveValue)fontfaceValue).getFloatValue();
Philippe
[1] http://www.w3.org/TR/CSS2/fonts.html#matching
Hello Philippe,
Thanks for the clarification. One other question regarding expected
behavior of the setCssText method. What is expected to occur when there
is an outstanding reference to a property value and then the property is
removed via the rule's setCssText method and then that property is added
back in via another call to the setCssText method. Should the outstanding
reference be reenabled or will the reference remain in an invalid state
for the rest of its life?
Example:
fontfaceRule.setCssText("@font-face { ascent: 10 }"); //property added
CSSValue fontfaceValue = fontfaceRule.getPropertyCSSValue("ascent");
fontfaceRule.setCssText("@font-face { }"); //property removed
fontfaceRule.setCssText("@font-face { ascent: 10}"); //property re-added
Should 'fontfaceValue' become reactive after the last call?
Blaine
All CSS objects in the DOM are "live", like NodeList or Attr. So,
if you get a reference to a CSSValue object, it will be updated
even if you do the changes throught the CSSStyleDeclaration interface.
Philippe
