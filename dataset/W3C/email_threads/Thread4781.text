SUGGESTION 1:
3.10.3 Stylesheet Import.
"The order of import precedence (lowest first) is D, B, E, C, A.
In general, a declaration with higher import precedence takes precedence
over a
declaration with lower import precedence. This is defined in detail for
each kind of
declaration"
It is not clear for me why "In general". Why we cannot have it
as a common rule.I don't understand why sometimes we use import
precedence (e.g. in 9.5 Global Variables and Parameters) sometimes
don't (e.g. in 16.4.1 Defining a Decimal Format). I think it should
be explained. If there is no any technical reason to have it just "In
general" ,
we should have common rules - we should use import precedence
(not using import precedence as a "common rule" makes no sense because it
would
have the same functionality as xsl:include).
SUGGESTION 2:
lang attribute used in xsl:number(12 Numbering)
and xsl:sort (13.1 The xsl:sort Element) language argument used in
date formatting functions (16.5 Formatting Dates and Times)
format-dateTime, format-date, format-time
The attribute and arguments have common rules "The effective
value of the attribute must be a value that would be valid for
the xml:lang attribute"
(http://www.w3.org/TR/1998/REC-xml-19980210#sec-lang-tag).
The specs define precisely mapping from value of the attribute to ISO 639
language
and ISO 3166 country codes.
Problem Mapping from a value of the attribute to a variant code is not
specified.
Solution
A variant code should be constructed from the substring after the second
tag separator
by converting the substring to upper case and replacing all '-' characters
with '_'.
The variant code is ignored, if implementation cannot find a resources for
the variant code
with given ISO-639 language and ISO-3166 country code. A warning message
should be issued
in this case. Changes in behavior caused by the variant are implementation
defined.
SUGGESTION 3:
16.4.1 Defining a Decimal Format
Add attribute lang? = { nmtoken }.
The rules for the attributes are the same as for
this attributes in other elements (e.g. xsl:number).
lang attribute should control default values for attributes:
decimal-separator, grouping-separator, infinity minus-sign, NaN,
percent, per-mille, zero-digit.
(e.g. text "decimal-separator specifies the character used for the
decimal-separator-sign;
the default value is the period character (.)"
should be replaced with
decimal-separator specifies the character used for the
decimal-separator-sign;
the default value is default for a given language".
SUGGESTION 4:
20 Serialization normalize-unicode? attribute of the xsl:output element
Problem:
Not clear which normalization forms to use. "NFC"?
Why we should have "NFC" only, if we can support others as in
fn:normalize-unicode?
Solution:
normalize-unicode? = string
The attribute should follow the rules of the second
argument($normalizationForm )
of the fn:normalize-unicode
(http://www.w3.org/TR/xquery-operators/#func-normalize-unicode)
Igor Hersht
XSLT Development
IBM Canada Ltd., 8200 Warden Avenue, Markham, Ontario L6G 1C7
Igor,
In [1], you submitted the following comment on the XSLT 2.0 and
Serialization last call drafts.
Igor Hersht wrote on 2004-01-11 05:01:13 PM:
Thank you for your comment.
The XSL and XQuery Working Groups discussed your comment, and agreed
that the serialization parameter for Unicode normalization should be
aligned with the fn:normalize-unicode function and permit additional
normalization forms to be specified. The working groups decided to make
the following changes to the definition of the normalize-unicode
serialization parameter:
1. Rename the parameter to "normalization-form".
2. The possible values of the parameter will be "NFC", "NFD", "NFKC",
"NFKD", "fully-normalized", "none" or an implementation-defined
normalization form. The default value is "none". We will also add
a note advising of the interoperability problems that can arise by
using anything other than NFC.
3. All of "NFC", "NFD", "NFKC", "NFKD", "fully-normalized", "none" and
any implementation-defined value are permitted for the xml, xhtml and
text output methods. The values "NFC", "fully-normalized" and "none"
must be supported by an implementation for these output methods.
4. The normalization-form parameter is permitted to have the values
"NFC", "NFD", "NFKC", "NFKD", "none" or an implementation-defined value
if the output method is "html". The values "NFC" and "none" must be
supported for the html output method. The value "fully-normalized" is
not permitted if the output method is "html".
5. In the case of "fully-normalized", the normalization is the same as for
NFC, but the processor must signal a serialization error if any of the
"relevant constructs" of the result would begin with a combining
character.
The XSL Working Group will also make the corresponding changes to the
xsl:output element in XSLT 2.0, replacing the normalize-unicode attribute
with a normalization-form attribute.
May I ask you to confirm that this response is acceptable?
Thanks,
Henry
[1]
Henry Zongaro Xalan development
IBM SWS Toronto Lab T/L 969-6044; Phone +1 905 413-6044
I think it is OK.
There is some discrepancy between specs for fn:normalize-unicode
(according to the latest Draft) and the normalization-form attribute.
The ?fully-normalized ? value of the normalization-form attribute must
be supported . This normalization is not mandatory to implement for
fn:normalize-unicode.
The ?fully-normalized ? mode could be difficult to implement.
Igor Hersht
XSLT Development
IBM Canada Ltd., 8200 Warden Avenue, Markham, Ontario L6G 1C7
Henry
Zongaro/Toronto/I
BM To
Igor Hersht/Toronto/IBM@IBMCA
03/27/2004 09:56 cc
PM public-qt-comments@w3.org
Subject
Re: [XSLT2.0](Document link: Igor
Hersht)
Igor,
In [1], you submitted the following comment on the XSLT 2.0 and
Serialization last call drafts.
Igor Hersht wrote on 2004-01-11 05:01:13 PM:
Thank you for your comment.
The XSL and XQuery Working Groups discussed your comment, and agreed
that the serialization parameter for Unicode normalization should be
aligned with the fn:normalize-unicode function and permit additional
normalization forms to be specified. The working groups decided to make
the following changes to the definition of the normalize-unicode
serialization parameter:
1. Rename the parameter to "normalization-form".
2. The possible values of the parameter will be "NFC", "NFD", "NFKC",
"NFKD", "fully-normalized", "none" or an implementation-defined
normalization form. The default value is "none". We will also add
a note advising of the interoperability problems that can arise by
using anything other than NFC.
3. All of "NFC", "NFD", "NFKC", "NFKD", "fully-normalized", "none" and
any implementation-defined value are permitted for the xml, xhtml and
text output methods. The values "NFC", "fully-normalized" and "none"
must be supported by an implementation for these output methods.
4. The normalization-form parameter is permitted to have the values
"NFC", "NFD", "NFKC", "NFKD", "none" or an implementation-defined value
if the output method is "html". The values "NFC" and "none" must be
supported for the html output method. The value "fully-normalized" is
not permitted if the output method is "html".
5. In the case of "fully-normalized", the normalization is the same as for
NFC, but the processor must signal a serialization error if any of the
"relevant constructs" of the result would begin with a combining
character.
The XSL Working Group will also make the corresponding changes to the
xsl:output element in XSLT 2.0, replacing the normalize-unicode attribute
with a normalization-form attribute.
May I ask you to confirm that this response is acceptable?
Thanks,
Henry
[1]
Henry Zongaro Xalan development
IBM SWS Toronto Lab T/L 969-6044; Phone +1 905 413-6044
Igor,
and you responded:
Igor Hersht/Toronto/IBM wrote on 2004-03-29 12:06:55 PM:
It was my understanding there had been a comment against F&amp;O that an
implementation should be required to support the parameter value
"fully-normalized" for the fn:normalize-unicode function. I specified
here that the value "fully-normalized" must be supported as a value for
the normalization-form parameter in order to align with what I understood
was a pending change to F&amp;O.
Ashok: Can you confirm that an implementation will be required to support
the value "fully-normalized" for the fn:normalize-unicode function?
Thanks,
Henry
Henry Zongaro Xalan development
IBM SWS Toronto Lab T/L 969-6044; Phone +1 905 413-6044
