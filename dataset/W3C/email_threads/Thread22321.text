One of the big problems in trying to come up with a reasonable
specification for the DOM is trying to figure out how much we
should do to cope with broken HTML documents. Obviously
seriously broken documents will cause so many problems
that we just don't want to get into, but there are some
classes of common mistakes that we can maybe allow.
One of these classes of mistakes is overlapping elements,
of the form
We are thinking of defining nodes that would effectively change
the above example into
This does have effects on style sheets and other operations that
refer to the parent element, since the first EM element has a
different parent in the two examples.
Since we don't really want to encourage people to write broken
documents, there is also the problem of whether we should do
anything for overlapping elements at all. The choices are:
1) don't do anything for overlapping elements
2) do something and deprecate it immediately, so it will be in level
one but not level two
3) put it in without deprecating.
The DOM WG would like feedback on this issue. Which option do
you think the best?
thanks,
Lauren
Lauren Wood, posting as chair of the W3C DOM WG
Why would it be easier to take this out in version 2 than in version 1?
Anyone who reads specs. already knows that this is invalid. The fix that
you suggest will encourage more mistakes of this type.
Paul Prescod
I think that page authors need to learn to write good HTML. Back when
netscape released version 2.0 which had much more strict parsing of HTML
thousands of pages broke, and many "Tricks" ceased to work. But after the
release most people's HTML got better. Which is a good thing.
I think that if there are errors in your HTML you should clean them up
before trying to manipulate them with the DOM. Most pages that will be
relying on using dom will probably be new, or will be older pages that
will be re-produced, or fixed to ensure compatibility. HTML mistakes can
be fixed there.
This fix would be bad as it separates the percieved structure from the
"physical" strucutre of the HTML file. This would add extra elements into
the strucutre and would cause strange workarounds. Better to know that
your HTML is broke so you can fix it, rather than having to place all
kinds of workarounds in your scripting because this particular page "acts
all wierd".
I'd be in favor of number 1. Or maybe even return an error status to the
UA.
--- "How long have you been wanting me to talking like a bot?" ---
taylor@taylor.org
Coping with broken HTML greatly increases the complexity
of any HTML-related development project. It helps prevent
small companies from competing with the big guys and
ensures that simple shareware and one-off utilities will not be
generally useful. Strictly enforcing the model will save
countless hours of programming in the future, and make
the tools market more competitive.
Jamie Hamilton
Torso, Inc.
I would vote for indicating an error to the user/author. Borken HTML should
be fixed in the first case.
My browser copes with broken HTML like this:
At this point, you have an end tag which does not match the current element,
but that element's start tag is on the stack (this is a stack-based parser).
Close all open elements until the corresponding element is closed. Extraneous
close tags are ignored. Hence my solution would be equivalent to:
This method has the advantage of not requiring the parser to look ahead.
To an author who is testing their document, hopefully this strategy would
reveal
that there is a problem with the document (because something they thought
would be italicised isn't).
Hope that helps,
Steve Ball
this is the best proposed alternative that i've seen thus far. it
allows the browser to provide a suitable, and rational, alternative
while also enforcing a "standard" approach to writing code. someone
who has written the flawed code, and sees it as it is displayed (i.e.
flawed) should make the changes themselves.
the whole point of drafting a standard is to develop a "correct" way
of coding. this implies one way to do it.
when we find that we're accounting for variations on a given way to do
something, we run into more complicated code and software with more
potential for bugs. when we plan on (and make accomodations for)
other people's mistakes, then they will make them.
regards
ed.q.bridges
P B This is EM not /B a good idea /EM /P
