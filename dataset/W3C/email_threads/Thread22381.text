These are comments on DOM Level 1 document as of 9th of October draft.
In Element:
There might be comments inside the tag (eg foo --this is foo-- bar=val
Am I correct in understanding that comment node should be generated for
that and returned in getChildren() call, but not in getAttributes()
call. The alternative is to not represent in-tag comment in DOM. What
about error nodes. (I know they should not happen, but....)
In Attribute:
Description for when null is returned for getValue() is slightly hard to
understand. :-{ Also, how stylesheets will influence this getValue() is
not clear either. In my understanding CSS value would be check after
explicit value, but before default value. Some mention of it should be
done, even if it is not quite in scope yet.
In PI:
I don't know about XML, but isn't PI ends with  , not ? .
Whitespace for HTML:
If I have a sequence of whitespace, would the corresponding TextObject
contain a single whitespace or multiple whitespace? Basically, whether
space collapsing should happen before or after DOM?
Requests.
It would be nice to provide an archive of files with relative links
between documents. As of now, I had to download each file separately and
read through them by checking what document link is _trying_ to point too.
I want to use DOM's java definitions for my Browser project. Do I have to
put the definitions in w3c.dom package or it should be in my personal
project space because they are still in a state of a fluke? (basically, I
don't want to end up in trouble with w3c released packages). Also, for
future, would it be possible to release those files as a downloadable
archive in natural (java) form, so people could use them straight away?
Regards,
Alex.
Ps. I like DOM. :-}
Alexandre Rafalovitch arafalov@socs.uts.EDU.AU wrote on 16 October 1997
02:37:
Comments are not allowed in SGML/XMl start-tags or end-tags. If they are
allowed in HTML (which I doubt) we can forget the idea of associating DTDs
with HTML!
In HTML  is used as the PIC delimiter, in XML ? is used for the same
delimiter. What is important is to know what the apporpriate SGML
declaration says should be used as the PIC delimiter.
Before
This is not allowable in SGML or XML.
I don't really know what you mean by error nodes, but in general it may
not be possible to define a DOM on erroneous input. Certainly, the input
must be good enough to model before we can define a document object model
for it.
I don't understand what stylesheets have to do with this. What getValue()
gets has nothing to do with stylesheets.
I don't claim to know how CSS works, but with the "specified()" method,
it should be possible to tell if an attribute has been given an explicit
value or not. If an application really wanted to get only an attribute's
explicit value but not a default value, it would have to do logic such as:
if the attribute has an explicit value specified()
return getValue()
else
return null
Note that in the case of an XML application (and, I would have thought, almost
any presentation sort of application for either HTML or XML), one usually wants
getValue() to get the default if there is no specified value, so that should
be the definition of getValue()
In XML, it ends with ? . In HTML, it ends with  .
The initial (raw) structure model should be before any space collapsing.
Collapsing space (which you presumably would not want to do in pre
elements and such--and this is something a general XML application can
only tell by consulting the stylesheet) is one of the "recipes" for
"cooking" the initial (raw) structure model to produce a transformed
model. The DOM must allow access into all models--and most especially
the initial (raw) structure model.
Thanks for taking the time to comment on the draft.
paul
What about the case when it is possible. For example, if you look at html
source code with errors in Netscape, you would notice, it recovers from
errors by ignoring part of the input (it is shown in different color).
This way, you can see where was the error. In the same way an Error node
would just contains text representation of skipped part and can be ignored
by the application processor if not needed. Most probably it could happen
on any level.
Regards,
Alex.
I will have to let others answer for HTML--preferably someone from Netscape
or Microsoft.
XML does not allow a document to have well-formedness errors. An object
that is not well-formed is not an XML document and is therefore not
addressed by the DOM per the current official position as I understand it.
Therefore, there will be no such thing as an Error node in the DOM for XML.
The DOM is built from the output of and XML or HTML parser. Only "well
formed" XML or HTML may be meaningfully represented in the DOM. The major
browsers, for good business reasons, I suppose, attempt to "make sense" out
of HTML that is not well formed, but don't count on the DOM doing anything
along these lines.
Mike Champion
At 21:27 1997 10 15 -0400, Alexandr   These are comments on DOM Level 1
document as of 9th of October draft.
Ok, just to be cristal clear.
If I am writing a browser and it uses DOM to represent the parsed
document and my parser can "make sense" of partially wrong input, the
erorrs should be discarded as "non-significant" and would not show up in
DOM.
This way, if internal structure was written out from the DOM structure,
any errors that were in original document would not appear in the output?
Alternatively, should we assume that by the time browsers will implement
DOM, all documents out there will be well-formed and browser can just
reject non well-formed documents?
Regards,
Alex.
Ps. Lenin has once wrote that by the time communism will arive, no thiefs,
robbers and other bad elements would be left in society, just by the fact
that it is better to be a good guy then a bad guy. He also expected
communism to arrive within something like 20 years.
There's no way to be "crystal clear" here because it's not safe to assume
ANYTHING about what a browser that "fixes up" invalid HTML will do to
represent it in the DOM. The representation of a non-well-formed document
in the DOM is "undefined" at present, so different vendors may do different
things. If we get lots of feedback indicating that this is unworkable, we
might address it in a later draft of the DOM spec. But the solution is
likely to be more "Stalinist" than "Leninist", e.g., throwing an exception
determining that it is a "non-document" and sending it to the DOM
equivalent of Siberia.
We're not assuming that all documents on the Web will be well-formed by the
time the DOM is released (of course), but we are saying that anyone who
wants to use the DOM to manipulate their Web document had better make sure
that it is well-formed first.
I think this kind of annotation could be very useful. Much in the same way the
"Java Console" in Netscape provides us with a record of what classes didn't make
it etc.....it could be a very useful log for what code was "passed over"
....which code was "available" compared to what was actually "parsed" ;-)
