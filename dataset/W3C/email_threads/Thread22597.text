Hello,
We are currently experiencing troubles in dynamically creating XML
files with explicit reference to PUBLIC and SYSTEM ids for DocumentType.
DOM2 explicitly doesn't support editing DocumentType nodes [1],
publicId and systemId are readonly attributes.
What is the deep reason why they are read-only ? We hacked
setPublicId(DOMString &amp; value) and setSystemId(DOMString &amp; value) and
couldn't find drawbacks. Any hint/comment on the subject are welcome.
[1] :
Oliver Fleig
Olivier Dameron
olivier.dameron@chu-rennes.fr
The DocumentType was defined as being set only at document creation time
because there was a concern that some DOM implementations might want to
select different subclasses based on the kind of document being processed.
(The requirement that createDocument() also create the Document Element,
which may never be replaced thereafter, partly arose from the same
concern... though there was a well-formedness issue as well.)
For example: A DOM implementation might want to recognize HTML documents
and automatically create an HTMLDocument rather than a core Document.
We recognize that this isn't an ideal sequence for those of you writing
parsers, which may need to stack up a series of doctypes and PIs and
comments before you have enough information to call createDocument. DOM
Level 3 may introduce alternative approaches to document creation which
relax this. And DOM Level 3's Content Model work may introduce the ability
to alter or replace the DocumentType on an existing document. But this is
all work-in-progress and wasn't ready for standardization in DOM Level 2.
Joe Kesselman / IBM Research
Even though, how come the created document cannot refer to a DTD with
PUBLIC and SYSTEM identifiers ?
I saw DOM3 enabled working within DTD, but we are more interested in
specifying an external DTD and in designating it with public and system
ids.
Are we the only one willing to perform such a weird task ?
Olivier Dameron
olivier.dameron@chu-rennes.fr
At least implementations using standards I'm most familiar with.
But ... if "HTML Documents" were only recognized using metadata,
never the document preface (DTD etc), then it'd be ideal. Perhaps
there's some relevant parser that works that way.
Actually, as I've commented before, that applies well to the
DTD-related changes which WERE made by DOM Level 2!
This could easily have been changed in later L2 drafts; the
work-in-progress stopped earlier than you imply.
- Dave
I'm not sure I'm following your question. Fields for those values were also
added in DOM Level 2; see the parameters to createDocumentType and the
readonly publicId/systemId attributes of the DocumentType object. The only
constraint is that -- at this time -- the DocumentType object must be
created first, then passed in to createDocument().
At least, that's true if you're using the standard DOM APIs. Some parsers
do bypass this, when building their own DOM implementations, and use custom
APIs for the purpose. There are a few other places where "magic"
information is currently needed, such as the default values for attributes.
DOM Level 3 expects to close (most of?) those holes.
The Level 3 content-model API should support this... though it may be hard
to tell since the chapter is still evolving and will need more descriptive
text. If there's a specific use case you think we might have missed, let us
know, but the simple external subset case you've just described is
_definitely_ already on our list.
Joe Kesselman / IBM Research
