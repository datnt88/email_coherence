Just to see if this is an empty space :-)
My Interest in this group:
I have a customer requirement for
xpath type navigation with an xml
document as one view; 'tother is audio.
Struggling with the Java, but have managed
to date.
Regards, DaveP
Hello,
My interest - writing B2B and general IT components using XML and
XML-Schema to glue them together in an open and discoverable way.
Perhaps we could establish some use cases for an in-DOM XPath
implementation?
I thought the article on RAX
(http://www.xml.com/pub/2000/04/26/rax/index.html) made a good point -
not so much the memory requirement, which doesn't apply to my
glue/parameter usage, but the complexity of writing simple business
functions in raw DOM.
I've adapted the test data, and writen some DOM level 1 code in MS
JScript to do a simple query. The results were quite interesting.
Here's how the query works in Windows:
D:\xmlSchema tableDOM table.xml "Francis Norton"
Phone=555-676767
D:\xmlSchema
The first thing to note is that the query part of the program takes 15
lines of code in tableDOM.js, versus 3 lines using a hypothetical
queryNodes() function in tableXpath.js.
The second thing is that even with the 15 lines of code, the existing
DOM code is rather less robust, and might require expansion to cope
with optional Name or Path nodes, though to be fair you would probably
start to write some kind of library to cope with these uses. Which would
of course amount to re-inventing a small part of the xPath wheel.
Francis.
In case this is not generally known:
// get all records
var numbers =
data.queryNodes("//Record[Name='"+WScript.Arguments(1)+"']/Phone");
translates into:
// get all records
var numbers =
data.selectNodes("//Record[Name='"+WScript.Arguments(1)+"']/Phone");
in the current MSXML implementation.
The example also exposes another problem that has been discussed recently:
this code will fail if WScript.Arguments(1) contains an apostrophe. That's
why I think that a well-defined API should allow to bind values to
variables, and to reference these variables just like in XSLT.
Julian
Yes. Perhaps I should have used that - the only problem is that I can't
get it to work in my build of MSXML, even with "/Record[Name='" +
WScript.Arguments(1) + "']/Phone/text()", which I assume is the correct
expression. And it explodes any time I try to use an explicit "child::"
axis. Time for another install...
That seems like a good point - I could have been searching for "Patrick
O'Brien". Are there any other features from XSLT which are key to the
successsful use of XPath?
Francis.
Are there any other features from XSLT which are key to the
successsful use of XPath?
Now that is a key question.
I've used xpath/xslt quite regardless of which I am using,
in an XSLT stylesheet.
I'm sure I'm going to come to a point where I want something
from XSLT... unless the editors have out-thought us all :-)
Which is quite possible!
Can anyone think of anything immediately?
Perhaps the mulberrytech quick reference card is a good
starting place. It does id the functions.
document() key format-number current generate-id (damn, I could
have used that) system-property (good candidate for use? Or not
necessary since we could operate from java with good access to
system properties anyway) element-available and function-available.
From a brief scan, all other stuff seems to be focussed on the
output side.
My only candidate then would be generate-id(), and this only
to provide an identifier for a particular node, which I'm sure
could be done some other way.
Is there anything in dom2 that does this sort of thing?
(From memory, there is a function which gets a hash code isn't there?
I don't have the DOM docs to hand)
Regards, DaveP
From: Francis Norton [mailto:francis@redrice.com]
Sent: Tuesday, May 02, 2000 7:05 PM
Subject: Re: Test message
If you need XPath rather than the IE5-XSL-Pattern-Language, you will have to
tell MSXML(3) to do that:
xml.setProperty ("SelectionLanguage", "XPath");
I think this is it -- we need to bind variables and possibly extension
functions (MSXML already allows to pass objects to XSLT, and then to access
these objects using xsl:value-of and a user name space)..
