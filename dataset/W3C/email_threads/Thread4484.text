I dove into learning about XQuery this weekend. While I like what I see, I
think some questionable syntax choices have been made. Here are three of
them.
1) Why is a semi-colon required at the end of a user-defined function
defintion? It's clear that the end has been reached when '}' is
encountered. I don't see how requiring a terminationg ';' makes parsing any
easier. This is a known gotcha in C++. I hate to see XQuery borrow a
syntax feature that is already a known issue.
2) Smilies are an odd choice for comment delimiters. Why choose something
that isn't used by any other common programming languages?
3) Why use ':=' in let clauses instead of simply '='? You know an
assignment is coming because of the presence of the keyword 'let'. I don't
see how '=' could be confused for meaning something other than assignment.
A.G. Edwards &amp; Sons' outgoing and incoming e-mails are electronically
archived and subject to review and/or disclosure to someone other
than the recipient.
Thanks. While I somewhat agree with your points 1 and 2 (I would have
preferred {-- --}), I don't think one person's like or dislike of the
semantics is reason enough to change it given the potential disruption
to the general grammar.
Also, many modern languages use := for assignment since it is not the
same as the comparison =. And being able to express this semantics in a
non-context sensitive way seems better than the opposite.
Just speaking for myself....
Michael
From: public-qt-comments-request@w3.org
[mailto:public-qt-comments-request@w3.org] On Behalf Of Volkmann, Mark
Subject: questionable syntax choices
I dove into learning about XQuery this weekend. While I like what I
see, I think some questionable syntax choices have been made. Here are
three of them.
1) Why is a semi-colon required at the end of a user-defined function
defintion? It's clear that the end has been reached when '}' is
encountered. I don't see how requiring a terminationg ';' makes parsing
any easier. This is a known gotcha in C++. I hate to see XQuery borrow
a syntax feature that is already a known issue.
2) Smilies are an odd choice for comment delimiters. Why choose
something that isn't used by any other common programming languages?
3) Why use ':=' in let clauses instead of simply '='? You know an
assignment is coming because of the presence of the keyword 'let'. I
don't see how '=' could be confused for meaning something other than
assignment.
A.G. Edwards &amp; Sons' outgoing and incoming e-mails are electronically
archived and subject to review and/or disclosure to someone other
than the recipient.
I can concede that points 2 and 3 are merely personal preference. However, I
think point 1 is more serious. I anticipate that a lot of time will be spent
by developers trying to determine why their XQuery didn't work, only to find
that they omitted a semi-colon. That's always been the case with C++.
Would it help if I beg? ;-)
Please get rid of semi-colons that aren't really needed by the parser!
Thanks. While I somewhat agree with your points 1 and 2 (I would have
preferred {-- --}), I don't think one person's like or dislike of the
semantics is reason enough to change it given the potential disruption to
the general grammar.
Also, many modern languages use := for assignment since it is not the same
as the comparison =. And being able to express this semantics in a
non-context sensitive way seems better than the opposite.
Just speaking for myself....
Michael
[mailto:public-qt-comments-request@w3.org] On Behalf Of Volkmann, Mark
I dove into learning about XQuery this weekend. While I like what I see, I
think some questionable syntax choices have been made. Here are three of
them.
1) Why is a semi-colon required at the end of a user-defined function
defintion? It's clear that the end has been reached when '}' is
encountered. I don't see how requiring a terminationg ';' makes parsing any
easier. This is a known gotcha in C++. I hate to see XQuery borrow a
syntax feature that is already a known issue.
2) Smilies are an odd choice for comment delimiters. Why choose something
that isn't used by any other common programming languages?
3) Why use ':=' in let clauses instead of simply '='? You know an
assignment is coming because of the presence of the keyword 'let'. I don't
see how '=' could be confused for meaning something other than assignment.
A.G. Edwards &amp; Sons' outgoing and incoming e-mails are electronically
archived and subject to review and/or disclosure to someone other
than the recipient.
These matters are all rather subjective. We could all dream up symbols we
personally prefer, but experience shows that it's very hard to come up with
alternatives that everyone agrees are an improvement.
I think it's much more logical to have a semicolon after everything in the
prolog, rather than having it after some entries and not others.
There's no comment delimiter in common use in other popular programming
languages that works for XPath and XQuery. Anthing involving "/" or "*" or
end-of-line or "--" is ruled out for fairly obvious reasons. ("--" is
allowed in XML names, for example).
":=" is well-established since the days of Algol 60. It might be ugly, but
it's not new.
Michael Kay
From: public-qt-comments-request@w3.org
[mailto:public-qt-comments-request@w3.org] On Behalf Of Volkmann, Mark
Subject: questionable syntax choices
I dove into learning about XQuery this weekend. While I like what I see, I
think some questionable syntax choices have been made. Here are three of
them.
1) Why is a semi-colon required at the end of a user-defined function
defintion? It's clear that the end has been reached when '}' is
encountered. I don't see how requiring a terminationg ';' makes parsing any
easier. This is a known gotcha in C++. I hate to see XQuery borrow a
syntax feature that is already a known issue.
2) Smilies are an odd choice for comment delimiters. Why choose something
that isn't used by any other common programming languages?
3) Why use ':=' in let clauses instead of simply '='? You know an
assignment is coming because of the presence of the keyword 'let'. I don't
see how '=' could be confused for meaning something other than assignment.
A.G. Edwards &amp; Sons' outgoing and incoming e-mails are electronically
archived and subject to review and/or disclosure to someone other
than the recipient.
Hi Mark. Do you have a concrete suggestion for an alternative? As I think
Mike Kay pointed out, we have considered quite a few other delimiters, and
have indeed taken into consideration a survey of existing languages. But
if you have an alternative that you feel is clearly better, I would be
interested (I have my own gripes with Smilies). But nothing with slashes
or stars please.
-scott
(: We want XQuery programmers to be happier than other programmers :)
Jonathan
From: scott_boag@us.ibm.com [mailto:scott_boag@us.ibm.com]
Sent: Monday, April 26, 2004 1:09 PM
Subject: Re: questionable syntax choices
My suggestion is to not worry about multi-line comment delimiters and just
ignore everything starting with # to the end of the line. I think several
scripting languages use this convention.
A.G. Edwards &amp; Sons' outgoing and incoming e-mails are electronically
archived and subject to review and/or disclosure to someone other
than the recipient.
My suggestion is to not worry about multi-line comment delimiters and just
ignore everything starting with # to the end of the line. I think several
scripting languages use this convention.
XPath expressions are often written as the values of XML attributes, where
end-of-line is a pretty meaningless concept because XML parsers are required
to normalize a newline to a space.
Michael Kay
Hi Scott,
Personally, I will be encouraging the Working Group not to spend a lot
of time on the concrete syntax of comments. We have to stop spending so
much time on minor issues.
Jonathan
I enthusiastically endorse Jonathan's statement below.
We have a significant amount of work to do that deals with getting the
language semantics "right" (and in merely figuring out what "right" means
in some cases). I think the time for beauty contests such as what
punctuation to use here and there has passed and I encourage us to thank
the authors of comments for taking an interest, but declining to repeatedly
revisit decisions already taken on such minor matters.
Mark, this is not a tirade directed at you; it's really to me and the rest
of the WG, encouraging (as Jonathan said) us to focus on really important
things. That probably means that well-intentioned comments such as yours
will not result in language changes, but that's sometimes the price we pay
for progress. I do thank you for your interest and hope that you will
continue to help us find and correct serious errors in our specs.
Hope this helps,
Jim
= Facts are facts. However, any opinions expressed are the opinions =
= only of myself and may or may not reflect the opinions of anybody =
= else with whom I may or may not have discussed the issues at hand. =
Of the three items I originally commented on in this thread, I think the
semicolon issue is the most important. I don't think a semicolon should
ever be required after a block that is already delimited by curly braces.
I'd guess it will be hard to make the case that including the semicolon
makes writing XQuery parsers significantly easier.
A.G. Edwards &amp; Sons' outgoing and incoming e-mails are electronically
archived and subject to review and/or disclosure to someone other
than the recipient.
I'd guess it will be hard to make the case that including the semicolon
makes writing XQuery parsers significantly easier.
As I think we've explained several times, the semicolons are not there to
make writing parsers easier. They are there to give you better error
diagnostics when you get the syntax wrong.
Michael Kay
A.G. Edwards &amp; Sons' outgoing and incoming e-mails are electronically
archived and subject to review and/or disclosure to someone other
than the recipient.
Okay, I remember that being said before, but it's not obvious to me why
that's the case.
Why is it difficult to provide good error diagnostics if function defintions
only have to be terminated by "}" instead of "};"?
I'd guess it will be hard to make the case that including the semicolon
makes writing XQuery parsers significantly easier.
As I think we've explained several times, the semicolons are not there to
make writing parsers easier. They are there to give you better error
diagnostics when you get the syntax wrong.
Michael Kay
A.G. Edwards &amp; Sons' outgoing and incoming e-mails are electronically
archived and subject to review and/or disclosure to someone other
than the recipient.
Okay, I remember that being said before, but it's not obvious to me why
that's the case.
Why is it difficult to provide good error diagnostics if function defintions
only have to be terminated by "}" instead of "};"?
A high-level abstract answer is that error detection and recovery, for any
input data, improves with the amount of redundancy in the data.
More concretely, XQuery is a language with no reserved words, and without
the semicolons, it was impossible to tell whether some invalid construct was
trying to be a declaration in the prolog or was trying to be the main body
of the query, or was just the result of the parser getting confused. People
really want to get multiple syntax errors out in a single run, and for that
you need some anchor points that the parser can use for recovery.
For function definitions in particular it would be possible to get by
without the ";" because the braces are present. But it's much cleaner in my
view to have a consistent policy on delimiters: if you have them anywhere,
you should have them everywhere.
But as Jonathan Robie has said, we have to stop debating trivia and agree to
differ. There are lots of people impatient for us to get this language
finished, and they don't care a damn whether they have to write semicolons
or not, so long as they can have it by Tuesday.
Michael Kay
Not to beat a dead horse, but don?t all the arguments in favor of semicolon
imply that the query body itself should end with one?
Otherwise, future versions of XQuery will be forever unable to add anything
after the query body and in this version it?s often impossible to determine
whether the body is prematurely terminated.
I could imagine this becomes especially relevant if XQuery ever wants to add
DML syntax, which might contain multiple statements in the query body and
need to separate these by semi-colons. E.g.,
//foo (: select all foo :)
delete //foo[1] (: delete the ones that come first among their siblings :)
//foo (: select all remaining foo :)
vs.
//foo;
delete //foo[1];
//foo;
Cheers,
Michael Brundage
xquery@comcast.net
Writing as
Author, XQuery: The XML Query Language (Addison-Wesley, 2004)
Co-author, Professional XML Databases (Wrox Press, 2000)
not as
Technical Lead
Common Query Runtime/XML Query Processing
WebData XML Team
Microsoft
Michael,
whenever XQuery or his descendants will become closer to a
programming language then it is now (thing that will not wait for
very long) and will have statements, then YES at that point we should
definitively add ";" or some other form of statement combinator.
In the meantime, a single side-effect free expression doesn't seem to
need one. Such an expression doesn't make a statement to me. The
updates definitively are, but not the read-only queries.
For example:
//foo;
delete //foo[1];
//foo;
should end up at least with a warning (if not an error) because
the //foo; is meaningless code (doesn't impact the semantics of the
program).
But we are going to fast I think.
Best regards,
Dana
mime-attachment
From a former voice in the wilderness: Thank you, Michael!
Jim
= Facts are facts. However, any opinions expressed are the opinions =
= only of myself and may or may not reflect the opinions of anybody =
= else with whom I may or may not have discussed the issues at hand. =
