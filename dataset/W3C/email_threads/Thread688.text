Hi All,
I took the plunge and requested a new Source Forge project. It is named
"tidy" and the project page can be found at
I especially appreciate feedback from folks working on JTidy. You are the
inspiration for this, I reckon. From an HTML handling point of view, I see
it as a basic requirement to keep these projects in sync. My modest
proposal is that this list continue as the coordination point for these
efforts.
This is all fairly informal, and I don't want change that. But, at the end
of the day, we'll need to update this list often enough so that there are no
surprises. To that end, let's keep the discussion here until we get a
quorum of developers on SF. Which brings us to...
We need to get SF users added to the project. To do that you need to have a
SF account. If you already have one, please send it along and I'll add you
to the list. To get an account, go to http://sourceforge.net/ and click on
"New User via SSL". It just takes a couple minutes. Please let me know if
you can help out w/ project admin duties. We'll need another two people, at
least.
Are there any autoconf experts out there? Is this the best tool for
managing cross-platform builds?
Also, just to get some discussion started, here is a tidy.h. Comments,
alternatives, corrections, suggestions, questions, flames all appreciated.
take it easy,
Charles Reitzel
Your project registration for SourceForge has been approved.
Project Full Name: HTML Tidy
Project Unix Name: tidy
CVS Server: cvs.tidy.sourceforge.net
Shell/Web Server: tidy.sourceforge.net
Your DNS will take up to a day to become active on our site.
While waiting for your DNS to resolve, you may try shelling into
shell.sourceforge.net and pointing CVS to cvs.sourceforge.net.
If after 6 hours your shell/CVS accounts still do not work, please
open a support ticket so that we may take a look at the problem.
Please note that all shell/CVS accounts are closed to telnet and only
work with SSH1.
Your web site is accessible through your shell account. Please read
site documentation (see link below) about intended usage, available
services, and directory layout of the account.
Please take some time to read the site documentation about project
administration (http://sourceforge.net/docs/site/). If you visit your
own project page in SourceForge while logged in, you will find
additional menu functions to your left labeled 'Project Admin'.
We highly suggest that you now visit SourceForge and create a public
description for your project. This can be done by visiting your project
page while logged in, and selecting 'Project Admin' from the menus
on the left (or by visiting
https://sourceforge.net/project/admin/?group_id=27659
after login).
Your project will also not appear in the Trove Software Map (primary
list of projects hosted on SourceForge which offers great flexibility in
browsing and search) until you categorize it in the project administration
screens. So that people can find your project, you should do this now.
Visit your project while logged in, and select 'Project Admin' from the
menus on the left.
Enjoy the system, and please tell others about SourceForge. Let us know
if there is anything we can do to help you.
-- the SourceForge crew
What does everyone think about making an initial Tidy release that just
incorporates the outstanding bug fixes? That would provide a chance to
iron out kinks in the new procedures and provide a more stable base from
which to launch the API changes.
Randy
[recommending the idea of releasing an entire memory zone on
an exception].
I replied to the effect that this is no new idea, I've been doing it for
years and it's in Knuth's Stanford GraphBase.
Valeri.Atamaniouk@nokia.com wrote next:
But that means that you deprecate functions like
CheckNodeIntegrity - because if you detected problems with tree
you can not release memory.
That is a very strange view, and not in accord with the facts.
If you have an arena/zone/storage pool mechanism of your own, so that
you call the host operating system to grab large chunks (GETMAIN, malloc(),
whatever) and then run your own suballocator within it, nothing whatsoever
prevents your suballocator having its own myfree().
Actually you don't have to preallocate a big blocks. You may
just maintain the list of allocated blocks to release it on demand.
Nobody said anything about *pre*allocating before. Big blocks, however,
are important. By asking the system allocator for big blocks (much much
bigger than "typical" objects) and then running your own special purpose
allocator within those blocks, you can obtain substantial time and space
savings. You also have the benefit that if you leave a little "shim" at
each end, off-by-one errors are less likely to trample on system allocator
data.
Mind you, techniques that were developed for 1 "MIP" machines may no longer
be necessary on 1.4GHz machines. On the other hand, the Tidy library should
be usable in phones, so maybe they are.
