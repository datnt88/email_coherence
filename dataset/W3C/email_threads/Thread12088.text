So long as "skill level" is not confused with "ability level" I have no
problem with what I've been seeing. It is vital to use our
recommendations in an attempt to make *any* software that is used as a
tool to publish materials on the Web, _including such things as word
processors with a "save to Web" feature_, be made to: produce output
that conforms to WCAG; be tools that are accessible to (usable by) PWDs.
The latter point is of *MAJOR* importance inasmuch as the WWW is the
vehicle for attaining inclusion.
"Grandfathering" inaccessible software must be discouraged as
emphatically as possible. The very words "World Wide Web" should connote
universality and any claims of simplicity of publication to the Web
should be rigorously vetted for conformance to the Web's guidelines.
This is basically why we are here.
Love.
ACCESSIBILITY IS RIGHT - NOT PRIVILEGE
Dumb question, if I'm someone who works extensively in the field of
software for users who are visually impaired, and I make a special
purpose authoring tool for someone who can't see -- which relies
on extensive aural cues (and doesn't work that well with a braille
terminal) -- have I met your goal or not met your goal? It can be
used by (some) PWDs, but not all PWDs; is it therefore an invalid
tool according to our ATAG?
I forget, did we answer this? If so, feel free to refer me back to
the archives or summarize an answer, we have enough stuff to worry
about at present if this has been covered.
Kynn Bartlett mailto:kynn@hwg.org
President, HTML Writers Guild http://www.hwg.org/
AWARE Center Director http://aware.hwg.org/
No, you haven't met the goal. You fail 7.1 by failing to make your tool
generaly accessible (probably by a failure to use standard components and
APIs, which would be a way of stopping the braille from working).
CHarles McCN
Dumb question, if I'm someone who works extensively in the field of
software for users who are visually impaired, and I make a special
purpose authoring tool for someone who can't see -- which relies
on extensive aural cues (and doesn't work that well with a braille
terminal) -- have I met your goal or not met your goal? It can be
used by (some) PWDs, but not all PWDs; is it therefore an invalid
tool according to our ATAG?
I forget, did we answer this? If so, feel free to refer me back to
the archives or summarize an answer, we have enough stuff to worry
about at present if this has been covered.
Kynn Bartlett mailto:kynn@hwg.org
President, HTML Writers Guild http://www.hwg.org/
AWARE Center Director http://aware.hwg.org/
W3C Web Accessibility Initiative http://www.w3.org/WAI
21 Mitchell Street, Footscray, VIC 3011, Australia (I've moved!)
So then we're not really saying "can be used by PWD", we're saying
"can be used by *all* PWD", right? Or are we not saying that at all
and are instead saying something different?
(Just confirming.)
Kynn Bartlett mailto:kynn@hwg.org
President, HTML Writers Guild http://www.hwg.org/
AWARE Center Director http://aware.hwg.org/
In fact we are saying "can be used by people regardless of disability". This
has important bearing on the skill level discussion, since we do not require
that a tool be obviously useful to anyone who picks it up.
As an example, consider an image editor. It needs to be accesible to a blind
user, by allowing them to edit properties of the image. But if it provides
several different methods of colour selection (eg Pantone, RGB, CYKM) like
some advanced (and even some not so advanced) tools, then it needs to explain
how to use the methods, but doesn't need to explain what the difference
between RGB and Pantone slection is - that is assumed in the skill levfel of
the user. (Of course if they do explain it anyway it is helpful, and the
explanation would need to be accessible...)
I'm not sure if that is a good example (or even if CYKM is the right
collection of letters). Anyone got a better one? I think it would make an
intersting expansion of the wording in the priorities section of the
techniques document.
Cheers
Charles McCN
So then we're not really saying "can be used by PWD", we're saying
"can be used by *all* PWD", right? Or are we not saying that at all
and are instead saying something different?
(Just confirming.)
Kynn Bartlett mailto:kynn@hwg.org
President, HTML Writers Guild http://www.hwg.org/
AWARE Center Director http://aware.hwg.org/
W3C Web Accessibility Initiative http://www.w3.org/WAI
21 Mitchell Street, Footscray, VIC 3011, Australia (I've moved!)
So is it okay for it to be considerably much harder to use if you're
a PWD, as long as you can use it? (Confirming, not challenging.)
If my mom wants to make a web page have a particular shade of blue
background, she just points at that color on a color wheel and clicks --
if she were blind, she'd have to learn RGB codes most likely. This is
the distinction you're making, correct?
Kynn Bartlett mailto:kynn@hwg.org
President, HTML Writers Guild http://www.hwg.org/
AWARE Center Director http://aware.hwg.org/
No, this isn't the distinction I am making, but it makes me think that maybe
there are some intersting points in here and this example might be a good
one after all.
I can point to a colour wheel and click the colour I see. To make this
accessible, there should be a way of finding out what the colour is evenif
you can't see it (are colourblind, blind, have a monochrome monitor today,
etc). One common way of doing this is to provide a set of colour
codes. Another way is to name a series of colours. If it were possible to
name the millions of colours available in theory with 24-bit colour, then
that would be alright. In practice it makes more sense to group them into
named blocks, (like areas on an image map) as well as providing the technical
details. In principle it should be the same amount of difficulty for all
people to use the tool. In prctice there are disabilities which mean that
this cannot always be done, and it is harder for some people than for
others. We aim to remove this distinction as much as possible. We may never
remove it completely, but we can in a lot of contexts, and make it less of a
problem in a lot of others.
But what I was actually saying intially is something different. In the image
editor I use a lot there are several different ways of encoding colour. RGB I
sort of understand, and theer are a couple of others with different names
that I don't really undserstand. I think one of them is based on the
four-colour printing process that used different levels of Magenta, Cyan,
Yellow and Black to produce colours. There are others again. (I once went to
a lecture on this. it was fascinating but I didn't learn everything
presented.) What I was saying is that for a tool which provides this choice
(photoshop, paintshop pro, xv, all do I think, and I imagine lots of others
do as well) the functionality of using the different encodings needs to be
there, and how to do it accesibly needs to be explained (by 7.1). But
explaining the difference between the different encodings is a question of
intended skill level of the user - it's not really an accessibility issue.
cheers
Charles McCN
So is it okay for it to be considerably much harder to use if you're
a PWD, as long as you can use it? (Confirming, not challenging.)
If my mom wants to make a web page have a particular shade of blue
background, she just points at that color on a color wheel and clicks --
if she were blind, she'd have to learn RGB codes most likely. This is
the distinction you're making, correct?
Kynn Bartlett mailto:kynn@hwg.org
President, HTML Writers Guild http://www.hwg.org/
AWARE Center Director http://aware.hwg.org/
W3C Web Accessibility Initiative http://www.w3.org/WAI
21 Mitchell Street, Footscray, VIC 3011, Australia (I've moved!)
mistakenly sent this only to kynn and not to the list earlier today...
aloha, kynn!
your hypothetical tool, which was created for a niche market (in this case,
users with no usable vision), would fail to comply to ATAG...
this is the same debate that recently raged in the User Agent Working Group --
if a browser is targeted towards a certain niche market, should it be exempt
from the checkpoints that cover interoperability and anything else that the
developers believe do not pertain to their products...
the answer is clearly and definitively, NO!!!
ATAG, like UAGL, address the base functionality for a certain classes of tools,
and if a developer wants to selectively pick and choose from the ATAG or UAGL
checkpoints, then he or she is free to do so -- they just can't claim
compliance at any level...
in that respect, the issue you raised is similar to that raised by bruce -- we
can't control what use people make of ATAG, but we can clearly articulate what
constitutes quote proper unquote use of the document and make the intent and
import of the checkpoints as clear as possible...
gregory
Kynn asked:
He that lives on Hope, dies farting
-- Benjamin Franklin, Poor Richard's Almanack, 1763
Gregory J. Rosmaita unagi69@concentric.net
WebMaster and Minister of Propaganda, VICUG NYC
To get to a concrete proposal on this:
I suggest that we add to the document, in the section on prioriteis and how
they are defined, the following note:
In formulating these priorities and applying them to checkpoints "the
author" is assumed to be someone who is a competent but not necessarily
expert user of the tool, who may have no prior knowledge of
accessibility. For example we do not expect tham to have read all the help
documentation, but we expect them to know how to use it to find something
they are looking for.
Charles McCN
aloha, kynn!
you observed:
quote
If my mom wants to make a web page have a particular shade of blue
background, she just points at that color on a color wheel and clicks --
if she were blind, she'd have to learn RGB codes most likely. This is
the distinction you're making, correct?
unquote
i can't speak for charles (and, since i began composition on this, he's spoken
for himself), but my answer to your question is, yes, she would most likely
need a crib sheet that contained the RGB codes and their named equivalents --
and it would be helpful (er, beneficial) if the tool either provided one, or
pointed her to one (through a references section of the Help or Documentation)
this is a topic -- the color palette problem -- that i've addressed in
conformance evals for both AU and UA... in my conformance evaluation of MSIE5,
NN 4.8,and Opera 3.60, performed with HAL95 back in september for the User
Agent working group, i made the following comments:
quote
Checkpoint 1.4: Ensure that the user can configure the user agent in a device
independent manner. [Priority 1]
One of the strategies used by blind and low vision cybernauts operating in the
GUI environment is to force the user agent to ignore author-defined colors for
hyperlink text, so that it is always displayed in a consistent, uniform manner.
This includes the use of user-defined colors for visited and unvisited links,
which is not only useful for the low vision user, but also for the blind user.
Under adverse circumstances (which, for the purposes of this review includes
using HAL with Netscape), a blind user will be forced to use screen review
commands to have the font attributes for a character (or a selected/highlit
string of text) spoken, so as to ascertain whether or not the mouse-emulation
cursor is positioned on a hyperlink, and whether or not that hyperlink has been
previously selected. All three of the user agents examined in this evaluation
offer the user some level of control over the visual presentation of hyperlink
text. [NOTE: Please refer to the comments on Checkpoint 9.6 for further
discussion of this issue.] Of the three, Opera offers the greatest amount of
user configurability for hyperlink presentation -- enabling the user to
configure the browser so that, for example, unvisited links are underlined and
visited hyperlink text appears struck-through, thereby allowing the user a
supplemental means of distinguishing between visited and unvisited links. All
three user agents provide the user with the ability to define his or her own
color scheme for visited and unvisited links, along with the option to override
colors defined for a document by the document's author. All three, however,
also fail to provide alternative textual equivalents for the colors available
to the user, instead presenting the choice of colors as a palette comprised of
"swatches-in-a-box", which are completely inaccessible to the blind user
without sighted assistance.
unquote
the reference to Checkpoint 9.6 points to the following comments:
quote
Checkpoint 9.6 For a selected link, provide information to help the user decide
whether to follow the link. [Priority 3]
Note. Useful information includes: whether the link has already been visited,
whether it designates an internal anchor, the type of the target resource, the
length of an audio or video clip that will be started, and the expected natural
language of target resource.
Note. Using color as the only distinguishing factor between visited and
unvisited links does not suffice since color may not be perceivable by all
users or rendered by all devices.
REVIEWER'S GENERAL NOTE: Using HAL's "Speak background and foreground color"
and/or "Speak font attributes" key command, when the point of regard is a
hyperlink allows the user to ascertain a limited amount of information about
the currently selected link. The information that is available is as follows
(NOTE: the terminology used to enumerate information about font attributes
available to the user on demand, does not correspond to the syntax used in
CSS):
"Say Font Attributes" (LeftControlKey+F)
1. font family (e.g. Times New Roman)
2. font weight (bold or normal)
3. font style (italic, underline, strikethrough, etc)
4. font size (in points)
"Say foreground and background color" (LeftControlKey+5)
1. foreground color
2. background color
When querying HAL as to the fore- and background colors for hyperlink text,
however, HAL was only able to report those colors defined using the hexadecimal
notation (i.e. "#RRGGBB") and not those defined using the semantic equivalents
defined for HTML4 (i.e. white, blue, red, etc.) which can be used to define
colors in CSS. Despite this, hexadecimal color values are reported by HAL in
plain English (e.g. the hexadecimal value "#00009C" is reported as "very dark
blue", while the style defined as "background-color : white;" is reported as
"background color unknown".
unquote
and, in my badly-in-need-of-an-update conformance eval of HomeSite 4.01,
located at
i made the following observations on color palettes and their usefulness:
quote
7.2 Allow the author to change the editing view without affecting the document
markup [Priority 1]
The editing view can be changed without affecting the document's markup. A very
nice feature of HomeSite in this regard is that, unlike most GUI applications,
the color palette is not only iconically/graphically demarcated, but is also
textually demarcated. The author can change the following screen attributes for
the editing view:
Font family
font size
Tab width
charset
foreground color
background color
In addition, the author can edit HomeSite's color coding scheme--a mechanism
which controls the display of the various components of a document as a means
of providing visual cues. The components which can be color coded include:
Allaire Cold Fusion Tags
Comments
Default Text
HTML Anchor Tags
HTML Attributes
HTML Image Tags
HTML Special Characters (character entity sets)
HTML Style Tags
HTML Table Tags
HTML Tags
JavaScript Identifiers
JavaScript Keywords
JavaScript Methods
JavaScript Numbers
JavaScript Strings
JavaScript Symbols
Microsoft ASP Tags
Numbers
Punctuation (such as braces)
Script Tags
Strings
StyleSheet Properties
StyleSheet Selectors
StyleSheet Values
According to the reports of sighted colleagues, when using the "Edit"
workspace, HomeSite recognizes page components and changes the color scheme
accordingly, providing a visual means of cueing the author not only to the
page's components, but quickly alerting the sighted author when he or she has
failed to correctly close containing tags, forgotten punctuation, etc. The main
failing of the color scheme feature is that the color palettes offered for
foreground and background colors do not contain textual equivalents of the
colors displayed.
unquote
why would knowing the color values assigned to different snippets of code be of
use to a totally blind user?
if the blind user knows what background and foreground colors have been defined
to visually symbolize different components, he or she could then set his or her
screen reader to change pitch, speed, or voice in response to color changes --
a kludge that allows for the user to obtain an aural equivalent of the color
changes, thus giving the blind user a clearer conception of the page
components, without forcing the user to review the source
character-by-character (which is what i tend to do, and which may explain my
stunted personality and complete and utter lack-of-a-real-life)
of course, the color swatches would need to be properly labeled with some sort
of understandable text -- at least the hexadecimal or RGB value, at best a
named color (when available) -- so that the label can be read or felt when the
swatch is tabbed-to, rather than merely exposed when pointed-to via a
ToolTip...
gregory.
He that lives on Hope, dies farting
-- Benjamin Franklin, Poor Richard's Almanack, 1763
Gregory J. Rosmaita unagi69@concentric.net
WebMaster and Minister of Propaganda, VICUG NYC
I like the ideas. Minor editing:
In choosing priority levels for checkpoints, the Working Group has
assumed that "the author" is a competent, but not necessarily expert,
user of the authoring tool, and that the author has no prior knowledge
of accessibility. For example, the author is not expected to have
read all of the documentation but is expected to know how to turn
to the documentation for assistance.
- Ian
Ian Jacobs (jacobs@w3.org) http://www.w3.org/People/Jacobs
Cell: +1 917 450-8783
I think the skill level stuff is easier to think about in two parts:
In section 1-6, the "author" is assumed to be a person who possesses the
minimum level of markup and application knowledge required to create
markup in the tool BUT not necessarily any knowledge or motivation
regarding the existence or details of accessible document design.
As such, the tool should initially inform the user of accessibility
issues with an option to suppress most of the help and justification
details later on. However, the tool should never assume that the author
will possess a strong enough motivation to produce accessible content
that they will tolerate lengthy or complex authoring procedures in the
name of accessibility.
In section 7, the "author" is assumed to be a person who possesses the
ability (with appropriate technological assistance) to utilize the OS
interface environment (including applications that follow the
accessibility requirements for that OS environment) AND possesses the
minimum level of markup knowledge required to create markup in the tool.
[ed. note: you can't require application knowledge because they haven't
used the tool yet]
For example, for a text based HTML editor in Windows95, the "author" is
assumed to be capable of operating Windows95 interface objects AND has a
working knowledge of HTML. For a WYSIWYG HTML editor in a X-windows
environment, the "author" is assumed to be capable of operating
X-windows interface objects BUT not necessarily any knowledge of HTML
Jan Richards
ATRC
In general I think this is a pretty good summary. I would challenge the idea
that a text-based HTML editor is always aimed at someone who knows something
about HTML, and I have stated before that I don't think we should rule out
the ossiblity of an author or a purchaser wanting a tool that we would find
annoying to use because it is so strict (such tools are actually sold for
money, so people must want them) but those are minor quibbles.
Charles McCN
I think the skill level stuff is easier to think about in two parts:
In section 1-6, the "author" is assumed to be a person who possesses the
minimum level of markup and application knowledge required to create
markup in the tool BUT not necessarily any knowledge or motivation
regarding the existence or details of accessible document design.
As such, the tool should initially inform the user of accessibility
issues with an option to suppress most of the help and justification
details later on. However, the tool should never assume that the author
will possess a strong enough motivation to produce accessible content
that they will tolerate lengthy or complex authoring procedures in the
name of accessibility.
In section 7, the "author" is assumed to be a person who possesses the
ability (with appropriate technological assistance) to utilize the OS
interface environment (including applications that follow the
accessibility requirements for that OS environment) AND possesses the
minimum level of markup knowledge required to create markup in the tool.
[ed. note: you can't require application knowledge because they haven't
used the tool yet]
For example, for a text based HTML editor in Windows95, the "author" is
assumed to be capable of operating Windows95 interface objects AND has a
working knowledge of HTML. For a WYSIWYG HTML editor in a X-windows
environment, the "author" is assumed to be capable of operating
X-windows interface objects BUT not necessarily any knowledge of HTML
Jan Richards
ATRC
W3C Web Accessibility Initiative http://www.w3.org/WAI
21 Mitchell Street, Footscray, VIC 3011, Australia (I've moved!)
Jan,
I hope (and suspect) that your thesis defense went well.
Charles
W3C Web Accessibility Initiative http://www.w3.org/WAI
21 Mitchell Street, Footscray, VIC 3011, Australia (I've moved!)
