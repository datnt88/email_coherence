ambiguity on application of request header semantics.
Suppose a request contains an error. Should all semantics
of all correct headers in the request be applied? For
example, consider
HEAD /index.html HTTP/1.1
Host: 128.122.238.94:9999
Connection: close
TE: chunked
If-Modified_since: foo
"foo" is an invalid value for If-Modified, and therefore the
one and only correct response to this message will be 400.
Actually, no. The most recent draft,
draft-ietf-http-v11-spec-rev-03.txt (and earlier ones, too), is quite
clear on this. In 14.25 If-Modified-Since the spec. says, "If the
request would normally result in anything other than a 200 (OK) status,
or if the passed If-Modified-Since date is invalid, the response is
exactly the same as for a normal GET." Your example is the "invalid
date" case.
The use of If-Modified-Since is an unfortunate example since its handling in the
case of an error is explicitly stated in the draft. The question is more general:
if a request is sent and one of its headers contains an error resulting in a 400
Bad Request status code, should the remaining, valid headers be parsed and
treated as usual? That is, to consider an example similar to that above,
consider a request:
GET /index.html HTTP/1.1
TE: chunked
Connection: close
This is a bad request due to the lack of the Host header field. Should the
server respond with chunked data and then close the connection? That is,
should the semantics of the valid headers apply?
Should the response, containing a 400 bad request error,
return the error chunked and then close the connection? In
TE is a request header that provides advice from the client to the
server. I think you meant Transfer-Encoding: chunked.
No, he meant TE. The client sent TE to request chunked transfer encoding,
but the request itself was bad. Should the server nonetheless send the error
body in a chunked format (and then close the connection, as per the
Connection: close header)? You say yes, but we had trouble determining this
from the current draft standard.
Adam Donahue
TE is a bad example, too, for two reasons. First, in your example,
"identity" would still be allowed, and "chunked" is always allowed. To
suppress "identity", if that's what you meant to convey, you would say
"TE: identity;q=0". Second, it's my opinion that "identity" should
always be allowed. But that's another discussion.
Should the response, containing a 400 bad request error,
return the error chunked and then close the connection? In
TE is a request header that provides advice from the client to the
server. I think you meant Transfer-Encoding: chunked.
Well, TE doesn't work that way, exactly. But let's focus on...
Yes, I overlooked what is a reasonable question, namely, must the
server, in returning the error, honor "Connection: close"? And, in
general, must the server's error responses be consistent with all the
headers (and, for that matter, the method)?
Mumble. I think the answer is yes. Or at least the server should do
its best. Sometimes the headers could be contradictory, in which case
the server has to do its best to honor them.
That leads me to my own question: If there's an error on a HEAD
request, should the server return an entity, or just the headers.
(Apparently the latter.) Example:
HEAD / HTTP/1.1
There's no Host header, so the server responds "400 Bad Request". With,
or without, entity?
Dave Kristol
The only reliable answer is without. But beyond that, the spec is pretty
clear. Same as GET except for no message-body. So if the client wants
to know why
GET / HTTP/1.1
would have failed, it must try a GET.
The flaw in the HEAD request design is that it should have returned its
result as an entity rather than as a simple modified GET response. But
that change is too late.
Dave Morris
I asked essentially this question a year or so ago - the consensus
then was that a response to HEAD _never_ gets a body.
Hmm. I should have used another encoding I guess. I see what you're saying.
Yes, this is exactly what I'm asking.
We were having the same problem deciding for sure how to handle the above
cases.
I think the spec is somewhat clear about this. In section 10.4:
Except when responding to a HEAD request, the server SHOULD include an
entity containing an explanation of the error situation, and whether it is a
temporary or permanent condition.
I'd gather from the above that the HEAD example you specify would not return
an entity body.
Adam
