I am working on new text for the abstract data model, gtiven that I am not
going to get it to Graham before tomorrow, the full version of the doc will
not be ready for agenda considerations for this week.
Hence I include here my current fragement on literals; to give the chair an
opportunity to consider whether we need to discuss any of the issues raised.
I also include an alternative that represents what I think I heard as the
minority opinion at the Sept 13 telecon.
Note sections 3.2.1 3.2.2 are unchanged except for the treatment of null
language tag, that follows the new xml treatment of using "" as the null
language tag (I would particularly value DaveB's feedback on that change).
The new stuff is in 3.2.3.
The key philoshophical differences are:
+ are we doing *RDF* datatyping or *XSD* in RDF.
+ is the normal RDF environment datatype aware or not
As I see it, the WG preference is for RDF datatyping but not assuming any
awareness of any actial datatypes (hence a preference for lexical forms and
lang tags).
The minority opinion is that we are primarily doing XSD, and the target
implementation knows them all. (Hence a preference for values, or
pseudo-values).
Another argument that came up on Sept 13 was not over-zealously discarding
user input.
Concrete textual issues are:
+ lang tag - in or out
+ do we talk about the typed value here or only in the model theory
+ do we want to restrict to the canonical form
Jeremy
and
the latter is what I would think, and indeed that's incomplete
but workable (right now)
discarding
I don't see what it brings for typed literals, so I would say out
refer to MT seems fine
in case of XSD, yes
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/
In the majority version, in the comparision of typed literals, I wonder
if the test
a.. The two language identifiers compare equal (case insensitive comparison).
should be removed. I think it has been generally agreed that language
identifiers have no affect on datatyping equality and while you are
clearly avoiding addressing any datatyping semantics in the abstract
syntac doc, the simple equality test should nevertheless reflect that
language has no relevance to equality for typed literals.
Then again, if the equality test is the basis for tidyness and node
merging, then of course that test couldn't be removed. Hmmmm....
Definitely in. I'm not sure why my earlier examples have not
proven to be compelling that this is necessary. But datatyping
and language are disjunct qualifications. E.g.
xsd:Name"Finland"-en
xsd:Name"Suomi"-fi
where a presumed type of xsd:string for
"Finland"-en
"Suomi"-fi
won't meet the datatyping expectations of
foo:countryName rdfs:range xsd:Name .
as xsd:string is not (necessarily) a valid xsd:Name and clearly
the language qualification is not determined by the datatype
and just as relevant as the datatype.
The abstract syntax should indicate, as the majority version does,
that the typed literal denotes the value, but which value it is
(the mapping) is an issue to be left to the model theory, I think.
Absolutely not. RDF Datatyping has no conception of canonical
forms whatsoever and there is no requirement, even by XML Schema
that all simple datatypes have canonical lexical spaces.
Yes, I know canonical forms makes hacking inline literals
easier for the DPH, but one simply cannot presume that any
canonicalization has taken place for arbitrary RDF knowledge
(and on the SW, *most* knowledge will be arbitrary and outside
the scope of control of particular SW agents).
Patrick
Patrick:
this is not compelling because it is non-standard.
XSD says:
NOTE: Many human languages have writing systems that require child elements
for control of aspects such as bidirectional formating or ruby annotation
(see [Ruby] and Section 8.2.4 Overriding the bidirectional algorithm: the BDO
element of [HTML 4.01]). Thus, string, as a simple type that can contain only
characters but not child elements, is often not suitable for representing
text. In such situations, a complex type that allows mixed content should be
considered. For more information, see Section 5.5 Any Element, Any Attribute
of [XML Schema Language: Part 2 Primer].
If we are representing text then an XML Literal is appropriate.
Of course, in the other thread, this could be used as a further argument why
we may need non-XSD types.
Jeremy
I consider the XML Schema position to be far too extreme. Yes, some
writing systems may not be expressable as a plain Unicode string,
but many, of not most, are, and as you point out, there is no reason
why there could not exist a subtype of xsd:string which includes
a specialized lexical grammar to provide for such writing systems.
In fact, I would argue that an XML literal, in RDF at least, is
really a subtype of xsd:string, with a lexical grammer that reflects
lexical forms of XML infosets.
IMO, XML Schema got it wrong.
There's no reason why RDF should repeat that error.
And this is one good reason why RDF datatyping should be framework
neutral, so that we are free to address such requirements as language
qualification of typed literals while still supporting other standards
such as XML Schema.
Patrick
[Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, patrick.stickler@nokia.com]
W3C specs should work together.
If XSD is wrong, we should tell them, and it is their responsibility to fix
it - not ours.
If we go off and do our own thing then we condemn the semantic web to
further fragmentation and Aaron's tag line will become "RDF - ten years of
failure"
We *must* be prepared to live with other working groups decisions, even
those we don't like. (Of course, our implementations may choose to diverge,
but as a W3C standards body we should not endorse such behaviour).
Jeremy
[Patrick Stickler, Nokia/Finland, (+358 40) 801 9690, patrick.stickler@nokia.com]
Agreed, where reasonable and practical.
Agreed, but we should also be able to 'do the right thing' in our spec
while they are fixing their spec.
I see no conflict whatsoever between XML Schema and RDF if RDF allows
additional language qualification of literals.
Exactly what kinds of problems do you see as potentially causing
fragmentation?
We are not saying that XML elements defined to have data content
conforming to anySimpleType must have language qualification. We
are saying that RDF literals may have language qualification,
and furthermore may be constrained by some datatype, which may
very well be a subtype of XML Schema anySimpleType.
I don't see how that is violating anything in XML Schema. RDF property
elements are not simple CDATA based elements. They have mixed content
and the interpretation of that content is defined by RDF, not any
XML Schema datatype.
Where is the problem?
RDF datatyping is not XML Schema datatyping. There is no reason why
we should enforce a restriction mandated by one particular datatyping
framework which (a) is not requuired by other datatyping schemes and
(b) is used by existing applications (mine) and (c) is simply wrong.
But rather than just the two of us debating this issue, I'd be happy
to hear what other folks think.
Patrick
From: "ext Jeremy Carroll" jjc@hpl.hp.com
Sent: 16 October, 2002 15:36
Hm... that argument suggests that integer and date
are subtypes of xsd:string too, with a lexical
grammar that reflects numerals and date-strings.
XML infosets are not strings any more than
integers are.
I disagree.
Moreover, XML Schema followed the advice[1] of the
I18N WG on this; I recommend we do likewise.
If we do otherwise, I'll be obliged to get the I18N
WG to confirm that we had a good reason for doing so.
[1] I can't seem to find records of their advice.
But I'm pretty sure it's there, and I will have
to check with the I18N WG, as well as the
XML Schema WG, if we do otherwise.
Dan Connolly, W3C http://www.w3.org/People/Connolly/
