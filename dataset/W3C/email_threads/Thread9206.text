[Admin: URI of 'raised' message in this Issue is wrong, should be:
In RDF's XML syntax, there are ways to express statements and to give
IDs to the resources modelling the statements (reified statements).
However when using the form in the first attachment to this message
[cloaked as text/html until archive bug is fixed] - a statement
generated by a property which points at an object using the
rdf:resource attribute, it generates a statement (s,p,o form)
(http://blah/, http://somewhere/bar , http://foobar)
and should identify a resource modelling the statement with ID foobar
(URI [attached example URI]foobar)
However, at present propertyElt production 6.12 forbids both ID and
rdf:resource attributes:
[6.12] propertyElt ::= ... other alternatives ...
' ' propName idRefAttr? bagIdAttr? propAttr* '/ '
idRefAttr? means: (zero or more of ((ID attribute) OR (resource attribute)))
Proposed Fix #1
Change the last production term of 6.12 being changed to:
' ' propName idAttr? resourceAttr? bagIdAttr? propAttr* '/ '
(ignoring any future changes to the way the grammar may be expressed
and changes to add rdf: prefixes)
A related change also required is the wording near the end of section
6 in item #3 of the list:
[[Specifically; each propertyElt start tag containing attribute
specifications other than ID, resource, bagID, xml:lang, or any
attribute starting with the characters xmlns results in the
creation of the triples {p,r1,r2}, {pa1,r2,va1}, ..., {pan,r2,van}
where
1. p is the expansion of the namespace-qualified tag name.
2. r1 is the resource being referred to by the element containing
this propertyElt expression.
3. r2 is the resource named by the resource attribute if present
or a new resource. If the ID attribute is given it is the
identifier of this new resource.
4. pa1 ... pan are the expansion of the namespace-qualified
attribute names.
5. va1 ... van are the corresponding attribute values.
end of section 6, http://www.w3.org/TR/REC-rdf-syntax/
The phrase [[If the ID attribute is given it is the identifier of
this new resource.]] needs to change for three reasons:
1. Earlier on in section 6, RDF M&amp;S says
[[Within propertyElt (production [6.12]), the URI used in a
resource attribute identifies (after resolution) the resource
that is the object of the statement (i.e., the value of this
property). The value of the ID attribute, if specified, is the
identifier for the resource that represents the reification of
the statement. ]]
middle of section 6, http://www.w3.org/TR/REC-rdf-syntax/
So this is inconsistent.
2. Everywhere else, the ID attribute names the reified statement -
so this is inconsistent again.
3. The rdf:resource attribute is the identifer of the new resource
(when using the form described here); otherwise it is the
enclosed resource provided by the other alternatives in the 6.12
production.
Proposed Fix #2
Change the sentence at the end of section 6 item #3 with the last
sentence quoted above from earlier on in section 6
OR removed the sentence.
Impact on Applications
Removes an ambiguity, makes the grammar more regular, probably
minimal. I suspect most parsers do
Dave, who spent far too much time reading RDF M&amp;S grammars.
Aaron Swartz said:
The confusion is the different interpretation of rdf:ID in
propertyElt when the element is empty / non-empty.
It was my understanding that the issue was the fact that statements using
resources as objects could not be reified.
No - the original issue had a specific question which I refered to, quoted,
and answered in my message:
I was not answering the different issue above.
But the grammar does not allow this because of the (somewhat unexpected and
little-known) usage of ID to name a new property.
Along with Jan Grant's proposal for removing the creation of new resources
on empty propElts, I think that the use of ID to name them should also be
removed. Thus your option 2 would always be the case.
I feel that removing this existing syntax is too much of a change,
although I did give my misgivings about its function and clarity in
my message.
In IRC later, Aaron noted there was a way to do what he wanted
which was also in the original issue description
Dave
Brian McBride said:
In case #1 (empty element) since rdf:ID points to the target
resource, adding rdf:resource as well would have two statement
objects which does not make sense.
I'm not following you here Dave.
rdf:Description
foo:bar rdf:ID="rs" foobar /foo:bar
/rdf:Desscription
is clearly legal and the rdf:ID attribute defines the URI of the refied
statement the property represents.
This is legal and I agree with this as it is a non-empty element; I
already described this.
The question that arises is whether
rdf:Description
foo:bar rdf:resource="http://foo/" rdf:ID="rs"/
/rdf:Description
is legal, with again the rdf:ID attribute defining the URI of the reifed
statement. It does seem a bit irregular to allow the use of an rdf:ID
attribute to identify the reifed statement in the case where the object
is a literal, but not in the case where it is a resource. And strictly
speaking, the grammar does not rule it out as the rdf:resource attribute
matches the idAboutAttr? in the production and the rdf:ID attribute
matches the propAttr*.
No. The propertyElt rule 6.12 does not use idAboutAttr anywhere (and
indeed that production 6.5 also does not allow rdf:resource)
[6.12] propertyElt ::= ' ' propName idAttr? ' ' value ' /' propName ' '
' ' propName idAttr? parseLiteral ' '
literal ' /' propName ' '
' ' propName idAttr? parseResource ' '
propertyElt* ' /' propName ' '
' ' propName idRefAttr? bagIdAttr? propAttr* '/ '
The above is an empty element so only matches the production 6.12
part 4 above where things allowed are:
idRefAttr? = (0 or 1 of idRefAttr) AND
bagIDAttr? = (0 or 1 of bagIDfAttr) AND
propAttr* = (0 or more of propAttr)
expanding:
idRefAttr? = (0 or 1 of (idAttr | resourceAttr)) AND
bagIDAttr? = (0 or 1 of (bagID="' IDsymbol '"')) AND
propAttr* = (0 or more of (typeAttr | propName '="' string '"'))
again:
idRefAttr? = (0 or 1 of (' ID="' IDsymbol '"' | ' resource="' URI-reference '"')) AND
bagIDAttr? = (0 or 1 of (bagID="' IDsymbol '"')) AND
propAttr* = (0 or more of ( type="' URI-reference '"' | propName '="' string '"'))
Now (IGNORE namespace prefix stuff here)
has an rdf:ID and an rdf:resource. These are not properties but
syntax devices so do not match the propAttr rule, although they do
match the syntax - maybe this is where you are diverging from me.
Aside 1: Parsers will continue having to look for
resource/rdf:resource and other things as special cases, so they will
not match general properties.
Aside 2: these don't apply to the built-in rdf properties which do
match propName. We know RDF syntax has issues. These RDF properties
that do match propName are:
rdf:type (in grammar too)
rdf:value rdf:subject rdf:predicate rdf:object
[maybe rdf:li rdf_ n but that's an issue yet to discuss]
Thus rdf:ID and rdf:resource can only match the first part idRefAttr?
where they are alternatives and hence having both is not legal.
Both the rdf:ID and rdf:resource in this case are used to point to
the object of the statement, not the reification of the statement,
and as I previously discussed although this is inconsistent with the
normal use of rdf:ID, changing it may be break too many things.
Dave
