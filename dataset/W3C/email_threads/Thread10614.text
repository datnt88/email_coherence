This is a review of
Appendix B: Entailment rules
1) completeness versus finiteness
I note that you gave up on completeness as noted in the para:
These rules will not generate all graphs which have the original graph as an
instance, which could include arbitrarily many blank-node triples all of
which instantiate back to the original triples. Modifying the rules so that
new blank nodes could be allocated to existing blank nodes would generate all
such graphs.
I think it would be better to have se1 and se2 rules that do not naturally
terminate, and leave termination as a problem for the implementor.
I would also prefer to see completeness at least conjectured if not claimed.
e.g. suggest se1 and se2 should apply to blank nodes as well as uri ref and
literal nodes, and suggest delete "if there is no such blank node then it
must be" which should permit "generating all graphs which have the original
graph as an instance" - but at the cost of not having any obvious way of
stopping.
2) RDF axiomatic triples
should be mentioned as always entailed
3) RDFS axiomatic triples
suggest replace
"Note also ..."
with a clearer statement that these are always entailed
3) concerning rdfs 2a, do we also need rdfs 2b
xxx rdfs:domain yyy .
zzz rdfs:subPropertyOf xxx .
entails
zzz rdfs:domain yyy .
similarly rdfs 3b.
4) suggest adding explicit non-completeness statement to D-entailment
example difficult case
eg:a eg:p "true"^^xsd:boolean .
eg:a eg:p "false"^^xsd:boolean .
eg:b rdf:type xsd:boolean .
{xsd:boolean}-entails
eg:a eg:p eg:b .
To do that with an entailment rule looks quite hard.
Another example
eg:a eg:p "0"^^xsd:decimal .
eg:b rdf:type xsd:nonPositiveInteger .
eg:b rdf:type xsd:unsignedLong .
XSD-entails
eg:a eg:p eg:b .
I missed some issues concerning "The stronger extnesional semantic conditions
on rdfs:domain and rdfs:range" ...
1)
suggest
rdfs4a', rdfs4b' should have premise
aaa rdf:type rdf:Property .
this is stronger (and still sound)
2)
with the extensional conditions rdfs:domain and rdfs:range figure in rdfs12a
and rdfs12b
so for 12a - every property has a domain and range.
Thus:
ppp = rdfs:domain or ppp = rdfs:range
qqq = rdf:Property
for 12b
not applicable ?
Example entailment under 12a
rdfs:domain rdfs:subPropertyOf eg:a .
eg:a rdfs:domain eg:c .
given
p rdf:type rdf:Property .
then
p rdfs:domain rdfs:Resource .
so
p eg:a rdfs:Resource .
and
p rdf:type eg:c .
thus
rdf:Propery rdfs:subClassOf eg:c .
Jeremy
I note that we don't seem to be finished discussing the closure rules.
But it is a monotonic increasing process, so termination is likely.
(Soundness of a closure rule is usually trivial)
You may notice that the cases are getting more and more obscure, these ones:
- are concerning a semantic extension to RDFS, not RDFS itself
- have never had a claim to completeness
Jeremy
I note that we don't seem to be finished discussing the closure rules.
Brian
