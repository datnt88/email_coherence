Hi,
I have a comment on the X509CRLs structure.
In verifying, do you use X509CRLs which is created before verifying?
If X509CRLs are all valid, then there is no problem.
But if there is an invalid X509CRL of an invalid certificate,
should I get the new CRL for it?
We would retrieve CRLs of invalid ceritifcates if it would be mixed
X509CRLs structure, and this would occurs invalid process. And if we would
not retrieve CRLs,
it would be uncertain to check certificate well by CRLs.
I think X509CRLs are for speed up of a right system security check.
So I propose the following structure where we can check valid certificate by
valid X509CRLs, and check it by the system instead of invalid X509CRLs.
!ELEMENT X509Data (((X509IssuerSerial | X509SKI | X509SubjectName
X509Certificate), X509CRL*)+ %X509.ANY;)
yoshiya@sysrap.cs.fujitsu.co.jp ; kibakura@sysrap.cs.fujitsu.co.jp ;
Recommendation
Joseph Reagle,
Hello!
Could you please send your comments to the dsig list
w3c-ietf-xmldsig@w3.org ? I'm one of the least knowledgable people in the
Working Group (WG) about X509 and CRLs, so the authors of this section of
the spec and the rest of the WG will need to discuss it.
But the mixed X509CRLs causes checking by all X509CRLs.
I think it would causes to regain CRLs of invalid certificates.
I think it causes speed down. But if I would only use valid X509CRLs,
this makes it uncertain to accomplish the CRLs check.
I'm not sure I understand this.
I proposed the structure for speed up. I think this enables to skip
CRL regains and checks correspond to invalid ceritifiates, and
valid CRLs of a valid certificate is speeded up.
In one proposal you eliminate it all together, but don't you want to be
able to process CRLs? In the other you chage it to ... , X509CRL*)+ but
I'm
not sure how that is different?
(I apologize for not understanding well, but again I think other people in
the WG would do a better job!)
Thank you for your comment. As you noted in your PR comment the X509 DTD
had not been changed along with the spec and schema. (The DTD update was
lost between [1] and [2], after Merlin raised the issue of the X509
structure in his May [3] email entitled "X509CRL Discord". We altered the
schema and text, but not the DTD.)
On this basis, I've changed the DTD to:
!ELEMENT X509Data ((X509IssuerSerial | X509SKI | X509SubjectName |
X509Certificate | X509CRL )+ %X509Data.ANY;)
However, to your question below, I defer to those more knowledgable about
X509 processing.
| X509Certificate), X509CRL*)+ %X509.ANY;)
[1] http://www.w3.org/TR/2001/CR-xmldsig-core-20010419/#sec-X509Data
2. Or a single certificate revocation list:
2.1 The X509CRL element, which contains a base64-encoded certificate
revocation list (CRL) [X509v3].
[2] http://www.w3.org/TR/2001/PR-xmldsig-core-20010820/#sec-X509Data
The content of X509Data is: At least one element, from the following set
of element types ... The X509CRL element, which contains a base64-encoded
certificate revocation list (CRL) [X509v3].
[3]
In message "Fw: Re:Call for Review: XML Digital Signature is a W3C Proposed Recommendation"
X.509 CRL has information about "updated date" and "next update
date". So we can assume the CRL attached to a signature is the
latest until "next update date".
In my opinion, we would use neither X509CRL elements nor
KeyValue elements with signatures in practical systems.
X509CRLs with signatures might be old, and we should not trust
key information not in X.509 certificates. A signature should
have an X.509 certificate or a key name, and verifier retrieve
CRL from a local XKMS service.
TAMURA Kent @ Tokyo Research Laboratory, IBM
Hi TAMURA,
I agree with you at the point of not using X509CRLs in verifying.
But I don't agree with you on the KeyValue element.
I think whether a KeyValue is trusted or not
is decided by a system, but not by a processor.
So our XML signature processor rises an error event like SAX,
if a SignedInfo-verifying X509Certificate is not or is not trusted.
When it's NG as Signature , we throw an fatal Exception.
Recommendation
Proposed Recommendation"
