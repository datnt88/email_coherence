Hi all,
Here are some requirements for our discussion on Monday...
User should be able to know what their permissions are on attributes before
trying
Query across attributes (in one service): what query language?
Ability to know (partial?) list of attributes at design time
Ability to know type of attributes ahead of time
Input/output messages that manipulate attributes can be validated against
WSDL
Support for static attributes
Ability to restrict access on a per attribute basis.
Ability to restrict read vs. write access
Attributes can be inherited through WSDL 1.2 inheritance
Support metadata on attributes (creation date, type, description...)
Allow bulk retrieval of several attributes in one operation
Attributes can be of any schema type (simple or complex)
Regards,
William
William Vambenepe
Web Services Management Operation
HP OpenView Division
KS
This is that specification ! If we define the serviceData
concept here and expect another specification to explain the
operations
on them, it will just add the proliferation of more WS-*
specifications.
We already have too many :o(. Our goal should *not* be to develop max
number of specifications, but a few cohesive and coherent
specifications.
As you probably know by now, I disagree with this statement :-)
Suggesting that the WSDL specification should talk about required or
optional operations is like saying that the C++ language specification
dictates the use of commit() and abort() methods because some
applications require transactional behaviour.
Point well taken on the independence from underlying
implementations - may they be languages, OS platforms and such. But,
we
still need to define the interfaces of the common operations. The
platforms and languages are free to implement them as they wish,
leveraging their own idiosyncrasies.
If a set of common interfaces/operations is required for any kind of
functionality, the W3C WSA and WS-Interoperability groups are
responsible for adopting them or not.
IMHO, as we are into the realm of stateful services (with state
visibility thru the sericeData mechanism), we should *completely*
define
what that means. In this regard we need to touch upon security as well
I am thinking of visibility and access control of the
serviceDataelements - how they can be expresses, exchanged,
queried,....
I thought that attributes were about exposing access to state and not
about stateful web services. I see a subtle difference. The web
services-oriented architecture is stateless. Attributes could provide
the syntax for exposing state but the semantics of stateful services
should not be part of a WSDL specification (that's my personal view
anyway).
IMHO, it would be better if we address the security interfaces
in this specification, leaving, of course, the implementations to
choose
whatever mechanisms. I differentiate between mechanics and mechanisms
we define the mechanics, the platforms do the mechanisms. In that
sense,
these security aspects are NOT orthogonal to the serviceData
mechanics.
I see transactions, coordination, orchestration, business processes as
very important in web services. They all require common interfaces.
Should we also include these in the specification of the language that
is used to describe those interfaces?
Best regards,
.savas.
KS
This is that specification ! If we define the serviceData
concept here and expect another specification to explain the
on them, it will just add the proliferation of more WS-*
Perhaps the analogy is not to a C++ language specification, but to a
component model. It is not the language specification that dictates the
usage of some interfaces or methods, but the definition of these models.
For example, EJB 2.0 CMP model defines both attributes that describe
state in its abstract model and also well defined syntax to access these
attributes via get/set methods. Without defining how the access should
happen in a uniform and well understood way, just defining a set of
attributes may not be that useful.
What I am not clear about is your position actually. I have been trying
to follow your postings. Are you suggesting that a set of attributes
that describe state is not a useful concept or are you suggesting that
providing an agreed convention for accessing them (perhaps via a set of
operation conventions) should not be targeted by the WSD wg?
Point well taken on the independence from underlying
implementations - may they be languages, OS platforms and such. But,
still need to define the interfaces of the common operations. The
platforms and languages are free to implement them as they wish,
leveraging their own idiosyncrasies.
I am not clear about your comment. Are you suggesting WS-I should be
responsible for defining common interfaces? Since I did not understand
the previous comment well, it may be speculation on my part.
IMHO, as we are into the realm of stateful services (with state
visibility thru the sericeData mechanism), we should *completely*
what that means. In this regard we need to touch upon security as well
I am thinking of visibility and access control of the
serviceDataelements - how they can be expresses, exchanged,
We can not say that the web services oriented architecture is stateless
or stateful. At best, the assertion we can make is that there is no well
defined mechanism for defining explicitly what external state is, or how
internal state is exposed. If I were to provide a counter method on a
service which returned the next integer to the client, would this
service be stateless or would its state be undefined with respect to
WSDL today?
Regards,
--umit
Umit Yalcinalp
Consulting Member of Technical Staff
ORACLE
