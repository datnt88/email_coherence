Reasons: CSS is awfully hard to fight at the moment, since
both Netscape and Microsoft are working on it like mad, and potentially
very vulnerable in a few months time if the design fails under pressure,
as some of us suspect it will.
Is there a way to avoid these notation wars? I'm wondering if, at the very
least, we can sufficiently influence the concepts in the CSS-layout
specification (which is still very much under development) so that they
"align" with those of DSSSL-O.
Perhaps we could attack through Java. It sounds bizarre, but right now Java
is so heavily hyped that Java-anything is considered good. Ergo Netscape has
declared "JavaScript Stylesheets". JavaScript is evil voodoo, but Java is
actually not half bad. I am envisioning something we could call "Java
stylesheets". It would be a DSSSL-like transformation that works on the
source object and builds a screen display. The style sheet would be
delivered as Java byte codes. The byte codes would have to have access to a
much more powerful display layout API than they do now (fonts, layout,
etc...much like DSSSL flow objects).
Now there are a few different groups working on Scheme- Java, so we could
deliver our DSSSL script as Java bytecodes and nobody would be the wiser. A
war would have been averted.
Principles:
a) Scheme has a stigma (though I *really* like it, I can imagine Marc
Andreesen snickering)
b) DSSSL will have a scheme-stigma.
c) DSSSL without scheme is, in my opinion, underpowered, just as CSS is
underpowered.
d) Java bytecodes put everyone on fairly level ground.
e) Java interpreters are already widely deployed and getting more and more
efficient.
e) maybe once the document UI is controlled in Java there are some
interesting interactive things we can do (expandable table of contents, for
instance)
Once Java-style sheets are implemented, CSS, DSSSL-O and full DSSSL could
all be built on top of them, either by compilation *to* Java byte codes, or
by interpretation *by* Java bytecodes.
META-COMMENT Perhaps it is too early in our understanding of online style
sheets to choose *any* standardized style sheet syntax. Look at the
complexity of DSSSL-Print. It is only after *centuries* of typographic
development that we knew what the right flow objects and characteristics to
provide were. /
Paul Prescod
Boycott Shell Oil worldwide! http://www.web.apc.org/embargo/shell.htm
"Shell is here on trial and it is as well that it is represented by counsel
said to be holding a watching brief."..."The ecological war that the Company
has waged in the Delta will be called to question sooner than later." -Ken
Saro-Wiwa to the tribunal that later executed him.
Anyway, aren't hyperlinks the next scheduled task?
I think that we are trying to decide that. It depends on our overall
strategy. If Jon wants to get style sheet implementations by April, then we
can't wait until too late to start discussing layout. Parsing and
hyperlinking are relatively trivial (to implement) by comparison.
Paul Prescod
[Paul Prescod:]
Anyway, aren't hyperlinks the next scheduled task?
The default style sheet language for the W3C SGML Web activity is
dsssl-o (see the activity page). We don't need much discussion of
that right now, but we do need some development if we want to
demonstrate this by April; that's what I was suggesting.
I hope you're right...
Jon
Ok but if that is a done deal, why is it a work item?
I hope that comes up for debate. The
CSS guys have their case to make. DSSSL-O has
few implementations whereas XML gets quite a few with
some simple adjustments. If a vendor chooses to
support CSS, why should that make it impossible to
support XML as well? Why isn't a stylesheet type
on a par with any other notation, eg. as a MIME type?
So do I but I've been through the debate before and it
wasn't that simple to choose. Hyperlinking has some
notable variants and existing standards. Tim is probably
right that adopting some HyTime concepts will help.
We might consider looking at the legacy out there, IOW,
how many ways have hyperlinks been defined in existing
SGML applications, where are they similar and different,
and how can XML support these. While the work on DOCBOOK,
TEI, Mosaic etc cited in your speech are examples, so is the preexisting
and well documented and well-supported work done in MIL-D-87269, MID,
proposals
to MIL-PRF-28001, the Philly DTD, etc.
BTW, for the Quran test file, is this right?
Also, see verse 78 of The Cow. Arc should be are.
That one was easy. Good reading too.
The files are a bit big for test files though.
IDEAS handles them without a burp but the size
is overkill for testing.
len
