The whole "fn: is a function and is mapped to
|http://www.w3.org/2003/11/xpath-functions| except when you actually use
it (in which case no prefix is used), and op: looks like a namespace
prefix but really isn't" is just a mess. It's a symptom of the
"everything must have a namespace and a URI" disease that has infected
the W3C for the last few years. Removing the operators namespace URI in
this draft has just made this more obvious. This whole namespace mess is
horribly confusing.
Let's face reality: None of the functions or operators are in any
namespace. The whole idea of putting these in a namespace does not jibe
with the namespaces spec. Nothing is gained by claiming these functions
and operators are in a namespace. Talking about the namespace of an
XQuery function has no more meaning than talking aobut the current king
of France or the set of triangles with four sides.
The XQuery functions and operators spec will bemuch clearer if it does
not attempt to place any functions or operators in any namespace. If you
wish to use the syntax fn: and op: to distinguish functions from
operators, that's OK. Alternately you could pick a different delimiter
that does not remind anyone of namespace prefixes. For example, fn# and
op#. However, fn: and op: should not be namespace prefixes, and in
reality they never really were.
Elliotte Rusty Harold
The functions in XPath 1.0/XSLT 1.0 already use the notion of namespaces
for scoping function libraries. Since we need such a mechanism and need
to be backwards compatible with XPath 1.0/XSLT 1.0, there is really no
other choice. The reason that op: is specially handled is because these
functions are not accessible and are only used for definitional use.
Best regards
Michael
use
in
is
jibe
functions
king
you
and
Actually they are in a namespace that is made the default namespace, but
you can also use the fn: prefix (you can write data() or fn:data()).
Some reasons why the functions are in the fn: namespace and not in the
no-namespace:
1. user's that write their own local functions in the prolog do most
likely not want to assign namespaces to them.
2. the namespace allows better version management for future versions
(breaking bug fixes etc.).
Your proposal to not but the built-in functions into a namespace
certainly could have been chosen as well. As Michael Kay explained,
there was quite some discussion about this and in my personal opinion,
both approaches are viable...
Best regards
Michael
namespaces
need
no
these
it
A
