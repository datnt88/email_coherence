If the user agent allows the user to follow the [CommentURL] link [as
part of a cookie inspection user interface], it should neither send nor
accept a cookie until the user has completed the inspection.
I think that's absolutely correct. It's the only way not to confuse
either a script on the server side, or the state on the UA side.
I don't see why you want to exclude sending of cookies when
a UA is acting on the commentURL, nor why you are conceptualizing it
as only for a policy statement. That's possible, but the PEP or
PEP-like extension is a better way to assess a site's "policy". One
of the main reasons for wanting cookie support in UAs is that it's a
simple, "here now" way to maintain user preferences across documents
at a site, and is complementary to the TCN/features mechanisms. The
hope is that the reply will include a statement about the purpose of
that particular cookie, and "preference cookies" should still be able
to affect how the reply is structured.
The reason for not sending or accepting cookies is that the whole
purpose of the CommentURL is to allow the user to evaluate the
pros and cons of accepting a cookie. If you offer another cookie
while they're trying to decide if they should accept the first cookie,
now they potentially have to evaluate whether they want to accept the
second cookie, presumably before they can even look at the information
explaining the first cookie. Obviously, this could be a very annoying
endless loop to nowhere.
We also don't want to appear to be advertising to the Server that there's
an opportunity to change the state on this particular user while he
grabs the CommentURL. Sorry for the wording here, but if the server
expects the client to accept the change on a cookie that IS already being
used, and the user agent doesn't accept the change because it's retrieving
a CommentURL, the applications on the server side may become confused.
You simply want to guard against the server trying to set new
cookies via the reply to the commentURL request, and there too, you
need not exclude things like it expiring or modifying old cookies
which the user accepted. How about something like this:
If the user agent allows the user to follow the CommentURL
link as part of a cookie inspection user interface, the server
should not include any new cookies in the reply, and the UA
should allow the use to inspect the body of the reply before
acting on any other commentURL links.
You can't put the responsibility for this on the server. It must be
in the client. At the very least, the client should ignore any "new"
cookies. I think, however, it best to not accept any cookie actions
while getting the commentURL document. Some scripts may not react
well to having a cookie expire, and having another cookie that was
issued in the same request not get set. The "correct" action would be
to feign ignorance of cookies and do nothing to the state of the UA
until a decision is made on accepting or refusing the original cookie
not send any cookie information when retrieving the CommentURL.
If this is a "first contact", or is consequent to the user having
enabled formerly disabled cookie support, that degrades to the
reply having no more than the cookie about which a comment is being
sought.
Fote
ouch... parse error line 3... sorry... The reply to what? To the request for
the CommentURL? The UA just needs to know if it should or
should not accept a cookie that's been sent to it. The CommentURL allows
the user to make an informed decision about whether they should or
should not accept the cookie. The process of attaining this "decision
making information" should be "sacred"... without cookies or sessions
or anything... it should be anonymous, as though the browser does not
have support for cookies, and it should not be something that will result
in any cookies being accepted, rejected, or changed in any way, except
for the one cookie that is in question, and the point of the whole process.
Jonathan
I don't see why you want to exclude sending of cookies when
a UA is acting on the commentURL, nor why you are conceptualizing it
as only for a policy statement. That's possible, but the PEP or
PEP-like extension is a better way to assess a site's "policy". One
of the main reasons for wanting cookie support in UAs is that it's a
simple, "here now" way to maintain user preferences across documents
at a site, and is complementary to the TCN/features mechanisms. The
I think a prior post of mine would indicate agreement with your concern
but I'm not sure I would accept as a 'main reason' for cookie support
being the storage of preferences. Preferences are, IMHO, a minor
concern and a particular type of 'session' which cookies can be used
to maintain. But all this really says is that cookies have tremendous
appeal because they are a general facility which can be used in many
ways, each of which would probably be more effectively solved some
other way. They also enhance cachability of the web by reducing
the need for munged URLs, etc.
Dave Morris
Dave Morris and others have pretty consistently supported the inclusion
of a CommentURL attribute in Set-Cookie2. I was in the process of
editing that capability in for the next draft when I ran into the
following puzzle: how to express the general idea that no cookies
should be sent or received during the inspection process.
Here's an illustration of the problem. I send a request to foo.com and
get back a cookie that contains
CommentURL="http://foo.com/cookie-policy.html". I'm given the option
to inspect that CommentURL, so I do so. The HTML could potentially
have images in it, even links to images on advertising networks. It
could also have links to other pages on foo.com. If I follow those
links (all while supposedly inspecting the cookie policy), I get deeper
and deeper into the site. All the while cookie handling should be
disabled, right? How does it get re-enabled?
Does this wording express it adequately?:
If the user agent allows the user to follow the [CommentURL] link [as
part of a cookie inspection user interface], it should neither send nor
accept a cookie until the user has completed the inspection.
I don't see why you want to exclude sending of cookies when
a UA is acting on the commentURL, nor why you are conceptualizing it
as only for a policy statement. That's possible, but the PEP or
PEP-like extension is a better way to assess a site's "policy". One
of the main reasons for wanting cookie support in UAs is that it's a
simple, "here now" way to maintain user preferences across documents
at a site, and is complementary to the TCN/features mechanisms. The
hope is that the reply will include a statement about the purpose of
that particular cookie, and "preference cookies" should still be able
to affect how the reply is structured.
You simply want to guard against the server trying to set new
cookies via the reply to the commentURL request, and there too, you
need not exclude things like it expiring or modifying old cookies
which the user accepted. How about something like this:
If the user agent allows the user to follow the CommentURL
link as part of a cookie inspection user interface, the server
should not include any new cookies in the reply, and the UA
should allow the use to inspect the body of the reply before
acting on any other commentURL links.
If this is a "first contact", or is consequent to the user having
enabled formerly disabled cookie support, that degrades to the
reply having no more than the cookie about which a comment is being
sought.
Fote
Foteos Macrides Worcester Foundation for Biomedical Research
MACRIDES@SCI.WFBR.EDU 222 Maple Avenue, Shrewsbury, MA 01545
