Greetings.
I am considering using jtidy as part of a tool I am creating to
generate static pages. Part of my tool requires the addition of tags
such as staticpage within the html documents.
Now jtidy obviously complains about this since staticpage is not a
valid html. I began to look at your source code and manage to have it
ignore any unknown tag under the body scope. I still am looking a way
for jtidy to automatically generate the /staticpage so the document
becomes automatically xml compliant.
Ok, my question. Would you accept the addition of an option within
jtidy which would cause it to ignore additional tags and just process
them to become xml compliant? Off course, this option would be off by
default to keep jtidy backward compatible (and it makes sense to have
this option off for most usages). But this feature might be very
interesting for other projects simillar to mine where they would want
their tags remain unprocessed (except for making them xml compliant).
I am asking because the code change will require many changes within a
few files. Thus, its not a simple patch. I cannot therefore fork my
own jtidy, watch you guys fixing the main tree and adding features and
then manually add my feature to each of your new releases. This is why
I would like my changes to be brought into the main tree.
And if you have any suggestion on how to implement it, be my guess.
Since this is OO, reverse engineering it to understand what is going in
is a bit difficult, and my solution might not be the most elegant/optimize.
BTW, jtidy is great. I'm glad I have discovered it. Thanks for the
product.
Sincerely,
Hans Deragon
Hans, why do you feel you need to introduce an addition tag? The reason
I'm asking is that often implementation problems can be removed by walk
further up the tree to the design, or even up to the analysis and
revisiting your final outcome and what assumptions you are making about why
you need to go down a particular implementation path. What value would
these new tags have to what you are trying to do?
When the only tool you have is a hammer, everything around you looks like a
nail. Start by building better tools!
Hans Deragon
.org cc:
Sent by: Subject: Allowing other tags...
html-tidy-requ
est@w3.org
11/16/2001
09:38 AM
Please respond
to Hans
Deragon
Greetings.
I am considering using jtidy as part of a tool I am creating to
generate static pages. Part of my tool requires the addition of tags
such as staticpage within the html documents.
Now jtidy obviously complains about this since staticpage is not a
valid html. I began to look at your source code and manage to have it
ignore any unknown tag under the body scope. I still am looking a way
for jtidy to automatically generate the /staticpage so the document
becomes automatically xml compliant.
Ok, my question. Would you accept the addition of an option within
jtidy which would cause it to ignore additional tags and just process
them to become xml compliant? Off course, this option would be off by
default to keep jtidy backward compatible (and it makes sense to have
this option off for most usages). But this feature might be very
interesting for other projects simillar to mine where they would want
their tags remain unprocessed (except for making them xml compliant).
I am asking because the code change will require many changes within a
few files. Thus, its not a simple patch. I cannot therefore fork my
own jtidy, watch you guys fixing the main tree and adding features and
then manually add my feature to each of your new releases. This is why
I would like my changes to be brought into the main tree.
And if you have any suggestion on how to implement it, be my guess.
Since this is OO, reverse engineering it to understand what is going in
is a bit difficult, and my solution might not be the most elegant/optimize.
BTW, jtidy is great. I'm glad I have discovered it. Thanks for the
product.
Sincerely,
Hans Deragon
I want to build a template driven system for processing html files.
New tags are placeholders and instructions for how to manipulate the
html files.
And I want these tags to be in xml format. I then pass the html files
through jtidy
to make them xml compliant. Then, using DOM functionnality, I can
manipulate
easily the different html and resolve their dependencies. I then create
a new
XML structure resulting from the merging of many files, and use this
structure
to generate the final static page (I might pass this final static page
again through
jtidy).
Its not the most efficient way of doing, but I am not seeking most
efficiency CPU
or memory wise. I am seeking for the most efficient use of existing
code, keeping
maintenance easy, etc... Using jtidy, I have no parsing to do! It
provides me
the DOM document of my HTML pages (hopefully with my tags intact). Then
I only have to play with the Nodes, replacing them, deleting them, etc..
to get
the final structure.
Ciao
Hans Deragon
FWIW: I haven't necessarily done the above but we do add some tags to HTML
files that give us some additional information about the files. We do this
by adding div and span tags with very specific attributes so that these
div and span tags are not confused with existing tags. This means we do
not have to have any new tags that tidy does not support. Here is a short
example:
Then when we are using the DOM/XSLT, we just select these elements with:
//div[@title='myConfigInfo]/span[@title="color"]
Just thought this might help make your job a bit easier by not having to
modify how tidy works.
Mmm... I do not understand where you are going at. If you pass your
div and span to jtidy, jtidy will complain. So you are
It shouldn't complain since div and span tags are part of the XHTML
strict specification. BTW, we are using the normal tidy application and not
jtidy.
suggesting
that I do
what within my html files?
Before running our html files through tidy, we add these tags to the top of
the file. Since they are outside of the HTML BODY elements, tidy moves
them inside those elements and make the rest of the html XML conformant.
Now you have a valid XHTML file that you can access with the DOM.
In your case, since you are using templates, you could place div / span
tags in various locations throughout your html template and have your code
use the DOM to replace those tags with the values you desire.
Kipp E. Howard - OEM Development Engineer @ CourtLink
kipp.howard@courtlink.com
(425) 372-1837 or (800) 774-7317 ext 1837
I do not know JTidy at all, but the C version contains an option to add
"new" tags. The following is from Dave's original documentation:
You can teach Tidy about new tags by declaring them in the configuration
file, the syntax is:
new-inline-tags: tag1, tag2, tag3 new-empty-tags: tag1, tag2, tag3
new-blocklevel-tags: tag1, tag2, tag3 new-pre-tags: tag1, tag2, tag3
The same tag can be defined as empty and as inline or as empty and as block.
These declarations can be combined to define an a new empty inline or
empty block element, but you are not advised to declare tags as being
both inline and block!
Note that the new tags can only appear where Tidy expects inline or
block-level tags respectively. This means you can't (yet) place new tags
within the document head or other contexts with restricted content
models. So far the most popular use of this feature is to allow Tidy to
be applied to Cold Fusion files.
I would hope a similar options would be available in JTidy. Note that
this does not deal with arbitrary unknown tags, but should work if you
have a defined set of new, non-html-compliant tags.
Bingo! You gave me a major clue. I have added a new tag type:
new-ignored-tags
and it works, at least in a body tag (I will generalize it later).
None of the current tag definition did what I wanted.
So, developers (maintainers of Jtidy, tidy, etc..), what do you think about
adding this feature in the main tree? Please provide me your comments.
Sincerely,
Hans Deragon
P.S. Jtidy is not distributed with the documentation mentionned by
Lee Passey. May I suggest that it be with the next version?
My humble opinion is that Jtidy should just make unknown tags well
formed, as long as they have a namespace prefix associated with a
namespace declaration in a correct context within the document.
Another subject I am up against at this time is dealing with (X)HTML
fragments (see my fragments post).
Kindest regards,
Manos (not subscribed!)
