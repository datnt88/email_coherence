Please, no; these save a tiny number of bytes, make it harder for
both humans and computers to understand, and for people who don't
already know SGML, have to be explained.
Actually a tiny number of bytes can add up quickly in large files,
but I to am willing to do without / . What I would like is to be
able to leave off the end tag entirely and have XML assume that I
wanted to close the immediately proceeding element so that
item Item 1
item Item 2
item Item 3
would be legal. Doing this should be easy assuming that the EMPTY
element problem is dealt with.
B. Todd Bauman
Graduate Student
University of Maryland, Baltimore County
On the other hand -- there are one or two uses of SHORTTAG that I don't
think complicate parsing all that much, and might be retained:
- empty end-tags
Please, no; these save a tiny number of bytes, make it harder for
both humans and computers to understand, and for people who don't
already know SGML, have to be explained. Also, on purely CS-theory
grounds, they push an XML parser over the edge from a pure automaton
to something that has to keep a stack. OK, the cost of keeping a stack
is not high, but neither is the benefit of using / .
The rest seem like good things for XML:
- attribute values without quotes around them
- the omission of attributes which have default values.
Cheers, Tim Bray
tbray@textuality.com http://www.textuality.com/ +1-604-488-1167
On the other hand -- there are one or two uses of SHORTTAG that I don't
think complicate parsing all that much, and might be retained:
- empty end-tags
And, to bring it down to the level that I'm used to working at, they
push a desperate human from a fix that can be accomplished in time to
meet a deadline with a five-line perl hack to one that can't.
Jon
Date: Wed, 11 Sep 96 16:03:15 CDT
From: Michael Sperberg-McQueen U35395@UICVM.CC.UIC.EDU
On the other hand -- there are one or two uses of SHORTTAG that I don't
think complicate parsing all that much, and might be retained:
- empty end-tags
- attribute values without quotes around them
I feel strongly that both of these should not be included in XML.
They are not necessary to make XML work. Certainly they are
convenient when entering XML by hand, but according to our design
principles that is not a sufficient justification for including
something in XML.
In my experience what makes SGML hard to implement is not so much
particular features but the huge weight of hundreds of little features
like these, which are all individually fairly easy to implement, but
which collectively make implementing SGML hard and a lot of work. I
think it's vital that we be absolutely fanatical about excluding SGML
features from XML unless they are absolutely essential. We must avoid
the danger of looking at each feature individually and saying "I like
this feature, it's not difficult to implement, so let's leave it in".
- the omission of attributes which have default values. Without
SHORTTAG or OMITTAG turned on, 8879 requires that a value be specified
for every attribute which isn't defaulted to #IMPLIED -- I think it
would be better to allow omission of attribute value specifications
for all attributes not #REQUIRED.
I think there's an argument that this is an essential feature. Some
DTDs especially those using architectural forms have a lot of
defaulted attributes on almost every element.
On the other hand it complicates DTD-less processing: for example, it
would make it hard for a browser to display a document correctly
without the DTD.
James
- attribute values without quotes around them
God forbid. I've seen far too many HTML pages with things like
to be comfortable with this. Things like color specifications,
style information etc. etc. will only make errors more common.
I would strongly recommned *requiring* that attribute values be
delimted by LIT or LITA.
- attribute values without quotes around them
I second that. When doing conversions, we end up cleaning up
a substantial mess because of minimizations. I assume that
one application of XML will be to have a very consistent
target set for translating SGML sources into. To do this,
we often build ad hoc tools and these tools need simpler
models.
So, I prefer not to minimize and to disallow mixed content
models. Our problems start where we have to allow for loosely
formatted documents that a customer insists look on the
screen as they did on the page. This is where we usually have
to allow inclusions for font changes, pushing text around, etc.
The other consideration is cost of teaching employees how to
convert. The simpler the target, the better.
len bullard
lockheed martin
- the omission of attributes which have default values. ...
This is another case where partial markup declaration would turn out to
be useful; I might not want to supply a whole DTD, but on the other hand
it would be real nice to send a few little morsels like the following
along with a document.
Cheers, Tim Bray
tbray@textuality.com http://www.textuality.com/ +1-604-488-1167
James's design criterion sounds like a good one. Empty end-tags and
unquoted attribute values do indeed fall into the class of things I had
looked at and said "It's not too hard, let's leave it in", but which are
also clearly inessential. Any doubt I had in my mind went away when I
asked myself "Well, if this feature isn't in XML, will you be forced to
write a pre-processor for it, to translate your working format into
XML?"
There are certainly things I can imagine writing preprocessors for, such
as multiple attlist or element declarations, conditional sections, or
other things the TEI DTDs currently do with marked sections and
parameter entities. And my sense that others besides the TEI need such
functionality might be a reason for including that function in XML.
Or maybe not: maybe some things we need can be embodied in such
preprocessors, rather than built into the core of XML.
But on empty end-tags and unquoted attribute values, I think James
has persuaded me. They are useful for minimizing keystrokes when using
dumb software; they are *not* necessary or even particularly useful
in providing better data structures.
Deep-six 'em.
-C. M. Sperberg-McQueen
Well said. If a feature isn't essential, it shouldn't make the list.
Just to make it clear to everyone the consequences of what you are saying,
you will be forcing me to enter OL compact="compact" rather than OL
compact . (Note that OL "compact" is invalid SGML!)
Martin Bryan
Martin Bryan, The XML Outside, Churchdown, Glos. GL3 2PU, UK
Hi
On Fri, 13 Sep 1996 07:56:39 +0100 Martin Bryan said:
Yes.
Since the main application area of XML is expected to be program to
program communication, losing OL compact does not seem to me to be a
big problem. Even if users do want or need to type XML documents in
ASCII editors, I think it's better this way.
The posts on HTML discussion groups in which users try to explain to
each other the meaning of constructs like OL compact have convinced
me, at least, that requiring all attribute value specifications to take
the form attribute-name, value-indicator, quoted-string would result in
much less confusion and would be a net gain for everyone concerned.
No, not really. As one who has tried to explain this intricacy many times
on comp.infosystems.www.authoring.html, I will rather immodestly claim to
know the *real* problem. Essentially, OL compact="compact" is a kludge.
SGML lacks the "boolean" datatype.
A boolean defaulted to false (by absence) is the concept many learners
*naturally* associate with this form of minimization. I'll also add that
no popular HTML browser actually groks the minimization concept: all of
them barf on things like P center , i.e. minimization applied to name
token groups with more than one member. Judging from the source code I've
seen (and some that I've written myself) HTML browsers actually treat
things like ISMAP etc as boolean attribute names, i.e. a parse like this
attlist :
attlist attr
attr : NAME
NAME EQ VALUE
Allowing boolean attributes "solves" the practical problem, IMHO. And
anyone who says it will complicate parsing shouldn't write a parser:-)
Regards,
Arjun
