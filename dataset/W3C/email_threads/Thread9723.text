I've been trying to catch up on where we have got to with datatypes whilst
I've been away. Here is my short summary so folks can straighten out kinks
in my understanding.
1) There has been a proposal to have tokens representing datatyped values
as nodes in the abstract syntax, replacing (?) the bnode with property
mechanism for representing typed values. This proposal relies on
extensions to the concrete syntax, e.g.
This proposal has been attracting support, particularly from
implementors. There remain a number of issues to work out the details.
2) This proposal is orthognonal to the issue of whether "old style"
literals are tidy or not. No one has as yet written up a summary of the
feedback we got from the community. I will try to do a draft tomorrow.
Brian
I think the above is an accurate summary of the status quo.
Though I originally was just "thinking out loud" when I posted
after alot more thought, I would like to promote it to a more formal
proposal for consideration by the WG. It reflects the general
concensus for #1 above, with some of those minor issues worked out,
and represents closure on #2, strongly supported by maintaining
consistent semantics with both XML Schema global typing and
CC/PP value based semantics.
One issue that I'm still investigating is the choice between
rdf:type and xsi:type in the XML serialization. While I feel that
rdf:type is more correct, I can appreciate the benefit of using xsi:type
insofar as easy validation by XML Schema is concerned; particularly
for document models which are "hybrid" XML and RDF, able to be
interpreted in either context (such as the OpenEbook package
model).
To that end, I have a question that I've yet to find an answer
to in my own diggings around: Is it possible to equate rdf:type
with xsi:type in an XML Schema in a similar fashion to
rdfs:subPropertyOf, so that an XML Schema validator would
recognize rdf:type as synonymous with xsi:type? If so, then
there's no reason not to go with rdf:type. If not, then even
though it feels a bit icky, I could be persuaded to go with
xsi:type, and then define formally in the RDF MT that xsi:type
is rdfs:subPropertyOf rdf:type to tie it into the RDF typing
semantics.
Eh?
Patrick
I realized I should be a bit clearer about what I mean
by "icky" here:
1. xsi:type introduces qnames into RDF/XML
2. xsi:type has rdf:type semantics but isn't rdf:type
for reasons having nothing to do with RDF
3. xsi:type implies an XML Schema datatype, even
if any arbitrary type might be specified
As for the last point, I'm presuming that
(a) it is in fact OK to specify any datatype whatsoever
as the value of xsi:type, even one that violates
constraints defined by the XML Schema specification
(b) the XML Schema folks are OK with us borrowing their
term as an official term in the RDF vocabulary
If either of the above turn out to not be true, then that
precludes our use of xsi:type.
Patrick
No, it's not extensible that way.
No, don't go there either. xsi:type makes sense (to me)
as part of the syntax of a literal; it doesn't
make sense (to me) as a subPropertyOf rdf:type;
we don't want parsers to have to theorem-proving
to distinguish one literal for another.
That's sorta the point of literals: you can see,
just by looking, whether they denote the same
thing or not.
Dan Connolly, W3C http://www.w3.org/People/Connolly/
I agree with Dan on this.
#g
Graham Klyne
