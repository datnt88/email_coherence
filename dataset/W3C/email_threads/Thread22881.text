In Document Object Model (DOM) Level 2 Specification, Version 1.0, W3C Candidate Recommendation 07 March, 2000, under Section 5.2 CSS Fundamental Interfaces, under Interface CSSValue, regarding CSS_INHERIT:
It seems to me that the valueType CSS_INHERIT is orthogonal to the other three specified values of valueType (CSS_PRIMITIVE_TYPE, CSS_VALUE_LIST, CSS_CUSTOM). The latter three express important sub-type information, yet CSS_INHERIT expresses how the value came to be.
If one were to specify CSS_INHERIT, then sub-type information will be lost; if one were to specify sub-type information, then information about inheritence would be lost.
I'd suggest adding an additional boolean attribute to indicate inheritence rather than misusing the valueType attribute.
Regards,
Glenn Adams
CSS_INHERIT is a special value which requires special handling in the CSS
engine. The 'inherit' value should be supported by all CSS properties. So,
according to this conclusion, we put the 'inherit' support on the CSSValue
interface. If you explicit set a property to 'inherit' in your style sheet,
you'll get CSS_INHERIT in your CSSValue with no sub-type information. You'll
get the computed value from the computed style. It's a fact that setting a
property from 'inherit' to something else (like 12em for example) introduces
some constraints on the underlying implementation. It also means that you
have to use the cssText property to do that or to use the setProperty method
on the CSSStyleDeclaration interface. We don't consider this contraint as an
issue since this is not a real common use.
It could be a possibility except that I don't see what primitiveType should
return if the value is 'inherit' and the underlying type is CSS_PRIMITIVE_VALUE.
And this will be the same for CSS_VALUE_LIST (length == 0?) and all custom
values in the CSS2 extension. When a value is CSS_INHERIT, you're not allowed
to access the sub attributes or sub functions.
Does it clarify your intend ?
Philippe.
I believe I understand now: if valueType is CSS_INHERIT then no other information is available from that CSSValue instance (although, what would cssText be in this case? "inherit"?); in this case, one must use ViewCSS.getComputedStyle(...).getPropertyCSSValue(...) to obtain the actual (computed) value.
If this is correct, then some additional clarifying language would suffice.
Regards,
Glenn
Philippe Le Hegaret
CSS_INHERIT is a special value which requires special handling in the CSS
engine. The 'inherit' value should be supported by all CSS properties. So,
according to this conclusion, we put the 'inherit' support on the CSSValue
interface. If you explicit set a property to 'inherit' in your style sheet,
you'll get CSS_INHERIT in your CSSValue with no sub-type information. You'll
get the computed value from the computed style. It's a fact that setting a
property from 'inherit' to something else (like 12em for example) introduces
some constraints on the underlying implementation. It also means that you
have to use the cssText property to do that or to use the setProperty method
on the CSSStyleDeclaration interface. We don't consider this contraint as an
issue since this is not a real common use.
It could be a possibility except that I don't see what primitiveType should
return if the value is 'inherit' and the underlying type is CSS_PRIMITIVE_VALUE.
And this will be the same for CSS_VALUE_LIST (length == 0?) and all custom
values in the CSS2 extension. When a value is CSS_INHERIT, you're not allowed
to access the sub attributes or sub functions.
Does it clarify your intend ?
Philippe.
I'm trying to clarify the difference between 'specified', 'computed' and
'actual'.
'specified':
- in the CSSOM, we use 'specified' to reference the values of the style
sheet. No computation at this level : 'what you get is what you write'.
This is what you get in a CSSStyleDeclaration from a CSSRule.
- the CSS2 spec uses 'specified' for the first step of the style computation.
These values are not exposed in the CSSOM.
'computed':
CSSOM and CSS2 are using the same definition for 'computed'.
This is what you get in a CSSStyleDeclaration from a ViewCSS.
'actual':
actual values are not exposed in the CSS OM.
According to these statements, I updated the description of the
CSSStyleDeclaration interface:
"The CSSStyleDeclaration interface represents a single CSS declaration
block. This interface may be used to determine the style properties currently
set in a block or to set style properties explicitly within the block.
While an implementation may not recognize all CSS properties within a CSS
declaration block, it is expected to provide access to all specified properties
in the style sheet through the CSSStyleDeclaration interface. Furthermore,
implementations that support a specific level of CSS should correctly handle
CSS shorthand properties for that level. For a further discussion of shorthand
properties, see the CSS2Properties interface.
This interface is also used to provide a read-only access to the computed to
the computed values of an element. See also the ViewCSS interface.
Note: The CSS Object Model doesn't provide an access to the specified or actual
values of the CSS cascade."
Philippe.
