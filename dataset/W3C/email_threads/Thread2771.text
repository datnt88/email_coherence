Attending, Larry Masinter, Jim Gettys, Henrik Frystyk, Jeff Mogul, Dave
Kristol, Roy Fielding, Paul Leach. Minutes by Henrik Frystyk, reviewed
and expanded by Jim Gettys. Any errors are now my responsibility.
As always, current issues and status are found at
at: http://www.w3.org/Protocols/HTTP/Issues/
Issues discussed (and usually resolved): MUST-MAY-SHOULD, TE-IDENTITY,
PROXY-DNS, ERRORS, RANGEDELIM, IEBUG, MISTAKES For detail, see the minutes
below.
The conference call was made difficult due to the passage of a severe
thunderstorm through the Boston area (I was in Carlisle, MA, 25 miles
west of Boston, and Henrik in Boston), which slowed us down and made things
difficult; the storm forced me to unplug my home machine and deal with
a portable phone through 7! power-failures. Consequently, we didn't finish
going over the issues list today, but hope to finish with another call
in the next few days.
We plan to discuss in the next (hopefully last) teleconference:
IEBUG, remaining questions in MISTAKES, WARNGEN, and VERSION.
Draft 04 is in preparation; I plan to submit it the middle of next week
(well in advance of the IETF ID deadline; I have a family reunion which
forces my completion well in advance this time).
You should see mail following up from the designated people below on proposed
language on the working group list in the next two days.
Actions
* h1 MUST-MAY-SHOULD.
This was classed as technical only as it affects normative language.
There have been no comments on this issue in the list, despite a
call for any comments. I will apply the edits, doing a final sanity check.
Jim: Editorial
* h2 TE-IDENTITY. Henrik: Add OPTIONAL for how the server handle it. That
is, it is optional for the server to look at it but if it does then it
SHOULD send 406 if it can't respond in the transfer encoding.
* h3 PROXY-DNS.
a) Paul: Broaden the scope of 504 to contain DNS timeouts as well and
describe this as a minor clarification.
b) What about authoritative errors in proxies? Too late to handle. Existing
proxies do at least three different things. Grist for the HTTP-Extension
working group, who may find additional error codes useful.
c) Larry: Put in a note for clients saying that to expect in a 400 code
and maybe 500 as well.
* h4 ERRORS. No resolution required - do what the spec says for the
various features.
* h5 RANGEDELIM. Mime-Multipart allows text to be in the area before
the first boundary. MM says that there should be an extra CRLF so that
there is an empty line after the boundaries. Dave: Clarify 19.2 that the
definition of the MM body is defined by RFC 2046 (?). Also make the example
legal - it misses some CRLFs.
* h6 IEBUG. Believe that if this becomes an important practical problem
then servers will deal with this; it appeared to be an infrequent failure,
on a buggy implementation, without an easy solution not keyed to the
particular browser.
I am slightly nervous about the correctness of this resolution so we'll
discuss it again in the next phone call, after refreshing our memory on
exactly what problem 416 solves (no one on the call remembered all the
details of the problem that caused 416 to be added to the protocol).
* h6a MISTAKES
a) Section 8.2.3: We believe the current SHOULD should become a MAY; only
a client ends up having enough information as to whether a retry makes
sense or not. Koen's example is a good one, to retry a GET of 1 megabyte
that failed partially is something only a user agent will know if it wants
the user control over. The first sentence also needs editorial work to
make clear we mean the connection closing before the end of the response
has been recieved.
b) The consensus was the invalidation was in fact correct, has been a
requirement for a long time given language existing even in 1945, and
it would be dangerous to remove it. At least, that is what I remember
while in the basement with a scared 3 year old near by over the static
in the phone.
c) At this point, the storm arrived in Boston, Henrik went to save his
machine, and several other attendees had to leave; we'll pick up again
with Koen's message about section 14.2. As the storm was mostly over
at this point in Carlisle, this says the storm was about 25 miles across...
Definately the most exciting of any of these teleconferences, at least
for Henrik and me.
- Jim Gettys
Jim Gettys:
Needless to say I disagree with the consensus of the phone
conference. I can't find any language about this matter in 1945 or
2068, so please point me to it. Also, the requirement has no teeth
anyway because a system is always free to act as a tunnel, not as a
cache, for certain requests.
I could change my mind about this issue if someone would provide some
evidence that current practice actually conforms to the proposed new
requirment. As far as I know currently deployed systems do not, and
the new requirement would only shorten the useful lifetime of the
protocol.
Koen.
Several of us managed to get together on a teleconference again today to
discuss remaining issues: these were myself, Henrik Frystyk, Dave Kristol,
and Paul Leach.
Issues discussed (and usually resolved): IEBUG, MISTAKES, WARNGEN, VERSION
see the minutes below.
IEBUG: We discussed IEBUG some more; Paul will check further with Josh Cohen
on this. It isn't clear any action should be taken; but we don't
fully remember why the response was made a 416 code rather than a 200 series
code, and this is nagging us. Jeff Mogul was not available for the call,
and he drafted the 416 description. I will also check with Jeff to see
if he remembers the reason.
MISTAKES:
Section 14.2: This change was made due to bug CHARSET-NIT editorial issue
and applied in Rev-02; you should have been able to catch this one
earlier. I don't keep such a detailed issues list just for my health,
you know; it is for all our benefits as a sanity check on possible mistakes
slipping in.
See in the old issues list at
I might have made a mistake here, but Larry wasn't on our call, and he
fields our character set questions. Let this serve as a reminder that
all issues, including ones I class as editorial, should be looked over.
Please explain why I was wrong (if indeed I was)... At the time, it looked
to me like Howard was clearly right, and that was the best solution, but
I'm not a character set guru.
Section 4, bullet 4 vs. 14.35.1. We discussed this at length, and agree
that there is an implicit assumption here that may be best to make explicit.
Paul Leach agreed to try to draft some words on this one, and a way to
explain why the requirement exists. As usual, this is a subtle problem
involving various versions of proxies, to keep it complicated.
WARNGEN:
It is really the same as the WARN-GEN editorial issue further down; there
was one place where in applying the changes, that a bit of care in the
changing words needed to be applied; Henrik and I figured out exactly which
word to change in this case. This is now an editorial issue.
VERSION:
Unless there is objection, consider this a last call for the rewrite in
Jeff's message.
We also discussed the problem that when you do a PUT, you have no way
to get an entity tag back in the response to the initial PUT. This
leaves a race where someone might update a resource before you can
get your hands on the Etag to do your own conditional operations.
Henrik, Dave and Paul continued discussing this after I had to go
to a doctor's appointment. I suspect that this will be deferred to
a future working group, but don't know the outcome.
IEBUG: We discussed IEBUG some more; Paul will check further with
Josh Cohen on this. It isn't clear any action should be taken; but
we don't fully remember why the response was made a 416 code rather
than a 200 series code, and this is nagging us. Jeff Mogul was not
available for the call, and he drafted the 416 description. I will
also check with Jeff to see if he remembers the reason.
I'm not sure we gave any deep theoretical analysis to the choice
between 2xx and 4xx.
To review the reason for including the 416 response: without a specific
"Range not satisfiable" error, the client cannot tell the difference
between (inadvertently) requesting something beyond the end of the
resource, and simply failing to get any response at all. I believe
that Henrik discovered this problem while doing one of his
implementations.
Why might the client legitimately read past the end of a resource?
Well, consider the case of a client that wants to find out the
screen-size of a GIF image (to allow early rendering of text) without
blocking while the entire image downloads. Assume that the client has
seen some or all of the enclosing HTML file, which turns out to have
two imbedded GIFs. The client could do these requests (please excuse
the short-hand notation!) in a pipeline (i.e., without waiting
for any server replies):
GET imagea.gif/Range: 0-1023
GET imageb.gif/Range: 0-1023
GET imagea.gif/Range: 1023-
GET imageb.gif/Range: 1023-
This would be done with the assumption that all of the necessary
screen layout information is contained in the first 1024 bytes
of the GIF file (actually, the number is probably a lot smaller,
but I'm using this as an arbitrary example).
Now, suppose that these are really just tiny images (bullets,
horizontal rules, whatever) and imageb.gif is actually only
512 bytes long. We don't want return a "hard" error to the
client, such as 404 Not Found, since that could imply instead
that the entire resource is now bogus. So this is why we wanted
a separate code. Note that by the time that the client receives
the 416 response for the second request for imageb.gif, it
has already received the first response, and so between the
two responses (and the resource-length information in each)
it can infer exactly why it got the 416 response.
OK, back to 2xx vs. 4xx. As I said, I don't think we gave it
much thought at the time.
Remember that the scenario above is not the only way to get
a 416 error. It might be the most common one, but imagine
that we have a client interface that allows the user to select
a specific part of a document, and the user enters a bogus
range. So, in some cases, this is really an "error."
Section 6.1.1 (Status Code and Reason Phrase) lists the
categories like this:
. 1xx: Informational - Request received, continuing process
. 2xx: Success - The action was successfully received, understood,
and accepted
. 3xx: Redirection - Further action must be taken in order to
complete the request
. 4xx: Client Error - The request contains bad syntax or cannot be
fulfilled
. 5xx: Server Error - The server failed to fulfill an apparently
valid request
For " Requested range not satisfiable" (RRNS, I'll call it), 1xx
and 5xx are clearly not the right categories. 3xx "Redirection"
doesn't sound right.
2xx is described as "The action was successfully received, understood,
and accepted", but this seems to contradict the plain intent of
416 (which is that the action was NOT accepted). 4xx is described
as "The request ... cannot be fulfilled", which seems like it hits
the nail on the head. So, from the plain language of the description
in 6.1.1, 4xx is indeed the right category, and this is presumably
what led us to pick 416.
I'm not necessarily arguing that, if we had had the foresight
to consider the implications of interoperating with a RFC2068-compliant
client that sends Range requests (and rather clever one, at that),
that we might not have gone against this basic distinction between
2xx and 4xx ... although I can't for sure say that this would have
solved the problem for IE, and it might have created other ones.
But I think we would be making a mistake to try to change the
code number now. Right now, we are in this situation:
(1) The 416 code was introduced to solve a real problem.
(2) The design in -rev-03 is at least internally consistent
(3) We are aware of the problem with IE, but we can also
hypothesize some workarounds
If we change the code, then we may end up with problems that we
don't understand, and I think this would be worse. I.e., rather
the devil you know than the (potentially several) devils you
don't know. (Note to Paul: I am using "devil" here as part of
a common proverb, not in any more specific sense.)
What workarounds? I recall that someone (Roy?) suggested on
Thursday that the server could have special code saying
if (about to send 416) then
if (User-Agent == "IE4") then
don't send 416
endif
send 416
endif
The outer condition might be something more elaborate, such
as "about to send 416 and requested range is just after
the end of the resource."
I don't remember what was suggested instead of sending 416, but I'm
sure that Josh can tell us what he would like to have happen
there.
Yes, I know this is a pain, but the alternatives are also painful.
-Jeff
