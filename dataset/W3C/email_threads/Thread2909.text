From: Dan Simon dansimon@microsoft.com
Date: Thu, 25 Apr 1996 13:42:41 -0700
On the other hand, if we incorporate password authentication into the
protocol, then we can protect those passwords by basing the
challenge-response protocol on both the password and the
automatically-strong MAC key exchanged during the handshake. This will
protect the password from offline attacks, making even a poorly chosen
password a useful security tool (assuming that it's kept secret, and
that the server doesn't permit unlimited online trial-and-error
attacks).
OK, the following is just a request for information; a reality check
for myself to see if I'm missing something fundamental here. I have
the uncomfortable feeling that we are talking past one another rather
than communicating.
Consider the following thought experiment:
* PCT 2.0 protocol, using password authentication, where the password
can be only a 4 digit number (10,000 possibilities), and no
public/private key pairs at the two endpoints
* 2 Princeton students with a copy of a PCT session sniffed off
the wire (no active attacks allowed)
Can they, or can they not break the session in a minute or so by
exhausting over the password space?
I haven't looked at PCTv2 recently, so a caveat. However, if you just
think about how SSL and PCT work wrt exchanging a master key and hashing
down to read/write keys that are 40-bits, one could imagine the passwords
be protected by a   40-bit key (probably not the master key directly,
but perhaps something else derived from it). Network eavesdroppers that
wish to perform an exhaustive search of the space of passwords must also
determine this other key, which is difficult.
This may not be a kosher way to do things wrt export, however, since
one could imagine that secret messages are transmitted in this way (the
password is the message) which are protected by  40-bit crypto.
-bsy
Web:http://www-cse.ucsd.edu/users/bsy/
USPS:Dept of Comp Sci and Eng, 0114, UC San Diego, La Jolla, CA 92093-0114
PCT 2.0 does not permit this kind of authentication. Password-based
authentication is only permitted for either the client or the server
(*not* both), in conjunction with a public-key-based key exchange.
Moreover, a password-based authentication response may not be sent
unless the accompanying key exchange either uses the other party's
certified public key or has already been incorporated into the other
party's (certified) digital signature-based authentication response.
(These conditions ensure that only the correct "other party" knows the
master key used in the password-based authentication response.) The
response is essentially a cryptographic hash of the responder's identity
and password, the challenger's (and responder's) challenge, and a (long)
shared MAC key derived from the exchanged master key in the normal way.
A typical application would be improving the security of the type of
password-based client authentication scheme in wide use today: a server
with, say, a certified RSA public key accepting secure
server-authenticated connections from clients, then requesting a
password (or password-based challenge response) over the connection to
authenticate the client. If instead the client authenticated based on a
shared password and the MAC key as described above, even 4-digit
passwords would be secure against offline attacks, and even in
connections using only 40-bit encryption keys (assuming that MAC keys
can be longer). And to the best of my knowledge, there are no export
problems with such a scheme, since the keyed hash does not allow (as far
as I can tell) recovery of the input secret (password), only
verification of its correctness. However, since this method involves
the MAC key, which should not be available to the application
(especially if the protocol implementation is supposed to be
exportable), this type of authentication must be defined at the protocol
level.
The STLP document proposes a very similar password-based authentication
option. I believe it would be a useful feature to have in any protocol
that emanates from this working group.
Daniel Simon
Cryptographer, Microsoft Corp.
dansimon@microsoft.com
From: Dan Simon dansimon@microsoft.com
Date: Thu, 25 Apr 1996 16:19:06 -0700
Thank you for explaining this. Next time I will read the spec more
thoroughly before commenting.
Using passwords in this manner sounds like a useful capability for
the TLS protocol to support.
From: Bennet Yee bsy@cs.ucsd.edu
Date: Wed, 24 Apr 1996 16:03:09 -0700
Yes, client non-transparency is a big disadvantage of negotiating
NULL protection for pre-encrypted data. That is justification enough
for giving the PCT pre-encryption proposal some serious scrutiny.
