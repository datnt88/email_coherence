Len Bullard replying to Alex Milowski:
Simplicity does not always equal functionality.
True but it goes a long way toward first pass
implementation simplicity and as stated, "training wheels"
DTDs. I don't find PEs hard; just rugs for hiding
domain messiness.
I have taken to heart much of what Len has said wrt PEs and complex
DTDs, but I would like to know where in TEI or Docbook this valuable
feature is used to cover over "domain messiness."
However, I like Dan Connolly's suggestion about functionality
beyond "pastie thingies" and think that should be
considered before a final decision about PEs is made.
This may be a very golden opportunity.
Are we still doing SGML? If PEs go away in XML, the need
for SGML DTDs increases without bound. If I need to maintain
my DTD in SGML even when I'm going to output XML, why do I
need an XML DTD? Would it not be simpler to eliminate DTDs
from XML entirely? If some completely new markup language is
to be defined (a legitimate goal), why cling to SGML conformance?
The question "why not eliminate DTDs from XML entirely" is a
serious one, as are all my questions, and I expect a response
to it from the SGML ERB.
Terry Allen Electronic Publishing Consultant tallen[at]sonic.net
Davenport and DocBook: http://www.ora.com/davenport/index.html
T.A. at Passage Systems: terry.allen[at]passage.com
In these DTDs, the parameter entities are correctly applied.
In fact, DTDs at this complexity ARE hard to manage without
them (or their equivalent). Yet they are still just factored
strings. The semantic significance of those string sets
is implied.
That Eve is working very hard on a translation is a sign
of what is next. No quarrel. Good move. My problem with
them is the complexity required to understand, apply, and
implement systems to apply them. Do PEs change that?
These are not the DTDs I expect to see large numbers of
XML apps built around. They are SGML and they are done. :-)
Why do they need PEs? Just for the absurdity of it,
how would you organize those DTDs without them?
There will be more !DOCTYPEs I grant you. It is still SGML.
For what we've always used it for, first, validation.
For what we've always used typed elements for: anything we want.
For what we might use it better for given Dan's suggestion:
I think they should be modelled not as syntactic, token
pasting thingies, but as typed language elements.
I have done some work to embed typed parameter entities
into 8879 syntax. The result is that the types are
syntactically evident, ala hungarian notation.
If a parameter entity were a stronger form of typing,
I'd like it better. Right now they are aggregating
strings. It seems weird to make the parser
(ooops... i used the p word...) do the
job of a pre-processor.
Obstinance? Cussedness?
XML/SGML conformance seems to be the sticking point
in so many discussions. Our problem is we are maintaining
two sets of books for one business and that is always a
difficult problem to negotiate. So far so good.
... "eliminate DTDs altogether"
Where are they used in a family of XML processors?
o Batch validation
o Generator-initialization.
o ?
len
On Wed, 4 Jun 1997 22:21:22 -0400 (EDT) Terry Allen said:
We're still doing SGML as long as I have anything to say about it.
I don't know about you; I need it because I would like to maintain my
documents in XML, rather than maintaining them in Full SGML and
down-translating at publication time. That means I need an XML DTD for
validation, etc., all the things Len mentioned.
If PEs were lost, then XML would become definitively a language for
network publication only, not suitable for the range of other activities
(including document maintenance) that our second design goal seems to me
to cover. That would be a loss not just for those of us who would like
XML to be a useful markup language for work other than publication, but
also for the Web as a whole. If XML is useful for serious work, then
documents can be in XML in their archival form, and publication on the
Web requires nothing more than copying files into the appropriate
directories. If XML were crippled by losing parameter entities (and
external text entities, if some people have their way), then publication
on the Web would continue to require down-translation, as it does now.
That would be a lost opportunity.
Because XML is not that completely new markup language. It is not
SGML++, so to speak, but at most a sort of sgml--. SGML conformance
is important to XML because this work group and editorial review board
have consistently shown that it is important to our constituencies,
both for its own sake and for the sake of the Principle of Least
Surprise.
This is not to be taken as an official response from the ERB.
-C. M. Sperberg-McQueen
Michael responds:
It might be easier to build a reliable SGML XML translation tool,
use only SGML DTDs, produce SGML instances, and filter to XML.
Agreed entirely; I would be inclined to down-translate instance-to-instance.
Understood, but it is a response from an ERB member, and that's all
I ask for. Thanks and good luck.
Best regards,
Terry Allen Electronic Publishing Consultant tallen[at]sonic.net
Davenport and DocBook: http://www.ora.com/davenport/index.html
T.A. at Passage Systems: terry.allen[at]passage.com
Or might it not be better to constrain your DTDs so all conforming documents
are also Well Formed XML? Then you don't need to filter, and you're always in
XML land unless you really need to validate. We've always had the assumption
that validation will be required far less than WF.
If we take this approach we can split the DTD issue into 2 pieces:
1) DTDs for generating and validating documents
2) The DTD subset needed for WF checking and other processing (but also still
sufficient for small, simple DTDs - with training wheels)
There should be a deterministic means to translate 1- 2.
The first kind of DTD is mostly server-side for generating documents. It would
only be transmitted to the client on request. It is not required to conform to
the MGSW (maybe we should say WF in a week, Valid in a fortnight) and can
include all the bells and whistles a DTD designer needs while remaining in the
WF category (i.e, no SHORTREFs). Since we're keeping the XML lexing model
simple, this would still be a lot easier than a full SGML DTD parser.
Obviously document producers have different requirements than consumers.
Does making this distinction help?
Matthew Fuchs
matt@wdi.disney.com
Top marks! Good Matthew. One view is that
we deal with documents for which validity is established once and
is always true. Another are that we see an instance in process and
realize
that the emitters and consumers of that instance are modifying it and
that they transform by a set of rules err,,, styles..err.. processes.
That I guess, is why the spec calls them XML processors. "-)
WFness and validity are just states of the instance. It can be
both and not. It depends on what the processor needs it to be.
Some stupid questions:
What are the implications of transforms to namespaces?
Does the instance have a namespace?
If an instance is transformed, is it a new namespace, is it
in a new namespace, does the transform affect the namespace?
Looking at Rick's proposal to chain the notations, does
that chain a set of documents which prescribe the notation,
or the handlers required on the system to process the
notation? Yes, they are just identifiers. What do they identify?
len
