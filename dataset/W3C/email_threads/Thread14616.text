Here's my very tardy action item on browser characteristics. I hope it will
help in our discussion of user agent capabilities on Thursday's call.
I think WCAG 1.0 implies that all browsers support the following
Rendering of HTML 2.0 or greater
Link following via http GET
links in the http:// and mailto: formats
img and alt
Form submission via http GET and http POST
We've assumed that all these features are present, yet some early browsers
did not support forms or mailto. Remember when HTML authoring guides used
to admonish authors to put an email link on all forms? And, just in case
they also didn't support mailto, to put a cut-and-paste-able email address
on there too?
There are no guidelines about this in WCAG 1.0, so we've obviously drawn a
line about backward compatibility.
A fair bit of time has passed since WCAG 1.0 was created, and it may be time
to move that line. I offer for your consideration two features that are
widely supported in mainstream browsers. I am limiting this to HTML
browsers, not WAP phones, as a believe that WAP/WML and HTML will always be
separate final-format renderings created from some single data source.
1.)
Some form of scripting. It would be very useful to be able to offer
techniques for making scripts directly accessible. Yet, WCAG 1.0 says that
you shouldn't do anything in script that you can't also do in noscript tag.
This rules out a lot of useful features, so of which may even make a page
more accessible to a user with a browser and accessibility aid that support
it. There are browsers for all major platforms (including Windows CE
handheld devices) that support these forms of scripting.
Here's one possible way to define minimal script support:
*ECMAscript (standards-based javascript)
*some level of Document Object Model accessible by script (maybe the
intersection of script supported by netscape 3 and the DOM level-1 spec?)
*links in the javascript: format
2.)
tables, including nesting. Note that this does not remove the requirement
that tables linearize well for voice rendering. It just moves the onus to
the assistive technology instead of the author.
On a somewhat related topic, we should spend some time considering what to
do about accessibility features that have been implemented in some browsers
and not others. For example, IE 5 has implemented tabindex, accesskey,
label, and other accessibility features that degrade gracefully on other
browsers. It would be nice to see some techniques that say "use this spiffy
new feature" instead of "don't use this crumby old feature".
We don't ask anyone to put their email address on a site because of spam. If
you do that you can get 100's of emails a day.
Behalf Of Cynthia Shelly
Here's my very tardy action item on browser characteristics. I hope it will
help in our discussion of user agent capabilities on Thursday's call.
I think WCAG 1.0 implies that all browsers support the following
Rendering of HTML 2.0 or greater
Link following via http GET
links in the http:// and mailto: formats
Remember when HTML authoring guides used
to admonish authors to put an email link on all forms? And, just in case
they also didn't support mailto, to put a cut-and-paste-able email address
on there too?
Thank you Cynthia for a "breath of light".
Let us now praise discussing resolutions.
She actually proposed something concrete and the resolutions are: some form
of scripting; tables, including nesting; accessibility features that have
been implemented in some browsers;
I think all three proposals have a lot of merit. There may be others that
would move the "line of backward compatability" forward a bit, for
instance, Java enablement and security/signature/forms stuff. A "feature
comparison"with the UAG might prove useful. Of course the devil in details
and the wordsmithing of all this will be a big effort but perhaps this more
generalized way of looking at any other possibly unspoken assumptions about
what a browser must accomplish would help us resolve the "until" part of
the user agent equation.
The clearest "forward compatability" issues IMO are CSS, SVG, and XML (in
all its flavors). There are already full-blown documents on their
"accessibility-enhancing features" so we will decide just how strong our
espousal of these *inevitabilities* should be. Polish the crystal balls and
keep in mind the time line of getting WCAG 2.0 to recommendation (minimum
of 2 Webyears) and the "when" of widespread use of CSS (already a huge
start done) and vector graphics (Flash, anyone?).
Love.
ACCESSIBILITY IS RIGHT - NOT PRIVILEGE
Hmm. The WAP forum sstates publibcly that they expect the next version of WML
to be more or less the same as XHTML basic.
I would like us to be able to use tables. I think we need to heavily push the
use of assistive technologies such as tablin, in order to make this
reasonable. I propose that the issue of who tracks that go to the
coordination group.
I agree that scripting would be very valuable. We need to determine still
whether there is scripting support realisitically available. In particular, I
have come across a lot of people using script-capable software but turning
off the scripting becuase it interferes with their assistive technology, or
because the operation of scripts is too disorienting. I am still hopeful that
by the time these guidelines become a Recommendation this will have changed.
I still believe that it is important that a solution is more or less freely
available - particularly for countries where the cost of a computer is in
fact higher than the cost of expertise to make it work. (In the USA, the cost
of a computer is a small fraction of the cost of that expertise. In Vietnam,
the cost of the expertise is a small fraction of the cost of the computer.
And as a result of recent history there are a lot of people with disabilities
in Vietnam.)
cheers
Charles
Here's my very tardy action item on browser characteristics. I hope it will
help in our discussion of user agent capabilities on Thursday's call.
I think WCAG 1.0 implies that all browsers support the following
Rendering of HTML 2.0 or greater
Link following via http GET
links in the http:// and mailto: formats
img and alt
Form submission via http GET and http POST
We've assumed that all these features are present, yet some early browsers
did not support forms or mailto. Remember when HTML authoring guides used
to admonish authors to put an email link on all forms? And, just in case
they also didn't support mailto, to put a cut-and-paste-able email address
on there too?
There are no guidelines about this in WCAG 1.0, so we've obviously drawn a
line about backward compatibility.
A fair bit of time has passed since WCAG 1.0 was created, and it may be time
to move that line. I offer for your consideration two features that are
widely supported in mainstream browsers. I am limiting this to HTML
browsers, not WAP phones, as a believe that WAP/WML and HTML will always be
separate final-format renderings created from some single data source.
1.)
Some form of scripting. It would be very useful to be able to offer
techniques for making scripts directly accessible. Yet, WCAG 1.0 says that
you shouldn't do anything in script that you can't also do in noscript tag.
This rules out a lot of useful features, so of which may even make a page
more accessible to a user with a browser and accessibility aid that support
it. There are browsers for all major platforms (including Windows CE
handheld devices) that support these forms of scripting.
Here's one possible way to define minimal script support:
*ECMAscript (standards-based javascript)
*some level of Document Object Model accessible by script (maybe the
intersection of script supported by netscape 3 and the DOM level-1 spec?)
*links in the javascript: format
2.)
tables, including nesting. Note that this does not remove the requirement
that tables linearize well for voice rendering. It just moves the onus to
the assistive technology instead of the author.
On a somewhat related topic, we should spend some time considering what to
do about accessibility features that have been implemented in some browsers
and not others. For example, IE 5 has implemented tabindex, accesskey,
label, and other accessibility features that degrade gracefully on other
browsers. It would be nice to see some techniques that say "use this spiffy
new feature" instead of "don't use this crumby old feature".
W3C Web Accessibility Initiative http://www.w3.org/WAI
Location: I-cubed, 110 Victoria Street, Carlton VIC 3053, Australia
September - November 2000:
W3C INRIA, 2004 Route des Lucioles, BP 93, 06902 Sophia Antipolis Cedex, France
