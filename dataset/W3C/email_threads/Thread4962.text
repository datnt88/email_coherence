I do not understand the rationale for the numeric datatypes permitted
for a basic processor. Could someone explain, please?
My thoughts are on the following lines:
The programmer ought to have the choice between accuracry and speed of
operation.
The former is represented by xs:decimal and xs:integer.
The latter by - well what?
I would have said xs:int and xs:float.
Colin Paul Adams
Preston Lancashire
Thanks for the comment. The public comment period has closed but we'll still
add this to the agenda if we can find time for it.
However: a personal response:
(a) I think there are likely to be very few stylesheets whose performance
will benefit noticeably from using 32-bit rather than 64-bit arithmetic. If
you're going to trade correctness of output for speed of output, you need a
very clear view of how much performance you think you can gain by it.
(b) xs:integer and xs:decimal are types for which there are numeric literals
defined in the XPath syntax. Also, note that the result of adding two xs:int
values is an xs:integer value. They are therefore pretty fundamental. (Of
course, an xs:int is an xs:integer, so it's valid for an implementation to
return an xs:int as the result of 2+2. But it's not valid to give the wrong
answer if the result of the addition exceeds 32 bits.)
Michael Kay
# From: public-qt-comments-request@w3.org
# [mailto:public-qt-comments-request@w3.org] On Behalf Of Colin
# Paul Adams
# Sent: 18 March 2004 06:21
# Subject: [XSLT 2.0] Data types for a Basic XSLT processor
# I do not understand the rationale for the numeric datatypes
# permitted for a basic processor. Could someone explain, please?
# My thoughts are on the following lines:
# The programmer ought to have the choice between accuracry and
# speed of operation.
# The former is represented by xs:decimal and xs:integer.
# The latter by - well what?
# I would have said xs:int and xs:float.
# Colin Paul Adams
# Preston Lancashire
MK (a) I think there are likely to be very few stylesheets whose
MK performance will benefit noticeably from using 32-bit rather
MK than 64-bit arithmetic. If you're going to trade correctness
MK of output for speed of output, you need a very clear view of
MK how much performance you think you can gain by it.
But xs:decimal and xs:integer are NOT hardware types, limited to
64-bits of precision. At least, that's how I understand XML
Schema. I read them as being arbitrary precision numbers and integers
(with a cop-out clause).
My point was, why include xs:double (rather than xs:float - presumably
faster), and not include a hardware integer type?
Colin Paul Adams
Preston Lancashire
It's possible to implement xs:integer using 64-bit hardware arithmetic, I
believe*. It's certainly possible to implement it so that it uses hardware
arithmetic when the numbers are small enough. I've no idea about xs:decimal
- I grew up with machines that did decimal arithmetic in hardware, but I
suspect that's gone out of fashion? As for float and double, surely 32-bit
floating point is a complete anachronism? 20 years ago I was using
mainframes - a thousand times slower than my laptop today - that only
offered 64-bit and 128-bit floating point in the hardware, and emulated
32-bit float in software.
But this is aside from the point. I don't believe that numeric arithmetic
accounts for a sufficiently high proportion of XSLT execution costs for this
to be a real concern.
Michael Kay
* (Schema Part 2): "All .minimally conforming. processors .must. support
decimal [and hence integer] numbers with a minimum of 18 decimal digits
(i.e., with a .totalDigits. of 18)". 64 bits is enough to meet this
requirement. I think the word "minimum" here is meaningless, and best
ignored.
# From: Colin Paul Adams [mailto:colin@colina.demon.co.uk]
# Sent: 18 March 2004 11:36
# Subject: Re: [XSLT 2.0] Data types for a Basic XSLT processor
# MK (a) I think there are likely to be very few stylesheets whose
# MK performance will benefit noticeably from using 32-bit rather
# MK than 64-bit arithmetic. If you're going to trade correctness
# MK of output for speed of output, you need a very clear view of
# MK how much performance you think you can gain by it.
# But xs:decimal and xs:integer are NOT hardware types, limited
# to 64-bits of precision. At least, that's how I understand
# XML Schema. I read them as being arbitrary precision numbers
# and integers (with a cop-out clause).
# My point was, why include xs:double (rather than xs:float -
# presumably faster), and not include a hardware integer type?
# Colin Paul Adams
# Preston Lancashire
MK It's possible to implement xs:integer using 64-bit hardware
MK arithmetic, I believe*. It's certainly possible to implement
MK it so that it uses hardware arithmetic when the numbers are
MK small enough. I've no idea about xs:decimal - I grew up with
MK machines that did decimal arithmetic in hardware, but I
MK suspect that's gone out of fashion? As for float and double,
MK surely 32-bit floating point is a complete anachronism? 20
Then why is it in XML Schema part 2?
MK But this is aside from the point. I don't believe that numeric
MK arithmetic accounts for a sufficiently high proportion of XSLT
MK execution costs for this to be a real concern.
Then why include xs:double? Pointless.
MK 18)". 64 bits is enough to meet this requirement. I think the
MK word "minimum" here is meaningless, and best ignored.
I don't think so. I think it means you should implement arbitrary
precision if you can.
Colin Paul Adams
Preston Lancashire
Colin,
The floating point types in XML Schema part 2 are aligned with, conformant
to, and based on, IEEE 754. They were not designed out of whole cloth.
Er, ah, for better precision? Because of compatibility with XPath 1.0?
I disagree (and I attend the Schema meetings, so I have spent at least a
few cycles thinking about this). "minimum...of 18 digits" can very readily
be interpreted to mean "use 64 bits if your hardware encourages that, use
96 is your hardware prefers that, use 128 if your hardware likes that". I
do not believe that the intent was "you must use a decimal notation
internally and you really ought to implement millions of digits of
precision". On the other hand, any implementation that chooses that latter
interpretation would *also* be conforming.
Hope this helps,
Jim
= Facts are facts. However, any opinions expressed are the opinions =
= only of myself and may or may not reflect the opinions of anybody =
= else with whom I may or may not have discussed the issues at hand. =
Thanks jim and Mike,
I understand it now.
Colin Paul Adams
Preston Lancashire
