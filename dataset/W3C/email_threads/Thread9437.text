There are some serious bugs in the RDFS closure table in section 6 of
the MT WP. See a recent message from Peter Patel-Schneider and my
reply, on rdf-logic
I will try to get the bugs out and produce a revision as soon as
possible (couple of days). Along the way I will also fix all the
little typos and add a wee bit of explanatory prose here and there to
prevent the misinterpretations that seem to have been produced.
One matter that I would like some feedback on is, what to do about
rdf:type rdfs:Literal. Since it is syntactically illegal in RDF to
write
xxx rdf:type rdfs:Literal .
when xxx is a literal, and since this is false in RDFS if xxx does
not denote a literal value, there would seem to be little utility in
having rdfs:Literal in the language at all, since it is impossible to
say anything true about it other than things like
rdfs:Literal rdf:type rdfs:Class .
which have it in subject position. So I decided to simply ignore it.
However, I didn't actually say that it was being ignored, so Peter
was right to slap my wrist about this.
I am inclined to simply avoid this issue right now by explicitly
stating in section 6 that the RDFS analysis simply excludes all
mention of rdfs:Literal, with a brief explanation of why and
suggestion that this will be revisited in future work. If nobody
objects strongly to this way of getting out of this problem, I will
circulate a draft wording soon.
....Sorry ....
Pat
IHMC(850)434 8903 home
40 South Alcaniz St.(850)202 4416 office
phayes@ai.uwf.edu
Well, I'm late with the RDFS tidyup draft for the WG, so as pennance I'll
try to do better to sync it with the MT doc, now that there is a MT W3C
Tech Report it can cite.
Nice work BTW, regardless of bugs.
Dan
Some random thoughts...
(a) it seems that if literals are not to be treated as resources, then
rdfs:Literal has no place in the language. But the concept that would be
represented by ICEXT(I(rdfs:Literal)) still has a place in the model theory
- you call it LV, right?
(b) suppose we were to introduce a new property, say rdf:hasInstance, used
to define in ICEXT in a similar way as rdf:type but swapping the positions;
i.e.
ICEXT(x) = {y | x,y is in IEXT(I(rdf:hasInstance)) }
might we not legally say:
rdfs:Literal rdf:hasInstance xxx . ??
Further, if x and y are both resources we can define an equivalence between
x,y is in IEXT(I(rdf:hasInstance)) == y,x is in IEXT(I(rdf:type))
It seems to me that the property rdf:hasInstance is much better matched to
the RDF language (that rdf:type), because its rdfs:domain is an rdfs:Class,
which is an rdfs:Resource, which is always syntactically valid as the
subject of an RDF statement.
(I'm hesitant to suggest we actually do this, just trying to point out that
there might be a reasonable way of using rdfs:Literal in the language.)
I've no objection. Thinking about this has suggested to me that literals
should ultimately be resources, and (something whose interpretation is in
LV) should be allowed in the subject position of an RDF statement. It
seems a few "gotchas" in the MT were caused by irregularity at this
point. But for the time being, I see the goal is to nail our colours
firmly to the fence and remain agnostic on this point.
#g
Graham Klyne MIMEsweeper Group
Strategic Research http://www.mimesweeper.com
Hi Graham, thanks for the feedback. I concur on all points. A quick
remark on rdf:Instance; while one could introduce it, there would of
course be no way to make sure that it was the inverse of rdf:type on
literals.... Also, I think its not quite right to say that
rdfs:Literal has *no* role, since we can legally assert that some URI
has a literal value, and that might, I guess, be a useful piece of
information. But its a pretty small role, for sure.
Pat
IHMC(850)434 8903 home
40 South Alcaniz St.(850)202 4416 office
phayes@ai.uwf.edu
Pat,
yes, we also tried to do some testing
and for the moment we have the following triples
(which are true in any RDFS interpretation)
rdfs:Resource a rdfs:Class .
rdfs:domain a rdfs:ConstraintResource .
rdfs:range a rdfs:ConstraintResource .
rdf:type rdfs:domain rdfs:Resource .
rdf:type rdfs:range rdfs:Class .
rdfs:subClassOf rdfs:domain rdfs:Class .
rdfs:subClassOf rdfs:range rdfs:Class .
rdfs:subPropertyOf rdfs:domain rdfs:Property .
rdfs:subPropertyOf rdfs:range rdfs:Property .
rdfs:domain rdfs:domain rdf:Property .
rdfs:domain rdfs:range rdfs:Class .
rdfs:range rdfs:domain rdf:Property .
rdfs:range rdfs:range rdfs:Class .
plus the MT rules except 3a, 3b, 7, 9a and 9b
i'm not sure about
rdf:type rdfs:domain rdfs:Resource .
which would also have lead to rule 7a and 7b
we now have that the schema-closure of the graph
consisting of the single triplet
:foo :bar :baz .
is
:foo a rdfs:Resource .
:foo :bar :baz .
:bar a rdfs:Resource .
:bar a rdf:Property .
:baz a rdfs:Resource .
rdf:type a rdfs:Resource .
rdf:type a rdf:Property .
rdf:type rdfs:domain rdfs:Resource .
rdf:type rdfs:range rdfs:Class .
rdfs:Resource a rdfs:Class .
rdfs:Resource a rdfs:Resource .
rdf:Property a rdfs:Resource .
rdf:Property a rdfs:Class .
rdf:Property rdfs:subClassOf rdfs:Resource .
rdfs:Class a rdfs:Resource .
rdfs:Class a rdfs:Class .
rdfs:domain a rdfs:ConstraintResource .
rdfs:domain a rdfs:Resource .
rdfs:domain a rdf:Property .
rdfs:domain rdfs:domain rdf:Property .
rdfs:domain rdfs:range rdfs:Class .
rdfs:range a rdfs:ConstraintResource .
rdfs:range a rdfs:Resource .
rdfs:range a rdf:Property .
rdfs:range rdfs:domain rdf:Property .
rdfs:range rdfs:range rdfs:Class .
rdfs:subClassOf a rdfs:Resource .
rdfs:subClassOf a rdf:Property .
rdfs:subClassOf rdfs:domain rdfs:Class .
rdfs:subClassOf rdfs:range rdfs:Class .
rdfs:subPropertyOf a rdfs:Resource .
rdfs:subPropertyOf a rdf:Property .
rdfs:subPropertyOf rdfs:domain rdfs:Property .
rdfs:subPropertyOf rdfs:range rdfs:Property .
(as you know, we have proven that entailment
using some set of N3 rules and we have assumed
that literals are resources, but I won't touch
that subject now, because I feel some fever)
Jos De Roo
Sorry about your fever, but what is 'a' here??
Pat
IHMC(850)434 8903 home
40 South Alcaniz St.(850)202 4416 office
phayes@ai.uwf.edu
short for rdf:type
Dan Connolly, W3C http://www.w3.org/People/Connolly/
[sorry, we had some errors]
Pat,
yes, we also tried to do some testing
and for the moment we have the following triples
(which are true in any RDFS interpretation)
rdfs:Resource a rdfs:Class .
rdfs:domain a rdfs:ConstraintResource .
rdfs:range a rdfs:ConstraintResource .
rdf:type rdfs:domain rdfs:Resource .
rdf:type rdfs:range rdfs:Class .
rdfs:subClassOf rdfs:domain rdfs:Class .
rdfs:subClassOf rdfs:range rdfs:Class .
rdfs:subPropertyOf rdfs:domain rdf:Property .
rdfs:subPropertyOf rdfs:range rdf:Property .
rdfs:domain rdfs:domain rdf:Property .
rdfs:domain rdfs:range rdfs:Class .
rdfs:range rdfs:domain rdf:Property .
rdfs:range rdfs:range rdfs:Class .
rdfs:ConstraintProperty rdfs:subClassOf rdf:Property .
plus the MT rules except 3a, 3b, 7, 9a and 9b
i'm not sure about
rdf:type rdfs:domain rdfs:Resource .
which would also have lead to rule 7a and 7b
we now have that the schema-closure of the graph
consisting of the single triplet
:foo :bar :baz .
is
:foo :bar :baz .
:foo a rdfs:Resource .
:bar a rdf:Property .
:bar a rdfs:Resource .
:baz a rdfs:Resource .
rdfs:Resource a rdfs:Class .
rdfs:Resource a rdfs:Resource .
rdf:Property a rdfs:Class .
rdf:Property a rdfs:Resource .
rdf:Property rdfs:subClassOf rdfs:Resource .
rdfs:Class a rdfs:Class .
rdfs:Class a rdfs:Resource .
rdfs:Class rdfs:subClassOf rdfs:Resource .
rdfs:ConstraintResource a rdfs:Class .
rdfs:ConstraintResource a rdfs:Resource .
rdfs:ConstraintResource rdfs:subClassOf rdfs:Resource .
rdfs:ConstraintProperty a rdfs:Class .
rdfs:ConstraintProperty a rdfs:Resource .
rdfs:ConstraintProperty rdfs:subClassOf rdf:Property .
rdfs:ConstraintProperty rdfs:subClassOf rdfs:Resource .
rdf:type a rdf:Property .
rdf:type a rdfs:Resource .
rdf:type rdfs:domain rdfs:Resource .
rdf:type rdfs:range rdfs:Class .
rdfs:domain a rdfs:ConstraintResource .
rdfs:domain a rdf:Property .
rdfs:domain a rdfs:Resource .
rdfs:domain rdfs:domain rdf:Property .
rdfs:domain rdfs:range rdfs:Class .
rdfs:range a rdfs:ConstraintResource .
rdfs:range a rdf:Property .
rdfs:range a rdfs:Resource .
rdfs:range rdfs:domain rdf:Property .
rdfs:range rdfs:range rdfs:Class .
rdfs:subClassOf a rdf:Property .
rdfs:subClassOf a rdfs:Resource .
rdfs:subClassOf rdfs:domain rdfs:Class .
rdfs:subClassOf rdfs:range rdfs:Class .
rdfs:subPropertyOf a rdf:Property .
rdfs:subPropertyOf a rdfs:Resource .
rdfs:subPropertyOf rdfs:domain rdf:Property .
rdfs:subPropertyOf rdfs:range rdf:Property .
i.e.
C:\euler jview Euler rdfsrules.n3 rdfsfacts.n3 rdfsquery.n3
# Generated with http://www.agfa.com/w3c/euler/#27.087 on Fri Sep 28 01:53:12 GM
T+02:00 2001
# for query file:/euler/rdfsquery.n3
# given [file:/euler/rdfsrules.n3, file:/euler/rdfsfacts.n3]
@prefix log: http://www.w3.org/2000/10/swap/log# .
@prefix rdfs: http://www.w3.org/2000/01/rdf-schema# .
@prefix once: file:/euler/rdfsquery.n3# .
@prefix : file:/euler/rdfsrules# .
@prefix rdf: http://www.w3.org/1999/02/22-rdf-syntax-ns# .
:foo :bar :baz.
:foo a rdfs:Resource.
:bar a rdf:Property.
:bar a rdfs:Resource.
:baz a rdfs:Resource.
rdfs:Resource a rdfs:Class.
rdfs:Resource a rdfs:Resource.
{:RULE5 a rdfs:Resource.
rdfs:subClassOf rdfs:domain rdfs:Class.
{:RULE8 a rdfs:Resource.
{:RULE6 a rdfs:Resource.
rdf:type rdfs:range rdfs:Class.
{:RULE5 a rdfs:Resource.
rdfs:domain rdfs:domain rdf:Property.
rdf:type rdfs:domain rdfs:Resource} log:implies
{rdf:type rdf:type rdf:Property}} log:implies
{rdf:Property a rdfs:Class}} log:implies
{rdf:Property rdfs:subClassOf rdfs:Resource}} log:implies
{rdf:Property a rdfs:Class}.
rdf:Property a rdfs:Resource.
{:RULE8 a rdfs:Resource.
{:RULE6 a rdfs:Resource.
rdf:type rdfs:range rdfs:Class.
{:RULE5 a rdfs:Resource.
rdfs:domain rdfs:domain rdf:Property.
rdf:type rdfs:domain rdfs:Resource} log:implies
{rdf:type rdf:type rdf:Property}} log:implies
{rdf:Property a rdfs:Class}} log:implies
{rdf:Property rdfs:subClassOf rdfs:Resource}.
{:RULE5 a rdfs:Resource.
rdfs:subClassOf rdfs:domain rdfs:Class.
{:RULE8 a rdfs:Resource.
{:RULE6 a rdfs:Resource.
rdf:type rdfs:range rdfs:Class.
rdfs:Resource rdf:type rdfs:Class} log:implies
{rdfs:Class a rdfs:Class}} log:implies
{rdfs:Class rdfs:subClassOf rdfs:Resource}} log:implies
{rdfs:Class a rdfs:Class}.
rdfs:Class a rdfs:Resource.
{:RULE8 a rdfs:Resource.
{:RULE6 a rdfs:Resource.
rdf:type rdfs:range rdfs:Class.
rdfs:Resource rdf:type rdfs:Class} log:implies
{rdfs:Class a rdfs:Class}} log:implies
{rdfs:Class rdfs:subClassOf rdfs:Resource}.
{:RULE5 a rdfs:Resource.
rdfs:subClassOf rdfs:domain rdfs:Class.
{:RULE8 a rdfs:Resource.
{:RULE6 a rdfs:Resource.
rdf:type rdfs:range rdfs:Class.
rdfs:domain rdf:type rdfs:ConstraintResource} log:implies
{rdfs:ConstraintResource a rdfs:Class}} log:implies
{rdfs:ConstraintResource rdfs:subClassOf rdfs:Resource}} log:implies
{rdfs:ConstraintResource a rdfs:Class}.
rdfs:ConstraintResource a rdfs:Resource.
{:RULE8 a rdfs:Resource.
{:RULE6 a rdfs:Resource.
rdf:type rdfs:range rdfs:Class.
rdfs:domain rdf:type rdfs:ConstraintResource} log:implies
{rdfs:ConstraintResource a rdfs:Class}} log:implies
{rdfs:ConstraintResource rdfs:subClassOf rdfs:Resource}.
{:RULE5 a rdfs:Resource.
rdfs:subClassOf rdfs:domain rdfs:Class.
rdfs:ConstraintProperty rdfs:subClassOf rdf:Property} log:implies
{rdfs:ConstraintProperty a rdfs:Class}.
rdfs:ConstraintProperty a rdfs:Resource.
rdfs:ConstraintProperty rdfs:subClassOf rdf:Property.
{:RULE8 a rdfs:Resource.
{:RULE5 a rdfs:Resource.
rdfs:subClassOf rdfs:domain rdfs:Class.
rdfs:ConstraintProperty rdfs:subClassOf rdf:Property} log:implies
{rdfs:ConstraintProperty a rdfs:Class}} log:implies
{rdfs:ConstraintProperty rdfs:subClassOf rdfs:Resource}.
rdf:type a rdf:Property.
rdf:type a rdfs:Resource.
rdf:type rdfs:domain rdfs:Resource.
rdf:type rdfs:range rdfs:Class.
rdfs:domain a rdfs:ConstraintResource.
rdfs:domain a rdf:Property.
rdfs:domain a rdfs:Resource.
rdfs:domain rdfs:domain rdf:Property.
rdfs:domain rdfs:range rdfs:Class.
rdfs:range a rdfs:ConstraintResource.
rdfs:range a rdf:Property.
rdfs:range a rdfs:Resource.
rdfs:range rdfs:domain rdf:Property.
rdfs:range rdfs:range rdfs:Class.
rdfs:subClassOf a rdf:Property.
rdfs:subClassOf a rdfs:Resource.
rdfs:subClassOf rdfs:domain rdfs:Class.
rdfs:subClassOf rdfs:range rdfs:Class.
rdfs:subPropertyOf a rdf:Property.
rdfs:subPropertyOf a rdfs:Resource.
rdfs:subPropertyOf rdfs:domain rdf:Property.
rdfs:subPropertyOf rdfs:range rdf:Property.
# Proof found for file:/euler/rdfsquery.n3 in 292 steps (16045 steps/sec)
(the 1a, 1b and 1c rules are not shown unfortunately)
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/
