It would appear that folks are biting at the bit to discuss untyped literal
semantics. As this is a topic that arouses some passions, I'd like to
suggest some guidelines for how we conduct it.
My first suggestion is that we use rdf/xml syntax throughout. The issue is
not really what:
a b "foo" .
means. As Pat has recently shown, we can create new constructions in
n-triples more or less at will. That still leaves the question of what does
the following rdf/xml translate to in terms of n-triples.
I suggest the issues here arise in RDF/XML, for example in CC/PP and DC and
what will be readily understood by our community of rdf/xml users.
Secondly, I suggest we aim to decide, one way or the other. As some folks
have recently pointed out there may be the possibility of ducking the
question. My motivation in getting involved in this WG was a desire to
make the current specs more clear and precise. I suggest it would be
better to decide if we possibly can. Only if we cannot, should we duck the
question.
Third, I suggest we are choosing between one of three options:
o untyped literals are self denoting
o untyped literals denote a value from the value space of some datatype
o we can't decide
Please can we couch any discussion in terms of advantages and disadvantages
of these choices. As this is an issue which can ascend to the
philosophical, I suggest we give greater weight to pragmatic concerns.
Finally, I suggest we guillotine the discussion. The decision will be made
at the telcon of 20th Sept unless a consensus emerges before then.
Brian
I believe there is another disjunct decision that the WG should make, as suggested
by Jeremy, which would insulate most of the documents which must deal
with the concrete and abstract syntax from the above decision; and that
is to make inline literals syntactically (not semantically) untidy in the abstract
syntax (and NTriples), and assign to them a unique systemID such as used to
name bnodes.
Thus
would be represented in the abstract syntax as
Jenny age (_:x, "10") .
Adopting this form of syntactically untidy representation for non-typed
literals will also facilitate developers who opt for untidy semantics, even if
we opt to not decide ourselves on the semantics of non-typed literals.
Note that making untyped literals syntactically untidy does not force
any application from using an internally tidy representation in the interests
of efficiency, etc.
I would like to see this addressed by the WG before or in parallel to the
separate and important issue of semantics and, if so adopted, reflected in the
editorial changes being made to reflect Part 1 of the restructured
datatyping specification in the various documents.
Regards,
Patrick
literal
my understanding of "untyped" is "no type"
which is not the same as "unknown type"
is
does
I would say
:jenny foo:age "10" .
i.e. no type
whereas e.g.
would be
:jenny foo:age _:t"10" .
i.e. unknown type
Jos De Roo, AGFA http://www.agfa.com/w3c/jdroo/
[Patrick Stickler, Nokia/Finland, (+358 50) 483 9453, patrick.stickler@nokia.com]
Well, per Jeremy's proposal for untidy syntax, irrespective of
the semantics, we'd always have
:jenny foo:age _:t"10" .
and then decide in the MT whether _:t denotes an unknown datatype
or is simply a syntactic mechanism preserving the uniqueness of
the occurrence of the literal. The abstract syntax would be the
same in either case.
If we opt for tidy semantics, then we simply say that for any
non-explicitly-typed literal node, its interpretation
is that it denotes the literal
I(xxx"LLL") = "LLL"
If we opt for untidy semantics, then we say that the systemID
denotes some datatype, and rely on mechanisms such as rdfs:range
to clarify which datatype it is
I(xxx"LLL") = L2V(I(xxx))("LLL")
Taking the above approach, having a single consistent concrete
and abstract syntax for either tidy or untidy intepretation, allows
all of the documents but the MT to be completed without later impact
by any decision made about semantics, which simply can be addressed
in the MT document as required. And if we choose not to decide
about the semantics, it allows applications to augment the RDF MT
accordingly to adopt either tidy or untidy interpretation without
having to introduce any changes on the syntax.
Patrick
