1) HTTP 1.0 script is written which expect to get GETs.
2) HTTP 1.0 resource is programmed to redirect with a 301/302 to the
HTTP/1.0 script
3) Server is upgraded to HTTP/1.1 but the HTTP 1.0 resource and the HTTP
1.0 script are not upgraded.
4) HTTP/1.1 browser comes along and sends a POST to the HTTP 1.0
resource and receives a 301/302. HTTP/1.1 browser sends a POST to the
HTTP 1.0 script. The HTTP 1.0 script gets completely confused because it
was expecting a GET and the user never sees the proper data.
My suggestion is, as horrible as this is going to sound, that we change
the definition of 301/302 to redirect to GET and make 303/304 be
redirect, permanently or temporarily, with the same method. We can't
force the whole world to rewrite all their scripts and our users aren't
going to accept "Well gee, you know, the script is doing the wrong
thing, it should send a 303 not a 301/302."
Yaron
Scripts are deployed and they are not going to get re-written.
Servers have no mechanism for determining if a script is 1.0 or 1.1 and
even if they did, they do not have facilities for taken any special
action in that case.
As such clients which want to work against the majority of redirected
resources, almost all of whom have upgraded to the new Apache servers
and thus are declaring themselves 1.1, will be forced to treat 301/302
as redirect to GET.
Lets accept the need for backwards compatibility and make it easy for
people to upgrade to 1.1. 301/302 have been taken over, we can't undo
that. So lets mark them as "deprecated - backwards compatibility" and
move on with new numbers.
Yaron
From:Larry Masinter [SMTP:masinter@parc.xerox.com]
Sent:Tuesday, July 29, 1997 1:36 AM
Subject:Re: 301/302
A server could distinguish between old HTTP/1.0 scripts
and new HTTP/1.1 ones, and either rewrite the response
or change the version number, or support another URL that
the redirected POST would redirect to, or change the version
of the response...
Even though it's awkward to do any of these things
doesn't mean that it's wrong.
Larry
Which is, of course, a deficiency in CGI (and related) specs. If anyone
ever gets around to sorting them out, they really ought to have a
version number somewhere in the conversation between server and script.
Cheers,
Ben.
ben@algroup.co.uk
Technical Director URL: http://www.algroup.co.uk/Apache-SSL
A.L. Digital Ltd, Apache Group member (http://www.apache.org)
London, England. Apache-SSL author
Why, you could have different configuration directives, so that
.cgi files would be HTTP/1.0 and .cgi11 files would be HTTP/1.1,
or .asp would be HTTP/1.0 and .asq would be HTTP/1.1, etc.
It's easy for servers to have a mechanism for determining if
a script is 1.0 or 1.1.
Larry
True, and we could have decided that there was no point in having
version numbers in HTTP, because we could just have a naming covention
for servers, www.* == HTTP/0.9, www10.* == HTTP/1.0, www11.* ==
HTTP/1.1.
It may work, but its junk.
Cheers,
Ben.
ben@algroup.co.uk
Technical Director URL: http://www.algroup.co.uk/Apache-SSL
A.L. Digital Ltd, Apache Group member (http://www.apache.org)
London, England. Apache-SSL author
there are many more elegant ways to distinguish between
old and new versions of user-written scripts, too, but
my point was to counter the claim that it was _impossible_,
not to invent an elegant possibility.
In general, if there are going to be any changes are
bug fixes, we have to deal with scripts that were written
against older specs. There are ".asis" CERN server scripts
that attempt to emit not just the body and a few directives
but the entire HTTP response. Clearly, if those scripts
are not rewritten but aren't conformant, they can't be
called HTTP. So at some point you _must_ distinguish scripts
(and servers) by their version, and either label older
scripts as "not HTTP/1.x" or else patch up their output.
Larry
Fair enough, though I don't think I made the claim that it was
impossible, merely that CGI was broken because we have to invent
something outside it to deal with the problem.
Surely if one never changes the semantics of existing headers it is not
necessary to know which version is being used?
Cheers,
Ben.
ben@algroup.co.uk
Technical Director URL: http://www.algroup.co.uk/Apache-SSL
A.L. Digital Ltd, Apache Group member (http://www.apache.org)
London, England. Apache-SSL author
No; we may not change the semantics of headers, but we're changing
the requirements for what it means to be 1.1 compliant, vs. 1.0.
If you don't know that you're 1.1 compliant -- that your script
satisfies all of the requirements that are MUST for 1.1, then you
need to label the response as 1.0.
OK. It still seems to me that the correct thing to do is to fix CGI. A
simple thing to do would be to add a version header:
CGI-Version: 1.1
Absence of the header means the script is 1.0 compliant. This is not an
HTTP header - the server would strip it, I assume, and doctor other
headers as needed.
Cheers,
Ben.
ben@algroup.co.uk
Technical Director URL: http://www.algroup.co.uk/Apache-SSL
A.L. Digital Ltd, Apache Group member (http://www.apache.org)
London, England. Apache-SSL author
The current (widely deployed) version of CGI is called version 1.1.
This has nothing to do with HTTP versions. Thus something other
than "CGI-Version: 1.1" would be advisable to avoid confusion.
John Franks Dept of Math. Northwestern University
john@math.nwu.edu
Sorry - I realised that as I was hitting send... I'd suggest
CGI-HTTP-Version instead.
Cheers,
Ben.
ben@algroup.co.uk
Technical Director URL: http://www.algroup.co.uk/Apache-SSL
A.L. Digital Ltd, Apache Group member (http://www.apache.org)
London, England. Apache-SSL author
